
BareMetalAudio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001888  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b70  08001b70  00011b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b74  08001b74  00011b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001b88  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  20000000  20000000  00030000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006e29  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001100  00000000  00000000  00026e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005c0  00000000  00000000  00027f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000528  00000000  00000000  00028528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003487e  00000000  00000000  00028a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000686f  00000000  00000000  0005d2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f5f8  00000000  00000000  00063b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b3135  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001570  00000000  00000000  001b3188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001b08 	.word	0x08001b08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001b08 	.word	0x08001b08

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <MX_GPIO_Init+0x6c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_GPIO_Init+0x6c>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x6c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	58024400 	.word	0x58024400

08000348 <delay_cycles>:
};
// Global variable to hold the core clock speed in Hertz.
//uint32_t SystemCoreClock = 8000000;
// Simple imprecise delay method.
void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e003      	b.n	800035e <delay_cycles+0x16>
 8000356:	bf00      	nop
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3301      	adds	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	429a      	cmp	r2, r3
 8000364:	d3f7      	bcc.n	8000356 <delay_cycles+0xe>
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fa54 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f8a4 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f7ff ffaa 	bl	80002d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  // Enable peripherals clocks: GPIOA, DMA, DAC, TIM6, SYSCFG.
  RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <main+0x128>)
 8000386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038a:	4a44      	ldr	r2, [pc, #272]	; (800049c <main+0x128>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  RCC->AHB4ENR |= RCC_AHB4ENR_GPIOAEN;
 8000394:	4b41      	ldr	r3, [pc, #260]	; (800049c <main+0x128>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	4a40      	ldr	r2, [pc, #256]	; (800049c <main+0x128>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  RCC->APB1LENR |= RCC_APB1LENR_DAC12EN | RCC_APB1LENR_TIM6EN;
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <main+0x128>)
 80003a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80003aa:	493c      	ldr	r1, [pc, #240]	; (800049c <main+0x128>)
 80003ac:	4b3c      	ldr	r3, [pc, #240]	; (80004a0 <main+0x12c>)
 80003ae:	4313      	orrs	r3, r2
 80003b0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  RCC->APB4ENR |= RCC_APB4ENR_SYSCFGEN;
 80003b4:	4b39      	ldr	r3, [pc, #228]	; (800049c <main+0x128>)
 80003b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80003ba:	4a38      	ldr	r2, [pc, #224]	; (800049c <main+0x128>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  // Pin A4: analog mode. (PA4 = DAC1, Channel 1)
  GPIOA->MODER    &= ~( 0x3 << ( 4 * 2 ) );
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <main+0x130>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <main+0x130>)
 80003ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003ce:	6013      	str	r3, [r2, #0]
  GPIOA->MODER    |=  ( 0x3 << ( 4 * 2 ) );
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <main+0x130>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a33      	ldr	r2, [pc, #204]	; (80004a4 <main+0x130>)
 80003d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003da:	6013      	str	r3, [r2, #0]

  // enable & config DMA:
  DMA1_Stream0 -> PAR = (uint32_t) &(DAC1->DHR12R1);
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <main+0x134>)
 80003de:	4a33      	ldr	r2, [pc, #204]	; (80004ac <main+0x138>)
 80003e0:	609a      	str	r2, [r3, #8]
  DMA1_Stream0 -> M0AR = ( uint32_t )&SINE_WAVE;
 80003e2:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <main+0x134>)
 80003e4:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <main+0x13c>)
 80003e6:	60da      	str	r2, [r3, #12]
  DMA1_Stream0 -> NDTR = ( uint16_t )SINE_SAMPLES;
 80003e8:	2320      	movs	r3, #32
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <main+0x134>)
 80003ee:	605a      	str	r2, [r3, #4]
  DMA1_Stream0 -> CR = 0U;				// CLEAR
 80003f0:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <main+0x134>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
  DMA1_Stream0 -> CR |= DMA_SxCR_DIR_0 | DMA_SxCR_MINC | DMA_SxCR_PL; 	// mem to periph, mem increment, medium PrioLevel
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <main+0x134>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	492b      	ldr	r1, [pc, #172]	; (80004a8 <main+0x134>)
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <main+0x140>)
 80003fe:	4313      	orrs	r3, r2
 8000400:	600b      	str	r3, [r1, #0]
  // Enable DMA1 Stream 0.
  // Note: the transfer won't actually start here, because
  // the DAC peripheral is not sending DMA requests yet and
  // DMAMUX is not routed from DAC req -> channel_0 req input (starts DMA stream 0).
  DMA1_Stream0 -> CR |= DMA_SxCR_EN;
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <main+0x134>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <main+0x134>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6013      	str	r3, [r2, #0]
  // Use DMAMux1 to route a DMA request line to the DMA channel.
  // PAGE 465 RM
  //DMAMUX1 channels 0 to 7 are connected to DMA1 channels 0 to 7
  //DMAMUX1 channels 8 to 15 are connected to DMA2 channels 0 to 7
  //DMAMUX2 channels 0 to 7 are connected to BDMA channels 0 to 7
  DMAMUX1_Channel0->CCR  = (67 << DMAMUX_CxCR_DMAREQ_ID_Pos);  	// dac_ch1_dma
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <main+0x144>)
 8000410:	2243      	movs	r2, #67	; 0x43
 8000412:	601a      	str	r2, [r3, #0]

  // TIM6 configuration. This timer will set the frequency
  // at which the DAC peripheral requests DMA transfers.
  // Set prescaler and autoreload for a 440Hz sine wave.
  TIM6 -> PSC = 0u;
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <main+0x148>)
 8000416:	2200      	movs	r2, #0
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6 -> ARR = ( SystemCoreClock / ( 440 * SINE_SAMPLES ) );
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <main+0x14c>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	2320      	movs	r3, #32
 8000420:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8000424:	fb01 f303 	mul.w	r3, r1, r3
 8000428:	4924      	ldr	r1, [pc, #144]	; (80004bc <main+0x148>)
 800042a:	fbb2 f3f3 	udiv	r3, r2, r3
 800042e:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIM6->CR2 &= ~( TIM_CR2_MMS ); // master mode selection page 1607 RM
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <main+0x148>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <main+0x148>)
 8000436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800043a:	6053      	str	r3, [r2, #4]
  TIM6->CR2 |=  ( 0x2 << TIM_CR2_MMS_Pos ); // trigger output = on Update (to trigger DAC or other things)
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <main+0x148>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <main+0x148>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6053      	str	r3, [r2, #4]
  TIM6->CR1 |=  ( TIM_CR1_CEN ); // Start the timer.
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <main+0x148>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <main+0x148>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]


  // DAC configuration.
  // Set trigger sources to TIM6 TRGO (TRiGger Output).
  DAC1 -> CR &= ~(DAC_CR_TSEL1); // PAGE 1074 rm
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <main+0x150>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a1a      	ldr	r2, [pc, #104]	; (80004c4 <main+0x150>)
 800045a:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 800045e:	6013      	str	r3, [r2, #0]
  DAC1 -> CR |=	5; // dac_chx_trg5 for timer 6
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <main+0x150>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <main+0x150>)
 8000466:	f043 0305 	orr.w	r3, r3, #5
 800046a:	6013      	str	r3, [r2, #0]
  // Enable DAC DMA requests for dac_channel 1.
  DAC1 -> CR |= DAC_CR_DMAEN1;
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <main+0x150>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <main+0x150>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	6013      	str	r3, [r2, #0]
  // Enable DAC channel 1.
  DAC1->CR  |=  ( DAC_CR_EN1 );
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <main+0x150>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <main+0x150>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6013      	str	r3, [r2, #0]
  delay_cycles( 1000 );
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f7ff ff5e 	bl	8000348 <delay_cycles>
  // The DMA stream and timer are both already on, so the
  // DMA transfer will start as soon as the DAC peripheral
  // starts making requests. The DAC peripheral will make a
  // request every time that TIM6 ticks over, but only after
  // this 'trigger enable' bit is set.
  DAC1 -> CR |= DAC_CR_TEN1;	// trigger enable
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <main+0x150>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <main+0x150>)
 8000492:	f043 0302 	orr.w	r3, r3, #2
 8000496:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000498:	e7fe      	b.n	8000498 <main+0x124>
 800049a:	bf00      	nop
 800049c:	58024400 	.word	0x58024400
 80004a0:	20000010 	.word	0x20000010
 80004a4:	58020000 	.word	0x58020000
 80004a8:	40020010 	.word	0x40020010
 80004ac:	40007408 	.word	0x40007408
 80004b0:	08001b20 	.word	0x08001b20
 80004b4:	00030440 	.word	0x00030440
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40001000 	.word	0x40001000
 80004c0:	24000000 	.word	0x24000000
 80004c4:	40007400 	.word	0x40007400

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09e      	sub	sp, #120	; 0x78
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004d2:	224c      	movs	r2, #76	; 0x4c
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fb0e 	bl	8001af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	2220      	movs	r2, #32
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fb07 	bl	8001af8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 fb1c 	bl	8000b28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	4b49      	ldr	r3, [pc, #292]	; (800061c <SystemClock_Config+0x154>)
 80004f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f8:	4a48      	ldr	r2, [pc, #288]	; (800061c <SystemClock_Config+0x154>)
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000500:	4b46      	ldr	r3, [pc, #280]	; (800061c <SystemClock_Config+0x154>)
 8000502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	4b45      	ldr	r3, [pc, #276]	; (8000620 <SystemClock_Config+0x158>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a44      	ldr	r2, [pc, #272]	; (8000620 <SystemClock_Config+0x158>)
 8000510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b42      	ldr	r3, [pc, #264]	; (8000620 <SystemClock_Config+0x158>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000522:	bf00      	nop
 8000524:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <SystemClock_Config+0x158>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000530:	d1f8      	bne.n	8000524 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <SystemClock_Config+0x15c>)
 8000534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000538:	4a3a      	ldr	r2, [pc, #232]	; (8000624 <SystemClock_Config+0x15c>)
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <SystemClock_Config+0x15c>)
 8000544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	4b32      	ldr	r3, [pc, #200]	; (8000620 <SystemClock_Config+0x158>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a31      	ldr	r2, [pc, #196]	; (8000620 <SystemClock_Config+0x158>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <SystemClock_Config+0x158>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <SystemClock_Config+0x154>)
 800056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056e:	4a2b      	ldr	r2, [pc, #172]	; (800061c <SystemClock_Config+0x154>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0x154>)
 8000578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000582:	bf00      	nop
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0x158>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800058c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000590:	d1f8      	bne.n	8000584 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	2302      	movs	r3, #2
 80005a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005a8:	2350      	movs	r3, #80	; 0x50
 80005aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005b8:	230c      	movs	r3, #12
 80005ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005bc:	2300      	movs	r3, #0
 80005be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fae7 	bl	8000b9c <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80005d4:	f000 f828 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	233f      	movs	r3, #63	; 0x3f
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2303      	movs	r3, #3
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e4:	2308      	movs	r3, #8
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ec:	2340      	movs	r3, #64	; 0x40
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fef9 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800060c:	f000 f80c 	bl	8000628 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000610:	f001 f8a8 	bl	8001764 <HAL_RCC_EnableCSS>
}
 8000614:	bf00      	nop
 8000616:	3778      	adds	r7, #120	; 0x78
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58000400 	.word	0x58000400
 8000620:	58024800 	.word	0x58024800
 8000624:	58024400 	.word	0x58024400

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x30>)
 800063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x30>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x30>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	58024400 	.word	0x58024400

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800066c:	f001 fa04 	bl	8001a78 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x8>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f926 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <SystemInit+0xe4>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <SystemInit+0xe4>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <SystemInit+0xe8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	2b06      	cmp	r3, #6
 80006de:	d807      	bhi.n	80006f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e0:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <SystemInit+0xe8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f023 030f 	bic.w	r3, r3, #15
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <SystemInit+0xe8>)
 80006ea:	f043 0307 	orr.w	r3, r3, #7
 80006ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f0:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <SystemInit+0xec>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <SystemInit+0xec>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemInit+0xec>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <SystemInit+0xec>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4929      	ldr	r1, [pc, #164]	; (80007ac <SystemInit+0xec>)
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <SystemInit+0xf0>)
 800070a:	4013      	ands	r3, r2
 800070c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemInit+0xe8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <SystemInit+0xe8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 030f 	bic.w	r3, r3, #15
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0xe8>)
 8000724:	f043 0307 	orr.w	r3, r3, #7
 8000728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <SystemInit+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <SystemInit+0xec>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <SystemInit+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <SystemInit+0xec>)
 800073e:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <SystemInit+0xf4>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <SystemInit+0xec>)
 8000744:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <SystemInit+0xf8>)
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <SystemInit+0xec>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <SystemInit+0xfc>)
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <SystemInit+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <SystemInit+0xec>)
 8000756:	4a19      	ldr	r2, [pc, #100]	; (80007bc <SystemInit+0xfc>)
 8000758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <SystemInit+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <SystemInit+0xec>)
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <SystemInit+0xfc>)
 8000764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0xec>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <SystemInit+0xec>)
 8000772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <SystemInit+0xec>)
 800077a:	2200      	movs	r2, #0
 800077c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <SystemInit+0x100>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <SystemInit+0x104>)
 8000784:	4013      	ands	r3, r2
 8000786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800078a:	d202      	bcs.n	8000792 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <SystemInit+0x108>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <SystemInit+0x10c>)
 8000794:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000798:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	52002000 	.word	0x52002000
 80007ac:	58024400 	.word	0x58024400
 80007b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b4:	02020200 	.word	0x02020200
 80007b8:	01ff0000 	.word	0x01ff0000
 80007bc:	01010280 	.word	0x01010280
 80007c0:	5c001000 	.word	0x5c001000
 80007c4:	ffff0000 	.word	0xffff0000
 80007c8:	51008108 	.word	0x51008108
 80007cc:	52004000 	.word	0x52004000

080007d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff ff74 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	; (8000810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	; (800081c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f001 f957 	bl	8001ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000802:	f7ff fdb7 	bl	8000374 <main>
  bx  lr
 8000806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800080c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000810:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000814:	08001b78 	.word	0x08001b78
  ldr r2, =_sbss
 8000818:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800081c:	24000030 	.word	0x24000030

08000820 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC3_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082a:	2003      	movs	r0, #3
 800082c:	f000 f94a 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000830:	f000 ffa8 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8000834:	4602      	mov	r2, r0
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_Init+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	4913      	ldr	r1, [pc, #76]	; (8000890 <HAL_Init+0x6c>)
 8000842:	5ccb      	ldrb	r3, [r1, r3]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	fa22 f303 	lsr.w	r3, r2, r3
 800084c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_Init+0x68>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_Init+0x6c>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	fa22 f303 	lsr.w	r3, r2, r3
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <HAL_Init+0x70>)
 8000866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_Init+0x74>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f814 	bl	800089c <HAL_InitTick>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e002      	b.n	8000884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800087e:	f7ff fed9 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400
 8000890:	08001b60 	.word	0x08001b60
 8000894:	24000004 	.word	0x24000004
 8000898:	24000000 	.word	0x24000000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e021      	b.n	80008f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_InitTick+0x64>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_InitTick+0x60>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f921 	bl	8000b0e <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f8f9 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x68>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2400000c 	.word	0x2400000c
 8000900:	24000000 	.word	0x24000000
 8000904:	24000008 	.word	0x24000008

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2400000c 	.word	0x2400000c
 800092c:	2400002c 	.word	0x2400002c

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2400002c 	.word	0x2400002c

08000948 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetREVID+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	0c1b      	lsrs	r3, r3, #16
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	5c001000 	.word	0x5c001000

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	4313      	orrs	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00
 80009a4:	05fa0000 	.word	0x05fa0000

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff47 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff90 	bl	8000a18 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5f 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb2 	bl	8000a80 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_PWREx_ConfigSupply+0x70>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d00a      	beq.n	8000b52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_PWREx_ConfigSupply+0x70>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d001      	beq.n	8000b4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e01f      	b.n	8000b8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e01d      	b.n	8000b8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_PWREx_ConfigSupply+0x70>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f023 0207 	bic.w	r2, r3, #7
 8000b5a:	490f      	ldr	r1, [pc, #60]	; (8000b98 <HAL_PWREx_ConfigSupply+0x70>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000b62:	f7ff fee5 	bl	8000930 <HAL_GetTick>
 8000b66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b68:	e009      	b.n	8000b7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000b6a:	f7ff fee1 	bl	8000930 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b78:	d901      	bls.n	8000b7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e007      	b.n	8000b8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_PWREx_ConfigSupply+0x70>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	d1ee      	bne.n	8000b6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024800 	.word	0x58024800

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f000 bc1d 	b.w	80013ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 8087 	beq.w	8000ccc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bbe:	4b99      	ldr	r3, [pc, #612]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bc8:	4b96      	ldr	r3, [pc, #600]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	2b10      	cmp	r3, #16
 8000bd2:	d007      	beq.n	8000be4 <HAL_RCC_OscConfig+0x48>
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	2b18      	cmp	r3, #24
 8000bd8:	d110      	bne.n	8000bfc <HAL_RCC_OscConfig+0x60>
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d10b      	bne.n	8000bfc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d06c      	beq.n	8000cca <HAL_RCC_OscConfig+0x12e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d168      	bne.n	8000cca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e3f6      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d106      	bne.n	8000c14 <HAL_RCC_OscConfig+0x78>
 8000c06:	4b87      	ldr	r3, [pc, #540]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a86      	ldr	r2, [pc, #536]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e02e      	b.n	8000c72 <HAL_RCC_OscConfig+0xd6>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10c      	bne.n	8000c36 <HAL_RCC_OscConfig+0x9a>
 8000c1c:	4b81      	ldr	r3, [pc, #516]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a80      	ldr	r2, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b7e      	ldr	r3, [pc, #504]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a7d      	ldr	r2, [pc, #500]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e01d      	b.n	8000c72 <HAL_RCC_OscConfig+0xd6>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3e:	d10c      	bne.n	8000c5a <HAL_RCC_OscConfig+0xbe>
 8000c40:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e00b      	b.n	8000c72 <HAL_RCC_OscConfig+0xd6>
 8000c5a:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a71      	ldr	r2, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d013      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fe59 	bl	8000930 <HAL_GetTick>
 8000c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c82:	f7ff fe55 	bl	8000930 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b64      	cmp	r3, #100	; 0x64
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e3aa      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c94:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0xe6>
 8000ca0:	e014      	b.n	8000ccc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fe45 	bl	8000930 <HAL_GetTick>
 8000ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000caa:	f7ff fe41 	bl	8000930 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b64      	cmp	r3, #100	; 0x64
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e396      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cbc:	4b59      	ldr	r3, [pc, #356]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f0      	bne.n	8000caa <HAL_RCC_OscConfig+0x10e>
 8000cc8:	e000      	b.n	8000ccc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80cb 	beq.w	8000e70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cda:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ce2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ce4:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_RCC_OscConfig+0x164>
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	2b18      	cmp	r3, #24
 8000cf4:	d156      	bne.n	8000da4 <HAL_RCC_OscConfig+0x208>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d151      	bne.n	8000da4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d00:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_RCC_OscConfig+0x17c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e368      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 0219 	bic.w	r2, r3, #25
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	493f      	ldr	r1, [pc, #252]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000d2a:	f7ff fe01 	bl	8000930 <HAL_GetTick>
 8000d2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fdfd 	bl	8000930 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e352      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d44:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	f7ff fdfa 	bl	8000948 <HAL_GetREVID>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f241 0203 	movw	r2, #4099	; 0x1003
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d817      	bhi.n	8000d8e <HAL_RCC_OscConfig+0x1f2>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b40      	cmp	r3, #64	; 0x40
 8000d64:	d108      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1dc>
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d76:	e07b      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	031b      	lsls	r3, r3, #12
 8000d86:	4927      	ldr	r1, [pc, #156]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d8c:	e070      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	061b      	lsls	r3, r3, #24
 8000d9c:	4921      	ldr	r1, [pc, #132]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000da2:	e065      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d048      	beq.n	8000e3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 0219 	bic.w	r2, r3, #25
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	491a      	ldr	r1, [pc, #104]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fdb7 	bl	8000930 <HAL_GetTick>
 8000dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fdb3 	bl	8000930 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e308      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	f7ff fdb0 	bl	8000948 <HAL_GetREVID>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f241 0203 	movw	r2, #4099	; 0x1003
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d81a      	bhi.n	8000e28 <HAL_RCC_OscConfig+0x28c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	2b40      	cmp	r3, #64	; 0x40
 8000df8:	d108      	bne.n	8000e0c <HAL_RCC_OscConfig+0x270>
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6053      	str	r3, [r2, #4]
 8000e0a:	e031      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	031b      	lsls	r3, r3, #12
 8000e1a:	4902      	ldr	r1, [pc, #8]	; (8000e24 <HAL_RCC_OscConfig+0x288>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	e026      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
 8000e22:	bf00      	nop
 8000e24:	58024400 	.word	0x58024400
 8000e28:	4b9a      	ldr	r3, [pc, #616]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	061b      	lsls	r3, r3, #24
 8000e36:	4997      	ldr	r1, [pc, #604]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
 8000e3c:	e018      	b.n	8000e70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e3e:	4b95      	ldr	r3, [pc, #596]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a94      	ldr	r2, [pc, #592]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fd71 	bl	8000930 <HAL_GetTick>
 8000e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fd6d 	bl	8000930 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e2c2      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e64:	4b8b      	ldr	r3, [pc, #556]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f0      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80a9 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e7e:	4b85      	ldr	r3, [pc, #532]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e88:	4b82      	ldr	r3, [pc, #520]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d007      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x308>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b18      	cmp	r3, #24
 8000e98:	d13a      	bne.n	8000f10 <HAL_RCC_OscConfig+0x374>
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d135      	bne.n	8000f10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ea4:	4b7b      	ldr	r3, [pc, #492]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <HAL_RCC_OscConfig+0x320>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	2b80      	cmp	r3, #128	; 0x80
 8000eb6:	d001      	beq.n	8000ebc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e296      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ebc:	f7ff fd44 	bl	8000948 <HAL_GetREVID>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d817      	bhi.n	8000efa <HAL_RCC_OscConfig+0x35e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d108      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x348>
 8000ed2:	4b70      	ldr	r3, [pc, #448]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000eda:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ee0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ee2:	e075      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	069b      	lsls	r3, r3, #26
 8000ef2:	4968      	ldr	r1, [pc, #416]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ef8:	e06a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000efa:	4b66      	ldr	r3, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	061b      	lsls	r3, r3, #24
 8000f08:	4962      	ldr	r1, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f0e:	e05f      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d042      	beq.n	8000f9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000f18:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f24:	f7ff fd04 	bl	8000930 <HAL_GetTick>
 8000f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fd00 	bl	8000930 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e255      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f4a:	f7ff fcfd 	bl	8000948 <HAL_GetREVID>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d817      	bhi.n	8000f88 <HAL_RCC_OscConfig+0x3ec>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	d108      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3d6>
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000f68:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f6e:	6053      	str	r3, [r2, #4]
 8000f70:	e02e      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	069b      	lsls	r3, r3, #26
 8000f80:	4944      	ldr	r1, [pc, #272]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
 8000f86:	e023      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
 8000f88:	4b42      	ldr	r3, [pc, #264]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	493f      	ldr	r1, [pc, #252]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60cb      	str	r3, [r1, #12]
 8000f9c:	e018      	b.n	8000fd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000faa:	f7ff fcc1 	bl	8000930 <HAL_GetTick>
 8000fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fcbd 	bl	8000930 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e212      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000fc4:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d036      	beq.n	800104a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d019      	beq.n	8001018 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fc9e 	bl	8000930 <HAL_GetTick>
 8000ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc9a 	bl	8000930 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1ef      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 800100c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x45c>
 8001016:	e018      	b.n	800104a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 800101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001024:	f7ff fc84 	bl	8000930 <HAL_GetTick>
 8001028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fc80 	bl	8000930 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1d5      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8001040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d039      	beq.n	80010ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01c      	beq.n	8001098 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800106a:	f7ff fc61 	bl	8000930 <HAL_GetTick>
 800106e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001072:	f7ff fc5d 	bl	8000930 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e1b2      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_RCC_OscConfig+0x4f8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x4d6>
 8001090:	e01b      	b.n	80010ca <HAL_RCC_OscConfig+0x52e>
 8001092:	bf00      	nop
 8001094:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001098:	4b9b      	ldr	r3, [pc, #620]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a9a      	ldr	r2, [pc, #616]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800109e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc44 	bl	8000930 <HAL_GetTick>
 80010a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80010ac:	f7ff fc40 	bl	8000930 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e195      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010be:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8081 	beq.w	80011da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010d8:	4b8c      	ldr	r3, [pc, #560]	; (800130c <HAL_RCC_OscConfig+0x770>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a8b      	ldr	r2, [pc, #556]	; (800130c <HAL_RCC_OscConfig+0x770>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80010e4:	f7ff fc24 	bl	8000930 <HAL_GetTick>
 80010e8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010ec:	f7ff fc20 	bl	8000930 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e175      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <HAL_RCC_OscConfig+0x770>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <HAL_RCC_OscConfig+0x584>
 8001112:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001116:	4a7c      	ldr	r2, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6713      	str	r3, [r2, #112]	; 0x70
 800111e:	e02d      	b.n	800117c <HAL_RCC_OscConfig+0x5e0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0x5a6>
 8001128:	4b77      	ldr	r3, [pc, #476]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112c:	4a76      	ldr	r2, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	6713      	str	r3, [r2, #112]	; 0x70
 8001134:	4b74      	ldr	r3, [pc, #464]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001138:	4a73      	ldr	r2, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	6713      	str	r3, [r2, #112]	; 0x70
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x5e0>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c8>
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800114c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6713      	str	r3, [r2, #112]	; 0x70
 8001156:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115a:	4a6b      	ldr	r2, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6713      	str	r3, [r2, #112]	; 0x70
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0x5e0>
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001168:	4a67      	ldr	r2, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6713      	str	r3, [r2, #112]	; 0x70
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001174:	4a64      	ldr	r2, [pc, #400]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001176:	f023 0304 	bic.w	r3, r3, #4
 800117a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d015      	beq.n	80011b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff fbd4 	bl	8000930 <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800118c:	f7ff fbd0 	bl	8000930 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e123      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011a2:	4b59      	ldr	r3, [pc, #356]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ee      	beq.n	800118c <HAL_RCC_OscConfig+0x5f0>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fbbe 	bl	8000930 <HAL_GetTick>
 80011b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b8:	f7ff fbba 	bl	8000930 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e10d      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011ce:	4b4e      	ldr	r3, [pc, #312]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1ee      	bne.n	80011b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8102 	beq.w	80013e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80011e4:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011ec:	2b18      	cmp	r3, #24
 80011ee:	f000 80bd 	beq.w	800136c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	f040 809e 	bne.w	8001338 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a41      	ldr	r2, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fb92 	bl	8000930 <HAL_GetTick>
 800120c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001210:	f7ff fb8e 	bl	8000930 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e0e3      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_RCC_OscConfig+0x774>)
 8001234:	4013      	ands	r3, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	430a      	orrs	r2, r1
 8001242:	4931      	ldr	r1, [pc, #196]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001244:	4313      	orrs	r3, r2
 8001246:	628b      	str	r3, [r1, #40]	; 0x28
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	3b01      	subs	r3, #1
 800124e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001256:	3b01      	subs	r3, #1
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	b29b      	uxth	r3, r3
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	3b01      	subs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001270:	3b01      	subs	r3, #1
 8001272:	061b      	lsls	r3, r3, #24
 8001274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001278:	4923      	ldr	r1, [pc, #140]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800127a:	4313      	orrs	r3, r2
 800127c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	4a21      	ldr	r2, [pc, #132]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x778>)
 8001290:	4013      	ands	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	491b      	ldr	r1, [pc, #108]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 800129a:	4313      	orrs	r3, r2
 800129c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f023 020c 	bic.w	r2, r3, #12
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4917      	ldr	r1, [pc, #92]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f023 0202 	bic.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	4912      	ldr	r1, [pc, #72]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_RCC_OscConfig+0x76c>)
 80012f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb17 	bl	8000930 <HAL_GetTick>
 8001302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001304:	e011      	b.n	800132a <HAL_RCC_OscConfig+0x78e>
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400
 800130c:	58024800 	.word	0x58024800
 8001310:	fffffc0c 	.word	0xfffffc0c
 8001314:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fb0a 	bl	8000930 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e05f      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x77c>
 8001336:	e057      	b.n	80013e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 800133e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff faf4 	bl	8000930 <HAL_GetTick>
 8001348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff faf0 	bl	8000930 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e045      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x7b0>
 800136a:	e03d      	b.n	80013e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_RCC_OscConfig+0x858>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2b01      	cmp	r3, #1
 800137e:	d031      	beq.n	80013e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d12a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d122      	bne.n	80013e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d11a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	0a5b      	lsrs	r3, r3, #9
 80013b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d111      	bne.n	80013e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d108      	bne.n	80013e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0e1b      	lsrs	r3, r3, #24
 80013d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3730      	adds	r7, #48	; 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	58024400 	.word	0x58024400

080013f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e19c      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b87      	ldr	r3, [pc, #540]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 020f 	bic.w	r2, r3, #15
 8001422:	4985      	ldr	r1, [pc, #532]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b83      	ldr	r3, [pc, #524]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e184      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d010      	beq.n	800146a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	4b7b      	ldr	r3, [pc, #492]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001454:	429a      	cmp	r2, r3
 8001456:	d908      	bls.n	800146a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001458:	4b78      	ldr	r3, [pc, #480]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4975      	ldr	r1, [pc, #468]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001466:	4313      	orrs	r3, r2
 8001468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d010      	beq.n	8001498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	4b70      	ldr	r3, [pc, #448]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001482:	429a      	cmp	r2, r3
 8001484:	d908      	bls.n	8001498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001486:	4b6d      	ldr	r3, [pc, #436]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	496a      	ldr	r1, [pc, #424]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001494:	4313      	orrs	r3, r2
 8001496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d010      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	4b64      	ldr	r3, [pc, #400]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d908      	bls.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	495e      	ldr	r1, [pc, #376]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d010      	beq.n	80014f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014de:	429a      	cmp	r2, r3
 80014e0:	d908      	bls.n	80014f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4953      	ldr	r1, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d010      	beq.n	8001522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	429a      	cmp	r2, r3
 800150e:	d908      	bls.n	8001522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f023 020f 	bic.w	r2, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4947      	ldr	r1, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800151e:	4313      	orrs	r3, r2
 8001520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d055      	beq.n	80015da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4940      	ldr	r1, [pc, #256]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800153c:	4313      	orrs	r3, r2
 800153e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d107      	bne.n	8001558 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d121      	bne.n	8001598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0f6      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d115      	bne.n	8001598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0ea      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0de      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d6      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f023 0207 	bic.w	r2, r3, #7
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4925      	ldr	r1, [pc, #148]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff f9c1 	bl	8000930 <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	f7ff f9bd 	bl	8000930 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0be      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d1eb      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d010      	beq.n	8001608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d208      	bcs.n	8001608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f023 020f 	bic.w	r2, r3, #15
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x244>)
 8001604:	4313      	orrs	r3, r2
 8001606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d214      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 020f 	bic.w	r2, r3, #15
 800161e:	4906      	ldr	r1, [pc, #24]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_RCC_ClockConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e086      	b.n	8001746 <HAL_RCC_ClockConfig+0x34e>
 8001638:	52002000 	.word	0x52002000
 800163c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d010      	beq.n	800166e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001658:	429a      	cmp	r2, r3
 800165a:	d208      	bcs.n	800166e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4939      	ldr	r1, [pc, #228]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 800166a:	4313      	orrs	r3, r2
 800166c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d010      	beq.n	800169c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001686:	429a      	cmp	r2, r3
 8001688:	d208      	bcs.n	800169c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	492e      	ldr	r1, [pc, #184]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 8001698:	4313      	orrs	r3, r2
 800169a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d208      	bcs.n	80016ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4922      	ldr	r1, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d208      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4917      	ldr	r1, [pc, #92]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f8:	f000 f844 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	4912      	ldr	r1, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x35c>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_RCC_ClockConfig+0x358>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_RCC_ClockConfig+0x35c>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x360>)
 800172e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x364>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x368>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f8ae 	bl	800089c <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	58024400 	.word	0x58024400
 8001754:	08001b60 	.word	0x08001b60
 8001758:	24000004 	.word	0x24000004
 800175c:	24000000 	.word	0x24000000
 8001760:	24000008 	.word	0x24000008

08001764 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_EnableCSS+0x1c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_RCC_EnableCSS+0x1c>)
 800176e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	58024400 	.word	0x58024400

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178a:	4bb3      	ldr	r3, [pc, #716]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001792:	2b18      	cmp	r3, #24
 8001794:	f200 8155 	bhi.w	8001a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	08001805 	.word	0x08001805
 80017a4:	08001a43 	.word	0x08001a43
 80017a8:	08001a43 	.word	0x08001a43
 80017ac:	08001a43 	.word	0x08001a43
 80017b0:	08001a43 	.word	0x08001a43
 80017b4:	08001a43 	.word	0x08001a43
 80017b8:	08001a43 	.word	0x08001a43
 80017bc:	08001a43 	.word	0x08001a43
 80017c0:	0800182b 	.word	0x0800182b
 80017c4:	08001a43 	.word	0x08001a43
 80017c8:	08001a43 	.word	0x08001a43
 80017cc:	08001a43 	.word	0x08001a43
 80017d0:	08001a43 	.word	0x08001a43
 80017d4:	08001a43 	.word	0x08001a43
 80017d8:	08001a43 	.word	0x08001a43
 80017dc:	08001a43 	.word	0x08001a43
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001a43 	.word	0x08001a43
 80017e8:	08001a43 	.word	0x08001a43
 80017ec:	08001a43 	.word	0x08001a43
 80017f0:	08001a43 	.word	0x08001a43
 80017f4:	08001a43 	.word	0x08001a43
 80017f8:	08001a43 	.word	0x08001a43
 80017fc:	08001a43 	.word	0x08001a43
 8001800:	08001837 	.word	0x08001837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001804:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001810:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	4a90      	ldr	r2, [pc, #576]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001822:	e111      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001824:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001826:	61bb      	str	r3, [r7, #24]
    break;
 8001828:	e10e      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800182a:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800182c:	61bb      	str	r3, [r7, #24]
    break;
 800182e:	e10b      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001832:	61bb      	str	r3, [r7, #24]
    break;
 8001834:	e108      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001840:	4b85      	ldr	r3, [pc, #532]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800184c:	4b82      	ldr	r3, [pc, #520]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001856:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80e1 	beq.w	8001a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b02      	cmp	r3, #2
 800187e:	f000 8083 	beq.w	8001988 <HAL_RCC_GetSysClockFreq+0x204>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f200 80a1 	bhi.w	80019cc <HAL_RCC_GetSysClockFreq+0x248>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x114>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d056      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001896:	e099      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d02d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	4a6b      	ldr	r2, [pc, #428]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018de:	ed97 6a02 	vldr	s12, [r7, #8]
 80018e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80018e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80018fe:	e087      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800190e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001922:	ed97 6a02 	vldr	s12, [r7, #8]
 8001926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800192a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800192e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001942:	e065      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001966:	ed97 6a02 	vldr	s12, [r7, #8]
 800196a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800196e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800197a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001986:	e043      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80019ca:	e021      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80019da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80019f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80019f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	0a5b      	lsrs	r3, r3, #9
 8001a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a34:	ee17 3a90 	vmov	r3, s15
 8001a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001a3a:	e005      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
    break;
 8001a40:	e002      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a44:	61bb      	str	r3, [r7, #24]
    break;
 8001a46:	bf00      	nop
  }

  return sysclockfreq;
 8001a48:	69bb      	ldr	r3, [r7, #24]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	03d09000 	.word	0x03d09000
 8001a60:	003d0900 	.word	0x003d0900
 8001a64:	016e3600 	.word	0x016e3600
 8001a68:	46000000 	.word	0x46000000
 8001a6c:	4c742400 	.word	0x4c742400
 8001a70:	4a742400 	.word	0x4a742400
 8001a74:	4bb71b00 	.word	0x4bb71b00

08001a78 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RCC_NMI_IRQHandler+0x24>)
 8001a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8001a8a:	f000 f809 	bl	8001aa0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_NMI_IRQHandler+0x24>)
 8001a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a94:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400

08001aa0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <__libc_init_array>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	4d0d      	ldr	r5, [pc, #52]	; (8001ae8 <__libc_init_array+0x38>)
 8001ab4:	4c0d      	ldr	r4, [pc, #52]	; (8001aec <__libc_init_array+0x3c>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	2600      	movs	r6, #0
 8001abc:	42a6      	cmp	r6, r4
 8001abe:	d109      	bne.n	8001ad4 <__libc_init_array+0x24>
 8001ac0:	4d0b      	ldr	r5, [pc, #44]	; (8001af0 <__libc_init_array+0x40>)
 8001ac2:	4c0c      	ldr	r4, [pc, #48]	; (8001af4 <__libc_init_array+0x44>)
 8001ac4:	f000 f820 	bl	8001b08 <_init>
 8001ac8:	1b64      	subs	r4, r4, r5
 8001aca:	10a4      	asrs	r4, r4, #2
 8001acc:	2600      	movs	r6, #0
 8001ace:	42a6      	cmp	r6, r4
 8001ad0:	d105      	bne.n	8001ade <__libc_init_array+0x2e>
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad8:	4798      	blx	r3
 8001ada:	3601      	adds	r6, #1
 8001adc:	e7ee      	b.n	8001abc <__libc_init_array+0xc>
 8001ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae2:	4798      	blx	r3
 8001ae4:	3601      	adds	r6, #1
 8001ae6:	e7f2      	b.n	8001ace <__libc_init_array+0x1e>
 8001ae8:	08001b70 	.word	0x08001b70
 8001aec:	08001b70 	.word	0x08001b70
 8001af0:	08001b70 	.word	0x08001b70
 8001af4:	08001b74 	.word	0x08001b74

08001af8 <memset>:
 8001af8:	4402      	add	r2, r0
 8001afa:	4603      	mov	r3, r0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d100      	bne.n	8001b02 <memset+0xa>
 8001b00:	4770      	bx	lr
 8001b02:	f803 1b01 	strb.w	r1, [r3], #1
 8001b06:	e7f9      	b.n	8001afc <memset+0x4>

08001b08 <_init>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr

08001b14 <_fini>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	bf00      	nop
 8001b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1a:	bc08      	pop	{r3}
 8001b1c:	469e      	mov	lr, r3
 8001b1e:	4770      	bx	lr
