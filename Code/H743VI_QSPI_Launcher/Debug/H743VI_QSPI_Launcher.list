
H743VI_QSPI_Launcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  24000498  24000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  240004a0  240004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  240004a4  240004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  240004a8  240004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000f8  2400053c  2400053c  0001053c  2**2
                  ALLOC
  6 .text         00017020  24000634  24000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  24017654  24017654  00037654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000064  2401771c  2401771c  0002771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  24017780  24017780  00027780  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003771c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000158e0  00000000  00000000  0003774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000034a4  00000000  00000000  0004d02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011b8  00000000  00000000  000504d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a40  00000000  00000000  00051688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001afdd  00000000  00000000  0008a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156d85  00000000  00000000  000a50a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fbe2a  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000fc8  00000000  00000000  001fbe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000046b0  00000000  00000000  001fce48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000634 <__do_global_dtors_aux>:
24000634:	b510      	push	{r4, lr}
24000636:	4c05      	ldr	r4, [pc, #20]	; (2400064c <__do_global_dtors_aux+0x18>)
24000638:	7823      	ldrb	r3, [r4, #0]
2400063a:	b933      	cbnz	r3, 2400064a <__do_global_dtors_aux+0x16>
2400063c:	4b04      	ldr	r3, [pc, #16]	; (24000650 <__do_global_dtors_aux+0x1c>)
2400063e:	b113      	cbz	r3, 24000646 <__do_global_dtors_aux+0x12>
24000640:	4804      	ldr	r0, [pc, #16]	; (24000654 <__do_global_dtors_aux+0x20>)
24000642:	f3af 8000 	nop.w
24000646:	2301      	movs	r3, #1
24000648:	7023      	strb	r3, [r4, #0]
2400064a:	bd10      	pop	{r4, pc}
2400064c:	2400053c 	.word	0x2400053c
24000650:	00000000 	.word	0x00000000
24000654:	24017638 	.word	0x24017638

24000658 <frame_dummy>:
24000658:	b508      	push	{r3, lr}
2400065a:	4b03      	ldr	r3, [pc, #12]	; (24000668 <frame_dummy+0x10>)
2400065c:	b11b      	cbz	r3, 24000666 <frame_dummy+0xe>
2400065e:	4903      	ldr	r1, [pc, #12]	; (2400066c <frame_dummy+0x14>)
24000660:	4803      	ldr	r0, [pc, #12]	; (24000670 <frame_dummy+0x18>)
24000662:	f3af 8000 	nop.w
24000666:	bd08      	pop	{r3, pc}
24000668:	00000000 	.word	0x00000000
2400066c:	24000540 	.word	0x24000540
24000670:	24017638 	.word	0x24017638

24000674 <_stack_init>:
24000674:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
24000678:	4770      	bx	lr
2400067a:	bf00      	nop

2400067c <_mainCRTStartup>:
2400067c:	4b17      	ldr	r3, [pc, #92]	; (240006dc <_mainCRTStartup+0x60>)
2400067e:	2b00      	cmp	r3, #0
24000680:	bf08      	it	eq
24000682:	4b13      	ldreq	r3, [pc, #76]	; (240006d0 <_mainCRTStartup+0x54>)
24000684:	469d      	mov	sp, r3
24000686:	f7ff fff5 	bl	24000674 <_stack_init>
2400068a:	2100      	movs	r1, #0
2400068c:	468b      	mov	fp, r1
2400068e:	460f      	mov	r7, r1
24000690:	4813      	ldr	r0, [pc, #76]	; (240006e0 <_mainCRTStartup+0x64>)
24000692:	4a14      	ldr	r2, [pc, #80]	; (240006e4 <_mainCRTStartup+0x68>)
24000694:	1a12      	subs	r2, r2, r0
24000696:	f016 ffc7 	bl	24017628 <memset>
2400069a:	4b0e      	ldr	r3, [pc, #56]	; (240006d4 <_mainCRTStartup+0x58>)
2400069c:	2b00      	cmp	r3, #0
2400069e:	d000      	beq.n	240006a2 <_mainCRTStartup+0x26>
240006a0:	4798      	blx	r3
240006a2:	4b0d      	ldr	r3, [pc, #52]	; (240006d8 <_mainCRTStartup+0x5c>)
240006a4:	2b00      	cmp	r3, #0
240006a6:	d000      	beq.n	240006aa <_mainCRTStartup+0x2e>
240006a8:	4798      	blx	r3
240006aa:	2000      	movs	r0, #0
240006ac:	2100      	movs	r1, #0
240006ae:	0004      	movs	r4, r0
240006b0:	000d      	movs	r5, r1
240006b2:	480d      	ldr	r0, [pc, #52]	; (240006e8 <_mainCRTStartup+0x6c>)
240006b4:	2800      	cmp	r0, #0
240006b6:	d002      	beq.n	240006be <_mainCRTStartup+0x42>
240006b8:	480c      	ldr	r0, [pc, #48]	; (240006ec <_mainCRTStartup+0x70>)
240006ba:	f3af 8000 	nop.w
240006be:	f016 ff8f 	bl	240175e0 <__libc_init_array>
240006c2:	0020      	movs	r0, r4
240006c4:	0029      	movs	r1, r5
240006c6:	f000 facd 	bl	24000c64 <main>
240006ca:	f016 ff75 	bl	240175b8 <exit>
240006ce:	bf00      	nop
240006d0:	00080000 	.word	0x00080000
	...
240006e0:	2400053c 	.word	0x2400053c
240006e4:	24000634 	.word	0x24000634
	...
240006f0:	240004a8 	.word	0x240004a8
240006f4:	240004a8 	.word	0x240004a8
240006f8:	2400053c 	.word	0x2400053c
240006fc:	2400053c 	.word	0x2400053c
24000700:	24000634 	.word	0x24000634

24000704 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
24000704:	b580      	push	{r7, lr}
24000706:	b086      	sub	sp, #24
24000708:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
2400070a:	4b26      	ldr	r3, [pc, #152]	; (240007a4 <Init+0xa0>)
2400070c:	4a26      	ldr	r2, [pc, #152]	; (240007a8 <Init+0xa4>)
2400070e:	601a      	str	r2, [r3, #0]


    SystemInit();
24000710:	f001 fa6a 	bl	24001be8 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
24000714:	4b25      	ldr	r3, [pc, #148]	; (240007ac <Init+0xa8>)
24000716:	4a26      	ldr	r2, [pc, #152]	; (240007b0 <Init+0xac>)
24000718:	609a      	str	r2, [r3, #8]
2400071a:	2300      	movs	r3, #0
2400071c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400071e:	693b      	ldr	r3, [r7, #16]
24000720:	f383 8810 	msr	PRIMASK, r3
}
24000724:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
24000726:	f001 fc8b 	bl	24002040 <HAL_Init>

    SystemClock_Config();
2400072a:	f000 fb45 	bl	24000db8 <SystemClock_Config>

    MX_GPIO_Init();
2400072e:	f000 fa43 	bl	24000bb8 <MX_GPIO_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
24000732:	4b20      	ldr	r3, [pc, #128]	; (240007b4 <Init+0xb0>)
24000734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000736:	4a1f      	ldr	r2, [pc, #124]	; (240007b4 <Init+0xb0>)
24000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400073c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
2400073e:	4b1d      	ldr	r3, [pc, #116]	; (240007b4 <Init+0xb0>)
24000740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000742:	4a1c      	ldr	r2, [pc, #112]	; (240007b4 <Init+0xb0>)
24000744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24000748:	67d3      	str	r3, [r2, #124]	; 0x7c

    if (CSP_QUADSPI_Init() != HAL_OK) {
2400074a:	f000 fd4f 	bl	240011ec <CSP_QUADSPI_Init>
2400074e:	4603      	mov	r3, r0
24000750:	2b00      	cmp	r3, #0
24000752:	d007      	beq.n	24000764 <Init+0x60>
24000754:	2301      	movs	r3, #1
24000756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000758:	68fb      	ldr	r3, [r7, #12]
2400075a:	f383 8810 	msr	PRIMASK, r3
}
2400075e:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000760:	2300      	movs	r3, #0
24000762:	e01a      	b.n	2400079a <Init+0x96>
    }


    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000764:	f000 ff18 	bl	24001598 <CSP_QSPI_EnableMemoryMappedMode>
24000768:	4603      	mov	r3, r0
2400076a:	2b00      	cmp	r3, #0
2400076c:	d007      	beq.n	2400077e <Init+0x7a>
2400076e:	2301      	movs	r3, #1
24000770:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000772:	68bb      	ldr	r3, [r7, #8]
24000774:	f383 8810 	msr	PRIMASK, r3
}
24000778:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400077a:	2300      	movs	r3, #0
2400077c:	e00d      	b.n	2400079a <Init+0x96>
    }

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
2400077e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
24000782:	681b      	ldr	r3, [r3, #0]
24000784:	617b      	str	r3, [r7, #20]
    a++;
24000786:	697b      	ldr	r3, [r7, #20]
24000788:	3301      	adds	r3, #1
2400078a:	617b      	str	r3, [r7, #20]
2400078c:	2301      	movs	r3, #1
2400078e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000790:	687b      	ldr	r3, [r7, #4]
24000792:	f383 8810 	msr	PRIMASK, r3
}
24000796:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24000798:	2301      	movs	r3, #1
}
2400079a:	4618      	mov	r0, r3
2400079c:	3718      	adds	r7, #24
2400079e:	46bd      	mov	sp, r7
240007a0:	bd80      	pop	{r7, pc}
240007a2:	bf00      	nop
240007a4:	e000edf0 	.word	0xe000edf0
240007a8:	a05f0000 	.word	0xa05f0000
240007ac:	e000ed00 	.word	0xe000ed00
240007b0:	24000200 	.word	0x24000200
240007b4:	58024400 	.word	0x58024400

240007b8 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
240007b8:	b580      	push	{r7, lr}
240007ba:	b088      	sub	sp, #32
240007bc:	af00      	add	r7, sp, #0
240007be:	60f8      	str	r0, [r7, #12]
240007c0:	60b9      	str	r1, [r7, #8]
240007c2:	607a      	str	r2, [r7, #4]
240007c4:	2300      	movs	r3, #0
240007c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007c8:	69fb      	ldr	r3, [r7, #28]
240007ca:	f383 8810 	msr	PRIMASK, r3
}
240007ce:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
240007d0:	4815      	ldr	r0, [pc, #84]	; (24000828 <Write+0x70>)
240007d2:	f012 fb16 	bl	24012e02 <HAL_QSPI_Abort>
240007d6:	4603      	mov	r3, r0
240007d8:	2b00      	cmp	r3, #0
240007da:	d007      	beq.n	240007ec <Write+0x34>
240007dc:	2301      	movs	r3, #1
240007de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007e0:	69bb      	ldr	r3, [r7, #24]
240007e2:	f383 8810 	msr	PRIMASK, r3
}
240007e6:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240007e8:	2300      	movs	r3, #0
240007ea:	e019      	b.n	24000820 <Write+0x68>
    }


    if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
240007ec:	68fb      	ldr	r3, [r7, #12]
240007ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
240007f2:	68ba      	ldr	r2, [r7, #8]
240007f4:	4619      	mov	r1, r3
240007f6:	6878      	ldr	r0, [r7, #4]
240007f8:	f000 ffa0 	bl	2400173c <CSP_QSPI_WriteMemory>
240007fc:	4603      	mov	r3, r0
240007fe:	2b00      	cmp	r3, #0
24000800:	d007      	beq.n	24000812 <Write+0x5a>
24000802:	2301      	movs	r3, #1
24000804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000806:	697b      	ldr	r3, [r7, #20]
24000808:	f383 8810 	msr	PRIMASK, r3
}
2400080c:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400080e:	2300      	movs	r3, #0
24000810:	e006      	b.n	24000820 <Write+0x68>
24000812:	2301      	movs	r3, #1
24000814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000816:	693b      	ldr	r3, [r7, #16]
24000818:	f383 8810 	msr	PRIMASK, r3
}
2400081c:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
2400081e:	2301      	movs	r3, #1
}
24000820:	4618      	mov	r0, r3
24000822:	3720      	adds	r7, #32
24000824:	46bd      	mov	sp, r7
24000826:	bd80      	pop	{r7, pc}
24000828:	240005c0 	.word	0x240005c0

2400082c <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
2400082c:	b580      	push	{r7, lr}
2400082e:	b086      	sub	sp, #24
24000830:	af00      	add	r7, sp, #0
24000832:	6078      	str	r0, [r7, #4]
24000834:	6039      	str	r1, [r7, #0]
24000836:	2300      	movs	r3, #0
24000838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400083a:	697b      	ldr	r3, [r7, #20]
2400083c:	f383 8810 	msr	PRIMASK, r3
}
24000840:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
24000842:	4814      	ldr	r0, [pc, #80]	; (24000894 <SectorErase+0x68>)
24000844:	f012 fadd 	bl	24012e02 <HAL_QSPI_Abort>
24000848:	4603      	mov	r3, r0
2400084a:	2b00      	cmp	r3, #0
2400084c:	d007      	beq.n	2400085e <SectorErase+0x32>
2400084e:	2301      	movs	r3, #1
24000850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000852:	693b      	ldr	r3, [r7, #16]
24000854:	f383 8810 	msr	PRIMASK, r3
}
24000858:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400085a:	2300      	movs	r3, #0
2400085c:	e015      	b.n	2400088a <SectorErase+0x5e>
    }


    if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK) {
2400085e:	6839      	ldr	r1, [r7, #0]
24000860:	6878      	ldr	r0, [r7, #4]
24000862:	f000 fe47 	bl	240014f4 <CSP_QSPI_EraseSector>
24000866:	4603      	mov	r3, r0
24000868:	2b00      	cmp	r3, #0
2400086a:	d007      	beq.n	2400087c <SectorErase+0x50>
2400086c:	2301      	movs	r3, #1
2400086e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000870:	68fb      	ldr	r3, [r7, #12]
24000872:	f383 8810 	msr	PRIMASK, r3
}
24000876:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000878:	2300      	movs	r3, #0
2400087a:	e006      	b.n	2400088a <SectorErase+0x5e>
2400087c:	2301      	movs	r3, #1
2400087e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000880:	68bb      	ldr	r3, [r7, #8]
24000882:	f383 8810 	msr	PRIMASK, r3
}
24000886:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24000888:	2301      	movs	r3, #1
}
2400088a:	4618      	mov	r0, r3
2400088c:	3718      	adds	r7, #24
2400088e:	46bd      	mov	sp, r7
24000890:	bd80      	pop	{r7, pc}
24000892:	bf00      	nop
24000894:	240005c0 	.word	0x240005c0

24000898 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int
MassErase(void) {
24000898:	b580      	push	{r7, lr}
2400089a:	b084      	sub	sp, #16
2400089c:	af00      	add	r7, sp, #0
2400089e:	2300      	movs	r3, #0
240008a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008a2:	68fb      	ldr	r3, [r7, #12]
240008a4:	f383 8810 	msr	PRIMASK, r3
}
240008a8:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
240008aa:	4813      	ldr	r0, [pc, #76]	; (240008f8 <MassErase+0x60>)
240008ac:	f012 faa9 	bl	24012e02 <HAL_QSPI_Abort>
240008b0:	4603      	mov	r3, r0
240008b2:	2b00      	cmp	r3, #0
240008b4:	d007      	beq.n	240008c6 <MassErase+0x2e>
240008b6:	2301      	movs	r3, #1
240008b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008ba:	68bb      	ldr	r3, [r7, #8]
240008bc:	f383 8810 	msr	PRIMASK, r3
}
240008c0:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240008c2:	2300      	movs	r3, #0
240008c4:	e013      	b.n	240008ee <MassErase+0x56>
    }


    if (CSP_QSPI_Erase_Chip() != HAL_OK) {
240008c6:	f000 fcc7 	bl	24001258 <CSP_QSPI_Erase_Chip>
240008ca:	4603      	mov	r3, r0
240008cc:	2b00      	cmp	r3, #0
240008ce:	d007      	beq.n	240008e0 <MassErase+0x48>
240008d0:	2301      	movs	r3, #1
240008d2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008d4:	687b      	ldr	r3, [r7, #4]
240008d6:	f383 8810 	msr	PRIMASK, r3
}
240008da:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240008dc:	2300      	movs	r3, #0
240008de:	e006      	b.n	240008ee <MassErase+0x56>
240008e0:	2301      	movs	r3, #1
240008e2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008e4:	683b      	ldr	r3, [r7, #0]
240008e6:	f383 8810 	msr	PRIMASK, r3
}
240008ea:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
240008ec:	2301      	movs	r3, #1
}
240008ee:	4618      	mov	r0, r3
240008f0:	3710      	adds	r7, #16
240008f2:	46bd      	mov	sp, r7
240008f4:	bd80      	pop	{r7, pc}
240008f6:	bf00      	nop
240008f8:	240005c0 	.word	0x240005c0

240008fc <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t
CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
240008fc:	b480      	push	{r7}
240008fe:	b089      	sub	sp, #36	; 0x24
24000900:	af00      	add	r7, sp, #0
24000902:	60f8      	str	r0, [r7, #12]
24000904:	60b9      	str	r1, [r7, #8]
24000906:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
24000908:	68fb      	ldr	r3, [r7, #12]
2400090a:	b2db      	uxtb	r3, r3
2400090c:	f003 0303 	and.w	r3, r3, #3
24000910:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
24000912:	68bb      	ldr	r3, [r7, #8]
24000914:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
24000916:	68fb      	ldr	r3, [r7, #12]
24000918:	f023 0303 	bic.w	r3, r3, #3
2400091c:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
2400091e:	68bb      	ldr	r3, [r7, #8]
24000920:	f003 0303 	and.w	r3, r3, #3
24000924:	2b00      	cmp	r3, #0
24000926:	d005      	beq.n	24000934 <CheckSum+0x38>
24000928:	68bb      	ldr	r3, [r7, #8]
2400092a:	f003 0303 	and.w	r3, r3, #3
2400092e:	f1c3 0304 	rsb	r3, r3, #4
24000932:	e000      	b.n	24000936 <CheckSum+0x3a>
24000934:	2300      	movs	r3, #0
24000936:	68ba      	ldr	r2, [r7, #8]
24000938:	4413      	add	r3, r2
2400093a:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4) {
2400093c:	2300      	movs	r3, #0
2400093e:	61bb      	str	r3, [r7, #24]
24000940:	e0b3      	b.n	24000aaa <CheckSum+0x1ae>
        Val = *(uint32_t*) StartAddress;
24000942:	68fb      	ldr	r3, [r7, #12]
24000944:	681b      	ldr	r3, [r3, #0]
24000946:	617b      	str	r3, [r7, #20]
        if (missalignementAddress) {
24000948:	7ffb      	ldrb	r3, [r7, #31]
2400094a:	2b00      	cmp	r3, #0
2400094c:	d040      	beq.n	240009d0 <CheckSum+0xd4>
            switch (missalignementAddress) {
2400094e:	7ffb      	ldrb	r3, [r7, #31]
24000950:	2b03      	cmp	r3, #3
24000952:	d032      	beq.n	240009ba <CheckSum+0xbe>
24000954:	2b03      	cmp	r3, #3
24000956:	f300 80a2 	bgt.w	24000a9e <CheckSum+0x1a2>
2400095a:	2b01      	cmp	r3, #1
2400095c:	d002      	beq.n	24000964 <CheckSum+0x68>
2400095e:	2b02      	cmp	r3, #2
24000960:	d019      	beq.n	24000996 <CheckSum+0x9a>
24000962:	e09c      	b.n	24000a9e <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000964:	697b      	ldr	r3, [r7, #20]
24000966:	0a1b      	lsrs	r3, r3, #8
24000968:	b2db      	uxtb	r3, r3
2400096a:	461a      	mov	r2, r3
2400096c:	687b      	ldr	r3, [r7, #4]
2400096e:	4413      	add	r3, r2
24000970:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24000972:	697b      	ldr	r3, [r7, #20]
24000974:	0c1b      	lsrs	r3, r3, #16
24000976:	b2db      	uxtb	r3, r3
24000978:	461a      	mov	r2, r3
2400097a:	687b      	ldr	r3, [r7, #4]
2400097c:	4413      	add	r3, r2
2400097e:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24000980:	697b      	ldr	r3, [r7, #20]
24000982:	0e1b      	lsrs	r3, r3, #24
24000984:	b2db      	uxtb	r3, r3
24000986:	461a      	mov	r2, r3
24000988:	687b      	ldr	r3, [r7, #4]
2400098a:	4413      	add	r3, r2
2400098c:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
2400098e:	7ffb      	ldrb	r3, [r7, #31]
24000990:	3b01      	subs	r3, #1
24000992:	77fb      	strb	r3, [r7, #31]
                    break;
24000994:	e083      	b.n	24000a9e <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24000996:	697b      	ldr	r3, [r7, #20]
24000998:	0c1b      	lsrs	r3, r3, #16
2400099a:	b2db      	uxtb	r3, r3
2400099c:	461a      	mov	r2, r3
2400099e:	687b      	ldr	r3, [r7, #4]
240009a0:	4413      	add	r3, r2
240009a2:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
240009a4:	697b      	ldr	r3, [r7, #20]
240009a6:	0e1b      	lsrs	r3, r3, #24
240009a8:	b2db      	uxtb	r3, r3
240009aa:	461a      	mov	r2, r3
240009ac:	687b      	ldr	r3, [r7, #4]
240009ae:	4413      	add	r3, r2
240009b0:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
240009b2:	7ffb      	ldrb	r3, [r7, #31]
240009b4:	3b02      	subs	r3, #2
240009b6:	77fb      	strb	r3, [r7, #31]
                    break;
240009b8:	e071      	b.n	24000a9e <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
240009ba:	697b      	ldr	r3, [r7, #20]
240009bc:	0e1b      	lsrs	r3, r3, #24
240009be:	b2db      	uxtb	r3, r3
240009c0:	461a      	mov	r2, r3
240009c2:	687b      	ldr	r3, [r7, #4]
240009c4:	4413      	add	r3, r2
240009c6:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
240009c8:	7ffb      	ldrb	r3, [r7, #31]
240009ca:	3b03      	subs	r3, #3
240009cc:	77fb      	strb	r3, [r7, #31]
                    break;
240009ce:	e066      	b.n	24000a9e <CheckSum+0x1a2>
            }
        } else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
240009d0:	7fbb      	ldrb	r3, [r7, #30]
240009d2:	68ba      	ldr	r2, [r7, #8]
240009d4:	1ad3      	subs	r3, r2, r3
240009d6:	f003 0303 	and.w	r3, r3, #3
240009da:	2b00      	cmp	r3, #0
240009dc:	d044      	beq.n	24000a68 <CheckSum+0x16c>
240009de:	69bb      	ldr	r3, [r7, #24]
240009e0:	68ba      	ldr	r2, [r7, #8]
240009e2:	1ad3      	subs	r3, r2, r3
240009e4:	2b04      	cmp	r3, #4
240009e6:	d83f      	bhi.n	24000a68 <CheckSum+0x16c>
            switch (Size - missalignementSize) {
240009e8:	7fbb      	ldrb	r3, [r7, #30]
240009ea:	68ba      	ldr	r2, [r7, #8]
240009ec:	1ad3      	subs	r3, r2, r3
240009ee:	2b03      	cmp	r3, #3
240009f0:	d02f      	beq.n	24000a52 <CheckSum+0x156>
240009f2:	2b03      	cmp	r3, #3
240009f4:	d853      	bhi.n	24000a9e <CheckSum+0x1a2>
240009f6:	2b01      	cmp	r3, #1
240009f8:	d002      	beq.n	24000a00 <CheckSum+0x104>
240009fa:	2b02      	cmp	r3, #2
240009fc:	d018      	beq.n	24000a30 <CheckSum+0x134>
240009fe:	e04e      	b.n	24000a9e <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) Val;
24000a00:	697b      	ldr	r3, [r7, #20]
24000a02:	b2db      	uxtb	r3, r3
24000a04:	461a      	mov	r2, r3
24000a06:	687b      	ldr	r3, [r7, #4]
24000a08:	4413      	add	r3, r2
24000a0a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a0c:	697b      	ldr	r3, [r7, #20]
24000a0e:	0a1b      	lsrs	r3, r3, #8
24000a10:	b2db      	uxtb	r3, r3
24000a12:	461a      	mov	r2, r3
24000a14:	687b      	ldr	r3, [r7, #4]
24000a16:	4413      	add	r3, r2
24000a18:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24000a1a:	697b      	ldr	r3, [r7, #20]
24000a1c:	0c1b      	lsrs	r3, r3, #16
24000a1e:	b2db      	uxtb	r3, r3
24000a20:	461a      	mov	r2, r3
24000a22:	687b      	ldr	r3, [r7, #4]
24000a24:	4413      	add	r3, r2
24000a26:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
24000a28:	7fbb      	ldrb	r3, [r7, #30]
24000a2a:	3b01      	subs	r3, #1
24000a2c:	77bb      	strb	r3, [r7, #30]
                    break;
24000a2e:	e01a      	b.n	24000a66 <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
24000a30:	697b      	ldr	r3, [r7, #20]
24000a32:	b2db      	uxtb	r3, r3
24000a34:	461a      	mov	r2, r3
24000a36:	687b      	ldr	r3, [r7, #4]
24000a38:	4413      	add	r3, r2
24000a3a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a3c:	697b      	ldr	r3, [r7, #20]
24000a3e:	0a1b      	lsrs	r3, r3, #8
24000a40:	b2db      	uxtb	r3, r3
24000a42:	461a      	mov	r2, r3
24000a44:	687b      	ldr	r3, [r7, #4]
24000a46:	4413      	add	r3, r2
24000a48:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
24000a4a:	7fbb      	ldrb	r3, [r7, #30]
24000a4c:	3b02      	subs	r3, #2
24000a4e:	77bb      	strb	r3, [r7, #30]
                    break;
24000a50:	e009      	b.n	24000a66 <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
24000a52:	697b      	ldr	r3, [r7, #20]
24000a54:	b2db      	uxtb	r3, r3
24000a56:	461a      	mov	r2, r3
24000a58:	687b      	ldr	r3, [r7, #4]
24000a5a:	4413      	add	r3, r2
24000a5c:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
24000a5e:	7fbb      	ldrb	r3, [r7, #30]
24000a60:	3b03      	subs	r3, #3
24000a62:	77bb      	strb	r3, [r7, #30]
                    break;
24000a64:	bf00      	nop
            switch (Size - missalignementSize) {
24000a66:	e01a      	b.n	24000a9e <CheckSum+0x1a2>
            }
        } else {
            InitVal += (uint8_t) Val;
24000a68:	697b      	ldr	r3, [r7, #20]
24000a6a:	b2db      	uxtb	r3, r3
24000a6c:	461a      	mov	r2, r3
24000a6e:	687b      	ldr	r3, [r7, #4]
24000a70:	4413      	add	r3, r2
24000a72:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a74:	697b      	ldr	r3, [r7, #20]
24000a76:	0a1b      	lsrs	r3, r3, #8
24000a78:	b2db      	uxtb	r3, r3
24000a7a:	461a      	mov	r2, r3
24000a7c:	687b      	ldr	r3, [r7, #4]
24000a7e:	4413      	add	r3, r2
24000a80:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
24000a82:	697b      	ldr	r3, [r7, #20]
24000a84:	0c1b      	lsrs	r3, r3, #16
24000a86:	b2db      	uxtb	r3, r3
24000a88:	461a      	mov	r2, r3
24000a8a:	687b      	ldr	r3, [r7, #4]
24000a8c:	4413      	add	r3, r2
24000a8e:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
24000a90:	697b      	ldr	r3, [r7, #20]
24000a92:	0e1b      	lsrs	r3, r3, #24
24000a94:	b2db      	uxtb	r3, r3
24000a96:	461a      	mov	r2, r3
24000a98:	687b      	ldr	r3, [r7, #4]
24000a9a:	4413      	add	r3, r2
24000a9c:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
24000a9e:	68fb      	ldr	r3, [r7, #12]
24000aa0:	3304      	adds	r3, #4
24000aa2:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4) {
24000aa4:	69bb      	ldr	r3, [r7, #24]
24000aa6:	3304      	adds	r3, #4
24000aa8:	61bb      	str	r3, [r7, #24]
24000aaa:	69bb      	ldr	r3, [r7, #24]
24000aac:	68ba      	ldr	r2, [r7, #8]
24000aae:	429a      	cmp	r2, r3
24000ab0:	f63f af47 	bhi.w	24000942 <CheckSum+0x46>
    }

    return (InitVal);
24000ab4:	687b      	ldr	r3, [r7, #4]
}
24000ab6:	4618      	mov	r0, r3
24000ab8:	3724      	adds	r7, #36	; 0x24
24000aba:	46bd      	mov	sp, r7
24000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
24000ac0:	4770      	bx	lr

24000ac2 <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t
Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
24000ac2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24000ac6:	b08c      	sub	sp, #48	; 0x30
24000ac8:	af00      	add	r7, sp, #0
24000aca:	60f8      	str	r0, [r7, #12]
24000acc:	60b9      	str	r1, [r7, #8]
24000ace:	607a      	str	r2, [r7, #4]
24000ad0:	603b      	str	r3, [r7, #0]
24000ad2:	2300      	movs	r3, #0
24000ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000ad6:	69fb      	ldr	r3, [r7, #28]
24000ad8:	f383 8810 	msr	PRIMASK, r3
}
24000adc:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
24000ade:	2300      	movs	r3, #0
24000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
24000ae2:	2300      	movs	r3, #0
24000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint64_t checksum;
    Size *= 4;
24000ae6:	687b      	ldr	r3, [r7, #4]
24000ae8:	009b      	lsls	r3, r3, #2
24000aea:	607b      	str	r3, [r7, #4]

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000aec:	f000 fd54 	bl	24001598 <CSP_QSPI_EnableMemoryMappedMode>
24000af0:	4603      	mov	r3, r0
24000af2:	2b00      	cmp	r3, #0
24000af4:	d00a      	beq.n	24000b0c <Verify+0x4a>
24000af6:	2301      	movs	r3, #1
24000af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000afa:	69bb      	ldr	r3, [r7, #24]
24000afc:	f383 8810 	msr	PRIMASK, r3
}
24000b00:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000b02:	f04f 0400 	mov.w	r4, #0
24000b06:	f04f 0500 	mov.w	r5, #0
24000b0a:	e04d      	b.n	24000ba8 <Verify+0xe6>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000b0c:	683b      	ldr	r3, [r7, #0]
24000b0e:	f003 020f 	and.w	r2, r3, #15
24000b12:	68fb      	ldr	r3, [r7, #12]
24000b14:	18d0      	adds	r0, r2, r3
                        Size - ((missalignement >> 16) & 0xF), InitVal);
24000b16:	683b      	ldr	r3, [r7, #0]
24000b18:	0c1b      	lsrs	r3, r3, #16
24000b1a:	f003 030f 	and.w	r3, r3, #15
    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000b1e:	687a      	ldr	r2, [r7, #4]
24000b20:	1ad3      	subs	r3, r2, r3
24000b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
24000b24:	4619      	mov	r1, r3
24000b26:	f7ff fee9 	bl	240008fc <CheckSum>
24000b2a:	4603      	mov	r3, r0
24000b2c:	2200      	movs	r2, #0
24000b2e:	469a      	mov	sl, r3
24000b30:	4693      	mov	fp, r2
24000b32:	e9c7 ab08 	strd	sl, fp, [r7, #32]
    while (Size > VerifiedData) {
24000b36:	e025      	b.n	24000b84 <Verify+0xc2>
        if (*(uint8_t*) MemoryAddr++
24000b38:	68fb      	ldr	r3, [r7, #12]
24000b3a:	1c5a      	adds	r2, r3, #1
24000b3c:	60fa      	str	r2, [r7, #12]
24000b3e:	781a      	ldrb	r2, [r3, #0]
            != *((uint8_t*) RAMBufferAddr + VerifiedData)) {
24000b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000b42:	68bb      	ldr	r3, [r7, #8]
24000b44:	440b      	add	r3, r1
24000b46:	781b      	ldrb	r3, [r3, #0]
        if (*(uint8_t*) MemoryAddr++
24000b48:	429a      	cmp	r2, r3
24000b4a:	d018      	beq.n	24000b7e <Verify+0xbc>
24000b4c:	2301      	movs	r3, #1
24000b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000b50:	697b      	ldr	r3, [r7, #20]
24000b52:	f383 8810 	msr	PRIMASK, r3
}
24000b56:	bf00      	nop
            __set_PRIMASK(1); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
24000b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
24000b5c:	f04f 0200 	mov.w	r2, #0
24000b60:	f04f 0300 	mov.w	r3, #0
24000b64:	0003      	movs	r3, r0
24000b66:	2200      	movs	r2, #0
24000b68:	68f8      	ldr	r0, [r7, #12]
24000b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000b6c:	4401      	add	r1, r0
24000b6e:	2000      	movs	r0, #0
24000b70:	4688      	mov	r8, r1
24000b72:	4681      	mov	r9, r0
24000b74:	eb12 0408 	adds.w	r4, r2, r8
24000b78:	eb43 0509 	adc.w	r5, r3, r9
24000b7c:	e014      	b.n	24000ba8 <Verify+0xe6>
        }
        VerifiedData++;
24000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b80:	3301      	adds	r3, #1
24000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Size > VerifiedData) {
24000b84:	687a      	ldr	r2, [r7, #4]
24000b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b88:	429a      	cmp	r2, r3
24000b8a:	d8d5      	bhi.n	24000b38 <Verify+0x76>
24000b8c:	2301      	movs	r3, #1
24000b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000b90:	693b      	ldr	r3, [r7, #16]
24000b92:	f383 8810 	msr	PRIMASK, r3
}
24000b96:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return (checksum << 32);
24000b98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
24000b9c:	f04f 0400 	mov.w	r4, #0
24000ba0:	f04f 0500 	mov.w	r5, #0
24000ba4:	0015      	movs	r5, r2
24000ba6:	2400      	movs	r4, #0
}
24000ba8:	4622      	mov	r2, r4
24000baa:	462b      	mov	r3, r5
24000bac:	4610      	mov	r0, r2
24000bae:	4619      	mov	r1, r3
24000bb0:	3730      	adds	r7, #48	; 0x30
24000bb2:	46bd      	mov	sp, r7
24000bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

24000bb8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
24000bb8:	b480      	push	{r7}
24000bba:	b087      	sub	sp, #28
24000bbc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000bbe:	4b28      	ldr	r3, [pc, #160]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bc4:	4a26      	ldr	r2, [pc, #152]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bc6:	f043 0310 	orr.w	r3, r3, #16
24000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000bce:	4b24      	ldr	r3, [pc, #144]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bd4:	f003 0310 	and.w	r3, r3, #16
24000bd8:	617b      	str	r3, [r7, #20]
24000bda:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000bdc:	4b20      	ldr	r3, [pc, #128]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000be2:	4a1f      	ldr	r2, [pc, #124]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000bec:	4b1c      	ldr	r3, [pc, #112]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
24000bf6:	613b      	str	r3, [r7, #16]
24000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000bfa:	4b19      	ldr	r3, [pc, #100]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c00:	4a17      	ldr	r2, [pc, #92]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c02:	f043 0301 	orr.w	r3, r3, #1
24000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c0a:	4b15      	ldr	r3, [pc, #84]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c10:	f003 0301 	and.w	r3, r3, #1
24000c14:	60fb      	str	r3, [r7, #12]
24000c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000c18:	4b11      	ldr	r3, [pc, #68]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c1e:	4a10      	ldr	r2, [pc, #64]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c20:	f043 0302 	orr.w	r3, r3, #2
24000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c28:	4b0d      	ldr	r3, [pc, #52]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c2e:	f003 0302 	and.w	r3, r3, #2
24000c32:	60bb      	str	r3, [r7, #8]
24000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000c36:	4b0a      	ldr	r3, [pc, #40]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c3c:	4a08      	ldr	r2, [pc, #32]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c3e:	f043 0304 	orr.w	r3, r3, #4
24000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c46:	4b06      	ldr	r3, [pc, #24]	; (24000c60 <MX_GPIO_Init+0xa8>)
24000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c4c:	f003 0304 	and.w	r3, r3, #4
24000c50:	607b      	str	r3, [r7, #4]
24000c52:	687b      	ldr	r3, [r7, #4]

}
24000c54:	bf00      	nop
24000c56:	371c      	adds	r7, #28
24000c58:	46bd      	mov	sp, r7
24000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
24000c5e:	4770      	bx	lr
24000c60:	58024400 	.word	0x58024400

24000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24000c64:	b580      	push	{r7, lr}
24000c66:	b084      	sub	sp, #16
24000c68:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24000c6a:	4b4f      	ldr	r3, [pc, #316]	; (24000da8 <main+0x144>)
24000c6c:	695b      	ldr	r3, [r3, #20]
24000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24000c72:	2b00      	cmp	r3, #0
24000c74:	d11b      	bne.n	24000cae <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24000c76:	f3bf 8f4f 	dsb	sy
}
24000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000c7c:	f3bf 8f6f 	isb	sy
}
24000c80:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24000c82:	4b49      	ldr	r3, [pc, #292]	; (24000da8 <main+0x144>)
24000c84:	2200      	movs	r2, #0
24000c86:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24000c8a:	f3bf 8f4f 	dsb	sy
}
24000c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000c90:	f3bf 8f6f 	isb	sy
}
24000c94:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24000c96:	4b44      	ldr	r3, [pc, #272]	; (24000da8 <main+0x144>)
24000c98:	695b      	ldr	r3, [r3, #20]
24000c9a:	4a43      	ldr	r2, [pc, #268]	; (24000da8 <main+0x144>)
24000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24000ca0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24000ca2:	f3bf 8f4f 	dsb	sy
}
24000ca6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000ca8:	f3bf 8f6f 	isb	sy
}
24000cac:	e000      	b.n	24000cb0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24000cae:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24000cb0:	f001 f9c6 	bl	24002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24000cb4:	f000 f880 	bl	24000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24000cb8:	f7ff ff7e 	bl	24000bb8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
24000cbc:	f000 f93a 	bl	24000f34 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */


  if (CSP_QUADSPI_Init() != HAL_OK)
24000cc0:	f000 fa94 	bl	240011ec <CSP_QUADSPI_Init>
24000cc4:	4603      	mov	r3, r0
24000cc6:	2b00      	cmp	r3, #0
24000cc8:	d001      	beq.n	24000cce <main+0x6a>
  {
	  Error_Handler();
24000cca:	f000 f92d 	bl	24000f28 <Error_Handler>
   /***************************************************************/


	/****************** FOR MEMORY MAPPED MODE ********************/

	  if(CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000cce:	f000 fc63 	bl	24001598 <CSP_QSPI_EnableMemoryMappedMode>
24000cd2:	4603      	mov	r3, r0
24000cd4:	2b00      	cmp	r3, #0
24000cd6:	d001      	beq.n	24000cdc <main+0x78>
		  Error_Handler();
24000cd8:	f000 f926 	bl	24000f28 <Error_Handler>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24000cdc:	4b32      	ldr	r3, [pc, #200]	; (24000da8 <main+0x144>)
24000cde:	2200      	movs	r2, #0
24000ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24000ce4:	f3bf 8f4f 	dsb	sy
}
24000ce8:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
24000cea:	4b2f      	ldr	r3, [pc, #188]	; (24000da8 <main+0x144>)
24000cec:	695b      	ldr	r3, [r3, #20]
24000cee:	4a2e      	ldr	r2, [pc, #184]	; (24000da8 <main+0x144>)
24000cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24000cf4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24000cf6:	f3bf 8f4f 	dsb	sy
}
24000cfa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
24000cfc:	4b2a      	ldr	r3, [pc, #168]	; (24000da8 <main+0x144>)
24000cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24000d02:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24000d04:	68bb      	ldr	r3, [r7, #8]
24000d06:	0b5b      	lsrs	r3, r3, #13
24000d08:	f3c3 030e 	ubfx	r3, r3, #0, #15
24000d0c:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24000d0e:	68bb      	ldr	r3, [r7, #8]
24000d10:	08db      	lsrs	r3, r3, #3
24000d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
24000d16:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
24000d18:	687b      	ldr	r3, [r7, #4]
24000d1a:	015a      	lsls	r2, r3, #5
24000d1c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
24000d20:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
24000d22:	683a      	ldr	r2, [r7, #0]
24000d24:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
24000d26:	4920      	ldr	r1, [pc, #128]	; (24000da8 <main+0x144>)
24000d28:	4313      	orrs	r3, r2
24000d2a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24000d2e:	683b      	ldr	r3, [r7, #0]
24000d30:	1e5a      	subs	r2, r3, #1
24000d32:	603a      	str	r2, [r7, #0]
24000d34:	2b00      	cmp	r3, #0
24000d36:	d1ef      	bne.n	24000d18 <main+0xb4>
    } while(sets-- != 0U);
24000d38:	687b      	ldr	r3, [r7, #4]
24000d3a:	1e5a      	subs	r2, r3, #1
24000d3c:	607a      	str	r2, [r7, #4]
24000d3e:	2b00      	cmp	r3, #0
24000d40:	d1e5      	bne.n	24000d0e <main+0xaa>
  __ASM volatile ("dsb 0xF":::"memory");
24000d42:	f3bf 8f4f 	dsb	sy
}
24000d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000d48:	f3bf 8f6f 	isb	sy
}
24000d4c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
24000d4e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24000d50:	f3bf 8f4f 	dsb	sy
}
24000d54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000d56:	f3bf 8f6f 	isb	sy
}
24000d5a:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
24000d5c:	4b12      	ldr	r3, [pc, #72]	; (24000da8 <main+0x144>)
24000d5e:	695b      	ldr	r3, [r3, #20]
24000d60:	4a11      	ldr	r2, [pc, #68]	; (24000da8 <main+0x144>)
24000d62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24000d66:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24000d68:	4b0f      	ldr	r3, [pc, #60]	; (24000da8 <main+0x144>)
24000d6a:	2200      	movs	r2, #0
24000d6c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24000d70:	f3bf 8f4f 	dsb	sy
}
24000d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000d76:	f3bf 8f6f 	isb	sy
}
24000d7a:	bf00      	nop
}
24000d7c:	bf00      	nop

//	  memcpy(readbuf, (uint8_t *) 0x90000000, 30); // check memory connection

	  SCB_DisableDCache();
	  SCB_DisableICache();
	  SysTick->CTRL = 0; // disable SysTick interrup
24000d7e:	4b0b      	ldr	r3, [pc, #44]	; (24000dac <main+0x148>)
24000d80:	2200      	movs	r2, #0
24000d82:	601a      	str	r2, [r3, #0]


	  /* Initialize user application's Stack Pointer & Jump to user application */
	  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));  // Reset Handler
24000d84:	4b0a      	ldr	r3, [pc, #40]	; (24000db0 <main+0x14c>)
24000d86:	681b      	ldr	r3, [r3, #0]
24000d88:	461a      	mov	r2, r3
24000d8a:	4b0a      	ldr	r3, [pc, #40]	; (24000db4 <main+0x150>)
24000d8c:	601a      	str	r2, [r3, #0]
	  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);   // stack pointer
24000d8e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
24000d92:	681b      	ldr	r3, [r3, #0]
24000d94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
24000d96:	68fb      	ldr	r3, [r7, #12]
24000d98:	f383 8808 	msr	MSP, r3
}
24000d9c:	bf00      	nop
	  JumpToApplication();	  // make the jumpt
24000d9e:	4b05      	ldr	r3, [pc, #20]	; (24000db4 <main+0x150>)
24000da0:	681b      	ldr	r3, [r3, #0]
24000da2:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
24000da4:	e7fe      	b.n	24000da4 <main+0x140>
24000da6:	bf00      	nop
24000da8:	e000ed00 	.word	0xe000ed00
24000dac:	e000e010 	.word	0xe000e010
24000db0:	90000004 	.word	0x90000004
24000db4:	240005bc 	.word	0x240005bc

24000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24000db8:	b580      	push	{r7, lr}
24000dba:	b09e      	sub	sp, #120	; 0x78
24000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24000dc2:	224c      	movs	r2, #76	; 0x4c
24000dc4:	2100      	movs	r1, #0
24000dc6:	4618      	mov	r0, r3
24000dc8:	f016 fc2e 	bl	24017628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24000dcc:	f107 030c 	add.w	r3, r7, #12
24000dd0:	2220      	movs	r2, #32
24000dd2:	2100      	movs	r1, #0
24000dd4:	4618      	mov	r0, r3
24000dd6:	f016 fc27 	bl	24017628 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24000dda:	2002      	movs	r0, #2
24000ddc:	f010 fa14 	bl	24011208 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24000de0:	2300      	movs	r3, #0
24000de2:	60bb      	str	r3, [r7, #8]
24000de4:	4b4d      	ldr	r3, [pc, #308]	; (24000f1c <SystemClock_Config+0x164>)
24000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000de8:	4a4c      	ldr	r2, [pc, #304]	; (24000f1c <SystemClock_Config+0x164>)
24000dea:	f023 0301 	bic.w	r3, r3, #1
24000dee:	62d3      	str	r3, [r2, #44]	; 0x2c
24000df0:	4b4a      	ldr	r3, [pc, #296]	; (24000f1c <SystemClock_Config+0x164>)
24000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000df4:	f003 0301 	and.w	r3, r3, #1
24000df8:	60bb      	str	r3, [r7, #8]
24000dfa:	4b49      	ldr	r3, [pc, #292]	; (24000f20 <SystemClock_Config+0x168>)
24000dfc:	699b      	ldr	r3, [r3, #24]
24000dfe:	4a48      	ldr	r2, [pc, #288]	; (24000f20 <SystemClock_Config+0x168>)
24000e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000e04:	6193      	str	r3, [r2, #24]
24000e06:	4b46      	ldr	r3, [pc, #280]	; (24000f20 <SystemClock_Config+0x168>)
24000e08:	699b      	ldr	r3, [r3, #24]
24000e0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000e0e:	60bb      	str	r3, [r7, #8]
24000e10:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24000e12:	bf00      	nop
24000e14:	4b42      	ldr	r3, [pc, #264]	; (24000f20 <SystemClock_Config+0x168>)
24000e16:	699b      	ldr	r3, [r3, #24]
24000e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000e20:	d1f8      	bne.n	24000e14 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24000e22:	4b40      	ldr	r3, [pc, #256]	; (24000f24 <SystemClock_Config+0x16c>)
24000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000e28:	4a3e      	ldr	r2, [pc, #248]	; (24000f24 <SystemClock_Config+0x16c>)
24000e2a:	f043 0302 	orr.w	r3, r3, #2
24000e2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24000e32:	4b3c      	ldr	r3, [pc, #240]	; (24000f24 <SystemClock_Config+0x16c>)
24000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000e38:	f003 0302 	and.w	r3, r3, #2
24000e3c:	607b      	str	r3, [r7, #4]
24000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24000e40:	2300      	movs	r3, #0
24000e42:	603b      	str	r3, [r7, #0]
24000e44:	4b36      	ldr	r3, [pc, #216]	; (24000f20 <SystemClock_Config+0x168>)
24000e46:	699b      	ldr	r3, [r3, #24]
24000e48:	4a35      	ldr	r2, [pc, #212]	; (24000f20 <SystemClock_Config+0x168>)
24000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000e4e:	6193      	str	r3, [r2, #24]
24000e50:	4b33      	ldr	r3, [pc, #204]	; (24000f20 <SystemClock_Config+0x168>)
24000e52:	699b      	ldr	r3, [r3, #24]
24000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000e58:	603b      	str	r3, [r7, #0]
24000e5a:	4b30      	ldr	r3, [pc, #192]	; (24000f1c <SystemClock_Config+0x164>)
24000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000e5e:	4a2f      	ldr	r2, [pc, #188]	; (24000f1c <SystemClock_Config+0x164>)
24000e60:	f043 0301 	orr.w	r3, r3, #1
24000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
24000e66:	4b2d      	ldr	r3, [pc, #180]	; (24000f1c <SystemClock_Config+0x164>)
24000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000e6a:	f003 0301 	and.w	r3, r3, #1
24000e6e:	603b      	str	r3, [r7, #0]
24000e70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24000e72:	bf00      	nop
24000e74:	4b2a      	ldr	r3, [pc, #168]	; (24000f20 <SystemClock_Config+0x168>)
24000e76:	699b      	ldr	r3, [r3, #24]
24000e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000e80:	d1f8      	bne.n	24000e74 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
24000e82:	4b28      	ldr	r3, [pc, #160]	; (24000f24 <SystemClock_Config+0x16c>)
24000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24000e86:	f023 0303 	bic.w	r3, r3, #3
24000e8a:	4a26      	ldr	r2, [pc, #152]	; (24000f24 <SystemClock_Config+0x16c>)
24000e8c:	f043 0302 	orr.w	r3, r3, #2
24000e90:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
24000e92:	2301      	movs	r3, #1
24000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24000e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000e9c:	2302      	movs	r3, #2
24000e9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000ea0:	2302      	movs	r3, #2
24000ea2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
24000ea4:	2304      	movs	r3, #4
24000ea6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
24000ea8:	23a0      	movs	r3, #160	; 0xa0
24000eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
24000eac:	2302      	movs	r3, #2
24000eae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
24000eb0:	2302      	movs	r3, #2
24000eb2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
24000eb4:	2302      	movs	r3, #2
24000eb6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24000eb8:	2308      	movs	r3, #8
24000eba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000ebc:	2300      	movs	r3, #0
24000ebe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000ec0:	2300      	movs	r3, #0
24000ec2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24000ec8:	4618      	mov	r0, r3
24000eca:	f012 fc71 	bl	240137b0 <HAL_RCC_OscConfig>
24000ece:	4603      	mov	r3, r0
24000ed0:	2b00      	cmp	r3, #0
24000ed2:	d001      	beq.n	24000ed8 <SystemClock_Config+0x120>
  {
    Error_Handler();
24000ed4:	f000 f828 	bl	24000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24000ed8:	233f      	movs	r3, #63	; 0x3f
24000eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000edc:	2303      	movs	r3, #3
24000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000ee0:	2300      	movs	r3, #0
24000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000ee4:	2308      	movs	r3, #8
24000ee6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24000ee8:	2340      	movs	r3, #64	; 0x40
24000eea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000eec:	2340      	movs	r3, #64	; 0x40
24000eee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000ef6:	2340      	movs	r3, #64	; 0x40
24000ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000efa:	f107 030c 	add.w	r3, r7, #12
24000efe:	2104      	movs	r1, #4
24000f00:	4618      	mov	r0, r3
24000f02:	f013 f883 	bl	2401400c <HAL_RCC_ClockConfig>
24000f06:	4603      	mov	r3, r0
24000f08:	2b00      	cmp	r3, #0
24000f0a:	d001      	beq.n	24000f10 <SystemClock_Config+0x158>
  {
    Error_Handler();
24000f0c:	f000 f80c 	bl	24000f28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
24000f10:	f013 fa9c 	bl	2401444c <HAL_RCC_EnableCSS>
}
24000f14:	bf00      	nop
24000f16:	3778      	adds	r7, #120	; 0x78
24000f18:	46bd      	mov	sp, r7
24000f1a:	bd80      	pop	{r7, pc}
24000f1c:	58000400 	.word	0x58000400
24000f20:	58024800 	.word	0x58024800
24000f24:	58024400 	.word	0x58024400

24000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24000f28:	b480      	push	{r7}
24000f2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
24000f2c:	b672      	cpsid	i
}
24000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
24000f30:	e7fe      	b.n	24000f30 <Error_Handler+0x8>
	...

24000f34 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24000f34:	b580      	push	{r7, lr}
24000f36:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24000f38:	4b12      	ldr	r3, [pc, #72]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f3a:	4a13      	ldr	r2, [pc, #76]	; (24000f88 <MX_QUADSPI_Init+0x54>)
24000f3c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
24000f3e:	4b11      	ldr	r3, [pc, #68]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f40:	2202      	movs	r2, #2
24000f42:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
24000f44:	4b0f      	ldr	r3, [pc, #60]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f46:	2204      	movs	r2, #4
24000f48:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
24000f4a:	4b0e      	ldr	r3, [pc, #56]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f4c:	2210      	movs	r2, #16
24000f4e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
24000f50:	4b0c      	ldr	r3, [pc, #48]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f52:	2217      	movs	r2, #23
24000f54:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
24000f56:	4b0b      	ldr	r3, [pc, #44]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f58:	f44f 62a0 	mov.w	r2, #1280	; 0x500
24000f5c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
24000f5e:	4b09      	ldr	r3, [pc, #36]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f60:	2200      	movs	r2, #0
24000f62:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24000f64:	4b07      	ldr	r3, [pc, #28]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f66:	2200      	movs	r2, #0
24000f68:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24000f6a:	4b06      	ldr	r3, [pc, #24]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f6c:	2200      	movs	r2, #0
24000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24000f70:	4804      	ldr	r0, [pc, #16]	; (24000f84 <MX_QUADSPI_Init+0x50>)
24000f72:	f010 fe7f 	bl	24011c74 <HAL_QSPI_Init>
24000f76:	4603      	mov	r3, r0
24000f78:	2b00      	cmp	r3, #0
24000f7a:	d001      	beq.n	24000f80 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
24000f7c:	f7ff ffd4 	bl	24000f28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24000f80:	bf00      	nop
24000f82:	bd80      	pop	{r7, pc}
24000f84:	240005c0 	.word	0x240005c0
24000f88:	52005000 	.word	0x52005000

24000f8c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24000f8c:	b580      	push	{r7, lr}
24000f8e:	b0bc      	sub	sp, #240	; 0xf0
24000f90:	af00      	add	r7, sp, #0
24000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000f94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24000f98:	2200      	movs	r2, #0
24000f9a:	601a      	str	r2, [r3, #0]
24000f9c:	605a      	str	r2, [r3, #4]
24000f9e:	609a      	str	r2, [r3, #8]
24000fa0:	60da      	str	r2, [r3, #12]
24000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000fa4:	f107 0320 	add.w	r3, r7, #32
24000fa8:	22bc      	movs	r2, #188	; 0xbc
24000faa:	2100      	movs	r1, #0
24000fac:	4618      	mov	r0, r3
24000fae:	f016 fb3b 	bl	24017628 <memset>
  if(qspiHandle->Instance==QUADSPI)
24000fb2:	687b      	ldr	r3, [r7, #4]
24000fb4:	681b      	ldr	r3, [r3, #0]
24000fb6:	4a6e      	ldr	r2, [pc, #440]	; (24001170 <HAL_QSPI_MspInit+0x1e4>)
24000fb8:	4293      	cmp	r3, r2
24000fba:	f040 80d4 	bne.w	24001166 <HAL_QSPI_MspInit+0x1da>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24000fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24000fc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
24000fc4:	2310      	movs	r3, #16
24000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 144;
24000fc8:	2390      	movs	r3, #144	; 0x90
24000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 2;
24000fcc:	2302      	movs	r3, #2
24000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
24000fd0:	2302      	movs	r3, #2
24000fd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 1;
24000fd4:	2301      	movs	r3, #1
24000fd6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
24000fd8:	2300      	movs	r3, #0
24000fda:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
24000fdc:	2300      	movs	r3, #0
24000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
24000fe0:	2300      	movs	r3, #0
24000fe2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
24000fe4:	2320      	movs	r3, #32
24000fe6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000fe8:	f107 0320 	add.w	r3, r7, #32
24000fec:	4618      	mov	r0, r3
24000fee:	f013 fd6f 	bl	24014ad0 <HAL_RCCEx_PeriphCLKConfig>
24000ff2:	4603      	mov	r3, r0
24000ff4:	2b00      	cmp	r3, #0
24000ff6:	d001      	beq.n	24000ffc <HAL_QSPI_MspInit+0x70>
    {
      Error_Handler();
24000ff8:	f7ff ff96 	bl	24000f28 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
24000ffc:	4b5d      	ldr	r3, [pc, #372]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24000ffe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24001002:	4a5c      	ldr	r2, [pc, #368]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24001008:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
2400100c:	4b59      	ldr	r3, [pc, #356]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400100e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24001016:	61fb      	str	r3, [r7, #28]
24001018:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
2400101a:	4b56      	ldr	r3, [pc, #344]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001020:	4a54      	ldr	r2, [pc, #336]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001022:	f043 0310 	orr.w	r3, r3, #16
24001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2400102a:	4b52      	ldr	r3, [pc, #328]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001030:	f003 0310 	and.w	r3, r3, #16
24001034:	61bb      	str	r3, [r7, #24]
24001036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24001038:	4b4e      	ldr	r3, [pc, #312]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400103e:	4a4d      	ldr	r2, [pc, #308]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001040:	f043 0301 	orr.w	r3, r3, #1
24001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24001048:	4b4a      	ldr	r3, [pc, #296]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400104e:	f003 0301 	and.w	r3, r3, #1
24001052:	617b      	str	r3, [r7, #20]
24001054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001056:	4b47      	ldr	r3, [pc, #284]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400105c:	4a45      	ldr	r2, [pc, #276]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400105e:	f043 0302 	orr.w	r3, r3, #2
24001062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24001066:	4b43      	ldr	r3, [pc, #268]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400106c:	f003 0302 	and.w	r3, r3, #2
24001070:	613b      	str	r3, [r7, #16]
24001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24001074:	4b3f      	ldr	r3, [pc, #252]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400107a:	4a3e      	ldr	r2, [pc, #248]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
2400107c:	f043 0304 	orr.w	r3, r3, #4
24001080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24001084:	4b3b      	ldr	r3, [pc, #236]	; (24001174 <HAL_QSPI_MspInit+0x1e8>)
24001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400108a:	f003 0304 	and.w	r3, r3, #4
2400108e:	60fb      	str	r3, [r7, #12]
24001090:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24001092:	2304      	movs	r3, #4
24001094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001098:	2302      	movs	r3, #2
2400109a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400109e:	2300      	movs	r3, #0
240010a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240010a4:	2303      	movs	r3, #3
240010a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240010aa:	2309      	movs	r3, #9
240010ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240010b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240010b4:	4619      	mov	r1, r3
240010b6:	4830      	ldr	r0, [pc, #192]	; (24001178 <HAL_QSPI_MspInit+0x1ec>)
240010b8:	f008 fe6e 	bl	24009d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240010bc:	2302      	movs	r3, #2
240010be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240010c2:	2302      	movs	r3, #2
240010c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240010c8:	2300      	movs	r3, #0
240010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240010ce:	2303      	movs	r3, #3
240010d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240010d4:	2309      	movs	r3, #9
240010d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240010da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240010de:	4619      	mov	r1, r3
240010e0:	4826      	ldr	r0, [pc, #152]	; (2400117c <HAL_QSPI_MspInit+0x1f0>)
240010e2:	f008 fe59 	bl	24009d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
240010e6:	2304      	movs	r3, #4
240010e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240010ec:	2302      	movs	r3, #2
240010ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240010f2:	2300      	movs	r3, #0
240010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240010f8:	2303      	movs	r3, #3
240010fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
240010fe:	2309      	movs	r3, #9
24001100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001104:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001108:	4619      	mov	r1, r3
2400110a:	481d      	ldr	r0, [pc, #116]	; (24001180 <HAL_QSPI_MspInit+0x1f4>)
2400110c:	f008 fe44 	bl	24009d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
24001110:	f44f 63c0 	mov.w	r3, #1536	; 0x600
24001114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001118:	2302      	movs	r3, #2
2400111a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400111e:	2300      	movs	r3, #0
24001120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001124:	2303      	movs	r3, #3
24001126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2400112a:	2309      	movs	r3, #9
2400112c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001130:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001134:	4619      	mov	r1, r3
24001136:	4813      	ldr	r0, [pc, #76]	; (24001184 <HAL_QSPI_MspInit+0x1f8>)
24001138:	f008 fe2e 	bl	24009d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
2400113c:	2340      	movs	r3, #64	; 0x40
2400113e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001142:	2302      	movs	r3, #2
24001144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24001148:	2300      	movs	r3, #0
2400114a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400114e:	2303      	movs	r3, #3
24001150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24001154:	230a      	movs	r3, #10
24001156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400115a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2400115e:	4619      	mov	r1, r3
24001160:	4807      	ldr	r0, [pc, #28]	; (24001180 <HAL_QSPI_MspInit+0x1f4>)
24001162:	f008 fe19 	bl	24009d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
24001166:	bf00      	nop
24001168:	37f0      	adds	r7, #240	; 0xf0
2400116a:	46bd      	mov	sp, r7
2400116c:	bd80      	pop	{r7, pc}
2400116e:	bf00      	nop
24001170:	52005000 	.word	0x52005000
24001174:	58024400 	.word	0x58024400
24001178:	58021000 	.word	0x58021000
2400117c:	58020000 	.word	0x58020000
24001180:	58020400 	.word	0x58020400
24001184:	58020800 	.word	0x58020800

24001188 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
24001188:	b580      	push	{r7, lr}
2400118a:	b082      	sub	sp, #8
2400118c:	af00      	add	r7, sp, #0
2400118e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
24001190:	687b      	ldr	r3, [r7, #4]
24001192:	681b      	ldr	r3, [r3, #0]
24001194:	4a0f      	ldr	r2, [pc, #60]	; (240011d4 <HAL_QSPI_MspDeInit+0x4c>)
24001196:	4293      	cmp	r3, r2
24001198:	d118      	bne.n	240011cc <HAL_QSPI_MspDeInit+0x44>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
2400119a:	4b0f      	ldr	r3, [pc, #60]	; (240011d8 <HAL_QSPI_MspDeInit+0x50>)
2400119c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
240011a0:	4a0d      	ldr	r2, [pc, #52]	; (240011d8 <HAL_QSPI_MspDeInit+0x50>)
240011a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240011a6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
240011aa:	2104      	movs	r1, #4
240011ac:	480b      	ldr	r0, [pc, #44]	; (240011dc <HAL_QSPI_MspDeInit+0x54>)
240011ae:	f008 ffa3 	bl	2400a0f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
240011b2:	2102      	movs	r1, #2
240011b4:	480a      	ldr	r0, [pc, #40]	; (240011e0 <HAL_QSPI_MspDeInit+0x58>)
240011b6:	f008 ff9f 	bl	2400a0f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
240011ba:	2144      	movs	r1, #68	; 0x44
240011bc:	4809      	ldr	r0, [pc, #36]	; (240011e4 <HAL_QSPI_MspDeInit+0x5c>)
240011be:	f008 ff9b 	bl	2400a0f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9|GPIO_PIN_10);
240011c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
240011c6:	4808      	ldr	r0, [pc, #32]	; (240011e8 <HAL_QSPI_MspDeInit+0x60>)
240011c8:	f008 ff96 	bl	2400a0f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
240011cc:	bf00      	nop
240011ce:	3708      	adds	r7, #8
240011d0:	46bd      	mov	sp, r7
240011d2:	bd80      	pop	{r7, pc}
240011d4:	52005000 	.word	0x52005000
240011d8:	58024400 	.word	0x58024400
240011dc:	58021000 	.word	0x58021000
240011e0:	58020000 	.word	0x58020000
240011e4:	58020400 	.word	0x58020400
240011e8:	58020800 	.word	0x58020800

240011ec <CSP_QUADSPI_Init>:
///////////////////////////////////////////////////////////////////

/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
240011ec:	b580      	push	{r7, lr}
240011ee:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
240011f0:	4b17      	ldr	r3, [pc, #92]	; (24001250 <CSP_QUADSPI_Init+0x64>)
240011f2:	4a18      	ldr	r2, [pc, #96]	; (24001254 <CSP_QUADSPI_Init+0x68>)
240011f4:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
240011f6:	4816      	ldr	r0, [pc, #88]	; (24001250 <CSP_QUADSPI_Init+0x64>)
240011f8:	f010 fdb0 	bl	24011d5c <HAL_QSPI_DeInit>
240011fc:	4603      	mov	r3, r0
240011fe:	2b00      	cmp	r3, #0
24001200:	d001      	beq.n	24001206 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
24001202:	2301      	movs	r3, #1
24001204:	e021      	b.n	2400124a <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
24001206:	f7ff fe95 	bl	24000f34 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
2400120a:	f000 f9f9 	bl	24001600 <QSPI_ResetChip>
2400120e:	4603      	mov	r3, r0
24001210:	2b00      	cmp	r3, #0
24001212:	d001      	beq.n	24001218 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
24001214:	2301      	movs	r3, #1
24001216:	e018      	b.n	2400124a <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
24001218:	2001      	movs	r0, #1
2400121a:	f001 f84f 	bl	240022bc <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
2400121e:	f000 f857 	bl	240012d0 <QSPI_AutoPollingMemReady>
24001222:	4603      	mov	r3, r0
24001224:	2b00      	cmp	r3, #0
24001226:	d001      	beq.n	2400122c <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
24001228:	2301      	movs	r3, #1
2400122a:	e00e      	b.n	2400124a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
2400122c:	f000 f88a 	bl	24001344 <QSPI_WriteEnable>
24001230:	4603      	mov	r3, r0
24001232:	2b00      	cmp	r3, #0
24001234:	d001      	beq.n	2400123a <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
24001236:	2301      	movs	r3, #1
24001238:	e007      	b.n	2400124a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
2400123a:	f000 f8cd 	bl	240013d8 <QSPI_Configuration>
2400123e:	4603      	mov	r3, r0
24001240:	2b00      	cmp	r3, #0
24001242:	d001      	beq.n	24001248 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
24001244:	2301      	movs	r3, #1
24001246:	e000      	b.n	2400124a <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
24001248:	2300      	movs	r3, #0
}
2400124a:	4618      	mov	r0, r3
2400124c:	bd80      	pop	{r7, pc}
2400124e:	bf00      	nop
24001250:	240005c0 	.word	0x240005c0
24001254:	52005000 	.word	0x52005000

24001258 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
24001258:	b580      	push	{r7, lr}
2400125a:	b08e      	sub	sp, #56	; 0x38
2400125c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
2400125e:	f000 f871 	bl	24001344 <QSPI_WriteEnable>
24001262:	4603      	mov	r3, r0
24001264:	2b00      	cmp	r3, #0
24001266:	d001      	beq.n	2400126c <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
24001268:	2301      	movs	r3, #1
2400126a:	e02b      	b.n	240012c4 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
2400126c:	23c7      	movs	r3, #199	; 0xc7
2400126e:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001270:	f44f 7380 	mov.w	r3, #256	; 0x100
24001274:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400127a:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400127c:	2300      	movs	r3, #0
2400127e:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001280:	2300      	movs	r3, #0
24001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001284:	2300      	movs	r3, #0
24001286:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001288:	2300      	movs	r3, #0
2400128a:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400128c:	2300      	movs	r3, #0
2400128e:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
24001290:	2300      	movs	r3, #0
24001292:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
24001294:	2300      	movs	r3, #0
24001296:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
24001298:	2300      	movs	r3, #0
2400129a:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400129c:	463b      	mov	r3, r7
2400129e:	f241 3288 	movw	r2, #5000	; 0x1388
240012a2:	4619      	mov	r1, r3
240012a4:	4809      	ldr	r0, [pc, #36]	; (240012cc <CSP_QSPI_Erase_Chip+0x74>)
240012a6:	f010 ff47 	bl	24012138 <HAL_QSPI_Command>
240012aa:	4603      	mov	r3, r0
240012ac:	2b00      	cmp	r3, #0
240012ae:	d001      	beq.n	240012b4 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
240012b0:	2301      	movs	r3, #1
240012b2:	e007      	b.n	240012c4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
240012b4:	f000 f80c 	bl	240012d0 <QSPI_AutoPollingMemReady>
240012b8:	4603      	mov	r3, r0
240012ba:	2b00      	cmp	r3, #0
240012bc:	d001      	beq.n	240012c2 <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
240012be:	2301      	movs	r3, #1
240012c0:	e000      	b.n	240012c4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
240012c2:	2300      	movs	r3, #0
}
240012c4:	4618      	mov	r0, r3
240012c6:	3738      	adds	r7, #56	; 0x38
240012c8:	46bd      	mov	sp, r7
240012ca:	bd80      	pop	{r7, pc}
240012cc:	240005c0 	.word	0x240005c0

240012d0 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
240012d0:	b580      	push	{r7, lr}
240012d2:	b094      	sub	sp, #80	; 0x50
240012d4:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240012d6:	f44f 7380 	mov.w	r3, #256	; 0x100
240012da:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
240012dc:	2305      	movs	r3, #5
240012de:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240012e0:	2300      	movs	r3, #0
240012e2:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240012e4:	2300      	movs	r3, #0
240012e6:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
240012e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
240012ee:	2300      	movs	r3, #0
240012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240012f2:	2300      	movs	r3, #0
240012f4:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240012f6:	2300      	movs	r3, #0
240012f8:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240012fa:	2300      	movs	r3, #0
240012fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
240012fe:	2300      	movs	r3, #0
24001300:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
24001302:	2301      	movs	r3, #1
24001304:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
24001306:	2300      	movs	r3, #0
24001308:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
2400130a:	2301      	movs	r3, #1
2400130c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
2400130e:	2310      	movs	r3, #16
24001310:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
24001312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24001316:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, N25Q128A_MAX_CHIPERASE_TIMEOUT) != HAL_OK)
24001318:	463a      	mov	r2, r7
2400131a:	f107 0118 	add.w	r1, r7, #24
2400131e:	4b07      	ldr	r3, [pc, #28]	; (2400133c <QSPI_AutoPollingMemReady+0x6c>)
24001320:	4807      	ldr	r0, [pc, #28]	; (24001340 <QSPI_AutoPollingMemReady+0x70>)
24001322:	f011 fbb3 	bl	24012a8c <HAL_QSPI_AutoPolling>
24001326:	4603      	mov	r3, r0
24001328:	2b00      	cmp	r3, #0
2400132a:	d001      	beq.n	24001330 <QSPI_AutoPollingMemReady+0x60>
    {
        return HAL_ERROR;
2400132c:	2301      	movs	r3, #1
2400132e:	e000      	b.n	24001332 <QSPI_AutoPollingMemReady+0x62>
    }

    return HAL_OK;
24001330:	2300      	movs	r3, #0
}
24001332:	4618      	mov	r0, r3
24001334:	3750      	adds	r7, #80	; 0x50
24001336:	46bd      	mov	sp, r7
24001338:	bd80      	pop	{r7, pc}
2400133a:	bf00      	nop
2400133c:	0003d090 	.word	0x0003d090
24001340:	240005c0 	.word	0x240005c0

24001344 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
24001344:	b580      	push	{r7, lr}
24001346:	b094      	sub	sp, #80	; 0x50
24001348:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400134a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400134e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
24001350:	2306      	movs	r3, #6
24001352:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001354:	2300      	movs	r3, #0
24001356:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001358:	2300      	movs	r3, #0
2400135a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
2400135c:	2300      	movs	r3, #0
2400135e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
24001360:	2300      	movs	r3, #0
24001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001364:	2300      	movs	r3, #0
24001366:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001368:	2300      	movs	r3, #0
2400136a:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400136c:	2300      	movs	r3, #0
2400136e:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001370:	f107 0318 	add.w	r3, r7, #24
24001374:	f241 3288 	movw	r2, #5000	; 0x1388
24001378:	4619      	mov	r1, r3
2400137a:	4816      	ldr	r0, [pc, #88]	; (240013d4 <QSPI_WriteEnable+0x90>)
2400137c:	f010 fedc 	bl	24012138 <HAL_QSPI_Command>
24001380:	4603      	mov	r3, r0
24001382:	2b00      	cmp	r3, #0
24001384:	d001      	beq.n	2400138a <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
24001386:	2301      	movs	r3, #1
24001388:	e01f      	b.n	240013ca <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
2400138a:	2302      	movs	r3, #2
2400138c:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
2400138e:	2302      	movs	r3, #2
24001390:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
24001392:	2300      	movs	r3, #0
24001394:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
24001396:	2301      	movs	r3, #1
24001398:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
2400139a:	2310      	movs	r3, #16
2400139c:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2400139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240013a2:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
240013a4:	2305      	movs	r3, #5
240013a6:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
240013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
240013ae:	463a      	mov	r2, r7
240013b0:	f107 0118 	add.w	r1, r7, #24
240013b4:	f241 3388 	movw	r3, #5000	; 0x1388
240013b8:	4806      	ldr	r0, [pc, #24]	; (240013d4 <QSPI_WriteEnable+0x90>)
240013ba:	f011 fb67 	bl	24012a8c <HAL_QSPI_AutoPolling>
240013be:	4603      	mov	r3, r0
240013c0:	2b00      	cmp	r3, #0
240013c2:	d001      	beq.n	240013c8 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
240013c4:	2301      	movs	r3, #1
240013c6:	e000      	b.n	240013ca <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
240013c8:	2300      	movs	r3, #0
}
240013ca:	4618      	mov	r0, r3
240013cc:	3750      	adds	r7, #80	; 0x50
240013ce:	46bd      	mov	sp, r7
240013d0:	bd80      	pop	{r7, pc}
240013d2:	bf00      	nop
240013d4:	240005c0 	.word	0x240005c0

240013d8 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
240013d8:	b580      	push	{r7, lr}
240013da:	b092      	sub	sp, #72	; 0x48
240013dc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240013de:	f44f 7380 	mov.w	r3, #256	; 0x100
240013e2:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
240013e4:	2385      	movs	r3, #133	; 0x85
240013e6:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240013e8:	2300      	movs	r3, #0
240013ea:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240013ec:	2300      	movs	r3, #0
240013ee:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
240013f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
240013f6:	2300      	movs	r3, #0
240013f8:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240013fa:	2300      	movs	r3, #0
240013fc:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240013fe:	2300      	movs	r3, #0
24001400:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001402:	2300      	movs	r3, #0
24001404:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
24001406:	2301      	movs	r3, #1
24001408:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400140a:	1d3b      	adds	r3, r7, #4
2400140c:	f241 3288 	movw	r2, #5000	; 0x1388
24001410:	4619      	mov	r1, r3
24001412:	4837      	ldr	r0, [pc, #220]	; (240014f0 <QSPI_Configuration+0x118>)
24001414:	f010 fe90 	bl	24012138 <HAL_QSPI_Command>
24001418:	4603      	mov	r3, r0
2400141a:	2b00      	cmp	r3, #0
2400141c:	d001      	beq.n	24001422 <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
2400141e:	2301      	movs	r3, #1
24001420:	e061      	b.n	240014e6 <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
24001422:	1cfb      	adds	r3, r7, #3
24001424:	f241 3288 	movw	r2, #5000	; 0x1388
24001428:	4619      	mov	r1, r3
2400142a:	4831      	ldr	r0, [pc, #196]	; (240014f0 <QSPI_Configuration+0x118>)
2400142c:	f010 ffda 	bl	240123e4 <HAL_QSPI_Receive>
24001430:	4603      	mov	r3, r0
24001432:	2b00      	cmp	r3, #0
24001434:	d001      	beq.n	2400143a <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
24001436:	2301      	movs	r3, #1
24001438:	e055      	b.n	240014e6 <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
2400143a:	f7ff ff83 	bl	24001344 <QSPI_WriteEnable>
2400143e:	4603      	mov	r3, r0
24001440:	2b00      	cmp	r3, #0
24001442:	d001      	beq.n	24001448 <QSPI_Configuration+0x70>

        return HAL_ERROR;
24001444:	2301      	movs	r3, #1
24001446:	e04e      	b.n	240014e6 <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
24001448:	78fb      	ldrb	r3, [r7, #3]
2400144a:	b25b      	sxtb	r3, r3
2400144c:	f003 030f 	and.w	r3, r3, #15
24001450:	b25a      	sxtb	r2, r3
24001452:	23f0      	movs	r3, #240	; 0xf0
24001454:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24001456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24001458:	fa93 f3a3 	rbit	r3, r3
2400145c:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
2400145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001460:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24001462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24001464:	2b00      	cmp	r3, #0
24001466:	d101      	bne.n	2400146c <QSPI_Configuration+0x94>
  {
    return 32U;
24001468:	2320      	movs	r3, #32
2400146a:	e003      	b.n	24001474 <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
2400146c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2400146e:	fab3 f383 	clz	r3, r3
24001472:	b2db      	uxtb	r3, r3
24001474:	4619      	mov	r1, r3
24001476:	230a      	movs	r3, #10
24001478:	408b      	lsls	r3, r1
2400147a:	b25b      	sxtb	r3, r3
2400147c:	4313      	orrs	r3, r2
2400147e:	b25b      	sxtb	r3, r3
24001480:	b2db      	uxtb	r3, r3
24001482:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001484:	f44f 7380 	mov.w	r3, #256	; 0x100
24001488:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400148a:	2300      	movs	r3, #0
2400148c:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400148e:	2300      	movs	r3, #0
24001490:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001492:	2300      	movs	r3, #0
24001494:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001496:	2300      	movs	r3, #0
24001498:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
2400149a:	2381      	movs	r3, #129	; 0x81
2400149c:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400149e:	2300      	movs	r3, #0
240014a0:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
240014a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240014a6:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
240014a8:	2300      	movs	r3, #0
240014aa:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
240014ac:	2301      	movs	r3, #1
240014ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240014b0:	1d3b      	adds	r3, r7, #4
240014b2:	f241 3288 	movw	r2, #5000	; 0x1388
240014b6:	4619      	mov	r1, r3
240014b8:	480d      	ldr	r0, [pc, #52]	; (240014f0 <QSPI_Configuration+0x118>)
240014ba:	f010 fe3d 	bl	24012138 <HAL_QSPI_Command>
240014be:	4603      	mov	r3, r0
240014c0:	2b00      	cmp	r3, #0
240014c2:	d001      	beq.n	240014c8 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
240014c4:	2301      	movs	r3, #1
240014c6:	e00e      	b.n	240014e6 <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
240014c8:	1cfb      	adds	r3, r7, #3
240014ca:	f241 3288 	movw	r2, #5000	; 0x1388
240014ce:	4619      	mov	r1, r3
240014d0:	4807      	ldr	r0, [pc, #28]	; (240014f0 <QSPI_Configuration+0x118>)
240014d2:	f010 fef5 	bl	240122c0 <HAL_QSPI_Transmit>
240014d6:	4603      	mov	r3, r0
240014d8:	2b00      	cmp	r3, #0
240014da:	d003      	beq.n	240014e4 <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
240014dc:	f7ff fd24 	bl	24000f28 <Error_Handler>
        return HAL_ERROR;
240014e0:	2301      	movs	r3, #1
240014e2:	e000      	b.n	240014e6 <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
240014e4:	2300      	movs	r3, #0
}
240014e6:	4618      	mov	r0, r3
240014e8:	3748      	adds	r7, #72	; 0x48
240014ea:	46bd      	mov	sp, r7
240014ec:	bd80      	pop	{r7, pc}
240014ee:	bf00      	nop
240014f0:	240005c0 	.word	0x240005c0

240014f4 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
240014f4:	b580      	push	{r7, lr}
240014f6:	b090      	sub	sp, #64	; 0x40
240014f8:	af00      	add	r7, sp, #0
240014fa:	6078      	str	r0, [r7, #4]
240014fc:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
240014fe:	687a      	ldr	r2, [r7, #4]
24001500:	4b23      	ldr	r3, [pc, #140]	; (24001590 <CSP_QSPI_EraseSector+0x9c>)
24001502:	4013      	ands	r3, r2
24001504:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001506:	f44f 7380 	mov.w	r3, #256	; 0x100
2400150a:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001510:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001512:	2300      	movs	r3, #0
24001514:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001516:	2300      	movs	r3, #0
24001518:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400151a:	2300      	movs	r3, #0
2400151c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400151e:	2300      	movs	r3, #0
24001520:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
24001522:	23d8      	movs	r3, #216	; 0xd8
24001524:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
24001526:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400152a:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
2400152c:	2300      	movs	r3, #0
2400152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
24001530:	2300      	movs	r3, #0
24001532:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
24001534:	e022      	b.n	2400157c <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
24001536:	687b      	ldr	r3, [r7, #4]
24001538:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
2400153c:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
2400153e:	f7ff ff01 	bl	24001344 <QSPI_WriteEnable>
24001542:	4603      	mov	r3, r0
24001544:	2b00      	cmp	r3, #0
24001546:	d001      	beq.n	2400154c <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
24001548:	2301      	movs	r3, #1
2400154a:	e01c      	b.n	24001586 <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400154c:	f107 0308 	add.w	r3, r7, #8
24001550:	f241 3288 	movw	r2, #5000	; 0x1388
24001554:	4619      	mov	r1, r3
24001556:	480f      	ldr	r0, [pc, #60]	; (24001594 <CSP_QSPI_EraseSector+0xa0>)
24001558:	f010 fdee 	bl	24012138 <HAL_QSPI_Command>
2400155c:	4603      	mov	r3, r0
2400155e:	2b00      	cmp	r3, #0
24001560:	d001      	beq.n	24001566 <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
24001562:	2301      	movs	r3, #1
24001564:	e00f      	b.n	24001586 <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
24001566:	687b      	ldr	r3, [r7, #4]
24001568:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
2400156c:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
2400156e:	f7ff feaf 	bl	240012d0 <QSPI_AutoPollingMemReady>
24001572:	4603      	mov	r3, r0
24001574:	2b00      	cmp	r3, #0
24001576:	d001      	beq.n	2400157c <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
24001578:	2301      	movs	r3, #1
2400157a:	e004      	b.n	24001586 <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
2400157c:	683a      	ldr	r2, [r7, #0]
2400157e:	687b      	ldr	r3, [r7, #4]
24001580:	429a      	cmp	r2, r3
24001582:	d2d8      	bcs.n	24001536 <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
24001584:	2300      	movs	r3, #0
}
24001586:	4618      	mov	r0, r3
24001588:	3740      	adds	r7, #64	; 0x40
2400158a:	46bd      	mov	sp, r7
2400158c:	bd80      	pop	{r7, pc}
2400158e:	bf00      	nop
24001590:	ffff0000 	.word	0xffff0000
24001594:	240005c0 	.word	0x240005c0

24001598 <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
24001598:	b580      	push	{r7, lr}
2400159a:	b090      	sub	sp, #64	; 0x40
2400159c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400159e:	f44f 7380 	mov.w	r3, #256	; 0x100
240015a2:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240015a8:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240015aa:	2300      	movs	r3, #0
240015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240015ae:	2300      	movs	r3, #0
240015b0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240015b2:	2300      	movs	r3, #0
240015b4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240015b6:	2300      	movs	r3, #0
240015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
240015ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240015be:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
240015c0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
240015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
240015c6:	2300      	movs	r3, #0
240015c8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
240015ca:	2300      	movs	r3, #0
240015cc:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = QUAD_INOUT_FAST_READ_CMD;
240015ce:	23eb      	movs	r3, #235	; 0xeb
240015d0:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = N25Q128A_DUMMY_CYCLES_READ_QUAD;
240015d2:	230a      	movs	r3, #10
240015d4:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
240015d6:	2300      	movs	r3, #0
240015d8:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
240015da:	463a      	mov	r2, r7
240015dc:	f107 0308 	add.w	r3, r7, #8
240015e0:	4619      	mov	r1, r3
240015e2:	4806      	ldr	r0, [pc, #24]	; (240015fc <CSP_QSPI_EnableMemoryMappedMode+0x64>)
240015e4:	f011 fb41 	bl	24012c6a <HAL_QSPI_MemoryMapped>
240015e8:	4603      	mov	r3, r0
240015ea:	2b00      	cmp	r3, #0
240015ec:	d001      	beq.n	240015f2 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
240015ee:	2301      	movs	r3, #1
240015f0:	e000      	b.n	240015f4 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
240015f2:	2300      	movs	r3, #0
}
240015f4:	4618      	mov	r0, r3
240015f6:	3740      	adds	r7, #64	; 0x40
240015f8:	46bd      	mov	sp, r7
240015fa:	bd80      	pop	{r7, pc}
240015fc:	240005c0 	.word	0x240005c0

24001600 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip()
{
24001600:	b580      	push	{r7, lr}
24001602:	b090      	sub	sp, #64	; 0x40
24001604:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
24001606:	2300      	movs	r3, #0
24001608:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400160a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400160e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001614:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001616:	2300      	movs	r3, #0
24001618:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400161a:	2300      	movs	r3, #0
2400161c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400161e:	2300      	movs	r3, #0
24001620:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001622:	2300      	movs	r3, #0
24001624:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
24001626:	2366      	movs	r3, #102	; 0x66
24001628:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400162a:	2300      	movs	r3, #0
2400162c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
2400162e:	2300      	movs	r3, #0
24001630:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
24001632:	2300      	movs	r3, #0
24001634:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
24001636:	2300      	movs	r3, #0
24001638:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400163a:	1d3b      	adds	r3, r7, #4
2400163c:	f241 3288 	movw	r2, #5000	; 0x1388
24001640:	4619      	mov	r1, r3
24001642:	481d      	ldr	r0, [pc, #116]	; (240016b8 <QSPI_ResetChip+0xb8>)
24001644:	f010 fd78 	bl	24012138 <HAL_QSPI_Command>
24001648:	4603      	mov	r3, r0
2400164a:	2b00      	cmp	r3, #0
2400164c:	d001      	beq.n	24001652 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
2400164e:	2301      	movs	r3, #1
24001650:	e02e      	b.n	240016b0 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
24001652:	2300      	movs	r3, #0
24001654:	63fb      	str	r3, [r7, #60]	; 0x3c
24001656:	e003      	b.n	24001660 <QSPI_ResetChip+0x60>
        __NOP();
24001658:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
2400165a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2400165c:	3301      	adds	r3, #1
2400165e:	63fb      	str	r3, [r7, #60]	; 0x3c
24001660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001662:	2b2e      	cmp	r3, #46	; 0x2e
24001664:	d9f8      	bls.n	24001658 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001666:	f44f 7380 	mov.w	r3, #256	; 0x100
2400166a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001670:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001672:	2300      	movs	r3, #0
24001674:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001676:	2300      	movs	r3, #0
24001678:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400167a:	2300      	movs	r3, #0
2400167c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400167e:	2300      	movs	r3, #0
24001680:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
24001682:	2399      	movs	r3, #153	; 0x99
24001684:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001686:	2300      	movs	r3, #0
24001688:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
2400168a:	2300      	movs	r3, #0
2400168c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
2400168e:	2300      	movs	r3, #0
24001690:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
24001692:	2300      	movs	r3, #0
24001694:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001696:	1d3b      	adds	r3, r7, #4
24001698:	f241 3288 	movw	r2, #5000	; 0x1388
2400169c:	4619      	mov	r1, r3
2400169e:	4806      	ldr	r0, [pc, #24]	; (240016b8 <QSPI_ResetChip+0xb8>)
240016a0:	f010 fd4a 	bl	24012138 <HAL_QSPI_Command>
240016a4:	4603      	mov	r3, r0
240016a6:	2b00      	cmp	r3, #0
240016a8:	d001      	beq.n	240016ae <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
240016aa:	2301      	movs	r3, #1
240016ac:	e000      	b.n	240016b0 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
240016ae:	2300      	movs	r3, #0
}
240016b0:	4618      	mov	r0, r3
240016b2:	3740      	adds	r7, #64	; 0x40
240016b4:	46bd      	mov	sp, r7
240016b6:	bd80      	pop	{r7, pc}
240016b8:	240005c0 	.word	0x240005c0

240016bc <CSP_QSPI_Erase_Block>:


uint8_t CSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
240016bc:	b580      	push	{r7, lr}
240016be:	b090      	sub	sp, #64	; 0x40
240016c0:	af00      	add	r7, sp, #0
240016c2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
240016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
240016c8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
240016ca:	2320      	movs	r3, #32
240016cc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
240016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
240016d2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
240016d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240016d8:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
240016da:	687b      	ldr	r3, [r7, #4]
240016dc:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240016de:	2300      	movs	r3, #0
240016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
240016e2:	2300      	movs	r3, #0
240016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
240016e6:	2300      	movs	r3, #0
240016e8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
240016ea:	2300      	movs	r3, #0
240016ec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240016ee:	2300      	movs	r3, #0
240016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240016f2:	2300      	movs	r3, #0
240016f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
240016f6:	f7ff fe25 	bl	24001344 <QSPI_WriteEnable>
240016fa:	4603      	mov	r3, r0
240016fc:	2b00      	cmp	r3, #0
240016fe:	d001      	beq.n	24001704 <CSP_QSPI_Erase_Block+0x48>
  {
    return HAL_ERROR;
24001700:	2301      	movs	r3, #1
24001702:	e014      	b.n	2400172e <CSP_QSPI_Erase_Block+0x72>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001704:	f107 0308 	add.w	r3, r7, #8
24001708:	f241 3288 	movw	r2, #5000	; 0x1388
2400170c:	4619      	mov	r1, r3
2400170e:	480a      	ldr	r0, [pc, #40]	; (24001738 <CSP_QSPI_Erase_Block+0x7c>)
24001710:	f010 fd12 	bl	24012138 <HAL_QSPI_Command>
24001714:	4603      	mov	r3, r0
24001716:	2b00      	cmp	r3, #0
24001718:	d001      	beq.n	2400171e <CSP_QSPI_Erase_Block+0x62>
  {
    return HAL_ERROR;
2400171a:	2301      	movs	r3, #1
2400171c:	e007      	b.n	2400172e <CSP_QSPI_Erase_Block+0x72>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (QSPI_AutoPollingMemReady() != HAL_OK)
2400171e:	f7ff fdd7 	bl	240012d0 <QSPI_AutoPollingMemReady>
24001722:	4603      	mov	r3, r0
24001724:	2b00      	cmp	r3, #0
24001726:	d001      	beq.n	2400172c <CSP_QSPI_Erase_Block+0x70>
  {
    return HAL_ERROR;
24001728:	2301      	movs	r3, #1
2400172a:	e000      	b.n	2400172e <CSP_QSPI_Erase_Block+0x72>
  }

  return HAL_OK;
2400172c:	2300      	movs	r3, #0
}
2400172e:	4618      	mov	r0, r3
24001730:	3740      	adds	r7, #64	; 0x40
24001732:	46bd      	mov	sp, r7
24001734:	bd80      	pop	{r7, pc}
24001736:	bf00      	nop
24001738:	240005c0 	.word	0x240005c0

2400173c <CSP_QSPI_WriteMemory>:


uint8_t CSP_QSPI_WriteMemory(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
2400173c:	b580      	push	{r7, lr}
2400173e:	b096      	sub	sp, #88	; 0x58
24001740:	af00      	add	r7, sp, #0
24001742:	60f8      	str	r0, [r7, #12]
24001744:	60b9      	str	r1, [r7, #8]
24001746:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
24001748:	68bb      	ldr	r3, [r7, #8]
2400174a:	b2db      	uxtb	r3, r3
2400174c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
24001750:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
24001752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
24001754:	687b      	ldr	r3, [r7, #4]
24001756:	429a      	cmp	r2, r3
24001758:	d901      	bls.n	2400175e <CSP_QSPI_WriteMemory+0x22>
  {
    current_size = Size;
2400175a:	687b      	ldr	r3, [r7, #4]
2400175c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
2400175e:	68bb      	ldr	r3, [r7, #8]
24001760:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
24001762:	68ba      	ldr	r2, [r7, #8]
24001764:	687b      	ldr	r3, [r7, #4]
24001766:	4413      	add	r3, r2
24001768:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
2400176a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
24001770:	2312      	movs	r3, #18
24001772:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
24001774:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001778:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
2400177a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400177e:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001780:	2300      	movs	r3, #0
24001782:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
24001784:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001788:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
2400178a:	2300      	movs	r3, #0
2400178c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
2400178e:	2300      	movs	r3, #0
24001790:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001792:	2300      	movs	r3, #0
24001794:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001796:	2300      	movs	r3, #0
24001798:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
2400179a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400179c:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
2400179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240017a0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
240017a2:	f7ff fdcf 	bl	24001344 <QSPI_WriteEnable>
240017a6:	4603      	mov	r3, r0
240017a8:	2b00      	cmp	r3, #0
240017aa:	d001      	beq.n	240017b0 <CSP_QSPI_WriteMemory+0x74>
    {
      return HAL_ERROR;
240017ac:	2301      	movs	r3, #1
240017ae:	e038      	b.n	24001822 <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240017b0:	f107 0314 	add.w	r3, r7, #20
240017b4:	f241 3288 	movw	r2, #5000	; 0x1388
240017b8:	4619      	mov	r1, r3
240017ba:	481c      	ldr	r0, [pc, #112]	; (2400182c <CSP_QSPI_WriteMemory+0xf0>)
240017bc:	f010 fcbc 	bl	24012138 <HAL_QSPI_Command>
240017c0:	4603      	mov	r3, r0
240017c2:	2b00      	cmp	r3, #0
240017c4:	d001      	beq.n	240017ca <CSP_QSPI_WriteMemory+0x8e>
    {
      return HAL_ERROR;
240017c6:	2301      	movs	r3, #1
240017c8:	e02b      	b.n	24001822 <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240017ca:	f241 3288 	movw	r2, #5000	; 0x1388
240017ce:	68f9      	ldr	r1, [r7, #12]
240017d0:	4816      	ldr	r0, [pc, #88]	; (2400182c <CSP_QSPI_WriteMemory+0xf0>)
240017d2:	f010 fd75 	bl	240122c0 <HAL_QSPI_Transmit>
240017d6:	4603      	mov	r3, r0
240017d8:	2b00      	cmp	r3, #0
240017da:	d001      	beq.n	240017e0 <CSP_QSPI_WriteMemory+0xa4>
    {
      return HAL_ERROR;
240017dc:	2301      	movs	r3, #1
240017de:	e020      	b.n	24001822 <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
240017e0:	f7ff fd76 	bl	240012d0 <QSPI_AutoPollingMemReady>
240017e4:	4603      	mov	r3, r0
240017e6:	2b00      	cmp	r3, #0
240017e8:	d001      	beq.n	240017ee <CSP_QSPI_WriteMemory+0xb2>
    {
      return HAL_ERROR;
240017ea:	2301      	movs	r3, #1
240017ec:	e019      	b.n	24001822 <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
240017ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
240017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240017f2:	4413      	add	r3, r2
240017f4:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
240017f6:	68fa      	ldr	r2, [r7, #12]
240017f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240017fa:	4413      	add	r3, r2
240017fc:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
240017fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001800:	f503 7380 	add.w	r3, r3, #256	; 0x100
24001804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
24001806:	429a      	cmp	r2, r3
24001808:	d203      	bcs.n	24001812 <CSP_QSPI_WriteMemory+0xd6>
2400180a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2400180c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400180e:	1ad3      	subs	r3, r2, r3
24001810:	e001      	b.n	24001816 <CSP_QSPI_WriteMemory+0xda>
24001812:	f44f 7380 	mov.w	r3, #256	; 0x100
24001816:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
24001818:	6d3a      	ldr	r2, [r7, #80]	; 0x50
2400181a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2400181c:	429a      	cmp	r2, r3
2400181e:	d3bc      	bcc.n	2400179a <CSP_QSPI_WriteMemory+0x5e>

  return HAL_OK;
24001820:	2300      	movs	r3, #0
}
24001822:	4618      	mov	r0, r3
24001824:	3758      	adds	r7, #88	; 0x58
24001826:	46bd      	mov	sp, r7
24001828:	bd80      	pop	{r7, pc}
2400182a:	bf00      	nop
2400182c:	240005c0 	.word	0x240005c0

24001830 <CSP_QSPI_ReadMemory>:


uint8_t CSP_QSPI_ReadMemory(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
24001830:	b580      	push	{r7, lr}
24001832:	b092      	sub	sp, #72	; 0x48
24001834:	af00      	add	r7, sp, #0
24001836:	60f8      	str	r0, [r7, #12]
24001838:	60b9      	str	r1, [r7, #8]
2400183a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
2400183c:	f44f 7380 	mov.w	r3, #256	; 0x100
24001840:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
24001842:	23eb      	movs	r3, #235	; 0xeb
24001844:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
24001846:	f44f 6340 	mov.w	r3, #3072	; 0xc00
2400184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
2400184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001850:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
24001852:	68bb      	ldr	r3, [r7, #8]
24001854:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001856:	2300      	movs	r3, #0
24001858:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
2400185a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2400185e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
24001860:	230a      	movs	r3, #10
24001862:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
24001864:	687b      	ldr	r3, [r7, #4]
24001866:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001868:	2300      	movs	r3, #0
2400186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
2400186c:	2300      	movs	r3, #0
2400186e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001870:	2300      	movs	r3, #0
24001872:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001874:	f107 0310 	add.w	r3, r7, #16
24001878:	f241 3288 	movw	r2, #5000	; 0x1388
2400187c:	4619      	mov	r1, r3
2400187e:	4816      	ldr	r0, [pc, #88]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
24001880:	f010 fc5a 	bl	24012138 <HAL_QSPI_Command>
24001884:	4603      	mov	r3, r0
24001886:	2b00      	cmp	r3, #0
24001888:	d001      	beq.n	2400188e <CSP_QSPI_ReadMemory+0x5e>
  {
    return HAL_ERROR;
2400188a:	2301      	movs	r3, #1
2400188c:	e01f      	b.n	240018ce <CSP_QSPI_ReadMemory+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
2400188e:	4b12      	ldr	r3, [pc, #72]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
24001890:	681b      	ldr	r3, [r3, #0]
24001892:	685b      	ldr	r3, [r3, #4]
24001894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24001898:	4b0f      	ldr	r3, [pc, #60]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
2400189a:	681b      	ldr	r3, [r3, #0]
2400189c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
240018a0:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240018a2:	f241 3288 	movw	r2, #5000	; 0x1388
240018a6:	68f9      	ldr	r1, [r7, #12]
240018a8:	480b      	ldr	r0, [pc, #44]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
240018aa:	f010 fd9b 	bl	240123e4 <HAL_QSPI_Receive>
240018ae:	4603      	mov	r3, r0
240018b0:	2b00      	cmp	r3, #0
240018b2:	d001      	beq.n	240018b8 <CSP_QSPI_ReadMemory+0x88>
  {
    return HAL_ERROR;
240018b4:	2301      	movs	r3, #1
240018b6:	e00a      	b.n	240018ce <CSP_QSPI_ReadMemory+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
240018b8:	4b07      	ldr	r3, [pc, #28]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
240018ba:	681b      	ldr	r3, [r3, #0]
240018bc:	685b      	ldr	r3, [r3, #4]
240018be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240018c2:	4b05      	ldr	r3, [pc, #20]	; (240018d8 <CSP_QSPI_ReadMemory+0xa8>)
240018c4:	681b      	ldr	r3, [r3, #0]
240018c6:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
240018ca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
240018cc:	2300      	movs	r3, #0
}
240018ce:	4618      	mov	r0, r3
240018d0:	3748      	adds	r7, #72	; 0x48
240018d2:	46bd      	mov	sp, r7
240018d4:	bd80      	pop	{r7, pc}
240018d6:	bf00      	nop
240018d8:	240005c0 	.word	0x240005c0

240018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
240018dc:	b480      	push	{r7}
240018de:	b083      	sub	sp, #12
240018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240018e2:	4b0a      	ldr	r3, [pc, #40]	; (2400190c <HAL_MspInit+0x30>)
240018e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240018e8:	4a08      	ldr	r2, [pc, #32]	; (2400190c <HAL_MspInit+0x30>)
240018ea:	f043 0302 	orr.w	r3, r3, #2
240018ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
240018f2:	4b06      	ldr	r3, [pc, #24]	; (2400190c <HAL_MspInit+0x30>)
240018f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240018f8:	f003 0302 	and.w	r3, r3, #2
240018fc:	607b      	str	r3, [r7, #4]
240018fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24001900:	bf00      	nop
24001902:	370c      	adds	r7, #12
24001904:	46bd      	mov	sp, r7
24001906:	f85d 7b04 	ldr.w	r7, [sp], #4
2400190a:	4770      	bx	lr
2400190c:	58024400 	.word	0x58024400

24001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24001910:	b580      	push	{r7, lr}
24001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
24001914:	f013 f8c0 	bl	24014a98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24001918:	e7fe      	b.n	24001918 <NMI_Handler+0x8>

2400191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2400191a:	b480      	push	{r7}
2400191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2400191e:	e7fe      	b.n	2400191e <HardFault_Handler+0x4>

24001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
24001920:	b480      	push	{r7}
24001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24001924:	e7fe      	b.n	24001924 <MemManage_Handler+0x4>

24001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
24001926:	b480      	push	{r7}
24001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2400192a:	e7fe      	b.n	2400192a <BusFault_Handler+0x4>

2400192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2400192c:	b480      	push	{r7}
2400192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24001930:	e7fe      	b.n	24001930 <UsageFault_Handler+0x4>

24001932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
24001932:	b480      	push	{r7}
24001934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24001936:	bf00      	nop
24001938:	46bd      	mov	sp, r7
2400193a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400193e:	4770      	bx	lr

24001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24001940:	b480      	push	{r7}
24001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24001944:	bf00      	nop
24001946:	46bd      	mov	sp, r7
24001948:	f85d 7b04 	ldr.w	r7, [sp], #4
2400194c:	4770      	bx	lr

2400194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2400194e:	b480      	push	{r7}
24001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
24001952:	bf00      	nop
24001954:	46bd      	mov	sp, r7
24001956:	f85d 7b04 	ldr.w	r7, [sp], #4
2400195a:	4770      	bx	lr

2400195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2400195c:	b580      	push	{r7, lr}
2400195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24001960:	f000 fc4c 	bl	240021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
24001964:	bf00      	nop
24001966:	bd80      	pop	{r7, pc}

24001968 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
24001968:	b480      	push	{r7}
2400196a:	af00      	add	r7, sp, #0
}
2400196c:	bf00      	nop
2400196e:	46bd      	mov	sp, r7
24001970:	f85d 7b04 	ldr.w	r7, [sp], #4
24001974:	4770      	bx	lr

24001976 <_getpid>:

int _getpid(void)
{
24001976:	b480      	push	{r7}
24001978:	af00      	add	r7, sp, #0
	return 1;
2400197a:	2301      	movs	r3, #1
}
2400197c:	4618      	mov	r0, r3
2400197e:	46bd      	mov	sp, r7
24001980:	f85d 7b04 	ldr.w	r7, [sp], #4
24001984:	4770      	bx	lr

24001986 <_kill>:

int _kill(int pid, int sig)
{
24001986:	b580      	push	{r7, lr}
24001988:	b082      	sub	sp, #8
2400198a:	af00      	add	r7, sp, #0
2400198c:	6078      	str	r0, [r7, #4]
2400198e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
24001990:	f015 fe0c 	bl	240175ac <__errno>
24001994:	4603      	mov	r3, r0
24001996:	2216      	movs	r2, #22
24001998:	601a      	str	r2, [r3, #0]
	return -1;
2400199a:	f04f 33ff 	mov.w	r3, #4294967295
}
2400199e:	4618      	mov	r0, r3
240019a0:	3708      	adds	r7, #8
240019a2:	46bd      	mov	sp, r7
240019a4:	bd80      	pop	{r7, pc}

240019a6 <_exit>:

void _exit (int status)
{
240019a6:	b580      	push	{r7, lr}
240019a8:	b082      	sub	sp, #8
240019aa:	af00      	add	r7, sp, #0
240019ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
240019ae:	f04f 31ff 	mov.w	r1, #4294967295
240019b2:	6878      	ldr	r0, [r7, #4]
240019b4:	f7ff ffe7 	bl	24001986 <_kill>
	while (1) {}		/* Make sure we hang here */
240019b8:	e7fe      	b.n	240019b8 <_exit+0x12>

240019ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
240019ba:	b580      	push	{r7, lr}
240019bc:	b086      	sub	sp, #24
240019be:	af00      	add	r7, sp, #0
240019c0:	60f8      	str	r0, [r7, #12]
240019c2:	60b9      	str	r1, [r7, #8]
240019c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240019c6:	2300      	movs	r3, #0
240019c8:	617b      	str	r3, [r7, #20]
240019ca:	e00a      	b.n	240019e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
240019cc:	f3af 8000 	nop.w
240019d0:	4601      	mov	r1, r0
240019d2:	68bb      	ldr	r3, [r7, #8]
240019d4:	1c5a      	adds	r2, r3, #1
240019d6:	60ba      	str	r2, [r7, #8]
240019d8:	b2ca      	uxtb	r2, r1
240019da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240019dc:	697b      	ldr	r3, [r7, #20]
240019de:	3301      	adds	r3, #1
240019e0:	617b      	str	r3, [r7, #20]
240019e2:	697a      	ldr	r2, [r7, #20]
240019e4:	687b      	ldr	r3, [r7, #4]
240019e6:	429a      	cmp	r2, r3
240019e8:	dbf0      	blt.n	240019cc <_read+0x12>
	}

return len;
240019ea:	687b      	ldr	r3, [r7, #4]
}
240019ec:	4618      	mov	r0, r3
240019ee:	3718      	adds	r7, #24
240019f0:	46bd      	mov	sp, r7
240019f2:	bd80      	pop	{r7, pc}

240019f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
240019f4:	b580      	push	{r7, lr}
240019f6:	b086      	sub	sp, #24
240019f8:	af00      	add	r7, sp, #0
240019fa:	60f8      	str	r0, [r7, #12]
240019fc:	60b9      	str	r1, [r7, #8]
240019fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24001a00:	2300      	movs	r3, #0
24001a02:	617b      	str	r3, [r7, #20]
24001a04:	e009      	b.n	24001a1a <_write+0x26>
	{
		__io_putchar(*ptr++);
24001a06:	68bb      	ldr	r3, [r7, #8]
24001a08:	1c5a      	adds	r2, r3, #1
24001a0a:	60ba      	str	r2, [r7, #8]
24001a0c:	781b      	ldrb	r3, [r3, #0]
24001a0e:	4618      	mov	r0, r3
24001a10:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24001a14:	697b      	ldr	r3, [r7, #20]
24001a16:	3301      	adds	r3, #1
24001a18:	617b      	str	r3, [r7, #20]
24001a1a:	697a      	ldr	r2, [r7, #20]
24001a1c:	687b      	ldr	r3, [r7, #4]
24001a1e:	429a      	cmp	r2, r3
24001a20:	dbf1      	blt.n	24001a06 <_write+0x12>
	}
	return len;
24001a22:	687b      	ldr	r3, [r7, #4]
}
24001a24:	4618      	mov	r0, r3
24001a26:	3718      	adds	r7, #24
24001a28:	46bd      	mov	sp, r7
24001a2a:	bd80      	pop	{r7, pc}

24001a2c <_close>:

int _close(int file)
{
24001a2c:	b480      	push	{r7}
24001a2e:	b083      	sub	sp, #12
24001a30:	af00      	add	r7, sp, #0
24001a32:	6078      	str	r0, [r7, #4]
	return -1;
24001a34:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a38:	4618      	mov	r0, r3
24001a3a:	370c      	adds	r7, #12
24001a3c:	46bd      	mov	sp, r7
24001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a42:	4770      	bx	lr

24001a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
24001a44:	b480      	push	{r7}
24001a46:	b083      	sub	sp, #12
24001a48:	af00      	add	r7, sp, #0
24001a4a:	6078      	str	r0, [r7, #4]
24001a4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001a4e:	683b      	ldr	r3, [r7, #0]
24001a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24001a54:	605a      	str	r2, [r3, #4]
	return 0;
24001a56:	2300      	movs	r3, #0
}
24001a58:	4618      	mov	r0, r3
24001a5a:	370c      	adds	r7, #12
24001a5c:	46bd      	mov	sp, r7
24001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a62:	4770      	bx	lr

24001a64 <_isatty>:

int _isatty(int file)
{
24001a64:	b480      	push	{r7}
24001a66:	b083      	sub	sp, #12
24001a68:	af00      	add	r7, sp, #0
24001a6a:	6078      	str	r0, [r7, #4]
	return 1;
24001a6c:	2301      	movs	r3, #1
}
24001a6e:	4618      	mov	r0, r3
24001a70:	370c      	adds	r7, #12
24001a72:	46bd      	mov	sp, r7
24001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a78:	4770      	bx	lr

24001a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24001a7a:	b480      	push	{r7}
24001a7c:	b085      	sub	sp, #20
24001a7e:	af00      	add	r7, sp, #0
24001a80:	60f8      	str	r0, [r7, #12]
24001a82:	60b9      	str	r1, [r7, #8]
24001a84:	607a      	str	r2, [r7, #4]
	return 0;
24001a86:	2300      	movs	r3, #0
}
24001a88:	4618      	mov	r0, r3
24001a8a:	3714      	adds	r7, #20
24001a8c:	46bd      	mov	sp, r7
24001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a92:	4770      	bx	lr

24001a94 <_open>:

int _open(char *path, int flags, ...)
{
24001a94:	b40e      	push	{r1, r2, r3}
24001a96:	b480      	push	{r7}
24001a98:	b082      	sub	sp, #8
24001a9a:	af00      	add	r7, sp, #0
24001a9c:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
24001a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
24001aa2:	4618      	mov	r0, r3
24001aa4:	3708      	adds	r7, #8
24001aa6:	46bd      	mov	sp, r7
24001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
24001aac:	b003      	add	sp, #12
24001aae:	4770      	bx	lr

24001ab0 <_wait>:

int _wait(int *status)
{
24001ab0:	b580      	push	{r7, lr}
24001ab2:	b082      	sub	sp, #8
24001ab4:	af00      	add	r7, sp, #0
24001ab6:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
24001ab8:	f015 fd78 	bl	240175ac <__errno>
24001abc:	4603      	mov	r3, r0
24001abe:	220a      	movs	r2, #10
24001ac0:	601a      	str	r2, [r3, #0]
	return -1;
24001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
24001ac6:	4618      	mov	r0, r3
24001ac8:	3708      	adds	r7, #8
24001aca:	46bd      	mov	sp, r7
24001acc:	bd80      	pop	{r7, pc}

24001ace <_unlink>:

int _unlink(char *name)
{
24001ace:	b580      	push	{r7, lr}
24001ad0:	b082      	sub	sp, #8
24001ad2:	af00      	add	r7, sp, #0
24001ad4:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
24001ad6:	f015 fd69 	bl	240175ac <__errno>
24001ada:	4603      	mov	r3, r0
24001adc:	2202      	movs	r2, #2
24001ade:	601a      	str	r2, [r3, #0]
	return -1;
24001ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
24001ae4:	4618      	mov	r0, r3
24001ae6:	3708      	adds	r7, #8
24001ae8:	46bd      	mov	sp, r7
24001aea:	bd80      	pop	{r7, pc}

24001aec <_times>:

int _times(struct tms *buf)
{
24001aec:	b480      	push	{r7}
24001aee:	b083      	sub	sp, #12
24001af0:	af00      	add	r7, sp, #0
24001af2:	6078      	str	r0, [r7, #4]
	return -1;
24001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
24001af8:	4618      	mov	r0, r3
24001afa:	370c      	adds	r7, #12
24001afc:	46bd      	mov	sp, r7
24001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
24001b02:	4770      	bx	lr

24001b04 <_stat>:

int _stat(char *file, struct stat *st)
{
24001b04:	b480      	push	{r7}
24001b06:	b083      	sub	sp, #12
24001b08:	af00      	add	r7, sp, #0
24001b0a:	6078      	str	r0, [r7, #4]
24001b0c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001b0e:	683b      	ldr	r3, [r7, #0]
24001b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24001b14:	605a      	str	r2, [r3, #4]
	return 0;
24001b16:	2300      	movs	r3, #0
}
24001b18:	4618      	mov	r0, r3
24001b1a:	370c      	adds	r7, #12
24001b1c:	46bd      	mov	sp, r7
24001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001b22:	4770      	bx	lr

24001b24 <_link>:

int _link(char *old, char *new)
{
24001b24:	b580      	push	{r7, lr}
24001b26:	b082      	sub	sp, #8
24001b28:	af00      	add	r7, sp, #0
24001b2a:	6078      	str	r0, [r7, #4]
24001b2c:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
24001b2e:	f015 fd3d 	bl	240175ac <__errno>
24001b32:	4603      	mov	r3, r0
24001b34:	221f      	movs	r2, #31
24001b36:	601a      	str	r2, [r3, #0]
	return -1;
24001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b3c:	4618      	mov	r0, r3
24001b3e:	3708      	adds	r7, #8
24001b40:	46bd      	mov	sp, r7
24001b42:	bd80      	pop	{r7, pc}

24001b44 <_fork>:

int _fork(void)
{
24001b44:	b580      	push	{r7, lr}
24001b46:	af00      	add	r7, sp, #0
	errno = EAGAIN;
24001b48:	f015 fd30 	bl	240175ac <__errno>
24001b4c:	4603      	mov	r3, r0
24001b4e:	220b      	movs	r2, #11
24001b50:	601a      	str	r2, [r3, #0]
	return -1;
24001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b56:	4618      	mov	r0, r3
24001b58:	bd80      	pop	{r7, pc}

24001b5a <_execve>:

int _execve(char *name, char **argv, char **env)
{
24001b5a:	b580      	push	{r7, lr}
24001b5c:	b084      	sub	sp, #16
24001b5e:	af00      	add	r7, sp, #0
24001b60:	60f8      	str	r0, [r7, #12]
24001b62:	60b9      	str	r1, [r7, #8]
24001b64:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
24001b66:	f015 fd21 	bl	240175ac <__errno>
24001b6a:	4603      	mov	r3, r0
24001b6c:	220c      	movs	r2, #12
24001b6e:	601a      	str	r2, [r3, #0]
	return -1;
24001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b74:	4618      	mov	r0, r3
24001b76:	3710      	adds	r7, #16
24001b78:	46bd      	mov	sp, r7
24001b7a:	bd80      	pop	{r7, pc}

24001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24001b7c:	b580      	push	{r7, lr}
24001b7e:	b086      	sub	sp, #24
24001b80:	af00      	add	r7, sp, #0
24001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24001b84:	4a14      	ldr	r2, [pc, #80]	; (24001bd8 <_sbrk+0x5c>)
24001b86:	4b15      	ldr	r3, [pc, #84]	; (24001bdc <_sbrk+0x60>)
24001b88:	1ad3      	subs	r3, r2, r3
24001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24001b8c:	697b      	ldr	r3, [r7, #20]
24001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24001b90:	4b13      	ldr	r3, [pc, #76]	; (24001be0 <_sbrk+0x64>)
24001b92:	681b      	ldr	r3, [r3, #0]
24001b94:	2b00      	cmp	r3, #0
24001b96:	d102      	bne.n	24001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24001b98:	4b11      	ldr	r3, [pc, #68]	; (24001be0 <_sbrk+0x64>)
24001b9a:	4a12      	ldr	r2, [pc, #72]	; (24001be4 <_sbrk+0x68>)
24001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24001b9e:	4b10      	ldr	r3, [pc, #64]	; (24001be0 <_sbrk+0x64>)
24001ba0:	681a      	ldr	r2, [r3, #0]
24001ba2:	687b      	ldr	r3, [r7, #4]
24001ba4:	4413      	add	r3, r2
24001ba6:	693a      	ldr	r2, [r7, #16]
24001ba8:	429a      	cmp	r2, r3
24001baa:	d207      	bcs.n	24001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
24001bac:	f015 fcfe 	bl	240175ac <__errno>
24001bb0:	4603      	mov	r3, r0
24001bb2:	220c      	movs	r2, #12
24001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24001bb6:	f04f 33ff 	mov.w	r3, #4294967295
24001bba:	e009      	b.n	24001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24001bbc:	4b08      	ldr	r3, [pc, #32]	; (24001be0 <_sbrk+0x64>)
24001bbe:	681b      	ldr	r3, [r3, #0]
24001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24001bc2:	4b07      	ldr	r3, [pc, #28]	; (24001be0 <_sbrk+0x64>)
24001bc4:	681a      	ldr	r2, [r3, #0]
24001bc6:	687b      	ldr	r3, [r7, #4]
24001bc8:	4413      	add	r3, r2
24001bca:	4a05      	ldr	r2, [pc, #20]	; (24001be0 <_sbrk+0x64>)
24001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24001bce:	68fb      	ldr	r3, [r7, #12]
}
24001bd0:	4618      	mov	r0, r3
24001bd2:	3718      	adds	r7, #24
24001bd4:	46bd      	mov	sp, r7
24001bd6:	bd80      	pop	{r7, pc}
24001bd8:	24080004 	.word	0x24080004
24001bdc:	00000400 	.word	0x00000400
24001be0:	24000610 	.word	0x24000610
24001be4:	24017780 	.word	0x24017780

24001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24001be8:	b480      	push	{r7}
24001bea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24001bec:	4b37      	ldr	r3, [pc, #220]	; (24001ccc <SystemInit+0xe4>)
24001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24001bf2:	4a36      	ldr	r2, [pc, #216]	; (24001ccc <SystemInit+0xe4>)
24001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001bfc:	4b34      	ldr	r3, [pc, #208]	; (24001cd0 <SystemInit+0xe8>)
24001bfe:	681b      	ldr	r3, [r3, #0]
24001c00:	f003 030f 	and.w	r3, r3, #15
24001c04:	2b06      	cmp	r3, #6
24001c06:	d807      	bhi.n	24001c18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001c08:	4b31      	ldr	r3, [pc, #196]	; (24001cd0 <SystemInit+0xe8>)
24001c0a:	681b      	ldr	r3, [r3, #0]
24001c0c:	f023 030f 	bic.w	r3, r3, #15
24001c10:	4a2f      	ldr	r2, [pc, #188]	; (24001cd0 <SystemInit+0xe8>)
24001c12:	f043 0307 	orr.w	r3, r3, #7
24001c16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24001c18:	4b2e      	ldr	r3, [pc, #184]	; (24001cd4 <SystemInit+0xec>)
24001c1a:	681b      	ldr	r3, [r3, #0]
24001c1c:	4a2d      	ldr	r2, [pc, #180]	; (24001cd4 <SystemInit+0xec>)
24001c1e:	f043 0301 	orr.w	r3, r3, #1
24001c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24001c24:	4b2b      	ldr	r3, [pc, #172]	; (24001cd4 <SystemInit+0xec>)
24001c26:	2200      	movs	r2, #0
24001c28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24001c2a:	4b2a      	ldr	r3, [pc, #168]	; (24001cd4 <SystemInit+0xec>)
24001c2c:	681a      	ldr	r2, [r3, #0]
24001c2e:	4929      	ldr	r1, [pc, #164]	; (24001cd4 <SystemInit+0xec>)
24001c30:	4b29      	ldr	r3, [pc, #164]	; (24001cd8 <SystemInit+0xf0>)
24001c32:	4013      	ands	r3, r2
24001c34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001c36:	4b26      	ldr	r3, [pc, #152]	; (24001cd0 <SystemInit+0xe8>)
24001c38:	681b      	ldr	r3, [r3, #0]
24001c3a:	f003 0308 	and.w	r3, r3, #8
24001c3e:	2b00      	cmp	r3, #0
24001c40:	d007      	beq.n	24001c52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001c42:	4b23      	ldr	r3, [pc, #140]	; (24001cd0 <SystemInit+0xe8>)
24001c44:	681b      	ldr	r3, [r3, #0]
24001c46:	f023 030f 	bic.w	r3, r3, #15
24001c4a:	4a21      	ldr	r2, [pc, #132]	; (24001cd0 <SystemInit+0xe8>)
24001c4c:	f043 0307 	orr.w	r3, r3, #7
24001c50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24001c52:	4b20      	ldr	r3, [pc, #128]	; (24001cd4 <SystemInit+0xec>)
24001c54:	2200      	movs	r2, #0
24001c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24001c58:	4b1e      	ldr	r3, [pc, #120]	; (24001cd4 <SystemInit+0xec>)
24001c5a:	2200      	movs	r2, #0
24001c5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24001c5e:	4b1d      	ldr	r3, [pc, #116]	; (24001cd4 <SystemInit+0xec>)
24001c60:	2200      	movs	r2, #0
24001c62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24001c64:	4b1b      	ldr	r3, [pc, #108]	; (24001cd4 <SystemInit+0xec>)
24001c66:	4a1d      	ldr	r2, [pc, #116]	; (24001cdc <SystemInit+0xf4>)
24001c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24001c6a:	4b1a      	ldr	r3, [pc, #104]	; (24001cd4 <SystemInit+0xec>)
24001c6c:	4a1c      	ldr	r2, [pc, #112]	; (24001ce0 <SystemInit+0xf8>)
24001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24001c70:	4b18      	ldr	r3, [pc, #96]	; (24001cd4 <SystemInit+0xec>)
24001c72:	4a1c      	ldr	r2, [pc, #112]	; (24001ce4 <SystemInit+0xfc>)
24001c74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24001c76:	4b17      	ldr	r3, [pc, #92]	; (24001cd4 <SystemInit+0xec>)
24001c78:	2200      	movs	r2, #0
24001c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24001c7c:	4b15      	ldr	r3, [pc, #84]	; (24001cd4 <SystemInit+0xec>)
24001c7e:	4a19      	ldr	r2, [pc, #100]	; (24001ce4 <SystemInit+0xfc>)
24001c80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24001c82:	4b14      	ldr	r3, [pc, #80]	; (24001cd4 <SystemInit+0xec>)
24001c84:	2200      	movs	r2, #0
24001c86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24001c88:	4b12      	ldr	r3, [pc, #72]	; (24001cd4 <SystemInit+0xec>)
24001c8a:	4a16      	ldr	r2, [pc, #88]	; (24001ce4 <SystemInit+0xfc>)
24001c8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24001c8e:	4b11      	ldr	r3, [pc, #68]	; (24001cd4 <SystemInit+0xec>)
24001c90:	2200      	movs	r2, #0
24001c92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24001c94:	4b0f      	ldr	r3, [pc, #60]	; (24001cd4 <SystemInit+0xec>)
24001c96:	681b      	ldr	r3, [r3, #0]
24001c98:	4a0e      	ldr	r2, [pc, #56]	; (24001cd4 <SystemInit+0xec>)
24001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24001ca0:	4b0c      	ldr	r3, [pc, #48]	; (24001cd4 <SystemInit+0xec>)
24001ca2:	2200      	movs	r2, #0
24001ca4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24001ca6:	4b10      	ldr	r3, [pc, #64]	; (24001ce8 <SystemInit+0x100>)
24001ca8:	681a      	ldr	r2, [r3, #0]
24001caa:	4b10      	ldr	r3, [pc, #64]	; (24001cec <SystemInit+0x104>)
24001cac:	4013      	ands	r3, r2
24001cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24001cb2:	d202      	bcs.n	24001cba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24001cb4:	4b0e      	ldr	r3, [pc, #56]	; (24001cf0 <SystemInit+0x108>)
24001cb6:	2201      	movs	r2, #1
24001cb8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24001cba:	4b0e      	ldr	r3, [pc, #56]	; (24001cf4 <SystemInit+0x10c>)
24001cbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
24001cc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24001cc2:	bf00      	nop
24001cc4:	46bd      	mov	sp, r7
24001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
24001cca:	4770      	bx	lr
24001ccc:	e000ed00 	.word	0xe000ed00
24001cd0:	52002000 	.word	0x52002000
24001cd4:	58024400 	.word	0x58024400
24001cd8:	eaf6ed7f 	.word	0xeaf6ed7f
24001cdc:	02020200 	.word	0x02020200
24001ce0:	01ff0000 	.word	0x01ff0000
24001ce4:	01010280 	.word	0x01010280
24001ce8:	5c001000 	.word	0x5c001000
24001cec:	ffff0000 	.word	0xffff0000
24001cf0:	51008108 	.word	0x51008108
24001cf4:	52004000 	.word	0x52004000

24001cf8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
24001cf8:	b480      	push	{r7}
24001cfa:	b08b      	sub	sp, #44	; 0x2c
24001cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24001cfe:	4bb1      	ldr	r3, [pc, #708]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001d00:	691b      	ldr	r3, [r3, #16]
24001d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
24001d06:	2b18      	cmp	r3, #24
24001d08:	f200 812e 	bhi.w	24001f68 <SystemCoreClockUpdate+0x270>
24001d0c:	a201      	add	r2, pc, #4	; (adr r2, 24001d14 <SystemCoreClockUpdate+0x1c>)
24001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24001d12:	bf00      	nop
24001d14:	24001d79 	.word	0x24001d79
24001d18:	24001f69 	.word	0x24001f69
24001d1c:	24001f69 	.word	0x24001f69
24001d20:	24001f69 	.word	0x24001f69
24001d24:	24001f69 	.word	0x24001f69
24001d28:	24001f69 	.word	0x24001f69
24001d2c:	24001f69 	.word	0x24001f69
24001d30:	24001f69 	.word	0x24001f69
24001d34:	24001d8d 	.word	0x24001d8d
24001d38:	24001f69 	.word	0x24001f69
24001d3c:	24001f69 	.word	0x24001f69
24001d40:	24001f69 	.word	0x24001f69
24001d44:	24001f69 	.word	0x24001f69
24001d48:	24001f69 	.word	0x24001f69
24001d4c:	24001f69 	.word	0x24001f69
24001d50:	24001f69 	.word	0x24001f69
24001d54:	24001d93 	.word	0x24001d93
24001d58:	24001f69 	.word	0x24001f69
24001d5c:	24001f69 	.word	0x24001f69
24001d60:	24001f69 	.word	0x24001f69
24001d64:	24001f69 	.word	0x24001f69
24001d68:	24001f69 	.word	0x24001f69
24001d6c:	24001f69 	.word	0x24001f69
24001d70:	24001f69 	.word	0x24001f69
24001d74:	24001d99 	.word	0x24001d99
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001d78:	4b92      	ldr	r3, [pc, #584]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001d7a:	681b      	ldr	r3, [r3, #0]
24001d7c:	08db      	lsrs	r3, r3, #3
24001d7e:	f003 0303 	and.w	r3, r3, #3
24001d82:	4a91      	ldr	r2, [pc, #580]	; (24001fc8 <SystemCoreClockUpdate+0x2d0>)
24001d84:	fa22 f303 	lsr.w	r3, r2, r3
24001d88:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d8a:	e0f7      	b.n	24001f7c <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
24001d8c:	4b8f      	ldr	r3, [pc, #572]	; (24001fcc <SystemCoreClockUpdate+0x2d4>)
24001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d90:	e0f4      	b.n	24001f7c <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
24001d92:	4b8f      	ldr	r3, [pc, #572]	; (24001fd0 <SystemCoreClockUpdate+0x2d8>)
24001d94:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d96:	e0f1      	b.n	24001f7c <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24001d98:	4b8a      	ldr	r3, [pc, #552]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001d9c:	f003 0303 	and.w	r3, r3, #3
24001da0:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24001da2:	4b88      	ldr	r3, [pc, #544]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001da6:	091b      	lsrs	r3, r3, #4
24001da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24001dac:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24001dae:	4b85      	ldr	r3, [pc, #532]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001db2:	f003 0301 	and.w	r3, r3, #1
24001db6:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24001db8:	4b82      	ldr	r3, [pc, #520]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001dbc:	08db      	lsrs	r3, r3, #3
24001dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
24001dc2:	697a      	ldr	r2, [r7, #20]
24001dc4:	fb02 f303 	mul.w	r3, r2, r3
24001dc8:	ee07 3a90 	vmov	s15, r3
24001dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001dd0:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
24001dd4:	69bb      	ldr	r3, [r7, #24]
24001dd6:	2b00      	cmp	r3, #0
24001dd8:	f000 80c3 	beq.w	24001f62 <SystemCoreClockUpdate+0x26a>
24001ddc:	69fb      	ldr	r3, [r7, #28]
24001dde:	2b02      	cmp	r3, #2
24001de0:	d059      	beq.n	24001e96 <SystemCoreClockUpdate+0x19e>
24001de2:	69fb      	ldr	r3, [r7, #28]
24001de4:	2b02      	cmp	r3, #2
24001de6:	d878      	bhi.n	24001eda <SystemCoreClockUpdate+0x1e2>
24001de8:	69fb      	ldr	r3, [r7, #28]
24001dea:	2b00      	cmp	r3, #0
24001dec:	d003      	beq.n	24001df6 <SystemCoreClockUpdate+0xfe>
24001dee:	69fb      	ldr	r3, [r7, #28]
24001df0:	2b01      	cmp	r3, #1
24001df2:	d02e      	beq.n	24001e52 <SystemCoreClockUpdate+0x15a>
24001df4:	e071      	b.n	24001eda <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001df6:	4b73      	ldr	r3, [pc, #460]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001df8:	681b      	ldr	r3, [r3, #0]
24001dfa:	08db      	lsrs	r3, r3, #3
24001dfc:	f003 0303 	and.w	r3, r3, #3
24001e00:	4a71      	ldr	r2, [pc, #452]	; (24001fc8 <SystemCoreClockUpdate+0x2d0>)
24001e02:	fa22 f303 	lsr.w	r3, r2, r3
24001e06:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e08:	68fb      	ldr	r3, [r7, #12]
24001e0a:	ee07 3a90 	vmov	s15, r3
24001e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e12:	69bb      	ldr	r3, [r7, #24]
24001e14:	ee07 3a90 	vmov	s15, r3
24001e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e20:	4b68      	ldr	r3, [pc, #416]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e28:	ee07 3a90 	vmov	s15, r3
24001e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e30:	ed97 6a04 	vldr	s12, [r7, #16]
24001e34:	eddf 5a67 	vldr	s11, [pc, #412]	; 24001fd4 <SystemCoreClockUpdate+0x2dc>
24001e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e4c:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
24001e50:	e071      	b.n	24001f36 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e52:	69bb      	ldr	r3, [r7, #24]
24001e54:	ee07 3a90 	vmov	s15, r3
24001e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24001fd8 <SystemCoreClockUpdate+0x2e0>
24001e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e64:	4b57      	ldr	r3, [pc, #348]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e6c:	ee07 3a90 	vmov	s15, r3
24001e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e74:	ed97 6a04 	vldr	s12, [r7, #16]
24001e78:	eddf 5a56 	vldr	s11, [pc, #344]	; 24001fd4 <SystemCoreClockUpdate+0x2dc>
24001e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e90:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001e94:	e04f      	b.n	24001f36 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e96:	69bb      	ldr	r3, [r7, #24]
24001e98:	ee07 3a90 	vmov	s15, r3
24001e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001ea0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24001fdc <SystemCoreClockUpdate+0x2e4>
24001ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001ea8:	4b46      	ldr	r3, [pc, #280]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001eb0:	ee07 3a90 	vmov	s15, r3
24001eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001eb8:	ed97 6a04 	vldr	s12, [r7, #16]
24001ebc:	eddf 5a45 	vldr	s11, [pc, #276]	; 24001fd4 <SystemCoreClockUpdate+0x2dc>
24001ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
24001ed4:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001ed8:	e02d      	b.n	24001f36 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001eda:	4b3a      	ldr	r3, [pc, #232]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001edc:	681b      	ldr	r3, [r3, #0]
24001ede:	08db      	lsrs	r3, r3, #3
24001ee0:	f003 0303 	and.w	r3, r3, #3
24001ee4:	4a38      	ldr	r2, [pc, #224]	; (24001fc8 <SystemCoreClockUpdate+0x2d0>)
24001ee6:	fa22 f303 	lsr.w	r3, r2, r3
24001eea:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001eec:	68fb      	ldr	r3, [r7, #12]
24001eee:	ee07 3a90 	vmov	s15, r3
24001ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001ef6:	69bb      	ldr	r3, [r7, #24]
24001ef8:	ee07 3a90 	vmov	s15, r3
24001efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001f04:	4b2f      	ldr	r3, [pc, #188]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001f0c:	ee07 3a90 	vmov	s15, r3
24001f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001f14:	ed97 6a04 	vldr	s12, [r7, #16]
24001f18:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24001fd4 <SystemCoreClockUpdate+0x2dc>
24001f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
24001f30:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001f34:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24001f36:	4b23      	ldr	r3, [pc, #140]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001f3a:	0a5b      	lsrs	r3, r3, #9
24001f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24001f40:	3301      	adds	r3, #1
24001f42:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24001f44:	68bb      	ldr	r3, [r7, #8]
24001f46:	ee07 3a90 	vmov	s15, r3
24001f4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24001f4e:	edd7 6a08 	vldr	s13, [r7, #32]
24001f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
24001f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24001f5a:	ee17 3a90 	vmov	r3, s15
24001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
24001f60:	e00c      	b.n	24001f7c <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
24001f62:	2300      	movs	r3, #0
24001f64:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f66:	e009      	b.n	24001f7c <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001f68:	4b16      	ldr	r3, [pc, #88]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001f6a:	681b      	ldr	r3, [r3, #0]
24001f6c:	08db      	lsrs	r3, r3, #3
24001f6e:	f003 0303 	and.w	r3, r3, #3
24001f72:	4a15      	ldr	r2, [pc, #84]	; (24001fc8 <SystemCoreClockUpdate+0x2d0>)
24001f74:	fa22 f303 	lsr.w	r3, r2, r3
24001f78:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f7a:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
24001f7c:	4b11      	ldr	r3, [pc, #68]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001f7e:	699b      	ldr	r3, [r3, #24]
24001f80:	0a1b      	lsrs	r3, r3, #8
24001f82:	f003 030f 	and.w	r3, r3, #15
24001f86:	4a16      	ldr	r2, [pc, #88]	; (24001fe0 <SystemCoreClockUpdate+0x2e8>)
24001f88:	5cd3      	ldrb	r3, [r2, r3]
24001f8a:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
24001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001f8e:	687b      	ldr	r3, [r7, #4]
24001f90:	fa22 f303 	lsr.w	r3, r2, r3
24001f94:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001f96:	4b0b      	ldr	r3, [pc, #44]	; (24001fc4 <SystemCoreClockUpdate+0x2cc>)
24001f98:	699b      	ldr	r3, [r3, #24]
24001f9a:	f003 030f 	and.w	r3, r3, #15
24001f9e:	4a10      	ldr	r2, [pc, #64]	; (24001fe0 <SystemCoreClockUpdate+0x2e8>)
24001fa0:	5cd3      	ldrb	r3, [r2, r3]
24001fa2:	f003 031f 	and.w	r3, r3, #31
24001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001fa8:	fa22 f303 	lsr.w	r3, r2, r3
24001fac:	4a0d      	ldr	r2, [pc, #52]	; (24001fe4 <SystemCoreClockUpdate+0x2ec>)
24001fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24001fb0:	4a0d      	ldr	r2, [pc, #52]	; (24001fe8 <SystemCoreClockUpdate+0x2f0>)
24001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
24001fb6:	bf00      	nop
24001fb8:	372c      	adds	r7, #44	; 0x2c
24001fba:	46bd      	mov	sp, r7
24001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24001fc0:	4770      	bx	lr
24001fc2:	bf00      	nop
24001fc4:	58024400 	.word	0x58024400
24001fc8:	03d09000 	.word	0x03d09000
24001fcc:	003d0900 	.word	0x003d0900
24001fd0:	016e3600 	.word	0x016e3600
24001fd4:	46000000 	.word	0x46000000
24001fd8:	4a742400 	.word	0x4a742400
24001fdc:	4bb71b00 	.word	0x4bb71b00
24001fe0:	24017764 	.word	0x24017764
24001fe4:	240004cc 	.word	0x240004cc
24001fe8:	240004c8 	.word	0x240004c8

24001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 24002024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
24001ff0:	f7ff fdfa 	bl	24001be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24001ff4:	480c      	ldr	r0, [pc, #48]	; (24002028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24001ff6:	490d      	ldr	r1, [pc, #52]	; (2400202c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24001ff8:	4a0d      	ldr	r2, [pc, #52]	; (24002030 <LoopFillZerobss+0x1a>)
  movs r3, #0
24001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
24001ffc:	e002      	b.n	24002004 <LoopCopyDataInit>

24001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24002002:	3304      	adds	r3, #4

24002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
24002008:	d3f9      	bcc.n	24001ffe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2400200a:	4a0a      	ldr	r2, [pc, #40]	; (24002034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
2400200c:	4c0a      	ldr	r4, [pc, #40]	; (24002038 <LoopFillZerobss+0x22>)
  movs r3, #0
2400200e:	2300      	movs	r3, #0
  b LoopFillZerobss
24002010:	e001      	b.n	24002016 <LoopFillZerobss>

24002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24002014:	3204      	adds	r2, #4

24002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
24002018:	d3fb      	bcc.n	24002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
2400201a:	f015 fae1 	bl	240175e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2400201e:	f7fe fe21 	bl	24000c64 <main>
  bx  lr
24002022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24002024:	24080004 	.word	0x24080004
  ldr r0, =_sdata
24002028:	240004a8 	.word	0x240004a8
  ldr r1, =_edata
2400202c:	2400053c 	.word	0x2400053c
  ldr r2, =_sidata
24002030:	240004a8 	.word	0x240004a8
  ldr r2, =_sbss
24002034:	2400053c 	.word	0x2400053c
  ldr r4, =_ebss
24002038:	24000634 	.word	0x24000634

2400203c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2400203c:	e7fe      	b.n	2400203c <ADC3_IRQHandler>
	...

24002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24002040:	b580      	push	{r7, lr}
24002042:	b082      	sub	sp, #8
24002044:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24002046:	2003      	movs	r0, #3
24002048:	f000 fefc 	bl	24002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400204c:	f012 fa1e 	bl	2401448c <HAL_RCC_GetSysClockFreq>
24002050:	4602      	mov	r2, r0
24002052:	4b15      	ldr	r3, [pc, #84]	; (240020a8 <HAL_Init+0x68>)
24002054:	699b      	ldr	r3, [r3, #24]
24002056:	0a1b      	lsrs	r3, r3, #8
24002058:	f003 030f 	and.w	r3, r3, #15
2400205c:	4913      	ldr	r1, [pc, #76]	; (240020ac <HAL_Init+0x6c>)
2400205e:	5ccb      	ldrb	r3, [r1, r3]
24002060:	f003 031f 	and.w	r3, r3, #31
24002064:	fa22 f303 	lsr.w	r3, r2, r3
24002068:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400206a:	4b0f      	ldr	r3, [pc, #60]	; (240020a8 <HAL_Init+0x68>)
2400206c:	699b      	ldr	r3, [r3, #24]
2400206e:	f003 030f 	and.w	r3, r3, #15
24002072:	4a0e      	ldr	r2, [pc, #56]	; (240020ac <HAL_Init+0x6c>)
24002074:	5cd3      	ldrb	r3, [r2, r3]
24002076:	f003 031f 	and.w	r3, r3, #31
2400207a:	687a      	ldr	r2, [r7, #4]
2400207c:	fa22 f303 	lsr.w	r3, r2, r3
24002080:	4a0b      	ldr	r2, [pc, #44]	; (240020b0 <HAL_Init+0x70>)
24002082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24002084:	4a0b      	ldr	r2, [pc, #44]	; (240020b4 <HAL_Init+0x74>)
24002086:	687b      	ldr	r3, [r7, #4]
24002088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400208a:	200f      	movs	r0, #15
2400208c:	f000 f880 	bl	24002190 <HAL_InitTick>
24002090:	4603      	mov	r3, r0
24002092:	2b00      	cmp	r3, #0
24002094:	d001      	beq.n	2400209a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24002096:	2301      	movs	r3, #1
24002098:	e002      	b.n	240020a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
2400209a:	f7ff fc1f 	bl	240018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2400209e:	2300      	movs	r3, #0
}
240020a0:	4618      	mov	r0, r3
240020a2:	3708      	adds	r7, #8
240020a4:	46bd      	mov	sp, r7
240020a6:	bd80      	pop	{r7, pc}
240020a8:	58024400 	.word	0x58024400
240020ac:	24017764 	.word	0x24017764
240020b0:	240004cc 	.word	0x240004cc
240020b4:	240004c8 	.word	0x240004c8

240020b8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
240020b8:	b580      	push	{r7, lr}
240020ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
240020bc:	4b26      	ldr	r3, [pc, #152]	; (24002158 <HAL_DeInit+0xa0>)
240020be:	4a27      	ldr	r2, [pc, #156]	; (2400215c <HAL_DeInit+0xa4>)
240020c0:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
240020c2:	4b25      	ldr	r3, [pc, #148]	; (24002158 <HAL_DeInit+0xa0>)
240020c4:	2200      	movs	r2, #0
240020c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
240020c8:	4b23      	ldr	r3, [pc, #140]	; (24002158 <HAL_DeInit+0xa0>)
240020ca:	4a25      	ldr	r2, [pc, #148]	; (24002160 <HAL_DeInit+0xa8>)
240020cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
240020d0:	4b21      	ldr	r3, [pc, #132]	; (24002158 <HAL_DeInit+0xa0>)
240020d2:	2200      	movs	r2, #0
240020d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
240020d8:	4b1f      	ldr	r3, [pc, #124]	; (24002158 <HAL_DeInit+0xa0>)
240020da:	f240 2271 	movw	r2, #625	; 0x271
240020de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
240020e2:	4b1d      	ldr	r3, [pc, #116]	; (24002158 <HAL_DeInit+0xa0>)
240020e4:	2200      	movs	r2, #0
240020e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
240020ea:	4b1b      	ldr	r3, [pc, #108]	; (24002158 <HAL_DeInit+0xa0>)
240020ec:	4a1d      	ldr	r2, [pc, #116]	; (24002164 <HAL_DeInit+0xac>)
240020ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
240020f2:	4b19      	ldr	r3, [pc, #100]	; (24002158 <HAL_DeInit+0xa0>)
240020f4:	2200      	movs	r2, #0
240020f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
240020fa:	4b17      	ldr	r3, [pc, #92]	; (24002158 <HAL_DeInit+0xa0>)
240020fc:	2218      	movs	r2, #24
240020fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
24002102:	4b15      	ldr	r3, [pc, #84]	; (24002158 <HAL_DeInit+0xa0>)
24002104:	2200      	movs	r2, #0
24002106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
2400210a:	4b13      	ldr	r3, [pc, #76]	; (24002158 <HAL_DeInit+0xa0>)
2400210c:	4a16      	ldr	r2, [pc, #88]	; (24002168 <HAL_DeInit+0xb0>)
2400210e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
24002112:	4b11      	ldr	r3, [pc, #68]	; (24002158 <HAL_DeInit+0xa0>)
24002114:	2200      	movs	r2, #0
24002116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
2400211a:	4b0f      	ldr	r3, [pc, #60]	; (24002158 <HAL_DeInit+0xa0>)
2400211c:	f44f 729b 	mov.w	r2, #310	; 0x136
24002120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
24002124:	4b0c      	ldr	r3, [pc, #48]	; (24002158 <HAL_DeInit+0xa0>)
24002126:	2200      	movs	r2, #0
24002128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
2400212c:	4b0a      	ldr	r3, [pc, #40]	; (24002158 <HAL_DeInit+0xa0>)
2400212e:	4a0f      	ldr	r2, [pc, #60]	; (2400216c <HAL_DeInit+0xb4>)
24002130:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
24002134:	4b08      	ldr	r3, [pc, #32]	; (24002158 <HAL_DeInit+0xa0>)
24002136:	2200      	movs	r2, #0
24002138:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
2400213c:	4b06      	ldr	r3, [pc, #24]	; (24002158 <HAL_DeInit+0xa0>)
2400213e:	4a0c      	ldr	r2, [pc, #48]	; (24002170 <HAL_DeInit+0xb8>)
24002140:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
24002144:	4b04      	ldr	r3, [pc, #16]	; (24002158 <HAL_DeInit+0xa0>)
24002146:	2200      	movs	r2, #0
24002148:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
2400214c:	f000 f819 	bl	24002182 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
24002150:	2300      	movs	r3, #0
}
24002152:	4618      	mov	r0, r3
24002154:	bd80      	pop	{r7, pc}
24002156:	bf00      	nop
24002158:	58024400 	.word	0x58024400
2400215c:	00015031 	.word	0x00015031
24002160:	0a00c023 	.word	0x0a00c023
24002164:	032807ff 	.word	0x032807ff
24002168:	e8ffc3ff 	.word	0xe8ffc3ff
2400216c:	31d73033 	.word	0x31d73033
24002170:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
24002174:	b480      	push	{r7}
24002176:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
24002178:	bf00      	nop
2400217a:	46bd      	mov	sp, r7
2400217c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002180:	4770      	bx	lr

24002182 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
24002182:	b480      	push	{r7}
24002184:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
24002186:	bf00      	nop
24002188:	46bd      	mov	sp, r7
2400218a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400218e:	4770      	bx	lr

24002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24002190:	b580      	push	{r7, lr}
24002192:	b082      	sub	sp, #8
24002194:	af00      	add	r7, sp, #0
24002196:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24002198:	4b15      	ldr	r3, [pc, #84]	; (240021f0 <HAL_InitTick+0x60>)
2400219a:	781b      	ldrb	r3, [r3, #0]
2400219c:	2b00      	cmp	r3, #0
2400219e:	d101      	bne.n	240021a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
240021a0:	2301      	movs	r3, #1
240021a2:	e021      	b.n	240021e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240021a4:	4b13      	ldr	r3, [pc, #76]	; (240021f4 <HAL_InitTick+0x64>)
240021a6:	681a      	ldr	r2, [r3, #0]
240021a8:	4b11      	ldr	r3, [pc, #68]	; (240021f0 <HAL_InitTick+0x60>)
240021aa:	781b      	ldrb	r3, [r3, #0]
240021ac:	4619      	mov	r1, r3
240021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
240021b2:	fbb3 f3f1 	udiv	r3, r3, r1
240021b6:	fbb2 f3f3 	udiv	r3, r2, r3
240021ba:	4618      	mov	r0, r3
240021bc:	f000 fe87 	bl	24002ece <HAL_SYSTICK_Config>
240021c0:	4603      	mov	r3, r0
240021c2:	2b00      	cmp	r3, #0
240021c4:	d001      	beq.n	240021ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
240021c6:	2301      	movs	r3, #1
240021c8:	e00e      	b.n	240021e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240021ca:	687b      	ldr	r3, [r7, #4]
240021cc:	2b0f      	cmp	r3, #15
240021ce:	d80a      	bhi.n	240021e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240021d0:	2200      	movs	r2, #0
240021d2:	6879      	ldr	r1, [r7, #4]
240021d4:	f04f 30ff 	mov.w	r0, #4294967295
240021d8:	f000 fe3f 	bl	24002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
240021dc:	4a06      	ldr	r2, [pc, #24]	; (240021f8 <HAL_InitTick+0x68>)
240021de:	687b      	ldr	r3, [r7, #4]
240021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
240021e2:	2300      	movs	r3, #0
240021e4:	e000      	b.n	240021e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
240021e6:	2301      	movs	r3, #1
}
240021e8:	4618      	mov	r0, r3
240021ea:	3708      	adds	r7, #8
240021ec:	46bd      	mov	sp, r7
240021ee:	bd80      	pop	{r7, pc}
240021f0:	240004d4 	.word	0x240004d4
240021f4:	240004c8 	.word	0x240004c8
240021f8:	240004d0 	.word	0x240004d0

240021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
240021fc:	b480      	push	{r7}
240021fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24002200:	4b06      	ldr	r3, [pc, #24]	; (2400221c <HAL_IncTick+0x20>)
24002202:	781b      	ldrb	r3, [r3, #0]
24002204:	461a      	mov	r2, r3
24002206:	4b06      	ldr	r3, [pc, #24]	; (24002220 <HAL_IncTick+0x24>)
24002208:	681b      	ldr	r3, [r3, #0]
2400220a:	4413      	add	r3, r2
2400220c:	4a04      	ldr	r2, [pc, #16]	; (24002220 <HAL_IncTick+0x24>)
2400220e:	6013      	str	r3, [r2, #0]
}
24002210:	bf00      	nop
24002212:	46bd      	mov	sp, r7
24002214:	f85d 7b04 	ldr.w	r7, [sp], #4
24002218:	4770      	bx	lr
2400221a:	bf00      	nop
2400221c:	240004d4 	.word	0x240004d4
24002220:	24000614 	.word	0x24000614

24002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24002224:	b480      	push	{r7}
24002226:	af00      	add	r7, sp, #0
  return uwTick;
24002228:	4b03      	ldr	r3, [pc, #12]	; (24002238 <HAL_GetTick+0x14>)
2400222a:	681b      	ldr	r3, [r3, #0]
}
2400222c:	4618      	mov	r0, r3
2400222e:	46bd      	mov	sp, r7
24002230:	f85d 7b04 	ldr.w	r7, [sp], #4
24002234:	4770      	bx	lr
24002236:	bf00      	nop
24002238:	24000614 	.word	0x24000614

2400223c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
2400223c:	b480      	push	{r7}
2400223e:	af00      	add	r7, sp, #0
  return uwTickPrio;
24002240:	4b03      	ldr	r3, [pc, #12]	; (24002250 <HAL_GetTickPrio+0x14>)
24002242:	681b      	ldr	r3, [r3, #0]
}
24002244:	4618      	mov	r0, r3
24002246:	46bd      	mov	sp, r7
24002248:	f85d 7b04 	ldr.w	r7, [sp], #4
2400224c:	4770      	bx	lr
2400224e:	bf00      	nop
24002250:	240004d0 	.word	0x240004d0

24002254 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
24002254:	b580      	push	{r7, lr}
24002256:	b084      	sub	sp, #16
24002258:	af00      	add	r7, sp, #0
2400225a:	4603      	mov	r3, r0
2400225c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
2400225e:	2300      	movs	r3, #0
24002260:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
24002262:	4b0e      	ldr	r3, [pc, #56]	; (2400229c <HAL_SetTickFreq+0x48>)
24002264:	781b      	ldrb	r3, [r3, #0]
24002266:	79fa      	ldrb	r2, [r7, #7]
24002268:	429a      	cmp	r2, r3
2400226a:	d012      	beq.n	24002292 <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
2400226c:	4b0b      	ldr	r3, [pc, #44]	; (2400229c <HAL_SetTickFreq+0x48>)
2400226e:	781b      	ldrb	r3, [r3, #0]
24002270:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
24002272:	4a0a      	ldr	r2, [pc, #40]	; (2400229c <HAL_SetTickFreq+0x48>)
24002274:	79fb      	ldrb	r3, [r7, #7]
24002276:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
24002278:	4b09      	ldr	r3, [pc, #36]	; (240022a0 <HAL_SetTickFreq+0x4c>)
2400227a:	681b      	ldr	r3, [r3, #0]
2400227c:	4618      	mov	r0, r3
2400227e:	f7ff ff87 	bl	24002190 <HAL_InitTick>
24002282:	4603      	mov	r3, r0
24002284:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
24002286:	7bfb      	ldrb	r3, [r7, #15]
24002288:	2b00      	cmp	r3, #0
2400228a:	d002      	beq.n	24002292 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
2400228c:	4a03      	ldr	r2, [pc, #12]	; (2400229c <HAL_SetTickFreq+0x48>)
2400228e:	7bbb      	ldrb	r3, [r7, #14]
24002290:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
24002292:	7bfb      	ldrb	r3, [r7, #15]
}
24002294:	4618      	mov	r0, r3
24002296:	3710      	adds	r7, #16
24002298:	46bd      	mov	sp, r7
2400229a:	bd80      	pop	{r7, pc}
2400229c:	240004d4 	.word	0x240004d4
240022a0:	240004d0 	.word	0x240004d0

240022a4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
240022a4:	b480      	push	{r7}
240022a6:	af00      	add	r7, sp, #0
  return uwTickFreq;
240022a8:	4b03      	ldr	r3, [pc, #12]	; (240022b8 <HAL_GetTickFreq+0x14>)
240022aa:	781b      	ldrb	r3, [r3, #0]
}
240022ac:	4618      	mov	r0, r3
240022ae:	46bd      	mov	sp, r7
240022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240022b4:	4770      	bx	lr
240022b6:	bf00      	nop
240022b8:	240004d4 	.word	0x240004d4

240022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240022bc:	b580      	push	{r7, lr}
240022be:	b084      	sub	sp, #16
240022c0:	af00      	add	r7, sp, #0
240022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
240022c4:	f7ff ffae 	bl	24002224 <HAL_GetTick>
240022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
240022ca:	687b      	ldr	r3, [r7, #4]
240022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240022ce:	68fb      	ldr	r3, [r7, #12]
240022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
240022d4:	d005      	beq.n	240022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
240022d6:	4b0a      	ldr	r3, [pc, #40]	; (24002300 <HAL_Delay+0x44>)
240022d8:	781b      	ldrb	r3, [r3, #0]
240022da:	461a      	mov	r2, r3
240022dc:	68fb      	ldr	r3, [r7, #12]
240022de:	4413      	add	r3, r2
240022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
240022e2:	bf00      	nop
240022e4:	f7ff ff9e 	bl	24002224 <HAL_GetTick>
240022e8:	4602      	mov	r2, r0
240022ea:	68bb      	ldr	r3, [r7, #8]
240022ec:	1ad3      	subs	r3, r2, r3
240022ee:	68fa      	ldr	r2, [r7, #12]
240022f0:	429a      	cmp	r2, r3
240022f2:	d8f7      	bhi.n	240022e4 <HAL_Delay+0x28>
  {
  }
}
240022f4:	bf00      	nop
240022f6:	bf00      	nop
240022f8:	3710      	adds	r7, #16
240022fa:	46bd      	mov	sp, r7
240022fc:	bd80      	pop	{r7, pc}
240022fe:	bf00      	nop
24002300:	240004d4 	.word	0x240004d4

24002304 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
24002304:	b480      	push	{r7}
24002306:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
24002308:	4b05      	ldr	r3, [pc, #20]	; (24002320 <HAL_SuspendTick+0x1c>)
2400230a:	681b      	ldr	r3, [r3, #0]
2400230c:	4a04      	ldr	r2, [pc, #16]	; (24002320 <HAL_SuspendTick+0x1c>)
2400230e:	f023 0302 	bic.w	r3, r3, #2
24002312:	6013      	str	r3, [r2, #0]
}
24002314:	bf00      	nop
24002316:	46bd      	mov	sp, r7
24002318:	f85d 7b04 	ldr.w	r7, [sp], #4
2400231c:	4770      	bx	lr
2400231e:	bf00      	nop
24002320:	e000e010 	.word	0xe000e010

24002324 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
24002324:	b480      	push	{r7}
24002326:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
24002328:	4b05      	ldr	r3, [pc, #20]	; (24002340 <HAL_ResumeTick+0x1c>)
2400232a:	681b      	ldr	r3, [r3, #0]
2400232c:	4a04      	ldr	r2, [pc, #16]	; (24002340 <HAL_ResumeTick+0x1c>)
2400232e:	f043 0302 	orr.w	r3, r3, #2
24002332:	6013      	str	r3, [r2, #0]
}
24002334:	bf00      	nop
24002336:	46bd      	mov	sp, r7
24002338:	f85d 7b04 	ldr.w	r7, [sp], #4
2400233c:	4770      	bx	lr
2400233e:	bf00      	nop
24002340:	e000e010 	.word	0xe000e010

24002344 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
24002344:	b480      	push	{r7}
24002346:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
24002348:	4b02      	ldr	r3, [pc, #8]	; (24002354 <HAL_GetHalVersion+0x10>)
}
2400234a:	4618      	mov	r0, r3
2400234c:	46bd      	mov	sp, r7
2400234e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002352:	4770      	bx	lr
24002354:	010b0000 	.word	0x010b0000

24002358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
24002358:	b480      	push	{r7}
2400235a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
2400235c:	4b03      	ldr	r3, [pc, #12]	; (2400236c <HAL_GetREVID+0x14>)
2400235e:	681b      	ldr	r3, [r3, #0]
24002360:	0c1b      	lsrs	r3, r3, #16
}
24002362:	4618      	mov	r0, r3
24002364:	46bd      	mov	sp, r7
24002366:	f85d 7b04 	ldr.w	r7, [sp], #4
2400236a:	4770      	bx	lr
2400236c:	5c001000 	.word	0x5c001000

24002370 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
24002370:	b480      	push	{r7}
24002372:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
24002374:	4b04      	ldr	r3, [pc, #16]	; (24002388 <HAL_GetDEVID+0x18>)
24002376:	681b      	ldr	r3, [r3, #0]
24002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
2400237c:	4618      	mov	r0, r3
2400237e:	46bd      	mov	sp, r7
24002380:	f85d 7b04 	ldr.w	r7, [sp], #4
24002384:	4770      	bx	lr
24002386:	bf00      	nop
24002388:	5c001000 	.word	0x5c001000

2400238c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
2400238c:	b480      	push	{r7}
2400238e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
24002390:	4b03      	ldr	r3, [pc, #12]	; (240023a0 <HAL_GetUIDw0+0x14>)
24002392:	681b      	ldr	r3, [r3, #0]
}
24002394:	4618      	mov	r0, r3
24002396:	46bd      	mov	sp, r7
24002398:	f85d 7b04 	ldr.w	r7, [sp], #4
2400239c:	4770      	bx	lr
2400239e:	bf00      	nop
240023a0:	1ff1e800 	.word	0x1ff1e800

240023a4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
240023a4:	b480      	push	{r7}
240023a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
240023a8:	4b03      	ldr	r3, [pc, #12]	; (240023b8 <HAL_GetUIDw1+0x14>)
240023aa:	681b      	ldr	r3, [r3, #0]
}
240023ac:	4618      	mov	r0, r3
240023ae:	46bd      	mov	sp, r7
240023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240023b4:	4770      	bx	lr
240023b6:	bf00      	nop
240023b8:	1ff1e804 	.word	0x1ff1e804

240023bc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
240023bc:	b480      	push	{r7}
240023be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
240023c0:	4b03      	ldr	r3, [pc, #12]	; (240023d0 <HAL_GetUIDw2+0x14>)
240023c2:	681b      	ldr	r3, [r3, #0]
}
240023c4:	4618      	mov	r0, r3
240023c6:	46bd      	mov	sp, r7
240023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240023cc:	4770      	bx	lr
240023ce:	bf00      	nop
240023d0:	1ff1e808 	.word	0x1ff1e808

240023d4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
240023d4:	b480      	push	{r7}
240023d6:	b083      	sub	sp, #12
240023d8:	af00      	add	r7, sp, #0
240023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
240023dc:	4b06      	ldr	r3, [pc, #24]	; (240023f8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
240023de:	681b      	ldr	r3, [r3, #0]
240023e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240023e4:	4904      	ldr	r1, [pc, #16]	; (240023f8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
240023e6:	687b      	ldr	r3, [r7, #4]
240023e8:	4313      	orrs	r3, r2
240023ea:	600b      	str	r3, [r1, #0]
}
240023ec:	bf00      	nop
240023ee:	370c      	adds	r7, #12
240023f0:	46bd      	mov	sp, r7
240023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240023f6:	4770      	bx	lr
240023f8:	58003c00 	.word	0x58003c00

240023fc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
240023fc:	b480      	push	{r7}
240023fe:	b083      	sub	sp, #12
24002400:	af00      	add	r7, sp, #0
24002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
24002404:	4b06      	ldr	r3, [pc, #24]	; (24002420 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
24002406:	681b      	ldr	r3, [r3, #0]
24002408:	f023 0202 	bic.w	r2, r3, #2
2400240c:	4904      	ldr	r1, [pc, #16]	; (24002420 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
2400240e:	687b      	ldr	r3, [r7, #4]
24002410:	4313      	orrs	r3, r2
24002412:	600b      	str	r3, [r1, #0]
}
24002414:	bf00      	nop
24002416:	370c      	adds	r7, #12
24002418:	46bd      	mov	sp, r7
2400241a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400241e:	4770      	bx	lr
24002420:	58003c00 	.word	0x58003c00

24002424 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
24002424:	b480      	push	{r7}
24002426:	b083      	sub	sp, #12
24002428:	af00      	add	r7, sp, #0
2400242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
2400242c:	4b06      	ldr	r3, [pc, #24]	; (24002448 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
2400242e:	685b      	ldr	r3, [r3, #4]
24002430:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
24002434:	4904      	ldr	r1, [pc, #16]	; (24002448 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
24002436:	687b      	ldr	r3, [r7, #4]
24002438:	4313      	orrs	r3, r2
2400243a:	604b      	str	r3, [r1, #4]
}
2400243c:	bf00      	nop
2400243e:	370c      	adds	r7, #12
24002440:	46bd      	mov	sp, r7
24002442:	f85d 7b04 	ldr.w	r7, [sp], #4
24002446:	4770      	bx	lr
24002448:	58003c00 	.word	0x58003c00

2400244c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
2400244c:	b580      	push	{r7, lr}
2400244e:	b082      	sub	sp, #8
24002450:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24002452:	4b0f      	ldr	r3, [pc, #60]	; (24002490 <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002454:	681b      	ldr	r3, [r3, #0]
24002456:	4a0e      	ldr	r2, [pc, #56]	; (24002490 <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002458:	f043 0301 	orr.w	r3, r3, #1
2400245c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
2400245e:	f7ff fee1 	bl	24002224 <HAL_GetTick>
24002462:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
24002464:	e008      	b.n	24002478 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
24002466:	f7ff fedd 	bl	24002224 <HAL_GetTick>
2400246a:	4602      	mov	r2, r0
2400246c:	687b      	ldr	r3, [r7, #4]
2400246e:	1ad3      	subs	r3, r2, r3
24002470:	2b0a      	cmp	r3, #10
24002472:	d901      	bls.n	24002478 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
24002474:	2303      	movs	r3, #3
24002476:	e006      	b.n	24002486 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
24002478:	4b05      	ldr	r3, [pc, #20]	; (24002490 <HAL_SYSCFG_EnableVREFBUF+0x44>)
2400247a:	681b      	ldr	r3, [r3, #0]
2400247c:	f003 0308 	and.w	r3, r3, #8
24002480:	2b00      	cmp	r3, #0
24002482:	d0f0      	beq.n	24002466 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
24002484:	2300      	movs	r3, #0
}
24002486:	4618      	mov	r0, r3
24002488:	3708      	adds	r7, #8
2400248a:	46bd      	mov	sp, r7
2400248c:	bd80      	pop	{r7, pc}
2400248e:	bf00      	nop
24002490:	58003c00 	.word	0x58003c00

24002494 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
24002494:	b480      	push	{r7}
24002496:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24002498:	4b05      	ldr	r3, [pc, #20]	; (240024b0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2400249a:	681b      	ldr	r3, [r3, #0]
2400249c:	4a04      	ldr	r2, [pc, #16]	; (240024b0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2400249e:	f023 0301 	bic.w	r3, r3, #1
240024a2:	6013      	str	r3, [r2, #0]
}
240024a4:	bf00      	nop
240024a6:	46bd      	mov	sp, r7
240024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240024ac:	4770      	bx	lr
240024ae:	bf00      	nop
240024b0:	58003c00 	.word	0x58003c00

240024b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
240024b4:	b480      	push	{r7}
240024b6:	b083      	sub	sp, #12
240024b8:	af00      	add	r7, sp, #0
240024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
240024bc:	4b06      	ldr	r3, [pc, #24]	; (240024d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
240024be:	685b      	ldr	r3, [r3, #4]
240024c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
240024c4:	4904      	ldr	r1, [pc, #16]	; (240024d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
240024c6:	687b      	ldr	r3, [r7, #4]
240024c8:	4313      	orrs	r3, r2
240024ca:	604b      	str	r3, [r1, #4]
}
240024cc:	bf00      	nop
240024ce:	370c      	adds	r7, #12
240024d0:	46bd      	mov	sp, r7
240024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240024d6:	4770      	bx	lr
240024d8:	58000400 	.word	0x58000400

240024dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
240024dc:	b480      	push	{r7}
240024de:	b083      	sub	sp, #12
240024e0:	af00      	add	r7, sp, #0
240024e2:	6078      	str	r0, [r7, #4]
240024e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
240024e6:	4b07      	ldr	r3, [pc, #28]	; (24002504 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
240024e8:	685a      	ldr	r2, [r3, #4]
240024ea:	687b      	ldr	r3, [r7, #4]
240024ec:	43db      	mvns	r3, r3
240024ee:	401a      	ands	r2, r3
240024f0:	4904      	ldr	r1, [pc, #16]	; (24002504 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
240024f2:	683b      	ldr	r3, [r7, #0]
240024f4:	4313      	orrs	r3, r2
240024f6:	604b      	str	r3, [r1, #4]
}
240024f8:	bf00      	nop
240024fa:	370c      	adds	r7, #12
240024fc:	46bd      	mov	sp, r7
240024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24002502:	4770      	bx	lr
24002504:	58000400 	.word	0x58000400

24002508 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
24002508:	b480      	push	{r7}
2400250a:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
2400250c:	4b05      	ldr	r3, [pc, #20]	; (24002524 <HAL_SYSCFG_EnableBOOST+0x1c>)
2400250e:	685b      	ldr	r3, [r3, #4]
24002510:	4a04      	ldr	r2, [pc, #16]	; (24002524 <HAL_SYSCFG_EnableBOOST+0x1c>)
24002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002516:	6053      	str	r3, [r2, #4]
}
24002518:	bf00      	nop
2400251a:	46bd      	mov	sp, r7
2400251c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002520:	4770      	bx	lr
24002522:	bf00      	nop
24002524:	58000400 	.word	0x58000400

24002528 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
24002528:	b480      	push	{r7}
2400252a:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
2400252c:	4b05      	ldr	r3, [pc, #20]	; (24002544 <HAL_SYSCFG_DisableBOOST+0x1c>)
2400252e:	685b      	ldr	r3, [r3, #4]
24002530:	4a04      	ldr	r2, [pc, #16]	; (24002544 <HAL_SYSCFG_DisableBOOST+0x1c>)
24002532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24002536:	6053      	str	r3, [r2, #4]
}
24002538:	bf00      	nop
2400253a:	46bd      	mov	sp, r7
2400253c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002540:	4770      	bx	lr
24002542:	bf00      	nop
24002544:	58000400 	.word	0x58000400

24002548 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
24002548:	b480      	push	{r7}
2400254a:	b083      	sub	sp, #12
2400254c:	af00      	add	r7, sp, #0
2400254e:	6078      	str	r0, [r7, #4]
24002550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
24002552:	687b      	ldr	r3, [r7, #4]
24002554:	2b00      	cmp	r3, #0
24002556:	d10b      	bne.n	24002570 <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
24002558:	4b0e      	ldr	r3, [pc, #56]	; (24002594 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2400255a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
2400255e:	b29a      	uxth	r2, r3
24002560:	683b      	ldr	r3, [r7, #0]
24002562:	0c1b      	lsrs	r3, r3, #16
24002564:	041b      	lsls	r3, r3, #16
24002566:	490b      	ldr	r1, [pc, #44]	; (24002594 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002568:	4313      	orrs	r3, r2
2400256a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
2400256e:	e00a      	b.n	24002586 <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
24002570:	4b08      	ldr	r3, [pc, #32]	; (24002594 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002572:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
24002576:	4b08      	ldr	r3, [pc, #32]	; (24002598 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
24002578:	4013      	ands	r3, r2
2400257a:	683a      	ldr	r2, [r7, #0]
2400257c:	0c12      	lsrs	r2, r2, #16
2400257e:	4905      	ldr	r1, [pc, #20]	; (24002594 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002580:	4313      	orrs	r3, r2
24002582:	f8c1 330c 	str.w	r3, [r1, #780]	; 0x30c
}
24002586:	bf00      	nop
24002588:	370c      	adds	r7, #12
2400258a:	46bd      	mov	sp, r7
2400258c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002590:	4770      	bx	lr
24002592:	bf00      	nop
24002594:	58000400 	.word	0x58000400
24002598:	ffff0000 	.word	0xffff0000

2400259c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
2400259c:	b480      	push	{r7}
2400259e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
240025a0:	4b05      	ldr	r3, [pc, #20]	; (240025b8 <HAL_EnableCompensationCell+0x1c>)
240025a2:	6a1b      	ldr	r3, [r3, #32]
240025a4:	4a04      	ldr	r2, [pc, #16]	; (240025b8 <HAL_EnableCompensationCell+0x1c>)
240025a6:	f043 0301 	orr.w	r3, r3, #1
240025aa:	6213      	str	r3, [r2, #32]
}
240025ac:	bf00      	nop
240025ae:	46bd      	mov	sp, r7
240025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025b4:	4770      	bx	lr
240025b6:	bf00      	nop
240025b8:	58000400 	.word	0x58000400

240025bc <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
240025bc:	b480      	push	{r7}
240025be:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
240025c0:	4b05      	ldr	r3, [pc, #20]	; (240025d8 <HAL_DisableCompensationCell+0x1c>)
240025c2:	6a1b      	ldr	r3, [r3, #32]
240025c4:	4a04      	ldr	r2, [pc, #16]	; (240025d8 <HAL_DisableCompensationCell+0x1c>)
240025c6:	f023 0301 	bic.w	r3, r3, #1
240025ca:	6213      	str	r3, [r2, #32]
}
240025cc:	bf00      	nop
240025ce:	46bd      	mov	sp, r7
240025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025d4:	4770      	bx	lr
240025d6:	bf00      	nop
240025d8:	58000400 	.word	0x58000400

240025dc <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
240025dc:	b480      	push	{r7}
240025de:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
240025e0:	4b05      	ldr	r3, [pc, #20]	; (240025f8 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240025e2:	6a1b      	ldr	r3, [r3, #32]
240025e4:	4a04      	ldr	r2, [pc, #16]	; (240025f8 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240025ea:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240025ec:	bf00      	nop
240025ee:	46bd      	mov	sp, r7
240025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025f4:	4770      	bx	lr
240025f6:	bf00      	nop
240025f8:	58000400 	.word	0x58000400

240025fc <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
240025fc:	b480      	push	{r7}
240025fe:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24002600:	4b05      	ldr	r3, [pc, #20]	; (24002618 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
24002602:	6a1b      	ldr	r3, [r3, #32]
24002604:	4a04      	ldr	r2, [pc, #16]	; (24002618 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
24002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400260a:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
2400260c:	bf00      	nop
2400260e:	46bd      	mov	sp, r7
24002610:	f85d 7b04 	ldr.w	r7, [sp], #4
24002614:	4770      	bx	lr
24002616:	bf00      	nop
24002618:	58000400 	.word	0x58000400

2400261c <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
2400261c:	b480      	push	{r7}
2400261e:	b083      	sub	sp, #12
24002620:	af00      	add	r7, sp, #0
24002622:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
24002624:	4b06      	ldr	r3, [pc, #24]	; (24002640 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
24002626:	6a1b      	ldr	r3, [r3, #32]
24002628:	f023 0202 	bic.w	r2, r3, #2
2400262c:	4904      	ldr	r1, [pc, #16]	; (24002640 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
2400262e:	687b      	ldr	r3, [r7, #4]
24002630:	4313      	orrs	r3, r2
24002632:	620b      	str	r3, [r1, #32]
}
24002634:	bf00      	nop
24002636:	370c      	adds	r7, #12
24002638:	46bd      	mov	sp, r7
2400263a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400263e:	4770      	bx	lr
24002640:	58000400 	.word	0x58000400

24002644 <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
24002644:	b480      	push	{r7}
24002646:	b083      	sub	sp, #12
24002648:	af00      	add	r7, sp, #0
2400264a:	6078      	str	r0, [r7, #4]
2400264c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
2400264e:	4b08      	ldr	r3, [pc, #32]	; (24002670 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24002652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
24002656:	687b      	ldr	r3, [r7, #4]
24002658:	0119      	lsls	r1, r3, #4
2400265a:	683b      	ldr	r3, [r7, #0]
2400265c:	430b      	orrs	r3, r1
2400265e:	4904      	ldr	r1, [pc, #16]	; (24002670 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002660:	4313      	orrs	r3, r2
24002662:	628b      	str	r3, [r1, #40]	; 0x28
}
24002664:	bf00      	nop
24002666:	370c      	adds	r7, #12
24002668:	46bd      	mov	sp, r7
2400266a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400266e:	4770      	bx	lr
24002670:	58000400 	.word	0x58000400

24002674 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
24002674:	b480      	push	{r7}
24002676:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24002678:	4b05      	ldr	r3, [pc, #20]	; (24002690 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
2400267a:	685b      	ldr	r3, [r3, #4]
2400267c:	4a04      	ldr	r2, [pc, #16]	; (24002690 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
2400267e:	f043 0301 	orr.w	r3, r3, #1
24002682:	6053      	str	r3, [r2, #4]
}
24002684:	bf00      	nop
24002686:	46bd      	mov	sp, r7
24002688:	f85d 7b04 	ldr.w	r7, [sp], #4
2400268c:	4770      	bx	lr
2400268e:	bf00      	nop
24002690:	5c001000 	.word	0x5c001000

24002694 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
24002694:	b480      	push	{r7}
24002696:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24002698:	4b05      	ldr	r3, [pc, #20]	; (240026b0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2400269a:	685b      	ldr	r3, [r3, #4]
2400269c:	4a04      	ldr	r2, [pc, #16]	; (240026b0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2400269e:	f023 0301 	bic.w	r3, r3, #1
240026a2:	6053      	str	r3, [r2, #4]
}
240026a4:	bf00      	nop
240026a6:	46bd      	mov	sp, r7
240026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240026ac:	4770      	bx	lr
240026ae:	bf00      	nop
240026b0:	5c001000 	.word	0x5c001000

240026b4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
240026b4:	b480      	push	{r7}
240026b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240026b8:	4b05      	ldr	r3, [pc, #20]	; (240026d0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240026ba:	685b      	ldr	r3, [r3, #4]
240026bc:	4a04      	ldr	r2, [pc, #16]	; (240026d0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240026be:	f043 0302 	orr.w	r3, r3, #2
240026c2:	6053      	str	r3, [r2, #4]
}
240026c4:	bf00      	nop
240026c6:	46bd      	mov	sp, r7
240026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240026cc:	4770      	bx	lr
240026ce:	bf00      	nop
240026d0:	5c001000 	.word	0x5c001000

240026d4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
240026d4:	b480      	push	{r7}
240026d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240026d8:	4b05      	ldr	r3, [pc, #20]	; (240026f0 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240026da:	685b      	ldr	r3, [r3, #4]
240026dc:	4a04      	ldr	r2, [pc, #16]	; (240026f0 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240026de:	f023 0302 	bic.w	r3, r3, #2
240026e2:	6053      	str	r3, [r2, #4]
}
240026e4:	bf00      	nop
240026e6:	46bd      	mov	sp, r7
240026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
240026ec:	4770      	bx	lr
240026ee:	bf00      	nop
240026f0:	5c001000 	.word	0x5c001000

240026f4 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
240026f4:	b480      	push	{r7}
240026f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
240026f8:	4b05      	ldr	r3, [pc, #20]	; (24002710 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
240026fa:	685b      	ldr	r3, [r3, #4]
240026fc:	4a04      	ldr	r2, [pc, #16]	; (24002710 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
240026fe:	f043 0304 	orr.w	r3, r3, #4
24002702:	6053      	str	r3, [r2, #4]
}
24002704:	bf00      	nop
24002706:	46bd      	mov	sp, r7
24002708:	f85d 7b04 	ldr.w	r7, [sp], #4
2400270c:	4770      	bx	lr
2400270e:	bf00      	nop
24002710:	5c001000 	.word	0x5c001000

24002714 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
24002714:	b480      	push	{r7}
24002716:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24002718:	4b05      	ldr	r3, [pc, #20]	; (24002730 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
2400271a:	685b      	ldr	r3, [r3, #4]
2400271c:	4a04      	ldr	r2, [pc, #16]	; (24002730 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
2400271e:	f023 0304 	bic.w	r3, r3, #4
24002722:	6053      	str	r3, [r2, #4]
}
24002724:	bf00      	nop
24002726:	46bd      	mov	sp, r7
24002728:	f85d 7b04 	ldr.w	r7, [sp], #4
2400272c:	4770      	bx	lr
2400272e:	bf00      	nop
24002730:	5c001000 	.word	0x5c001000

24002734 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
24002734:	b480      	push	{r7}
24002736:	b083      	sub	sp, #12
24002738:	af00      	add	r7, sp, #0
2400273a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
2400273c:	4b06      	ldr	r3, [pc, #24]	; (24002758 <HAL_SetFMCMemorySwappingConfig+0x24>)
2400273e:	681b      	ldr	r3, [r3, #0]
24002740:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
24002744:	4904      	ldr	r1, [pc, #16]	; (24002758 <HAL_SetFMCMemorySwappingConfig+0x24>)
24002746:	687b      	ldr	r3, [r7, #4]
24002748:	4313      	orrs	r3, r2
2400274a:	600b      	str	r3, [r1, #0]
}
2400274c:	bf00      	nop
2400274e:	370c      	adds	r7, #12
24002750:	46bd      	mov	sp, r7
24002752:	f85d 7b04 	ldr.w	r7, [sp], #4
24002756:	4770      	bx	lr
24002758:	52004000 	.word	0x52004000

2400275c <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
2400275c:	b480      	push	{r7}
2400275e:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
24002760:	4b04      	ldr	r3, [pc, #16]	; (24002774 <HAL_GetFMCMemorySwappingConfig+0x18>)
24002762:	681b      	ldr	r3, [r3, #0]
24002764:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
24002768:	4618      	mov	r0, r3
2400276a:	46bd      	mov	sp, r7
2400276c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002770:	4770      	bx	lr
24002772:	bf00      	nop
24002774:	52004000 	.word	0x52004000

24002778 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
24002778:	b480      	push	{r7}
2400277a:	b083      	sub	sp, #12
2400277c:	af00      	add	r7, sp, #0
2400277e:	6078      	str	r0, [r7, #4]
24002780:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002782:	687b      	ldr	r3, [r7, #4]
24002784:	095b      	lsrs	r3, r3, #5
24002786:	015a      	lsls	r2, r3, #5
24002788:	4b2e      	ldr	r3, [pc, #184]	; (24002844 <HAL_EXTI_EdgeConfig+0xcc>)
2400278a:	4413      	add	r3, r2
2400278c:	6819      	ldr	r1, [r3, #0]
2400278e:	687b      	ldr	r3, [r7, #4]
24002790:	f003 031f 	and.w	r3, r3, #31
24002794:	2201      	movs	r2, #1
24002796:	fa02 f303 	lsl.w	r3, r2, r3
2400279a:	43da      	mvns	r2, r3
2400279c:	687b      	ldr	r3, [r7, #4]
2400279e:	095b      	lsrs	r3, r3, #5
240027a0:	0158      	lsls	r0, r3, #5
240027a2:	4b28      	ldr	r3, [pc, #160]	; (24002844 <HAL_EXTI_EdgeConfig+0xcc>)
240027a4:	4403      	add	r3, r0
240027a6:	4618      	mov	r0, r3
240027a8:	ea01 0302 	and.w	r3, r1, r2
240027ac:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027ae:	687b      	ldr	r3, [r7, #4]
240027b0:	095b      	lsrs	r3, r3, #5
240027b2:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240027b6:	015b      	lsls	r3, r3, #5
240027b8:	681a      	ldr	r2, [r3, #0]
240027ba:	687b      	ldr	r3, [r7, #4]
240027bc:	f003 031f 	and.w	r3, r3, #31
240027c0:	2101      	movs	r1, #1
240027c2:	fa01 f303 	lsl.w	r3, r1, r3
240027c6:	43db      	mvns	r3, r3
240027c8:	6879      	ldr	r1, [r7, #4]
240027ca:	0949      	lsrs	r1, r1, #5
240027cc:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
240027d0:	0149      	lsls	r1, r1, #5
240027d2:	4013      	ands	r3, r2
240027d4:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
240027d6:	683b      	ldr	r3, [r7, #0]
240027d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240027dc:	2b00      	cmp	r3, #0
240027de:	d012      	beq.n	24002806 <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027e0:	687b      	ldr	r3, [r7, #4]
240027e2:	095b      	lsrs	r3, r3, #5
240027e4:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240027e8:	015b      	lsls	r3, r3, #5
240027ea:	681a      	ldr	r2, [r3, #0]
240027ec:	687b      	ldr	r3, [r7, #4]
240027ee:	f003 031f 	and.w	r3, r3, #31
240027f2:	2101      	movs	r1, #1
240027f4:	fa01 f303 	lsl.w	r3, r1, r3
240027f8:	6879      	ldr	r1, [r7, #4]
240027fa:	0949      	lsrs	r1, r1, #5
240027fc:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
24002800:	0149      	lsls	r1, r1, #5
24002802:	4313      	orrs	r3, r2
24002804:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
24002806:	683b      	ldr	r3, [r7, #0]
24002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400280c:	2b00      	cmp	r3, #0
2400280e:	d013      	beq.n	24002838 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002810:	687b      	ldr	r3, [r7, #4]
24002812:	095b      	lsrs	r3, r3, #5
24002814:	015a      	lsls	r2, r3, #5
24002816:	4b0b      	ldr	r3, [pc, #44]	; (24002844 <HAL_EXTI_EdgeConfig+0xcc>)
24002818:	4413      	add	r3, r2
2400281a:	6819      	ldr	r1, [r3, #0]
2400281c:	687b      	ldr	r3, [r7, #4]
2400281e:	f003 031f 	and.w	r3, r3, #31
24002822:	2201      	movs	r2, #1
24002824:	409a      	lsls	r2, r3
24002826:	687b      	ldr	r3, [r7, #4]
24002828:	095b      	lsrs	r3, r3, #5
2400282a:	0158      	lsls	r0, r3, #5
2400282c:	4b05      	ldr	r3, [pc, #20]	; (24002844 <HAL_EXTI_EdgeConfig+0xcc>)
2400282e:	4403      	add	r3, r0
24002830:	4618      	mov	r0, r3
24002832:	ea41 0302 	orr.w	r3, r1, r2
24002836:	6003      	str	r3, [r0, #0]
  }
}
24002838:	bf00      	nop
2400283a:	370c      	adds	r7, #12
2400283c:	46bd      	mov	sp, r7
2400283e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002842:	4770      	bx	lr
24002844:	58000004 	.word	0x58000004

24002848 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
24002848:	b480      	push	{r7}
2400284a:	b083      	sub	sp, #12
2400284c:	af00      	add	r7, sp, #0
2400284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002850:	687b      	ldr	r3, [r7, #4]
24002852:	095b      	lsrs	r3, r3, #5
24002854:	015a      	lsls	r2, r3, #5
24002856:	4b0b      	ldr	r3, [pc, #44]	; (24002884 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002858:	4413      	add	r3, r2
2400285a:	6819      	ldr	r1, [r3, #0]
2400285c:	687b      	ldr	r3, [r7, #4]
2400285e:	f003 031f 	and.w	r3, r3, #31
24002862:	2201      	movs	r2, #1
24002864:	409a      	lsls	r2, r3
24002866:	687b      	ldr	r3, [r7, #4]
24002868:	095b      	lsrs	r3, r3, #5
2400286a:	0158      	lsls	r0, r3, #5
2400286c:	4b05      	ldr	r3, [pc, #20]	; (24002884 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
2400286e:	4403      	add	r3, r0
24002870:	4618      	mov	r0, r3
24002872:	ea41 0302 	orr.w	r3, r1, r2
24002876:	6003      	str	r3, [r0, #0]
}
24002878:	bf00      	nop
2400287a:	370c      	adds	r7, #12
2400287c:	46bd      	mov	sp, r7
2400287e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002882:	4770      	bx	lr
24002884:	58000008 	.word	0x58000008

24002888 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
24002888:	b480      	push	{r7}
2400288a:	b083      	sub	sp, #12
2400288c:	af00      	add	r7, sp, #0
2400288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002890:	687b      	ldr	r3, [r7, #4]
24002892:	f003 021f 	and.w	r2, r3, #31
24002896:	687b      	ldr	r3, [r7, #4]
24002898:	095b      	lsrs	r3, r3, #5
2400289a:	0119      	lsls	r1, r3, #4
2400289c:	4b05      	ldr	r3, [pc, #20]	; (240028b4 <HAL_EXTI_D1_ClearFlag+0x2c>)
2400289e:	440b      	add	r3, r1
240028a0:	4619      	mov	r1, r3
240028a2:	2301      	movs	r3, #1
240028a4:	4093      	lsls	r3, r2
240028a6:	600b      	str	r3, [r1, #0]

}
240028a8:	bf00      	nop
240028aa:	370c      	adds	r7, #12
240028ac:	46bd      	mov	sp, r7
240028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240028b2:	4770      	bx	lr
240028b4:	58000088 	.word	0x58000088

240028b8 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
240028b8:	b480      	push	{r7}
240028ba:	b085      	sub	sp, #20
240028bc:	af00      	add	r7, sp, #0
240028be:	60f8      	str	r0, [r7, #12]
240028c0:	60b9      	str	r1, [r7, #8]
240028c2:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
240028c4:	68bb      	ldr	r3, [r7, #8]
240028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240028ca:	2b00      	cmp	r3, #0
240028cc:	d02d      	beq.n	2400292a <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
240028ce:	687b      	ldr	r3, [r7, #4]
240028d0:	2b00      	cmp	r3, #0
240028d2:	d116      	bne.n	24002902 <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240028d4:	68fb      	ldr	r3, [r7, #12]
240028d6:	095a      	lsrs	r2, r3, #5
240028d8:	4b30      	ldr	r3, [pc, #192]	; (2400299c <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028da:	4413      	add	r3, r2
240028dc:	011b      	lsls	r3, r3, #4
240028de:	6819      	ldr	r1, [r3, #0]
240028e0:	68fb      	ldr	r3, [r7, #12]
240028e2:	f003 031f 	and.w	r3, r3, #31
240028e6:	2201      	movs	r2, #1
240028e8:	fa02 f303 	lsl.w	r3, r2, r3
240028ec:	43da      	mvns	r2, r3
240028ee:	68fb      	ldr	r3, [r7, #12]
240028f0:	0958      	lsrs	r0, r3, #5
240028f2:	4b2a      	ldr	r3, [pc, #168]	; (2400299c <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028f4:	4403      	add	r3, r0
240028f6:	011b      	lsls	r3, r3, #4
240028f8:	4618      	mov	r0, r3
240028fa:	ea01 0302 	and.w	r3, r1, r2
240028fe:	6003      	str	r3, [r0, #0]
24002900:	e013      	b.n	2400292a <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002902:	68fb      	ldr	r3, [r7, #12]
24002904:	095a      	lsrs	r2, r3, #5
24002906:	4b25      	ldr	r3, [pc, #148]	; (2400299c <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002908:	4413      	add	r3, r2
2400290a:	011b      	lsls	r3, r3, #4
2400290c:	6819      	ldr	r1, [r3, #0]
2400290e:	68fb      	ldr	r3, [r7, #12]
24002910:	f003 031f 	and.w	r3, r3, #31
24002914:	2201      	movs	r2, #1
24002916:	409a      	lsls	r2, r3
24002918:	68fb      	ldr	r3, [r7, #12]
2400291a:	0958      	lsrs	r0, r3, #5
2400291c:	4b1f      	ldr	r3, [pc, #124]	; (2400299c <HAL_EXTI_D1_EventInputConfig+0xe4>)
2400291e:	4403      	add	r3, r0
24002920:	011b      	lsls	r3, r3, #4
24002922:	4618      	mov	r0, r3
24002924:	ea41 0302 	orr.w	r3, r1, r2
24002928:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
2400292a:	68bb      	ldr	r3, [r7, #8]
2400292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24002930:	2b00      	cmp	r3, #0
24002932:	d02d      	beq.n	24002990 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
24002934:	687b      	ldr	r3, [r7, #4]
24002936:	2b00      	cmp	r3, #0
24002938:	d116      	bne.n	24002968 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400293a:	68fb      	ldr	r3, [r7, #12]
2400293c:	095b      	lsrs	r3, r3, #5
2400293e:	011a      	lsls	r2, r3, #4
24002940:	4b17      	ldr	r3, [pc, #92]	; (240029a0 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002942:	4413      	add	r3, r2
24002944:	6819      	ldr	r1, [r3, #0]
24002946:	68fb      	ldr	r3, [r7, #12]
24002948:	f003 031f 	and.w	r3, r3, #31
2400294c:	2201      	movs	r2, #1
2400294e:	fa02 f303 	lsl.w	r3, r2, r3
24002952:	43da      	mvns	r2, r3
24002954:	68fb      	ldr	r3, [r7, #12]
24002956:	095b      	lsrs	r3, r3, #5
24002958:	0118      	lsls	r0, r3, #4
2400295a:	4b11      	ldr	r3, [pc, #68]	; (240029a0 <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400295c:	4403      	add	r3, r0
2400295e:	4618      	mov	r0, r3
24002960:	ea01 0302 	and.w	r3, r1, r2
24002964:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
24002966:	e013      	b.n	24002990 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002968:	68fb      	ldr	r3, [r7, #12]
2400296a:	095b      	lsrs	r3, r3, #5
2400296c:	011a      	lsls	r2, r3, #4
2400296e:	4b0c      	ldr	r3, [pc, #48]	; (240029a0 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002970:	4413      	add	r3, r2
24002972:	6819      	ldr	r1, [r3, #0]
24002974:	68fb      	ldr	r3, [r7, #12]
24002976:	f003 031f 	and.w	r3, r3, #31
2400297a:	2201      	movs	r2, #1
2400297c:	409a      	lsls	r2, r3
2400297e:	68fb      	ldr	r3, [r7, #12]
24002980:	095b      	lsrs	r3, r3, #5
24002982:	0118      	lsls	r0, r3, #4
24002984:	4b06      	ldr	r3, [pc, #24]	; (240029a0 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002986:	4403      	add	r3, r0
24002988:	4618      	mov	r0, r3
2400298a:	ea41 0302 	orr.w	r3, r1, r2
2400298e:	6003      	str	r3, [r0, #0]
}
24002990:	bf00      	nop
24002992:	3714      	adds	r7, #20
24002994:	46bd      	mov	sp, r7
24002996:	f85d 7b04 	ldr.w	r7, [sp], #4
2400299a:	4770      	bx	lr
2400299c:	05800008 	.word	0x05800008
240029a0:	58000084 	.word	0x58000084

240029a4 <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
240029a4:	b480      	push	{r7}
240029a6:	b087      	sub	sp, #28
240029a8:	af00      	add	r7, sp, #0
240029aa:	60f8      	str	r0, [r7, #12]
240029ac:	60b9      	str	r1, [r7, #8]
240029ae:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
240029b0:	68bb      	ldr	r3, [r7, #8]
240029b2:	2b00      	cmp	r3, #0
240029b4:	d116      	bne.n	240029e4 <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240029b6:	68fb      	ldr	r3, [r7, #12]
240029b8:	095b      	lsrs	r3, r3, #5
240029ba:	015a      	lsls	r2, r3, #5
240029bc:	4b2a      	ldr	r3, [pc, #168]	; (24002a68 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029be:	4413      	add	r3, r2
240029c0:	6819      	ldr	r1, [r3, #0]
240029c2:	68fb      	ldr	r3, [r7, #12]
240029c4:	f003 031f 	and.w	r3, r3, #31
240029c8:	2201      	movs	r2, #1
240029ca:	fa02 f303 	lsl.w	r3, r2, r3
240029ce:	43da      	mvns	r2, r3
240029d0:	68fb      	ldr	r3, [r7, #12]
240029d2:	095b      	lsrs	r3, r3, #5
240029d4:	0158      	lsls	r0, r3, #5
240029d6:	4b24      	ldr	r3, [pc, #144]	; (24002a68 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029d8:	4403      	add	r3, r0
240029da:	4618      	mov	r0, r3
240029dc:	ea01 0302 	and.w	r3, r1, r2
240029e0:	6003      	str	r3, [r0, #0]
240029e2:	e013      	b.n	24002a0c <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240029e4:	68fb      	ldr	r3, [r7, #12]
240029e6:	095b      	lsrs	r3, r3, #5
240029e8:	015a      	lsls	r2, r3, #5
240029ea:	4b1f      	ldr	r3, [pc, #124]	; (24002a68 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029ec:	4413      	add	r3, r2
240029ee:	6819      	ldr	r1, [r3, #0]
240029f0:	68fb      	ldr	r3, [r7, #12]
240029f2:	f003 031f 	and.w	r3, r3, #31
240029f6:	2201      	movs	r2, #1
240029f8:	409a      	lsls	r2, r3
240029fa:	68fb      	ldr	r3, [r7, #12]
240029fc:	095b      	lsrs	r3, r3, #5
240029fe:	0158      	lsls	r0, r3, #5
24002a00:	4b19      	ldr	r3, [pc, #100]	; (24002a68 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002a02:	4403      	add	r3, r0
24002a04:	4618      	mov	r0, r3
24002a06:	ea41 0302 	orr.w	r3, r1, r2
24002a0a:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
24002a0c:	68fb      	ldr	r3, [r7, #12]
24002a0e:	091b      	lsrs	r3, r3, #4
24002a10:	f003 0301 	and.w	r3, r3, #1
24002a14:	2b00      	cmp	r3, #0
24002a16:	d106      	bne.n	24002a26 <HAL_EXTI_D3_EventInputConfig+0x82>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
24002a18:	68fb      	ldr	r3, [r7, #12]
24002a1a:	095b      	lsrs	r3, r3, #5
24002a1c:	015a      	lsls	r2, r3, #5
24002a1e:	4b13      	ldr	r3, [pc, #76]	; (24002a6c <HAL_EXTI_D3_EventInputConfig+0xc8>)
24002a20:	4413      	add	r3, r2
24002a22:	617b      	str	r3, [r7, #20]
24002a24:	e005      	b.n	24002a32 <HAL_EXTI_D3_EventInputConfig+0x8e>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
24002a26:	68fb      	ldr	r3, [r7, #12]
24002a28:	095b      	lsrs	r3, r3, #5
24002a2a:	015a      	lsls	r2, r3, #5
24002a2c:	4b10      	ldr	r3, [pc, #64]	; (24002a70 <HAL_EXTI_D3_EventInputConfig+0xcc>)
24002a2e:	4413      	add	r3, r2
24002a30:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
24002a32:	697b      	ldr	r3, [r7, #20]
24002a34:	681a      	ldr	r2, [r3, #0]
24002a36:	68fb      	ldr	r3, [r7, #12]
24002a38:	005b      	lsls	r3, r3, #1
24002a3a:	f003 031e 	and.w	r3, r3, #30
24002a3e:	2103      	movs	r1, #3
24002a40:	fa01 f303 	lsl.w	r3, r1, r3
24002a44:	43db      	mvns	r3, r3
24002a46:	401a      	ands	r2, r3
24002a48:	68fb      	ldr	r3, [r7, #12]
24002a4a:	005b      	lsls	r3, r3, #1
24002a4c:	f003 031e 	and.w	r3, r3, #30
24002a50:	6879      	ldr	r1, [r7, #4]
24002a52:	fa01 f303 	lsl.w	r3, r1, r3
24002a56:	431a      	orrs	r2, r3
24002a58:	697b      	ldr	r3, [r7, #20]
24002a5a:	601a      	str	r2, [r3, #0]

}
24002a5c:	bf00      	nop
24002a5e:	371c      	adds	r7, #28
24002a60:	46bd      	mov	sp, r7
24002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a66:	4770      	bx	lr
24002a68:	5800000c 	.word	0x5800000c
24002a6c:	58000010 	.word	0x58000010
24002a70:	58000014 	.word	0x58000014

24002a74 <__NVIC_SetPriorityGrouping>:
{
24002a74:	b480      	push	{r7}
24002a76:	b085      	sub	sp, #20
24002a78:	af00      	add	r7, sp, #0
24002a7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24002a7c:	687b      	ldr	r3, [r7, #4]
24002a7e:	f003 0307 	and.w	r3, r3, #7
24002a82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24002a84:	4b0b      	ldr	r3, [pc, #44]	; (24002ab4 <__NVIC_SetPriorityGrouping+0x40>)
24002a86:	68db      	ldr	r3, [r3, #12]
24002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24002a8a:	68ba      	ldr	r2, [r7, #8]
24002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24002a90:	4013      	ands	r3, r2
24002a92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24002a94:	68fb      	ldr	r3, [r7, #12]
24002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24002a98:	68bb      	ldr	r3, [r7, #8]
24002a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24002a9c:	4b06      	ldr	r3, [pc, #24]	; (24002ab8 <__NVIC_SetPriorityGrouping+0x44>)
24002a9e:	4313      	orrs	r3, r2
24002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24002aa2:	4a04      	ldr	r2, [pc, #16]	; (24002ab4 <__NVIC_SetPriorityGrouping+0x40>)
24002aa4:	68bb      	ldr	r3, [r7, #8]
24002aa6:	60d3      	str	r3, [r2, #12]
}
24002aa8:	bf00      	nop
24002aaa:	3714      	adds	r7, #20
24002aac:	46bd      	mov	sp, r7
24002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ab2:	4770      	bx	lr
24002ab4:	e000ed00 	.word	0xe000ed00
24002ab8:	05fa0000 	.word	0x05fa0000

24002abc <__NVIC_GetPriorityGrouping>:
{
24002abc:	b480      	push	{r7}
24002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24002ac0:	4b04      	ldr	r3, [pc, #16]	; (24002ad4 <__NVIC_GetPriorityGrouping+0x18>)
24002ac2:	68db      	ldr	r3, [r3, #12]
24002ac4:	0a1b      	lsrs	r3, r3, #8
24002ac6:	f003 0307 	and.w	r3, r3, #7
}
24002aca:	4618      	mov	r0, r3
24002acc:	46bd      	mov	sp, r7
24002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ad2:	4770      	bx	lr
24002ad4:	e000ed00 	.word	0xe000ed00

24002ad8 <__NVIC_EnableIRQ>:
{
24002ad8:	b480      	push	{r7}
24002ada:	b083      	sub	sp, #12
24002adc:	af00      	add	r7, sp, #0
24002ade:	4603      	mov	r3, r0
24002ae0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ae6:	2b00      	cmp	r3, #0
24002ae8:	db0b      	blt.n	24002b02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002aea:	88fb      	ldrh	r3, [r7, #6]
24002aec:	f003 021f 	and.w	r2, r3, #31
24002af0:	4907      	ldr	r1, [pc, #28]	; (24002b10 <__NVIC_EnableIRQ+0x38>)
24002af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002af6:	095b      	lsrs	r3, r3, #5
24002af8:	2001      	movs	r0, #1
24002afa:	fa00 f202 	lsl.w	r2, r0, r2
24002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002b02:	bf00      	nop
24002b04:	370c      	adds	r7, #12
24002b06:	46bd      	mov	sp, r7
24002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b0c:	4770      	bx	lr
24002b0e:	bf00      	nop
24002b10:	e000e100 	.word	0xe000e100

24002b14 <__NVIC_DisableIRQ>:
{
24002b14:	b480      	push	{r7}
24002b16:	b083      	sub	sp, #12
24002b18:	af00      	add	r7, sp, #0
24002b1a:	4603      	mov	r3, r0
24002b1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b22:	2b00      	cmp	r3, #0
24002b24:	db12      	blt.n	24002b4c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002b26:	88fb      	ldrh	r3, [r7, #6]
24002b28:	f003 021f 	and.w	r2, r3, #31
24002b2c:	490a      	ldr	r1, [pc, #40]	; (24002b58 <__NVIC_DisableIRQ+0x44>)
24002b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b32:	095b      	lsrs	r3, r3, #5
24002b34:	2001      	movs	r0, #1
24002b36:	fa00 f202 	lsl.w	r2, r0, r2
24002b3a:	3320      	adds	r3, #32
24002b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
24002b40:	f3bf 8f4f 	dsb	sy
}
24002b44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002b46:	f3bf 8f6f 	isb	sy
}
24002b4a:	bf00      	nop
}
24002b4c:	bf00      	nop
24002b4e:	370c      	adds	r7, #12
24002b50:	46bd      	mov	sp, r7
24002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b56:	4770      	bx	lr
24002b58:	e000e100 	.word	0xe000e100

24002b5c <__NVIC_GetPendingIRQ>:
{
24002b5c:	b480      	push	{r7}
24002b5e:	b083      	sub	sp, #12
24002b60:	af00      	add	r7, sp, #0
24002b62:	4603      	mov	r3, r0
24002b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b6a:	2b00      	cmp	r3, #0
24002b6c:	db0e      	blt.n	24002b8c <__NVIC_GetPendingIRQ+0x30>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002b6e:	4a0b      	ldr	r2, [pc, #44]	; (24002b9c <__NVIC_GetPendingIRQ+0x40>)
24002b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b74:	095b      	lsrs	r3, r3, #5
24002b76:	3340      	adds	r3, #64	; 0x40
24002b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002b7c:	88fb      	ldrh	r3, [r7, #6]
24002b7e:	f003 031f 	and.w	r3, r3, #31
24002b82:	fa22 f303 	lsr.w	r3, r2, r3
24002b86:	f003 0301 	and.w	r3, r3, #1
24002b8a:	e000      	b.n	24002b8e <__NVIC_GetPendingIRQ+0x32>
    return(0U);
24002b8c:	2300      	movs	r3, #0
}
24002b8e:	4618      	mov	r0, r3
24002b90:	370c      	adds	r7, #12
24002b92:	46bd      	mov	sp, r7
24002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b98:	4770      	bx	lr
24002b9a:	bf00      	nop
24002b9c:	e000e100 	.word	0xe000e100

24002ba0 <__NVIC_SetPendingIRQ>:
{
24002ba0:	b480      	push	{r7}
24002ba2:	b083      	sub	sp, #12
24002ba4:	af00      	add	r7, sp, #0
24002ba6:	4603      	mov	r3, r0
24002ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bae:	2b00      	cmp	r3, #0
24002bb0:	db0c      	blt.n	24002bcc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002bb2:	88fb      	ldrh	r3, [r7, #6]
24002bb4:	f003 021f 	and.w	r2, r3, #31
24002bb8:	4907      	ldr	r1, [pc, #28]	; (24002bd8 <__NVIC_SetPendingIRQ+0x38>)
24002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bbe:	095b      	lsrs	r3, r3, #5
24002bc0:	2001      	movs	r0, #1
24002bc2:	fa00 f202 	lsl.w	r2, r0, r2
24002bc6:	3340      	adds	r3, #64	; 0x40
24002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002bcc:	bf00      	nop
24002bce:	370c      	adds	r7, #12
24002bd0:	46bd      	mov	sp, r7
24002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002bd6:	4770      	bx	lr
24002bd8:	e000e100 	.word	0xe000e100

24002bdc <__NVIC_ClearPendingIRQ>:
{
24002bdc:	b480      	push	{r7}
24002bde:	b083      	sub	sp, #12
24002be0:	af00      	add	r7, sp, #0
24002be2:	4603      	mov	r3, r0
24002be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bea:	2b00      	cmp	r3, #0
24002bec:	db0c      	blt.n	24002c08 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002bee:	88fb      	ldrh	r3, [r7, #6]
24002bf0:	f003 021f 	and.w	r2, r3, #31
24002bf4:	4907      	ldr	r1, [pc, #28]	; (24002c14 <__NVIC_ClearPendingIRQ+0x38>)
24002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bfa:	095b      	lsrs	r3, r3, #5
24002bfc:	2001      	movs	r0, #1
24002bfe:	fa00 f202 	lsl.w	r2, r0, r2
24002c02:	3360      	adds	r3, #96	; 0x60
24002c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002c08:	bf00      	nop
24002c0a:	370c      	adds	r7, #12
24002c0c:	46bd      	mov	sp, r7
24002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c12:	4770      	bx	lr
24002c14:	e000e100 	.word	0xe000e100

24002c18 <__NVIC_GetActive>:
{
24002c18:	b480      	push	{r7}
24002c1a:	b083      	sub	sp, #12
24002c1c:	af00      	add	r7, sp, #0
24002c1e:	4603      	mov	r3, r0
24002c20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c26:	2b00      	cmp	r3, #0
24002c28:	db0e      	blt.n	24002c48 <__NVIC_GetActive+0x30>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002c2a:	4a0b      	ldr	r2, [pc, #44]	; (24002c58 <__NVIC_GetActive+0x40>)
24002c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c30:	095b      	lsrs	r3, r3, #5
24002c32:	3380      	adds	r3, #128	; 0x80
24002c34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002c38:	88fb      	ldrh	r3, [r7, #6]
24002c3a:	f003 031f 	and.w	r3, r3, #31
24002c3e:	fa22 f303 	lsr.w	r3, r2, r3
24002c42:	f003 0301 	and.w	r3, r3, #1
24002c46:	e000      	b.n	24002c4a <__NVIC_GetActive+0x32>
    return(0U);
24002c48:	2300      	movs	r3, #0
}
24002c4a:	4618      	mov	r0, r3
24002c4c:	370c      	adds	r7, #12
24002c4e:	46bd      	mov	sp, r7
24002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c54:	4770      	bx	lr
24002c56:	bf00      	nop
24002c58:	e000e100 	.word	0xe000e100

24002c5c <__NVIC_SetPriority>:
{
24002c5c:	b480      	push	{r7}
24002c5e:	b083      	sub	sp, #12
24002c60:	af00      	add	r7, sp, #0
24002c62:	4603      	mov	r3, r0
24002c64:	6039      	str	r1, [r7, #0]
24002c66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c6c:	2b00      	cmp	r3, #0
24002c6e:	db0a      	blt.n	24002c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c70:	683b      	ldr	r3, [r7, #0]
24002c72:	b2da      	uxtb	r2, r3
24002c74:	490c      	ldr	r1, [pc, #48]	; (24002ca8 <__NVIC_SetPriority+0x4c>)
24002c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c7a:	0112      	lsls	r2, r2, #4
24002c7c:	b2d2      	uxtb	r2, r2
24002c7e:	440b      	add	r3, r1
24002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
24002c84:	e00a      	b.n	24002c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c86:	683b      	ldr	r3, [r7, #0]
24002c88:	b2da      	uxtb	r2, r3
24002c8a:	4908      	ldr	r1, [pc, #32]	; (24002cac <__NVIC_SetPriority+0x50>)
24002c8c:	88fb      	ldrh	r3, [r7, #6]
24002c8e:	f003 030f 	and.w	r3, r3, #15
24002c92:	3b04      	subs	r3, #4
24002c94:	0112      	lsls	r2, r2, #4
24002c96:	b2d2      	uxtb	r2, r2
24002c98:	440b      	add	r3, r1
24002c9a:	761a      	strb	r2, [r3, #24]
}
24002c9c:	bf00      	nop
24002c9e:	370c      	adds	r7, #12
24002ca0:	46bd      	mov	sp, r7
24002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ca6:	4770      	bx	lr
24002ca8:	e000e100 	.word	0xe000e100
24002cac:	e000ed00 	.word	0xe000ed00

24002cb0 <__NVIC_GetPriority>:
{
24002cb0:	b480      	push	{r7}
24002cb2:	b083      	sub	sp, #12
24002cb4:	af00      	add	r7, sp, #0
24002cb6:	4603      	mov	r3, r0
24002cb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002cbe:	2b00      	cmp	r3, #0
24002cc0:	db09      	blt.n	24002cd6 <__NVIC_GetPriority+0x26>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
24002cc2:	4a0d      	ldr	r2, [pc, #52]	; (24002cf8 <__NVIC_GetPriority+0x48>)
24002cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002cc8:	4413      	add	r3, r2
24002cca:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
24002cce:	b2db      	uxtb	r3, r3
24002cd0:	091b      	lsrs	r3, r3, #4
24002cd2:	b2db      	uxtb	r3, r3
24002cd4:	e009      	b.n	24002cea <__NVIC_GetPriority+0x3a>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24002cd6:	4a09      	ldr	r2, [pc, #36]	; (24002cfc <__NVIC_GetPriority+0x4c>)
24002cd8:	88fb      	ldrh	r3, [r7, #6]
24002cda:	f003 030f 	and.w	r3, r3, #15
24002cde:	3b04      	subs	r3, #4
24002ce0:	4413      	add	r3, r2
24002ce2:	7e1b      	ldrb	r3, [r3, #24]
24002ce4:	b2db      	uxtb	r3, r3
24002ce6:	091b      	lsrs	r3, r3, #4
24002ce8:	b2db      	uxtb	r3, r3
}
24002cea:	4618      	mov	r0, r3
24002cec:	370c      	adds	r7, #12
24002cee:	46bd      	mov	sp, r7
24002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
24002cf4:	4770      	bx	lr
24002cf6:	bf00      	nop
24002cf8:	e000e100 	.word	0xe000e100
24002cfc:	e000ed00 	.word	0xe000ed00

24002d00 <NVIC_EncodePriority>:
{
24002d00:	b480      	push	{r7}
24002d02:	b089      	sub	sp, #36	; 0x24
24002d04:	af00      	add	r7, sp, #0
24002d06:	60f8      	str	r0, [r7, #12]
24002d08:	60b9      	str	r1, [r7, #8]
24002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002d0c:	68fb      	ldr	r3, [r7, #12]
24002d0e:	f003 0307 	and.w	r3, r3, #7
24002d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002d14:	69fb      	ldr	r3, [r7, #28]
24002d16:	f1c3 0307 	rsb	r3, r3, #7
24002d1a:	2b04      	cmp	r3, #4
24002d1c:	bf28      	it	cs
24002d1e:	2304      	movcs	r3, #4
24002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002d22:	69fb      	ldr	r3, [r7, #28]
24002d24:	3304      	adds	r3, #4
24002d26:	2b06      	cmp	r3, #6
24002d28:	d902      	bls.n	24002d30 <NVIC_EncodePriority+0x30>
24002d2a:	69fb      	ldr	r3, [r7, #28]
24002d2c:	3b03      	subs	r3, #3
24002d2e:	e000      	b.n	24002d32 <NVIC_EncodePriority+0x32>
24002d30:	2300      	movs	r3, #0
24002d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d34:	f04f 32ff 	mov.w	r2, #4294967295
24002d38:	69bb      	ldr	r3, [r7, #24]
24002d3a:	fa02 f303 	lsl.w	r3, r2, r3
24002d3e:	43da      	mvns	r2, r3
24002d40:	68bb      	ldr	r3, [r7, #8]
24002d42:	401a      	ands	r2, r3
24002d44:	697b      	ldr	r3, [r7, #20]
24002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24002d48:	f04f 31ff 	mov.w	r1, #4294967295
24002d4c:	697b      	ldr	r3, [r7, #20]
24002d4e:	fa01 f303 	lsl.w	r3, r1, r3
24002d52:	43d9      	mvns	r1, r3
24002d54:	687b      	ldr	r3, [r7, #4]
24002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d58:	4313      	orrs	r3, r2
}
24002d5a:	4618      	mov	r0, r3
24002d5c:	3724      	adds	r7, #36	; 0x24
24002d5e:	46bd      	mov	sp, r7
24002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d64:	4770      	bx	lr

24002d66 <NVIC_DecodePriority>:
{
24002d66:	b480      	push	{r7}
24002d68:	b089      	sub	sp, #36	; 0x24
24002d6a:	af00      	add	r7, sp, #0
24002d6c:	60f8      	str	r0, [r7, #12]
24002d6e:	60b9      	str	r1, [r7, #8]
24002d70:	607a      	str	r2, [r7, #4]
24002d72:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002d74:	68bb      	ldr	r3, [r7, #8]
24002d76:	f003 0307 	and.w	r3, r3, #7
24002d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002d7c:	69fb      	ldr	r3, [r7, #28]
24002d7e:	f1c3 0307 	rsb	r3, r3, #7
24002d82:	2b04      	cmp	r3, #4
24002d84:	bf28      	it	cs
24002d86:	2304      	movcs	r3, #4
24002d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002d8a:	69fb      	ldr	r3, [r7, #28]
24002d8c:	3304      	adds	r3, #4
24002d8e:	2b06      	cmp	r3, #6
24002d90:	d902      	bls.n	24002d98 <NVIC_DecodePriority+0x32>
24002d92:	69fb      	ldr	r3, [r7, #28]
24002d94:	3b03      	subs	r3, #3
24002d96:	e000      	b.n	24002d9a <NVIC_DecodePriority+0x34>
24002d98:	2300      	movs	r3, #0
24002d9a:	617b      	str	r3, [r7, #20]
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24002d9c:	68fa      	ldr	r2, [r7, #12]
24002d9e:	697b      	ldr	r3, [r7, #20]
24002da0:	40da      	lsrs	r2, r3
24002da2:	f04f 31ff 	mov.w	r1, #4294967295
24002da6:	69bb      	ldr	r3, [r7, #24]
24002da8:	fa01 f303 	lsl.w	r3, r1, r3
24002dac:	43db      	mvns	r3, r3
24002dae:	401a      	ands	r2, r3
24002db0:	687b      	ldr	r3, [r7, #4]
24002db2:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24002db4:	f04f 32ff 	mov.w	r2, #4294967295
24002db8:	697b      	ldr	r3, [r7, #20]
24002dba:	fa02 f303 	lsl.w	r3, r2, r3
24002dbe:	43da      	mvns	r2, r3
24002dc0:	68fb      	ldr	r3, [r7, #12]
24002dc2:	401a      	ands	r2, r3
24002dc4:	683b      	ldr	r3, [r7, #0]
24002dc6:	601a      	str	r2, [r3, #0]
}
24002dc8:	bf00      	nop
24002dca:	3724      	adds	r7, #36	; 0x24
24002dcc:	46bd      	mov	sp, r7
24002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
24002dd2:	4770      	bx	lr

24002dd4 <__NVIC_SystemReset>:
{
24002dd4:	b480      	push	{r7}
24002dd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24002dd8:	f3bf 8f4f 	dsb	sy
}
24002ddc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24002dde:	4b06      	ldr	r3, [pc, #24]	; (24002df8 <__NVIC_SystemReset+0x24>)
24002de0:	68db      	ldr	r3, [r3, #12]
24002de2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24002de6:	4904      	ldr	r1, [pc, #16]	; (24002df8 <__NVIC_SystemReset+0x24>)
24002de8:	4b04      	ldr	r3, [pc, #16]	; (24002dfc <__NVIC_SystemReset+0x28>)
24002dea:	4313      	orrs	r3, r2
24002dec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24002dee:	f3bf 8f4f 	dsb	sy
}
24002df2:	bf00      	nop
    __NOP();
24002df4:	bf00      	nop
24002df6:	e7fd      	b.n	24002df4 <__NVIC_SystemReset+0x20>
24002df8:	e000ed00 	.word	0xe000ed00
24002dfc:	05fa0004 	.word	0x05fa0004

24002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24002e00:	b580      	push	{r7, lr}
24002e02:	b082      	sub	sp, #8
24002e04:	af00      	add	r7, sp, #0
24002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24002e08:	687b      	ldr	r3, [r7, #4]
24002e0a:	3b01      	subs	r3, #1
24002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24002e10:	d301      	bcc.n	24002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24002e12:	2301      	movs	r3, #1
24002e14:	e00f      	b.n	24002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002e16:	4a0a      	ldr	r2, [pc, #40]	; (24002e40 <SysTick_Config+0x40>)
24002e18:	687b      	ldr	r3, [r7, #4]
24002e1a:	3b01      	subs	r3, #1
24002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24002e1e:	210f      	movs	r1, #15
24002e20:	f04f 30ff 	mov.w	r0, #4294967295
24002e24:	f7ff ff1a 	bl	24002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002e28:	4b05      	ldr	r3, [pc, #20]	; (24002e40 <SysTick_Config+0x40>)
24002e2a:	2200      	movs	r2, #0
24002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002e2e:	4b04      	ldr	r3, [pc, #16]	; (24002e40 <SysTick_Config+0x40>)
24002e30:	2207      	movs	r2, #7
24002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24002e34:	2300      	movs	r3, #0
}
24002e36:	4618      	mov	r0, r3
24002e38:	3708      	adds	r7, #8
24002e3a:	46bd      	mov	sp, r7
24002e3c:	bd80      	pop	{r7, pc}
24002e3e:	bf00      	nop
24002e40:	e000e010 	.word	0xe000e010

24002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002e44:	b580      	push	{r7, lr}
24002e46:	b082      	sub	sp, #8
24002e48:	af00      	add	r7, sp, #0
24002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24002e4c:	6878      	ldr	r0, [r7, #4]
24002e4e:	f7ff fe11 	bl	24002a74 <__NVIC_SetPriorityGrouping>
}
24002e52:	bf00      	nop
24002e54:	3708      	adds	r7, #8
24002e56:	46bd      	mov	sp, r7
24002e58:	bd80      	pop	{r7, pc}

24002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002e5a:	b580      	push	{r7, lr}
24002e5c:	b086      	sub	sp, #24
24002e5e:	af00      	add	r7, sp, #0
24002e60:	4603      	mov	r3, r0
24002e62:	60b9      	str	r1, [r7, #8]
24002e64:	607a      	str	r2, [r7, #4]
24002e66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24002e68:	f7ff fe28 	bl	24002abc <__NVIC_GetPriorityGrouping>
24002e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24002e6e:	687a      	ldr	r2, [r7, #4]
24002e70:	68b9      	ldr	r1, [r7, #8]
24002e72:	6978      	ldr	r0, [r7, #20]
24002e74:	f7ff ff44 	bl	24002d00 <NVIC_EncodePriority>
24002e78:	4602      	mov	r2, r0
24002e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002e7e:	4611      	mov	r1, r2
24002e80:	4618      	mov	r0, r3
24002e82:	f7ff feeb 	bl	24002c5c <__NVIC_SetPriority>
}
24002e86:	bf00      	nop
24002e88:	3718      	adds	r7, #24
24002e8a:	46bd      	mov	sp, r7
24002e8c:	bd80      	pop	{r7, pc}

24002e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002e8e:	b580      	push	{r7, lr}
24002e90:	b082      	sub	sp, #8
24002e92:	af00      	add	r7, sp, #0
24002e94:	4603      	mov	r3, r0
24002e96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24002e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002e9c:	4618      	mov	r0, r3
24002e9e:	f7ff fe1b 	bl	24002ad8 <__NVIC_EnableIRQ>
}
24002ea2:	bf00      	nop
24002ea4:	3708      	adds	r7, #8
24002ea6:	46bd      	mov	sp, r7
24002ea8:	bd80      	pop	{r7, pc}

24002eaa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002eaa:	b580      	push	{r7, lr}
24002eac:	b082      	sub	sp, #8
24002eae:	af00      	add	r7, sp, #0
24002eb0:	4603      	mov	r3, r0
24002eb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24002eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002eb8:	4618      	mov	r0, r3
24002eba:	f7ff fe2b 	bl	24002b14 <__NVIC_DisableIRQ>
}
24002ebe:	bf00      	nop
24002ec0:	3708      	adds	r7, #8
24002ec2:	46bd      	mov	sp, r7
24002ec4:	bd80      	pop	{r7, pc}

24002ec6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24002ec6:	b580      	push	{r7, lr}
24002ec8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24002eca:	f7ff ff83 	bl	24002dd4 <__NVIC_SystemReset>

24002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24002ece:	b580      	push	{r7, lr}
24002ed0:	b082      	sub	sp, #8
24002ed2:	af00      	add	r7, sp, #0
24002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24002ed6:	6878      	ldr	r0, [r7, #4]
24002ed8:	f7ff ff92 	bl	24002e00 <SysTick_Config>
24002edc:	4603      	mov	r3, r0
}
24002ede:	4618      	mov	r0, r3
24002ee0:	3708      	adds	r7, #8
24002ee2:	46bd      	mov	sp, r7
24002ee4:	bd80      	pop	{r7, pc}
	...

24002ee8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24002ee8:	b480      	push	{r7}
24002eea:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
24002eec:	f3bf 8f5f 	dmb	sy
}
24002ef0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002ef2:	4b07      	ldr	r3, [pc, #28]	; (24002f10 <HAL_MPU_Disable+0x28>)
24002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002ef6:	4a06      	ldr	r2, [pc, #24]	; (24002f10 <HAL_MPU_Disable+0x28>)
24002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002efc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24002efe:	4b05      	ldr	r3, [pc, #20]	; (24002f14 <HAL_MPU_Disable+0x2c>)
24002f00:	2200      	movs	r2, #0
24002f02:	605a      	str	r2, [r3, #4]
}
24002f04:	bf00      	nop
24002f06:	46bd      	mov	sp, r7
24002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f0c:	4770      	bx	lr
24002f0e:	bf00      	nop
24002f10:	e000ed00 	.word	0xe000ed00
24002f14:	e000ed90 	.word	0xe000ed90

24002f18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24002f18:	b480      	push	{r7}
24002f1a:	b083      	sub	sp, #12
24002f1c:	af00      	add	r7, sp, #0
24002f1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24002f20:	4a0b      	ldr	r2, [pc, #44]	; (24002f50 <HAL_MPU_Enable+0x38>)
24002f22:	687b      	ldr	r3, [r7, #4]
24002f24:	f043 0301 	orr.w	r3, r3, #1
24002f28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24002f2a:	4b0a      	ldr	r3, [pc, #40]	; (24002f54 <HAL_MPU_Enable+0x3c>)
24002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002f2e:	4a09      	ldr	r2, [pc, #36]	; (24002f54 <HAL_MPU_Enable+0x3c>)
24002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002f34:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24002f36:	f3bf 8f4f 	dsb	sy
}
24002f3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002f3c:	f3bf 8f6f 	isb	sy
}
24002f40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24002f42:	bf00      	nop
24002f44:	370c      	adds	r7, #12
24002f46:	46bd      	mov	sp, r7
24002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f4c:	4770      	bx	lr
24002f4e:	bf00      	nop
24002f50:	e000ed90 	.word	0xe000ed90
24002f54:	e000ed00 	.word	0xe000ed00

24002f58 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24002f58:	b480      	push	{r7}
24002f5a:	b083      	sub	sp, #12
24002f5c:	af00      	add	r7, sp, #0
24002f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24002f60:	687b      	ldr	r3, [r7, #4]
24002f62:	785a      	ldrb	r2, [r3, #1]
24002f64:	4b1d      	ldr	r3, [pc, #116]	; (24002fdc <HAL_MPU_ConfigRegion+0x84>)
24002f66:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
24002f68:	687b      	ldr	r3, [r7, #4]
24002f6a:	781b      	ldrb	r3, [r3, #0]
24002f6c:	2b00      	cmp	r3, #0
24002f6e:	d029      	beq.n	24002fc4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24002f70:	4a1a      	ldr	r2, [pc, #104]	; (24002fdc <HAL_MPU_ConfigRegion+0x84>)
24002f72:	687b      	ldr	r3, [r7, #4]
24002f74:	685b      	ldr	r3, [r3, #4]
24002f76:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f78:	687b      	ldr	r3, [r7, #4]
24002f7a:	7b1b      	ldrb	r3, [r3, #12]
24002f7c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f7e:	687b      	ldr	r3, [r7, #4]
24002f80:	7adb      	ldrb	r3, [r3, #11]
24002f82:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f86:	687b      	ldr	r3, [r7, #4]
24002f88:	7a9b      	ldrb	r3, [r3, #10]
24002f8a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002f8e:	687b      	ldr	r3, [r7, #4]
24002f90:	7b5b      	ldrb	r3, [r3, #13]
24002f92:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002f96:	687b      	ldr	r3, [r7, #4]
24002f98:	7b9b      	ldrb	r3, [r3, #14]
24002f9a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002f9e:	687b      	ldr	r3, [r7, #4]
24002fa0:	7bdb      	ldrb	r3, [r3, #15]
24002fa2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002fa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002fa6:	687b      	ldr	r3, [r7, #4]
24002fa8:	7a5b      	ldrb	r3, [r3, #9]
24002faa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002fae:	687b      	ldr	r3, [r7, #4]
24002fb0:	7a1b      	ldrb	r3, [r3, #8]
24002fb2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002fb4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24002fb6:	687a      	ldr	r2, [r7, #4]
24002fb8:	7812      	ldrb	r2, [r2, #0]
24002fba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002fbc:	4a07      	ldr	r2, [pc, #28]	; (24002fdc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002fbe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002fc0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24002fc2:	e005      	b.n	24002fd0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
24002fc4:	4b05      	ldr	r3, [pc, #20]	; (24002fdc <HAL_MPU_ConfigRegion+0x84>)
24002fc6:	2200      	movs	r2, #0
24002fc8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
24002fca:	4b04      	ldr	r3, [pc, #16]	; (24002fdc <HAL_MPU_ConfigRegion+0x84>)
24002fcc:	2200      	movs	r2, #0
24002fce:	611a      	str	r2, [r3, #16]
}
24002fd0:	bf00      	nop
24002fd2:	370c      	adds	r7, #12
24002fd4:	46bd      	mov	sp, r7
24002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fda:	4770      	bx	lr
24002fdc:	e000ed90 	.word	0xe000ed90

24002fe0 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24002fe0:	b580      	push	{r7, lr}
24002fe2:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24002fe4:	f7ff fd6a 	bl	24002abc <__NVIC_GetPriorityGrouping>
24002fe8:	4603      	mov	r3, r0
}
24002fea:	4618      	mov	r0, r3
24002fec:	bd80      	pop	{r7, pc}

24002fee <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24002fee:	b580      	push	{r7, lr}
24002ff0:	b084      	sub	sp, #16
24002ff2:	af00      	add	r7, sp, #0
24002ff4:	60b9      	str	r1, [r7, #8]
24002ff6:	607a      	str	r2, [r7, #4]
24002ff8:	603b      	str	r3, [r7, #0]
24002ffa:	4603      	mov	r3, r0
24002ffc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24002ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003002:	4618      	mov	r0, r3
24003004:	f7ff fe54 	bl	24002cb0 <__NVIC_GetPriority>
24003008:	683b      	ldr	r3, [r7, #0]
2400300a:	687a      	ldr	r2, [r7, #4]
2400300c:	68b9      	ldr	r1, [r7, #8]
2400300e:	f7ff feaa 	bl	24002d66 <NVIC_DecodePriority>
}
24003012:	bf00      	nop
24003014:	3710      	adds	r7, #16
24003016:	46bd      	mov	sp, r7
24003018:	bd80      	pop	{r7, pc}

2400301a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
2400301a:	b580      	push	{r7, lr}
2400301c:	b082      	sub	sp, #8
2400301e:	af00      	add	r7, sp, #0
24003020:	4603      	mov	r3, r0
24003022:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24003024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003028:	4618      	mov	r0, r3
2400302a:	f7ff fdb9 	bl	24002ba0 <__NVIC_SetPendingIRQ>
}
2400302e:	bf00      	nop
24003030:	3708      	adds	r7, #8
24003032:	46bd      	mov	sp, r7
24003034:	bd80      	pop	{r7, pc}

24003036 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24003036:	b580      	push	{r7, lr}
24003038:	b082      	sub	sp, #8
2400303a:	af00      	add	r7, sp, #0
2400303c:	4603      	mov	r3, r0
2400303e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24003040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003044:	4618      	mov	r0, r3
24003046:	f7ff fd89 	bl	24002b5c <__NVIC_GetPendingIRQ>
2400304a:	4603      	mov	r3, r0
}
2400304c:	4618      	mov	r0, r3
2400304e:	3708      	adds	r7, #8
24003050:	46bd      	mov	sp, r7
24003052:	bd80      	pop	{r7, pc}

24003054 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003054:	b580      	push	{r7, lr}
24003056:	b082      	sub	sp, #8
24003058:	af00      	add	r7, sp, #0
2400305a:	4603      	mov	r3, r0
2400305c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
2400305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003062:	4618      	mov	r0, r3
24003064:	f7ff fdba 	bl	24002bdc <__NVIC_ClearPendingIRQ>
}
24003068:	bf00      	nop
2400306a:	3708      	adds	r7, #8
2400306c:	46bd      	mov	sp, r7
2400306e:	bd80      	pop	{r7, pc}

24003070 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24003070:	b580      	push	{r7, lr}
24003072:	b082      	sub	sp, #8
24003074:	af00      	add	r7, sp, #0
24003076:	4603      	mov	r3, r0
24003078:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
2400307a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400307e:	4618      	mov	r0, r3
24003080:	f7ff fdca 	bl	24002c18 <__NVIC_GetActive>
24003084:	4603      	mov	r3, r0
}
24003086:	4618      	mov	r0, r3
24003088:	3708      	adds	r7, #8
2400308a:	46bd      	mov	sp, r7
2400308c:	bd80      	pop	{r7, pc}
	...

24003090 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24003090:	b480      	push	{r7}
24003092:	b083      	sub	sp, #12
24003094:	af00      	add	r7, sp, #0
24003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
24003098:	687b      	ldr	r3, [r7, #4]
2400309a:	2b04      	cmp	r3, #4
2400309c:	d106      	bne.n	240030ac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
2400309e:	4b09      	ldr	r3, [pc, #36]	; (240030c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
240030a0:	681b      	ldr	r3, [r3, #0]
240030a2:	4a08      	ldr	r2, [pc, #32]	; (240030c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
240030a4:	f043 0304 	orr.w	r3, r3, #4
240030a8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
240030aa:	e005      	b.n	240030b8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
240030ac:	4b05      	ldr	r3, [pc, #20]	; (240030c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
240030ae:	681b      	ldr	r3, [r3, #0]
240030b0:	4a04      	ldr	r2, [pc, #16]	; (240030c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
240030b2:	f023 0304 	bic.w	r3, r3, #4
240030b6:	6013      	str	r3, [r2, #0]
}
240030b8:	bf00      	nop
240030ba:	370c      	adds	r7, #12
240030bc:	46bd      	mov	sp, r7
240030be:	f85d 7b04 	ldr.w	r7, [sp], #4
240030c2:	4770      	bx	lr
240030c4:	e000e010 	.word	0xe000e010

240030c8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
240030c8:	b580      	push	{r7, lr}
240030ca:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
240030cc:	f000 f802 	bl	240030d4 <HAL_SYSTICK_Callback>
}
240030d0:	bf00      	nop
240030d2:	bd80      	pop	{r7, pc}

240030d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
240030d4:	b480      	push	{r7}
240030d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
240030d8:	bf00      	nop
240030da:	46bd      	mov	sp, r7
240030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240030e0:	4770      	bx	lr

240030e2 <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
240030e2:	b480      	push	{r7}
240030e4:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
240030e6:	2303      	movs	r3, #3
}
240030e8:	4618      	mov	r0, r3
240030ea:	46bd      	mov	sp, r7
240030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240030f0:	4770      	bx	lr
	...

240030f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
240030f4:	b580      	push	{r7, lr}
240030f6:	b086      	sub	sp, #24
240030f8:	af00      	add	r7, sp, #0
240030fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
240030fc:	f7ff f892 	bl	24002224 <HAL_GetTick>
24003100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003102:	687b      	ldr	r3, [r7, #4]
24003104:	2b00      	cmp	r3, #0
24003106:	d101      	bne.n	2400310c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24003108:	2301      	movs	r3, #1
2400310a:	e316      	b.n	2400373a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400310c:	687b      	ldr	r3, [r7, #4]
2400310e:	681b      	ldr	r3, [r3, #0]
24003110:	4a66      	ldr	r2, [pc, #408]	; (240032ac <HAL_DMA_Init+0x1b8>)
24003112:	4293      	cmp	r3, r2
24003114:	d04a      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003116:	687b      	ldr	r3, [r7, #4]
24003118:	681b      	ldr	r3, [r3, #0]
2400311a:	4a65      	ldr	r2, [pc, #404]	; (240032b0 <HAL_DMA_Init+0x1bc>)
2400311c:	4293      	cmp	r3, r2
2400311e:	d045      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003120:	687b      	ldr	r3, [r7, #4]
24003122:	681b      	ldr	r3, [r3, #0]
24003124:	4a63      	ldr	r2, [pc, #396]	; (240032b4 <HAL_DMA_Init+0x1c0>)
24003126:	4293      	cmp	r3, r2
24003128:	d040      	beq.n	240031ac <HAL_DMA_Init+0xb8>
2400312a:	687b      	ldr	r3, [r7, #4]
2400312c:	681b      	ldr	r3, [r3, #0]
2400312e:	4a62      	ldr	r2, [pc, #392]	; (240032b8 <HAL_DMA_Init+0x1c4>)
24003130:	4293      	cmp	r3, r2
24003132:	d03b      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003134:	687b      	ldr	r3, [r7, #4]
24003136:	681b      	ldr	r3, [r3, #0]
24003138:	4a60      	ldr	r2, [pc, #384]	; (240032bc <HAL_DMA_Init+0x1c8>)
2400313a:	4293      	cmp	r3, r2
2400313c:	d036      	beq.n	240031ac <HAL_DMA_Init+0xb8>
2400313e:	687b      	ldr	r3, [r7, #4]
24003140:	681b      	ldr	r3, [r3, #0]
24003142:	4a5f      	ldr	r2, [pc, #380]	; (240032c0 <HAL_DMA_Init+0x1cc>)
24003144:	4293      	cmp	r3, r2
24003146:	d031      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003148:	687b      	ldr	r3, [r7, #4]
2400314a:	681b      	ldr	r3, [r3, #0]
2400314c:	4a5d      	ldr	r2, [pc, #372]	; (240032c4 <HAL_DMA_Init+0x1d0>)
2400314e:	4293      	cmp	r3, r2
24003150:	d02c      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003152:	687b      	ldr	r3, [r7, #4]
24003154:	681b      	ldr	r3, [r3, #0]
24003156:	4a5c      	ldr	r2, [pc, #368]	; (240032c8 <HAL_DMA_Init+0x1d4>)
24003158:	4293      	cmp	r3, r2
2400315a:	d027      	beq.n	240031ac <HAL_DMA_Init+0xb8>
2400315c:	687b      	ldr	r3, [r7, #4]
2400315e:	681b      	ldr	r3, [r3, #0]
24003160:	4a5a      	ldr	r2, [pc, #360]	; (240032cc <HAL_DMA_Init+0x1d8>)
24003162:	4293      	cmp	r3, r2
24003164:	d022      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003166:	687b      	ldr	r3, [r7, #4]
24003168:	681b      	ldr	r3, [r3, #0]
2400316a:	4a59      	ldr	r2, [pc, #356]	; (240032d0 <HAL_DMA_Init+0x1dc>)
2400316c:	4293      	cmp	r3, r2
2400316e:	d01d      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003170:	687b      	ldr	r3, [r7, #4]
24003172:	681b      	ldr	r3, [r3, #0]
24003174:	4a57      	ldr	r2, [pc, #348]	; (240032d4 <HAL_DMA_Init+0x1e0>)
24003176:	4293      	cmp	r3, r2
24003178:	d018      	beq.n	240031ac <HAL_DMA_Init+0xb8>
2400317a:	687b      	ldr	r3, [r7, #4]
2400317c:	681b      	ldr	r3, [r3, #0]
2400317e:	4a56      	ldr	r2, [pc, #344]	; (240032d8 <HAL_DMA_Init+0x1e4>)
24003180:	4293      	cmp	r3, r2
24003182:	d013      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003184:	687b      	ldr	r3, [r7, #4]
24003186:	681b      	ldr	r3, [r3, #0]
24003188:	4a54      	ldr	r2, [pc, #336]	; (240032dc <HAL_DMA_Init+0x1e8>)
2400318a:	4293      	cmp	r3, r2
2400318c:	d00e      	beq.n	240031ac <HAL_DMA_Init+0xb8>
2400318e:	687b      	ldr	r3, [r7, #4]
24003190:	681b      	ldr	r3, [r3, #0]
24003192:	4a53      	ldr	r2, [pc, #332]	; (240032e0 <HAL_DMA_Init+0x1ec>)
24003194:	4293      	cmp	r3, r2
24003196:	d009      	beq.n	240031ac <HAL_DMA_Init+0xb8>
24003198:	687b      	ldr	r3, [r7, #4]
2400319a:	681b      	ldr	r3, [r3, #0]
2400319c:	4a51      	ldr	r2, [pc, #324]	; (240032e4 <HAL_DMA_Init+0x1f0>)
2400319e:	4293      	cmp	r3, r2
240031a0:	d004      	beq.n	240031ac <HAL_DMA_Init+0xb8>
240031a2:	687b      	ldr	r3, [r7, #4]
240031a4:	681b      	ldr	r3, [r3, #0]
240031a6:	4a50      	ldr	r2, [pc, #320]	; (240032e8 <HAL_DMA_Init+0x1f4>)
240031a8:	4293      	cmp	r3, r2
240031aa:	d101      	bne.n	240031b0 <HAL_DMA_Init+0xbc>
240031ac:	2301      	movs	r3, #1
240031ae:	e000      	b.n	240031b2 <HAL_DMA_Init+0xbe>
240031b0:	2300      	movs	r3, #0
240031b2:	2b00      	cmp	r3, #0
240031b4:	f000 813b 	beq.w	2400342e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240031b8:	687b      	ldr	r3, [r7, #4]
240031ba:	2202      	movs	r2, #2
240031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240031c0:	687b      	ldr	r3, [r7, #4]
240031c2:	2200      	movs	r2, #0
240031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240031c8:	687b      	ldr	r3, [r7, #4]
240031ca:	681b      	ldr	r3, [r3, #0]
240031cc:	4a37      	ldr	r2, [pc, #220]	; (240032ac <HAL_DMA_Init+0x1b8>)
240031ce:	4293      	cmp	r3, r2
240031d0:	d04a      	beq.n	24003268 <HAL_DMA_Init+0x174>
240031d2:	687b      	ldr	r3, [r7, #4]
240031d4:	681b      	ldr	r3, [r3, #0]
240031d6:	4a36      	ldr	r2, [pc, #216]	; (240032b0 <HAL_DMA_Init+0x1bc>)
240031d8:	4293      	cmp	r3, r2
240031da:	d045      	beq.n	24003268 <HAL_DMA_Init+0x174>
240031dc:	687b      	ldr	r3, [r7, #4]
240031de:	681b      	ldr	r3, [r3, #0]
240031e0:	4a34      	ldr	r2, [pc, #208]	; (240032b4 <HAL_DMA_Init+0x1c0>)
240031e2:	4293      	cmp	r3, r2
240031e4:	d040      	beq.n	24003268 <HAL_DMA_Init+0x174>
240031e6:	687b      	ldr	r3, [r7, #4]
240031e8:	681b      	ldr	r3, [r3, #0]
240031ea:	4a33      	ldr	r2, [pc, #204]	; (240032b8 <HAL_DMA_Init+0x1c4>)
240031ec:	4293      	cmp	r3, r2
240031ee:	d03b      	beq.n	24003268 <HAL_DMA_Init+0x174>
240031f0:	687b      	ldr	r3, [r7, #4]
240031f2:	681b      	ldr	r3, [r3, #0]
240031f4:	4a31      	ldr	r2, [pc, #196]	; (240032bc <HAL_DMA_Init+0x1c8>)
240031f6:	4293      	cmp	r3, r2
240031f8:	d036      	beq.n	24003268 <HAL_DMA_Init+0x174>
240031fa:	687b      	ldr	r3, [r7, #4]
240031fc:	681b      	ldr	r3, [r3, #0]
240031fe:	4a30      	ldr	r2, [pc, #192]	; (240032c0 <HAL_DMA_Init+0x1cc>)
24003200:	4293      	cmp	r3, r2
24003202:	d031      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003204:	687b      	ldr	r3, [r7, #4]
24003206:	681b      	ldr	r3, [r3, #0]
24003208:	4a2e      	ldr	r2, [pc, #184]	; (240032c4 <HAL_DMA_Init+0x1d0>)
2400320a:	4293      	cmp	r3, r2
2400320c:	d02c      	beq.n	24003268 <HAL_DMA_Init+0x174>
2400320e:	687b      	ldr	r3, [r7, #4]
24003210:	681b      	ldr	r3, [r3, #0]
24003212:	4a2d      	ldr	r2, [pc, #180]	; (240032c8 <HAL_DMA_Init+0x1d4>)
24003214:	4293      	cmp	r3, r2
24003216:	d027      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003218:	687b      	ldr	r3, [r7, #4]
2400321a:	681b      	ldr	r3, [r3, #0]
2400321c:	4a2b      	ldr	r2, [pc, #172]	; (240032cc <HAL_DMA_Init+0x1d8>)
2400321e:	4293      	cmp	r3, r2
24003220:	d022      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003222:	687b      	ldr	r3, [r7, #4]
24003224:	681b      	ldr	r3, [r3, #0]
24003226:	4a2a      	ldr	r2, [pc, #168]	; (240032d0 <HAL_DMA_Init+0x1dc>)
24003228:	4293      	cmp	r3, r2
2400322a:	d01d      	beq.n	24003268 <HAL_DMA_Init+0x174>
2400322c:	687b      	ldr	r3, [r7, #4]
2400322e:	681b      	ldr	r3, [r3, #0]
24003230:	4a28      	ldr	r2, [pc, #160]	; (240032d4 <HAL_DMA_Init+0x1e0>)
24003232:	4293      	cmp	r3, r2
24003234:	d018      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003236:	687b      	ldr	r3, [r7, #4]
24003238:	681b      	ldr	r3, [r3, #0]
2400323a:	4a27      	ldr	r2, [pc, #156]	; (240032d8 <HAL_DMA_Init+0x1e4>)
2400323c:	4293      	cmp	r3, r2
2400323e:	d013      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003240:	687b      	ldr	r3, [r7, #4]
24003242:	681b      	ldr	r3, [r3, #0]
24003244:	4a25      	ldr	r2, [pc, #148]	; (240032dc <HAL_DMA_Init+0x1e8>)
24003246:	4293      	cmp	r3, r2
24003248:	d00e      	beq.n	24003268 <HAL_DMA_Init+0x174>
2400324a:	687b      	ldr	r3, [r7, #4]
2400324c:	681b      	ldr	r3, [r3, #0]
2400324e:	4a24      	ldr	r2, [pc, #144]	; (240032e0 <HAL_DMA_Init+0x1ec>)
24003250:	4293      	cmp	r3, r2
24003252:	d009      	beq.n	24003268 <HAL_DMA_Init+0x174>
24003254:	687b      	ldr	r3, [r7, #4]
24003256:	681b      	ldr	r3, [r3, #0]
24003258:	4a22      	ldr	r2, [pc, #136]	; (240032e4 <HAL_DMA_Init+0x1f0>)
2400325a:	4293      	cmp	r3, r2
2400325c:	d004      	beq.n	24003268 <HAL_DMA_Init+0x174>
2400325e:	687b      	ldr	r3, [r7, #4]
24003260:	681b      	ldr	r3, [r3, #0]
24003262:	4a21      	ldr	r2, [pc, #132]	; (240032e8 <HAL_DMA_Init+0x1f4>)
24003264:	4293      	cmp	r3, r2
24003266:	d108      	bne.n	2400327a <HAL_DMA_Init+0x186>
24003268:	687b      	ldr	r3, [r7, #4]
2400326a:	681b      	ldr	r3, [r3, #0]
2400326c:	681a      	ldr	r2, [r3, #0]
2400326e:	687b      	ldr	r3, [r7, #4]
24003270:	681b      	ldr	r3, [r3, #0]
24003272:	f022 0201 	bic.w	r2, r2, #1
24003276:	601a      	str	r2, [r3, #0]
24003278:	e007      	b.n	2400328a <HAL_DMA_Init+0x196>
2400327a:	687b      	ldr	r3, [r7, #4]
2400327c:	681b      	ldr	r3, [r3, #0]
2400327e:	681a      	ldr	r2, [r3, #0]
24003280:	687b      	ldr	r3, [r7, #4]
24003282:	681b      	ldr	r3, [r3, #0]
24003284:	f022 0201 	bic.w	r2, r2, #1
24003288:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2400328a:	e02f      	b.n	240032ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400328c:	f7fe ffca 	bl	24002224 <HAL_GetTick>
24003290:	4602      	mov	r2, r0
24003292:	693b      	ldr	r3, [r7, #16]
24003294:	1ad3      	subs	r3, r2, r3
24003296:	2b05      	cmp	r3, #5
24003298:	d928      	bls.n	240032ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400329a:	687b      	ldr	r3, [r7, #4]
2400329c:	2220      	movs	r2, #32
2400329e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
240032a0:	687b      	ldr	r3, [r7, #4]
240032a2:	2203      	movs	r2, #3
240032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
240032a8:	2301      	movs	r3, #1
240032aa:	e246      	b.n	2400373a <HAL_DMA_Init+0x646>
240032ac:	40020010 	.word	0x40020010
240032b0:	40020028 	.word	0x40020028
240032b4:	40020040 	.word	0x40020040
240032b8:	40020058 	.word	0x40020058
240032bc:	40020070 	.word	0x40020070
240032c0:	40020088 	.word	0x40020088
240032c4:	400200a0 	.word	0x400200a0
240032c8:	400200b8 	.word	0x400200b8
240032cc:	40020410 	.word	0x40020410
240032d0:	40020428 	.word	0x40020428
240032d4:	40020440 	.word	0x40020440
240032d8:	40020458 	.word	0x40020458
240032dc:	40020470 	.word	0x40020470
240032e0:	40020488 	.word	0x40020488
240032e4:	400204a0 	.word	0x400204a0
240032e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240032ec:	687b      	ldr	r3, [r7, #4]
240032ee:	681b      	ldr	r3, [r3, #0]
240032f0:	681b      	ldr	r3, [r3, #0]
240032f2:	f003 0301 	and.w	r3, r3, #1
240032f6:	2b00      	cmp	r3, #0
240032f8:	d1c8      	bne.n	2400328c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
240032fa:	687b      	ldr	r3, [r7, #4]
240032fc:	681b      	ldr	r3, [r3, #0]
240032fe:	681b      	ldr	r3, [r3, #0]
24003300:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24003302:	697a      	ldr	r2, [r7, #20]
24003304:	4b83      	ldr	r3, [pc, #524]	; (24003514 <HAL_DMA_Init+0x420>)
24003306:	4013      	ands	r3, r2
24003308:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
2400330a:	687b      	ldr	r3, [r7, #4]
2400330c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400330e:	687b      	ldr	r3, [r7, #4]
24003310:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24003312:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003314:	687b      	ldr	r3, [r7, #4]
24003316:	691b      	ldr	r3, [r3, #16]
24003318:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2400331a:	687b      	ldr	r3, [r7, #4]
2400331c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400331e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003320:	687b      	ldr	r3, [r7, #4]
24003322:	699b      	ldr	r3, [r3, #24]
24003324:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24003326:	687b      	ldr	r3, [r7, #4]
24003328:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2400332a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
2400332c:	687b      	ldr	r3, [r7, #4]
2400332e:	6a1b      	ldr	r3, [r3, #32]
24003330:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24003332:	697a      	ldr	r2, [r7, #20]
24003334:	4313      	orrs	r3, r2
24003336:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003338:	687b      	ldr	r3, [r7, #4]
2400333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400333c:	2b04      	cmp	r3, #4
2400333e:	d107      	bne.n	24003350 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24003340:	687b      	ldr	r3, [r7, #4]
24003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24003344:	687b      	ldr	r3, [r7, #4]
24003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003348:	4313      	orrs	r3, r2
2400334a:	697a      	ldr	r2, [r7, #20]
2400334c:	4313      	orrs	r3, r2
2400334e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24003350:	4b71      	ldr	r3, [pc, #452]	; (24003518 <HAL_DMA_Init+0x424>)
24003352:	681a      	ldr	r2, [r3, #0]
24003354:	4b71      	ldr	r3, [pc, #452]	; (2400351c <HAL_DMA_Init+0x428>)
24003356:	4013      	ands	r3, r2
24003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400335c:	d328      	bcc.n	240033b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2400335e:	687b      	ldr	r3, [r7, #4]
24003360:	685b      	ldr	r3, [r3, #4]
24003362:	2b28      	cmp	r3, #40	; 0x28
24003364:	d903      	bls.n	2400336e <HAL_DMA_Init+0x27a>
24003366:	687b      	ldr	r3, [r7, #4]
24003368:	685b      	ldr	r3, [r3, #4]
2400336a:	2b2e      	cmp	r3, #46	; 0x2e
2400336c:	d917      	bls.n	2400339e <HAL_DMA_Init+0x2aa>
2400336e:	687b      	ldr	r3, [r7, #4]
24003370:	685b      	ldr	r3, [r3, #4]
24003372:	2b3e      	cmp	r3, #62	; 0x3e
24003374:	d903      	bls.n	2400337e <HAL_DMA_Init+0x28a>
24003376:	687b      	ldr	r3, [r7, #4]
24003378:	685b      	ldr	r3, [r3, #4]
2400337a:	2b42      	cmp	r3, #66	; 0x42
2400337c:	d90f      	bls.n	2400339e <HAL_DMA_Init+0x2aa>
2400337e:	687b      	ldr	r3, [r7, #4]
24003380:	685b      	ldr	r3, [r3, #4]
24003382:	2b46      	cmp	r3, #70	; 0x46
24003384:	d903      	bls.n	2400338e <HAL_DMA_Init+0x29a>
24003386:	687b      	ldr	r3, [r7, #4]
24003388:	685b      	ldr	r3, [r3, #4]
2400338a:	2b48      	cmp	r3, #72	; 0x48
2400338c:	d907      	bls.n	2400339e <HAL_DMA_Init+0x2aa>
2400338e:	687b      	ldr	r3, [r7, #4]
24003390:	685b      	ldr	r3, [r3, #4]
24003392:	2b4e      	cmp	r3, #78	; 0x4e
24003394:	d905      	bls.n	240033a2 <HAL_DMA_Init+0x2ae>
24003396:	687b      	ldr	r3, [r7, #4]
24003398:	685b      	ldr	r3, [r3, #4]
2400339a:	2b52      	cmp	r3, #82	; 0x52
2400339c:	d801      	bhi.n	240033a2 <HAL_DMA_Init+0x2ae>
2400339e:	2301      	movs	r3, #1
240033a0:	e000      	b.n	240033a4 <HAL_DMA_Init+0x2b0>
240033a2:	2300      	movs	r3, #0
240033a4:	2b00      	cmp	r3, #0
240033a6:	d003      	beq.n	240033b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
240033a8:	697b      	ldr	r3, [r7, #20]
240033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
240033ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240033b0:	687b      	ldr	r3, [r7, #4]
240033b2:	681b      	ldr	r3, [r3, #0]
240033b4:	697a      	ldr	r2, [r7, #20]
240033b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240033b8:	687b      	ldr	r3, [r7, #4]
240033ba:	681b      	ldr	r3, [r3, #0]
240033bc:	695b      	ldr	r3, [r3, #20]
240033be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240033c0:	697b      	ldr	r3, [r7, #20]
240033c2:	f023 0307 	bic.w	r3, r3, #7
240033c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
240033c8:	687b      	ldr	r3, [r7, #4]
240033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240033cc:	697a      	ldr	r2, [r7, #20]
240033ce:	4313      	orrs	r3, r2
240033d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240033d2:	687b      	ldr	r3, [r7, #4]
240033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240033d6:	2b04      	cmp	r3, #4
240033d8:	d117      	bne.n	2400340a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
240033da:	687b      	ldr	r3, [r7, #4]
240033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240033de:	697a      	ldr	r2, [r7, #20]
240033e0:	4313      	orrs	r3, r2
240033e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240033e4:	687b      	ldr	r3, [r7, #4]
240033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240033e8:	2b00      	cmp	r3, #0
240033ea:	d00e      	beq.n	2400340a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
240033ec:	6878      	ldr	r0, [r7, #4]
240033ee:	f003 fa95 	bl	2400691c <DMA_CheckFifoParam>
240033f2:	4603      	mov	r3, r0
240033f4:	2b00      	cmp	r3, #0
240033f6:	d008      	beq.n	2400340a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240033f8:	687b      	ldr	r3, [r7, #4]
240033fa:	2240      	movs	r2, #64	; 0x40
240033fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240033fe:	687b      	ldr	r3, [r7, #4]
24003400:	2201      	movs	r2, #1
24003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
24003406:	2301      	movs	r3, #1
24003408:	e197      	b.n	2400373a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
2400340a:	687b      	ldr	r3, [r7, #4]
2400340c:	681b      	ldr	r3, [r3, #0]
2400340e:	697a      	ldr	r2, [r7, #20]
24003410:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003412:	6878      	ldr	r0, [r7, #4]
24003414:	f003 f9d0 	bl	240067b8 <DMA_CalcBaseAndBitshift>
24003418:	4603      	mov	r3, r0
2400341a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400341c:	687b      	ldr	r3, [r7, #4]
2400341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003420:	f003 031f 	and.w	r3, r3, #31
24003424:	223f      	movs	r2, #63	; 0x3f
24003426:	409a      	lsls	r2, r3
24003428:	68bb      	ldr	r3, [r7, #8]
2400342a:	609a      	str	r2, [r3, #8]
2400342c:	e0cd      	b.n	240035ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400342e:	687b      	ldr	r3, [r7, #4]
24003430:	681b      	ldr	r3, [r3, #0]
24003432:	4a3b      	ldr	r2, [pc, #236]	; (24003520 <HAL_DMA_Init+0x42c>)
24003434:	4293      	cmp	r3, r2
24003436:	d022      	beq.n	2400347e <HAL_DMA_Init+0x38a>
24003438:	687b      	ldr	r3, [r7, #4]
2400343a:	681b      	ldr	r3, [r3, #0]
2400343c:	4a39      	ldr	r2, [pc, #228]	; (24003524 <HAL_DMA_Init+0x430>)
2400343e:	4293      	cmp	r3, r2
24003440:	d01d      	beq.n	2400347e <HAL_DMA_Init+0x38a>
24003442:	687b      	ldr	r3, [r7, #4]
24003444:	681b      	ldr	r3, [r3, #0]
24003446:	4a38      	ldr	r2, [pc, #224]	; (24003528 <HAL_DMA_Init+0x434>)
24003448:	4293      	cmp	r3, r2
2400344a:	d018      	beq.n	2400347e <HAL_DMA_Init+0x38a>
2400344c:	687b      	ldr	r3, [r7, #4]
2400344e:	681b      	ldr	r3, [r3, #0]
24003450:	4a36      	ldr	r2, [pc, #216]	; (2400352c <HAL_DMA_Init+0x438>)
24003452:	4293      	cmp	r3, r2
24003454:	d013      	beq.n	2400347e <HAL_DMA_Init+0x38a>
24003456:	687b      	ldr	r3, [r7, #4]
24003458:	681b      	ldr	r3, [r3, #0]
2400345a:	4a35      	ldr	r2, [pc, #212]	; (24003530 <HAL_DMA_Init+0x43c>)
2400345c:	4293      	cmp	r3, r2
2400345e:	d00e      	beq.n	2400347e <HAL_DMA_Init+0x38a>
24003460:	687b      	ldr	r3, [r7, #4]
24003462:	681b      	ldr	r3, [r3, #0]
24003464:	4a33      	ldr	r2, [pc, #204]	; (24003534 <HAL_DMA_Init+0x440>)
24003466:	4293      	cmp	r3, r2
24003468:	d009      	beq.n	2400347e <HAL_DMA_Init+0x38a>
2400346a:	687b      	ldr	r3, [r7, #4]
2400346c:	681b      	ldr	r3, [r3, #0]
2400346e:	4a32      	ldr	r2, [pc, #200]	; (24003538 <HAL_DMA_Init+0x444>)
24003470:	4293      	cmp	r3, r2
24003472:	d004      	beq.n	2400347e <HAL_DMA_Init+0x38a>
24003474:	687b      	ldr	r3, [r7, #4]
24003476:	681b      	ldr	r3, [r3, #0]
24003478:	4a30      	ldr	r2, [pc, #192]	; (2400353c <HAL_DMA_Init+0x448>)
2400347a:	4293      	cmp	r3, r2
2400347c:	d101      	bne.n	24003482 <HAL_DMA_Init+0x38e>
2400347e:	2301      	movs	r3, #1
24003480:	e000      	b.n	24003484 <HAL_DMA_Init+0x390>
24003482:	2300      	movs	r3, #0
24003484:	2b00      	cmp	r3, #0
24003486:	f000 8097 	beq.w	240035b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400348a:	687b      	ldr	r3, [r7, #4]
2400348c:	681b      	ldr	r3, [r3, #0]
2400348e:	4a24      	ldr	r2, [pc, #144]	; (24003520 <HAL_DMA_Init+0x42c>)
24003490:	4293      	cmp	r3, r2
24003492:	d021      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
24003494:	687b      	ldr	r3, [r7, #4]
24003496:	681b      	ldr	r3, [r3, #0]
24003498:	4a22      	ldr	r2, [pc, #136]	; (24003524 <HAL_DMA_Init+0x430>)
2400349a:	4293      	cmp	r3, r2
2400349c:	d01c      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
2400349e:	687b      	ldr	r3, [r7, #4]
240034a0:	681b      	ldr	r3, [r3, #0]
240034a2:	4a21      	ldr	r2, [pc, #132]	; (24003528 <HAL_DMA_Init+0x434>)
240034a4:	4293      	cmp	r3, r2
240034a6:	d017      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
240034a8:	687b      	ldr	r3, [r7, #4]
240034aa:	681b      	ldr	r3, [r3, #0]
240034ac:	4a1f      	ldr	r2, [pc, #124]	; (2400352c <HAL_DMA_Init+0x438>)
240034ae:	4293      	cmp	r3, r2
240034b0:	d012      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
240034b2:	687b      	ldr	r3, [r7, #4]
240034b4:	681b      	ldr	r3, [r3, #0]
240034b6:	4a1e      	ldr	r2, [pc, #120]	; (24003530 <HAL_DMA_Init+0x43c>)
240034b8:	4293      	cmp	r3, r2
240034ba:	d00d      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
240034bc:	687b      	ldr	r3, [r7, #4]
240034be:	681b      	ldr	r3, [r3, #0]
240034c0:	4a1c      	ldr	r2, [pc, #112]	; (24003534 <HAL_DMA_Init+0x440>)
240034c2:	4293      	cmp	r3, r2
240034c4:	d008      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
240034c6:	687b      	ldr	r3, [r7, #4]
240034c8:	681b      	ldr	r3, [r3, #0]
240034ca:	4a1b      	ldr	r2, [pc, #108]	; (24003538 <HAL_DMA_Init+0x444>)
240034cc:	4293      	cmp	r3, r2
240034ce:	d003      	beq.n	240034d8 <HAL_DMA_Init+0x3e4>
240034d0:	687b      	ldr	r3, [r7, #4]
240034d2:	681b      	ldr	r3, [r3, #0]
240034d4:	4a19      	ldr	r2, [pc, #100]	; (2400353c <HAL_DMA_Init+0x448>)
240034d6:	4293      	cmp	r3, r2
240034d8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240034da:	687b      	ldr	r3, [r7, #4]
240034dc:	2202      	movs	r2, #2
240034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240034e2:	687b      	ldr	r3, [r7, #4]
240034e4:	2200      	movs	r2, #0
240034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240034ea:	687b      	ldr	r3, [r7, #4]
240034ec:	681b      	ldr	r3, [r3, #0]
240034ee:	681b      	ldr	r3, [r3, #0]
240034f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240034f2:	697a      	ldr	r2, [r7, #20]
240034f4:	4b12      	ldr	r3, [pc, #72]	; (24003540 <HAL_DMA_Init+0x44c>)
240034f6:	4013      	ands	r3, r2
240034f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240034fa:	687b      	ldr	r3, [r7, #4]
240034fc:	689b      	ldr	r3, [r3, #8]
240034fe:	2b40      	cmp	r3, #64	; 0x40
24003500:	d020      	beq.n	24003544 <HAL_DMA_Init+0x450>
24003502:	687b      	ldr	r3, [r7, #4]
24003504:	689b      	ldr	r3, [r3, #8]
24003506:	2b80      	cmp	r3, #128	; 0x80
24003508:	d102      	bne.n	24003510 <HAL_DMA_Init+0x41c>
2400350a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400350e:	e01a      	b.n	24003546 <HAL_DMA_Init+0x452>
24003510:	2300      	movs	r3, #0
24003512:	e018      	b.n	24003546 <HAL_DMA_Init+0x452>
24003514:	fe10803f 	.word	0xfe10803f
24003518:	5c001000 	.word	0x5c001000
2400351c:	ffff0000 	.word	0xffff0000
24003520:	58025408 	.word	0x58025408
24003524:	5802541c 	.word	0x5802541c
24003528:	58025430 	.word	0x58025430
2400352c:	58025444 	.word	0x58025444
24003530:	58025458 	.word	0x58025458
24003534:	5802546c 	.word	0x5802546c
24003538:	58025480 	.word	0x58025480
2400353c:	58025494 	.word	0x58025494
24003540:	fffe000f 	.word	0xfffe000f
24003544:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24003546:	687a      	ldr	r2, [r7, #4]
24003548:	68d2      	ldr	r2, [r2, #12]
2400354a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400354c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2400354e:	687b      	ldr	r3, [r7, #4]
24003550:	691b      	ldr	r3, [r3, #16]
24003552:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24003554:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24003556:	687b      	ldr	r3, [r7, #4]
24003558:	695b      	ldr	r3, [r3, #20]
2400355a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2400355c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2400355e:	687b      	ldr	r3, [r7, #4]
24003560:	699b      	ldr	r3, [r3, #24]
24003562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24003564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24003566:	687b      	ldr	r3, [r7, #4]
24003568:	69db      	ldr	r3, [r3, #28]
2400356a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2400356c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
2400356e:	687b      	ldr	r3, [r7, #4]
24003570:	6a1b      	ldr	r3, [r3, #32]
24003572:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24003574:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003576:	697a      	ldr	r2, [r7, #20]
24003578:	4313      	orrs	r3, r2
2400357a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
2400357c:	687b      	ldr	r3, [r7, #4]
2400357e:	681b      	ldr	r3, [r3, #0]
24003580:	697a      	ldr	r2, [r7, #20]
24003582:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24003584:	687b      	ldr	r3, [r7, #4]
24003586:	681b      	ldr	r3, [r3, #0]
24003588:	461a      	mov	r2, r3
2400358a:	4b6e      	ldr	r3, [pc, #440]	; (24003744 <HAL_DMA_Init+0x650>)
2400358c:	4413      	add	r3, r2
2400358e:	4a6e      	ldr	r2, [pc, #440]	; (24003748 <HAL_DMA_Init+0x654>)
24003590:	fba2 2303 	umull	r2, r3, r2, r3
24003594:	091b      	lsrs	r3, r3, #4
24003596:	009a      	lsls	r2, r3, #2
24003598:	687b      	ldr	r3, [r7, #4]
2400359a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400359c:	6878      	ldr	r0, [r7, #4]
2400359e:	f003 f90b 	bl	240067b8 <DMA_CalcBaseAndBitshift>
240035a2:	4603      	mov	r3, r0
240035a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240035a6:	687b      	ldr	r3, [r7, #4]
240035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240035aa:	f003 031f 	and.w	r3, r3, #31
240035ae:	2201      	movs	r2, #1
240035b0:	409a      	lsls	r2, r3
240035b2:	68fb      	ldr	r3, [r7, #12]
240035b4:	605a      	str	r2, [r3, #4]
240035b6:	e008      	b.n	240035ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240035b8:	687b      	ldr	r3, [r7, #4]
240035ba:	2240      	movs	r2, #64	; 0x40
240035bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240035be:	687b      	ldr	r3, [r7, #4]
240035c0:	2203      	movs	r2, #3
240035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
240035c6:	2301      	movs	r3, #1
240035c8:	e0b7      	b.n	2400373a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240035ca:	687b      	ldr	r3, [r7, #4]
240035cc:	681b      	ldr	r3, [r3, #0]
240035ce:	4a5f      	ldr	r2, [pc, #380]	; (2400374c <HAL_DMA_Init+0x658>)
240035d0:	4293      	cmp	r3, r2
240035d2:	d072      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240035d4:	687b      	ldr	r3, [r7, #4]
240035d6:	681b      	ldr	r3, [r3, #0]
240035d8:	4a5d      	ldr	r2, [pc, #372]	; (24003750 <HAL_DMA_Init+0x65c>)
240035da:	4293      	cmp	r3, r2
240035dc:	d06d      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240035de:	687b      	ldr	r3, [r7, #4]
240035e0:	681b      	ldr	r3, [r3, #0]
240035e2:	4a5c      	ldr	r2, [pc, #368]	; (24003754 <HAL_DMA_Init+0x660>)
240035e4:	4293      	cmp	r3, r2
240035e6:	d068      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240035e8:	687b      	ldr	r3, [r7, #4]
240035ea:	681b      	ldr	r3, [r3, #0]
240035ec:	4a5a      	ldr	r2, [pc, #360]	; (24003758 <HAL_DMA_Init+0x664>)
240035ee:	4293      	cmp	r3, r2
240035f0:	d063      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240035f2:	687b      	ldr	r3, [r7, #4]
240035f4:	681b      	ldr	r3, [r3, #0]
240035f6:	4a59      	ldr	r2, [pc, #356]	; (2400375c <HAL_DMA_Init+0x668>)
240035f8:	4293      	cmp	r3, r2
240035fa:	d05e      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240035fc:	687b      	ldr	r3, [r7, #4]
240035fe:	681b      	ldr	r3, [r3, #0]
24003600:	4a57      	ldr	r2, [pc, #348]	; (24003760 <HAL_DMA_Init+0x66c>)
24003602:	4293      	cmp	r3, r2
24003604:	d059      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003606:	687b      	ldr	r3, [r7, #4]
24003608:	681b      	ldr	r3, [r3, #0]
2400360a:	4a56      	ldr	r2, [pc, #344]	; (24003764 <HAL_DMA_Init+0x670>)
2400360c:	4293      	cmp	r3, r2
2400360e:	d054      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003610:	687b      	ldr	r3, [r7, #4]
24003612:	681b      	ldr	r3, [r3, #0]
24003614:	4a54      	ldr	r2, [pc, #336]	; (24003768 <HAL_DMA_Init+0x674>)
24003616:	4293      	cmp	r3, r2
24003618:	d04f      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400361a:	687b      	ldr	r3, [r7, #4]
2400361c:	681b      	ldr	r3, [r3, #0]
2400361e:	4a53      	ldr	r2, [pc, #332]	; (2400376c <HAL_DMA_Init+0x678>)
24003620:	4293      	cmp	r3, r2
24003622:	d04a      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003624:	687b      	ldr	r3, [r7, #4]
24003626:	681b      	ldr	r3, [r3, #0]
24003628:	4a51      	ldr	r2, [pc, #324]	; (24003770 <HAL_DMA_Init+0x67c>)
2400362a:	4293      	cmp	r3, r2
2400362c:	d045      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400362e:	687b      	ldr	r3, [r7, #4]
24003630:	681b      	ldr	r3, [r3, #0]
24003632:	4a50      	ldr	r2, [pc, #320]	; (24003774 <HAL_DMA_Init+0x680>)
24003634:	4293      	cmp	r3, r2
24003636:	d040      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003638:	687b      	ldr	r3, [r7, #4]
2400363a:	681b      	ldr	r3, [r3, #0]
2400363c:	4a4e      	ldr	r2, [pc, #312]	; (24003778 <HAL_DMA_Init+0x684>)
2400363e:	4293      	cmp	r3, r2
24003640:	d03b      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003642:	687b      	ldr	r3, [r7, #4]
24003644:	681b      	ldr	r3, [r3, #0]
24003646:	4a4d      	ldr	r2, [pc, #308]	; (2400377c <HAL_DMA_Init+0x688>)
24003648:	4293      	cmp	r3, r2
2400364a:	d036      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400364c:	687b      	ldr	r3, [r7, #4]
2400364e:	681b      	ldr	r3, [r3, #0]
24003650:	4a4b      	ldr	r2, [pc, #300]	; (24003780 <HAL_DMA_Init+0x68c>)
24003652:	4293      	cmp	r3, r2
24003654:	d031      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003656:	687b      	ldr	r3, [r7, #4]
24003658:	681b      	ldr	r3, [r3, #0]
2400365a:	4a4a      	ldr	r2, [pc, #296]	; (24003784 <HAL_DMA_Init+0x690>)
2400365c:	4293      	cmp	r3, r2
2400365e:	d02c      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003660:	687b      	ldr	r3, [r7, #4]
24003662:	681b      	ldr	r3, [r3, #0]
24003664:	4a48      	ldr	r2, [pc, #288]	; (24003788 <HAL_DMA_Init+0x694>)
24003666:	4293      	cmp	r3, r2
24003668:	d027      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400366a:	687b      	ldr	r3, [r7, #4]
2400366c:	681b      	ldr	r3, [r3, #0]
2400366e:	4a47      	ldr	r2, [pc, #284]	; (2400378c <HAL_DMA_Init+0x698>)
24003670:	4293      	cmp	r3, r2
24003672:	d022      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003674:	687b      	ldr	r3, [r7, #4]
24003676:	681b      	ldr	r3, [r3, #0]
24003678:	4a45      	ldr	r2, [pc, #276]	; (24003790 <HAL_DMA_Init+0x69c>)
2400367a:	4293      	cmp	r3, r2
2400367c:	d01d      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400367e:	687b      	ldr	r3, [r7, #4]
24003680:	681b      	ldr	r3, [r3, #0]
24003682:	4a44      	ldr	r2, [pc, #272]	; (24003794 <HAL_DMA_Init+0x6a0>)
24003684:	4293      	cmp	r3, r2
24003686:	d018      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003688:	687b      	ldr	r3, [r7, #4]
2400368a:	681b      	ldr	r3, [r3, #0]
2400368c:	4a42      	ldr	r2, [pc, #264]	; (24003798 <HAL_DMA_Init+0x6a4>)
2400368e:	4293      	cmp	r3, r2
24003690:	d013      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
24003692:	687b      	ldr	r3, [r7, #4]
24003694:	681b      	ldr	r3, [r3, #0]
24003696:	4a41      	ldr	r2, [pc, #260]	; (2400379c <HAL_DMA_Init+0x6a8>)
24003698:	4293      	cmp	r3, r2
2400369a:	d00e      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
2400369c:	687b      	ldr	r3, [r7, #4]
2400369e:	681b      	ldr	r3, [r3, #0]
240036a0:	4a3f      	ldr	r2, [pc, #252]	; (240037a0 <HAL_DMA_Init+0x6ac>)
240036a2:	4293      	cmp	r3, r2
240036a4:	d009      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240036a6:	687b      	ldr	r3, [r7, #4]
240036a8:	681b      	ldr	r3, [r3, #0]
240036aa:	4a3e      	ldr	r2, [pc, #248]	; (240037a4 <HAL_DMA_Init+0x6b0>)
240036ac:	4293      	cmp	r3, r2
240036ae:	d004      	beq.n	240036ba <HAL_DMA_Init+0x5c6>
240036b0:	687b      	ldr	r3, [r7, #4]
240036b2:	681b      	ldr	r3, [r3, #0]
240036b4:	4a3c      	ldr	r2, [pc, #240]	; (240037a8 <HAL_DMA_Init+0x6b4>)
240036b6:	4293      	cmp	r3, r2
240036b8:	d101      	bne.n	240036be <HAL_DMA_Init+0x5ca>
240036ba:	2301      	movs	r3, #1
240036bc:	e000      	b.n	240036c0 <HAL_DMA_Init+0x5cc>
240036be:	2300      	movs	r3, #0
240036c0:	2b00      	cmp	r3, #0
240036c2:	d032      	beq.n	2400372a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240036c4:	6878      	ldr	r0, [r7, #4]
240036c6:	f003 f9a5 	bl	24006a14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240036ca:	687b      	ldr	r3, [r7, #4]
240036cc:	689b      	ldr	r3, [r3, #8]
240036ce:	2b80      	cmp	r3, #128	; 0x80
240036d0:	d102      	bne.n	240036d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240036d2:	687b      	ldr	r3, [r7, #4]
240036d4:	2200      	movs	r2, #0
240036d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240036d8:	687b      	ldr	r3, [r7, #4]
240036da:	685a      	ldr	r2, [r3, #4]
240036dc:	687b      	ldr	r3, [r7, #4]
240036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240036e0:	b2d2      	uxtb	r2, r2
240036e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240036e4:	687b      	ldr	r3, [r7, #4]
240036e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240036e8:	687a      	ldr	r2, [r7, #4]
240036ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
240036ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240036ee:	687b      	ldr	r3, [r7, #4]
240036f0:	685b      	ldr	r3, [r3, #4]
240036f2:	2b00      	cmp	r3, #0
240036f4:	d010      	beq.n	24003718 <HAL_DMA_Init+0x624>
240036f6:	687b      	ldr	r3, [r7, #4]
240036f8:	685b      	ldr	r3, [r3, #4]
240036fa:	2b08      	cmp	r3, #8
240036fc:	d80c      	bhi.n	24003718 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240036fe:	6878      	ldr	r0, [r7, #4]
24003700:	f003 fa22 	bl	24006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24003704:	687b      	ldr	r3, [r7, #4]
24003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003708:	2200      	movs	r2, #0
2400370a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400370c:	687b      	ldr	r3, [r7, #4]
2400370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24003710:	687a      	ldr	r2, [r7, #4]
24003712:	6f52      	ldr	r2, [r2, #116]	; 0x74
24003714:	605a      	str	r2, [r3, #4]
24003716:	e008      	b.n	2400372a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
24003718:	687b      	ldr	r3, [r7, #4]
2400371a:	2200      	movs	r2, #0
2400371c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
2400371e:	687b      	ldr	r3, [r7, #4]
24003720:	2200      	movs	r2, #0
24003722:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
24003724:	687b      	ldr	r3, [r7, #4]
24003726:	2200      	movs	r2, #0
24003728:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400372a:	687b      	ldr	r3, [r7, #4]
2400372c:	2200      	movs	r2, #0
2400372e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24003730:	687b      	ldr	r3, [r7, #4]
24003732:	2201      	movs	r2, #1
24003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
24003738:	2300      	movs	r3, #0
}
2400373a:	4618      	mov	r0, r3
2400373c:	3718      	adds	r7, #24
2400373e:	46bd      	mov	sp, r7
24003740:	bd80      	pop	{r7, pc}
24003742:	bf00      	nop
24003744:	a7fdabf8 	.word	0xa7fdabf8
24003748:	cccccccd 	.word	0xcccccccd
2400374c:	40020010 	.word	0x40020010
24003750:	40020028 	.word	0x40020028
24003754:	40020040 	.word	0x40020040
24003758:	40020058 	.word	0x40020058
2400375c:	40020070 	.word	0x40020070
24003760:	40020088 	.word	0x40020088
24003764:	400200a0 	.word	0x400200a0
24003768:	400200b8 	.word	0x400200b8
2400376c:	40020410 	.word	0x40020410
24003770:	40020428 	.word	0x40020428
24003774:	40020440 	.word	0x40020440
24003778:	40020458 	.word	0x40020458
2400377c:	40020470 	.word	0x40020470
24003780:	40020488 	.word	0x40020488
24003784:	400204a0 	.word	0x400204a0
24003788:	400204b8 	.word	0x400204b8
2400378c:	58025408 	.word	0x58025408
24003790:	5802541c 	.word	0x5802541c
24003794:	58025430 	.word	0x58025430
24003798:	58025444 	.word	0x58025444
2400379c:	58025458 	.word	0x58025458
240037a0:	5802546c 	.word	0x5802546c
240037a4:	58025480 	.word	0x58025480
240037a8:	58025494 	.word	0x58025494

240037ac <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
240037ac:	b580      	push	{r7, lr}
240037ae:	b084      	sub	sp, #16
240037b0:	af00      	add	r7, sp, #0
240037b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240037b4:	687b      	ldr	r3, [r7, #4]
240037b6:	2b00      	cmp	r3, #0
240037b8:	d101      	bne.n	240037be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
240037ba:	2301      	movs	r3, #1
240037bc:	e1a8      	b.n	24003b10 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
240037be:	687b      	ldr	r3, [r7, #4]
240037c0:	681b      	ldr	r3, [r3, #0]
240037c2:	4a82      	ldr	r2, [pc, #520]	; (240039cc <HAL_DMA_DeInit+0x220>)
240037c4:	4293      	cmp	r3, r2
240037c6:	d04a      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037c8:	687b      	ldr	r3, [r7, #4]
240037ca:	681b      	ldr	r3, [r3, #0]
240037cc:	4a80      	ldr	r2, [pc, #512]	; (240039d0 <HAL_DMA_DeInit+0x224>)
240037ce:	4293      	cmp	r3, r2
240037d0:	d045      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037d2:	687b      	ldr	r3, [r7, #4]
240037d4:	681b      	ldr	r3, [r3, #0]
240037d6:	4a7f      	ldr	r2, [pc, #508]	; (240039d4 <HAL_DMA_DeInit+0x228>)
240037d8:	4293      	cmp	r3, r2
240037da:	d040      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037dc:	687b      	ldr	r3, [r7, #4]
240037de:	681b      	ldr	r3, [r3, #0]
240037e0:	4a7d      	ldr	r2, [pc, #500]	; (240039d8 <HAL_DMA_DeInit+0x22c>)
240037e2:	4293      	cmp	r3, r2
240037e4:	d03b      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037e6:	687b      	ldr	r3, [r7, #4]
240037e8:	681b      	ldr	r3, [r3, #0]
240037ea:	4a7c      	ldr	r2, [pc, #496]	; (240039dc <HAL_DMA_DeInit+0x230>)
240037ec:	4293      	cmp	r3, r2
240037ee:	d036      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037f0:	687b      	ldr	r3, [r7, #4]
240037f2:	681b      	ldr	r3, [r3, #0]
240037f4:	4a7a      	ldr	r2, [pc, #488]	; (240039e0 <HAL_DMA_DeInit+0x234>)
240037f6:	4293      	cmp	r3, r2
240037f8:	d031      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
240037fa:	687b      	ldr	r3, [r7, #4]
240037fc:	681b      	ldr	r3, [r3, #0]
240037fe:	4a79      	ldr	r2, [pc, #484]	; (240039e4 <HAL_DMA_DeInit+0x238>)
24003800:	4293      	cmp	r3, r2
24003802:	d02c      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003804:	687b      	ldr	r3, [r7, #4]
24003806:	681b      	ldr	r3, [r3, #0]
24003808:	4a77      	ldr	r2, [pc, #476]	; (240039e8 <HAL_DMA_DeInit+0x23c>)
2400380a:	4293      	cmp	r3, r2
2400380c:	d027      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
2400380e:	687b      	ldr	r3, [r7, #4]
24003810:	681b      	ldr	r3, [r3, #0]
24003812:	4a76      	ldr	r2, [pc, #472]	; (240039ec <HAL_DMA_DeInit+0x240>)
24003814:	4293      	cmp	r3, r2
24003816:	d022      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003818:	687b      	ldr	r3, [r7, #4]
2400381a:	681b      	ldr	r3, [r3, #0]
2400381c:	4a74      	ldr	r2, [pc, #464]	; (240039f0 <HAL_DMA_DeInit+0x244>)
2400381e:	4293      	cmp	r3, r2
24003820:	d01d      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003822:	687b      	ldr	r3, [r7, #4]
24003824:	681b      	ldr	r3, [r3, #0]
24003826:	4a73      	ldr	r2, [pc, #460]	; (240039f4 <HAL_DMA_DeInit+0x248>)
24003828:	4293      	cmp	r3, r2
2400382a:	d018      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
2400382c:	687b      	ldr	r3, [r7, #4]
2400382e:	681b      	ldr	r3, [r3, #0]
24003830:	4a71      	ldr	r2, [pc, #452]	; (240039f8 <HAL_DMA_DeInit+0x24c>)
24003832:	4293      	cmp	r3, r2
24003834:	d013      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003836:	687b      	ldr	r3, [r7, #4]
24003838:	681b      	ldr	r3, [r3, #0]
2400383a:	4a70      	ldr	r2, [pc, #448]	; (240039fc <HAL_DMA_DeInit+0x250>)
2400383c:	4293      	cmp	r3, r2
2400383e:	d00e      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003840:	687b      	ldr	r3, [r7, #4]
24003842:	681b      	ldr	r3, [r3, #0]
24003844:	4a6e      	ldr	r2, [pc, #440]	; (24003a00 <HAL_DMA_DeInit+0x254>)
24003846:	4293      	cmp	r3, r2
24003848:	d009      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
2400384a:	687b      	ldr	r3, [r7, #4]
2400384c:	681b      	ldr	r3, [r3, #0]
2400384e:	4a6d      	ldr	r2, [pc, #436]	; (24003a04 <HAL_DMA_DeInit+0x258>)
24003850:	4293      	cmp	r3, r2
24003852:	d004      	beq.n	2400385e <HAL_DMA_DeInit+0xb2>
24003854:	687b      	ldr	r3, [r7, #4]
24003856:	681b      	ldr	r3, [r3, #0]
24003858:	4a6b      	ldr	r2, [pc, #428]	; (24003a08 <HAL_DMA_DeInit+0x25c>)
2400385a:	4293      	cmp	r3, r2
2400385c:	d108      	bne.n	24003870 <HAL_DMA_DeInit+0xc4>
2400385e:	687b      	ldr	r3, [r7, #4]
24003860:	681b      	ldr	r3, [r3, #0]
24003862:	681a      	ldr	r2, [r3, #0]
24003864:	687b      	ldr	r3, [r7, #4]
24003866:	681b      	ldr	r3, [r3, #0]
24003868:	f022 0201 	bic.w	r2, r2, #1
2400386c:	601a      	str	r2, [r3, #0]
2400386e:	e007      	b.n	24003880 <HAL_DMA_DeInit+0xd4>
24003870:	687b      	ldr	r3, [r7, #4]
24003872:	681b      	ldr	r3, [r3, #0]
24003874:	681a      	ldr	r2, [r3, #0]
24003876:	687b      	ldr	r3, [r7, #4]
24003878:	681b      	ldr	r3, [r3, #0]
2400387a:	f022 0201 	bic.w	r2, r2, #1
2400387e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003880:	687b      	ldr	r3, [r7, #4]
24003882:	681b      	ldr	r3, [r3, #0]
24003884:	4a51      	ldr	r2, [pc, #324]	; (240039cc <HAL_DMA_DeInit+0x220>)
24003886:	4293      	cmp	r3, r2
24003888:	d04a      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
2400388a:	687b      	ldr	r3, [r7, #4]
2400388c:	681b      	ldr	r3, [r3, #0]
2400388e:	4a50      	ldr	r2, [pc, #320]	; (240039d0 <HAL_DMA_DeInit+0x224>)
24003890:	4293      	cmp	r3, r2
24003892:	d045      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
24003894:	687b      	ldr	r3, [r7, #4]
24003896:	681b      	ldr	r3, [r3, #0]
24003898:	4a4e      	ldr	r2, [pc, #312]	; (240039d4 <HAL_DMA_DeInit+0x228>)
2400389a:	4293      	cmp	r3, r2
2400389c:	d040      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
2400389e:	687b      	ldr	r3, [r7, #4]
240038a0:	681b      	ldr	r3, [r3, #0]
240038a2:	4a4d      	ldr	r2, [pc, #308]	; (240039d8 <HAL_DMA_DeInit+0x22c>)
240038a4:	4293      	cmp	r3, r2
240038a6:	d03b      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038a8:	687b      	ldr	r3, [r7, #4]
240038aa:	681b      	ldr	r3, [r3, #0]
240038ac:	4a4b      	ldr	r2, [pc, #300]	; (240039dc <HAL_DMA_DeInit+0x230>)
240038ae:	4293      	cmp	r3, r2
240038b0:	d036      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038b2:	687b      	ldr	r3, [r7, #4]
240038b4:	681b      	ldr	r3, [r3, #0]
240038b6:	4a4a      	ldr	r2, [pc, #296]	; (240039e0 <HAL_DMA_DeInit+0x234>)
240038b8:	4293      	cmp	r3, r2
240038ba:	d031      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038bc:	687b      	ldr	r3, [r7, #4]
240038be:	681b      	ldr	r3, [r3, #0]
240038c0:	4a48      	ldr	r2, [pc, #288]	; (240039e4 <HAL_DMA_DeInit+0x238>)
240038c2:	4293      	cmp	r3, r2
240038c4:	d02c      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038c6:	687b      	ldr	r3, [r7, #4]
240038c8:	681b      	ldr	r3, [r3, #0]
240038ca:	4a47      	ldr	r2, [pc, #284]	; (240039e8 <HAL_DMA_DeInit+0x23c>)
240038cc:	4293      	cmp	r3, r2
240038ce:	d027      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038d0:	687b      	ldr	r3, [r7, #4]
240038d2:	681b      	ldr	r3, [r3, #0]
240038d4:	4a45      	ldr	r2, [pc, #276]	; (240039ec <HAL_DMA_DeInit+0x240>)
240038d6:	4293      	cmp	r3, r2
240038d8:	d022      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038da:	687b      	ldr	r3, [r7, #4]
240038dc:	681b      	ldr	r3, [r3, #0]
240038de:	4a44      	ldr	r2, [pc, #272]	; (240039f0 <HAL_DMA_DeInit+0x244>)
240038e0:	4293      	cmp	r3, r2
240038e2:	d01d      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038e4:	687b      	ldr	r3, [r7, #4]
240038e6:	681b      	ldr	r3, [r3, #0]
240038e8:	4a42      	ldr	r2, [pc, #264]	; (240039f4 <HAL_DMA_DeInit+0x248>)
240038ea:	4293      	cmp	r3, r2
240038ec:	d018      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038ee:	687b      	ldr	r3, [r7, #4]
240038f0:	681b      	ldr	r3, [r3, #0]
240038f2:	4a41      	ldr	r2, [pc, #260]	; (240039f8 <HAL_DMA_DeInit+0x24c>)
240038f4:	4293      	cmp	r3, r2
240038f6:	d013      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
240038f8:	687b      	ldr	r3, [r7, #4]
240038fa:	681b      	ldr	r3, [r3, #0]
240038fc:	4a3f      	ldr	r2, [pc, #252]	; (240039fc <HAL_DMA_DeInit+0x250>)
240038fe:	4293      	cmp	r3, r2
24003900:	d00e      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
24003902:	687b      	ldr	r3, [r7, #4]
24003904:	681b      	ldr	r3, [r3, #0]
24003906:	4a3e      	ldr	r2, [pc, #248]	; (24003a00 <HAL_DMA_DeInit+0x254>)
24003908:	4293      	cmp	r3, r2
2400390a:	d009      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
2400390c:	687b      	ldr	r3, [r7, #4]
2400390e:	681b      	ldr	r3, [r3, #0]
24003910:	4a3c      	ldr	r2, [pc, #240]	; (24003a04 <HAL_DMA_DeInit+0x258>)
24003912:	4293      	cmp	r3, r2
24003914:	d004      	beq.n	24003920 <HAL_DMA_DeInit+0x174>
24003916:	687b      	ldr	r3, [r7, #4]
24003918:	681b      	ldr	r3, [r3, #0]
2400391a:	4a3b      	ldr	r2, [pc, #236]	; (24003a08 <HAL_DMA_DeInit+0x25c>)
2400391c:	4293      	cmp	r3, r2
2400391e:	d101      	bne.n	24003924 <HAL_DMA_DeInit+0x178>
24003920:	2301      	movs	r3, #1
24003922:	e000      	b.n	24003926 <HAL_DMA_DeInit+0x17a>
24003924:	2300      	movs	r3, #0
24003926:	2b00      	cmp	r3, #0
24003928:	d025      	beq.n	24003976 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
2400392a:	687b      	ldr	r3, [r7, #4]
2400392c:	681b      	ldr	r3, [r3, #0]
2400392e:	2200      	movs	r2, #0
24003930:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
24003932:	687b      	ldr	r3, [r7, #4]
24003934:	681b      	ldr	r3, [r3, #0]
24003936:	2200      	movs	r2, #0
24003938:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
2400393a:	687b      	ldr	r3, [r7, #4]
2400393c:	681b      	ldr	r3, [r3, #0]
2400393e:	2200      	movs	r2, #0
24003940:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
24003942:	687b      	ldr	r3, [r7, #4]
24003944:	681b      	ldr	r3, [r3, #0]
24003946:	2200      	movs	r2, #0
24003948:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
2400394a:	687b      	ldr	r3, [r7, #4]
2400394c:	681b      	ldr	r3, [r3, #0]
2400394e:	2200      	movs	r2, #0
24003950:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
24003952:	687b      	ldr	r3, [r7, #4]
24003954:	681b      	ldr	r3, [r3, #0]
24003956:	2221      	movs	r2, #33	; 0x21
24003958:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400395a:	6878      	ldr	r0, [r7, #4]
2400395c:	f002 ff2c 	bl	240067b8 <DMA_CalcBaseAndBitshift>
24003960:	4603      	mov	r3, r0
24003962:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003964:	687b      	ldr	r3, [r7, #4]
24003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003968:	f003 031f 	and.w	r3, r3, #31
2400396c:	223f      	movs	r2, #63	; 0x3f
2400396e:	409a      	lsls	r2, r3
24003970:	68bb      	ldr	r3, [r7, #8]
24003972:	609a      	str	r2, [r3, #8]
24003974:	e081      	b.n	24003a7a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24003976:	687b      	ldr	r3, [r7, #4]
24003978:	681b      	ldr	r3, [r3, #0]
2400397a:	4a24      	ldr	r2, [pc, #144]	; (24003a0c <HAL_DMA_DeInit+0x260>)
2400397c:	4293      	cmp	r3, r2
2400397e:	d022      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
24003980:	687b      	ldr	r3, [r7, #4]
24003982:	681b      	ldr	r3, [r3, #0]
24003984:	4a22      	ldr	r2, [pc, #136]	; (24003a10 <HAL_DMA_DeInit+0x264>)
24003986:	4293      	cmp	r3, r2
24003988:	d01d      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
2400398a:	687b      	ldr	r3, [r7, #4]
2400398c:	681b      	ldr	r3, [r3, #0]
2400398e:	4a21      	ldr	r2, [pc, #132]	; (24003a14 <HAL_DMA_DeInit+0x268>)
24003990:	4293      	cmp	r3, r2
24003992:	d018      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
24003994:	687b      	ldr	r3, [r7, #4]
24003996:	681b      	ldr	r3, [r3, #0]
24003998:	4a1f      	ldr	r2, [pc, #124]	; (24003a18 <HAL_DMA_DeInit+0x26c>)
2400399a:	4293      	cmp	r3, r2
2400399c:	d013      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
2400399e:	687b      	ldr	r3, [r7, #4]
240039a0:	681b      	ldr	r3, [r3, #0]
240039a2:	4a1e      	ldr	r2, [pc, #120]	; (24003a1c <HAL_DMA_DeInit+0x270>)
240039a4:	4293      	cmp	r3, r2
240039a6:	d00e      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
240039a8:	687b      	ldr	r3, [r7, #4]
240039aa:	681b      	ldr	r3, [r3, #0]
240039ac:	4a1c      	ldr	r2, [pc, #112]	; (24003a20 <HAL_DMA_DeInit+0x274>)
240039ae:	4293      	cmp	r3, r2
240039b0:	d009      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
240039b2:	687b      	ldr	r3, [r7, #4]
240039b4:	681b      	ldr	r3, [r3, #0]
240039b6:	4a1b      	ldr	r2, [pc, #108]	; (24003a24 <HAL_DMA_DeInit+0x278>)
240039b8:	4293      	cmp	r3, r2
240039ba:	d004      	beq.n	240039c6 <HAL_DMA_DeInit+0x21a>
240039bc:	687b      	ldr	r3, [r7, #4]
240039be:	681b      	ldr	r3, [r3, #0]
240039c0:	4a19      	ldr	r2, [pc, #100]	; (24003a28 <HAL_DMA_DeInit+0x27c>)
240039c2:	4293      	cmp	r3, r2
240039c4:	d132      	bne.n	24003a2c <HAL_DMA_DeInit+0x280>
240039c6:	2301      	movs	r3, #1
240039c8:	e031      	b.n	24003a2e <HAL_DMA_DeInit+0x282>
240039ca:	bf00      	nop
240039cc:	40020010 	.word	0x40020010
240039d0:	40020028 	.word	0x40020028
240039d4:	40020040 	.word	0x40020040
240039d8:	40020058 	.word	0x40020058
240039dc:	40020070 	.word	0x40020070
240039e0:	40020088 	.word	0x40020088
240039e4:	400200a0 	.word	0x400200a0
240039e8:	400200b8 	.word	0x400200b8
240039ec:	40020410 	.word	0x40020410
240039f0:	40020428 	.word	0x40020428
240039f4:	40020440 	.word	0x40020440
240039f8:	40020458 	.word	0x40020458
240039fc:	40020470 	.word	0x40020470
24003a00:	40020488 	.word	0x40020488
24003a04:	400204a0 	.word	0x400204a0
24003a08:	400204b8 	.word	0x400204b8
24003a0c:	58025408 	.word	0x58025408
24003a10:	5802541c 	.word	0x5802541c
24003a14:	58025430 	.word	0x58025430
24003a18:	58025444 	.word	0x58025444
24003a1c:	58025458 	.word	0x58025458
24003a20:	5802546c 	.word	0x5802546c
24003a24:	58025480 	.word	0x58025480
24003a28:	58025494 	.word	0x58025494
24003a2c:	2300      	movs	r3, #0
24003a2e:	2b00      	cmp	r3, #0
24003a30:	d021      	beq.n	24003a76 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
24003a32:	687b      	ldr	r3, [r7, #4]
24003a34:	681b      	ldr	r3, [r3, #0]
24003a36:	2200      	movs	r2, #0
24003a38:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
24003a3a:	687b      	ldr	r3, [r7, #4]
24003a3c:	681b      	ldr	r3, [r3, #0]
24003a3e:	2200      	movs	r2, #0
24003a40:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
24003a42:	687b      	ldr	r3, [r7, #4]
24003a44:	681b      	ldr	r3, [r3, #0]
24003a46:	2200      	movs	r2, #0
24003a48:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
24003a4a:	687b      	ldr	r3, [r7, #4]
24003a4c:	681b      	ldr	r3, [r3, #0]
24003a4e:	2200      	movs	r2, #0
24003a50:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
24003a52:	687b      	ldr	r3, [r7, #4]
24003a54:	681b      	ldr	r3, [r3, #0]
24003a56:	2200      	movs	r2, #0
24003a58:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003a5a:	6878      	ldr	r0, [r7, #4]
24003a5c:	f002 feac 	bl	240067b8 <DMA_CalcBaseAndBitshift>
24003a60:	4603      	mov	r3, r0
24003a62:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a64:	687b      	ldr	r3, [r7, #4]
24003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003a68:	f003 031f 	and.w	r3, r3, #31
24003a6c:	2201      	movs	r2, #1
24003a6e:	409a      	lsls	r2, r3
24003a70:	68fb      	ldr	r3, [r7, #12]
24003a72:	605a      	str	r2, [r3, #4]
24003a74:	e001      	b.n	24003a7a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
24003a76:	2301      	movs	r3, #1
24003a78:	e04a      	b.n	24003b10 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24003a7a:	6878      	ldr	r0, [r7, #4]
24003a7c:	f002 ffca 	bl	24006a14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
24003a80:	687b      	ldr	r3, [r7, #4]
24003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003a84:	2b00      	cmp	r3, #0
24003a86:	d008      	beq.n	24003a9a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
24003a88:	687b      	ldr	r3, [r7, #4]
24003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003a8c:	2200      	movs	r2, #0
24003a8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003a90:	687b      	ldr	r3, [r7, #4]
24003a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003a94:	687a      	ldr	r2, [r7, #4]
24003a96:	6e92      	ldr	r2, [r2, #104]	; 0x68
24003a98:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24003a9a:	687b      	ldr	r3, [r7, #4]
24003a9c:	685b      	ldr	r3, [r3, #4]
24003a9e:	2b00      	cmp	r3, #0
24003aa0:	d00f      	beq.n	24003ac2 <HAL_DMA_DeInit+0x316>
24003aa2:	687b      	ldr	r3, [r7, #4]
24003aa4:	685b      	ldr	r3, [r3, #4]
24003aa6:	2b08      	cmp	r3, #8
24003aa8:	d80b      	bhi.n	24003ac2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
24003aaa:	6878      	ldr	r0, [r7, #4]
24003aac:	f003 f84c 	bl	24006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24003ab0:	687b      	ldr	r3, [r7, #4]
24003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003ab4:	2200      	movs	r2, #0
24003ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003ab8:	687b      	ldr	r3, [r7, #4]
24003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24003abc:	687a      	ldr	r2, [r7, #4]
24003abe:	6f52      	ldr	r2, [r2, #116]	; 0x74
24003ac0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
24003ac2:	687b      	ldr	r3, [r7, #4]
24003ac4:	2200      	movs	r2, #0
24003ac6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
24003ac8:	687b      	ldr	r3, [r7, #4]
24003aca:	2200      	movs	r2, #0
24003acc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
24003ace:	687b      	ldr	r3, [r7, #4]
24003ad0:	2200      	movs	r2, #0
24003ad2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
24003ad4:	687b      	ldr	r3, [r7, #4]
24003ad6:	2200      	movs	r2, #0
24003ad8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
24003ada:	687b      	ldr	r3, [r7, #4]
24003adc:	2200      	movs	r2, #0
24003ade:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
24003ae0:	687b      	ldr	r3, [r7, #4]
24003ae2:	2200      	movs	r2, #0
24003ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
24003ae6:	687b      	ldr	r3, [r7, #4]
24003ae8:	2200      	movs	r2, #0
24003aea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
24003aec:	687b      	ldr	r3, [r7, #4]
24003aee:	2200      	movs	r2, #0
24003af0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
24003af2:	687b      	ldr	r3, [r7, #4]
24003af4:	2200      	movs	r2, #0
24003af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003af8:	687b      	ldr	r3, [r7, #4]
24003afa:	2200      	movs	r2, #0
24003afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
24003afe:	687b      	ldr	r3, [r7, #4]
24003b00:	2200      	movs	r2, #0
24003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24003b06:	687b      	ldr	r3, [r7, #4]
24003b08:	2200      	movs	r2, #0
24003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
24003b0e:	2300      	movs	r3, #0
}
24003b10:	4618      	mov	r0, r3
24003b12:	3710      	adds	r7, #16
24003b14:	46bd      	mov	sp, r7
24003b16:	bd80      	pop	{r7, pc}

24003b18 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003b18:	b580      	push	{r7, lr}
24003b1a:	b086      	sub	sp, #24
24003b1c:	af00      	add	r7, sp, #0
24003b1e:	60f8      	str	r0, [r7, #12]
24003b20:	60b9      	str	r1, [r7, #8]
24003b22:	607a      	str	r2, [r7, #4]
24003b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003b26:	2300      	movs	r3, #0
24003b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003b2a:	68fb      	ldr	r3, [r7, #12]
24003b2c:	2b00      	cmp	r3, #0
24003b2e:	d101      	bne.n	24003b34 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
24003b30:	2301      	movs	r3, #1
24003b32:	e0ec      	b.n	24003d0e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003b34:	68fb      	ldr	r3, [r7, #12]
24003b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003b3a:	2b01      	cmp	r3, #1
24003b3c:	d101      	bne.n	24003b42 <HAL_DMA_Start+0x2a>
24003b3e:	2302      	movs	r3, #2
24003b40:	e0e5      	b.n	24003d0e <HAL_DMA_Start+0x1f6>
24003b42:	68fb      	ldr	r3, [r7, #12]
24003b44:	2201      	movs	r2, #1
24003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003b4a:	68fb      	ldr	r3, [r7, #12]
24003b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003b50:	b2db      	uxtb	r3, r3
24003b52:	2b01      	cmp	r3, #1
24003b54:	f040 80d0 	bne.w	24003cf8 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003b58:	68fb      	ldr	r3, [r7, #12]
24003b5a:	2202      	movs	r2, #2
24003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003b60:	68fb      	ldr	r3, [r7, #12]
24003b62:	2200      	movs	r2, #0
24003b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003b66:	68fb      	ldr	r3, [r7, #12]
24003b68:	681b      	ldr	r3, [r3, #0]
24003b6a:	4a6b      	ldr	r2, [pc, #428]	; (24003d18 <HAL_DMA_Start+0x200>)
24003b6c:	4293      	cmp	r3, r2
24003b6e:	d04a      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003b70:	68fb      	ldr	r3, [r7, #12]
24003b72:	681b      	ldr	r3, [r3, #0]
24003b74:	4a69      	ldr	r2, [pc, #420]	; (24003d1c <HAL_DMA_Start+0x204>)
24003b76:	4293      	cmp	r3, r2
24003b78:	d045      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003b7a:	68fb      	ldr	r3, [r7, #12]
24003b7c:	681b      	ldr	r3, [r3, #0]
24003b7e:	4a68      	ldr	r2, [pc, #416]	; (24003d20 <HAL_DMA_Start+0x208>)
24003b80:	4293      	cmp	r3, r2
24003b82:	d040      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003b84:	68fb      	ldr	r3, [r7, #12]
24003b86:	681b      	ldr	r3, [r3, #0]
24003b88:	4a66      	ldr	r2, [pc, #408]	; (24003d24 <HAL_DMA_Start+0x20c>)
24003b8a:	4293      	cmp	r3, r2
24003b8c:	d03b      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003b8e:	68fb      	ldr	r3, [r7, #12]
24003b90:	681b      	ldr	r3, [r3, #0]
24003b92:	4a65      	ldr	r2, [pc, #404]	; (24003d28 <HAL_DMA_Start+0x210>)
24003b94:	4293      	cmp	r3, r2
24003b96:	d036      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003b98:	68fb      	ldr	r3, [r7, #12]
24003b9a:	681b      	ldr	r3, [r3, #0]
24003b9c:	4a63      	ldr	r2, [pc, #396]	; (24003d2c <HAL_DMA_Start+0x214>)
24003b9e:	4293      	cmp	r3, r2
24003ba0:	d031      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003ba2:	68fb      	ldr	r3, [r7, #12]
24003ba4:	681b      	ldr	r3, [r3, #0]
24003ba6:	4a62      	ldr	r2, [pc, #392]	; (24003d30 <HAL_DMA_Start+0x218>)
24003ba8:	4293      	cmp	r3, r2
24003baa:	d02c      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bac:	68fb      	ldr	r3, [r7, #12]
24003bae:	681b      	ldr	r3, [r3, #0]
24003bb0:	4a60      	ldr	r2, [pc, #384]	; (24003d34 <HAL_DMA_Start+0x21c>)
24003bb2:	4293      	cmp	r3, r2
24003bb4:	d027      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bb6:	68fb      	ldr	r3, [r7, #12]
24003bb8:	681b      	ldr	r3, [r3, #0]
24003bba:	4a5f      	ldr	r2, [pc, #380]	; (24003d38 <HAL_DMA_Start+0x220>)
24003bbc:	4293      	cmp	r3, r2
24003bbe:	d022      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bc0:	68fb      	ldr	r3, [r7, #12]
24003bc2:	681b      	ldr	r3, [r3, #0]
24003bc4:	4a5d      	ldr	r2, [pc, #372]	; (24003d3c <HAL_DMA_Start+0x224>)
24003bc6:	4293      	cmp	r3, r2
24003bc8:	d01d      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bca:	68fb      	ldr	r3, [r7, #12]
24003bcc:	681b      	ldr	r3, [r3, #0]
24003bce:	4a5c      	ldr	r2, [pc, #368]	; (24003d40 <HAL_DMA_Start+0x228>)
24003bd0:	4293      	cmp	r3, r2
24003bd2:	d018      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bd4:	68fb      	ldr	r3, [r7, #12]
24003bd6:	681b      	ldr	r3, [r3, #0]
24003bd8:	4a5a      	ldr	r2, [pc, #360]	; (24003d44 <HAL_DMA_Start+0x22c>)
24003bda:	4293      	cmp	r3, r2
24003bdc:	d013      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bde:	68fb      	ldr	r3, [r7, #12]
24003be0:	681b      	ldr	r3, [r3, #0]
24003be2:	4a59      	ldr	r2, [pc, #356]	; (24003d48 <HAL_DMA_Start+0x230>)
24003be4:	4293      	cmp	r3, r2
24003be6:	d00e      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003be8:	68fb      	ldr	r3, [r7, #12]
24003bea:	681b      	ldr	r3, [r3, #0]
24003bec:	4a57      	ldr	r2, [pc, #348]	; (24003d4c <HAL_DMA_Start+0x234>)
24003bee:	4293      	cmp	r3, r2
24003bf0:	d009      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bf2:	68fb      	ldr	r3, [r7, #12]
24003bf4:	681b      	ldr	r3, [r3, #0]
24003bf6:	4a56      	ldr	r2, [pc, #344]	; (24003d50 <HAL_DMA_Start+0x238>)
24003bf8:	4293      	cmp	r3, r2
24003bfa:	d004      	beq.n	24003c06 <HAL_DMA_Start+0xee>
24003bfc:	68fb      	ldr	r3, [r7, #12]
24003bfe:	681b      	ldr	r3, [r3, #0]
24003c00:	4a54      	ldr	r2, [pc, #336]	; (24003d54 <HAL_DMA_Start+0x23c>)
24003c02:	4293      	cmp	r3, r2
24003c04:	d108      	bne.n	24003c18 <HAL_DMA_Start+0x100>
24003c06:	68fb      	ldr	r3, [r7, #12]
24003c08:	681b      	ldr	r3, [r3, #0]
24003c0a:	681a      	ldr	r2, [r3, #0]
24003c0c:	68fb      	ldr	r3, [r7, #12]
24003c0e:	681b      	ldr	r3, [r3, #0]
24003c10:	f022 0201 	bic.w	r2, r2, #1
24003c14:	601a      	str	r2, [r3, #0]
24003c16:	e007      	b.n	24003c28 <HAL_DMA_Start+0x110>
24003c18:	68fb      	ldr	r3, [r7, #12]
24003c1a:	681b      	ldr	r3, [r3, #0]
24003c1c:	681a      	ldr	r2, [r3, #0]
24003c1e:	68fb      	ldr	r3, [r7, #12]
24003c20:	681b      	ldr	r3, [r3, #0]
24003c22:	f022 0201 	bic.w	r2, r2, #1
24003c26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003c28:	683b      	ldr	r3, [r7, #0]
24003c2a:	687a      	ldr	r2, [r7, #4]
24003c2c:	68b9      	ldr	r1, [r7, #8]
24003c2e:	68f8      	ldr	r0, [r7, #12]
24003c30:	f002 fc16 	bl	24006460 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24003c34:	68fb      	ldr	r3, [r7, #12]
24003c36:	681b      	ldr	r3, [r3, #0]
24003c38:	4a37      	ldr	r2, [pc, #220]	; (24003d18 <HAL_DMA_Start+0x200>)
24003c3a:	4293      	cmp	r3, r2
24003c3c:	d04a      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c3e:	68fb      	ldr	r3, [r7, #12]
24003c40:	681b      	ldr	r3, [r3, #0]
24003c42:	4a36      	ldr	r2, [pc, #216]	; (24003d1c <HAL_DMA_Start+0x204>)
24003c44:	4293      	cmp	r3, r2
24003c46:	d045      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c48:	68fb      	ldr	r3, [r7, #12]
24003c4a:	681b      	ldr	r3, [r3, #0]
24003c4c:	4a34      	ldr	r2, [pc, #208]	; (24003d20 <HAL_DMA_Start+0x208>)
24003c4e:	4293      	cmp	r3, r2
24003c50:	d040      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c52:	68fb      	ldr	r3, [r7, #12]
24003c54:	681b      	ldr	r3, [r3, #0]
24003c56:	4a33      	ldr	r2, [pc, #204]	; (24003d24 <HAL_DMA_Start+0x20c>)
24003c58:	4293      	cmp	r3, r2
24003c5a:	d03b      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c5c:	68fb      	ldr	r3, [r7, #12]
24003c5e:	681b      	ldr	r3, [r3, #0]
24003c60:	4a31      	ldr	r2, [pc, #196]	; (24003d28 <HAL_DMA_Start+0x210>)
24003c62:	4293      	cmp	r3, r2
24003c64:	d036      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c66:	68fb      	ldr	r3, [r7, #12]
24003c68:	681b      	ldr	r3, [r3, #0]
24003c6a:	4a30      	ldr	r2, [pc, #192]	; (24003d2c <HAL_DMA_Start+0x214>)
24003c6c:	4293      	cmp	r3, r2
24003c6e:	d031      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c70:	68fb      	ldr	r3, [r7, #12]
24003c72:	681b      	ldr	r3, [r3, #0]
24003c74:	4a2e      	ldr	r2, [pc, #184]	; (24003d30 <HAL_DMA_Start+0x218>)
24003c76:	4293      	cmp	r3, r2
24003c78:	d02c      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c7a:	68fb      	ldr	r3, [r7, #12]
24003c7c:	681b      	ldr	r3, [r3, #0]
24003c7e:	4a2d      	ldr	r2, [pc, #180]	; (24003d34 <HAL_DMA_Start+0x21c>)
24003c80:	4293      	cmp	r3, r2
24003c82:	d027      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c84:	68fb      	ldr	r3, [r7, #12]
24003c86:	681b      	ldr	r3, [r3, #0]
24003c88:	4a2b      	ldr	r2, [pc, #172]	; (24003d38 <HAL_DMA_Start+0x220>)
24003c8a:	4293      	cmp	r3, r2
24003c8c:	d022      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c8e:	68fb      	ldr	r3, [r7, #12]
24003c90:	681b      	ldr	r3, [r3, #0]
24003c92:	4a2a      	ldr	r2, [pc, #168]	; (24003d3c <HAL_DMA_Start+0x224>)
24003c94:	4293      	cmp	r3, r2
24003c96:	d01d      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003c98:	68fb      	ldr	r3, [r7, #12]
24003c9a:	681b      	ldr	r3, [r3, #0]
24003c9c:	4a28      	ldr	r2, [pc, #160]	; (24003d40 <HAL_DMA_Start+0x228>)
24003c9e:	4293      	cmp	r3, r2
24003ca0:	d018      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003ca2:	68fb      	ldr	r3, [r7, #12]
24003ca4:	681b      	ldr	r3, [r3, #0]
24003ca6:	4a27      	ldr	r2, [pc, #156]	; (24003d44 <HAL_DMA_Start+0x22c>)
24003ca8:	4293      	cmp	r3, r2
24003caa:	d013      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003cac:	68fb      	ldr	r3, [r7, #12]
24003cae:	681b      	ldr	r3, [r3, #0]
24003cb0:	4a25      	ldr	r2, [pc, #148]	; (24003d48 <HAL_DMA_Start+0x230>)
24003cb2:	4293      	cmp	r3, r2
24003cb4:	d00e      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003cb6:	68fb      	ldr	r3, [r7, #12]
24003cb8:	681b      	ldr	r3, [r3, #0]
24003cba:	4a24      	ldr	r2, [pc, #144]	; (24003d4c <HAL_DMA_Start+0x234>)
24003cbc:	4293      	cmp	r3, r2
24003cbe:	d009      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003cc0:	68fb      	ldr	r3, [r7, #12]
24003cc2:	681b      	ldr	r3, [r3, #0]
24003cc4:	4a22      	ldr	r2, [pc, #136]	; (24003d50 <HAL_DMA_Start+0x238>)
24003cc6:	4293      	cmp	r3, r2
24003cc8:	d004      	beq.n	24003cd4 <HAL_DMA_Start+0x1bc>
24003cca:	68fb      	ldr	r3, [r7, #12]
24003ccc:	681b      	ldr	r3, [r3, #0]
24003cce:	4a21      	ldr	r2, [pc, #132]	; (24003d54 <HAL_DMA_Start+0x23c>)
24003cd0:	4293      	cmp	r3, r2
24003cd2:	d108      	bne.n	24003ce6 <HAL_DMA_Start+0x1ce>
24003cd4:	68fb      	ldr	r3, [r7, #12]
24003cd6:	681b      	ldr	r3, [r3, #0]
24003cd8:	681a      	ldr	r2, [r3, #0]
24003cda:	68fb      	ldr	r3, [r7, #12]
24003cdc:	681b      	ldr	r3, [r3, #0]
24003cde:	f042 0201 	orr.w	r2, r2, #1
24003ce2:	601a      	str	r2, [r3, #0]
24003ce4:	e012      	b.n	24003d0c <HAL_DMA_Start+0x1f4>
24003ce6:	68fb      	ldr	r3, [r7, #12]
24003ce8:	681b      	ldr	r3, [r3, #0]
24003cea:	681a      	ldr	r2, [r3, #0]
24003cec:	68fb      	ldr	r3, [r7, #12]
24003cee:	681b      	ldr	r3, [r3, #0]
24003cf0:	f042 0201 	orr.w	r2, r2, #1
24003cf4:	601a      	str	r2, [r3, #0]
24003cf6:	e009      	b.n	24003d0c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24003cf8:	68fb      	ldr	r3, [r7, #12]
24003cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
24003cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24003d00:	68fb      	ldr	r3, [r7, #12]
24003d02:	2200      	movs	r2, #0
24003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24003d08:	2301      	movs	r3, #1
24003d0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24003d0c:	7dfb      	ldrb	r3, [r7, #23]
}
24003d0e:	4618      	mov	r0, r3
24003d10:	3718      	adds	r7, #24
24003d12:	46bd      	mov	sp, r7
24003d14:	bd80      	pop	{r7, pc}
24003d16:	bf00      	nop
24003d18:	40020010 	.word	0x40020010
24003d1c:	40020028 	.word	0x40020028
24003d20:	40020040 	.word	0x40020040
24003d24:	40020058 	.word	0x40020058
24003d28:	40020070 	.word	0x40020070
24003d2c:	40020088 	.word	0x40020088
24003d30:	400200a0 	.word	0x400200a0
24003d34:	400200b8 	.word	0x400200b8
24003d38:	40020410 	.word	0x40020410
24003d3c:	40020428 	.word	0x40020428
24003d40:	40020440 	.word	0x40020440
24003d44:	40020458 	.word	0x40020458
24003d48:	40020470 	.word	0x40020470
24003d4c:	40020488 	.word	0x40020488
24003d50:	400204a0 	.word	0x400204a0
24003d54:	400204b8 	.word	0x400204b8

24003d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003d58:	b580      	push	{r7, lr}
24003d5a:	b086      	sub	sp, #24
24003d5c:	af00      	add	r7, sp, #0
24003d5e:	60f8      	str	r0, [r7, #12]
24003d60:	60b9      	str	r1, [r7, #8]
24003d62:	607a      	str	r2, [r7, #4]
24003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003d66:	2300      	movs	r3, #0
24003d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003d6a:	68fb      	ldr	r3, [r7, #12]
24003d6c:	2b00      	cmp	r3, #0
24003d6e:	d101      	bne.n	24003d74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24003d70:	2301      	movs	r3, #1
24003d72:	e226      	b.n	240041c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003d74:	68fb      	ldr	r3, [r7, #12]
24003d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003d7a:	2b01      	cmp	r3, #1
24003d7c:	d101      	bne.n	24003d82 <HAL_DMA_Start_IT+0x2a>
24003d7e:	2302      	movs	r3, #2
24003d80:	e21f      	b.n	240041c2 <HAL_DMA_Start_IT+0x46a>
24003d82:	68fb      	ldr	r3, [r7, #12]
24003d84:	2201      	movs	r2, #1
24003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003d8a:	68fb      	ldr	r3, [r7, #12]
24003d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003d90:	b2db      	uxtb	r3, r3
24003d92:	2b01      	cmp	r3, #1
24003d94:	f040 820a 	bne.w	240041ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003d98:	68fb      	ldr	r3, [r7, #12]
24003d9a:	2202      	movs	r2, #2
24003d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003da0:	68fb      	ldr	r3, [r7, #12]
24003da2:	2200      	movs	r2, #0
24003da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003da6:	68fb      	ldr	r3, [r7, #12]
24003da8:	681b      	ldr	r3, [r3, #0]
24003daa:	4a68      	ldr	r2, [pc, #416]	; (24003f4c <HAL_DMA_Start_IT+0x1f4>)
24003dac:	4293      	cmp	r3, r2
24003dae:	d04a      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003db0:	68fb      	ldr	r3, [r7, #12]
24003db2:	681b      	ldr	r3, [r3, #0]
24003db4:	4a66      	ldr	r2, [pc, #408]	; (24003f50 <HAL_DMA_Start_IT+0x1f8>)
24003db6:	4293      	cmp	r3, r2
24003db8:	d045      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003dba:	68fb      	ldr	r3, [r7, #12]
24003dbc:	681b      	ldr	r3, [r3, #0]
24003dbe:	4a65      	ldr	r2, [pc, #404]	; (24003f54 <HAL_DMA_Start_IT+0x1fc>)
24003dc0:	4293      	cmp	r3, r2
24003dc2:	d040      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003dc4:	68fb      	ldr	r3, [r7, #12]
24003dc6:	681b      	ldr	r3, [r3, #0]
24003dc8:	4a63      	ldr	r2, [pc, #396]	; (24003f58 <HAL_DMA_Start_IT+0x200>)
24003dca:	4293      	cmp	r3, r2
24003dcc:	d03b      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003dce:	68fb      	ldr	r3, [r7, #12]
24003dd0:	681b      	ldr	r3, [r3, #0]
24003dd2:	4a62      	ldr	r2, [pc, #392]	; (24003f5c <HAL_DMA_Start_IT+0x204>)
24003dd4:	4293      	cmp	r3, r2
24003dd6:	d036      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003dd8:	68fb      	ldr	r3, [r7, #12]
24003dda:	681b      	ldr	r3, [r3, #0]
24003ddc:	4a60      	ldr	r2, [pc, #384]	; (24003f60 <HAL_DMA_Start_IT+0x208>)
24003dde:	4293      	cmp	r3, r2
24003de0:	d031      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003de2:	68fb      	ldr	r3, [r7, #12]
24003de4:	681b      	ldr	r3, [r3, #0]
24003de6:	4a5f      	ldr	r2, [pc, #380]	; (24003f64 <HAL_DMA_Start_IT+0x20c>)
24003de8:	4293      	cmp	r3, r2
24003dea:	d02c      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003dec:	68fb      	ldr	r3, [r7, #12]
24003dee:	681b      	ldr	r3, [r3, #0]
24003df0:	4a5d      	ldr	r2, [pc, #372]	; (24003f68 <HAL_DMA_Start_IT+0x210>)
24003df2:	4293      	cmp	r3, r2
24003df4:	d027      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003df6:	68fb      	ldr	r3, [r7, #12]
24003df8:	681b      	ldr	r3, [r3, #0]
24003dfa:	4a5c      	ldr	r2, [pc, #368]	; (24003f6c <HAL_DMA_Start_IT+0x214>)
24003dfc:	4293      	cmp	r3, r2
24003dfe:	d022      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e00:	68fb      	ldr	r3, [r7, #12]
24003e02:	681b      	ldr	r3, [r3, #0]
24003e04:	4a5a      	ldr	r2, [pc, #360]	; (24003f70 <HAL_DMA_Start_IT+0x218>)
24003e06:	4293      	cmp	r3, r2
24003e08:	d01d      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e0a:	68fb      	ldr	r3, [r7, #12]
24003e0c:	681b      	ldr	r3, [r3, #0]
24003e0e:	4a59      	ldr	r2, [pc, #356]	; (24003f74 <HAL_DMA_Start_IT+0x21c>)
24003e10:	4293      	cmp	r3, r2
24003e12:	d018      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e14:	68fb      	ldr	r3, [r7, #12]
24003e16:	681b      	ldr	r3, [r3, #0]
24003e18:	4a57      	ldr	r2, [pc, #348]	; (24003f78 <HAL_DMA_Start_IT+0x220>)
24003e1a:	4293      	cmp	r3, r2
24003e1c:	d013      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e1e:	68fb      	ldr	r3, [r7, #12]
24003e20:	681b      	ldr	r3, [r3, #0]
24003e22:	4a56      	ldr	r2, [pc, #344]	; (24003f7c <HAL_DMA_Start_IT+0x224>)
24003e24:	4293      	cmp	r3, r2
24003e26:	d00e      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e28:	68fb      	ldr	r3, [r7, #12]
24003e2a:	681b      	ldr	r3, [r3, #0]
24003e2c:	4a54      	ldr	r2, [pc, #336]	; (24003f80 <HAL_DMA_Start_IT+0x228>)
24003e2e:	4293      	cmp	r3, r2
24003e30:	d009      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e32:	68fb      	ldr	r3, [r7, #12]
24003e34:	681b      	ldr	r3, [r3, #0]
24003e36:	4a53      	ldr	r2, [pc, #332]	; (24003f84 <HAL_DMA_Start_IT+0x22c>)
24003e38:	4293      	cmp	r3, r2
24003e3a:	d004      	beq.n	24003e46 <HAL_DMA_Start_IT+0xee>
24003e3c:	68fb      	ldr	r3, [r7, #12]
24003e3e:	681b      	ldr	r3, [r3, #0]
24003e40:	4a51      	ldr	r2, [pc, #324]	; (24003f88 <HAL_DMA_Start_IT+0x230>)
24003e42:	4293      	cmp	r3, r2
24003e44:	d108      	bne.n	24003e58 <HAL_DMA_Start_IT+0x100>
24003e46:	68fb      	ldr	r3, [r7, #12]
24003e48:	681b      	ldr	r3, [r3, #0]
24003e4a:	681a      	ldr	r2, [r3, #0]
24003e4c:	68fb      	ldr	r3, [r7, #12]
24003e4e:	681b      	ldr	r3, [r3, #0]
24003e50:	f022 0201 	bic.w	r2, r2, #1
24003e54:	601a      	str	r2, [r3, #0]
24003e56:	e007      	b.n	24003e68 <HAL_DMA_Start_IT+0x110>
24003e58:	68fb      	ldr	r3, [r7, #12]
24003e5a:	681b      	ldr	r3, [r3, #0]
24003e5c:	681a      	ldr	r2, [r3, #0]
24003e5e:	68fb      	ldr	r3, [r7, #12]
24003e60:	681b      	ldr	r3, [r3, #0]
24003e62:	f022 0201 	bic.w	r2, r2, #1
24003e66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003e68:	683b      	ldr	r3, [r7, #0]
24003e6a:	687a      	ldr	r2, [r7, #4]
24003e6c:	68b9      	ldr	r1, [r7, #8]
24003e6e:	68f8      	ldr	r0, [r7, #12]
24003e70:	f002 faf6 	bl	24006460 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003e74:	68fb      	ldr	r3, [r7, #12]
24003e76:	681b      	ldr	r3, [r3, #0]
24003e78:	4a34      	ldr	r2, [pc, #208]	; (24003f4c <HAL_DMA_Start_IT+0x1f4>)
24003e7a:	4293      	cmp	r3, r2
24003e7c:	d04a      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003e7e:	68fb      	ldr	r3, [r7, #12]
24003e80:	681b      	ldr	r3, [r3, #0]
24003e82:	4a33      	ldr	r2, [pc, #204]	; (24003f50 <HAL_DMA_Start_IT+0x1f8>)
24003e84:	4293      	cmp	r3, r2
24003e86:	d045      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003e88:	68fb      	ldr	r3, [r7, #12]
24003e8a:	681b      	ldr	r3, [r3, #0]
24003e8c:	4a31      	ldr	r2, [pc, #196]	; (24003f54 <HAL_DMA_Start_IT+0x1fc>)
24003e8e:	4293      	cmp	r3, r2
24003e90:	d040      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003e92:	68fb      	ldr	r3, [r7, #12]
24003e94:	681b      	ldr	r3, [r3, #0]
24003e96:	4a30      	ldr	r2, [pc, #192]	; (24003f58 <HAL_DMA_Start_IT+0x200>)
24003e98:	4293      	cmp	r3, r2
24003e9a:	d03b      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003e9c:	68fb      	ldr	r3, [r7, #12]
24003e9e:	681b      	ldr	r3, [r3, #0]
24003ea0:	4a2e      	ldr	r2, [pc, #184]	; (24003f5c <HAL_DMA_Start_IT+0x204>)
24003ea2:	4293      	cmp	r3, r2
24003ea4:	d036      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ea6:	68fb      	ldr	r3, [r7, #12]
24003ea8:	681b      	ldr	r3, [r3, #0]
24003eaa:	4a2d      	ldr	r2, [pc, #180]	; (24003f60 <HAL_DMA_Start_IT+0x208>)
24003eac:	4293      	cmp	r3, r2
24003eae:	d031      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003eb0:	68fb      	ldr	r3, [r7, #12]
24003eb2:	681b      	ldr	r3, [r3, #0]
24003eb4:	4a2b      	ldr	r2, [pc, #172]	; (24003f64 <HAL_DMA_Start_IT+0x20c>)
24003eb6:	4293      	cmp	r3, r2
24003eb8:	d02c      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003eba:	68fb      	ldr	r3, [r7, #12]
24003ebc:	681b      	ldr	r3, [r3, #0]
24003ebe:	4a2a      	ldr	r2, [pc, #168]	; (24003f68 <HAL_DMA_Start_IT+0x210>)
24003ec0:	4293      	cmp	r3, r2
24003ec2:	d027      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ec4:	68fb      	ldr	r3, [r7, #12]
24003ec6:	681b      	ldr	r3, [r3, #0]
24003ec8:	4a28      	ldr	r2, [pc, #160]	; (24003f6c <HAL_DMA_Start_IT+0x214>)
24003eca:	4293      	cmp	r3, r2
24003ecc:	d022      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ece:	68fb      	ldr	r3, [r7, #12]
24003ed0:	681b      	ldr	r3, [r3, #0]
24003ed2:	4a27      	ldr	r2, [pc, #156]	; (24003f70 <HAL_DMA_Start_IT+0x218>)
24003ed4:	4293      	cmp	r3, r2
24003ed6:	d01d      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ed8:	68fb      	ldr	r3, [r7, #12]
24003eda:	681b      	ldr	r3, [r3, #0]
24003edc:	4a25      	ldr	r2, [pc, #148]	; (24003f74 <HAL_DMA_Start_IT+0x21c>)
24003ede:	4293      	cmp	r3, r2
24003ee0:	d018      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ee2:	68fb      	ldr	r3, [r7, #12]
24003ee4:	681b      	ldr	r3, [r3, #0]
24003ee6:	4a24      	ldr	r2, [pc, #144]	; (24003f78 <HAL_DMA_Start_IT+0x220>)
24003ee8:	4293      	cmp	r3, r2
24003eea:	d013      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003eec:	68fb      	ldr	r3, [r7, #12]
24003eee:	681b      	ldr	r3, [r3, #0]
24003ef0:	4a22      	ldr	r2, [pc, #136]	; (24003f7c <HAL_DMA_Start_IT+0x224>)
24003ef2:	4293      	cmp	r3, r2
24003ef4:	d00e      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003ef6:	68fb      	ldr	r3, [r7, #12]
24003ef8:	681b      	ldr	r3, [r3, #0]
24003efa:	4a21      	ldr	r2, [pc, #132]	; (24003f80 <HAL_DMA_Start_IT+0x228>)
24003efc:	4293      	cmp	r3, r2
24003efe:	d009      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003f00:	68fb      	ldr	r3, [r7, #12]
24003f02:	681b      	ldr	r3, [r3, #0]
24003f04:	4a1f      	ldr	r2, [pc, #124]	; (24003f84 <HAL_DMA_Start_IT+0x22c>)
24003f06:	4293      	cmp	r3, r2
24003f08:	d004      	beq.n	24003f14 <HAL_DMA_Start_IT+0x1bc>
24003f0a:	68fb      	ldr	r3, [r7, #12]
24003f0c:	681b      	ldr	r3, [r3, #0]
24003f0e:	4a1e      	ldr	r2, [pc, #120]	; (24003f88 <HAL_DMA_Start_IT+0x230>)
24003f10:	4293      	cmp	r3, r2
24003f12:	d101      	bne.n	24003f18 <HAL_DMA_Start_IT+0x1c0>
24003f14:	2301      	movs	r3, #1
24003f16:	e000      	b.n	24003f1a <HAL_DMA_Start_IT+0x1c2>
24003f18:	2300      	movs	r3, #0
24003f1a:	2b00      	cmp	r3, #0
24003f1c:	d036      	beq.n	24003f8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24003f1e:	68fb      	ldr	r3, [r7, #12]
24003f20:	681b      	ldr	r3, [r3, #0]
24003f22:	681b      	ldr	r3, [r3, #0]
24003f24:	f023 021e 	bic.w	r2, r3, #30
24003f28:	68fb      	ldr	r3, [r7, #12]
24003f2a:	681b      	ldr	r3, [r3, #0]
24003f2c:	f042 0216 	orr.w	r2, r2, #22
24003f30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003f32:	68fb      	ldr	r3, [r7, #12]
24003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003f36:	2b00      	cmp	r3, #0
24003f38:	d03e      	beq.n	24003fb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24003f3a:	68fb      	ldr	r3, [r7, #12]
24003f3c:	681b      	ldr	r3, [r3, #0]
24003f3e:	681a      	ldr	r2, [r3, #0]
24003f40:	68fb      	ldr	r3, [r7, #12]
24003f42:	681b      	ldr	r3, [r3, #0]
24003f44:	f042 0208 	orr.w	r2, r2, #8
24003f48:	601a      	str	r2, [r3, #0]
24003f4a:	e035      	b.n	24003fb8 <HAL_DMA_Start_IT+0x260>
24003f4c:	40020010 	.word	0x40020010
24003f50:	40020028 	.word	0x40020028
24003f54:	40020040 	.word	0x40020040
24003f58:	40020058 	.word	0x40020058
24003f5c:	40020070 	.word	0x40020070
24003f60:	40020088 	.word	0x40020088
24003f64:	400200a0 	.word	0x400200a0
24003f68:	400200b8 	.word	0x400200b8
24003f6c:	40020410 	.word	0x40020410
24003f70:	40020428 	.word	0x40020428
24003f74:	40020440 	.word	0x40020440
24003f78:	40020458 	.word	0x40020458
24003f7c:	40020470 	.word	0x40020470
24003f80:	40020488 	.word	0x40020488
24003f84:	400204a0 	.word	0x400204a0
24003f88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24003f8c:	68fb      	ldr	r3, [r7, #12]
24003f8e:	681b      	ldr	r3, [r3, #0]
24003f90:	681b      	ldr	r3, [r3, #0]
24003f92:	f023 020e 	bic.w	r2, r3, #14
24003f96:	68fb      	ldr	r3, [r7, #12]
24003f98:	681b      	ldr	r3, [r3, #0]
24003f9a:	f042 020a 	orr.w	r2, r2, #10
24003f9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003fa0:	68fb      	ldr	r3, [r7, #12]
24003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003fa4:	2b00      	cmp	r3, #0
24003fa6:	d007      	beq.n	24003fb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24003fa8:	68fb      	ldr	r3, [r7, #12]
24003faa:	681b      	ldr	r3, [r3, #0]
24003fac:	681a      	ldr	r2, [r3, #0]
24003fae:	68fb      	ldr	r3, [r7, #12]
24003fb0:	681b      	ldr	r3, [r3, #0]
24003fb2:	f042 0204 	orr.w	r2, r2, #4
24003fb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003fb8:	68fb      	ldr	r3, [r7, #12]
24003fba:	681b      	ldr	r3, [r3, #0]
24003fbc:	4a83      	ldr	r2, [pc, #524]	; (240041cc <HAL_DMA_Start_IT+0x474>)
24003fbe:	4293      	cmp	r3, r2
24003fc0:	d072      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003fc2:	68fb      	ldr	r3, [r7, #12]
24003fc4:	681b      	ldr	r3, [r3, #0]
24003fc6:	4a82      	ldr	r2, [pc, #520]	; (240041d0 <HAL_DMA_Start_IT+0x478>)
24003fc8:	4293      	cmp	r3, r2
24003fca:	d06d      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003fcc:	68fb      	ldr	r3, [r7, #12]
24003fce:	681b      	ldr	r3, [r3, #0]
24003fd0:	4a80      	ldr	r2, [pc, #512]	; (240041d4 <HAL_DMA_Start_IT+0x47c>)
24003fd2:	4293      	cmp	r3, r2
24003fd4:	d068      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003fd6:	68fb      	ldr	r3, [r7, #12]
24003fd8:	681b      	ldr	r3, [r3, #0]
24003fda:	4a7f      	ldr	r2, [pc, #508]	; (240041d8 <HAL_DMA_Start_IT+0x480>)
24003fdc:	4293      	cmp	r3, r2
24003fde:	d063      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003fe0:	68fb      	ldr	r3, [r7, #12]
24003fe2:	681b      	ldr	r3, [r3, #0]
24003fe4:	4a7d      	ldr	r2, [pc, #500]	; (240041dc <HAL_DMA_Start_IT+0x484>)
24003fe6:	4293      	cmp	r3, r2
24003fe8:	d05e      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003fea:	68fb      	ldr	r3, [r7, #12]
24003fec:	681b      	ldr	r3, [r3, #0]
24003fee:	4a7c      	ldr	r2, [pc, #496]	; (240041e0 <HAL_DMA_Start_IT+0x488>)
24003ff0:	4293      	cmp	r3, r2
24003ff2:	d059      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003ff4:	68fb      	ldr	r3, [r7, #12]
24003ff6:	681b      	ldr	r3, [r3, #0]
24003ff8:	4a7a      	ldr	r2, [pc, #488]	; (240041e4 <HAL_DMA_Start_IT+0x48c>)
24003ffa:	4293      	cmp	r3, r2
24003ffc:	d054      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24003ffe:	68fb      	ldr	r3, [r7, #12]
24004000:	681b      	ldr	r3, [r3, #0]
24004002:	4a79      	ldr	r2, [pc, #484]	; (240041e8 <HAL_DMA_Start_IT+0x490>)
24004004:	4293      	cmp	r3, r2
24004006:	d04f      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004008:	68fb      	ldr	r3, [r7, #12]
2400400a:	681b      	ldr	r3, [r3, #0]
2400400c:	4a77      	ldr	r2, [pc, #476]	; (240041ec <HAL_DMA_Start_IT+0x494>)
2400400e:	4293      	cmp	r3, r2
24004010:	d04a      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004012:	68fb      	ldr	r3, [r7, #12]
24004014:	681b      	ldr	r3, [r3, #0]
24004016:	4a76      	ldr	r2, [pc, #472]	; (240041f0 <HAL_DMA_Start_IT+0x498>)
24004018:	4293      	cmp	r3, r2
2400401a:	d045      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400401c:	68fb      	ldr	r3, [r7, #12]
2400401e:	681b      	ldr	r3, [r3, #0]
24004020:	4a74      	ldr	r2, [pc, #464]	; (240041f4 <HAL_DMA_Start_IT+0x49c>)
24004022:	4293      	cmp	r3, r2
24004024:	d040      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004026:	68fb      	ldr	r3, [r7, #12]
24004028:	681b      	ldr	r3, [r3, #0]
2400402a:	4a73      	ldr	r2, [pc, #460]	; (240041f8 <HAL_DMA_Start_IT+0x4a0>)
2400402c:	4293      	cmp	r3, r2
2400402e:	d03b      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004030:	68fb      	ldr	r3, [r7, #12]
24004032:	681b      	ldr	r3, [r3, #0]
24004034:	4a71      	ldr	r2, [pc, #452]	; (240041fc <HAL_DMA_Start_IT+0x4a4>)
24004036:	4293      	cmp	r3, r2
24004038:	d036      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400403a:	68fb      	ldr	r3, [r7, #12]
2400403c:	681b      	ldr	r3, [r3, #0]
2400403e:	4a70      	ldr	r2, [pc, #448]	; (24004200 <HAL_DMA_Start_IT+0x4a8>)
24004040:	4293      	cmp	r3, r2
24004042:	d031      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004044:	68fb      	ldr	r3, [r7, #12]
24004046:	681b      	ldr	r3, [r3, #0]
24004048:	4a6e      	ldr	r2, [pc, #440]	; (24004204 <HAL_DMA_Start_IT+0x4ac>)
2400404a:	4293      	cmp	r3, r2
2400404c:	d02c      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400404e:	68fb      	ldr	r3, [r7, #12]
24004050:	681b      	ldr	r3, [r3, #0]
24004052:	4a6d      	ldr	r2, [pc, #436]	; (24004208 <HAL_DMA_Start_IT+0x4b0>)
24004054:	4293      	cmp	r3, r2
24004056:	d027      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004058:	68fb      	ldr	r3, [r7, #12]
2400405a:	681b      	ldr	r3, [r3, #0]
2400405c:	4a6b      	ldr	r2, [pc, #428]	; (2400420c <HAL_DMA_Start_IT+0x4b4>)
2400405e:	4293      	cmp	r3, r2
24004060:	d022      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004062:	68fb      	ldr	r3, [r7, #12]
24004064:	681b      	ldr	r3, [r3, #0]
24004066:	4a6a      	ldr	r2, [pc, #424]	; (24004210 <HAL_DMA_Start_IT+0x4b8>)
24004068:	4293      	cmp	r3, r2
2400406a:	d01d      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400406c:	68fb      	ldr	r3, [r7, #12]
2400406e:	681b      	ldr	r3, [r3, #0]
24004070:	4a68      	ldr	r2, [pc, #416]	; (24004214 <HAL_DMA_Start_IT+0x4bc>)
24004072:	4293      	cmp	r3, r2
24004074:	d018      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004076:	68fb      	ldr	r3, [r7, #12]
24004078:	681b      	ldr	r3, [r3, #0]
2400407a:	4a67      	ldr	r2, [pc, #412]	; (24004218 <HAL_DMA_Start_IT+0x4c0>)
2400407c:	4293      	cmp	r3, r2
2400407e:	d013      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004080:	68fb      	ldr	r3, [r7, #12]
24004082:	681b      	ldr	r3, [r3, #0]
24004084:	4a65      	ldr	r2, [pc, #404]	; (2400421c <HAL_DMA_Start_IT+0x4c4>)
24004086:	4293      	cmp	r3, r2
24004088:	d00e      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400408a:	68fb      	ldr	r3, [r7, #12]
2400408c:	681b      	ldr	r3, [r3, #0]
2400408e:	4a64      	ldr	r2, [pc, #400]	; (24004220 <HAL_DMA_Start_IT+0x4c8>)
24004090:	4293      	cmp	r3, r2
24004092:	d009      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
24004094:	68fb      	ldr	r3, [r7, #12]
24004096:	681b      	ldr	r3, [r3, #0]
24004098:	4a62      	ldr	r2, [pc, #392]	; (24004224 <HAL_DMA_Start_IT+0x4cc>)
2400409a:	4293      	cmp	r3, r2
2400409c:	d004      	beq.n	240040a8 <HAL_DMA_Start_IT+0x350>
2400409e:	68fb      	ldr	r3, [r7, #12]
240040a0:	681b      	ldr	r3, [r3, #0]
240040a2:	4a61      	ldr	r2, [pc, #388]	; (24004228 <HAL_DMA_Start_IT+0x4d0>)
240040a4:	4293      	cmp	r3, r2
240040a6:	d101      	bne.n	240040ac <HAL_DMA_Start_IT+0x354>
240040a8:	2301      	movs	r3, #1
240040aa:	e000      	b.n	240040ae <HAL_DMA_Start_IT+0x356>
240040ac:	2300      	movs	r3, #0
240040ae:	2b00      	cmp	r3, #0
240040b0:	d01a      	beq.n	240040e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240040b2:	68fb      	ldr	r3, [r7, #12]
240040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240040b6:	681b      	ldr	r3, [r3, #0]
240040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240040bc:	2b00      	cmp	r3, #0
240040be:	d007      	beq.n	240040d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240040c0:	68fb      	ldr	r3, [r7, #12]
240040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240040c4:	681a      	ldr	r2, [r3, #0]
240040c6:	68fb      	ldr	r3, [r7, #12]
240040c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240040ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
240040d0:	68fb      	ldr	r3, [r7, #12]
240040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040d4:	2b00      	cmp	r3, #0
240040d6:	d007      	beq.n	240040e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240040d8:	68fb      	ldr	r3, [r7, #12]
240040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040dc:	681a      	ldr	r2, [r3, #0]
240040de:	68fb      	ldr	r3, [r7, #12]
240040e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240040e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
240040e8:	68fb      	ldr	r3, [r7, #12]
240040ea:	681b      	ldr	r3, [r3, #0]
240040ec:	4a37      	ldr	r2, [pc, #220]	; (240041cc <HAL_DMA_Start_IT+0x474>)
240040ee:	4293      	cmp	r3, r2
240040f0:	d04a      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
240040f2:	68fb      	ldr	r3, [r7, #12]
240040f4:	681b      	ldr	r3, [r3, #0]
240040f6:	4a36      	ldr	r2, [pc, #216]	; (240041d0 <HAL_DMA_Start_IT+0x478>)
240040f8:	4293      	cmp	r3, r2
240040fa:	d045      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
240040fc:	68fb      	ldr	r3, [r7, #12]
240040fe:	681b      	ldr	r3, [r3, #0]
24004100:	4a34      	ldr	r2, [pc, #208]	; (240041d4 <HAL_DMA_Start_IT+0x47c>)
24004102:	4293      	cmp	r3, r2
24004104:	d040      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004106:	68fb      	ldr	r3, [r7, #12]
24004108:	681b      	ldr	r3, [r3, #0]
2400410a:	4a33      	ldr	r2, [pc, #204]	; (240041d8 <HAL_DMA_Start_IT+0x480>)
2400410c:	4293      	cmp	r3, r2
2400410e:	d03b      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004110:	68fb      	ldr	r3, [r7, #12]
24004112:	681b      	ldr	r3, [r3, #0]
24004114:	4a31      	ldr	r2, [pc, #196]	; (240041dc <HAL_DMA_Start_IT+0x484>)
24004116:	4293      	cmp	r3, r2
24004118:	d036      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
2400411a:	68fb      	ldr	r3, [r7, #12]
2400411c:	681b      	ldr	r3, [r3, #0]
2400411e:	4a30      	ldr	r2, [pc, #192]	; (240041e0 <HAL_DMA_Start_IT+0x488>)
24004120:	4293      	cmp	r3, r2
24004122:	d031      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004124:	68fb      	ldr	r3, [r7, #12]
24004126:	681b      	ldr	r3, [r3, #0]
24004128:	4a2e      	ldr	r2, [pc, #184]	; (240041e4 <HAL_DMA_Start_IT+0x48c>)
2400412a:	4293      	cmp	r3, r2
2400412c:	d02c      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
2400412e:	68fb      	ldr	r3, [r7, #12]
24004130:	681b      	ldr	r3, [r3, #0]
24004132:	4a2d      	ldr	r2, [pc, #180]	; (240041e8 <HAL_DMA_Start_IT+0x490>)
24004134:	4293      	cmp	r3, r2
24004136:	d027      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004138:	68fb      	ldr	r3, [r7, #12]
2400413a:	681b      	ldr	r3, [r3, #0]
2400413c:	4a2b      	ldr	r2, [pc, #172]	; (240041ec <HAL_DMA_Start_IT+0x494>)
2400413e:	4293      	cmp	r3, r2
24004140:	d022      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004142:	68fb      	ldr	r3, [r7, #12]
24004144:	681b      	ldr	r3, [r3, #0]
24004146:	4a2a      	ldr	r2, [pc, #168]	; (240041f0 <HAL_DMA_Start_IT+0x498>)
24004148:	4293      	cmp	r3, r2
2400414a:	d01d      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
2400414c:	68fb      	ldr	r3, [r7, #12]
2400414e:	681b      	ldr	r3, [r3, #0]
24004150:	4a28      	ldr	r2, [pc, #160]	; (240041f4 <HAL_DMA_Start_IT+0x49c>)
24004152:	4293      	cmp	r3, r2
24004154:	d018      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004156:	68fb      	ldr	r3, [r7, #12]
24004158:	681b      	ldr	r3, [r3, #0]
2400415a:	4a27      	ldr	r2, [pc, #156]	; (240041f8 <HAL_DMA_Start_IT+0x4a0>)
2400415c:	4293      	cmp	r3, r2
2400415e:	d013      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004160:	68fb      	ldr	r3, [r7, #12]
24004162:	681b      	ldr	r3, [r3, #0]
24004164:	4a25      	ldr	r2, [pc, #148]	; (240041fc <HAL_DMA_Start_IT+0x4a4>)
24004166:	4293      	cmp	r3, r2
24004168:	d00e      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
2400416a:	68fb      	ldr	r3, [r7, #12]
2400416c:	681b      	ldr	r3, [r3, #0]
2400416e:	4a24      	ldr	r2, [pc, #144]	; (24004200 <HAL_DMA_Start_IT+0x4a8>)
24004170:	4293      	cmp	r3, r2
24004172:	d009      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
24004174:	68fb      	ldr	r3, [r7, #12]
24004176:	681b      	ldr	r3, [r3, #0]
24004178:	4a22      	ldr	r2, [pc, #136]	; (24004204 <HAL_DMA_Start_IT+0x4ac>)
2400417a:	4293      	cmp	r3, r2
2400417c:	d004      	beq.n	24004188 <HAL_DMA_Start_IT+0x430>
2400417e:	68fb      	ldr	r3, [r7, #12]
24004180:	681b      	ldr	r3, [r3, #0]
24004182:	4a21      	ldr	r2, [pc, #132]	; (24004208 <HAL_DMA_Start_IT+0x4b0>)
24004184:	4293      	cmp	r3, r2
24004186:	d108      	bne.n	2400419a <HAL_DMA_Start_IT+0x442>
24004188:	68fb      	ldr	r3, [r7, #12]
2400418a:	681b      	ldr	r3, [r3, #0]
2400418c:	681a      	ldr	r2, [r3, #0]
2400418e:	68fb      	ldr	r3, [r7, #12]
24004190:	681b      	ldr	r3, [r3, #0]
24004192:	f042 0201 	orr.w	r2, r2, #1
24004196:	601a      	str	r2, [r3, #0]
24004198:	e012      	b.n	240041c0 <HAL_DMA_Start_IT+0x468>
2400419a:	68fb      	ldr	r3, [r7, #12]
2400419c:	681b      	ldr	r3, [r3, #0]
2400419e:	681a      	ldr	r2, [r3, #0]
240041a0:	68fb      	ldr	r3, [r7, #12]
240041a2:	681b      	ldr	r3, [r3, #0]
240041a4:	f042 0201 	orr.w	r2, r2, #1
240041a8:	601a      	str	r2, [r3, #0]
240041aa:	e009      	b.n	240041c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240041ac:	68fb      	ldr	r3, [r7, #12]
240041ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
240041b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
240041b4:	68fb      	ldr	r3, [r7, #12]
240041b6:	2200      	movs	r2, #0
240041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
240041bc:	2301      	movs	r3, #1
240041be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
240041c0:	7dfb      	ldrb	r3, [r7, #23]
}
240041c2:	4618      	mov	r0, r3
240041c4:	3718      	adds	r7, #24
240041c6:	46bd      	mov	sp, r7
240041c8:	bd80      	pop	{r7, pc}
240041ca:	bf00      	nop
240041cc:	40020010 	.word	0x40020010
240041d0:	40020028 	.word	0x40020028
240041d4:	40020040 	.word	0x40020040
240041d8:	40020058 	.word	0x40020058
240041dc:	40020070 	.word	0x40020070
240041e0:	40020088 	.word	0x40020088
240041e4:	400200a0 	.word	0x400200a0
240041e8:	400200b8 	.word	0x400200b8
240041ec:	40020410 	.word	0x40020410
240041f0:	40020428 	.word	0x40020428
240041f4:	40020440 	.word	0x40020440
240041f8:	40020458 	.word	0x40020458
240041fc:	40020470 	.word	0x40020470
24004200:	40020488 	.word	0x40020488
24004204:	400204a0 	.word	0x400204a0
24004208:	400204b8 	.word	0x400204b8
2400420c:	58025408 	.word	0x58025408
24004210:	5802541c 	.word	0x5802541c
24004214:	58025430 	.word	0x58025430
24004218:	58025444 	.word	0x58025444
2400421c:	58025458 	.word	0x58025458
24004220:	5802546c 	.word	0x5802546c
24004224:	58025480 	.word	0x58025480
24004228:	58025494 	.word	0x58025494

2400422c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
2400422c:	b580      	push	{r7, lr}
2400422e:	b086      	sub	sp, #24
24004230:	af00      	add	r7, sp, #0
24004232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24004234:	f7fd fff6 	bl	24002224 <HAL_GetTick>
24004238:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400423a:	687b      	ldr	r3, [r7, #4]
2400423c:	2b00      	cmp	r3, #0
2400423e:	d101      	bne.n	24004244 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24004240:	2301      	movs	r3, #1
24004242:	e2dc      	b.n	240047fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24004244:	687b      	ldr	r3, [r7, #4]
24004246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400424a:	b2db      	uxtb	r3, r3
2400424c:	2b02      	cmp	r3, #2
2400424e:	d008      	beq.n	24004262 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004250:	687b      	ldr	r3, [r7, #4]
24004252:	2280      	movs	r2, #128	; 0x80
24004254:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24004256:	687b      	ldr	r3, [r7, #4]
24004258:	2200      	movs	r2, #0
2400425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
2400425e:	2301      	movs	r3, #1
24004260:	e2cd      	b.n	240047fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004262:	687b      	ldr	r3, [r7, #4]
24004264:	681b      	ldr	r3, [r3, #0]
24004266:	4a76      	ldr	r2, [pc, #472]	; (24004440 <HAL_DMA_Abort+0x214>)
24004268:	4293      	cmp	r3, r2
2400426a:	d04a      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
2400426c:	687b      	ldr	r3, [r7, #4]
2400426e:	681b      	ldr	r3, [r3, #0]
24004270:	4a74      	ldr	r2, [pc, #464]	; (24004444 <HAL_DMA_Abort+0x218>)
24004272:	4293      	cmp	r3, r2
24004274:	d045      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
24004276:	687b      	ldr	r3, [r7, #4]
24004278:	681b      	ldr	r3, [r3, #0]
2400427a:	4a73      	ldr	r2, [pc, #460]	; (24004448 <HAL_DMA_Abort+0x21c>)
2400427c:	4293      	cmp	r3, r2
2400427e:	d040      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
24004280:	687b      	ldr	r3, [r7, #4]
24004282:	681b      	ldr	r3, [r3, #0]
24004284:	4a71      	ldr	r2, [pc, #452]	; (2400444c <HAL_DMA_Abort+0x220>)
24004286:	4293      	cmp	r3, r2
24004288:	d03b      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
2400428a:	687b      	ldr	r3, [r7, #4]
2400428c:	681b      	ldr	r3, [r3, #0]
2400428e:	4a70      	ldr	r2, [pc, #448]	; (24004450 <HAL_DMA_Abort+0x224>)
24004290:	4293      	cmp	r3, r2
24004292:	d036      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
24004294:	687b      	ldr	r3, [r7, #4]
24004296:	681b      	ldr	r3, [r3, #0]
24004298:	4a6e      	ldr	r2, [pc, #440]	; (24004454 <HAL_DMA_Abort+0x228>)
2400429a:	4293      	cmp	r3, r2
2400429c:	d031      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
2400429e:	687b      	ldr	r3, [r7, #4]
240042a0:	681b      	ldr	r3, [r3, #0]
240042a2:	4a6d      	ldr	r2, [pc, #436]	; (24004458 <HAL_DMA_Abort+0x22c>)
240042a4:	4293      	cmp	r3, r2
240042a6:	d02c      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042a8:	687b      	ldr	r3, [r7, #4]
240042aa:	681b      	ldr	r3, [r3, #0]
240042ac:	4a6b      	ldr	r2, [pc, #428]	; (2400445c <HAL_DMA_Abort+0x230>)
240042ae:	4293      	cmp	r3, r2
240042b0:	d027      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042b2:	687b      	ldr	r3, [r7, #4]
240042b4:	681b      	ldr	r3, [r3, #0]
240042b6:	4a6a      	ldr	r2, [pc, #424]	; (24004460 <HAL_DMA_Abort+0x234>)
240042b8:	4293      	cmp	r3, r2
240042ba:	d022      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042bc:	687b      	ldr	r3, [r7, #4]
240042be:	681b      	ldr	r3, [r3, #0]
240042c0:	4a68      	ldr	r2, [pc, #416]	; (24004464 <HAL_DMA_Abort+0x238>)
240042c2:	4293      	cmp	r3, r2
240042c4:	d01d      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042c6:	687b      	ldr	r3, [r7, #4]
240042c8:	681b      	ldr	r3, [r3, #0]
240042ca:	4a67      	ldr	r2, [pc, #412]	; (24004468 <HAL_DMA_Abort+0x23c>)
240042cc:	4293      	cmp	r3, r2
240042ce:	d018      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042d0:	687b      	ldr	r3, [r7, #4]
240042d2:	681b      	ldr	r3, [r3, #0]
240042d4:	4a65      	ldr	r2, [pc, #404]	; (2400446c <HAL_DMA_Abort+0x240>)
240042d6:	4293      	cmp	r3, r2
240042d8:	d013      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042da:	687b      	ldr	r3, [r7, #4]
240042dc:	681b      	ldr	r3, [r3, #0]
240042de:	4a64      	ldr	r2, [pc, #400]	; (24004470 <HAL_DMA_Abort+0x244>)
240042e0:	4293      	cmp	r3, r2
240042e2:	d00e      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042e4:	687b      	ldr	r3, [r7, #4]
240042e6:	681b      	ldr	r3, [r3, #0]
240042e8:	4a62      	ldr	r2, [pc, #392]	; (24004474 <HAL_DMA_Abort+0x248>)
240042ea:	4293      	cmp	r3, r2
240042ec:	d009      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042ee:	687b      	ldr	r3, [r7, #4]
240042f0:	681b      	ldr	r3, [r3, #0]
240042f2:	4a61      	ldr	r2, [pc, #388]	; (24004478 <HAL_DMA_Abort+0x24c>)
240042f4:	4293      	cmp	r3, r2
240042f6:	d004      	beq.n	24004302 <HAL_DMA_Abort+0xd6>
240042f8:	687b      	ldr	r3, [r7, #4]
240042fa:	681b      	ldr	r3, [r3, #0]
240042fc:	4a5f      	ldr	r2, [pc, #380]	; (2400447c <HAL_DMA_Abort+0x250>)
240042fe:	4293      	cmp	r3, r2
24004300:	d101      	bne.n	24004306 <HAL_DMA_Abort+0xda>
24004302:	2301      	movs	r3, #1
24004304:	e000      	b.n	24004308 <HAL_DMA_Abort+0xdc>
24004306:	2300      	movs	r3, #0
24004308:	2b00      	cmp	r3, #0
2400430a:	d013      	beq.n	24004334 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
2400430c:	687b      	ldr	r3, [r7, #4]
2400430e:	681b      	ldr	r3, [r3, #0]
24004310:	681a      	ldr	r2, [r3, #0]
24004312:	687b      	ldr	r3, [r7, #4]
24004314:	681b      	ldr	r3, [r3, #0]
24004316:	f022 021e 	bic.w	r2, r2, #30
2400431a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2400431c:	687b      	ldr	r3, [r7, #4]
2400431e:	681b      	ldr	r3, [r3, #0]
24004320:	695a      	ldr	r2, [r3, #20]
24004322:	687b      	ldr	r3, [r7, #4]
24004324:	681b      	ldr	r3, [r3, #0]
24004326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400432a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
2400432c:	687b      	ldr	r3, [r7, #4]
2400432e:	681b      	ldr	r3, [r3, #0]
24004330:	617b      	str	r3, [r7, #20]
24004332:	e00a      	b.n	2400434a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004334:	687b      	ldr	r3, [r7, #4]
24004336:	681b      	ldr	r3, [r3, #0]
24004338:	681a      	ldr	r2, [r3, #0]
2400433a:	687b      	ldr	r3, [r7, #4]
2400433c:	681b      	ldr	r3, [r3, #0]
2400433e:	f022 020e 	bic.w	r2, r2, #14
24004342:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24004344:	687b      	ldr	r3, [r7, #4]
24004346:	681b      	ldr	r3, [r3, #0]
24004348:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400434a:	687b      	ldr	r3, [r7, #4]
2400434c:	681b      	ldr	r3, [r3, #0]
2400434e:	4a3c      	ldr	r2, [pc, #240]	; (24004440 <HAL_DMA_Abort+0x214>)
24004350:	4293      	cmp	r3, r2
24004352:	d072      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004354:	687b      	ldr	r3, [r7, #4]
24004356:	681b      	ldr	r3, [r3, #0]
24004358:	4a3a      	ldr	r2, [pc, #232]	; (24004444 <HAL_DMA_Abort+0x218>)
2400435a:	4293      	cmp	r3, r2
2400435c:	d06d      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
2400435e:	687b      	ldr	r3, [r7, #4]
24004360:	681b      	ldr	r3, [r3, #0]
24004362:	4a39      	ldr	r2, [pc, #228]	; (24004448 <HAL_DMA_Abort+0x21c>)
24004364:	4293      	cmp	r3, r2
24004366:	d068      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004368:	687b      	ldr	r3, [r7, #4]
2400436a:	681b      	ldr	r3, [r3, #0]
2400436c:	4a37      	ldr	r2, [pc, #220]	; (2400444c <HAL_DMA_Abort+0x220>)
2400436e:	4293      	cmp	r3, r2
24004370:	d063      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004372:	687b      	ldr	r3, [r7, #4]
24004374:	681b      	ldr	r3, [r3, #0]
24004376:	4a36      	ldr	r2, [pc, #216]	; (24004450 <HAL_DMA_Abort+0x224>)
24004378:	4293      	cmp	r3, r2
2400437a:	d05e      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
2400437c:	687b      	ldr	r3, [r7, #4]
2400437e:	681b      	ldr	r3, [r3, #0]
24004380:	4a34      	ldr	r2, [pc, #208]	; (24004454 <HAL_DMA_Abort+0x228>)
24004382:	4293      	cmp	r3, r2
24004384:	d059      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004386:	687b      	ldr	r3, [r7, #4]
24004388:	681b      	ldr	r3, [r3, #0]
2400438a:	4a33      	ldr	r2, [pc, #204]	; (24004458 <HAL_DMA_Abort+0x22c>)
2400438c:	4293      	cmp	r3, r2
2400438e:	d054      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004390:	687b      	ldr	r3, [r7, #4]
24004392:	681b      	ldr	r3, [r3, #0]
24004394:	4a31      	ldr	r2, [pc, #196]	; (2400445c <HAL_DMA_Abort+0x230>)
24004396:	4293      	cmp	r3, r2
24004398:	d04f      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
2400439a:	687b      	ldr	r3, [r7, #4]
2400439c:	681b      	ldr	r3, [r3, #0]
2400439e:	4a30      	ldr	r2, [pc, #192]	; (24004460 <HAL_DMA_Abort+0x234>)
240043a0:	4293      	cmp	r3, r2
240043a2:	d04a      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043a4:	687b      	ldr	r3, [r7, #4]
240043a6:	681b      	ldr	r3, [r3, #0]
240043a8:	4a2e      	ldr	r2, [pc, #184]	; (24004464 <HAL_DMA_Abort+0x238>)
240043aa:	4293      	cmp	r3, r2
240043ac:	d045      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043ae:	687b      	ldr	r3, [r7, #4]
240043b0:	681b      	ldr	r3, [r3, #0]
240043b2:	4a2d      	ldr	r2, [pc, #180]	; (24004468 <HAL_DMA_Abort+0x23c>)
240043b4:	4293      	cmp	r3, r2
240043b6:	d040      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043b8:	687b      	ldr	r3, [r7, #4]
240043ba:	681b      	ldr	r3, [r3, #0]
240043bc:	4a2b      	ldr	r2, [pc, #172]	; (2400446c <HAL_DMA_Abort+0x240>)
240043be:	4293      	cmp	r3, r2
240043c0:	d03b      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043c2:	687b      	ldr	r3, [r7, #4]
240043c4:	681b      	ldr	r3, [r3, #0]
240043c6:	4a2a      	ldr	r2, [pc, #168]	; (24004470 <HAL_DMA_Abort+0x244>)
240043c8:	4293      	cmp	r3, r2
240043ca:	d036      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043cc:	687b      	ldr	r3, [r7, #4]
240043ce:	681b      	ldr	r3, [r3, #0]
240043d0:	4a28      	ldr	r2, [pc, #160]	; (24004474 <HAL_DMA_Abort+0x248>)
240043d2:	4293      	cmp	r3, r2
240043d4:	d031      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043d6:	687b      	ldr	r3, [r7, #4]
240043d8:	681b      	ldr	r3, [r3, #0]
240043da:	4a27      	ldr	r2, [pc, #156]	; (24004478 <HAL_DMA_Abort+0x24c>)
240043dc:	4293      	cmp	r3, r2
240043de:	d02c      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043e0:	687b      	ldr	r3, [r7, #4]
240043e2:	681b      	ldr	r3, [r3, #0]
240043e4:	4a25      	ldr	r2, [pc, #148]	; (2400447c <HAL_DMA_Abort+0x250>)
240043e6:	4293      	cmp	r3, r2
240043e8:	d027      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043ea:	687b      	ldr	r3, [r7, #4]
240043ec:	681b      	ldr	r3, [r3, #0]
240043ee:	4a24      	ldr	r2, [pc, #144]	; (24004480 <HAL_DMA_Abort+0x254>)
240043f0:	4293      	cmp	r3, r2
240043f2:	d022      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043f4:	687b      	ldr	r3, [r7, #4]
240043f6:	681b      	ldr	r3, [r3, #0]
240043f8:	4a22      	ldr	r2, [pc, #136]	; (24004484 <HAL_DMA_Abort+0x258>)
240043fa:	4293      	cmp	r3, r2
240043fc:	d01d      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
240043fe:	687b      	ldr	r3, [r7, #4]
24004400:	681b      	ldr	r3, [r3, #0]
24004402:	4a21      	ldr	r2, [pc, #132]	; (24004488 <HAL_DMA_Abort+0x25c>)
24004404:	4293      	cmp	r3, r2
24004406:	d018      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004408:	687b      	ldr	r3, [r7, #4]
2400440a:	681b      	ldr	r3, [r3, #0]
2400440c:	4a1f      	ldr	r2, [pc, #124]	; (2400448c <HAL_DMA_Abort+0x260>)
2400440e:	4293      	cmp	r3, r2
24004410:	d013      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004412:	687b      	ldr	r3, [r7, #4]
24004414:	681b      	ldr	r3, [r3, #0]
24004416:	4a1e      	ldr	r2, [pc, #120]	; (24004490 <HAL_DMA_Abort+0x264>)
24004418:	4293      	cmp	r3, r2
2400441a:	d00e      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
2400441c:	687b      	ldr	r3, [r7, #4]
2400441e:	681b      	ldr	r3, [r3, #0]
24004420:	4a1c      	ldr	r2, [pc, #112]	; (24004494 <HAL_DMA_Abort+0x268>)
24004422:	4293      	cmp	r3, r2
24004424:	d009      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004426:	687b      	ldr	r3, [r7, #4]
24004428:	681b      	ldr	r3, [r3, #0]
2400442a:	4a1b      	ldr	r2, [pc, #108]	; (24004498 <HAL_DMA_Abort+0x26c>)
2400442c:	4293      	cmp	r3, r2
2400442e:	d004      	beq.n	2400443a <HAL_DMA_Abort+0x20e>
24004430:	687b      	ldr	r3, [r7, #4]
24004432:	681b      	ldr	r3, [r3, #0]
24004434:	4a19      	ldr	r2, [pc, #100]	; (2400449c <HAL_DMA_Abort+0x270>)
24004436:	4293      	cmp	r3, r2
24004438:	d132      	bne.n	240044a0 <HAL_DMA_Abort+0x274>
2400443a:	2301      	movs	r3, #1
2400443c:	e031      	b.n	240044a2 <HAL_DMA_Abort+0x276>
2400443e:	bf00      	nop
24004440:	40020010 	.word	0x40020010
24004444:	40020028 	.word	0x40020028
24004448:	40020040 	.word	0x40020040
2400444c:	40020058 	.word	0x40020058
24004450:	40020070 	.word	0x40020070
24004454:	40020088 	.word	0x40020088
24004458:	400200a0 	.word	0x400200a0
2400445c:	400200b8 	.word	0x400200b8
24004460:	40020410 	.word	0x40020410
24004464:	40020428 	.word	0x40020428
24004468:	40020440 	.word	0x40020440
2400446c:	40020458 	.word	0x40020458
24004470:	40020470 	.word	0x40020470
24004474:	40020488 	.word	0x40020488
24004478:	400204a0 	.word	0x400204a0
2400447c:	400204b8 	.word	0x400204b8
24004480:	58025408 	.word	0x58025408
24004484:	5802541c 	.word	0x5802541c
24004488:	58025430 	.word	0x58025430
2400448c:	58025444 	.word	0x58025444
24004490:	58025458 	.word	0x58025458
24004494:	5802546c 	.word	0x5802546c
24004498:	58025480 	.word	0x58025480
2400449c:	58025494 	.word	0x58025494
240044a0:	2300      	movs	r3, #0
240044a2:	2b00      	cmp	r3, #0
240044a4:	d007      	beq.n	240044b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240044a6:	687b      	ldr	r3, [r7, #4]
240044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240044aa:	681a      	ldr	r2, [r3, #0]
240044ac:	687b      	ldr	r3, [r7, #4]
240044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240044b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240044b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
240044b6:	687b      	ldr	r3, [r7, #4]
240044b8:	681b      	ldr	r3, [r3, #0]
240044ba:	4a6d      	ldr	r2, [pc, #436]	; (24004670 <HAL_DMA_Abort+0x444>)
240044bc:	4293      	cmp	r3, r2
240044be:	d04a      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044c0:	687b      	ldr	r3, [r7, #4]
240044c2:	681b      	ldr	r3, [r3, #0]
240044c4:	4a6b      	ldr	r2, [pc, #428]	; (24004674 <HAL_DMA_Abort+0x448>)
240044c6:	4293      	cmp	r3, r2
240044c8:	d045      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044ca:	687b      	ldr	r3, [r7, #4]
240044cc:	681b      	ldr	r3, [r3, #0]
240044ce:	4a6a      	ldr	r2, [pc, #424]	; (24004678 <HAL_DMA_Abort+0x44c>)
240044d0:	4293      	cmp	r3, r2
240044d2:	d040      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044d4:	687b      	ldr	r3, [r7, #4]
240044d6:	681b      	ldr	r3, [r3, #0]
240044d8:	4a68      	ldr	r2, [pc, #416]	; (2400467c <HAL_DMA_Abort+0x450>)
240044da:	4293      	cmp	r3, r2
240044dc:	d03b      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044de:	687b      	ldr	r3, [r7, #4]
240044e0:	681b      	ldr	r3, [r3, #0]
240044e2:	4a67      	ldr	r2, [pc, #412]	; (24004680 <HAL_DMA_Abort+0x454>)
240044e4:	4293      	cmp	r3, r2
240044e6:	d036      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044e8:	687b      	ldr	r3, [r7, #4]
240044ea:	681b      	ldr	r3, [r3, #0]
240044ec:	4a65      	ldr	r2, [pc, #404]	; (24004684 <HAL_DMA_Abort+0x458>)
240044ee:	4293      	cmp	r3, r2
240044f0:	d031      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044f2:	687b      	ldr	r3, [r7, #4]
240044f4:	681b      	ldr	r3, [r3, #0]
240044f6:	4a64      	ldr	r2, [pc, #400]	; (24004688 <HAL_DMA_Abort+0x45c>)
240044f8:	4293      	cmp	r3, r2
240044fa:	d02c      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
240044fc:	687b      	ldr	r3, [r7, #4]
240044fe:	681b      	ldr	r3, [r3, #0]
24004500:	4a62      	ldr	r2, [pc, #392]	; (2400468c <HAL_DMA_Abort+0x460>)
24004502:	4293      	cmp	r3, r2
24004504:	d027      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
24004506:	687b      	ldr	r3, [r7, #4]
24004508:	681b      	ldr	r3, [r3, #0]
2400450a:	4a61      	ldr	r2, [pc, #388]	; (24004690 <HAL_DMA_Abort+0x464>)
2400450c:	4293      	cmp	r3, r2
2400450e:	d022      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
24004510:	687b      	ldr	r3, [r7, #4]
24004512:	681b      	ldr	r3, [r3, #0]
24004514:	4a5f      	ldr	r2, [pc, #380]	; (24004694 <HAL_DMA_Abort+0x468>)
24004516:	4293      	cmp	r3, r2
24004518:	d01d      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
2400451a:	687b      	ldr	r3, [r7, #4]
2400451c:	681b      	ldr	r3, [r3, #0]
2400451e:	4a5e      	ldr	r2, [pc, #376]	; (24004698 <HAL_DMA_Abort+0x46c>)
24004520:	4293      	cmp	r3, r2
24004522:	d018      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
24004524:	687b      	ldr	r3, [r7, #4]
24004526:	681b      	ldr	r3, [r3, #0]
24004528:	4a5c      	ldr	r2, [pc, #368]	; (2400469c <HAL_DMA_Abort+0x470>)
2400452a:	4293      	cmp	r3, r2
2400452c:	d013      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
2400452e:	687b      	ldr	r3, [r7, #4]
24004530:	681b      	ldr	r3, [r3, #0]
24004532:	4a5b      	ldr	r2, [pc, #364]	; (240046a0 <HAL_DMA_Abort+0x474>)
24004534:	4293      	cmp	r3, r2
24004536:	d00e      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
24004538:	687b      	ldr	r3, [r7, #4]
2400453a:	681b      	ldr	r3, [r3, #0]
2400453c:	4a59      	ldr	r2, [pc, #356]	; (240046a4 <HAL_DMA_Abort+0x478>)
2400453e:	4293      	cmp	r3, r2
24004540:	d009      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
24004542:	687b      	ldr	r3, [r7, #4]
24004544:	681b      	ldr	r3, [r3, #0]
24004546:	4a58      	ldr	r2, [pc, #352]	; (240046a8 <HAL_DMA_Abort+0x47c>)
24004548:	4293      	cmp	r3, r2
2400454a:	d004      	beq.n	24004556 <HAL_DMA_Abort+0x32a>
2400454c:	687b      	ldr	r3, [r7, #4]
2400454e:	681b      	ldr	r3, [r3, #0]
24004550:	4a56      	ldr	r2, [pc, #344]	; (240046ac <HAL_DMA_Abort+0x480>)
24004552:	4293      	cmp	r3, r2
24004554:	d108      	bne.n	24004568 <HAL_DMA_Abort+0x33c>
24004556:	687b      	ldr	r3, [r7, #4]
24004558:	681b      	ldr	r3, [r3, #0]
2400455a:	681a      	ldr	r2, [r3, #0]
2400455c:	687b      	ldr	r3, [r7, #4]
2400455e:	681b      	ldr	r3, [r3, #0]
24004560:	f022 0201 	bic.w	r2, r2, #1
24004564:	601a      	str	r2, [r3, #0]
24004566:	e007      	b.n	24004578 <HAL_DMA_Abort+0x34c>
24004568:	687b      	ldr	r3, [r7, #4]
2400456a:	681b      	ldr	r3, [r3, #0]
2400456c:	681a      	ldr	r2, [r3, #0]
2400456e:	687b      	ldr	r3, [r7, #4]
24004570:	681b      	ldr	r3, [r3, #0]
24004572:	f022 0201 	bic.w	r2, r2, #1
24004576:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24004578:	e013      	b.n	240045a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400457a:	f7fd fe53 	bl	24002224 <HAL_GetTick>
2400457e:	4602      	mov	r2, r0
24004580:	693b      	ldr	r3, [r7, #16]
24004582:	1ad3      	subs	r3, r2, r3
24004584:	2b05      	cmp	r3, #5
24004586:	d90c      	bls.n	240045a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004588:	687b      	ldr	r3, [r7, #4]
2400458a:	2220      	movs	r2, #32
2400458c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
2400458e:	687b      	ldr	r3, [r7, #4]
24004590:	2203      	movs	r2, #3
24004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24004596:	687b      	ldr	r3, [r7, #4]
24004598:	2200      	movs	r2, #0
2400459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
2400459e:	2301      	movs	r3, #1
240045a0:	e12d      	b.n	240047fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240045a2:	697b      	ldr	r3, [r7, #20]
240045a4:	681b      	ldr	r3, [r3, #0]
240045a6:	f003 0301 	and.w	r3, r3, #1
240045aa:	2b00      	cmp	r3, #0
240045ac:	d1e5      	bne.n	2400457a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240045ae:	687b      	ldr	r3, [r7, #4]
240045b0:	681b      	ldr	r3, [r3, #0]
240045b2:	4a2f      	ldr	r2, [pc, #188]	; (24004670 <HAL_DMA_Abort+0x444>)
240045b4:	4293      	cmp	r3, r2
240045b6:	d04a      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045b8:	687b      	ldr	r3, [r7, #4]
240045ba:	681b      	ldr	r3, [r3, #0]
240045bc:	4a2d      	ldr	r2, [pc, #180]	; (24004674 <HAL_DMA_Abort+0x448>)
240045be:	4293      	cmp	r3, r2
240045c0:	d045      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045c2:	687b      	ldr	r3, [r7, #4]
240045c4:	681b      	ldr	r3, [r3, #0]
240045c6:	4a2c      	ldr	r2, [pc, #176]	; (24004678 <HAL_DMA_Abort+0x44c>)
240045c8:	4293      	cmp	r3, r2
240045ca:	d040      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045cc:	687b      	ldr	r3, [r7, #4]
240045ce:	681b      	ldr	r3, [r3, #0]
240045d0:	4a2a      	ldr	r2, [pc, #168]	; (2400467c <HAL_DMA_Abort+0x450>)
240045d2:	4293      	cmp	r3, r2
240045d4:	d03b      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045d6:	687b      	ldr	r3, [r7, #4]
240045d8:	681b      	ldr	r3, [r3, #0]
240045da:	4a29      	ldr	r2, [pc, #164]	; (24004680 <HAL_DMA_Abort+0x454>)
240045dc:	4293      	cmp	r3, r2
240045de:	d036      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045e0:	687b      	ldr	r3, [r7, #4]
240045e2:	681b      	ldr	r3, [r3, #0]
240045e4:	4a27      	ldr	r2, [pc, #156]	; (24004684 <HAL_DMA_Abort+0x458>)
240045e6:	4293      	cmp	r3, r2
240045e8:	d031      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045ea:	687b      	ldr	r3, [r7, #4]
240045ec:	681b      	ldr	r3, [r3, #0]
240045ee:	4a26      	ldr	r2, [pc, #152]	; (24004688 <HAL_DMA_Abort+0x45c>)
240045f0:	4293      	cmp	r3, r2
240045f2:	d02c      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045f4:	687b      	ldr	r3, [r7, #4]
240045f6:	681b      	ldr	r3, [r3, #0]
240045f8:	4a24      	ldr	r2, [pc, #144]	; (2400468c <HAL_DMA_Abort+0x460>)
240045fa:	4293      	cmp	r3, r2
240045fc:	d027      	beq.n	2400464e <HAL_DMA_Abort+0x422>
240045fe:	687b      	ldr	r3, [r7, #4]
24004600:	681b      	ldr	r3, [r3, #0]
24004602:	4a23      	ldr	r2, [pc, #140]	; (24004690 <HAL_DMA_Abort+0x464>)
24004604:	4293      	cmp	r3, r2
24004606:	d022      	beq.n	2400464e <HAL_DMA_Abort+0x422>
24004608:	687b      	ldr	r3, [r7, #4]
2400460a:	681b      	ldr	r3, [r3, #0]
2400460c:	4a21      	ldr	r2, [pc, #132]	; (24004694 <HAL_DMA_Abort+0x468>)
2400460e:	4293      	cmp	r3, r2
24004610:	d01d      	beq.n	2400464e <HAL_DMA_Abort+0x422>
24004612:	687b      	ldr	r3, [r7, #4]
24004614:	681b      	ldr	r3, [r3, #0]
24004616:	4a20      	ldr	r2, [pc, #128]	; (24004698 <HAL_DMA_Abort+0x46c>)
24004618:	4293      	cmp	r3, r2
2400461a:	d018      	beq.n	2400464e <HAL_DMA_Abort+0x422>
2400461c:	687b      	ldr	r3, [r7, #4]
2400461e:	681b      	ldr	r3, [r3, #0]
24004620:	4a1e      	ldr	r2, [pc, #120]	; (2400469c <HAL_DMA_Abort+0x470>)
24004622:	4293      	cmp	r3, r2
24004624:	d013      	beq.n	2400464e <HAL_DMA_Abort+0x422>
24004626:	687b      	ldr	r3, [r7, #4]
24004628:	681b      	ldr	r3, [r3, #0]
2400462a:	4a1d      	ldr	r2, [pc, #116]	; (240046a0 <HAL_DMA_Abort+0x474>)
2400462c:	4293      	cmp	r3, r2
2400462e:	d00e      	beq.n	2400464e <HAL_DMA_Abort+0x422>
24004630:	687b      	ldr	r3, [r7, #4]
24004632:	681b      	ldr	r3, [r3, #0]
24004634:	4a1b      	ldr	r2, [pc, #108]	; (240046a4 <HAL_DMA_Abort+0x478>)
24004636:	4293      	cmp	r3, r2
24004638:	d009      	beq.n	2400464e <HAL_DMA_Abort+0x422>
2400463a:	687b      	ldr	r3, [r7, #4]
2400463c:	681b      	ldr	r3, [r3, #0]
2400463e:	4a1a      	ldr	r2, [pc, #104]	; (240046a8 <HAL_DMA_Abort+0x47c>)
24004640:	4293      	cmp	r3, r2
24004642:	d004      	beq.n	2400464e <HAL_DMA_Abort+0x422>
24004644:	687b      	ldr	r3, [r7, #4]
24004646:	681b      	ldr	r3, [r3, #0]
24004648:	4a18      	ldr	r2, [pc, #96]	; (240046ac <HAL_DMA_Abort+0x480>)
2400464a:	4293      	cmp	r3, r2
2400464c:	d101      	bne.n	24004652 <HAL_DMA_Abort+0x426>
2400464e:	2301      	movs	r3, #1
24004650:	e000      	b.n	24004654 <HAL_DMA_Abort+0x428>
24004652:	2300      	movs	r3, #0
24004654:	2b00      	cmp	r3, #0
24004656:	d02b      	beq.n	240046b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004658:	687b      	ldr	r3, [r7, #4]
2400465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400465c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400465e:	687b      	ldr	r3, [r7, #4]
24004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004662:	f003 031f 	and.w	r3, r3, #31
24004666:	223f      	movs	r2, #63	; 0x3f
24004668:	409a      	lsls	r2, r3
2400466a:	68bb      	ldr	r3, [r7, #8]
2400466c:	609a      	str	r2, [r3, #8]
2400466e:	e02a      	b.n	240046c6 <HAL_DMA_Abort+0x49a>
24004670:	40020010 	.word	0x40020010
24004674:	40020028 	.word	0x40020028
24004678:	40020040 	.word	0x40020040
2400467c:	40020058 	.word	0x40020058
24004680:	40020070 	.word	0x40020070
24004684:	40020088 	.word	0x40020088
24004688:	400200a0 	.word	0x400200a0
2400468c:	400200b8 	.word	0x400200b8
24004690:	40020410 	.word	0x40020410
24004694:	40020428 	.word	0x40020428
24004698:	40020440 	.word	0x40020440
2400469c:	40020458 	.word	0x40020458
240046a0:	40020470 	.word	0x40020470
240046a4:	40020488 	.word	0x40020488
240046a8:	400204a0 	.word	0x400204a0
240046ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240046b0:	687b      	ldr	r3, [r7, #4]
240046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240046b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240046b6:	687b      	ldr	r3, [r7, #4]
240046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240046ba:	f003 031f 	and.w	r3, r3, #31
240046be:	2201      	movs	r2, #1
240046c0:	409a      	lsls	r2, r3
240046c2:	68fb      	ldr	r3, [r7, #12]
240046c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240046c6:	687b      	ldr	r3, [r7, #4]
240046c8:	681b      	ldr	r3, [r3, #0]
240046ca:	4a4f      	ldr	r2, [pc, #316]	; (24004808 <HAL_DMA_Abort+0x5dc>)
240046cc:	4293      	cmp	r3, r2
240046ce:	d072      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240046d0:	687b      	ldr	r3, [r7, #4]
240046d2:	681b      	ldr	r3, [r3, #0]
240046d4:	4a4d      	ldr	r2, [pc, #308]	; (2400480c <HAL_DMA_Abort+0x5e0>)
240046d6:	4293      	cmp	r3, r2
240046d8:	d06d      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240046da:	687b      	ldr	r3, [r7, #4]
240046dc:	681b      	ldr	r3, [r3, #0]
240046de:	4a4c      	ldr	r2, [pc, #304]	; (24004810 <HAL_DMA_Abort+0x5e4>)
240046e0:	4293      	cmp	r3, r2
240046e2:	d068      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240046e4:	687b      	ldr	r3, [r7, #4]
240046e6:	681b      	ldr	r3, [r3, #0]
240046e8:	4a4a      	ldr	r2, [pc, #296]	; (24004814 <HAL_DMA_Abort+0x5e8>)
240046ea:	4293      	cmp	r3, r2
240046ec:	d063      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240046ee:	687b      	ldr	r3, [r7, #4]
240046f0:	681b      	ldr	r3, [r3, #0]
240046f2:	4a49      	ldr	r2, [pc, #292]	; (24004818 <HAL_DMA_Abort+0x5ec>)
240046f4:	4293      	cmp	r3, r2
240046f6:	d05e      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240046f8:	687b      	ldr	r3, [r7, #4]
240046fa:	681b      	ldr	r3, [r3, #0]
240046fc:	4a47      	ldr	r2, [pc, #284]	; (2400481c <HAL_DMA_Abort+0x5f0>)
240046fe:	4293      	cmp	r3, r2
24004700:	d059      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004702:	687b      	ldr	r3, [r7, #4]
24004704:	681b      	ldr	r3, [r3, #0]
24004706:	4a46      	ldr	r2, [pc, #280]	; (24004820 <HAL_DMA_Abort+0x5f4>)
24004708:	4293      	cmp	r3, r2
2400470a:	d054      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400470c:	687b      	ldr	r3, [r7, #4]
2400470e:	681b      	ldr	r3, [r3, #0]
24004710:	4a44      	ldr	r2, [pc, #272]	; (24004824 <HAL_DMA_Abort+0x5f8>)
24004712:	4293      	cmp	r3, r2
24004714:	d04f      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004716:	687b      	ldr	r3, [r7, #4]
24004718:	681b      	ldr	r3, [r3, #0]
2400471a:	4a43      	ldr	r2, [pc, #268]	; (24004828 <HAL_DMA_Abort+0x5fc>)
2400471c:	4293      	cmp	r3, r2
2400471e:	d04a      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004720:	687b      	ldr	r3, [r7, #4]
24004722:	681b      	ldr	r3, [r3, #0]
24004724:	4a41      	ldr	r2, [pc, #260]	; (2400482c <HAL_DMA_Abort+0x600>)
24004726:	4293      	cmp	r3, r2
24004728:	d045      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400472a:	687b      	ldr	r3, [r7, #4]
2400472c:	681b      	ldr	r3, [r3, #0]
2400472e:	4a40      	ldr	r2, [pc, #256]	; (24004830 <HAL_DMA_Abort+0x604>)
24004730:	4293      	cmp	r3, r2
24004732:	d040      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004734:	687b      	ldr	r3, [r7, #4]
24004736:	681b      	ldr	r3, [r3, #0]
24004738:	4a3e      	ldr	r2, [pc, #248]	; (24004834 <HAL_DMA_Abort+0x608>)
2400473a:	4293      	cmp	r3, r2
2400473c:	d03b      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400473e:	687b      	ldr	r3, [r7, #4]
24004740:	681b      	ldr	r3, [r3, #0]
24004742:	4a3d      	ldr	r2, [pc, #244]	; (24004838 <HAL_DMA_Abort+0x60c>)
24004744:	4293      	cmp	r3, r2
24004746:	d036      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004748:	687b      	ldr	r3, [r7, #4]
2400474a:	681b      	ldr	r3, [r3, #0]
2400474c:	4a3b      	ldr	r2, [pc, #236]	; (2400483c <HAL_DMA_Abort+0x610>)
2400474e:	4293      	cmp	r3, r2
24004750:	d031      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004752:	687b      	ldr	r3, [r7, #4]
24004754:	681b      	ldr	r3, [r3, #0]
24004756:	4a3a      	ldr	r2, [pc, #232]	; (24004840 <HAL_DMA_Abort+0x614>)
24004758:	4293      	cmp	r3, r2
2400475a:	d02c      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400475c:	687b      	ldr	r3, [r7, #4]
2400475e:	681b      	ldr	r3, [r3, #0]
24004760:	4a38      	ldr	r2, [pc, #224]	; (24004844 <HAL_DMA_Abort+0x618>)
24004762:	4293      	cmp	r3, r2
24004764:	d027      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004766:	687b      	ldr	r3, [r7, #4]
24004768:	681b      	ldr	r3, [r3, #0]
2400476a:	4a37      	ldr	r2, [pc, #220]	; (24004848 <HAL_DMA_Abort+0x61c>)
2400476c:	4293      	cmp	r3, r2
2400476e:	d022      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004770:	687b      	ldr	r3, [r7, #4]
24004772:	681b      	ldr	r3, [r3, #0]
24004774:	4a35      	ldr	r2, [pc, #212]	; (2400484c <HAL_DMA_Abort+0x620>)
24004776:	4293      	cmp	r3, r2
24004778:	d01d      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400477a:	687b      	ldr	r3, [r7, #4]
2400477c:	681b      	ldr	r3, [r3, #0]
2400477e:	4a34      	ldr	r2, [pc, #208]	; (24004850 <HAL_DMA_Abort+0x624>)
24004780:	4293      	cmp	r3, r2
24004782:	d018      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004784:	687b      	ldr	r3, [r7, #4]
24004786:	681b      	ldr	r3, [r3, #0]
24004788:	4a32      	ldr	r2, [pc, #200]	; (24004854 <HAL_DMA_Abort+0x628>)
2400478a:	4293      	cmp	r3, r2
2400478c:	d013      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
2400478e:	687b      	ldr	r3, [r7, #4]
24004790:	681b      	ldr	r3, [r3, #0]
24004792:	4a31      	ldr	r2, [pc, #196]	; (24004858 <HAL_DMA_Abort+0x62c>)
24004794:	4293      	cmp	r3, r2
24004796:	d00e      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
24004798:	687b      	ldr	r3, [r7, #4]
2400479a:	681b      	ldr	r3, [r3, #0]
2400479c:	4a2f      	ldr	r2, [pc, #188]	; (2400485c <HAL_DMA_Abort+0x630>)
2400479e:	4293      	cmp	r3, r2
240047a0:	d009      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240047a2:	687b      	ldr	r3, [r7, #4]
240047a4:	681b      	ldr	r3, [r3, #0]
240047a6:	4a2e      	ldr	r2, [pc, #184]	; (24004860 <HAL_DMA_Abort+0x634>)
240047a8:	4293      	cmp	r3, r2
240047aa:	d004      	beq.n	240047b6 <HAL_DMA_Abort+0x58a>
240047ac:	687b      	ldr	r3, [r7, #4]
240047ae:	681b      	ldr	r3, [r3, #0]
240047b0:	4a2c      	ldr	r2, [pc, #176]	; (24004864 <HAL_DMA_Abort+0x638>)
240047b2:	4293      	cmp	r3, r2
240047b4:	d101      	bne.n	240047ba <HAL_DMA_Abort+0x58e>
240047b6:	2301      	movs	r3, #1
240047b8:	e000      	b.n	240047bc <HAL_DMA_Abort+0x590>
240047ba:	2300      	movs	r3, #0
240047bc:	2b00      	cmp	r3, #0
240047be:	d015      	beq.n	240047ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240047c0:	687b      	ldr	r3, [r7, #4]
240047c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240047c4:	687a      	ldr	r2, [r7, #4]
240047c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
240047c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240047ca:	687b      	ldr	r3, [r7, #4]
240047cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047ce:	2b00      	cmp	r3, #0
240047d0:	d00c      	beq.n	240047ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240047d2:	687b      	ldr	r3, [r7, #4]
240047d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047d6:	681a      	ldr	r2, [r3, #0]
240047d8:	687b      	ldr	r3, [r7, #4]
240047da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240047e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240047e2:	687b      	ldr	r3, [r7, #4]
240047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240047e6:	687a      	ldr	r2, [r7, #4]
240047e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
240047ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
240047ec:	687b      	ldr	r3, [r7, #4]
240047ee:	2201      	movs	r2, #1
240047f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
240047f4:	687b      	ldr	r3, [r7, #4]
240047f6:	2200      	movs	r2, #0
240047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
240047fc:	2300      	movs	r3, #0
}
240047fe:	4618      	mov	r0, r3
24004800:	3718      	adds	r7, #24
24004802:	46bd      	mov	sp, r7
24004804:	bd80      	pop	{r7, pc}
24004806:	bf00      	nop
24004808:	40020010 	.word	0x40020010
2400480c:	40020028 	.word	0x40020028
24004810:	40020040 	.word	0x40020040
24004814:	40020058 	.word	0x40020058
24004818:	40020070 	.word	0x40020070
2400481c:	40020088 	.word	0x40020088
24004820:	400200a0 	.word	0x400200a0
24004824:	400200b8 	.word	0x400200b8
24004828:	40020410 	.word	0x40020410
2400482c:	40020428 	.word	0x40020428
24004830:	40020440 	.word	0x40020440
24004834:	40020458 	.word	0x40020458
24004838:	40020470 	.word	0x40020470
2400483c:	40020488 	.word	0x40020488
24004840:	400204a0 	.word	0x400204a0
24004844:	400204b8 	.word	0x400204b8
24004848:	58025408 	.word	0x58025408
2400484c:	5802541c 	.word	0x5802541c
24004850:	58025430 	.word	0x58025430
24004854:	58025444 	.word	0x58025444
24004858:	58025458 	.word	0x58025458
2400485c:	5802546c 	.word	0x5802546c
24004860:	58025480 	.word	0x58025480
24004864:	58025494 	.word	0x58025494

24004868 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24004868:	b580      	push	{r7, lr}
2400486a:	b084      	sub	sp, #16
2400486c:	af00      	add	r7, sp, #0
2400486e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004870:	687b      	ldr	r3, [r7, #4]
24004872:	2b00      	cmp	r3, #0
24004874:	d101      	bne.n	2400487a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24004876:	2301      	movs	r3, #1
24004878:	e237      	b.n	24004cea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
2400487a:	687b      	ldr	r3, [r7, #4]
2400487c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004880:	b2db      	uxtb	r3, r3
24004882:	2b02      	cmp	r3, #2
24004884:	d004      	beq.n	24004890 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004886:	687b      	ldr	r3, [r7, #4]
24004888:	2280      	movs	r2, #128	; 0x80
2400488a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2400488c:	2301      	movs	r3, #1
2400488e:	e22c      	b.n	24004cea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004890:	687b      	ldr	r3, [r7, #4]
24004892:	681b      	ldr	r3, [r3, #0]
24004894:	4a5c      	ldr	r2, [pc, #368]	; (24004a08 <HAL_DMA_Abort_IT+0x1a0>)
24004896:	4293      	cmp	r3, r2
24004898:	d04a      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
2400489a:	687b      	ldr	r3, [r7, #4]
2400489c:	681b      	ldr	r3, [r3, #0]
2400489e:	4a5b      	ldr	r2, [pc, #364]	; (24004a0c <HAL_DMA_Abort_IT+0x1a4>)
240048a0:	4293      	cmp	r3, r2
240048a2:	d045      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048a4:	687b      	ldr	r3, [r7, #4]
240048a6:	681b      	ldr	r3, [r3, #0]
240048a8:	4a59      	ldr	r2, [pc, #356]	; (24004a10 <HAL_DMA_Abort_IT+0x1a8>)
240048aa:	4293      	cmp	r3, r2
240048ac:	d040      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048ae:	687b      	ldr	r3, [r7, #4]
240048b0:	681b      	ldr	r3, [r3, #0]
240048b2:	4a58      	ldr	r2, [pc, #352]	; (24004a14 <HAL_DMA_Abort_IT+0x1ac>)
240048b4:	4293      	cmp	r3, r2
240048b6:	d03b      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048b8:	687b      	ldr	r3, [r7, #4]
240048ba:	681b      	ldr	r3, [r3, #0]
240048bc:	4a56      	ldr	r2, [pc, #344]	; (24004a18 <HAL_DMA_Abort_IT+0x1b0>)
240048be:	4293      	cmp	r3, r2
240048c0:	d036      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048c2:	687b      	ldr	r3, [r7, #4]
240048c4:	681b      	ldr	r3, [r3, #0]
240048c6:	4a55      	ldr	r2, [pc, #340]	; (24004a1c <HAL_DMA_Abort_IT+0x1b4>)
240048c8:	4293      	cmp	r3, r2
240048ca:	d031      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048cc:	687b      	ldr	r3, [r7, #4]
240048ce:	681b      	ldr	r3, [r3, #0]
240048d0:	4a53      	ldr	r2, [pc, #332]	; (24004a20 <HAL_DMA_Abort_IT+0x1b8>)
240048d2:	4293      	cmp	r3, r2
240048d4:	d02c      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048d6:	687b      	ldr	r3, [r7, #4]
240048d8:	681b      	ldr	r3, [r3, #0]
240048da:	4a52      	ldr	r2, [pc, #328]	; (24004a24 <HAL_DMA_Abort_IT+0x1bc>)
240048dc:	4293      	cmp	r3, r2
240048de:	d027      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048e0:	687b      	ldr	r3, [r7, #4]
240048e2:	681b      	ldr	r3, [r3, #0]
240048e4:	4a50      	ldr	r2, [pc, #320]	; (24004a28 <HAL_DMA_Abort_IT+0x1c0>)
240048e6:	4293      	cmp	r3, r2
240048e8:	d022      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048ea:	687b      	ldr	r3, [r7, #4]
240048ec:	681b      	ldr	r3, [r3, #0]
240048ee:	4a4f      	ldr	r2, [pc, #316]	; (24004a2c <HAL_DMA_Abort_IT+0x1c4>)
240048f0:	4293      	cmp	r3, r2
240048f2:	d01d      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048f4:	687b      	ldr	r3, [r7, #4]
240048f6:	681b      	ldr	r3, [r3, #0]
240048f8:	4a4d      	ldr	r2, [pc, #308]	; (24004a30 <HAL_DMA_Abort_IT+0x1c8>)
240048fa:	4293      	cmp	r3, r2
240048fc:	d018      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
240048fe:	687b      	ldr	r3, [r7, #4]
24004900:	681b      	ldr	r3, [r3, #0]
24004902:	4a4c      	ldr	r2, [pc, #304]	; (24004a34 <HAL_DMA_Abort_IT+0x1cc>)
24004904:	4293      	cmp	r3, r2
24004906:	d013      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
24004908:	687b      	ldr	r3, [r7, #4]
2400490a:	681b      	ldr	r3, [r3, #0]
2400490c:	4a4a      	ldr	r2, [pc, #296]	; (24004a38 <HAL_DMA_Abort_IT+0x1d0>)
2400490e:	4293      	cmp	r3, r2
24004910:	d00e      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
24004912:	687b      	ldr	r3, [r7, #4]
24004914:	681b      	ldr	r3, [r3, #0]
24004916:	4a49      	ldr	r2, [pc, #292]	; (24004a3c <HAL_DMA_Abort_IT+0x1d4>)
24004918:	4293      	cmp	r3, r2
2400491a:	d009      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
2400491c:	687b      	ldr	r3, [r7, #4]
2400491e:	681b      	ldr	r3, [r3, #0]
24004920:	4a47      	ldr	r2, [pc, #284]	; (24004a40 <HAL_DMA_Abort_IT+0x1d8>)
24004922:	4293      	cmp	r3, r2
24004924:	d004      	beq.n	24004930 <HAL_DMA_Abort_IT+0xc8>
24004926:	687b      	ldr	r3, [r7, #4]
24004928:	681b      	ldr	r3, [r3, #0]
2400492a:	4a46      	ldr	r2, [pc, #280]	; (24004a44 <HAL_DMA_Abort_IT+0x1dc>)
2400492c:	4293      	cmp	r3, r2
2400492e:	d101      	bne.n	24004934 <HAL_DMA_Abort_IT+0xcc>
24004930:	2301      	movs	r3, #1
24004932:	e000      	b.n	24004936 <HAL_DMA_Abort_IT+0xce>
24004934:	2300      	movs	r3, #0
24004936:	2b00      	cmp	r3, #0
24004938:	f000 8086 	beq.w	24004a48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
2400493c:	687b      	ldr	r3, [r7, #4]
2400493e:	2204      	movs	r2, #4
24004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
24004944:	687b      	ldr	r3, [r7, #4]
24004946:	681b      	ldr	r3, [r3, #0]
24004948:	4a2f      	ldr	r2, [pc, #188]	; (24004a08 <HAL_DMA_Abort_IT+0x1a0>)
2400494a:	4293      	cmp	r3, r2
2400494c:	d04a      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
2400494e:	687b      	ldr	r3, [r7, #4]
24004950:	681b      	ldr	r3, [r3, #0]
24004952:	4a2e      	ldr	r2, [pc, #184]	; (24004a0c <HAL_DMA_Abort_IT+0x1a4>)
24004954:	4293      	cmp	r3, r2
24004956:	d045      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
24004958:	687b      	ldr	r3, [r7, #4]
2400495a:	681b      	ldr	r3, [r3, #0]
2400495c:	4a2c      	ldr	r2, [pc, #176]	; (24004a10 <HAL_DMA_Abort_IT+0x1a8>)
2400495e:	4293      	cmp	r3, r2
24004960:	d040      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
24004962:	687b      	ldr	r3, [r7, #4]
24004964:	681b      	ldr	r3, [r3, #0]
24004966:	4a2b      	ldr	r2, [pc, #172]	; (24004a14 <HAL_DMA_Abort_IT+0x1ac>)
24004968:	4293      	cmp	r3, r2
2400496a:	d03b      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
2400496c:	687b      	ldr	r3, [r7, #4]
2400496e:	681b      	ldr	r3, [r3, #0]
24004970:	4a29      	ldr	r2, [pc, #164]	; (24004a18 <HAL_DMA_Abort_IT+0x1b0>)
24004972:	4293      	cmp	r3, r2
24004974:	d036      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
24004976:	687b      	ldr	r3, [r7, #4]
24004978:	681b      	ldr	r3, [r3, #0]
2400497a:	4a28      	ldr	r2, [pc, #160]	; (24004a1c <HAL_DMA_Abort_IT+0x1b4>)
2400497c:	4293      	cmp	r3, r2
2400497e:	d031      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
24004980:	687b      	ldr	r3, [r7, #4]
24004982:	681b      	ldr	r3, [r3, #0]
24004984:	4a26      	ldr	r2, [pc, #152]	; (24004a20 <HAL_DMA_Abort_IT+0x1b8>)
24004986:	4293      	cmp	r3, r2
24004988:	d02c      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
2400498a:	687b      	ldr	r3, [r7, #4]
2400498c:	681b      	ldr	r3, [r3, #0]
2400498e:	4a25      	ldr	r2, [pc, #148]	; (24004a24 <HAL_DMA_Abort_IT+0x1bc>)
24004990:	4293      	cmp	r3, r2
24004992:	d027      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
24004994:	687b      	ldr	r3, [r7, #4]
24004996:	681b      	ldr	r3, [r3, #0]
24004998:	4a23      	ldr	r2, [pc, #140]	; (24004a28 <HAL_DMA_Abort_IT+0x1c0>)
2400499a:	4293      	cmp	r3, r2
2400499c:	d022      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
2400499e:	687b      	ldr	r3, [r7, #4]
240049a0:	681b      	ldr	r3, [r3, #0]
240049a2:	4a22      	ldr	r2, [pc, #136]	; (24004a2c <HAL_DMA_Abort_IT+0x1c4>)
240049a4:	4293      	cmp	r3, r2
240049a6:	d01d      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049a8:	687b      	ldr	r3, [r7, #4]
240049aa:	681b      	ldr	r3, [r3, #0]
240049ac:	4a20      	ldr	r2, [pc, #128]	; (24004a30 <HAL_DMA_Abort_IT+0x1c8>)
240049ae:	4293      	cmp	r3, r2
240049b0:	d018      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049b2:	687b      	ldr	r3, [r7, #4]
240049b4:	681b      	ldr	r3, [r3, #0]
240049b6:	4a1f      	ldr	r2, [pc, #124]	; (24004a34 <HAL_DMA_Abort_IT+0x1cc>)
240049b8:	4293      	cmp	r3, r2
240049ba:	d013      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049bc:	687b      	ldr	r3, [r7, #4]
240049be:	681b      	ldr	r3, [r3, #0]
240049c0:	4a1d      	ldr	r2, [pc, #116]	; (24004a38 <HAL_DMA_Abort_IT+0x1d0>)
240049c2:	4293      	cmp	r3, r2
240049c4:	d00e      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049c6:	687b      	ldr	r3, [r7, #4]
240049c8:	681b      	ldr	r3, [r3, #0]
240049ca:	4a1c      	ldr	r2, [pc, #112]	; (24004a3c <HAL_DMA_Abort_IT+0x1d4>)
240049cc:	4293      	cmp	r3, r2
240049ce:	d009      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049d0:	687b      	ldr	r3, [r7, #4]
240049d2:	681b      	ldr	r3, [r3, #0]
240049d4:	4a1a      	ldr	r2, [pc, #104]	; (24004a40 <HAL_DMA_Abort_IT+0x1d8>)
240049d6:	4293      	cmp	r3, r2
240049d8:	d004      	beq.n	240049e4 <HAL_DMA_Abort_IT+0x17c>
240049da:	687b      	ldr	r3, [r7, #4]
240049dc:	681b      	ldr	r3, [r3, #0]
240049de:	4a19      	ldr	r2, [pc, #100]	; (24004a44 <HAL_DMA_Abort_IT+0x1dc>)
240049e0:	4293      	cmp	r3, r2
240049e2:	d108      	bne.n	240049f6 <HAL_DMA_Abort_IT+0x18e>
240049e4:	687b      	ldr	r3, [r7, #4]
240049e6:	681b      	ldr	r3, [r3, #0]
240049e8:	681a      	ldr	r2, [r3, #0]
240049ea:	687b      	ldr	r3, [r7, #4]
240049ec:	681b      	ldr	r3, [r3, #0]
240049ee:	f022 0201 	bic.w	r2, r2, #1
240049f2:	601a      	str	r2, [r3, #0]
240049f4:	e178      	b.n	24004ce8 <HAL_DMA_Abort_IT+0x480>
240049f6:	687b      	ldr	r3, [r7, #4]
240049f8:	681b      	ldr	r3, [r3, #0]
240049fa:	681a      	ldr	r2, [r3, #0]
240049fc:	687b      	ldr	r3, [r7, #4]
240049fe:	681b      	ldr	r3, [r3, #0]
24004a00:	f022 0201 	bic.w	r2, r2, #1
24004a04:	601a      	str	r2, [r3, #0]
24004a06:	e16f      	b.n	24004ce8 <HAL_DMA_Abort_IT+0x480>
24004a08:	40020010 	.word	0x40020010
24004a0c:	40020028 	.word	0x40020028
24004a10:	40020040 	.word	0x40020040
24004a14:	40020058 	.word	0x40020058
24004a18:	40020070 	.word	0x40020070
24004a1c:	40020088 	.word	0x40020088
24004a20:	400200a0 	.word	0x400200a0
24004a24:	400200b8 	.word	0x400200b8
24004a28:	40020410 	.word	0x40020410
24004a2c:	40020428 	.word	0x40020428
24004a30:	40020440 	.word	0x40020440
24004a34:	40020458 	.word	0x40020458
24004a38:	40020470 	.word	0x40020470
24004a3c:	40020488 	.word	0x40020488
24004a40:	400204a0 	.word	0x400204a0
24004a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004a48:	687b      	ldr	r3, [r7, #4]
24004a4a:	681b      	ldr	r3, [r3, #0]
24004a4c:	681a      	ldr	r2, [r3, #0]
24004a4e:	687b      	ldr	r3, [r7, #4]
24004a50:	681b      	ldr	r3, [r3, #0]
24004a52:	f022 020e 	bic.w	r2, r2, #14
24004a56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24004a58:	687b      	ldr	r3, [r7, #4]
24004a5a:	681b      	ldr	r3, [r3, #0]
24004a5c:	4a6c      	ldr	r2, [pc, #432]	; (24004c10 <HAL_DMA_Abort_IT+0x3a8>)
24004a5e:	4293      	cmp	r3, r2
24004a60:	d04a      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a62:	687b      	ldr	r3, [r7, #4]
24004a64:	681b      	ldr	r3, [r3, #0]
24004a66:	4a6b      	ldr	r2, [pc, #428]	; (24004c14 <HAL_DMA_Abort_IT+0x3ac>)
24004a68:	4293      	cmp	r3, r2
24004a6a:	d045      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a6c:	687b      	ldr	r3, [r7, #4]
24004a6e:	681b      	ldr	r3, [r3, #0]
24004a70:	4a69      	ldr	r2, [pc, #420]	; (24004c18 <HAL_DMA_Abort_IT+0x3b0>)
24004a72:	4293      	cmp	r3, r2
24004a74:	d040      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a76:	687b      	ldr	r3, [r7, #4]
24004a78:	681b      	ldr	r3, [r3, #0]
24004a7a:	4a68      	ldr	r2, [pc, #416]	; (24004c1c <HAL_DMA_Abort_IT+0x3b4>)
24004a7c:	4293      	cmp	r3, r2
24004a7e:	d03b      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a80:	687b      	ldr	r3, [r7, #4]
24004a82:	681b      	ldr	r3, [r3, #0]
24004a84:	4a66      	ldr	r2, [pc, #408]	; (24004c20 <HAL_DMA_Abort_IT+0x3b8>)
24004a86:	4293      	cmp	r3, r2
24004a88:	d036      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a8a:	687b      	ldr	r3, [r7, #4]
24004a8c:	681b      	ldr	r3, [r3, #0]
24004a8e:	4a65      	ldr	r2, [pc, #404]	; (24004c24 <HAL_DMA_Abort_IT+0x3bc>)
24004a90:	4293      	cmp	r3, r2
24004a92:	d031      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a94:	687b      	ldr	r3, [r7, #4]
24004a96:	681b      	ldr	r3, [r3, #0]
24004a98:	4a63      	ldr	r2, [pc, #396]	; (24004c28 <HAL_DMA_Abort_IT+0x3c0>)
24004a9a:	4293      	cmp	r3, r2
24004a9c:	d02c      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004a9e:	687b      	ldr	r3, [r7, #4]
24004aa0:	681b      	ldr	r3, [r3, #0]
24004aa2:	4a62      	ldr	r2, [pc, #392]	; (24004c2c <HAL_DMA_Abort_IT+0x3c4>)
24004aa4:	4293      	cmp	r3, r2
24004aa6:	d027      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004aa8:	687b      	ldr	r3, [r7, #4]
24004aaa:	681b      	ldr	r3, [r3, #0]
24004aac:	4a60      	ldr	r2, [pc, #384]	; (24004c30 <HAL_DMA_Abort_IT+0x3c8>)
24004aae:	4293      	cmp	r3, r2
24004ab0:	d022      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004ab2:	687b      	ldr	r3, [r7, #4]
24004ab4:	681b      	ldr	r3, [r3, #0]
24004ab6:	4a5f      	ldr	r2, [pc, #380]	; (24004c34 <HAL_DMA_Abort_IT+0x3cc>)
24004ab8:	4293      	cmp	r3, r2
24004aba:	d01d      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004abc:	687b      	ldr	r3, [r7, #4]
24004abe:	681b      	ldr	r3, [r3, #0]
24004ac0:	4a5d      	ldr	r2, [pc, #372]	; (24004c38 <HAL_DMA_Abort_IT+0x3d0>)
24004ac2:	4293      	cmp	r3, r2
24004ac4:	d018      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004ac6:	687b      	ldr	r3, [r7, #4]
24004ac8:	681b      	ldr	r3, [r3, #0]
24004aca:	4a5c      	ldr	r2, [pc, #368]	; (24004c3c <HAL_DMA_Abort_IT+0x3d4>)
24004acc:	4293      	cmp	r3, r2
24004ace:	d013      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004ad0:	687b      	ldr	r3, [r7, #4]
24004ad2:	681b      	ldr	r3, [r3, #0]
24004ad4:	4a5a      	ldr	r2, [pc, #360]	; (24004c40 <HAL_DMA_Abort_IT+0x3d8>)
24004ad6:	4293      	cmp	r3, r2
24004ad8:	d00e      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004ada:	687b      	ldr	r3, [r7, #4]
24004adc:	681b      	ldr	r3, [r3, #0]
24004ade:	4a59      	ldr	r2, [pc, #356]	; (24004c44 <HAL_DMA_Abort_IT+0x3dc>)
24004ae0:	4293      	cmp	r3, r2
24004ae2:	d009      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004ae4:	687b      	ldr	r3, [r7, #4]
24004ae6:	681b      	ldr	r3, [r3, #0]
24004ae8:	4a57      	ldr	r2, [pc, #348]	; (24004c48 <HAL_DMA_Abort_IT+0x3e0>)
24004aea:	4293      	cmp	r3, r2
24004aec:	d004      	beq.n	24004af8 <HAL_DMA_Abort_IT+0x290>
24004aee:	687b      	ldr	r3, [r7, #4]
24004af0:	681b      	ldr	r3, [r3, #0]
24004af2:	4a56      	ldr	r2, [pc, #344]	; (24004c4c <HAL_DMA_Abort_IT+0x3e4>)
24004af4:	4293      	cmp	r3, r2
24004af6:	d108      	bne.n	24004b0a <HAL_DMA_Abort_IT+0x2a2>
24004af8:	687b      	ldr	r3, [r7, #4]
24004afa:	681b      	ldr	r3, [r3, #0]
24004afc:	681a      	ldr	r2, [r3, #0]
24004afe:	687b      	ldr	r3, [r7, #4]
24004b00:	681b      	ldr	r3, [r3, #0]
24004b02:	f022 0201 	bic.w	r2, r2, #1
24004b06:	601a      	str	r2, [r3, #0]
24004b08:	e007      	b.n	24004b1a <HAL_DMA_Abort_IT+0x2b2>
24004b0a:	687b      	ldr	r3, [r7, #4]
24004b0c:	681b      	ldr	r3, [r3, #0]
24004b0e:	681a      	ldr	r2, [r3, #0]
24004b10:	687b      	ldr	r3, [r7, #4]
24004b12:	681b      	ldr	r3, [r3, #0]
24004b14:	f022 0201 	bic.w	r2, r2, #1
24004b18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004b1a:	687b      	ldr	r3, [r7, #4]
24004b1c:	681b      	ldr	r3, [r3, #0]
24004b1e:	4a3c      	ldr	r2, [pc, #240]	; (24004c10 <HAL_DMA_Abort_IT+0x3a8>)
24004b20:	4293      	cmp	r3, r2
24004b22:	d072      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b24:	687b      	ldr	r3, [r7, #4]
24004b26:	681b      	ldr	r3, [r3, #0]
24004b28:	4a3a      	ldr	r2, [pc, #232]	; (24004c14 <HAL_DMA_Abort_IT+0x3ac>)
24004b2a:	4293      	cmp	r3, r2
24004b2c:	d06d      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b2e:	687b      	ldr	r3, [r7, #4]
24004b30:	681b      	ldr	r3, [r3, #0]
24004b32:	4a39      	ldr	r2, [pc, #228]	; (24004c18 <HAL_DMA_Abort_IT+0x3b0>)
24004b34:	4293      	cmp	r3, r2
24004b36:	d068      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b38:	687b      	ldr	r3, [r7, #4]
24004b3a:	681b      	ldr	r3, [r3, #0]
24004b3c:	4a37      	ldr	r2, [pc, #220]	; (24004c1c <HAL_DMA_Abort_IT+0x3b4>)
24004b3e:	4293      	cmp	r3, r2
24004b40:	d063      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b42:	687b      	ldr	r3, [r7, #4]
24004b44:	681b      	ldr	r3, [r3, #0]
24004b46:	4a36      	ldr	r2, [pc, #216]	; (24004c20 <HAL_DMA_Abort_IT+0x3b8>)
24004b48:	4293      	cmp	r3, r2
24004b4a:	d05e      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b4c:	687b      	ldr	r3, [r7, #4]
24004b4e:	681b      	ldr	r3, [r3, #0]
24004b50:	4a34      	ldr	r2, [pc, #208]	; (24004c24 <HAL_DMA_Abort_IT+0x3bc>)
24004b52:	4293      	cmp	r3, r2
24004b54:	d059      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b56:	687b      	ldr	r3, [r7, #4]
24004b58:	681b      	ldr	r3, [r3, #0]
24004b5a:	4a33      	ldr	r2, [pc, #204]	; (24004c28 <HAL_DMA_Abort_IT+0x3c0>)
24004b5c:	4293      	cmp	r3, r2
24004b5e:	d054      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b60:	687b      	ldr	r3, [r7, #4]
24004b62:	681b      	ldr	r3, [r3, #0]
24004b64:	4a31      	ldr	r2, [pc, #196]	; (24004c2c <HAL_DMA_Abort_IT+0x3c4>)
24004b66:	4293      	cmp	r3, r2
24004b68:	d04f      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b6a:	687b      	ldr	r3, [r7, #4]
24004b6c:	681b      	ldr	r3, [r3, #0]
24004b6e:	4a30      	ldr	r2, [pc, #192]	; (24004c30 <HAL_DMA_Abort_IT+0x3c8>)
24004b70:	4293      	cmp	r3, r2
24004b72:	d04a      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b74:	687b      	ldr	r3, [r7, #4]
24004b76:	681b      	ldr	r3, [r3, #0]
24004b78:	4a2e      	ldr	r2, [pc, #184]	; (24004c34 <HAL_DMA_Abort_IT+0x3cc>)
24004b7a:	4293      	cmp	r3, r2
24004b7c:	d045      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b7e:	687b      	ldr	r3, [r7, #4]
24004b80:	681b      	ldr	r3, [r3, #0]
24004b82:	4a2d      	ldr	r2, [pc, #180]	; (24004c38 <HAL_DMA_Abort_IT+0x3d0>)
24004b84:	4293      	cmp	r3, r2
24004b86:	d040      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b88:	687b      	ldr	r3, [r7, #4]
24004b8a:	681b      	ldr	r3, [r3, #0]
24004b8c:	4a2b      	ldr	r2, [pc, #172]	; (24004c3c <HAL_DMA_Abort_IT+0x3d4>)
24004b8e:	4293      	cmp	r3, r2
24004b90:	d03b      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b92:	687b      	ldr	r3, [r7, #4]
24004b94:	681b      	ldr	r3, [r3, #0]
24004b96:	4a2a      	ldr	r2, [pc, #168]	; (24004c40 <HAL_DMA_Abort_IT+0x3d8>)
24004b98:	4293      	cmp	r3, r2
24004b9a:	d036      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004b9c:	687b      	ldr	r3, [r7, #4]
24004b9e:	681b      	ldr	r3, [r3, #0]
24004ba0:	4a28      	ldr	r2, [pc, #160]	; (24004c44 <HAL_DMA_Abort_IT+0x3dc>)
24004ba2:	4293      	cmp	r3, r2
24004ba4:	d031      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004ba6:	687b      	ldr	r3, [r7, #4]
24004ba8:	681b      	ldr	r3, [r3, #0]
24004baa:	4a27      	ldr	r2, [pc, #156]	; (24004c48 <HAL_DMA_Abort_IT+0x3e0>)
24004bac:	4293      	cmp	r3, r2
24004bae:	d02c      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bb0:	687b      	ldr	r3, [r7, #4]
24004bb2:	681b      	ldr	r3, [r3, #0]
24004bb4:	4a25      	ldr	r2, [pc, #148]	; (24004c4c <HAL_DMA_Abort_IT+0x3e4>)
24004bb6:	4293      	cmp	r3, r2
24004bb8:	d027      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bba:	687b      	ldr	r3, [r7, #4]
24004bbc:	681b      	ldr	r3, [r3, #0]
24004bbe:	4a24      	ldr	r2, [pc, #144]	; (24004c50 <HAL_DMA_Abort_IT+0x3e8>)
24004bc0:	4293      	cmp	r3, r2
24004bc2:	d022      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bc4:	687b      	ldr	r3, [r7, #4]
24004bc6:	681b      	ldr	r3, [r3, #0]
24004bc8:	4a22      	ldr	r2, [pc, #136]	; (24004c54 <HAL_DMA_Abort_IT+0x3ec>)
24004bca:	4293      	cmp	r3, r2
24004bcc:	d01d      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bce:	687b      	ldr	r3, [r7, #4]
24004bd0:	681b      	ldr	r3, [r3, #0]
24004bd2:	4a21      	ldr	r2, [pc, #132]	; (24004c58 <HAL_DMA_Abort_IT+0x3f0>)
24004bd4:	4293      	cmp	r3, r2
24004bd6:	d018      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bd8:	687b      	ldr	r3, [r7, #4]
24004bda:	681b      	ldr	r3, [r3, #0]
24004bdc:	4a1f      	ldr	r2, [pc, #124]	; (24004c5c <HAL_DMA_Abort_IT+0x3f4>)
24004bde:	4293      	cmp	r3, r2
24004be0:	d013      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004be2:	687b      	ldr	r3, [r7, #4]
24004be4:	681b      	ldr	r3, [r3, #0]
24004be6:	4a1e      	ldr	r2, [pc, #120]	; (24004c60 <HAL_DMA_Abort_IT+0x3f8>)
24004be8:	4293      	cmp	r3, r2
24004bea:	d00e      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bec:	687b      	ldr	r3, [r7, #4]
24004bee:	681b      	ldr	r3, [r3, #0]
24004bf0:	4a1c      	ldr	r2, [pc, #112]	; (24004c64 <HAL_DMA_Abort_IT+0x3fc>)
24004bf2:	4293      	cmp	r3, r2
24004bf4:	d009      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004bf6:	687b      	ldr	r3, [r7, #4]
24004bf8:	681b      	ldr	r3, [r3, #0]
24004bfa:	4a1b      	ldr	r2, [pc, #108]	; (24004c68 <HAL_DMA_Abort_IT+0x400>)
24004bfc:	4293      	cmp	r3, r2
24004bfe:	d004      	beq.n	24004c0a <HAL_DMA_Abort_IT+0x3a2>
24004c00:	687b      	ldr	r3, [r7, #4]
24004c02:	681b      	ldr	r3, [r3, #0]
24004c04:	4a19      	ldr	r2, [pc, #100]	; (24004c6c <HAL_DMA_Abort_IT+0x404>)
24004c06:	4293      	cmp	r3, r2
24004c08:	d132      	bne.n	24004c70 <HAL_DMA_Abort_IT+0x408>
24004c0a:	2301      	movs	r3, #1
24004c0c:	e031      	b.n	24004c72 <HAL_DMA_Abort_IT+0x40a>
24004c0e:	bf00      	nop
24004c10:	40020010 	.word	0x40020010
24004c14:	40020028 	.word	0x40020028
24004c18:	40020040 	.word	0x40020040
24004c1c:	40020058 	.word	0x40020058
24004c20:	40020070 	.word	0x40020070
24004c24:	40020088 	.word	0x40020088
24004c28:	400200a0 	.word	0x400200a0
24004c2c:	400200b8 	.word	0x400200b8
24004c30:	40020410 	.word	0x40020410
24004c34:	40020428 	.word	0x40020428
24004c38:	40020440 	.word	0x40020440
24004c3c:	40020458 	.word	0x40020458
24004c40:	40020470 	.word	0x40020470
24004c44:	40020488 	.word	0x40020488
24004c48:	400204a0 	.word	0x400204a0
24004c4c:	400204b8 	.word	0x400204b8
24004c50:	58025408 	.word	0x58025408
24004c54:	5802541c 	.word	0x5802541c
24004c58:	58025430 	.word	0x58025430
24004c5c:	58025444 	.word	0x58025444
24004c60:	58025458 	.word	0x58025458
24004c64:	5802546c 	.word	0x5802546c
24004c68:	58025480 	.word	0x58025480
24004c6c:	58025494 	.word	0x58025494
24004c70:	2300      	movs	r3, #0
24004c72:	2b00      	cmp	r3, #0
24004c74:	d028      	beq.n	24004cc8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24004c76:	687b      	ldr	r3, [r7, #4]
24004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004c7a:	681a      	ldr	r2, [r3, #0]
24004c7c:	687b      	ldr	r3, [r7, #4]
24004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004c84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24004c86:	687b      	ldr	r3, [r7, #4]
24004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004c8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004c8c:	687b      	ldr	r3, [r7, #4]
24004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004c90:	f003 031f 	and.w	r3, r3, #31
24004c94:	2201      	movs	r2, #1
24004c96:	409a      	lsls	r2, r3
24004c98:	68fb      	ldr	r3, [r7, #12]
24004c9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004c9c:	687b      	ldr	r3, [r7, #4]
24004c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004ca0:	687a      	ldr	r2, [r7, #4]
24004ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
24004ca4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24004ca6:	687b      	ldr	r3, [r7, #4]
24004ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004caa:	2b00      	cmp	r3, #0
24004cac:	d00c      	beq.n	24004cc8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24004cae:	687b      	ldr	r3, [r7, #4]
24004cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004cb2:	681a      	ldr	r2, [r3, #0]
24004cb4:	687b      	ldr	r3, [r7, #4]
24004cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004cbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004cbe:	687b      	ldr	r3, [r7, #4]
24004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24004cc2:	687a      	ldr	r2, [r7, #4]
24004cc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004cc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24004cc8:	687b      	ldr	r3, [r7, #4]
24004cca:	2201      	movs	r2, #1
24004ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24004cd0:	687b      	ldr	r3, [r7, #4]
24004cd2:	2200      	movs	r2, #0
24004cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24004cd8:	687b      	ldr	r3, [r7, #4]
24004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004cdc:	2b00      	cmp	r3, #0
24004cde:	d003      	beq.n	24004ce8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24004ce0:	687b      	ldr	r3, [r7, #4]
24004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004ce4:	6878      	ldr	r0, [r7, #4]
24004ce6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24004ce8:	2300      	movs	r3, #0
}
24004cea:	4618      	mov	r0, r3
24004cec:	3710      	adds	r7, #16
24004cee:	46bd      	mov	sp, r7
24004cf0:	bd80      	pop	{r7, pc}
24004cf2:	bf00      	nop

24004cf4 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24004cf4:	b580      	push	{r7, lr}
24004cf6:	b08a      	sub	sp, #40	; 0x28
24004cf8:	af00      	add	r7, sp, #0
24004cfa:	60f8      	str	r0, [r7, #12]
24004cfc:	460b      	mov	r3, r1
24004cfe:	607a      	str	r2, [r7, #4]
24004d00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24004d02:	2300      	movs	r3, #0
24004d04:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
24004d06:	f7fd fa8d 	bl	24002224 <HAL_GetTick>
24004d0a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004d0c:	68fb      	ldr	r3, [r7, #12]
24004d0e:	2b00      	cmp	r3, #0
24004d10:	d101      	bne.n	24004d16 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
24004d12:	2301      	movs	r3, #1
24004d14:	e374      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
24004d16:	68fb      	ldr	r3, [r7, #12]
24004d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004d1c:	b2db      	uxtb	r3, r3
24004d1e:	2b02      	cmp	r3, #2
24004d20:	d008      	beq.n	24004d34 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004d22:	68fb      	ldr	r3, [r7, #12]
24004d24:	2280      	movs	r2, #128	; 0x80
24004d26:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24004d28:	68fb      	ldr	r3, [r7, #12]
24004d2a:	2200      	movs	r2, #0
24004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24004d30:	2301      	movs	r3, #1
24004d32:	e365      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004d34:	68fb      	ldr	r3, [r7, #12]
24004d36:	681b      	ldr	r3, [r3, #0]
24004d38:	4a7b      	ldr	r2, [pc, #492]	; (24004f28 <HAL_DMA_PollForTransfer+0x234>)
24004d3a:	4293      	cmp	r3, r2
24004d3c:	d04a      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d3e:	68fb      	ldr	r3, [r7, #12]
24004d40:	681b      	ldr	r3, [r3, #0]
24004d42:	4a7a      	ldr	r2, [pc, #488]	; (24004f2c <HAL_DMA_PollForTransfer+0x238>)
24004d44:	4293      	cmp	r3, r2
24004d46:	d045      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d48:	68fb      	ldr	r3, [r7, #12]
24004d4a:	681b      	ldr	r3, [r3, #0]
24004d4c:	4a78      	ldr	r2, [pc, #480]	; (24004f30 <HAL_DMA_PollForTransfer+0x23c>)
24004d4e:	4293      	cmp	r3, r2
24004d50:	d040      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d52:	68fb      	ldr	r3, [r7, #12]
24004d54:	681b      	ldr	r3, [r3, #0]
24004d56:	4a77      	ldr	r2, [pc, #476]	; (24004f34 <HAL_DMA_PollForTransfer+0x240>)
24004d58:	4293      	cmp	r3, r2
24004d5a:	d03b      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d5c:	68fb      	ldr	r3, [r7, #12]
24004d5e:	681b      	ldr	r3, [r3, #0]
24004d60:	4a75      	ldr	r2, [pc, #468]	; (24004f38 <HAL_DMA_PollForTransfer+0x244>)
24004d62:	4293      	cmp	r3, r2
24004d64:	d036      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d66:	68fb      	ldr	r3, [r7, #12]
24004d68:	681b      	ldr	r3, [r3, #0]
24004d6a:	4a74      	ldr	r2, [pc, #464]	; (24004f3c <HAL_DMA_PollForTransfer+0x248>)
24004d6c:	4293      	cmp	r3, r2
24004d6e:	d031      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d70:	68fb      	ldr	r3, [r7, #12]
24004d72:	681b      	ldr	r3, [r3, #0]
24004d74:	4a72      	ldr	r2, [pc, #456]	; (24004f40 <HAL_DMA_PollForTransfer+0x24c>)
24004d76:	4293      	cmp	r3, r2
24004d78:	d02c      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d7a:	68fb      	ldr	r3, [r7, #12]
24004d7c:	681b      	ldr	r3, [r3, #0]
24004d7e:	4a71      	ldr	r2, [pc, #452]	; (24004f44 <HAL_DMA_PollForTransfer+0x250>)
24004d80:	4293      	cmp	r3, r2
24004d82:	d027      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d84:	68fb      	ldr	r3, [r7, #12]
24004d86:	681b      	ldr	r3, [r3, #0]
24004d88:	4a6f      	ldr	r2, [pc, #444]	; (24004f48 <HAL_DMA_PollForTransfer+0x254>)
24004d8a:	4293      	cmp	r3, r2
24004d8c:	d022      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d8e:	68fb      	ldr	r3, [r7, #12]
24004d90:	681b      	ldr	r3, [r3, #0]
24004d92:	4a6e      	ldr	r2, [pc, #440]	; (24004f4c <HAL_DMA_PollForTransfer+0x258>)
24004d94:	4293      	cmp	r3, r2
24004d96:	d01d      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004d98:	68fb      	ldr	r3, [r7, #12]
24004d9a:	681b      	ldr	r3, [r3, #0]
24004d9c:	4a6c      	ldr	r2, [pc, #432]	; (24004f50 <HAL_DMA_PollForTransfer+0x25c>)
24004d9e:	4293      	cmp	r3, r2
24004da0:	d018      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004da2:	68fb      	ldr	r3, [r7, #12]
24004da4:	681b      	ldr	r3, [r3, #0]
24004da6:	4a6b      	ldr	r2, [pc, #428]	; (24004f54 <HAL_DMA_PollForTransfer+0x260>)
24004da8:	4293      	cmp	r3, r2
24004daa:	d013      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004dac:	68fb      	ldr	r3, [r7, #12]
24004dae:	681b      	ldr	r3, [r3, #0]
24004db0:	4a69      	ldr	r2, [pc, #420]	; (24004f58 <HAL_DMA_PollForTransfer+0x264>)
24004db2:	4293      	cmp	r3, r2
24004db4:	d00e      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004db6:	68fb      	ldr	r3, [r7, #12]
24004db8:	681b      	ldr	r3, [r3, #0]
24004dba:	4a68      	ldr	r2, [pc, #416]	; (24004f5c <HAL_DMA_PollForTransfer+0x268>)
24004dbc:	4293      	cmp	r3, r2
24004dbe:	d009      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004dc0:	68fb      	ldr	r3, [r7, #12]
24004dc2:	681b      	ldr	r3, [r3, #0]
24004dc4:	4a66      	ldr	r2, [pc, #408]	; (24004f60 <HAL_DMA_PollForTransfer+0x26c>)
24004dc6:	4293      	cmp	r3, r2
24004dc8:	d004      	beq.n	24004dd4 <HAL_DMA_PollForTransfer+0xe0>
24004dca:	68fb      	ldr	r3, [r7, #12]
24004dcc:	681b      	ldr	r3, [r3, #0]
24004dce:	4a65      	ldr	r2, [pc, #404]	; (24004f64 <HAL_DMA_PollForTransfer+0x270>)
24004dd0:	4293      	cmp	r3, r2
24004dd2:	d101      	bne.n	24004dd8 <HAL_DMA_PollForTransfer+0xe4>
24004dd4:	2301      	movs	r3, #1
24004dd6:	e000      	b.n	24004dda <HAL_DMA_PollForTransfer+0xe6>
24004dd8:	2300      	movs	r3, #0
24004dda:	2b00      	cmp	r3, #0
24004ddc:	d028      	beq.n	24004e30 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
24004dde:	68fb      	ldr	r3, [r7, #12]
24004de0:	681b      	ldr	r3, [r3, #0]
24004de2:	681b      	ldr	r3, [r3, #0]
24004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
24004de8:	2b00      	cmp	r3, #0
24004dea:	d005      	beq.n	24004df8 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004dec:	68fb      	ldr	r3, [r7, #12]
24004dee:	f44f 7280 	mov.w	r2, #256	; 0x100
24004df2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004df4:	2301      	movs	r3, #1
24004df6:	e303      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004df8:	7afb      	ldrb	r3, [r7, #11]
24004dfa:	2b00      	cmp	r3, #0
24004dfc:	d108      	bne.n	24004e10 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24004dfe:	68fb      	ldr	r3, [r7, #12]
24004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e02:	f003 031f 	and.w	r3, r3, #31
24004e06:	2220      	movs	r2, #32
24004e08:	fa02 f303 	lsl.w	r3, r2, r3
24004e0c:	627b      	str	r3, [r7, #36]	; 0x24
24004e0e:	e007      	b.n	24004e20 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24004e10:	68fb      	ldr	r3, [r7, #12]
24004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e14:	f003 031f 	and.w	r3, r3, #31
24004e18:	2210      	movs	r2, #16
24004e1a:	fa02 f303 	lsl.w	r3, r2, r3
24004e1e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004e20:	68fb      	ldr	r3, [r7, #12]
24004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e24:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004e26:	68fb      	ldr	r3, [r7, #12]
24004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e2a:	3308      	adds	r3, #8
24004e2c:	61fb      	str	r3, [r7, #28]
24004e2e:	e1d5      	b.n	240051dc <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
24004e30:	68fb      	ldr	r3, [r7, #12]
24004e32:	681b      	ldr	r3, [r3, #0]
24004e34:	681b      	ldr	r3, [r3, #0]
24004e36:	f003 0320 	and.w	r3, r3, #32
24004e3a:	2b00      	cmp	r3, #0
24004e3c:	d005      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004e3e:	68fb      	ldr	r3, [r7, #12]
24004e40:	f44f 7280 	mov.w	r2, #256	; 0x100
24004e44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004e46:	2301      	movs	r3, #1
24004e48:	e2da      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004e4a:	7afb      	ldrb	r3, [r7, #11]
24004e4c:	2b00      	cmp	r3, #0
24004e4e:	d108      	bne.n	24004e62 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
24004e50:	68fb      	ldr	r3, [r7, #12]
24004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e54:	f003 031f 	and.w	r3, r3, #31
24004e58:	2202      	movs	r2, #2
24004e5a:	fa02 f303 	lsl.w	r3, r2, r3
24004e5e:	627b      	str	r3, [r7, #36]	; 0x24
24004e60:	e007      	b.n	24004e72 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
24004e62:	68fb      	ldr	r3, [r7, #12]
24004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e66:	f003 031f 	and.w	r3, r3, #31
24004e6a:	2204      	movs	r2, #4
24004e6c:	fa02 f303 	lsl.w	r3, r2, r3
24004e70:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004e72:	68fb      	ldr	r3, [r7, #12]
24004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e76:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004e78:	68fb      	ldr	r3, [r7, #12]
24004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e7c:	3304      	adds	r3, #4
24004e7e:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
24004e80:	e1ac      	b.n	240051dc <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004e82:	68fb      	ldr	r3, [r7, #12]
24004e84:	681b      	ldr	r3, [r3, #0]
24004e86:	4a28      	ldr	r2, [pc, #160]	; (24004f28 <HAL_DMA_PollForTransfer+0x234>)
24004e88:	4293      	cmp	r3, r2
24004e8a:	d04a      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004e8c:	68fb      	ldr	r3, [r7, #12]
24004e8e:	681b      	ldr	r3, [r3, #0]
24004e90:	4a26      	ldr	r2, [pc, #152]	; (24004f2c <HAL_DMA_PollForTransfer+0x238>)
24004e92:	4293      	cmp	r3, r2
24004e94:	d045      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004e96:	68fb      	ldr	r3, [r7, #12]
24004e98:	681b      	ldr	r3, [r3, #0]
24004e9a:	4a25      	ldr	r2, [pc, #148]	; (24004f30 <HAL_DMA_PollForTransfer+0x23c>)
24004e9c:	4293      	cmp	r3, r2
24004e9e:	d040      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ea0:	68fb      	ldr	r3, [r7, #12]
24004ea2:	681b      	ldr	r3, [r3, #0]
24004ea4:	4a23      	ldr	r2, [pc, #140]	; (24004f34 <HAL_DMA_PollForTransfer+0x240>)
24004ea6:	4293      	cmp	r3, r2
24004ea8:	d03b      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004eaa:	68fb      	ldr	r3, [r7, #12]
24004eac:	681b      	ldr	r3, [r3, #0]
24004eae:	4a22      	ldr	r2, [pc, #136]	; (24004f38 <HAL_DMA_PollForTransfer+0x244>)
24004eb0:	4293      	cmp	r3, r2
24004eb2:	d036      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004eb4:	68fb      	ldr	r3, [r7, #12]
24004eb6:	681b      	ldr	r3, [r3, #0]
24004eb8:	4a20      	ldr	r2, [pc, #128]	; (24004f3c <HAL_DMA_PollForTransfer+0x248>)
24004eba:	4293      	cmp	r3, r2
24004ebc:	d031      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ebe:	68fb      	ldr	r3, [r7, #12]
24004ec0:	681b      	ldr	r3, [r3, #0]
24004ec2:	4a1f      	ldr	r2, [pc, #124]	; (24004f40 <HAL_DMA_PollForTransfer+0x24c>)
24004ec4:	4293      	cmp	r3, r2
24004ec6:	d02c      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ec8:	68fb      	ldr	r3, [r7, #12]
24004eca:	681b      	ldr	r3, [r3, #0]
24004ecc:	4a1d      	ldr	r2, [pc, #116]	; (24004f44 <HAL_DMA_PollForTransfer+0x250>)
24004ece:	4293      	cmp	r3, r2
24004ed0:	d027      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ed2:	68fb      	ldr	r3, [r7, #12]
24004ed4:	681b      	ldr	r3, [r3, #0]
24004ed6:	4a1c      	ldr	r2, [pc, #112]	; (24004f48 <HAL_DMA_PollForTransfer+0x254>)
24004ed8:	4293      	cmp	r3, r2
24004eda:	d022      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004edc:	68fb      	ldr	r3, [r7, #12]
24004ede:	681b      	ldr	r3, [r3, #0]
24004ee0:	4a1a      	ldr	r2, [pc, #104]	; (24004f4c <HAL_DMA_PollForTransfer+0x258>)
24004ee2:	4293      	cmp	r3, r2
24004ee4:	d01d      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ee6:	68fb      	ldr	r3, [r7, #12]
24004ee8:	681b      	ldr	r3, [r3, #0]
24004eea:	4a19      	ldr	r2, [pc, #100]	; (24004f50 <HAL_DMA_PollForTransfer+0x25c>)
24004eec:	4293      	cmp	r3, r2
24004eee:	d018      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004ef0:	68fb      	ldr	r3, [r7, #12]
24004ef2:	681b      	ldr	r3, [r3, #0]
24004ef4:	4a17      	ldr	r2, [pc, #92]	; (24004f54 <HAL_DMA_PollForTransfer+0x260>)
24004ef6:	4293      	cmp	r3, r2
24004ef8:	d013      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004efa:	68fb      	ldr	r3, [r7, #12]
24004efc:	681b      	ldr	r3, [r3, #0]
24004efe:	4a16      	ldr	r2, [pc, #88]	; (24004f58 <HAL_DMA_PollForTransfer+0x264>)
24004f00:	4293      	cmp	r3, r2
24004f02:	d00e      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004f04:	68fb      	ldr	r3, [r7, #12]
24004f06:	681b      	ldr	r3, [r3, #0]
24004f08:	4a14      	ldr	r2, [pc, #80]	; (24004f5c <HAL_DMA_PollForTransfer+0x268>)
24004f0a:	4293      	cmp	r3, r2
24004f0c:	d009      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004f0e:	68fb      	ldr	r3, [r7, #12]
24004f10:	681b      	ldr	r3, [r3, #0]
24004f12:	4a13      	ldr	r2, [pc, #76]	; (24004f60 <HAL_DMA_PollForTransfer+0x26c>)
24004f14:	4293      	cmp	r3, r2
24004f16:	d004      	beq.n	24004f22 <HAL_DMA_PollForTransfer+0x22e>
24004f18:	68fb      	ldr	r3, [r7, #12]
24004f1a:	681b      	ldr	r3, [r3, #0]
24004f1c:	4a11      	ldr	r2, [pc, #68]	; (24004f64 <HAL_DMA_PollForTransfer+0x270>)
24004f1e:	4293      	cmp	r3, r2
24004f20:	d122      	bne.n	24004f68 <HAL_DMA_PollForTransfer+0x274>
24004f22:	2301      	movs	r3, #1
24004f24:	e021      	b.n	24004f6a <HAL_DMA_PollForTransfer+0x276>
24004f26:	bf00      	nop
24004f28:	40020010 	.word	0x40020010
24004f2c:	40020028 	.word	0x40020028
24004f30:	40020040 	.word	0x40020040
24004f34:	40020058 	.word	0x40020058
24004f38:	40020070 	.word	0x40020070
24004f3c:	40020088 	.word	0x40020088
24004f40:	400200a0 	.word	0x400200a0
24004f44:	400200b8 	.word	0x400200b8
24004f48:	40020410 	.word	0x40020410
24004f4c:	40020428 	.word	0x40020428
24004f50:	40020440 	.word	0x40020440
24004f54:	40020458 	.word	0x40020458
24004f58:	40020470 	.word	0x40020470
24004f5c:	40020488 	.word	0x40020488
24004f60:	400204a0 	.word	0x400204a0
24004f64:	400204b8 	.word	0x400204b8
24004f68:	2300      	movs	r3, #0
24004f6a:	2b00      	cmp	r3, #0
24004f6c:	d057      	beq.n	2400501e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004f6e:	6a3b      	ldr	r3, [r7, #32]
24004f70:	681a      	ldr	r2, [r3, #0]
24004f72:	68fb      	ldr	r3, [r7, #12]
24004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f76:	f003 031f 	and.w	r3, r3, #31
24004f7a:	fa22 f303 	lsr.w	r3, r2, r3
24004f7e:	f003 0301 	and.w	r3, r3, #1
24004f82:	2b00      	cmp	r3, #0
24004f84:	d00d      	beq.n	24004fa2 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24004f86:	68fb      	ldr	r3, [r7, #12]
24004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004f8a:	f043 0202 	orr.w	r2, r3, #2
24004f8e:	68fb      	ldr	r3, [r7, #12]
24004f90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004f92:	68fb      	ldr	r3, [r7, #12]
24004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f96:	f003 031f 	and.w	r3, r3, #31
24004f9a:	2201      	movs	r2, #1
24004f9c:	409a      	lsls	r2, r3
24004f9e:	69fb      	ldr	r3, [r7, #28]
24004fa0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004fa2:	6a3b      	ldr	r3, [r7, #32]
24004fa4:	681a      	ldr	r2, [r3, #0]
24004fa6:	68fb      	ldr	r3, [r7, #12]
24004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004faa:	f003 031f 	and.w	r3, r3, #31
24004fae:	2104      	movs	r1, #4
24004fb0:	fa01 f303 	lsl.w	r3, r1, r3
24004fb4:	4013      	ands	r3, r2
24004fb6:	2b00      	cmp	r3, #0
24004fb8:	d00d      	beq.n	24004fd6 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24004fba:	68fb      	ldr	r3, [r7, #12]
24004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004fbe:	f043 0204 	orr.w	r2, r3, #4
24004fc2:	68fb      	ldr	r3, [r7, #12]
24004fc4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004fc6:	68fb      	ldr	r3, [r7, #12]
24004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004fca:	f003 031f 	and.w	r3, r3, #31
24004fce:	2204      	movs	r2, #4
24004fd0:	409a      	lsls	r2, r3
24004fd2:	69fb      	ldr	r3, [r7, #28]
24004fd4:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004fd6:	6a3b      	ldr	r3, [r7, #32]
24004fd8:	681a      	ldr	r2, [r3, #0]
24004fda:	68fb      	ldr	r3, [r7, #12]
24004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004fde:	f003 031f 	and.w	r3, r3, #31
24004fe2:	2108      	movs	r1, #8
24004fe4:	fa01 f303 	lsl.w	r3, r1, r3
24004fe8:	4013      	ands	r3, r2
24004fea:	2b00      	cmp	r3, #0
24004fec:	d038      	beq.n	24005060 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24004fee:	68fb      	ldr	r3, [r7, #12]
24004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004ff2:	f043 0201 	orr.w	r2, r3, #1
24004ff6:	68fb      	ldr	r3, [r7, #12]
24004ff8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004ffa:	68fb      	ldr	r3, [r7, #12]
24004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004ffe:	f003 031f 	and.w	r3, r3, #31
24005002:	2208      	movs	r2, #8
24005004:	409a      	lsls	r2, r3
24005006:	69fb      	ldr	r3, [r7, #28]
24005008:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
2400500a:	68fb      	ldr	r3, [r7, #12]
2400500c:	2201      	movs	r2, #1
2400500e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005012:	68fb      	ldr	r3, [r7, #12]
24005014:	2200      	movs	r2, #0
24005016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
2400501a:	2301      	movs	r3, #1
2400501c:	e1f0      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400501e:	6a3b      	ldr	r3, [r7, #32]
24005020:	681a      	ldr	r2, [r3, #0]
24005022:	68fb      	ldr	r3, [r7, #12]
24005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005026:	f003 031f 	and.w	r3, r3, #31
2400502a:	2108      	movs	r1, #8
2400502c:	fa01 f303 	lsl.w	r3, r1, r3
24005030:	4013      	ands	r3, r2
24005032:	2b00      	cmp	r3, #0
24005034:	d014      	beq.n	24005060 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
24005036:	68fb      	ldr	r3, [r7, #12]
24005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400503a:	f003 031f 	and.w	r3, r3, #31
2400503e:	2201      	movs	r2, #1
24005040:	409a      	lsls	r2, r3
24005042:	6a3b      	ldr	r3, [r7, #32]
24005044:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005046:	68fb      	ldr	r3, [r7, #12]
24005048:	2201      	movs	r2, #1
2400504a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
2400504c:	68fb      	ldr	r3, [r7, #12]
2400504e:	2201      	movs	r2, #1
24005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005054:	68fb      	ldr	r3, [r7, #12]
24005056:	2200      	movs	r2, #0
24005058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
2400505c:	2301      	movs	r3, #1
2400505e:	e1cf      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
24005060:	687b      	ldr	r3, [r7, #4]
24005062:	f1b3 3fff 	cmp.w	r3, #4294967295
24005066:	d012      	beq.n	2400508e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
24005068:	f7fd f8dc 	bl	24002224 <HAL_GetTick>
2400506c:	4602      	mov	r2, r0
2400506e:	697b      	ldr	r3, [r7, #20]
24005070:	1ad3      	subs	r3, r2, r3
24005072:	687a      	ldr	r2, [r7, #4]
24005074:	429a      	cmp	r2, r3
24005076:	d302      	bcc.n	2400507e <HAL_DMA_PollForTransfer+0x38a>
24005078:	687b      	ldr	r3, [r7, #4]
2400507a:	2b00      	cmp	r3, #0
2400507c:	d107      	bne.n	2400508e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400507e:	68fb      	ldr	r3, [r7, #12]
24005080:	2220      	movs	r2, #32
24005082:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
24005084:	68f8      	ldr	r0, [r7, #12]
24005086:	f7ff f8d1 	bl	2400422c <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
2400508a:	2301      	movs	r3, #1
2400508c:	e1b8      	b.n	24005400 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400508e:	68fb      	ldr	r3, [r7, #12]
24005090:	681b      	ldr	r3, [r3, #0]
24005092:	4a81      	ldr	r2, [pc, #516]	; (24005298 <HAL_DMA_PollForTransfer+0x5a4>)
24005094:	4293      	cmp	r3, r2
24005096:	d072      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005098:	68fb      	ldr	r3, [r7, #12]
2400509a:	681b      	ldr	r3, [r3, #0]
2400509c:	4a7f      	ldr	r2, [pc, #508]	; (2400529c <HAL_DMA_PollForTransfer+0x5a8>)
2400509e:	4293      	cmp	r3, r2
240050a0:	d06d      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050a2:	68fb      	ldr	r3, [r7, #12]
240050a4:	681b      	ldr	r3, [r3, #0]
240050a6:	4a7e      	ldr	r2, [pc, #504]	; (240052a0 <HAL_DMA_PollForTransfer+0x5ac>)
240050a8:	4293      	cmp	r3, r2
240050aa:	d068      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050ac:	68fb      	ldr	r3, [r7, #12]
240050ae:	681b      	ldr	r3, [r3, #0]
240050b0:	4a7c      	ldr	r2, [pc, #496]	; (240052a4 <HAL_DMA_PollForTransfer+0x5b0>)
240050b2:	4293      	cmp	r3, r2
240050b4:	d063      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050b6:	68fb      	ldr	r3, [r7, #12]
240050b8:	681b      	ldr	r3, [r3, #0]
240050ba:	4a7b      	ldr	r2, [pc, #492]	; (240052a8 <HAL_DMA_PollForTransfer+0x5b4>)
240050bc:	4293      	cmp	r3, r2
240050be:	d05e      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050c0:	68fb      	ldr	r3, [r7, #12]
240050c2:	681b      	ldr	r3, [r3, #0]
240050c4:	4a79      	ldr	r2, [pc, #484]	; (240052ac <HAL_DMA_PollForTransfer+0x5b8>)
240050c6:	4293      	cmp	r3, r2
240050c8:	d059      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050ca:	68fb      	ldr	r3, [r7, #12]
240050cc:	681b      	ldr	r3, [r3, #0]
240050ce:	4a78      	ldr	r2, [pc, #480]	; (240052b0 <HAL_DMA_PollForTransfer+0x5bc>)
240050d0:	4293      	cmp	r3, r2
240050d2:	d054      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050d4:	68fb      	ldr	r3, [r7, #12]
240050d6:	681b      	ldr	r3, [r3, #0]
240050d8:	4a76      	ldr	r2, [pc, #472]	; (240052b4 <HAL_DMA_PollForTransfer+0x5c0>)
240050da:	4293      	cmp	r3, r2
240050dc:	d04f      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050de:	68fb      	ldr	r3, [r7, #12]
240050e0:	681b      	ldr	r3, [r3, #0]
240050e2:	4a75      	ldr	r2, [pc, #468]	; (240052b8 <HAL_DMA_PollForTransfer+0x5c4>)
240050e4:	4293      	cmp	r3, r2
240050e6:	d04a      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050e8:	68fb      	ldr	r3, [r7, #12]
240050ea:	681b      	ldr	r3, [r3, #0]
240050ec:	4a73      	ldr	r2, [pc, #460]	; (240052bc <HAL_DMA_PollForTransfer+0x5c8>)
240050ee:	4293      	cmp	r3, r2
240050f0:	d045      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050f2:	68fb      	ldr	r3, [r7, #12]
240050f4:	681b      	ldr	r3, [r3, #0]
240050f6:	4a72      	ldr	r2, [pc, #456]	; (240052c0 <HAL_DMA_PollForTransfer+0x5cc>)
240050f8:	4293      	cmp	r3, r2
240050fa:	d040      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
240050fc:	68fb      	ldr	r3, [r7, #12]
240050fe:	681b      	ldr	r3, [r3, #0]
24005100:	4a70      	ldr	r2, [pc, #448]	; (240052c4 <HAL_DMA_PollForTransfer+0x5d0>)
24005102:	4293      	cmp	r3, r2
24005104:	d03b      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005106:	68fb      	ldr	r3, [r7, #12]
24005108:	681b      	ldr	r3, [r3, #0]
2400510a:	4a6f      	ldr	r2, [pc, #444]	; (240052c8 <HAL_DMA_PollForTransfer+0x5d4>)
2400510c:	4293      	cmp	r3, r2
2400510e:	d036      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005110:	68fb      	ldr	r3, [r7, #12]
24005112:	681b      	ldr	r3, [r3, #0]
24005114:	4a6d      	ldr	r2, [pc, #436]	; (240052cc <HAL_DMA_PollForTransfer+0x5d8>)
24005116:	4293      	cmp	r3, r2
24005118:	d031      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
2400511a:	68fb      	ldr	r3, [r7, #12]
2400511c:	681b      	ldr	r3, [r3, #0]
2400511e:	4a6c      	ldr	r2, [pc, #432]	; (240052d0 <HAL_DMA_PollForTransfer+0x5dc>)
24005120:	4293      	cmp	r3, r2
24005122:	d02c      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005124:	68fb      	ldr	r3, [r7, #12]
24005126:	681b      	ldr	r3, [r3, #0]
24005128:	4a6a      	ldr	r2, [pc, #424]	; (240052d4 <HAL_DMA_PollForTransfer+0x5e0>)
2400512a:	4293      	cmp	r3, r2
2400512c:	d027      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
2400512e:	68fb      	ldr	r3, [r7, #12]
24005130:	681b      	ldr	r3, [r3, #0]
24005132:	4a69      	ldr	r2, [pc, #420]	; (240052d8 <HAL_DMA_PollForTransfer+0x5e4>)
24005134:	4293      	cmp	r3, r2
24005136:	d022      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005138:	68fb      	ldr	r3, [r7, #12]
2400513a:	681b      	ldr	r3, [r3, #0]
2400513c:	4a67      	ldr	r2, [pc, #412]	; (240052dc <HAL_DMA_PollForTransfer+0x5e8>)
2400513e:	4293      	cmp	r3, r2
24005140:	d01d      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005142:	68fb      	ldr	r3, [r7, #12]
24005144:	681b      	ldr	r3, [r3, #0]
24005146:	4a66      	ldr	r2, [pc, #408]	; (240052e0 <HAL_DMA_PollForTransfer+0x5ec>)
24005148:	4293      	cmp	r3, r2
2400514a:	d018      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
2400514c:	68fb      	ldr	r3, [r7, #12]
2400514e:	681b      	ldr	r3, [r3, #0]
24005150:	4a64      	ldr	r2, [pc, #400]	; (240052e4 <HAL_DMA_PollForTransfer+0x5f0>)
24005152:	4293      	cmp	r3, r2
24005154:	d013      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005156:	68fb      	ldr	r3, [r7, #12]
24005158:	681b      	ldr	r3, [r3, #0]
2400515a:	4a63      	ldr	r2, [pc, #396]	; (240052e8 <HAL_DMA_PollForTransfer+0x5f4>)
2400515c:	4293      	cmp	r3, r2
2400515e:	d00e      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005160:	68fb      	ldr	r3, [r7, #12]
24005162:	681b      	ldr	r3, [r3, #0]
24005164:	4a61      	ldr	r2, [pc, #388]	; (240052ec <HAL_DMA_PollForTransfer+0x5f8>)
24005166:	4293      	cmp	r3, r2
24005168:	d009      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
2400516a:	68fb      	ldr	r3, [r7, #12]
2400516c:	681b      	ldr	r3, [r3, #0]
2400516e:	4a60      	ldr	r2, [pc, #384]	; (240052f0 <HAL_DMA_PollForTransfer+0x5fc>)
24005170:	4293      	cmp	r3, r2
24005172:	d004      	beq.n	2400517e <HAL_DMA_PollForTransfer+0x48a>
24005174:	68fb      	ldr	r3, [r7, #12]
24005176:	681b      	ldr	r3, [r3, #0]
24005178:	4a5e      	ldr	r2, [pc, #376]	; (240052f4 <HAL_DMA_PollForTransfer+0x600>)
2400517a:	4293      	cmp	r3, r2
2400517c:	d101      	bne.n	24005182 <HAL_DMA_PollForTransfer+0x48e>
2400517e:	2301      	movs	r3, #1
24005180:	e000      	b.n	24005184 <HAL_DMA_PollForTransfer+0x490>
24005182:	2300      	movs	r3, #0
24005184:	2b00      	cmp	r3, #0
24005186:	d029      	beq.n	240051dc <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
24005188:	68fb      	ldr	r3, [r7, #12]
2400518a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400518c:	2b00      	cmp	r3, #0
2400518e:	d012      	beq.n	240051b6 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24005190:	68fb      	ldr	r3, [r7, #12]
24005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24005194:	681a      	ldr	r2, [r3, #0]
24005196:	68fb      	ldr	r3, [r7, #12]
24005198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400519a:	4013      	ands	r3, r2
2400519c:	2b00      	cmp	r3, #0
2400519e:	d00a      	beq.n	240051b6 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240051a0:	68fb      	ldr	r3, [r7, #12]
240051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240051a4:	68fa      	ldr	r2, [r7, #12]
240051a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
240051a8:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240051aa:	68fb      	ldr	r3, [r7, #12]
240051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240051ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
240051b2:	68fb      	ldr	r3, [r7, #12]
240051b4:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240051b6:	68fb      	ldr	r3, [r7, #12]
240051b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240051ba:	681a      	ldr	r2, [r3, #0]
240051bc:	68fb      	ldr	r3, [r7, #12]
240051be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240051c0:	4013      	ands	r3, r2
240051c2:	2b00      	cmp	r3, #0
240051c4:	d00a      	beq.n	240051dc <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240051c6:	68fb      	ldr	r3, [r7, #12]
240051c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240051ca:	68fa      	ldr	r2, [r7, #12]
240051cc:	6e92      	ldr	r2, [r2, #104]	; 0x68
240051ce:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240051d0:	68fb      	ldr	r3, [r7, #12]
240051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240051d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
240051d8:	68fb      	ldr	r3, [r7, #12]
240051da:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
240051dc:	6a3b      	ldr	r3, [r7, #32]
240051de:	681a      	ldr	r2, [r3, #0]
240051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240051e2:	4013      	ands	r3, r2
240051e4:	2b00      	cmp	r3, #0
240051e6:	f43f ae4c 	beq.w	24004e82 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
240051ea:	7afb      	ldrb	r3, [r7, #11]
240051ec:	2b00      	cmp	r3, #0
240051ee:	f040 80a0 	bne.w	24005332 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240051f2:	68fb      	ldr	r3, [r7, #12]
240051f4:	681b      	ldr	r3, [r3, #0]
240051f6:	4a28      	ldr	r2, [pc, #160]	; (24005298 <HAL_DMA_PollForTransfer+0x5a4>)
240051f8:	4293      	cmp	r3, r2
240051fa:	d04a      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
240051fc:	68fb      	ldr	r3, [r7, #12]
240051fe:	681b      	ldr	r3, [r3, #0]
24005200:	4a26      	ldr	r2, [pc, #152]	; (2400529c <HAL_DMA_PollForTransfer+0x5a8>)
24005202:	4293      	cmp	r3, r2
24005204:	d045      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005206:	68fb      	ldr	r3, [r7, #12]
24005208:	681b      	ldr	r3, [r3, #0]
2400520a:	4a25      	ldr	r2, [pc, #148]	; (240052a0 <HAL_DMA_PollForTransfer+0x5ac>)
2400520c:	4293      	cmp	r3, r2
2400520e:	d040      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005210:	68fb      	ldr	r3, [r7, #12]
24005212:	681b      	ldr	r3, [r3, #0]
24005214:	4a23      	ldr	r2, [pc, #140]	; (240052a4 <HAL_DMA_PollForTransfer+0x5b0>)
24005216:	4293      	cmp	r3, r2
24005218:	d03b      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
2400521a:	68fb      	ldr	r3, [r7, #12]
2400521c:	681b      	ldr	r3, [r3, #0]
2400521e:	4a22      	ldr	r2, [pc, #136]	; (240052a8 <HAL_DMA_PollForTransfer+0x5b4>)
24005220:	4293      	cmp	r3, r2
24005222:	d036      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005224:	68fb      	ldr	r3, [r7, #12]
24005226:	681b      	ldr	r3, [r3, #0]
24005228:	4a20      	ldr	r2, [pc, #128]	; (240052ac <HAL_DMA_PollForTransfer+0x5b8>)
2400522a:	4293      	cmp	r3, r2
2400522c:	d031      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
2400522e:	68fb      	ldr	r3, [r7, #12]
24005230:	681b      	ldr	r3, [r3, #0]
24005232:	4a1f      	ldr	r2, [pc, #124]	; (240052b0 <HAL_DMA_PollForTransfer+0x5bc>)
24005234:	4293      	cmp	r3, r2
24005236:	d02c      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005238:	68fb      	ldr	r3, [r7, #12]
2400523a:	681b      	ldr	r3, [r3, #0]
2400523c:	4a1d      	ldr	r2, [pc, #116]	; (240052b4 <HAL_DMA_PollForTransfer+0x5c0>)
2400523e:	4293      	cmp	r3, r2
24005240:	d027      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005242:	68fb      	ldr	r3, [r7, #12]
24005244:	681b      	ldr	r3, [r3, #0]
24005246:	4a1c      	ldr	r2, [pc, #112]	; (240052b8 <HAL_DMA_PollForTransfer+0x5c4>)
24005248:	4293      	cmp	r3, r2
2400524a:	d022      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
2400524c:	68fb      	ldr	r3, [r7, #12]
2400524e:	681b      	ldr	r3, [r3, #0]
24005250:	4a1a      	ldr	r2, [pc, #104]	; (240052bc <HAL_DMA_PollForTransfer+0x5c8>)
24005252:	4293      	cmp	r3, r2
24005254:	d01d      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005256:	68fb      	ldr	r3, [r7, #12]
24005258:	681b      	ldr	r3, [r3, #0]
2400525a:	4a19      	ldr	r2, [pc, #100]	; (240052c0 <HAL_DMA_PollForTransfer+0x5cc>)
2400525c:	4293      	cmp	r3, r2
2400525e:	d018      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005260:	68fb      	ldr	r3, [r7, #12]
24005262:	681b      	ldr	r3, [r3, #0]
24005264:	4a17      	ldr	r2, [pc, #92]	; (240052c4 <HAL_DMA_PollForTransfer+0x5d0>)
24005266:	4293      	cmp	r3, r2
24005268:	d013      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
2400526a:	68fb      	ldr	r3, [r7, #12]
2400526c:	681b      	ldr	r3, [r3, #0]
2400526e:	4a16      	ldr	r2, [pc, #88]	; (240052c8 <HAL_DMA_PollForTransfer+0x5d4>)
24005270:	4293      	cmp	r3, r2
24005272:	d00e      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005274:	68fb      	ldr	r3, [r7, #12]
24005276:	681b      	ldr	r3, [r3, #0]
24005278:	4a14      	ldr	r2, [pc, #80]	; (240052cc <HAL_DMA_PollForTransfer+0x5d8>)
2400527a:	4293      	cmp	r3, r2
2400527c:	d009      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
2400527e:	68fb      	ldr	r3, [r7, #12]
24005280:	681b      	ldr	r3, [r3, #0]
24005282:	4a13      	ldr	r2, [pc, #76]	; (240052d0 <HAL_DMA_PollForTransfer+0x5dc>)
24005284:	4293      	cmp	r3, r2
24005286:	d004      	beq.n	24005292 <HAL_DMA_PollForTransfer+0x59e>
24005288:	68fb      	ldr	r3, [r7, #12]
2400528a:	681b      	ldr	r3, [r3, #0]
2400528c:	4a11      	ldr	r2, [pc, #68]	; (240052d4 <HAL_DMA_PollForTransfer+0x5e0>)
2400528e:	4293      	cmp	r3, r2
24005290:	d132      	bne.n	240052f8 <HAL_DMA_PollForTransfer+0x604>
24005292:	2301      	movs	r3, #1
24005294:	e031      	b.n	240052fa <HAL_DMA_PollForTransfer+0x606>
24005296:	bf00      	nop
24005298:	40020010 	.word	0x40020010
2400529c:	40020028 	.word	0x40020028
240052a0:	40020040 	.word	0x40020040
240052a4:	40020058 	.word	0x40020058
240052a8:	40020070 	.word	0x40020070
240052ac:	40020088 	.word	0x40020088
240052b0:	400200a0 	.word	0x400200a0
240052b4:	400200b8 	.word	0x400200b8
240052b8:	40020410 	.word	0x40020410
240052bc:	40020428 	.word	0x40020428
240052c0:	40020440 	.word	0x40020440
240052c4:	40020458 	.word	0x40020458
240052c8:	40020470 	.word	0x40020470
240052cc:	40020488 	.word	0x40020488
240052d0:	400204a0 	.word	0x400204a0
240052d4:	400204b8 	.word	0x400204b8
240052d8:	58025408 	.word	0x58025408
240052dc:	5802541c 	.word	0x5802541c
240052e0:	58025430 	.word	0x58025430
240052e4:	58025444 	.word	0x58025444
240052e8:	58025458 	.word	0x58025458
240052ec:	5802546c 	.word	0x5802546c
240052f0:	58025480 	.word	0x58025480
240052f4:	58025494 	.word	0x58025494
240052f8:	2300      	movs	r3, #0
240052fa:	2b00      	cmp	r3, #0
240052fc:	d008      	beq.n	24005310 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
240052fe:	68fb      	ldr	r3, [r7, #12]
24005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005302:	f003 031f 	and.w	r3, r3, #31
24005306:	2230      	movs	r2, #48	; 0x30
24005308:	409a      	lsls	r2, r3
2400530a:	69fb      	ldr	r3, [r7, #28]
2400530c:	601a      	str	r2, [r3, #0]
2400530e:	e007      	b.n	24005320 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
24005310:	68fb      	ldr	r3, [r7, #12]
24005312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005314:	f003 031f 	and.w	r3, r3, #31
24005318:	2202      	movs	r2, #2
2400531a:	409a      	lsls	r2, r3
2400531c:	69fb      	ldr	r3, [r7, #28]
2400531e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
24005320:	68fb      	ldr	r3, [r7, #12]
24005322:	2201      	movs	r2, #1
24005324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24005328:	68fb      	ldr	r3, [r7, #12]
2400532a:	2200      	movs	r2, #0
2400532c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
24005330:	e065      	b.n	240053fe <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005332:	68fb      	ldr	r3, [r7, #12]
24005334:	681b      	ldr	r3, [r3, #0]
24005336:	4a34      	ldr	r2, [pc, #208]	; (24005408 <HAL_DMA_PollForTransfer+0x714>)
24005338:	4293      	cmp	r3, r2
2400533a:	d04a      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
2400533c:	68fb      	ldr	r3, [r7, #12]
2400533e:	681b      	ldr	r3, [r3, #0]
24005340:	4a32      	ldr	r2, [pc, #200]	; (2400540c <HAL_DMA_PollForTransfer+0x718>)
24005342:	4293      	cmp	r3, r2
24005344:	d045      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005346:	68fb      	ldr	r3, [r7, #12]
24005348:	681b      	ldr	r3, [r3, #0]
2400534a:	4a31      	ldr	r2, [pc, #196]	; (24005410 <HAL_DMA_PollForTransfer+0x71c>)
2400534c:	4293      	cmp	r3, r2
2400534e:	d040      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005350:	68fb      	ldr	r3, [r7, #12]
24005352:	681b      	ldr	r3, [r3, #0]
24005354:	4a2f      	ldr	r2, [pc, #188]	; (24005414 <HAL_DMA_PollForTransfer+0x720>)
24005356:	4293      	cmp	r3, r2
24005358:	d03b      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
2400535a:	68fb      	ldr	r3, [r7, #12]
2400535c:	681b      	ldr	r3, [r3, #0]
2400535e:	4a2e      	ldr	r2, [pc, #184]	; (24005418 <HAL_DMA_PollForTransfer+0x724>)
24005360:	4293      	cmp	r3, r2
24005362:	d036      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005364:	68fb      	ldr	r3, [r7, #12]
24005366:	681b      	ldr	r3, [r3, #0]
24005368:	4a2c      	ldr	r2, [pc, #176]	; (2400541c <HAL_DMA_PollForTransfer+0x728>)
2400536a:	4293      	cmp	r3, r2
2400536c:	d031      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
2400536e:	68fb      	ldr	r3, [r7, #12]
24005370:	681b      	ldr	r3, [r3, #0]
24005372:	4a2b      	ldr	r2, [pc, #172]	; (24005420 <HAL_DMA_PollForTransfer+0x72c>)
24005374:	4293      	cmp	r3, r2
24005376:	d02c      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005378:	68fb      	ldr	r3, [r7, #12]
2400537a:	681b      	ldr	r3, [r3, #0]
2400537c:	4a29      	ldr	r2, [pc, #164]	; (24005424 <HAL_DMA_PollForTransfer+0x730>)
2400537e:	4293      	cmp	r3, r2
24005380:	d027      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005382:	68fb      	ldr	r3, [r7, #12]
24005384:	681b      	ldr	r3, [r3, #0]
24005386:	4a28      	ldr	r2, [pc, #160]	; (24005428 <HAL_DMA_PollForTransfer+0x734>)
24005388:	4293      	cmp	r3, r2
2400538a:	d022      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
2400538c:	68fb      	ldr	r3, [r7, #12]
2400538e:	681b      	ldr	r3, [r3, #0]
24005390:	4a26      	ldr	r2, [pc, #152]	; (2400542c <HAL_DMA_PollForTransfer+0x738>)
24005392:	4293      	cmp	r3, r2
24005394:	d01d      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
24005396:	68fb      	ldr	r3, [r7, #12]
24005398:	681b      	ldr	r3, [r3, #0]
2400539a:	4a25      	ldr	r2, [pc, #148]	; (24005430 <HAL_DMA_PollForTransfer+0x73c>)
2400539c:	4293      	cmp	r3, r2
2400539e:	d018      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
240053a0:	68fb      	ldr	r3, [r7, #12]
240053a2:	681b      	ldr	r3, [r3, #0]
240053a4:	4a23      	ldr	r2, [pc, #140]	; (24005434 <HAL_DMA_PollForTransfer+0x740>)
240053a6:	4293      	cmp	r3, r2
240053a8:	d013      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
240053aa:	68fb      	ldr	r3, [r7, #12]
240053ac:	681b      	ldr	r3, [r3, #0]
240053ae:	4a22      	ldr	r2, [pc, #136]	; (24005438 <HAL_DMA_PollForTransfer+0x744>)
240053b0:	4293      	cmp	r3, r2
240053b2:	d00e      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
240053b4:	68fb      	ldr	r3, [r7, #12]
240053b6:	681b      	ldr	r3, [r3, #0]
240053b8:	4a20      	ldr	r2, [pc, #128]	; (2400543c <HAL_DMA_PollForTransfer+0x748>)
240053ba:	4293      	cmp	r3, r2
240053bc:	d009      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
240053be:	68fb      	ldr	r3, [r7, #12]
240053c0:	681b      	ldr	r3, [r3, #0]
240053c2:	4a1f      	ldr	r2, [pc, #124]	; (24005440 <HAL_DMA_PollForTransfer+0x74c>)
240053c4:	4293      	cmp	r3, r2
240053c6:	d004      	beq.n	240053d2 <HAL_DMA_PollForTransfer+0x6de>
240053c8:	68fb      	ldr	r3, [r7, #12]
240053ca:	681b      	ldr	r3, [r3, #0]
240053cc:	4a1d      	ldr	r2, [pc, #116]	; (24005444 <HAL_DMA_PollForTransfer+0x750>)
240053ce:	4293      	cmp	r3, r2
240053d0:	d101      	bne.n	240053d6 <HAL_DMA_PollForTransfer+0x6e2>
240053d2:	2301      	movs	r3, #1
240053d4:	e000      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x6e4>
240053d6:	2300      	movs	r3, #0
240053d8:	2b00      	cmp	r3, #0
240053da:	d008      	beq.n	240053ee <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
240053dc:	68fb      	ldr	r3, [r7, #12]
240053de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240053e0:	f003 031f 	and.w	r3, r3, #31
240053e4:	2210      	movs	r2, #16
240053e6:	409a      	lsls	r2, r3
240053e8:	69fb      	ldr	r3, [r7, #28]
240053ea:	601a      	str	r2, [r3, #0]
240053ec:	e007      	b.n	240053fe <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
240053ee:	68fb      	ldr	r3, [r7, #12]
240053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240053f2:	f003 031f 	and.w	r3, r3, #31
240053f6:	2204      	movs	r2, #4
240053f8:	409a      	lsls	r2, r3
240053fa:	69fb      	ldr	r3, [r7, #28]
240053fc:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
240053fe:	7efb      	ldrb	r3, [r7, #27]
}
24005400:	4618      	mov	r0, r3
24005402:	3728      	adds	r7, #40	; 0x28
24005404:	46bd      	mov	sp, r7
24005406:	bd80      	pop	{r7, pc}
24005408:	40020010 	.word	0x40020010
2400540c:	40020028 	.word	0x40020028
24005410:	40020040 	.word	0x40020040
24005414:	40020058 	.word	0x40020058
24005418:	40020070 	.word	0x40020070
2400541c:	40020088 	.word	0x40020088
24005420:	400200a0 	.word	0x400200a0
24005424:	400200b8 	.word	0x400200b8
24005428:	40020410 	.word	0x40020410
2400542c:	40020428 	.word	0x40020428
24005430:	40020440 	.word	0x40020440
24005434:	40020458 	.word	0x40020458
24005438:	40020470 	.word	0x40020470
2400543c:	40020488 	.word	0x40020488
24005440:	400204a0 	.word	0x400204a0
24005444:	400204b8 	.word	0x400204b8

24005448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
24005448:	b580      	push	{r7, lr}
2400544a:	b08a      	sub	sp, #40	; 0x28
2400544c:	af00      	add	r7, sp, #0
2400544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
24005450:	2300      	movs	r3, #0
24005452:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
24005454:	4b67      	ldr	r3, [pc, #412]	; (240055f4 <HAL_DMA_IRQHandler+0x1ac>)
24005456:	681b      	ldr	r3, [r3, #0]
24005458:	4a67      	ldr	r2, [pc, #412]	; (240055f8 <HAL_DMA_IRQHandler+0x1b0>)
2400545a:	fba2 2303 	umull	r2, r3, r2, r3
2400545e:	0a9b      	lsrs	r3, r3, #10
24005460:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005462:	687b      	ldr	r3, [r7, #4]
24005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005466:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005468:	687b      	ldr	r3, [r7, #4]
2400546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400546c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
2400546e:	6a3b      	ldr	r3, [r7, #32]
24005470:	681b      	ldr	r3, [r3, #0]
24005472:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
24005474:	69fb      	ldr	r3, [r7, #28]
24005476:	681b      	ldr	r3, [r3, #0]
24005478:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400547a:	687b      	ldr	r3, [r7, #4]
2400547c:	681b      	ldr	r3, [r3, #0]
2400547e:	4a5f      	ldr	r2, [pc, #380]	; (240055fc <HAL_DMA_IRQHandler+0x1b4>)
24005480:	4293      	cmp	r3, r2
24005482:	d04a      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
24005484:	687b      	ldr	r3, [r7, #4]
24005486:	681b      	ldr	r3, [r3, #0]
24005488:	4a5d      	ldr	r2, [pc, #372]	; (24005600 <HAL_DMA_IRQHandler+0x1b8>)
2400548a:	4293      	cmp	r3, r2
2400548c:	d045      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
2400548e:	687b      	ldr	r3, [r7, #4]
24005490:	681b      	ldr	r3, [r3, #0]
24005492:	4a5c      	ldr	r2, [pc, #368]	; (24005604 <HAL_DMA_IRQHandler+0x1bc>)
24005494:	4293      	cmp	r3, r2
24005496:	d040      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
24005498:	687b      	ldr	r3, [r7, #4]
2400549a:	681b      	ldr	r3, [r3, #0]
2400549c:	4a5a      	ldr	r2, [pc, #360]	; (24005608 <HAL_DMA_IRQHandler+0x1c0>)
2400549e:	4293      	cmp	r3, r2
240054a0:	d03b      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054a2:	687b      	ldr	r3, [r7, #4]
240054a4:	681b      	ldr	r3, [r3, #0]
240054a6:	4a59      	ldr	r2, [pc, #356]	; (2400560c <HAL_DMA_IRQHandler+0x1c4>)
240054a8:	4293      	cmp	r3, r2
240054aa:	d036      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054ac:	687b      	ldr	r3, [r7, #4]
240054ae:	681b      	ldr	r3, [r3, #0]
240054b0:	4a57      	ldr	r2, [pc, #348]	; (24005610 <HAL_DMA_IRQHandler+0x1c8>)
240054b2:	4293      	cmp	r3, r2
240054b4:	d031      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054b6:	687b      	ldr	r3, [r7, #4]
240054b8:	681b      	ldr	r3, [r3, #0]
240054ba:	4a56      	ldr	r2, [pc, #344]	; (24005614 <HAL_DMA_IRQHandler+0x1cc>)
240054bc:	4293      	cmp	r3, r2
240054be:	d02c      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054c0:	687b      	ldr	r3, [r7, #4]
240054c2:	681b      	ldr	r3, [r3, #0]
240054c4:	4a54      	ldr	r2, [pc, #336]	; (24005618 <HAL_DMA_IRQHandler+0x1d0>)
240054c6:	4293      	cmp	r3, r2
240054c8:	d027      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054ca:	687b      	ldr	r3, [r7, #4]
240054cc:	681b      	ldr	r3, [r3, #0]
240054ce:	4a53      	ldr	r2, [pc, #332]	; (2400561c <HAL_DMA_IRQHandler+0x1d4>)
240054d0:	4293      	cmp	r3, r2
240054d2:	d022      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054d4:	687b      	ldr	r3, [r7, #4]
240054d6:	681b      	ldr	r3, [r3, #0]
240054d8:	4a51      	ldr	r2, [pc, #324]	; (24005620 <HAL_DMA_IRQHandler+0x1d8>)
240054da:	4293      	cmp	r3, r2
240054dc:	d01d      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054de:	687b      	ldr	r3, [r7, #4]
240054e0:	681b      	ldr	r3, [r3, #0]
240054e2:	4a50      	ldr	r2, [pc, #320]	; (24005624 <HAL_DMA_IRQHandler+0x1dc>)
240054e4:	4293      	cmp	r3, r2
240054e6:	d018      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054e8:	687b      	ldr	r3, [r7, #4]
240054ea:	681b      	ldr	r3, [r3, #0]
240054ec:	4a4e      	ldr	r2, [pc, #312]	; (24005628 <HAL_DMA_IRQHandler+0x1e0>)
240054ee:	4293      	cmp	r3, r2
240054f0:	d013      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054f2:	687b      	ldr	r3, [r7, #4]
240054f4:	681b      	ldr	r3, [r3, #0]
240054f6:	4a4d      	ldr	r2, [pc, #308]	; (2400562c <HAL_DMA_IRQHandler+0x1e4>)
240054f8:	4293      	cmp	r3, r2
240054fa:	d00e      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
240054fc:	687b      	ldr	r3, [r7, #4]
240054fe:	681b      	ldr	r3, [r3, #0]
24005500:	4a4b      	ldr	r2, [pc, #300]	; (24005630 <HAL_DMA_IRQHandler+0x1e8>)
24005502:	4293      	cmp	r3, r2
24005504:	d009      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
24005506:	687b      	ldr	r3, [r7, #4]
24005508:	681b      	ldr	r3, [r3, #0]
2400550a:	4a4a      	ldr	r2, [pc, #296]	; (24005634 <HAL_DMA_IRQHandler+0x1ec>)
2400550c:	4293      	cmp	r3, r2
2400550e:	d004      	beq.n	2400551a <HAL_DMA_IRQHandler+0xd2>
24005510:	687b      	ldr	r3, [r7, #4]
24005512:	681b      	ldr	r3, [r3, #0]
24005514:	4a48      	ldr	r2, [pc, #288]	; (24005638 <HAL_DMA_IRQHandler+0x1f0>)
24005516:	4293      	cmp	r3, r2
24005518:	d101      	bne.n	2400551e <HAL_DMA_IRQHandler+0xd6>
2400551a:	2301      	movs	r3, #1
2400551c:	e000      	b.n	24005520 <HAL_DMA_IRQHandler+0xd8>
2400551e:	2300      	movs	r3, #0
24005520:	2b00      	cmp	r3, #0
24005522:	f000 842b 	beq.w	24005d7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005526:	687b      	ldr	r3, [r7, #4]
24005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400552a:	f003 031f 	and.w	r3, r3, #31
2400552e:	2208      	movs	r2, #8
24005530:	409a      	lsls	r2, r3
24005532:	69bb      	ldr	r3, [r7, #24]
24005534:	4013      	ands	r3, r2
24005536:	2b00      	cmp	r3, #0
24005538:	f000 80a2 	beq.w	24005680 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
2400553c:	687b      	ldr	r3, [r7, #4]
2400553e:	681b      	ldr	r3, [r3, #0]
24005540:	4a2e      	ldr	r2, [pc, #184]	; (240055fc <HAL_DMA_IRQHandler+0x1b4>)
24005542:	4293      	cmp	r3, r2
24005544:	d04a      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005546:	687b      	ldr	r3, [r7, #4]
24005548:	681b      	ldr	r3, [r3, #0]
2400554a:	4a2d      	ldr	r2, [pc, #180]	; (24005600 <HAL_DMA_IRQHandler+0x1b8>)
2400554c:	4293      	cmp	r3, r2
2400554e:	d045      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005550:	687b      	ldr	r3, [r7, #4]
24005552:	681b      	ldr	r3, [r3, #0]
24005554:	4a2b      	ldr	r2, [pc, #172]	; (24005604 <HAL_DMA_IRQHandler+0x1bc>)
24005556:	4293      	cmp	r3, r2
24005558:	d040      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
2400555a:	687b      	ldr	r3, [r7, #4]
2400555c:	681b      	ldr	r3, [r3, #0]
2400555e:	4a2a      	ldr	r2, [pc, #168]	; (24005608 <HAL_DMA_IRQHandler+0x1c0>)
24005560:	4293      	cmp	r3, r2
24005562:	d03b      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005564:	687b      	ldr	r3, [r7, #4]
24005566:	681b      	ldr	r3, [r3, #0]
24005568:	4a28      	ldr	r2, [pc, #160]	; (2400560c <HAL_DMA_IRQHandler+0x1c4>)
2400556a:	4293      	cmp	r3, r2
2400556c:	d036      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
2400556e:	687b      	ldr	r3, [r7, #4]
24005570:	681b      	ldr	r3, [r3, #0]
24005572:	4a27      	ldr	r2, [pc, #156]	; (24005610 <HAL_DMA_IRQHandler+0x1c8>)
24005574:	4293      	cmp	r3, r2
24005576:	d031      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005578:	687b      	ldr	r3, [r7, #4]
2400557a:	681b      	ldr	r3, [r3, #0]
2400557c:	4a25      	ldr	r2, [pc, #148]	; (24005614 <HAL_DMA_IRQHandler+0x1cc>)
2400557e:	4293      	cmp	r3, r2
24005580:	d02c      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005582:	687b      	ldr	r3, [r7, #4]
24005584:	681b      	ldr	r3, [r3, #0]
24005586:	4a24      	ldr	r2, [pc, #144]	; (24005618 <HAL_DMA_IRQHandler+0x1d0>)
24005588:	4293      	cmp	r3, r2
2400558a:	d027      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
2400558c:	687b      	ldr	r3, [r7, #4]
2400558e:	681b      	ldr	r3, [r3, #0]
24005590:	4a22      	ldr	r2, [pc, #136]	; (2400561c <HAL_DMA_IRQHandler+0x1d4>)
24005592:	4293      	cmp	r3, r2
24005594:	d022      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
24005596:	687b      	ldr	r3, [r7, #4]
24005598:	681b      	ldr	r3, [r3, #0]
2400559a:	4a21      	ldr	r2, [pc, #132]	; (24005620 <HAL_DMA_IRQHandler+0x1d8>)
2400559c:	4293      	cmp	r3, r2
2400559e:	d01d      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055a0:	687b      	ldr	r3, [r7, #4]
240055a2:	681b      	ldr	r3, [r3, #0]
240055a4:	4a1f      	ldr	r2, [pc, #124]	; (24005624 <HAL_DMA_IRQHandler+0x1dc>)
240055a6:	4293      	cmp	r3, r2
240055a8:	d018      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055aa:	687b      	ldr	r3, [r7, #4]
240055ac:	681b      	ldr	r3, [r3, #0]
240055ae:	4a1e      	ldr	r2, [pc, #120]	; (24005628 <HAL_DMA_IRQHandler+0x1e0>)
240055b0:	4293      	cmp	r3, r2
240055b2:	d013      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055b4:	687b      	ldr	r3, [r7, #4]
240055b6:	681b      	ldr	r3, [r3, #0]
240055b8:	4a1c      	ldr	r2, [pc, #112]	; (2400562c <HAL_DMA_IRQHandler+0x1e4>)
240055ba:	4293      	cmp	r3, r2
240055bc:	d00e      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055be:	687b      	ldr	r3, [r7, #4]
240055c0:	681b      	ldr	r3, [r3, #0]
240055c2:	4a1b      	ldr	r2, [pc, #108]	; (24005630 <HAL_DMA_IRQHandler+0x1e8>)
240055c4:	4293      	cmp	r3, r2
240055c6:	d009      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055c8:	687b      	ldr	r3, [r7, #4]
240055ca:	681b      	ldr	r3, [r3, #0]
240055cc:	4a19      	ldr	r2, [pc, #100]	; (24005634 <HAL_DMA_IRQHandler+0x1ec>)
240055ce:	4293      	cmp	r3, r2
240055d0:	d004      	beq.n	240055dc <HAL_DMA_IRQHandler+0x194>
240055d2:	687b      	ldr	r3, [r7, #4]
240055d4:	681b      	ldr	r3, [r3, #0]
240055d6:	4a18      	ldr	r2, [pc, #96]	; (24005638 <HAL_DMA_IRQHandler+0x1f0>)
240055d8:	4293      	cmp	r3, r2
240055da:	d12f      	bne.n	2400563c <HAL_DMA_IRQHandler+0x1f4>
240055dc:	687b      	ldr	r3, [r7, #4]
240055de:	681b      	ldr	r3, [r3, #0]
240055e0:	681b      	ldr	r3, [r3, #0]
240055e2:	f003 0304 	and.w	r3, r3, #4
240055e6:	2b00      	cmp	r3, #0
240055e8:	bf14      	ite	ne
240055ea:	2301      	movne	r3, #1
240055ec:	2300      	moveq	r3, #0
240055ee:	b2db      	uxtb	r3, r3
240055f0:	e02e      	b.n	24005650 <HAL_DMA_IRQHandler+0x208>
240055f2:	bf00      	nop
240055f4:	240004c8 	.word	0x240004c8
240055f8:	1b4e81b5 	.word	0x1b4e81b5
240055fc:	40020010 	.word	0x40020010
24005600:	40020028 	.word	0x40020028
24005604:	40020040 	.word	0x40020040
24005608:	40020058 	.word	0x40020058
2400560c:	40020070 	.word	0x40020070
24005610:	40020088 	.word	0x40020088
24005614:	400200a0 	.word	0x400200a0
24005618:	400200b8 	.word	0x400200b8
2400561c:	40020410 	.word	0x40020410
24005620:	40020428 	.word	0x40020428
24005624:	40020440 	.word	0x40020440
24005628:	40020458 	.word	0x40020458
2400562c:	40020470 	.word	0x40020470
24005630:	40020488 	.word	0x40020488
24005634:	400204a0 	.word	0x400204a0
24005638:	400204b8 	.word	0x400204b8
2400563c:	687b      	ldr	r3, [r7, #4]
2400563e:	681b      	ldr	r3, [r3, #0]
24005640:	681b      	ldr	r3, [r3, #0]
24005642:	f003 0308 	and.w	r3, r3, #8
24005646:	2b00      	cmp	r3, #0
24005648:	bf14      	ite	ne
2400564a:	2301      	movne	r3, #1
2400564c:	2300      	moveq	r3, #0
2400564e:	b2db      	uxtb	r3, r3
24005650:	2b00      	cmp	r3, #0
24005652:	d015      	beq.n	24005680 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24005654:	687b      	ldr	r3, [r7, #4]
24005656:	681b      	ldr	r3, [r3, #0]
24005658:	681a      	ldr	r2, [r3, #0]
2400565a:	687b      	ldr	r3, [r7, #4]
2400565c:	681b      	ldr	r3, [r3, #0]
2400565e:	f022 0204 	bic.w	r2, r2, #4
24005662:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005664:	687b      	ldr	r3, [r7, #4]
24005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005668:	f003 031f 	and.w	r3, r3, #31
2400566c:	2208      	movs	r2, #8
2400566e:	409a      	lsls	r2, r3
24005670:	6a3b      	ldr	r3, [r7, #32]
24005672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005674:	687b      	ldr	r3, [r7, #4]
24005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005678:	f043 0201 	orr.w	r2, r3, #1
2400567c:	687b      	ldr	r3, [r7, #4]
2400567e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005680:	687b      	ldr	r3, [r7, #4]
24005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005684:	f003 031f 	and.w	r3, r3, #31
24005688:	69ba      	ldr	r2, [r7, #24]
2400568a:	fa22 f303 	lsr.w	r3, r2, r3
2400568e:	f003 0301 	and.w	r3, r3, #1
24005692:	2b00      	cmp	r3, #0
24005694:	d06e      	beq.n	24005774 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005696:	687b      	ldr	r3, [r7, #4]
24005698:	681b      	ldr	r3, [r3, #0]
2400569a:	4a69      	ldr	r2, [pc, #420]	; (24005840 <HAL_DMA_IRQHandler+0x3f8>)
2400569c:	4293      	cmp	r3, r2
2400569e:	d04a      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056a0:	687b      	ldr	r3, [r7, #4]
240056a2:	681b      	ldr	r3, [r3, #0]
240056a4:	4a67      	ldr	r2, [pc, #412]	; (24005844 <HAL_DMA_IRQHandler+0x3fc>)
240056a6:	4293      	cmp	r3, r2
240056a8:	d045      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056aa:	687b      	ldr	r3, [r7, #4]
240056ac:	681b      	ldr	r3, [r3, #0]
240056ae:	4a66      	ldr	r2, [pc, #408]	; (24005848 <HAL_DMA_IRQHandler+0x400>)
240056b0:	4293      	cmp	r3, r2
240056b2:	d040      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056b4:	687b      	ldr	r3, [r7, #4]
240056b6:	681b      	ldr	r3, [r3, #0]
240056b8:	4a64      	ldr	r2, [pc, #400]	; (2400584c <HAL_DMA_IRQHandler+0x404>)
240056ba:	4293      	cmp	r3, r2
240056bc:	d03b      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056be:	687b      	ldr	r3, [r7, #4]
240056c0:	681b      	ldr	r3, [r3, #0]
240056c2:	4a63      	ldr	r2, [pc, #396]	; (24005850 <HAL_DMA_IRQHandler+0x408>)
240056c4:	4293      	cmp	r3, r2
240056c6:	d036      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056c8:	687b      	ldr	r3, [r7, #4]
240056ca:	681b      	ldr	r3, [r3, #0]
240056cc:	4a61      	ldr	r2, [pc, #388]	; (24005854 <HAL_DMA_IRQHandler+0x40c>)
240056ce:	4293      	cmp	r3, r2
240056d0:	d031      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056d2:	687b      	ldr	r3, [r7, #4]
240056d4:	681b      	ldr	r3, [r3, #0]
240056d6:	4a60      	ldr	r2, [pc, #384]	; (24005858 <HAL_DMA_IRQHandler+0x410>)
240056d8:	4293      	cmp	r3, r2
240056da:	d02c      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056dc:	687b      	ldr	r3, [r7, #4]
240056de:	681b      	ldr	r3, [r3, #0]
240056e0:	4a5e      	ldr	r2, [pc, #376]	; (2400585c <HAL_DMA_IRQHandler+0x414>)
240056e2:	4293      	cmp	r3, r2
240056e4:	d027      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056e6:	687b      	ldr	r3, [r7, #4]
240056e8:	681b      	ldr	r3, [r3, #0]
240056ea:	4a5d      	ldr	r2, [pc, #372]	; (24005860 <HAL_DMA_IRQHandler+0x418>)
240056ec:	4293      	cmp	r3, r2
240056ee:	d022      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056f0:	687b      	ldr	r3, [r7, #4]
240056f2:	681b      	ldr	r3, [r3, #0]
240056f4:	4a5b      	ldr	r2, [pc, #364]	; (24005864 <HAL_DMA_IRQHandler+0x41c>)
240056f6:	4293      	cmp	r3, r2
240056f8:	d01d      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
240056fa:	687b      	ldr	r3, [r7, #4]
240056fc:	681b      	ldr	r3, [r3, #0]
240056fe:	4a5a      	ldr	r2, [pc, #360]	; (24005868 <HAL_DMA_IRQHandler+0x420>)
24005700:	4293      	cmp	r3, r2
24005702:	d018      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
24005704:	687b      	ldr	r3, [r7, #4]
24005706:	681b      	ldr	r3, [r3, #0]
24005708:	4a58      	ldr	r2, [pc, #352]	; (2400586c <HAL_DMA_IRQHandler+0x424>)
2400570a:	4293      	cmp	r3, r2
2400570c:	d013      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
2400570e:	687b      	ldr	r3, [r7, #4]
24005710:	681b      	ldr	r3, [r3, #0]
24005712:	4a57      	ldr	r2, [pc, #348]	; (24005870 <HAL_DMA_IRQHandler+0x428>)
24005714:	4293      	cmp	r3, r2
24005716:	d00e      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
24005718:	687b      	ldr	r3, [r7, #4]
2400571a:	681b      	ldr	r3, [r3, #0]
2400571c:	4a55      	ldr	r2, [pc, #340]	; (24005874 <HAL_DMA_IRQHandler+0x42c>)
2400571e:	4293      	cmp	r3, r2
24005720:	d009      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
24005722:	687b      	ldr	r3, [r7, #4]
24005724:	681b      	ldr	r3, [r3, #0]
24005726:	4a54      	ldr	r2, [pc, #336]	; (24005878 <HAL_DMA_IRQHandler+0x430>)
24005728:	4293      	cmp	r3, r2
2400572a:	d004      	beq.n	24005736 <HAL_DMA_IRQHandler+0x2ee>
2400572c:	687b      	ldr	r3, [r7, #4]
2400572e:	681b      	ldr	r3, [r3, #0]
24005730:	4a52      	ldr	r2, [pc, #328]	; (2400587c <HAL_DMA_IRQHandler+0x434>)
24005732:	4293      	cmp	r3, r2
24005734:	d10a      	bne.n	2400574c <HAL_DMA_IRQHandler+0x304>
24005736:	687b      	ldr	r3, [r7, #4]
24005738:	681b      	ldr	r3, [r3, #0]
2400573a:	695b      	ldr	r3, [r3, #20]
2400573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
24005740:	2b00      	cmp	r3, #0
24005742:	bf14      	ite	ne
24005744:	2301      	movne	r3, #1
24005746:	2300      	moveq	r3, #0
24005748:	b2db      	uxtb	r3, r3
2400574a:	e003      	b.n	24005754 <HAL_DMA_IRQHandler+0x30c>
2400574c:	687b      	ldr	r3, [r7, #4]
2400574e:	681b      	ldr	r3, [r3, #0]
24005750:	681b      	ldr	r3, [r3, #0]
24005752:	2300      	movs	r3, #0
24005754:	2b00      	cmp	r3, #0
24005756:	d00d      	beq.n	24005774 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005758:	687b      	ldr	r3, [r7, #4]
2400575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400575c:	f003 031f 	and.w	r3, r3, #31
24005760:	2201      	movs	r2, #1
24005762:	409a      	lsls	r2, r3
24005764:	6a3b      	ldr	r3, [r7, #32]
24005766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005768:	687b      	ldr	r3, [r7, #4]
2400576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400576c:	f043 0202 	orr.w	r2, r3, #2
24005770:	687b      	ldr	r3, [r7, #4]
24005772:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005774:	687b      	ldr	r3, [r7, #4]
24005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005778:	f003 031f 	and.w	r3, r3, #31
2400577c:	2204      	movs	r2, #4
2400577e:	409a      	lsls	r2, r3
24005780:	69bb      	ldr	r3, [r7, #24]
24005782:	4013      	ands	r3, r2
24005784:	2b00      	cmp	r3, #0
24005786:	f000 808f 	beq.w	240058a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400578a:	687b      	ldr	r3, [r7, #4]
2400578c:	681b      	ldr	r3, [r3, #0]
2400578e:	4a2c      	ldr	r2, [pc, #176]	; (24005840 <HAL_DMA_IRQHandler+0x3f8>)
24005790:	4293      	cmp	r3, r2
24005792:	d04a      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
24005794:	687b      	ldr	r3, [r7, #4]
24005796:	681b      	ldr	r3, [r3, #0]
24005798:	4a2a      	ldr	r2, [pc, #168]	; (24005844 <HAL_DMA_IRQHandler+0x3fc>)
2400579a:	4293      	cmp	r3, r2
2400579c:	d045      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
2400579e:	687b      	ldr	r3, [r7, #4]
240057a0:	681b      	ldr	r3, [r3, #0]
240057a2:	4a29      	ldr	r2, [pc, #164]	; (24005848 <HAL_DMA_IRQHandler+0x400>)
240057a4:	4293      	cmp	r3, r2
240057a6:	d040      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057a8:	687b      	ldr	r3, [r7, #4]
240057aa:	681b      	ldr	r3, [r3, #0]
240057ac:	4a27      	ldr	r2, [pc, #156]	; (2400584c <HAL_DMA_IRQHandler+0x404>)
240057ae:	4293      	cmp	r3, r2
240057b0:	d03b      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057b2:	687b      	ldr	r3, [r7, #4]
240057b4:	681b      	ldr	r3, [r3, #0]
240057b6:	4a26      	ldr	r2, [pc, #152]	; (24005850 <HAL_DMA_IRQHandler+0x408>)
240057b8:	4293      	cmp	r3, r2
240057ba:	d036      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057bc:	687b      	ldr	r3, [r7, #4]
240057be:	681b      	ldr	r3, [r3, #0]
240057c0:	4a24      	ldr	r2, [pc, #144]	; (24005854 <HAL_DMA_IRQHandler+0x40c>)
240057c2:	4293      	cmp	r3, r2
240057c4:	d031      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057c6:	687b      	ldr	r3, [r7, #4]
240057c8:	681b      	ldr	r3, [r3, #0]
240057ca:	4a23      	ldr	r2, [pc, #140]	; (24005858 <HAL_DMA_IRQHandler+0x410>)
240057cc:	4293      	cmp	r3, r2
240057ce:	d02c      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057d0:	687b      	ldr	r3, [r7, #4]
240057d2:	681b      	ldr	r3, [r3, #0]
240057d4:	4a21      	ldr	r2, [pc, #132]	; (2400585c <HAL_DMA_IRQHandler+0x414>)
240057d6:	4293      	cmp	r3, r2
240057d8:	d027      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057da:	687b      	ldr	r3, [r7, #4]
240057dc:	681b      	ldr	r3, [r3, #0]
240057de:	4a20      	ldr	r2, [pc, #128]	; (24005860 <HAL_DMA_IRQHandler+0x418>)
240057e0:	4293      	cmp	r3, r2
240057e2:	d022      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057e4:	687b      	ldr	r3, [r7, #4]
240057e6:	681b      	ldr	r3, [r3, #0]
240057e8:	4a1e      	ldr	r2, [pc, #120]	; (24005864 <HAL_DMA_IRQHandler+0x41c>)
240057ea:	4293      	cmp	r3, r2
240057ec:	d01d      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057ee:	687b      	ldr	r3, [r7, #4]
240057f0:	681b      	ldr	r3, [r3, #0]
240057f2:	4a1d      	ldr	r2, [pc, #116]	; (24005868 <HAL_DMA_IRQHandler+0x420>)
240057f4:	4293      	cmp	r3, r2
240057f6:	d018      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
240057f8:	687b      	ldr	r3, [r7, #4]
240057fa:	681b      	ldr	r3, [r3, #0]
240057fc:	4a1b      	ldr	r2, [pc, #108]	; (2400586c <HAL_DMA_IRQHandler+0x424>)
240057fe:	4293      	cmp	r3, r2
24005800:	d013      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
24005802:	687b      	ldr	r3, [r7, #4]
24005804:	681b      	ldr	r3, [r3, #0]
24005806:	4a1a      	ldr	r2, [pc, #104]	; (24005870 <HAL_DMA_IRQHandler+0x428>)
24005808:	4293      	cmp	r3, r2
2400580a:	d00e      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
2400580c:	687b      	ldr	r3, [r7, #4]
2400580e:	681b      	ldr	r3, [r3, #0]
24005810:	4a18      	ldr	r2, [pc, #96]	; (24005874 <HAL_DMA_IRQHandler+0x42c>)
24005812:	4293      	cmp	r3, r2
24005814:	d009      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
24005816:	687b      	ldr	r3, [r7, #4]
24005818:	681b      	ldr	r3, [r3, #0]
2400581a:	4a17      	ldr	r2, [pc, #92]	; (24005878 <HAL_DMA_IRQHandler+0x430>)
2400581c:	4293      	cmp	r3, r2
2400581e:	d004      	beq.n	2400582a <HAL_DMA_IRQHandler+0x3e2>
24005820:	687b      	ldr	r3, [r7, #4]
24005822:	681b      	ldr	r3, [r3, #0]
24005824:	4a15      	ldr	r2, [pc, #84]	; (2400587c <HAL_DMA_IRQHandler+0x434>)
24005826:	4293      	cmp	r3, r2
24005828:	d12a      	bne.n	24005880 <HAL_DMA_IRQHandler+0x438>
2400582a:	687b      	ldr	r3, [r7, #4]
2400582c:	681b      	ldr	r3, [r3, #0]
2400582e:	681b      	ldr	r3, [r3, #0]
24005830:	f003 0302 	and.w	r3, r3, #2
24005834:	2b00      	cmp	r3, #0
24005836:	bf14      	ite	ne
24005838:	2301      	movne	r3, #1
2400583a:	2300      	moveq	r3, #0
2400583c:	b2db      	uxtb	r3, r3
2400583e:	e023      	b.n	24005888 <HAL_DMA_IRQHandler+0x440>
24005840:	40020010 	.word	0x40020010
24005844:	40020028 	.word	0x40020028
24005848:	40020040 	.word	0x40020040
2400584c:	40020058 	.word	0x40020058
24005850:	40020070 	.word	0x40020070
24005854:	40020088 	.word	0x40020088
24005858:	400200a0 	.word	0x400200a0
2400585c:	400200b8 	.word	0x400200b8
24005860:	40020410 	.word	0x40020410
24005864:	40020428 	.word	0x40020428
24005868:	40020440 	.word	0x40020440
2400586c:	40020458 	.word	0x40020458
24005870:	40020470 	.word	0x40020470
24005874:	40020488 	.word	0x40020488
24005878:	400204a0 	.word	0x400204a0
2400587c:	400204b8 	.word	0x400204b8
24005880:	687b      	ldr	r3, [r7, #4]
24005882:	681b      	ldr	r3, [r3, #0]
24005884:	681b      	ldr	r3, [r3, #0]
24005886:	2300      	movs	r3, #0
24005888:	2b00      	cmp	r3, #0
2400588a:	d00d      	beq.n	240058a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400588c:	687b      	ldr	r3, [r7, #4]
2400588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005890:	f003 031f 	and.w	r3, r3, #31
24005894:	2204      	movs	r2, #4
24005896:	409a      	lsls	r2, r3
24005898:	6a3b      	ldr	r3, [r7, #32]
2400589a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400589c:	687b      	ldr	r3, [r7, #4]
2400589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240058a0:	f043 0204 	orr.w	r2, r3, #4
240058a4:	687b      	ldr	r3, [r7, #4]
240058a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058a8:	687b      	ldr	r3, [r7, #4]
240058aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240058ac:	f003 031f 	and.w	r3, r3, #31
240058b0:	2210      	movs	r2, #16
240058b2:	409a      	lsls	r2, r3
240058b4:	69bb      	ldr	r3, [r7, #24]
240058b6:	4013      	ands	r3, r2
240058b8:	2b00      	cmp	r3, #0
240058ba:	f000 80a6 	beq.w	24005a0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240058be:	687b      	ldr	r3, [r7, #4]
240058c0:	681b      	ldr	r3, [r3, #0]
240058c2:	4a85      	ldr	r2, [pc, #532]	; (24005ad8 <HAL_DMA_IRQHandler+0x690>)
240058c4:	4293      	cmp	r3, r2
240058c6:	d04a      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058c8:	687b      	ldr	r3, [r7, #4]
240058ca:	681b      	ldr	r3, [r3, #0]
240058cc:	4a83      	ldr	r2, [pc, #524]	; (24005adc <HAL_DMA_IRQHandler+0x694>)
240058ce:	4293      	cmp	r3, r2
240058d0:	d045      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058d2:	687b      	ldr	r3, [r7, #4]
240058d4:	681b      	ldr	r3, [r3, #0]
240058d6:	4a82      	ldr	r2, [pc, #520]	; (24005ae0 <HAL_DMA_IRQHandler+0x698>)
240058d8:	4293      	cmp	r3, r2
240058da:	d040      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058dc:	687b      	ldr	r3, [r7, #4]
240058de:	681b      	ldr	r3, [r3, #0]
240058e0:	4a80      	ldr	r2, [pc, #512]	; (24005ae4 <HAL_DMA_IRQHandler+0x69c>)
240058e2:	4293      	cmp	r3, r2
240058e4:	d03b      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058e6:	687b      	ldr	r3, [r7, #4]
240058e8:	681b      	ldr	r3, [r3, #0]
240058ea:	4a7f      	ldr	r2, [pc, #508]	; (24005ae8 <HAL_DMA_IRQHandler+0x6a0>)
240058ec:	4293      	cmp	r3, r2
240058ee:	d036      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058f0:	687b      	ldr	r3, [r7, #4]
240058f2:	681b      	ldr	r3, [r3, #0]
240058f4:	4a7d      	ldr	r2, [pc, #500]	; (24005aec <HAL_DMA_IRQHandler+0x6a4>)
240058f6:	4293      	cmp	r3, r2
240058f8:	d031      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
240058fa:	687b      	ldr	r3, [r7, #4]
240058fc:	681b      	ldr	r3, [r3, #0]
240058fe:	4a7c      	ldr	r2, [pc, #496]	; (24005af0 <HAL_DMA_IRQHandler+0x6a8>)
24005900:	4293      	cmp	r3, r2
24005902:	d02c      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005904:	687b      	ldr	r3, [r7, #4]
24005906:	681b      	ldr	r3, [r3, #0]
24005908:	4a7a      	ldr	r2, [pc, #488]	; (24005af4 <HAL_DMA_IRQHandler+0x6ac>)
2400590a:	4293      	cmp	r3, r2
2400590c:	d027      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
2400590e:	687b      	ldr	r3, [r7, #4]
24005910:	681b      	ldr	r3, [r3, #0]
24005912:	4a79      	ldr	r2, [pc, #484]	; (24005af8 <HAL_DMA_IRQHandler+0x6b0>)
24005914:	4293      	cmp	r3, r2
24005916:	d022      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005918:	687b      	ldr	r3, [r7, #4]
2400591a:	681b      	ldr	r3, [r3, #0]
2400591c:	4a77      	ldr	r2, [pc, #476]	; (24005afc <HAL_DMA_IRQHandler+0x6b4>)
2400591e:	4293      	cmp	r3, r2
24005920:	d01d      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005922:	687b      	ldr	r3, [r7, #4]
24005924:	681b      	ldr	r3, [r3, #0]
24005926:	4a76      	ldr	r2, [pc, #472]	; (24005b00 <HAL_DMA_IRQHandler+0x6b8>)
24005928:	4293      	cmp	r3, r2
2400592a:	d018      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
2400592c:	687b      	ldr	r3, [r7, #4]
2400592e:	681b      	ldr	r3, [r3, #0]
24005930:	4a74      	ldr	r2, [pc, #464]	; (24005b04 <HAL_DMA_IRQHandler+0x6bc>)
24005932:	4293      	cmp	r3, r2
24005934:	d013      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005936:	687b      	ldr	r3, [r7, #4]
24005938:	681b      	ldr	r3, [r3, #0]
2400593a:	4a73      	ldr	r2, [pc, #460]	; (24005b08 <HAL_DMA_IRQHandler+0x6c0>)
2400593c:	4293      	cmp	r3, r2
2400593e:	d00e      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005940:	687b      	ldr	r3, [r7, #4]
24005942:	681b      	ldr	r3, [r3, #0]
24005944:	4a71      	ldr	r2, [pc, #452]	; (24005b0c <HAL_DMA_IRQHandler+0x6c4>)
24005946:	4293      	cmp	r3, r2
24005948:	d009      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
2400594a:	687b      	ldr	r3, [r7, #4]
2400594c:	681b      	ldr	r3, [r3, #0]
2400594e:	4a70      	ldr	r2, [pc, #448]	; (24005b10 <HAL_DMA_IRQHandler+0x6c8>)
24005950:	4293      	cmp	r3, r2
24005952:	d004      	beq.n	2400595e <HAL_DMA_IRQHandler+0x516>
24005954:	687b      	ldr	r3, [r7, #4]
24005956:	681b      	ldr	r3, [r3, #0]
24005958:	4a6e      	ldr	r2, [pc, #440]	; (24005b14 <HAL_DMA_IRQHandler+0x6cc>)
2400595a:	4293      	cmp	r3, r2
2400595c:	d10a      	bne.n	24005974 <HAL_DMA_IRQHandler+0x52c>
2400595e:	687b      	ldr	r3, [r7, #4]
24005960:	681b      	ldr	r3, [r3, #0]
24005962:	681b      	ldr	r3, [r3, #0]
24005964:	f003 0308 	and.w	r3, r3, #8
24005968:	2b00      	cmp	r3, #0
2400596a:	bf14      	ite	ne
2400596c:	2301      	movne	r3, #1
2400596e:	2300      	moveq	r3, #0
24005970:	b2db      	uxtb	r3, r3
24005972:	e009      	b.n	24005988 <HAL_DMA_IRQHandler+0x540>
24005974:	687b      	ldr	r3, [r7, #4]
24005976:	681b      	ldr	r3, [r3, #0]
24005978:	681b      	ldr	r3, [r3, #0]
2400597a:	f003 0304 	and.w	r3, r3, #4
2400597e:	2b00      	cmp	r3, #0
24005980:	bf14      	ite	ne
24005982:	2301      	movne	r3, #1
24005984:	2300      	moveq	r3, #0
24005986:	b2db      	uxtb	r3, r3
24005988:	2b00      	cmp	r3, #0
2400598a:	d03e      	beq.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
2400598c:	687b      	ldr	r3, [r7, #4]
2400598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005990:	f003 031f 	and.w	r3, r3, #31
24005994:	2210      	movs	r2, #16
24005996:	409a      	lsls	r2, r3
24005998:	6a3b      	ldr	r3, [r7, #32]
2400599a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2400599c:	687b      	ldr	r3, [r7, #4]
2400599e:	681b      	ldr	r3, [r3, #0]
240059a0:	681b      	ldr	r3, [r3, #0]
240059a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240059a6:	2b00      	cmp	r3, #0
240059a8:	d018      	beq.n	240059dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
240059aa:	687b      	ldr	r3, [r7, #4]
240059ac:	681b      	ldr	r3, [r3, #0]
240059ae:	681b      	ldr	r3, [r3, #0]
240059b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240059b4:	2b00      	cmp	r3, #0
240059b6:	d108      	bne.n	240059ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
240059b8:	687b      	ldr	r3, [r7, #4]
240059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240059bc:	2b00      	cmp	r3, #0
240059be:	d024      	beq.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
240059c0:	687b      	ldr	r3, [r7, #4]
240059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240059c4:	6878      	ldr	r0, [r7, #4]
240059c6:	4798      	blx	r3
240059c8:	e01f      	b.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
240059ca:	687b      	ldr	r3, [r7, #4]
240059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240059ce:	2b00      	cmp	r3, #0
240059d0:	d01b      	beq.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
240059d2:	687b      	ldr	r3, [r7, #4]
240059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240059d6:	6878      	ldr	r0, [r7, #4]
240059d8:	4798      	blx	r3
240059da:	e016      	b.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240059dc:	687b      	ldr	r3, [r7, #4]
240059de:	681b      	ldr	r3, [r3, #0]
240059e0:	681b      	ldr	r3, [r3, #0]
240059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
240059e6:	2b00      	cmp	r3, #0
240059e8:	d107      	bne.n	240059fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240059ea:	687b      	ldr	r3, [r7, #4]
240059ec:	681b      	ldr	r3, [r3, #0]
240059ee:	681a      	ldr	r2, [r3, #0]
240059f0:	687b      	ldr	r3, [r7, #4]
240059f2:	681b      	ldr	r3, [r3, #0]
240059f4:	f022 0208 	bic.w	r2, r2, #8
240059f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
240059fa:	687b      	ldr	r3, [r7, #4]
240059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240059fe:	2b00      	cmp	r3, #0
24005a00:	d003      	beq.n	24005a0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
24005a02:	687b      	ldr	r3, [r7, #4]
24005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005a06:	6878      	ldr	r0, [r7, #4]
24005a08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005a0a:	687b      	ldr	r3, [r7, #4]
24005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005a0e:	f003 031f 	and.w	r3, r3, #31
24005a12:	2220      	movs	r2, #32
24005a14:	409a      	lsls	r2, r3
24005a16:	69bb      	ldr	r3, [r7, #24]
24005a18:	4013      	ands	r3, r2
24005a1a:	2b00      	cmp	r3, #0
24005a1c:	f000 8110 	beq.w	24005c40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005a20:	687b      	ldr	r3, [r7, #4]
24005a22:	681b      	ldr	r3, [r3, #0]
24005a24:	4a2c      	ldr	r2, [pc, #176]	; (24005ad8 <HAL_DMA_IRQHandler+0x690>)
24005a26:	4293      	cmp	r3, r2
24005a28:	d04a      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a2a:	687b      	ldr	r3, [r7, #4]
24005a2c:	681b      	ldr	r3, [r3, #0]
24005a2e:	4a2b      	ldr	r2, [pc, #172]	; (24005adc <HAL_DMA_IRQHandler+0x694>)
24005a30:	4293      	cmp	r3, r2
24005a32:	d045      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a34:	687b      	ldr	r3, [r7, #4]
24005a36:	681b      	ldr	r3, [r3, #0]
24005a38:	4a29      	ldr	r2, [pc, #164]	; (24005ae0 <HAL_DMA_IRQHandler+0x698>)
24005a3a:	4293      	cmp	r3, r2
24005a3c:	d040      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a3e:	687b      	ldr	r3, [r7, #4]
24005a40:	681b      	ldr	r3, [r3, #0]
24005a42:	4a28      	ldr	r2, [pc, #160]	; (24005ae4 <HAL_DMA_IRQHandler+0x69c>)
24005a44:	4293      	cmp	r3, r2
24005a46:	d03b      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a48:	687b      	ldr	r3, [r7, #4]
24005a4a:	681b      	ldr	r3, [r3, #0]
24005a4c:	4a26      	ldr	r2, [pc, #152]	; (24005ae8 <HAL_DMA_IRQHandler+0x6a0>)
24005a4e:	4293      	cmp	r3, r2
24005a50:	d036      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a52:	687b      	ldr	r3, [r7, #4]
24005a54:	681b      	ldr	r3, [r3, #0]
24005a56:	4a25      	ldr	r2, [pc, #148]	; (24005aec <HAL_DMA_IRQHandler+0x6a4>)
24005a58:	4293      	cmp	r3, r2
24005a5a:	d031      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a5c:	687b      	ldr	r3, [r7, #4]
24005a5e:	681b      	ldr	r3, [r3, #0]
24005a60:	4a23      	ldr	r2, [pc, #140]	; (24005af0 <HAL_DMA_IRQHandler+0x6a8>)
24005a62:	4293      	cmp	r3, r2
24005a64:	d02c      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a66:	687b      	ldr	r3, [r7, #4]
24005a68:	681b      	ldr	r3, [r3, #0]
24005a6a:	4a22      	ldr	r2, [pc, #136]	; (24005af4 <HAL_DMA_IRQHandler+0x6ac>)
24005a6c:	4293      	cmp	r3, r2
24005a6e:	d027      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a70:	687b      	ldr	r3, [r7, #4]
24005a72:	681b      	ldr	r3, [r3, #0]
24005a74:	4a20      	ldr	r2, [pc, #128]	; (24005af8 <HAL_DMA_IRQHandler+0x6b0>)
24005a76:	4293      	cmp	r3, r2
24005a78:	d022      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a7a:	687b      	ldr	r3, [r7, #4]
24005a7c:	681b      	ldr	r3, [r3, #0]
24005a7e:	4a1f      	ldr	r2, [pc, #124]	; (24005afc <HAL_DMA_IRQHandler+0x6b4>)
24005a80:	4293      	cmp	r3, r2
24005a82:	d01d      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a84:	687b      	ldr	r3, [r7, #4]
24005a86:	681b      	ldr	r3, [r3, #0]
24005a88:	4a1d      	ldr	r2, [pc, #116]	; (24005b00 <HAL_DMA_IRQHandler+0x6b8>)
24005a8a:	4293      	cmp	r3, r2
24005a8c:	d018      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a8e:	687b      	ldr	r3, [r7, #4]
24005a90:	681b      	ldr	r3, [r3, #0]
24005a92:	4a1c      	ldr	r2, [pc, #112]	; (24005b04 <HAL_DMA_IRQHandler+0x6bc>)
24005a94:	4293      	cmp	r3, r2
24005a96:	d013      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005a98:	687b      	ldr	r3, [r7, #4]
24005a9a:	681b      	ldr	r3, [r3, #0]
24005a9c:	4a1a      	ldr	r2, [pc, #104]	; (24005b08 <HAL_DMA_IRQHandler+0x6c0>)
24005a9e:	4293      	cmp	r3, r2
24005aa0:	d00e      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005aa2:	687b      	ldr	r3, [r7, #4]
24005aa4:	681b      	ldr	r3, [r3, #0]
24005aa6:	4a19      	ldr	r2, [pc, #100]	; (24005b0c <HAL_DMA_IRQHandler+0x6c4>)
24005aa8:	4293      	cmp	r3, r2
24005aaa:	d009      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005aac:	687b      	ldr	r3, [r7, #4]
24005aae:	681b      	ldr	r3, [r3, #0]
24005ab0:	4a17      	ldr	r2, [pc, #92]	; (24005b10 <HAL_DMA_IRQHandler+0x6c8>)
24005ab2:	4293      	cmp	r3, r2
24005ab4:	d004      	beq.n	24005ac0 <HAL_DMA_IRQHandler+0x678>
24005ab6:	687b      	ldr	r3, [r7, #4]
24005ab8:	681b      	ldr	r3, [r3, #0]
24005aba:	4a16      	ldr	r2, [pc, #88]	; (24005b14 <HAL_DMA_IRQHandler+0x6cc>)
24005abc:	4293      	cmp	r3, r2
24005abe:	d12b      	bne.n	24005b18 <HAL_DMA_IRQHandler+0x6d0>
24005ac0:	687b      	ldr	r3, [r7, #4]
24005ac2:	681b      	ldr	r3, [r3, #0]
24005ac4:	681b      	ldr	r3, [r3, #0]
24005ac6:	f003 0310 	and.w	r3, r3, #16
24005aca:	2b00      	cmp	r3, #0
24005acc:	bf14      	ite	ne
24005ace:	2301      	movne	r3, #1
24005ad0:	2300      	moveq	r3, #0
24005ad2:	b2db      	uxtb	r3, r3
24005ad4:	e02a      	b.n	24005b2c <HAL_DMA_IRQHandler+0x6e4>
24005ad6:	bf00      	nop
24005ad8:	40020010 	.word	0x40020010
24005adc:	40020028 	.word	0x40020028
24005ae0:	40020040 	.word	0x40020040
24005ae4:	40020058 	.word	0x40020058
24005ae8:	40020070 	.word	0x40020070
24005aec:	40020088 	.word	0x40020088
24005af0:	400200a0 	.word	0x400200a0
24005af4:	400200b8 	.word	0x400200b8
24005af8:	40020410 	.word	0x40020410
24005afc:	40020428 	.word	0x40020428
24005b00:	40020440 	.word	0x40020440
24005b04:	40020458 	.word	0x40020458
24005b08:	40020470 	.word	0x40020470
24005b0c:	40020488 	.word	0x40020488
24005b10:	400204a0 	.word	0x400204a0
24005b14:	400204b8 	.word	0x400204b8
24005b18:	687b      	ldr	r3, [r7, #4]
24005b1a:	681b      	ldr	r3, [r3, #0]
24005b1c:	681b      	ldr	r3, [r3, #0]
24005b1e:	f003 0302 	and.w	r3, r3, #2
24005b22:	2b00      	cmp	r3, #0
24005b24:	bf14      	ite	ne
24005b26:	2301      	movne	r3, #1
24005b28:	2300      	moveq	r3, #0
24005b2a:	b2db      	uxtb	r3, r3
24005b2c:	2b00      	cmp	r3, #0
24005b2e:	f000 8087 	beq.w	24005c40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b32:	687b      	ldr	r3, [r7, #4]
24005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005b36:	f003 031f 	and.w	r3, r3, #31
24005b3a:	2220      	movs	r2, #32
24005b3c:	409a      	lsls	r2, r3
24005b3e:	6a3b      	ldr	r3, [r7, #32]
24005b40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
24005b42:	687b      	ldr	r3, [r7, #4]
24005b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24005b48:	b2db      	uxtb	r3, r3
24005b4a:	2b04      	cmp	r3, #4
24005b4c:	d139      	bne.n	24005bc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005b4e:	687b      	ldr	r3, [r7, #4]
24005b50:	681b      	ldr	r3, [r3, #0]
24005b52:	681a      	ldr	r2, [r3, #0]
24005b54:	687b      	ldr	r3, [r7, #4]
24005b56:	681b      	ldr	r3, [r3, #0]
24005b58:	f022 0216 	bic.w	r2, r2, #22
24005b5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005b5e:	687b      	ldr	r3, [r7, #4]
24005b60:	681b      	ldr	r3, [r3, #0]
24005b62:	695a      	ldr	r2, [r3, #20]
24005b64:	687b      	ldr	r3, [r7, #4]
24005b66:	681b      	ldr	r3, [r3, #0]
24005b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24005b6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005b6e:	687b      	ldr	r3, [r7, #4]
24005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005b72:	2b00      	cmp	r3, #0
24005b74:	d103      	bne.n	24005b7e <HAL_DMA_IRQHandler+0x736>
24005b76:	687b      	ldr	r3, [r7, #4]
24005b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005b7a:	2b00      	cmp	r3, #0
24005b7c:	d007      	beq.n	24005b8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005b7e:	687b      	ldr	r3, [r7, #4]
24005b80:	681b      	ldr	r3, [r3, #0]
24005b82:	681a      	ldr	r2, [r3, #0]
24005b84:	687b      	ldr	r3, [r7, #4]
24005b86:	681b      	ldr	r3, [r3, #0]
24005b88:	f022 0208 	bic.w	r2, r2, #8
24005b8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005b8e:	687b      	ldr	r3, [r7, #4]
24005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005b92:	f003 031f 	and.w	r3, r3, #31
24005b96:	223f      	movs	r2, #63	; 0x3f
24005b98:	409a      	lsls	r2, r3
24005b9a:	6a3b      	ldr	r3, [r7, #32]
24005b9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24005b9e:	687b      	ldr	r3, [r7, #4]
24005ba0:	2201      	movs	r2, #1
24005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24005ba6:	687b      	ldr	r3, [r7, #4]
24005ba8:	2200      	movs	r2, #0
24005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24005bae:	687b      	ldr	r3, [r7, #4]
24005bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005bb2:	2b00      	cmp	r3, #0
24005bb4:	f000 834a 	beq.w	2400624c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
24005bb8:	687b      	ldr	r3, [r7, #4]
24005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005bbc:	6878      	ldr	r0, [r7, #4]
24005bbe:	4798      	blx	r3
          }
          return;
24005bc0:	e344      	b.n	2400624c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005bc2:	687b      	ldr	r3, [r7, #4]
24005bc4:	681b      	ldr	r3, [r3, #0]
24005bc6:	681b      	ldr	r3, [r3, #0]
24005bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24005bcc:	2b00      	cmp	r3, #0
24005bce:	d018      	beq.n	24005c02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005bd0:	687b      	ldr	r3, [r7, #4]
24005bd2:	681b      	ldr	r3, [r3, #0]
24005bd4:	681b      	ldr	r3, [r3, #0]
24005bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24005bda:	2b00      	cmp	r3, #0
24005bdc:	d108      	bne.n	24005bf0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24005bde:	687b      	ldr	r3, [r7, #4]
24005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005be2:	2b00      	cmp	r3, #0
24005be4:	d02c      	beq.n	24005c40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24005be6:	687b      	ldr	r3, [r7, #4]
24005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005bea:	6878      	ldr	r0, [r7, #4]
24005bec:	4798      	blx	r3
24005bee:	e027      	b.n	24005c40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24005bf0:	687b      	ldr	r3, [r7, #4]
24005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005bf4:	2b00      	cmp	r3, #0
24005bf6:	d023      	beq.n	24005c40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24005bf8:	687b      	ldr	r3, [r7, #4]
24005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005bfc:	6878      	ldr	r0, [r7, #4]
24005bfe:	4798      	blx	r3
24005c00:	e01e      	b.n	24005c40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005c02:	687b      	ldr	r3, [r7, #4]
24005c04:	681b      	ldr	r3, [r3, #0]
24005c06:	681b      	ldr	r3, [r3, #0]
24005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
24005c0c:	2b00      	cmp	r3, #0
24005c0e:	d10f      	bne.n	24005c30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005c10:	687b      	ldr	r3, [r7, #4]
24005c12:	681b      	ldr	r3, [r3, #0]
24005c14:	681a      	ldr	r2, [r3, #0]
24005c16:	687b      	ldr	r3, [r7, #4]
24005c18:	681b      	ldr	r3, [r3, #0]
24005c1a:	f022 0210 	bic.w	r2, r2, #16
24005c1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24005c20:	687b      	ldr	r3, [r7, #4]
24005c22:	2201      	movs	r2, #1
24005c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24005c28:	687b      	ldr	r3, [r7, #4]
24005c2a:	2200      	movs	r2, #0
24005c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24005c30:	687b      	ldr	r3, [r7, #4]
24005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c34:	2b00      	cmp	r3, #0
24005c36:	d003      	beq.n	24005c40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24005c38:	687b      	ldr	r3, [r7, #4]
24005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c3c:	6878      	ldr	r0, [r7, #4]
24005c3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005c40:	687b      	ldr	r3, [r7, #4]
24005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005c44:	2b00      	cmp	r3, #0
24005c46:	f000 8306 	beq.w	24006256 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005c4a:	687b      	ldr	r3, [r7, #4]
24005c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005c4e:	f003 0301 	and.w	r3, r3, #1
24005c52:	2b00      	cmp	r3, #0
24005c54:	f000 8088 	beq.w	24005d68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24005c58:	687b      	ldr	r3, [r7, #4]
24005c5a:	2204      	movs	r2, #4
24005c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24005c60:	687b      	ldr	r3, [r7, #4]
24005c62:	681b      	ldr	r3, [r3, #0]
24005c64:	4a7a      	ldr	r2, [pc, #488]	; (24005e50 <HAL_DMA_IRQHandler+0xa08>)
24005c66:	4293      	cmp	r3, r2
24005c68:	d04a      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c6a:	687b      	ldr	r3, [r7, #4]
24005c6c:	681b      	ldr	r3, [r3, #0]
24005c6e:	4a79      	ldr	r2, [pc, #484]	; (24005e54 <HAL_DMA_IRQHandler+0xa0c>)
24005c70:	4293      	cmp	r3, r2
24005c72:	d045      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c74:	687b      	ldr	r3, [r7, #4]
24005c76:	681b      	ldr	r3, [r3, #0]
24005c78:	4a77      	ldr	r2, [pc, #476]	; (24005e58 <HAL_DMA_IRQHandler+0xa10>)
24005c7a:	4293      	cmp	r3, r2
24005c7c:	d040      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c7e:	687b      	ldr	r3, [r7, #4]
24005c80:	681b      	ldr	r3, [r3, #0]
24005c82:	4a76      	ldr	r2, [pc, #472]	; (24005e5c <HAL_DMA_IRQHandler+0xa14>)
24005c84:	4293      	cmp	r3, r2
24005c86:	d03b      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c88:	687b      	ldr	r3, [r7, #4]
24005c8a:	681b      	ldr	r3, [r3, #0]
24005c8c:	4a74      	ldr	r2, [pc, #464]	; (24005e60 <HAL_DMA_IRQHandler+0xa18>)
24005c8e:	4293      	cmp	r3, r2
24005c90:	d036      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c92:	687b      	ldr	r3, [r7, #4]
24005c94:	681b      	ldr	r3, [r3, #0]
24005c96:	4a73      	ldr	r2, [pc, #460]	; (24005e64 <HAL_DMA_IRQHandler+0xa1c>)
24005c98:	4293      	cmp	r3, r2
24005c9a:	d031      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005c9c:	687b      	ldr	r3, [r7, #4]
24005c9e:	681b      	ldr	r3, [r3, #0]
24005ca0:	4a71      	ldr	r2, [pc, #452]	; (24005e68 <HAL_DMA_IRQHandler+0xa20>)
24005ca2:	4293      	cmp	r3, r2
24005ca4:	d02c      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005ca6:	687b      	ldr	r3, [r7, #4]
24005ca8:	681b      	ldr	r3, [r3, #0]
24005caa:	4a70      	ldr	r2, [pc, #448]	; (24005e6c <HAL_DMA_IRQHandler+0xa24>)
24005cac:	4293      	cmp	r3, r2
24005cae:	d027      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cb0:	687b      	ldr	r3, [r7, #4]
24005cb2:	681b      	ldr	r3, [r3, #0]
24005cb4:	4a6e      	ldr	r2, [pc, #440]	; (24005e70 <HAL_DMA_IRQHandler+0xa28>)
24005cb6:	4293      	cmp	r3, r2
24005cb8:	d022      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cba:	687b      	ldr	r3, [r7, #4]
24005cbc:	681b      	ldr	r3, [r3, #0]
24005cbe:	4a6d      	ldr	r2, [pc, #436]	; (24005e74 <HAL_DMA_IRQHandler+0xa2c>)
24005cc0:	4293      	cmp	r3, r2
24005cc2:	d01d      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cc4:	687b      	ldr	r3, [r7, #4]
24005cc6:	681b      	ldr	r3, [r3, #0]
24005cc8:	4a6b      	ldr	r2, [pc, #428]	; (24005e78 <HAL_DMA_IRQHandler+0xa30>)
24005cca:	4293      	cmp	r3, r2
24005ccc:	d018      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cce:	687b      	ldr	r3, [r7, #4]
24005cd0:	681b      	ldr	r3, [r3, #0]
24005cd2:	4a6a      	ldr	r2, [pc, #424]	; (24005e7c <HAL_DMA_IRQHandler+0xa34>)
24005cd4:	4293      	cmp	r3, r2
24005cd6:	d013      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cd8:	687b      	ldr	r3, [r7, #4]
24005cda:	681b      	ldr	r3, [r3, #0]
24005cdc:	4a68      	ldr	r2, [pc, #416]	; (24005e80 <HAL_DMA_IRQHandler+0xa38>)
24005cde:	4293      	cmp	r3, r2
24005ce0:	d00e      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005ce2:	687b      	ldr	r3, [r7, #4]
24005ce4:	681b      	ldr	r3, [r3, #0]
24005ce6:	4a67      	ldr	r2, [pc, #412]	; (24005e84 <HAL_DMA_IRQHandler+0xa3c>)
24005ce8:	4293      	cmp	r3, r2
24005cea:	d009      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cec:	687b      	ldr	r3, [r7, #4]
24005cee:	681b      	ldr	r3, [r3, #0]
24005cf0:	4a65      	ldr	r2, [pc, #404]	; (24005e88 <HAL_DMA_IRQHandler+0xa40>)
24005cf2:	4293      	cmp	r3, r2
24005cf4:	d004      	beq.n	24005d00 <HAL_DMA_IRQHandler+0x8b8>
24005cf6:	687b      	ldr	r3, [r7, #4]
24005cf8:	681b      	ldr	r3, [r3, #0]
24005cfa:	4a64      	ldr	r2, [pc, #400]	; (24005e8c <HAL_DMA_IRQHandler+0xa44>)
24005cfc:	4293      	cmp	r3, r2
24005cfe:	d108      	bne.n	24005d12 <HAL_DMA_IRQHandler+0x8ca>
24005d00:	687b      	ldr	r3, [r7, #4]
24005d02:	681b      	ldr	r3, [r3, #0]
24005d04:	681a      	ldr	r2, [r3, #0]
24005d06:	687b      	ldr	r3, [r7, #4]
24005d08:	681b      	ldr	r3, [r3, #0]
24005d0a:	f022 0201 	bic.w	r2, r2, #1
24005d0e:	601a      	str	r2, [r3, #0]
24005d10:	e007      	b.n	24005d22 <HAL_DMA_IRQHandler+0x8da>
24005d12:	687b      	ldr	r3, [r7, #4]
24005d14:	681b      	ldr	r3, [r3, #0]
24005d16:	681a      	ldr	r2, [r3, #0]
24005d18:	687b      	ldr	r3, [r7, #4]
24005d1a:	681b      	ldr	r3, [r3, #0]
24005d1c:	f022 0201 	bic.w	r2, r2, #1
24005d20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24005d22:	68fb      	ldr	r3, [r7, #12]
24005d24:	3301      	adds	r3, #1
24005d26:	60fb      	str	r3, [r7, #12]
24005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24005d2a:	429a      	cmp	r2, r3
24005d2c:	d307      	bcc.n	24005d3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005d2e:	687b      	ldr	r3, [r7, #4]
24005d30:	681b      	ldr	r3, [r3, #0]
24005d32:	681b      	ldr	r3, [r3, #0]
24005d34:	f003 0301 	and.w	r3, r3, #1
24005d38:	2b00      	cmp	r3, #0
24005d3a:	d1f2      	bne.n	24005d22 <HAL_DMA_IRQHandler+0x8da>
24005d3c:	e000      	b.n	24005d40 <HAL_DMA_IRQHandler+0x8f8>
            break;
24005d3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005d40:	687b      	ldr	r3, [r7, #4]
24005d42:	681b      	ldr	r3, [r3, #0]
24005d44:	681b      	ldr	r3, [r3, #0]
24005d46:	f003 0301 	and.w	r3, r3, #1
24005d4a:	2b00      	cmp	r3, #0
24005d4c:	d004      	beq.n	24005d58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24005d4e:	687b      	ldr	r3, [r7, #4]
24005d50:	2203      	movs	r2, #3
24005d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24005d56:	e003      	b.n	24005d60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24005d58:	687b      	ldr	r3, [r7, #4]
24005d5a:	2201      	movs	r2, #1
24005d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005d60:	687b      	ldr	r3, [r7, #4]
24005d62:	2200      	movs	r2, #0
24005d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24005d68:	687b      	ldr	r3, [r7, #4]
24005d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005d6c:	2b00      	cmp	r3, #0
24005d6e:	f000 8272 	beq.w	24006256 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24005d72:	687b      	ldr	r3, [r7, #4]
24005d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005d76:	6878      	ldr	r0, [r7, #4]
24005d78:	4798      	blx	r3
24005d7a:	e26c      	b.n	24006256 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005d7c:	687b      	ldr	r3, [r7, #4]
24005d7e:	681b      	ldr	r3, [r3, #0]
24005d80:	4a43      	ldr	r2, [pc, #268]	; (24005e90 <HAL_DMA_IRQHandler+0xa48>)
24005d82:	4293      	cmp	r3, r2
24005d84:	d022      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005d86:	687b      	ldr	r3, [r7, #4]
24005d88:	681b      	ldr	r3, [r3, #0]
24005d8a:	4a42      	ldr	r2, [pc, #264]	; (24005e94 <HAL_DMA_IRQHandler+0xa4c>)
24005d8c:	4293      	cmp	r3, r2
24005d8e:	d01d      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005d90:	687b      	ldr	r3, [r7, #4]
24005d92:	681b      	ldr	r3, [r3, #0]
24005d94:	4a40      	ldr	r2, [pc, #256]	; (24005e98 <HAL_DMA_IRQHandler+0xa50>)
24005d96:	4293      	cmp	r3, r2
24005d98:	d018      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005d9a:	687b      	ldr	r3, [r7, #4]
24005d9c:	681b      	ldr	r3, [r3, #0]
24005d9e:	4a3f      	ldr	r2, [pc, #252]	; (24005e9c <HAL_DMA_IRQHandler+0xa54>)
24005da0:	4293      	cmp	r3, r2
24005da2:	d013      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005da4:	687b      	ldr	r3, [r7, #4]
24005da6:	681b      	ldr	r3, [r3, #0]
24005da8:	4a3d      	ldr	r2, [pc, #244]	; (24005ea0 <HAL_DMA_IRQHandler+0xa58>)
24005daa:	4293      	cmp	r3, r2
24005dac:	d00e      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005dae:	687b      	ldr	r3, [r7, #4]
24005db0:	681b      	ldr	r3, [r3, #0]
24005db2:	4a3c      	ldr	r2, [pc, #240]	; (24005ea4 <HAL_DMA_IRQHandler+0xa5c>)
24005db4:	4293      	cmp	r3, r2
24005db6:	d009      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005db8:	687b      	ldr	r3, [r7, #4]
24005dba:	681b      	ldr	r3, [r3, #0]
24005dbc:	4a3a      	ldr	r2, [pc, #232]	; (24005ea8 <HAL_DMA_IRQHandler+0xa60>)
24005dbe:	4293      	cmp	r3, r2
24005dc0:	d004      	beq.n	24005dcc <HAL_DMA_IRQHandler+0x984>
24005dc2:	687b      	ldr	r3, [r7, #4]
24005dc4:	681b      	ldr	r3, [r3, #0]
24005dc6:	4a39      	ldr	r2, [pc, #228]	; (24005eac <HAL_DMA_IRQHandler+0xa64>)
24005dc8:	4293      	cmp	r3, r2
24005dca:	d101      	bne.n	24005dd0 <HAL_DMA_IRQHandler+0x988>
24005dcc:	2301      	movs	r3, #1
24005dce:	e000      	b.n	24005dd2 <HAL_DMA_IRQHandler+0x98a>
24005dd0:	2300      	movs	r3, #0
24005dd2:	2b00      	cmp	r3, #0
24005dd4:	f000 823f 	beq.w	24006256 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005dd8:	687b      	ldr	r3, [r7, #4]
24005dda:	681b      	ldr	r3, [r3, #0]
24005ddc:	681b      	ldr	r3, [r3, #0]
24005dde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005de0:	687b      	ldr	r3, [r7, #4]
24005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005de4:	f003 031f 	and.w	r3, r3, #31
24005de8:	2204      	movs	r2, #4
24005dea:	409a      	lsls	r2, r3
24005dec:	697b      	ldr	r3, [r7, #20]
24005dee:	4013      	ands	r3, r2
24005df0:	2b00      	cmp	r3, #0
24005df2:	f000 80cd 	beq.w	24005f90 <HAL_DMA_IRQHandler+0xb48>
24005df6:	693b      	ldr	r3, [r7, #16]
24005df8:	f003 0304 	and.w	r3, r3, #4
24005dfc:	2b00      	cmp	r3, #0
24005dfe:	f000 80c7 	beq.w	24005f90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005e02:	687b      	ldr	r3, [r7, #4]
24005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005e06:	f003 031f 	and.w	r3, r3, #31
24005e0a:	2204      	movs	r2, #4
24005e0c:	409a      	lsls	r2, r3
24005e0e:	69fb      	ldr	r3, [r7, #28]
24005e10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e12:	693b      	ldr	r3, [r7, #16]
24005e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005e18:	2b00      	cmp	r3, #0
24005e1a:	d049      	beq.n	24005eb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005e1c:	693b      	ldr	r3, [r7, #16]
24005e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005e22:	2b00      	cmp	r3, #0
24005e24:	d109      	bne.n	24005e3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24005e26:	687b      	ldr	r3, [r7, #4]
24005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005e2a:	2b00      	cmp	r3, #0
24005e2c:	f000 8210 	beq.w	24006250 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24005e30:	687b      	ldr	r3, [r7, #4]
24005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005e34:	6878      	ldr	r0, [r7, #4]
24005e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e38:	e20a      	b.n	24006250 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24005e3a:	687b      	ldr	r3, [r7, #4]
24005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005e3e:	2b00      	cmp	r3, #0
24005e40:	f000 8206 	beq.w	24006250 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24005e44:	687b      	ldr	r3, [r7, #4]
24005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005e48:	6878      	ldr	r0, [r7, #4]
24005e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e4c:	e200      	b.n	24006250 <HAL_DMA_IRQHandler+0xe08>
24005e4e:	bf00      	nop
24005e50:	40020010 	.word	0x40020010
24005e54:	40020028 	.word	0x40020028
24005e58:	40020040 	.word	0x40020040
24005e5c:	40020058 	.word	0x40020058
24005e60:	40020070 	.word	0x40020070
24005e64:	40020088 	.word	0x40020088
24005e68:	400200a0 	.word	0x400200a0
24005e6c:	400200b8 	.word	0x400200b8
24005e70:	40020410 	.word	0x40020410
24005e74:	40020428 	.word	0x40020428
24005e78:	40020440 	.word	0x40020440
24005e7c:	40020458 	.word	0x40020458
24005e80:	40020470 	.word	0x40020470
24005e84:	40020488 	.word	0x40020488
24005e88:	400204a0 	.word	0x400204a0
24005e8c:	400204b8 	.word	0x400204b8
24005e90:	58025408 	.word	0x58025408
24005e94:	5802541c 	.word	0x5802541c
24005e98:	58025430 	.word	0x58025430
24005e9c:	58025444 	.word	0x58025444
24005ea0:	58025458 	.word	0x58025458
24005ea4:	5802546c 	.word	0x5802546c
24005ea8:	58025480 	.word	0x58025480
24005eac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005eb0:	693b      	ldr	r3, [r7, #16]
24005eb2:	f003 0320 	and.w	r3, r3, #32
24005eb6:	2b00      	cmp	r3, #0
24005eb8:	d160      	bne.n	24005f7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005eba:	687b      	ldr	r3, [r7, #4]
24005ebc:	681b      	ldr	r3, [r3, #0]
24005ebe:	4a7f      	ldr	r2, [pc, #508]	; (240060bc <HAL_DMA_IRQHandler+0xc74>)
24005ec0:	4293      	cmp	r3, r2
24005ec2:	d04a      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005ec4:	687b      	ldr	r3, [r7, #4]
24005ec6:	681b      	ldr	r3, [r3, #0]
24005ec8:	4a7d      	ldr	r2, [pc, #500]	; (240060c0 <HAL_DMA_IRQHandler+0xc78>)
24005eca:	4293      	cmp	r3, r2
24005ecc:	d045      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005ece:	687b      	ldr	r3, [r7, #4]
24005ed0:	681b      	ldr	r3, [r3, #0]
24005ed2:	4a7c      	ldr	r2, [pc, #496]	; (240060c4 <HAL_DMA_IRQHandler+0xc7c>)
24005ed4:	4293      	cmp	r3, r2
24005ed6:	d040      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005ed8:	687b      	ldr	r3, [r7, #4]
24005eda:	681b      	ldr	r3, [r3, #0]
24005edc:	4a7a      	ldr	r2, [pc, #488]	; (240060c8 <HAL_DMA_IRQHandler+0xc80>)
24005ede:	4293      	cmp	r3, r2
24005ee0:	d03b      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005ee2:	687b      	ldr	r3, [r7, #4]
24005ee4:	681b      	ldr	r3, [r3, #0]
24005ee6:	4a79      	ldr	r2, [pc, #484]	; (240060cc <HAL_DMA_IRQHandler+0xc84>)
24005ee8:	4293      	cmp	r3, r2
24005eea:	d036      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005eec:	687b      	ldr	r3, [r7, #4]
24005eee:	681b      	ldr	r3, [r3, #0]
24005ef0:	4a77      	ldr	r2, [pc, #476]	; (240060d0 <HAL_DMA_IRQHandler+0xc88>)
24005ef2:	4293      	cmp	r3, r2
24005ef4:	d031      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005ef6:	687b      	ldr	r3, [r7, #4]
24005ef8:	681b      	ldr	r3, [r3, #0]
24005efa:	4a76      	ldr	r2, [pc, #472]	; (240060d4 <HAL_DMA_IRQHandler+0xc8c>)
24005efc:	4293      	cmp	r3, r2
24005efe:	d02c      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f00:	687b      	ldr	r3, [r7, #4]
24005f02:	681b      	ldr	r3, [r3, #0]
24005f04:	4a74      	ldr	r2, [pc, #464]	; (240060d8 <HAL_DMA_IRQHandler+0xc90>)
24005f06:	4293      	cmp	r3, r2
24005f08:	d027      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f0a:	687b      	ldr	r3, [r7, #4]
24005f0c:	681b      	ldr	r3, [r3, #0]
24005f0e:	4a73      	ldr	r2, [pc, #460]	; (240060dc <HAL_DMA_IRQHandler+0xc94>)
24005f10:	4293      	cmp	r3, r2
24005f12:	d022      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f14:	687b      	ldr	r3, [r7, #4]
24005f16:	681b      	ldr	r3, [r3, #0]
24005f18:	4a71      	ldr	r2, [pc, #452]	; (240060e0 <HAL_DMA_IRQHandler+0xc98>)
24005f1a:	4293      	cmp	r3, r2
24005f1c:	d01d      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f1e:	687b      	ldr	r3, [r7, #4]
24005f20:	681b      	ldr	r3, [r3, #0]
24005f22:	4a70      	ldr	r2, [pc, #448]	; (240060e4 <HAL_DMA_IRQHandler+0xc9c>)
24005f24:	4293      	cmp	r3, r2
24005f26:	d018      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f28:	687b      	ldr	r3, [r7, #4]
24005f2a:	681b      	ldr	r3, [r3, #0]
24005f2c:	4a6e      	ldr	r2, [pc, #440]	; (240060e8 <HAL_DMA_IRQHandler+0xca0>)
24005f2e:	4293      	cmp	r3, r2
24005f30:	d013      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f32:	687b      	ldr	r3, [r7, #4]
24005f34:	681b      	ldr	r3, [r3, #0]
24005f36:	4a6d      	ldr	r2, [pc, #436]	; (240060ec <HAL_DMA_IRQHandler+0xca4>)
24005f38:	4293      	cmp	r3, r2
24005f3a:	d00e      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f3c:	687b      	ldr	r3, [r7, #4]
24005f3e:	681b      	ldr	r3, [r3, #0]
24005f40:	4a6b      	ldr	r2, [pc, #428]	; (240060f0 <HAL_DMA_IRQHandler+0xca8>)
24005f42:	4293      	cmp	r3, r2
24005f44:	d009      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f46:	687b      	ldr	r3, [r7, #4]
24005f48:	681b      	ldr	r3, [r3, #0]
24005f4a:	4a6a      	ldr	r2, [pc, #424]	; (240060f4 <HAL_DMA_IRQHandler+0xcac>)
24005f4c:	4293      	cmp	r3, r2
24005f4e:	d004      	beq.n	24005f5a <HAL_DMA_IRQHandler+0xb12>
24005f50:	687b      	ldr	r3, [r7, #4]
24005f52:	681b      	ldr	r3, [r3, #0]
24005f54:	4a68      	ldr	r2, [pc, #416]	; (240060f8 <HAL_DMA_IRQHandler+0xcb0>)
24005f56:	4293      	cmp	r3, r2
24005f58:	d108      	bne.n	24005f6c <HAL_DMA_IRQHandler+0xb24>
24005f5a:	687b      	ldr	r3, [r7, #4]
24005f5c:	681b      	ldr	r3, [r3, #0]
24005f5e:	681a      	ldr	r2, [r3, #0]
24005f60:	687b      	ldr	r3, [r7, #4]
24005f62:	681b      	ldr	r3, [r3, #0]
24005f64:	f022 0208 	bic.w	r2, r2, #8
24005f68:	601a      	str	r2, [r3, #0]
24005f6a:	e007      	b.n	24005f7c <HAL_DMA_IRQHandler+0xb34>
24005f6c:	687b      	ldr	r3, [r7, #4]
24005f6e:	681b      	ldr	r3, [r3, #0]
24005f70:	681a      	ldr	r2, [r3, #0]
24005f72:	687b      	ldr	r3, [r7, #4]
24005f74:	681b      	ldr	r3, [r3, #0]
24005f76:	f022 0204 	bic.w	r2, r2, #4
24005f7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24005f7c:	687b      	ldr	r3, [r7, #4]
24005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005f80:	2b00      	cmp	r3, #0
24005f82:	f000 8165 	beq.w	24006250 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24005f86:	687b      	ldr	r3, [r7, #4]
24005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005f8a:	6878      	ldr	r0, [r7, #4]
24005f8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005f8e:	e15f      	b.n	24006250 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005f90:	687b      	ldr	r3, [r7, #4]
24005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005f94:	f003 031f 	and.w	r3, r3, #31
24005f98:	2202      	movs	r2, #2
24005f9a:	409a      	lsls	r2, r3
24005f9c:	697b      	ldr	r3, [r7, #20]
24005f9e:	4013      	ands	r3, r2
24005fa0:	2b00      	cmp	r3, #0
24005fa2:	f000 80c5 	beq.w	24006130 <HAL_DMA_IRQHandler+0xce8>
24005fa6:	693b      	ldr	r3, [r7, #16]
24005fa8:	f003 0302 	and.w	r3, r3, #2
24005fac:	2b00      	cmp	r3, #0
24005fae:	f000 80bf 	beq.w	24006130 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005fb2:	687b      	ldr	r3, [r7, #4]
24005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005fb6:	f003 031f 	and.w	r3, r3, #31
24005fba:	2202      	movs	r2, #2
24005fbc:	409a      	lsls	r2, r3
24005fbe:	69fb      	ldr	r3, [r7, #28]
24005fc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005fc2:	693b      	ldr	r3, [r7, #16]
24005fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005fc8:	2b00      	cmp	r3, #0
24005fca:	d018      	beq.n	24005ffe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005fcc:	693b      	ldr	r3, [r7, #16]
24005fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005fd2:	2b00      	cmp	r3, #0
24005fd4:	d109      	bne.n	24005fea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
24005fd6:	687b      	ldr	r3, [r7, #4]
24005fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005fda:	2b00      	cmp	r3, #0
24005fdc:	f000 813a 	beq.w	24006254 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24005fe0:	687b      	ldr	r3, [r7, #4]
24005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005fe4:	6878      	ldr	r0, [r7, #4]
24005fe6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005fe8:	e134      	b.n	24006254 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24005fea:	687b      	ldr	r3, [r7, #4]
24005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005fee:	2b00      	cmp	r3, #0
24005ff0:	f000 8130 	beq.w	24006254 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24005ff4:	687b      	ldr	r3, [r7, #4]
24005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005ff8:	6878      	ldr	r0, [r7, #4]
24005ffa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005ffc:	e12a      	b.n	24006254 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005ffe:	693b      	ldr	r3, [r7, #16]
24006000:	f003 0320 	and.w	r3, r3, #32
24006004:	2b00      	cmp	r3, #0
24006006:	f040 8089 	bne.w	2400611c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400600a:	687b      	ldr	r3, [r7, #4]
2400600c:	681b      	ldr	r3, [r3, #0]
2400600e:	4a2b      	ldr	r2, [pc, #172]	; (240060bc <HAL_DMA_IRQHandler+0xc74>)
24006010:	4293      	cmp	r3, r2
24006012:	d04a      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006014:	687b      	ldr	r3, [r7, #4]
24006016:	681b      	ldr	r3, [r3, #0]
24006018:	4a29      	ldr	r2, [pc, #164]	; (240060c0 <HAL_DMA_IRQHandler+0xc78>)
2400601a:	4293      	cmp	r3, r2
2400601c:	d045      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
2400601e:	687b      	ldr	r3, [r7, #4]
24006020:	681b      	ldr	r3, [r3, #0]
24006022:	4a28      	ldr	r2, [pc, #160]	; (240060c4 <HAL_DMA_IRQHandler+0xc7c>)
24006024:	4293      	cmp	r3, r2
24006026:	d040      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006028:	687b      	ldr	r3, [r7, #4]
2400602a:	681b      	ldr	r3, [r3, #0]
2400602c:	4a26      	ldr	r2, [pc, #152]	; (240060c8 <HAL_DMA_IRQHandler+0xc80>)
2400602e:	4293      	cmp	r3, r2
24006030:	d03b      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006032:	687b      	ldr	r3, [r7, #4]
24006034:	681b      	ldr	r3, [r3, #0]
24006036:	4a25      	ldr	r2, [pc, #148]	; (240060cc <HAL_DMA_IRQHandler+0xc84>)
24006038:	4293      	cmp	r3, r2
2400603a:	d036      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
2400603c:	687b      	ldr	r3, [r7, #4]
2400603e:	681b      	ldr	r3, [r3, #0]
24006040:	4a23      	ldr	r2, [pc, #140]	; (240060d0 <HAL_DMA_IRQHandler+0xc88>)
24006042:	4293      	cmp	r3, r2
24006044:	d031      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006046:	687b      	ldr	r3, [r7, #4]
24006048:	681b      	ldr	r3, [r3, #0]
2400604a:	4a22      	ldr	r2, [pc, #136]	; (240060d4 <HAL_DMA_IRQHandler+0xc8c>)
2400604c:	4293      	cmp	r3, r2
2400604e:	d02c      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006050:	687b      	ldr	r3, [r7, #4]
24006052:	681b      	ldr	r3, [r3, #0]
24006054:	4a20      	ldr	r2, [pc, #128]	; (240060d8 <HAL_DMA_IRQHandler+0xc90>)
24006056:	4293      	cmp	r3, r2
24006058:	d027      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
2400605a:	687b      	ldr	r3, [r7, #4]
2400605c:	681b      	ldr	r3, [r3, #0]
2400605e:	4a1f      	ldr	r2, [pc, #124]	; (240060dc <HAL_DMA_IRQHandler+0xc94>)
24006060:	4293      	cmp	r3, r2
24006062:	d022      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006064:	687b      	ldr	r3, [r7, #4]
24006066:	681b      	ldr	r3, [r3, #0]
24006068:	4a1d      	ldr	r2, [pc, #116]	; (240060e0 <HAL_DMA_IRQHandler+0xc98>)
2400606a:	4293      	cmp	r3, r2
2400606c:	d01d      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
2400606e:	687b      	ldr	r3, [r7, #4]
24006070:	681b      	ldr	r3, [r3, #0]
24006072:	4a1c      	ldr	r2, [pc, #112]	; (240060e4 <HAL_DMA_IRQHandler+0xc9c>)
24006074:	4293      	cmp	r3, r2
24006076:	d018      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006078:	687b      	ldr	r3, [r7, #4]
2400607a:	681b      	ldr	r3, [r3, #0]
2400607c:	4a1a      	ldr	r2, [pc, #104]	; (240060e8 <HAL_DMA_IRQHandler+0xca0>)
2400607e:	4293      	cmp	r3, r2
24006080:	d013      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006082:	687b      	ldr	r3, [r7, #4]
24006084:	681b      	ldr	r3, [r3, #0]
24006086:	4a19      	ldr	r2, [pc, #100]	; (240060ec <HAL_DMA_IRQHandler+0xca4>)
24006088:	4293      	cmp	r3, r2
2400608a:	d00e      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
2400608c:	687b      	ldr	r3, [r7, #4]
2400608e:	681b      	ldr	r3, [r3, #0]
24006090:	4a17      	ldr	r2, [pc, #92]	; (240060f0 <HAL_DMA_IRQHandler+0xca8>)
24006092:	4293      	cmp	r3, r2
24006094:	d009      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
24006096:	687b      	ldr	r3, [r7, #4]
24006098:	681b      	ldr	r3, [r3, #0]
2400609a:	4a16      	ldr	r2, [pc, #88]	; (240060f4 <HAL_DMA_IRQHandler+0xcac>)
2400609c:	4293      	cmp	r3, r2
2400609e:	d004      	beq.n	240060aa <HAL_DMA_IRQHandler+0xc62>
240060a0:	687b      	ldr	r3, [r7, #4]
240060a2:	681b      	ldr	r3, [r3, #0]
240060a4:	4a14      	ldr	r2, [pc, #80]	; (240060f8 <HAL_DMA_IRQHandler+0xcb0>)
240060a6:	4293      	cmp	r3, r2
240060a8:	d128      	bne.n	240060fc <HAL_DMA_IRQHandler+0xcb4>
240060aa:	687b      	ldr	r3, [r7, #4]
240060ac:	681b      	ldr	r3, [r3, #0]
240060ae:	681a      	ldr	r2, [r3, #0]
240060b0:	687b      	ldr	r3, [r7, #4]
240060b2:	681b      	ldr	r3, [r3, #0]
240060b4:	f022 0214 	bic.w	r2, r2, #20
240060b8:	601a      	str	r2, [r3, #0]
240060ba:	e027      	b.n	2400610c <HAL_DMA_IRQHandler+0xcc4>
240060bc:	40020010 	.word	0x40020010
240060c0:	40020028 	.word	0x40020028
240060c4:	40020040 	.word	0x40020040
240060c8:	40020058 	.word	0x40020058
240060cc:	40020070 	.word	0x40020070
240060d0:	40020088 	.word	0x40020088
240060d4:	400200a0 	.word	0x400200a0
240060d8:	400200b8 	.word	0x400200b8
240060dc:	40020410 	.word	0x40020410
240060e0:	40020428 	.word	0x40020428
240060e4:	40020440 	.word	0x40020440
240060e8:	40020458 	.word	0x40020458
240060ec:	40020470 	.word	0x40020470
240060f0:	40020488 	.word	0x40020488
240060f4:	400204a0 	.word	0x400204a0
240060f8:	400204b8 	.word	0x400204b8
240060fc:	687b      	ldr	r3, [r7, #4]
240060fe:	681b      	ldr	r3, [r3, #0]
24006100:	681a      	ldr	r2, [r3, #0]
24006102:	687b      	ldr	r3, [r7, #4]
24006104:	681b      	ldr	r3, [r3, #0]
24006106:	f022 020a 	bic.w	r2, r2, #10
2400610a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2400610c:	687b      	ldr	r3, [r7, #4]
2400610e:	2201      	movs	r2, #1
24006110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24006114:	687b      	ldr	r3, [r7, #4]
24006116:	2200      	movs	r2, #0
24006118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
2400611c:	687b      	ldr	r3, [r7, #4]
2400611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006120:	2b00      	cmp	r3, #0
24006122:	f000 8097 	beq.w	24006254 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24006126:	687b      	ldr	r3, [r7, #4]
24006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400612a:	6878      	ldr	r0, [r7, #4]
2400612c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400612e:	e091      	b.n	24006254 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006130:	687b      	ldr	r3, [r7, #4]
24006132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006134:	f003 031f 	and.w	r3, r3, #31
24006138:	2208      	movs	r2, #8
2400613a:	409a      	lsls	r2, r3
2400613c:	697b      	ldr	r3, [r7, #20]
2400613e:	4013      	ands	r3, r2
24006140:	2b00      	cmp	r3, #0
24006142:	f000 8088 	beq.w	24006256 <HAL_DMA_IRQHandler+0xe0e>
24006146:	693b      	ldr	r3, [r7, #16]
24006148:	f003 0308 	and.w	r3, r3, #8
2400614c:	2b00      	cmp	r3, #0
2400614e:	f000 8082 	beq.w	24006256 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006152:	687b      	ldr	r3, [r7, #4]
24006154:	681b      	ldr	r3, [r3, #0]
24006156:	4a41      	ldr	r2, [pc, #260]	; (2400625c <HAL_DMA_IRQHandler+0xe14>)
24006158:	4293      	cmp	r3, r2
2400615a:	d04a      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
2400615c:	687b      	ldr	r3, [r7, #4]
2400615e:	681b      	ldr	r3, [r3, #0]
24006160:	4a3f      	ldr	r2, [pc, #252]	; (24006260 <HAL_DMA_IRQHandler+0xe18>)
24006162:	4293      	cmp	r3, r2
24006164:	d045      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
24006166:	687b      	ldr	r3, [r7, #4]
24006168:	681b      	ldr	r3, [r3, #0]
2400616a:	4a3e      	ldr	r2, [pc, #248]	; (24006264 <HAL_DMA_IRQHandler+0xe1c>)
2400616c:	4293      	cmp	r3, r2
2400616e:	d040      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
24006170:	687b      	ldr	r3, [r7, #4]
24006172:	681b      	ldr	r3, [r3, #0]
24006174:	4a3c      	ldr	r2, [pc, #240]	; (24006268 <HAL_DMA_IRQHandler+0xe20>)
24006176:	4293      	cmp	r3, r2
24006178:	d03b      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
2400617a:	687b      	ldr	r3, [r7, #4]
2400617c:	681b      	ldr	r3, [r3, #0]
2400617e:	4a3b      	ldr	r2, [pc, #236]	; (2400626c <HAL_DMA_IRQHandler+0xe24>)
24006180:	4293      	cmp	r3, r2
24006182:	d036      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
24006184:	687b      	ldr	r3, [r7, #4]
24006186:	681b      	ldr	r3, [r3, #0]
24006188:	4a39      	ldr	r2, [pc, #228]	; (24006270 <HAL_DMA_IRQHandler+0xe28>)
2400618a:	4293      	cmp	r3, r2
2400618c:	d031      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
2400618e:	687b      	ldr	r3, [r7, #4]
24006190:	681b      	ldr	r3, [r3, #0]
24006192:	4a38      	ldr	r2, [pc, #224]	; (24006274 <HAL_DMA_IRQHandler+0xe2c>)
24006194:	4293      	cmp	r3, r2
24006196:	d02c      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
24006198:	687b      	ldr	r3, [r7, #4]
2400619a:	681b      	ldr	r3, [r3, #0]
2400619c:	4a36      	ldr	r2, [pc, #216]	; (24006278 <HAL_DMA_IRQHandler+0xe30>)
2400619e:	4293      	cmp	r3, r2
240061a0:	d027      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061a2:	687b      	ldr	r3, [r7, #4]
240061a4:	681b      	ldr	r3, [r3, #0]
240061a6:	4a35      	ldr	r2, [pc, #212]	; (2400627c <HAL_DMA_IRQHandler+0xe34>)
240061a8:	4293      	cmp	r3, r2
240061aa:	d022      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061ac:	687b      	ldr	r3, [r7, #4]
240061ae:	681b      	ldr	r3, [r3, #0]
240061b0:	4a33      	ldr	r2, [pc, #204]	; (24006280 <HAL_DMA_IRQHandler+0xe38>)
240061b2:	4293      	cmp	r3, r2
240061b4:	d01d      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061b6:	687b      	ldr	r3, [r7, #4]
240061b8:	681b      	ldr	r3, [r3, #0]
240061ba:	4a32      	ldr	r2, [pc, #200]	; (24006284 <HAL_DMA_IRQHandler+0xe3c>)
240061bc:	4293      	cmp	r3, r2
240061be:	d018      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061c0:	687b      	ldr	r3, [r7, #4]
240061c2:	681b      	ldr	r3, [r3, #0]
240061c4:	4a30      	ldr	r2, [pc, #192]	; (24006288 <HAL_DMA_IRQHandler+0xe40>)
240061c6:	4293      	cmp	r3, r2
240061c8:	d013      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061ca:	687b      	ldr	r3, [r7, #4]
240061cc:	681b      	ldr	r3, [r3, #0]
240061ce:	4a2f      	ldr	r2, [pc, #188]	; (2400628c <HAL_DMA_IRQHandler+0xe44>)
240061d0:	4293      	cmp	r3, r2
240061d2:	d00e      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061d4:	687b      	ldr	r3, [r7, #4]
240061d6:	681b      	ldr	r3, [r3, #0]
240061d8:	4a2d      	ldr	r2, [pc, #180]	; (24006290 <HAL_DMA_IRQHandler+0xe48>)
240061da:	4293      	cmp	r3, r2
240061dc:	d009      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061de:	687b      	ldr	r3, [r7, #4]
240061e0:	681b      	ldr	r3, [r3, #0]
240061e2:	4a2c      	ldr	r2, [pc, #176]	; (24006294 <HAL_DMA_IRQHandler+0xe4c>)
240061e4:	4293      	cmp	r3, r2
240061e6:	d004      	beq.n	240061f2 <HAL_DMA_IRQHandler+0xdaa>
240061e8:	687b      	ldr	r3, [r7, #4]
240061ea:	681b      	ldr	r3, [r3, #0]
240061ec:	4a2a      	ldr	r2, [pc, #168]	; (24006298 <HAL_DMA_IRQHandler+0xe50>)
240061ee:	4293      	cmp	r3, r2
240061f0:	d108      	bne.n	24006204 <HAL_DMA_IRQHandler+0xdbc>
240061f2:	687b      	ldr	r3, [r7, #4]
240061f4:	681b      	ldr	r3, [r3, #0]
240061f6:	681a      	ldr	r2, [r3, #0]
240061f8:	687b      	ldr	r3, [r7, #4]
240061fa:	681b      	ldr	r3, [r3, #0]
240061fc:	f022 021c 	bic.w	r2, r2, #28
24006200:	601a      	str	r2, [r3, #0]
24006202:	e007      	b.n	24006214 <HAL_DMA_IRQHandler+0xdcc>
24006204:	687b      	ldr	r3, [r7, #4]
24006206:	681b      	ldr	r3, [r3, #0]
24006208:	681a      	ldr	r2, [r3, #0]
2400620a:	687b      	ldr	r3, [r7, #4]
2400620c:	681b      	ldr	r3, [r3, #0]
2400620e:	f022 020e 	bic.w	r2, r2, #14
24006212:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006214:	687b      	ldr	r3, [r7, #4]
24006216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006218:	f003 031f 	and.w	r3, r3, #31
2400621c:	2201      	movs	r2, #1
2400621e:	409a      	lsls	r2, r3
24006220:	69fb      	ldr	r3, [r7, #28]
24006222:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24006224:	687b      	ldr	r3, [r7, #4]
24006226:	2201      	movs	r2, #1
24006228:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
2400622a:	687b      	ldr	r3, [r7, #4]
2400622c:	2201      	movs	r2, #1
2400622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24006232:	687b      	ldr	r3, [r7, #4]
24006234:	2200      	movs	r2, #0
24006236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
2400623a:	687b      	ldr	r3, [r7, #4]
2400623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400623e:	2b00      	cmp	r3, #0
24006240:	d009      	beq.n	24006256 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006242:	687b      	ldr	r3, [r7, #4]
24006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24006246:	6878      	ldr	r0, [r7, #4]
24006248:	4798      	blx	r3
2400624a:	e004      	b.n	24006256 <HAL_DMA_IRQHandler+0xe0e>
          return;
2400624c:	bf00      	nop
2400624e:	e002      	b.n	24006256 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006250:	bf00      	nop
24006252:	e000      	b.n	24006256 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006254:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
24006256:	3728      	adds	r7, #40	; 0x28
24006258:	46bd      	mov	sp, r7
2400625a:	bd80      	pop	{r7, pc}
2400625c:	40020010 	.word	0x40020010
24006260:	40020028 	.word	0x40020028
24006264:	40020040 	.word	0x40020040
24006268:	40020058 	.word	0x40020058
2400626c:	40020070 	.word	0x40020070
24006270:	40020088 	.word	0x40020088
24006274:	400200a0 	.word	0x400200a0
24006278:	400200b8 	.word	0x400200b8
2400627c:	40020410 	.word	0x40020410
24006280:	40020428 	.word	0x40020428
24006284:	40020440 	.word	0x40020440
24006288:	40020458 	.word	0x40020458
2400628c:	40020470 	.word	0x40020470
24006290:	40020488 	.word	0x40020488
24006294:	400204a0 	.word	0x400204a0
24006298:	400204b8 	.word	0x400204b8

2400629c <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
2400629c:	b480      	push	{r7}
2400629e:	b087      	sub	sp, #28
240062a0:	af00      	add	r7, sp, #0
240062a2:	60f8      	str	r0, [r7, #12]
240062a4:	460b      	mov	r3, r1
240062a6:	607a      	str	r2, [r7, #4]
240062a8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
240062aa:	2300      	movs	r3, #0
240062ac:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240062ae:	68fb      	ldr	r3, [r7, #12]
240062b0:	2b00      	cmp	r3, #0
240062b2:	d101      	bne.n	240062b8 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
240062b4:	2301      	movs	r3, #1
240062b6:	e045      	b.n	24006344 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
240062b8:	68fb      	ldr	r3, [r7, #12]
240062ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240062be:	2b01      	cmp	r3, #1
240062c0:	d101      	bne.n	240062c6 <HAL_DMA_RegisterCallback+0x2a>
240062c2:	2302      	movs	r3, #2
240062c4:	e03e      	b.n	24006344 <HAL_DMA_RegisterCallback+0xa8>
240062c6:	68fb      	ldr	r3, [r7, #12]
240062c8:	2201      	movs	r2, #1
240062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240062ce:	68fb      	ldr	r3, [r7, #12]
240062d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240062d4:	b2db      	uxtb	r3, r3
240062d6:	2b01      	cmp	r3, #1
240062d8:	d12d      	bne.n	24006336 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
240062da:	7afb      	ldrb	r3, [r7, #11]
240062dc:	2b05      	cmp	r3, #5
240062de:	d827      	bhi.n	24006330 <HAL_DMA_RegisterCallback+0x94>
240062e0:	a201      	add	r2, pc, #4	; (adr r2, 240062e8 <HAL_DMA_RegisterCallback+0x4c>)
240062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240062e6:	bf00      	nop
240062e8:	24006301 	.word	0x24006301
240062ec:	24006309 	.word	0x24006309
240062f0:	24006311 	.word	0x24006311
240062f4:	24006319 	.word	0x24006319
240062f8:	24006321 	.word	0x24006321
240062fc:	24006329 	.word	0x24006329
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
24006300:	68fb      	ldr	r3, [r7, #12]
24006302:	687a      	ldr	r2, [r7, #4]
24006304:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
24006306:	e018      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
24006308:	68fb      	ldr	r3, [r7, #12]
2400630a:	687a      	ldr	r2, [r7, #4]
2400630c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
2400630e:	e014      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
24006310:	68fb      	ldr	r3, [r7, #12]
24006312:	687a      	ldr	r2, [r7, #4]
24006314:	645a      	str	r2, [r3, #68]	; 0x44
      break;
24006316:	e010      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
24006318:	68fb      	ldr	r3, [r7, #12]
2400631a:	687a      	ldr	r2, [r7, #4]
2400631c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400631e:	e00c      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
24006320:	68fb      	ldr	r3, [r7, #12]
24006322:	687a      	ldr	r2, [r7, #4]
24006324:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
24006326:	e008      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
24006328:	68fb      	ldr	r3, [r7, #12]
2400632a:	687a      	ldr	r2, [r7, #4]
2400632c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400632e:	e004      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
24006330:	2301      	movs	r3, #1
24006332:	75fb      	strb	r3, [r7, #23]
      break;
24006334:	e001      	b.n	2400633a <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24006336:	2301      	movs	r3, #1
24006338:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
2400633a:	68fb      	ldr	r3, [r7, #12]
2400633c:	2200      	movs	r2, #0
2400633e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
24006342:	7dfb      	ldrb	r3, [r7, #23]
}
24006344:	4618      	mov	r0, r3
24006346:	371c      	adds	r7, #28
24006348:	46bd      	mov	sp, r7
2400634a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400634e:	4770      	bx	lr

24006350 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
24006350:	b480      	push	{r7}
24006352:	b085      	sub	sp, #20
24006354:	af00      	add	r7, sp, #0
24006356:	6078      	str	r0, [r7, #4]
24006358:	460b      	mov	r3, r1
2400635a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
2400635c:	2300      	movs	r3, #0
2400635e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006360:	687b      	ldr	r3, [r7, #4]
24006362:	2b00      	cmp	r3, #0
24006364:	d101      	bne.n	2400636a <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
24006366:	2301      	movs	r3, #1
24006368:	e059      	b.n	2400641e <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
2400636a:	687b      	ldr	r3, [r7, #4]
2400636c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006370:	2b01      	cmp	r3, #1
24006372:	d101      	bne.n	24006378 <HAL_DMA_UnRegisterCallback+0x28>
24006374:	2302      	movs	r3, #2
24006376:	e052      	b.n	2400641e <HAL_DMA_UnRegisterCallback+0xce>
24006378:	687b      	ldr	r3, [r7, #4]
2400637a:	2201      	movs	r2, #1
2400637c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24006380:	687b      	ldr	r3, [r7, #4]
24006382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006386:	b2db      	uxtb	r3, r3
24006388:	2b01      	cmp	r3, #1
2400638a:	d141      	bne.n	24006410 <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
2400638c:	78fb      	ldrb	r3, [r7, #3]
2400638e:	2b06      	cmp	r3, #6
24006390:	d83b      	bhi.n	2400640a <HAL_DMA_UnRegisterCallback+0xba>
24006392:	a201      	add	r2, pc, #4	; (adr r2, 24006398 <HAL_DMA_UnRegisterCallback+0x48>)
24006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006398:	240063b5 	.word	0x240063b5
2400639c:	240063bd 	.word	0x240063bd
240063a0:	240063c5 	.word	0x240063c5
240063a4:	240063cd 	.word	0x240063cd
240063a8:	240063d5 	.word	0x240063d5
240063ac:	240063dd 	.word	0x240063dd
240063b0:	240063e5 	.word	0x240063e5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
240063b4:	687b      	ldr	r3, [r7, #4]
240063b6:	2200      	movs	r2, #0
240063b8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
240063ba:	e02b      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
240063bc:	687b      	ldr	r3, [r7, #4]
240063be:	2200      	movs	r2, #0
240063c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
240063c2:	e027      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
240063c4:	687b      	ldr	r3, [r7, #4]
240063c6:	2200      	movs	r2, #0
240063c8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240063ca:	e023      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
240063cc:	687b      	ldr	r3, [r7, #4]
240063ce:	2200      	movs	r2, #0
240063d0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240063d2:	e01f      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
240063d4:	687b      	ldr	r3, [r7, #4]
240063d6:	2200      	movs	r2, #0
240063d8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
240063da:	e01b      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
240063dc:	687b      	ldr	r3, [r7, #4]
240063de:	2200      	movs	r2, #0
240063e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
240063e2:	e017      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
240063e4:	687b      	ldr	r3, [r7, #4]
240063e6:	2200      	movs	r2, #0
240063e8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
240063ea:	687b      	ldr	r3, [r7, #4]
240063ec:	2200      	movs	r2, #0
240063ee:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
240063f0:	687b      	ldr	r3, [r7, #4]
240063f2:	2200      	movs	r2, #0
240063f4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
240063f6:	687b      	ldr	r3, [r7, #4]
240063f8:	2200      	movs	r2, #0
240063fa:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
240063fc:	687b      	ldr	r3, [r7, #4]
240063fe:	2200      	movs	r2, #0
24006400:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
24006402:	687b      	ldr	r3, [r7, #4]
24006404:	2200      	movs	r2, #0
24006406:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24006408:	e004      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2400640a:	2301      	movs	r3, #1
2400640c:	73fb      	strb	r3, [r7, #15]
      break;
2400640e:	e001      	b.n	24006414 <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
24006410:	2301      	movs	r3, #1
24006412:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24006414:	687b      	ldr	r3, [r7, #4]
24006416:	2200      	movs	r2, #0
24006418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
2400641c:	7bfb      	ldrb	r3, [r7, #15]
}
2400641e:	4618      	mov	r0, r3
24006420:	3714      	adds	r7, #20
24006422:	46bd      	mov	sp, r7
24006424:	f85d 7b04 	ldr.w	r7, [sp], #4
24006428:	4770      	bx	lr
2400642a:	bf00      	nop

2400642c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
2400642c:	b480      	push	{r7}
2400642e:	b083      	sub	sp, #12
24006430:	af00      	add	r7, sp, #0
24006432:	6078      	str	r0, [r7, #4]
  return hdma->State;
24006434:	687b      	ldr	r3, [r7, #4]
24006436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400643a:	b2db      	uxtb	r3, r3
}
2400643c:	4618      	mov	r0, r3
2400643e:	370c      	adds	r7, #12
24006440:	46bd      	mov	sp, r7
24006442:	f85d 7b04 	ldr.w	r7, [sp], #4
24006446:	4770      	bx	lr

24006448 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24006448:	b480      	push	{r7}
2400644a:	b083      	sub	sp, #12
2400644c:	af00      	add	r7, sp, #0
2400644e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24006450:	687b      	ldr	r3, [r7, #4]
24006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
24006454:	4618      	mov	r0, r3
24006456:	370c      	adds	r7, #12
24006458:	46bd      	mov	sp, r7
2400645a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400645e:	4770      	bx	lr

24006460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24006460:	b480      	push	{r7}
24006462:	b087      	sub	sp, #28
24006464:	af00      	add	r7, sp, #0
24006466:	60f8      	str	r0, [r7, #12]
24006468:	60b9      	str	r1, [r7, #8]
2400646a:	607a      	str	r2, [r7, #4]
2400646c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400646e:	68fb      	ldr	r3, [r7, #12]
24006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006472:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24006474:	68fb      	ldr	r3, [r7, #12]
24006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006478:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400647a:	68fb      	ldr	r3, [r7, #12]
2400647c:	681b      	ldr	r3, [r3, #0]
2400647e:	4a7f      	ldr	r2, [pc, #508]	; (2400667c <DMA_SetConfig+0x21c>)
24006480:	4293      	cmp	r3, r2
24006482:	d072      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006484:	68fb      	ldr	r3, [r7, #12]
24006486:	681b      	ldr	r3, [r3, #0]
24006488:	4a7d      	ldr	r2, [pc, #500]	; (24006680 <DMA_SetConfig+0x220>)
2400648a:	4293      	cmp	r3, r2
2400648c:	d06d      	beq.n	2400656a <DMA_SetConfig+0x10a>
2400648e:	68fb      	ldr	r3, [r7, #12]
24006490:	681b      	ldr	r3, [r3, #0]
24006492:	4a7c      	ldr	r2, [pc, #496]	; (24006684 <DMA_SetConfig+0x224>)
24006494:	4293      	cmp	r3, r2
24006496:	d068      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006498:	68fb      	ldr	r3, [r7, #12]
2400649a:	681b      	ldr	r3, [r3, #0]
2400649c:	4a7a      	ldr	r2, [pc, #488]	; (24006688 <DMA_SetConfig+0x228>)
2400649e:	4293      	cmp	r3, r2
240064a0:	d063      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064a2:	68fb      	ldr	r3, [r7, #12]
240064a4:	681b      	ldr	r3, [r3, #0]
240064a6:	4a79      	ldr	r2, [pc, #484]	; (2400668c <DMA_SetConfig+0x22c>)
240064a8:	4293      	cmp	r3, r2
240064aa:	d05e      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064ac:	68fb      	ldr	r3, [r7, #12]
240064ae:	681b      	ldr	r3, [r3, #0]
240064b0:	4a77      	ldr	r2, [pc, #476]	; (24006690 <DMA_SetConfig+0x230>)
240064b2:	4293      	cmp	r3, r2
240064b4:	d059      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064b6:	68fb      	ldr	r3, [r7, #12]
240064b8:	681b      	ldr	r3, [r3, #0]
240064ba:	4a76      	ldr	r2, [pc, #472]	; (24006694 <DMA_SetConfig+0x234>)
240064bc:	4293      	cmp	r3, r2
240064be:	d054      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064c0:	68fb      	ldr	r3, [r7, #12]
240064c2:	681b      	ldr	r3, [r3, #0]
240064c4:	4a74      	ldr	r2, [pc, #464]	; (24006698 <DMA_SetConfig+0x238>)
240064c6:	4293      	cmp	r3, r2
240064c8:	d04f      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064ca:	68fb      	ldr	r3, [r7, #12]
240064cc:	681b      	ldr	r3, [r3, #0]
240064ce:	4a73      	ldr	r2, [pc, #460]	; (2400669c <DMA_SetConfig+0x23c>)
240064d0:	4293      	cmp	r3, r2
240064d2:	d04a      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064d4:	68fb      	ldr	r3, [r7, #12]
240064d6:	681b      	ldr	r3, [r3, #0]
240064d8:	4a71      	ldr	r2, [pc, #452]	; (240066a0 <DMA_SetConfig+0x240>)
240064da:	4293      	cmp	r3, r2
240064dc:	d045      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064de:	68fb      	ldr	r3, [r7, #12]
240064e0:	681b      	ldr	r3, [r3, #0]
240064e2:	4a70      	ldr	r2, [pc, #448]	; (240066a4 <DMA_SetConfig+0x244>)
240064e4:	4293      	cmp	r3, r2
240064e6:	d040      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064e8:	68fb      	ldr	r3, [r7, #12]
240064ea:	681b      	ldr	r3, [r3, #0]
240064ec:	4a6e      	ldr	r2, [pc, #440]	; (240066a8 <DMA_SetConfig+0x248>)
240064ee:	4293      	cmp	r3, r2
240064f0:	d03b      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064f2:	68fb      	ldr	r3, [r7, #12]
240064f4:	681b      	ldr	r3, [r3, #0]
240064f6:	4a6d      	ldr	r2, [pc, #436]	; (240066ac <DMA_SetConfig+0x24c>)
240064f8:	4293      	cmp	r3, r2
240064fa:	d036      	beq.n	2400656a <DMA_SetConfig+0x10a>
240064fc:	68fb      	ldr	r3, [r7, #12]
240064fe:	681b      	ldr	r3, [r3, #0]
24006500:	4a6b      	ldr	r2, [pc, #428]	; (240066b0 <DMA_SetConfig+0x250>)
24006502:	4293      	cmp	r3, r2
24006504:	d031      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006506:	68fb      	ldr	r3, [r7, #12]
24006508:	681b      	ldr	r3, [r3, #0]
2400650a:	4a6a      	ldr	r2, [pc, #424]	; (240066b4 <DMA_SetConfig+0x254>)
2400650c:	4293      	cmp	r3, r2
2400650e:	d02c      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006510:	68fb      	ldr	r3, [r7, #12]
24006512:	681b      	ldr	r3, [r3, #0]
24006514:	4a68      	ldr	r2, [pc, #416]	; (240066b8 <DMA_SetConfig+0x258>)
24006516:	4293      	cmp	r3, r2
24006518:	d027      	beq.n	2400656a <DMA_SetConfig+0x10a>
2400651a:	68fb      	ldr	r3, [r7, #12]
2400651c:	681b      	ldr	r3, [r3, #0]
2400651e:	4a67      	ldr	r2, [pc, #412]	; (240066bc <DMA_SetConfig+0x25c>)
24006520:	4293      	cmp	r3, r2
24006522:	d022      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006524:	68fb      	ldr	r3, [r7, #12]
24006526:	681b      	ldr	r3, [r3, #0]
24006528:	4a65      	ldr	r2, [pc, #404]	; (240066c0 <DMA_SetConfig+0x260>)
2400652a:	4293      	cmp	r3, r2
2400652c:	d01d      	beq.n	2400656a <DMA_SetConfig+0x10a>
2400652e:	68fb      	ldr	r3, [r7, #12]
24006530:	681b      	ldr	r3, [r3, #0]
24006532:	4a64      	ldr	r2, [pc, #400]	; (240066c4 <DMA_SetConfig+0x264>)
24006534:	4293      	cmp	r3, r2
24006536:	d018      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006538:	68fb      	ldr	r3, [r7, #12]
2400653a:	681b      	ldr	r3, [r3, #0]
2400653c:	4a62      	ldr	r2, [pc, #392]	; (240066c8 <DMA_SetConfig+0x268>)
2400653e:	4293      	cmp	r3, r2
24006540:	d013      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006542:	68fb      	ldr	r3, [r7, #12]
24006544:	681b      	ldr	r3, [r3, #0]
24006546:	4a61      	ldr	r2, [pc, #388]	; (240066cc <DMA_SetConfig+0x26c>)
24006548:	4293      	cmp	r3, r2
2400654a:	d00e      	beq.n	2400656a <DMA_SetConfig+0x10a>
2400654c:	68fb      	ldr	r3, [r7, #12]
2400654e:	681b      	ldr	r3, [r3, #0]
24006550:	4a5f      	ldr	r2, [pc, #380]	; (240066d0 <DMA_SetConfig+0x270>)
24006552:	4293      	cmp	r3, r2
24006554:	d009      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006556:	68fb      	ldr	r3, [r7, #12]
24006558:	681b      	ldr	r3, [r3, #0]
2400655a:	4a5e      	ldr	r2, [pc, #376]	; (240066d4 <DMA_SetConfig+0x274>)
2400655c:	4293      	cmp	r3, r2
2400655e:	d004      	beq.n	2400656a <DMA_SetConfig+0x10a>
24006560:	68fb      	ldr	r3, [r7, #12]
24006562:	681b      	ldr	r3, [r3, #0]
24006564:	4a5c      	ldr	r2, [pc, #368]	; (240066d8 <DMA_SetConfig+0x278>)
24006566:	4293      	cmp	r3, r2
24006568:	d101      	bne.n	2400656e <DMA_SetConfig+0x10e>
2400656a:	2301      	movs	r3, #1
2400656c:	e000      	b.n	24006570 <DMA_SetConfig+0x110>
2400656e:	2300      	movs	r3, #0
24006570:	2b00      	cmp	r3, #0
24006572:	d00d      	beq.n	24006590 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006574:	68fb      	ldr	r3, [r7, #12]
24006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24006578:	68fa      	ldr	r2, [r7, #12]
2400657a:	6e92      	ldr	r2, [r2, #104]	; 0x68
2400657c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
2400657e:	68fb      	ldr	r3, [r7, #12]
24006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24006582:	2b00      	cmp	r3, #0
24006584:	d004      	beq.n	24006590 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006586:	68fb      	ldr	r3, [r7, #12]
24006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400658a:	68fa      	ldr	r2, [r7, #12]
2400658c:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400658e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006590:	68fb      	ldr	r3, [r7, #12]
24006592:	681b      	ldr	r3, [r3, #0]
24006594:	4a39      	ldr	r2, [pc, #228]	; (2400667c <DMA_SetConfig+0x21c>)
24006596:	4293      	cmp	r3, r2
24006598:	d04a      	beq.n	24006630 <DMA_SetConfig+0x1d0>
2400659a:	68fb      	ldr	r3, [r7, #12]
2400659c:	681b      	ldr	r3, [r3, #0]
2400659e:	4a38      	ldr	r2, [pc, #224]	; (24006680 <DMA_SetConfig+0x220>)
240065a0:	4293      	cmp	r3, r2
240065a2:	d045      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065a4:	68fb      	ldr	r3, [r7, #12]
240065a6:	681b      	ldr	r3, [r3, #0]
240065a8:	4a36      	ldr	r2, [pc, #216]	; (24006684 <DMA_SetConfig+0x224>)
240065aa:	4293      	cmp	r3, r2
240065ac:	d040      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065ae:	68fb      	ldr	r3, [r7, #12]
240065b0:	681b      	ldr	r3, [r3, #0]
240065b2:	4a35      	ldr	r2, [pc, #212]	; (24006688 <DMA_SetConfig+0x228>)
240065b4:	4293      	cmp	r3, r2
240065b6:	d03b      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065b8:	68fb      	ldr	r3, [r7, #12]
240065ba:	681b      	ldr	r3, [r3, #0]
240065bc:	4a33      	ldr	r2, [pc, #204]	; (2400668c <DMA_SetConfig+0x22c>)
240065be:	4293      	cmp	r3, r2
240065c0:	d036      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065c2:	68fb      	ldr	r3, [r7, #12]
240065c4:	681b      	ldr	r3, [r3, #0]
240065c6:	4a32      	ldr	r2, [pc, #200]	; (24006690 <DMA_SetConfig+0x230>)
240065c8:	4293      	cmp	r3, r2
240065ca:	d031      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065cc:	68fb      	ldr	r3, [r7, #12]
240065ce:	681b      	ldr	r3, [r3, #0]
240065d0:	4a30      	ldr	r2, [pc, #192]	; (24006694 <DMA_SetConfig+0x234>)
240065d2:	4293      	cmp	r3, r2
240065d4:	d02c      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065d6:	68fb      	ldr	r3, [r7, #12]
240065d8:	681b      	ldr	r3, [r3, #0]
240065da:	4a2f      	ldr	r2, [pc, #188]	; (24006698 <DMA_SetConfig+0x238>)
240065dc:	4293      	cmp	r3, r2
240065de:	d027      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065e0:	68fb      	ldr	r3, [r7, #12]
240065e2:	681b      	ldr	r3, [r3, #0]
240065e4:	4a2d      	ldr	r2, [pc, #180]	; (2400669c <DMA_SetConfig+0x23c>)
240065e6:	4293      	cmp	r3, r2
240065e8:	d022      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065ea:	68fb      	ldr	r3, [r7, #12]
240065ec:	681b      	ldr	r3, [r3, #0]
240065ee:	4a2c      	ldr	r2, [pc, #176]	; (240066a0 <DMA_SetConfig+0x240>)
240065f0:	4293      	cmp	r3, r2
240065f2:	d01d      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065f4:	68fb      	ldr	r3, [r7, #12]
240065f6:	681b      	ldr	r3, [r3, #0]
240065f8:	4a2a      	ldr	r2, [pc, #168]	; (240066a4 <DMA_SetConfig+0x244>)
240065fa:	4293      	cmp	r3, r2
240065fc:	d018      	beq.n	24006630 <DMA_SetConfig+0x1d0>
240065fe:	68fb      	ldr	r3, [r7, #12]
24006600:	681b      	ldr	r3, [r3, #0]
24006602:	4a29      	ldr	r2, [pc, #164]	; (240066a8 <DMA_SetConfig+0x248>)
24006604:	4293      	cmp	r3, r2
24006606:	d013      	beq.n	24006630 <DMA_SetConfig+0x1d0>
24006608:	68fb      	ldr	r3, [r7, #12]
2400660a:	681b      	ldr	r3, [r3, #0]
2400660c:	4a27      	ldr	r2, [pc, #156]	; (240066ac <DMA_SetConfig+0x24c>)
2400660e:	4293      	cmp	r3, r2
24006610:	d00e      	beq.n	24006630 <DMA_SetConfig+0x1d0>
24006612:	68fb      	ldr	r3, [r7, #12]
24006614:	681b      	ldr	r3, [r3, #0]
24006616:	4a26      	ldr	r2, [pc, #152]	; (240066b0 <DMA_SetConfig+0x250>)
24006618:	4293      	cmp	r3, r2
2400661a:	d009      	beq.n	24006630 <DMA_SetConfig+0x1d0>
2400661c:	68fb      	ldr	r3, [r7, #12]
2400661e:	681b      	ldr	r3, [r3, #0]
24006620:	4a24      	ldr	r2, [pc, #144]	; (240066b4 <DMA_SetConfig+0x254>)
24006622:	4293      	cmp	r3, r2
24006624:	d004      	beq.n	24006630 <DMA_SetConfig+0x1d0>
24006626:	68fb      	ldr	r3, [r7, #12]
24006628:	681b      	ldr	r3, [r3, #0]
2400662a:	4a23      	ldr	r2, [pc, #140]	; (240066b8 <DMA_SetConfig+0x258>)
2400662c:	4293      	cmp	r3, r2
2400662e:	d101      	bne.n	24006634 <DMA_SetConfig+0x1d4>
24006630:	2301      	movs	r3, #1
24006632:	e000      	b.n	24006636 <DMA_SetConfig+0x1d6>
24006634:	2300      	movs	r3, #0
24006636:	2b00      	cmp	r3, #0
24006638:	d059      	beq.n	240066ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400663a:	68fb      	ldr	r3, [r7, #12]
2400663c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400663e:	f003 031f 	and.w	r3, r3, #31
24006642:	223f      	movs	r2, #63	; 0x3f
24006644:	409a      	lsls	r2, r3
24006646:	697b      	ldr	r3, [r7, #20]
24006648:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2400664a:	68fb      	ldr	r3, [r7, #12]
2400664c:	681b      	ldr	r3, [r3, #0]
2400664e:	681a      	ldr	r2, [r3, #0]
24006650:	68fb      	ldr	r3, [r7, #12]
24006652:	681b      	ldr	r3, [r3, #0]
24006654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24006658:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
2400665a:	68fb      	ldr	r3, [r7, #12]
2400665c:	681b      	ldr	r3, [r3, #0]
2400665e:	683a      	ldr	r2, [r7, #0]
24006660:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006662:	68fb      	ldr	r3, [r7, #12]
24006664:	689b      	ldr	r3, [r3, #8]
24006666:	2b40      	cmp	r3, #64	; 0x40
24006668:	d138      	bne.n	240066dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
2400666a:	68fb      	ldr	r3, [r7, #12]
2400666c:	681b      	ldr	r3, [r3, #0]
2400666e:	687a      	ldr	r2, [r7, #4]
24006670:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
24006672:	68fb      	ldr	r3, [r7, #12]
24006674:	681b      	ldr	r3, [r3, #0]
24006676:	68ba      	ldr	r2, [r7, #8]
24006678:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
2400667a:	e086      	b.n	2400678a <DMA_SetConfig+0x32a>
2400667c:	40020010 	.word	0x40020010
24006680:	40020028 	.word	0x40020028
24006684:	40020040 	.word	0x40020040
24006688:	40020058 	.word	0x40020058
2400668c:	40020070 	.word	0x40020070
24006690:	40020088 	.word	0x40020088
24006694:	400200a0 	.word	0x400200a0
24006698:	400200b8 	.word	0x400200b8
2400669c:	40020410 	.word	0x40020410
240066a0:	40020428 	.word	0x40020428
240066a4:	40020440 	.word	0x40020440
240066a8:	40020458 	.word	0x40020458
240066ac:	40020470 	.word	0x40020470
240066b0:	40020488 	.word	0x40020488
240066b4:	400204a0 	.word	0x400204a0
240066b8:	400204b8 	.word	0x400204b8
240066bc:	58025408 	.word	0x58025408
240066c0:	5802541c 	.word	0x5802541c
240066c4:	58025430 	.word	0x58025430
240066c8:	58025444 	.word	0x58025444
240066cc:	58025458 	.word	0x58025458
240066d0:	5802546c 	.word	0x5802546c
240066d4:	58025480 	.word	0x58025480
240066d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
240066dc:	68fb      	ldr	r3, [r7, #12]
240066de:	681b      	ldr	r3, [r3, #0]
240066e0:	68ba      	ldr	r2, [r7, #8]
240066e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
240066e4:	68fb      	ldr	r3, [r7, #12]
240066e6:	681b      	ldr	r3, [r3, #0]
240066e8:	687a      	ldr	r2, [r7, #4]
240066ea:	60da      	str	r2, [r3, #12]
}
240066ec:	e04d      	b.n	2400678a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240066ee:	68fb      	ldr	r3, [r7, #12]
240066f0:	681b      	ldr	r3, [r3, #0]
240066f2:	4a29      	ldr	r2, [pc, #164]	; (24006798 <DMA_SetConfig+0x338>)
240066f4:	4293      	cmp	r3, r2
240066f6:	d022      	beq.n	2400673e <DMA_SetConfig+0x2de>
240066f8:	68fb      	ldr	r3, [r7, #12]
240066fa:	681b      	ldr	r3, [r3, #0]
240066fc:	4a27      	ldr	r2, [pc, #156]	; (2400679c <DMA_SetConfig+0x33c>)
240066fe:	4293      	cmp	r3, r2
24006700:	d01d      	beq.n	2400673e <DMA_SetConfig+0x2de>
24006702:	68fb      	ldr	r3, [r7, #12]
24006704:	681b      	ldr	r3, [r3, #0]
24006706:	4a26      	ldr	r2, [pc, #152]	; (240067a0 <DMA_SetConfig+0x340>)
24006708:	4293      	cmp	r3, r2
2400670a:	d018      	beq.n	2400673e <DMA_SetConfig+0x2de>
2400670c:	68fb      	ldr	r3, [r7, #12]
2400670e:	681b      	ldr	r3, [r3, #0]
24006710:	4a24      	ldr	r2, [pc, #144]	; (240067a4 <DMA_SetConfig+0x344>)
24006712:	4293      	cmp	r3, r2
24006714:	d013      	beq.n	2400673e <DMA_SetConfig+0x2de>
24006716:	68fb      	ldr	r3, [r7, #12]
24006718:	681b      	ldr	r3, [r3, #0]
2400671a:	4a23      	ldr	r2, [pc, #140]	; (240067a8 <DMA_SetConfig+0x348>)
2400671c:	4293      	cmp	r3, r2
2400671e:	d00e      	beq.n	2400673e <DMA_SetConfig+0x2de>
24006720:	68fb      	ldr	r3, [r7, #12]
24006722:	681b      	ldr	r3, [r3, #0]
24006724:	4a21      	ldr	r2, [pc, #132]	; (240067ac <DMA_SetConfig+0x34c>)
24006726:	4293      	cmp	r3, r2
24006728:	d009      	beq.n	2400673e <DMA_SetConfig+0x2de>
2400672a:	68fb      	ldr	r3, [r7, #12]
2400672c:	681b      	ldr	r3, [r3, #0]
2400672e:	4a20      	ldr	r2, [pc, #128]	; (240067b0 <DMA_SetConfig+0x350>)
24006730:	4293      	cmp	r3, r2
24006732:	d004      	beq.n	2400673e <DMA_SetConfig+0x2de>
24006734:	68fb      	ldr	r3, [r7, #12]
24006736:	681b      	ldr	r3, [r3, #0]
24006738:	4a1e      	ldr	r2, [pc, #120]	; (240067b4 <DMA_SetConfig+0x354>)
2400673a:	4293      	cmp	r3, r2
2400673c:	d101      	bne.n	24006742 <DMA_SetConfig+0x2e2>
2400673e:	2301      	movs	r3, #1
24006740:	e000      	b.n	24006744 <DMA_SetConfig+0x2e4>
24006742:	2300      	movs	r3, #0
24006744:	2b00      	cmp	r3, #0
24006746:	d020      	beq.n	2400678a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006748:	68fb      	ldr	r3, [r7, #12]
2400674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400674c:	f003 031f 	and.w	r3, r3, #31
24006750:	2201      	movs	r2, #1
24006752:	409a      	lsls	r2, r3
24006754:	693b      	ldr	r3, [r7, #16]
24006756:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006758:	68fb      	ldr	r3, [r7, #12]
2400675a:	681b      	ldr	r3, [r3, #0]
2400675c:	683a      	ldr	r2, [r7, #0]
2400675e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006760:	68fb      	ldr	r3, [r7, #12]
24006762:	689b      	ldr	r3, [r3, #8]
24006764:	2b40      	cmp	r3, #64	; 0x40
24006766:	d108      	bne.n	2400677a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006768:	68fb      	ldr	r3, [r7, #12]
2400676a:	681b      	ldr	r3, [r3, #0]
2400676c:	687a      	ldr	r2, [r7, #4]
2400676e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24006770:	68fb      	ldr	r3, [r7, #12]
24006772:	681b      	ldr	r3, [r3, #0]
24006774:	68ba      	ldr	r2, [r7, #8]
24006776:	60da      	str	r2, [r3, #12]
}
24006778:	e007      	b.n	2400678a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2400677a:	68fb      	ldr	r3, [r7, #12]
2400677c:	681b      	ldr	r3, [r3, #0]
2400677e:	68ba      	ldr	r2, [r7, #8]
24006780:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24006782:	68fb      	ldr	r3, [r7, #12]
24006784:	681b      	ldr	r3, [r3, #0]
24006786:	687a      	ldr	r2, [r7, #4]
24006788:	60da      	str	r2, [r3, #12]
}
2400678a:	bf00      	nop
2400678c:	371c      	adds	r7, #28
2400678e:	46bd      	mov	sp, r7
24006790:	f85d 7b04 	ldr.w	r7, [sp], #4
24006794:	4770      	bx	lr
24006796:	bf00      	nop
24006798:	58025408 	.word	0x58025408
2400679c:	5802541c 	.word	0x5802541c
240067a0:	58025430 	.word	0x58025430
240067a4:	58025444 	.word	0x58025444
240067a8:	58025458 	.word	0x58025458
240067ac:	5802546c 	.word	0x5802546c
240067b0:	58025480 	.word	0x58025480
240067b4:	58025494 	.word	0x58025494

240067b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
240067b8:	b480      	push	{r7}
240067ba:	b085      	sub	sp, #20
240067bc:	af00      	add	r7, sp, #0
240067be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240067c0:	687b      	ldr	r3, [r7, #4]
240067c2:	681b      	ldr	r3, [r3, #0]
240067c4:	4a42      	ldr	r2, [pc, #264]	; (240068d0 <DMA_CalcBaseAndBitshift+0x118>)
240067c6:	4293      	cmp	r3, r2
240067c8:	d04a      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067ca:	687b      	ldr	r3, [r7, #4]
240067cc:	681b      	ldr	r3, [r3, #0]
240067ce:	4a41      	ldr	r2, [pc, #260]	; (240068d4 <DMA_CalcBaseAndBitshift+0x11c>)
240067d0:	4293      	cmp	r3, r2
240067d2:	d045      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067d4:	687b      	ldr	r3, [r7, #4]
240067d6:	681b      	ldr	r3, [r3, #0]
240067d8:	4a3f      	ldr	r2, [pc, #252]	; (240068d8 <DMA_CalcBaseAndBitshift+0x120>)
240067da:	4293      	cmp	r3, r2
240067dc:	d040      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067de:	687b      	ldr	r3, [r7, #4]
240067e0:	681b      	ldr	r3, [r3, #0]
240067e2:	4a3e      	ldr	r2, [pc, #248]	; (240068dc <DMA_CalcBaseAndBitshift+0x124>)
240067e4:	4293      	cmp	r3, r2
240067e6:	d03b      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067e8:	687b      	ldr	r3, [r7, #4]
240067ea:	681b      	ldr	r3, [r3, #0]
240067ec:	4a3c      	ldr	r2, [pc, #240]	; (240068e0 <DMA_CalcBaseAndBitshift+0x128>)
240067ee:	4293      	cmp	r3, r2
240067f0:	d036      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067f2:	687b      	ldr	r3, [r7, #4]
240067f4:	681b      	ldr	r3, [r3, #0]
240067f6:	4a3b      	ldr	r2, [pc, #236]	; (240068e4 <DMA_CalcBaseAndBitshift+0x12c>)
240067f8:	4293      	cmp	r3, r2
240067fa:	d031      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
240067fc:	687b      	ldr	r3, [r7, #4]
240067fe:	681b      	ldr	r3, [r3, #0]
24006800:	4a39      	ldr	r2, [pc, #228]	; (240068e8 <DMA_CalcBaseAndBitshift+0x130>)
24006802:	4293      	cmp	r3, r2
24006804:	d02c      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006806:	687b      	ldr	r3, [r7, #4]
24006808:	681b      	ldr	r3, [r3, #0]
2400680a:	4a38      	ldr	r2, [pc, #224]	; (240068ec <DMA_CalcBaseAndBitshift+0x134>)
2400680c:	4293      	cmp	r3, r2
2400680e:	d027      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006810:	687b      	ldr	r3, [r7, #4]
24006812:	681b      	ldr	r3, [r3, #0]
24006814:	4a36      	ldr	r2, [pc, #216]	; (240068f0 <DMA_CalcBaseAndBitshift+0x138>)
24006816:	4293      	cmp	r3, r2
24006818:	d022      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
2400681a:	687b      	ldr	r3, [r7, #4]
2400681c:	681b      	ldr	r3, [r3, #0]
2400681e:	4a35      	ldr	r2, [pc, #212]	; (240068f4 <DMA_CalcBaseAndBitshift+0x13c>)
24006820:	4293      	cmp	r3, r2
24006822:	d01d      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006824:	687b      	ldr	r3, [r7, #4]
24006826:	681b      	ldr	r3, [r3, #0]
24006828:	4a33      	ldr	r2, [pc, #204]	; (240068f8 <DMA_CalcBaseAndBitshift+0x140>)
2400682a:	4293      	cmp	r3, r2
2400682c:	d018      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
2400682e:	687b      	ldr	r3, [r7, #4]
24006830:	681b      	ldr	r3, [r3, #0]
24006832:	4a32      	ldr	r2, [pc, #200]	; (240068fc <DMA_CalcBaseAndBitshift+0x144>)
24006834:	4293      	cmp	r3, r2
24006836:	d013      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006838:	687b      	ldr	r3, [r7, #4]
2400683a:	681b      	ldr	r3, [r3, #0]
2400683c:	4a30      	ldr	r2, [pc, #192]	; (24006900 <DMA_CalcBaseAndBitshift+0x148>)
2400683e:	4293      	cmp	r3, r2
24006840:	d00e      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006842:	687b      	ldr	r3, [r7, #4]
24006844:	681b      	ldr	r3, [r3, #0]
24006846:	4a2f      	ldr	r2, [pc, #188]	; (24006904 <DMA_CalcBaseAndBitshift+0x14c>)
24006848:	4293      	cmp	r3, r2
2400684a:	d009      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
2400684c:	687b      	ldr	r3, [r7, #4]
2400684e:	681b      	ldr	r3, [r3, #0]
24006850:	4a2d      	ldr	r2, [pc, #180]	; (24006908 <DMA_CalcBaseAndBitshift+0x150>)
24006852:	4293      	cmp	r3, r2
24006854:	d004      	beq.n	24006860 <DMA_CalcBaseAndBitshift+0xa8>
24006856:	687b      	ldr	r3, [r7, #4]
24006858:	681b      	ldr	r3, [r3, #0]
2400685a:	4a2c      	ldr	r2, [pc, #176]	; (2400690c <DMA_CalcBaseAndBitshift+0x154>)
2400685c:	4293      	cmp	r3, r2
2400685e:	d101      	bne.n	24006864 <DMA_CalcBaseAndBitshift+0xac>
24006860:	2301      	movs	r3, #1
24006862:	e000      	b.n	24006866 <DMA_CalcBaseAndBitshift+0xae>
24006864:	2300      	movs	r3, #0
24006866:	2b00      	cmp	r3, #0
24006868:	d024      	beq.n	240068b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400686a:	687b      	ldr	r3, [r7, #4]
2400686c:	681b      	ldr	r3, [r3, #0]
2400686e:	b2db      	uxtb	r3, r3
24006870:	3b10      	subs	r3, #16
24006872:	4a27      	ldr	r2, [pc, #156]	; (24006910 <DMA_CalcBaseAndBitshift+0x158>)
24006874:	fba2 2303 	umull	r2, r3, r2, r3
24006878:	091b      	lsrs	r3, r3, #4
2400687a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400687c:	68fb      	ldr	r3, [r7, #12]
2400687e:	f003 0307 	and.w	r3, r3, #7
24006882:	4a24      	ldr	r2, [pc, #144]	; (24006914 <DMA_CalcBaseAndBitshift+0x15c>)
24006884:	5cd3      	ldrb	r3, [r2, r3]
24006886:	461a      	mov	r2, r3
24006888:	687b      	ldr	r3, [r7, #4]
2400688a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
2400688c:	68fb      	ldr	r3, [r7, #12]
2400688e:	2b03      	cmp	r3, #3
24006890:	d908      	bls.n	240068a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24006892:	687b      	ldr	r3, [r7, #4]
24006894:	681b      	ldr	r3, [r3, #0]
24006896:	461a      	mov	r2, r3
24006898:	4b1f      	ldr	r3, [pc, #124]	; (24006918 <DMA_CalcBaseAndBitshift+0x160>)
2400689a:	4013      	ands	r3, r2
2400689c:	1d1a      	adds	r2, r3, #4
2400689e:	687b      	ldr	r3, [r7, #4]
240068a0:	659a      	str	r2, [r3, #88]	; 0x58
240068a2:	e00d      	b.n	240068c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
240068a4:	687b      	ldr	r3, [r7, #4]
240068a6:	681b      	ldr	r3, [r3, #0]
240068a8:	461a      	mov	r2, r3
240068aa:	4b1b      	ldr	r3, [pc, #108]	; (24006918 <DMA_CalcBaseAndBitshift+0x160>)
240068ac:	4013      	ands	r3, r2
240068ae:	687a      	ldr	r2, [r7, #4]
240068b0:	6593      	str	r3, [r2, #88]	; 0x58
240068b2:	e005      	b.n	240068c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
240068b4:	687b      	ldr	r3, [r7, #4]
240068b6:	681b      	ldr	r3, [r3, #0]
240068b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
240068bc:	687b      	ldr	r3, [r7, #4]
240068be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
240068c0:	687b      	ldr	r3, [r7, #4]
240068c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
240068c4:	4618      	mov	r0, r3
240068c6:	3714      	adds	r7, #20
240068c8:	46bd      	mov	sp, r7
240068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240068ce:	4770      	bx	lr
240068d0:	40020010 	.word	0x40020010
240068d4:	40020028 	.word	0x40020028
240068d8:	40020040 	.word	0x40020040
240068dc:	40020058 	.word	0x40020058
240068e0:	40020070 	.word	0x40020070
240068e4:	40020088 	.word	0x40020088
240068e8:	400200a0 	.word	0x400200a0
240068ec:	400200b8 	.word	0x400200b8
240068f0:	40020410 	.word	0x40020410
240068f4:	40020428 	.word	0x40020428
240068f8:	40020440 	.word	0x40020440
240068fc:	40020458 	.word	0x40020458
24006900:	40020470 	.word	0x40020470
24006904:	40020488 	.word	0x40020488
24006908:	400204a0 	.word	0x400204a0
2400690c:	400204b8 	.word	0x400204b8
24006910:	aaaaaaab 	.word	0xaaaaaaab
24006914:	24017774 	.word	0x24017774
24006918:	fffffc00 	.word	0xfffffc00

2400691c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
2400691c:	b480      	push	{r7}
2400691e:	b085      	sub	sp, #20
24006920:	af00      	add	r7, sp, #0
24006922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24006924:	2300      	movs	r3, #0
24006926:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24006928:	687b      	ldr	r3, [r7, #4]
2400692a:	699b      	ldr	r3, [r3, #24]
2400692c:	2b00      	cmp	r3, #0
2400692e:	d120      	bne.n	24006972 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24006930:	687b      	ldr	r3, [r7, #4]
24006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24006934:	2b03      	cmp	r3, #3
24006936:	d858      	bhi.n	240069ea <DMA_CheckFifoParam+0xce>
24006938:	a201      	add	r2, pc, #4	; (adr r2, 24006940 <DMA_CheckFifoParam+0x24>)
2400693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400693e:	bf00      	nop
24006940:	24006951 	.word	0x24006951
24006944:	24006963 	.word	0x24006963
24006948:	24006951 	.word	0x24006951
2400694c:	240069eb 	.word	0x240069eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24006950:	687b      	ldr	r3, [r7, #4]
24006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24006954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24006958:	2b00      	cmp	r3, #0
2400695a:	d048      	beq.n	240069ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
2400695c:	2301      	movs	r3, #1
2400695e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006960:	e045      	b.n	240069ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24006962:	687b      	ldr	r3, [r7, #4]
24006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24006966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2400696a:	d142      	bne.n	240069f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
2400696c:	2301      	movs	r3, #1
2400696e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006970:	e03f      	b.n	240069f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24006972:	687b      	ldr	r3, [r7, #4]
24006974:	699b      	ldr	r3, [r3, #24]
24006976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400697a:	d123      	bne.n	240069c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
2400697c:	687b      	ldr	r3, [r7, #4]
2400697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24006980:	2b03      	cmp	r3, #3
24006982:	d838      	bhi.n	240069f6 <DMA_CheckFifoParam+0xda>
24006984:	a201      	add	r2, pc, #4	; (adr r2, 2400698c <DMA_CheckFifoParam+0x70>)
24006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400698a:	bf00      	nop
2400698c:	2400699d 	.word	0x2400699d
24006990:	240069a3 	.word	0x240069a3
24006994:	2400699d 	.word	0x2400699d
24006998:	240069b5 	.word	0x240069b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
2400699c:	2301      	movs	r3, #1
2400699e:	73fb      	strb	r3, [r7, #15]
        break;
240069a0:	e030      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240069a2:	687b      	ldr	r3, [r7, #4]
240069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240069a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240069aa:	2b00      	cmp	r3, #0
240069ac:	d025      	beq.n	240069fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
240069ae:	2301      	movs	r3, #1
240069b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
240069b2:	e022      	b.n	240069fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240069b4:	687b      	ldr	r3, [r7, #4]
240069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240069b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
240069bc:	d11f      	bne.n	240069fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
240069be:	2301      	movs	r3, #1
240069c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
240069c2:	e01c      	b.n	240069fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
240069c4:	687b      	ldr	r3, [r7, #4]
240069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240069c8:	2b02      	cmp	r3, #2
240069ca:	d902      	bls.n	240069d2 <DMA_CheckFifoParam+0xb6>
240069cc:	2b03      	cmp	r3, #3
240069ce:	d003      	beq.n	240069d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
240069d0:	e018      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
240069d2:	2301      	movs	r3, #1
240069d4:	73fb      	strb	r3, [r7, #15]
        break;
240069d6:	e015      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240069d8:	687b      	ldr	r3, [r7, #4]
240069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240069dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240069e0:	2b00      	cmp	r3, #0
240069e2:	d00e      	beq.n	24006a02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
240069e4:	2301      	movs	r3, #1
240069e6:	73fb      	strb	r3, [r7, #15]
    break;
240069e8:	e00b      	b.n	24006a02 <DMA_CheckFifoParam+0xe6>
        break;
240069ea:	bf00      	nop
240069ec:	e00a      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        break;
240069ee:	bf00      	nop
240069f0:	e008      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        break;
240069f2:	bf00      	nop
240069f4:	e006      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        break;
240069f6:	bf00      	nop
240069f8:	e004      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        break;
240069fa:	bf00      	nop
240069fc:	e002      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
        break;
240069fe:	bf00      	nop
24006a00:	e000      	b.n	24006a04 <DMA_CheckFifoParam+0xe8>
    break;
24006a02:	bf00      	nop
    }
  }

  return status;
24006a04:	7bfb      	ldrb	r3, [r7, #15]
}
24006a06:	4618      	mov	r0, r3
24006a08:	3714      	adds	r7, #20
24006a0a:	46bd      	mov	sp, r7
24006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24006a10:	4770      	bx	lr
24006a12:	bf00      	nop

24006a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
24006a14:	b480      	push	{r7}
24006a16:	b085      	sub	sp, #20
24006a18:	af00      	add	r7, sp, #0
24006a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24006a1c:	687b      	ldr	r3, [r7, #4]
24006a1e:	681b      	ldr	r3, [r3, #0]
24006a20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24006a22:	687b      	ldr	r3, [r7, #4]
24006a24:	681b      	ldr	r3, [r3, #0]
24006a26:	4a38      	ldr	r2, [pc, #224]	; (24006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
24006a28:	4293      	cmp	r3, r2
24006a2a:	d022      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a2c:	687b      	ldr	r3, [r7, #4]
24006a2e:	681b      	ldr	r3, [r3, #0]
24006a30:	4a36      	ldr	r2, [pc, #216]	; (24006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
24006a32:	4293      	cmp	r3, r2
24006a34:	d01d      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a36:	687b      	ldr	r3, [r7, #4]
24006a38:	681b      	ldr	r3, [r3, #0]
24006a3a:	4a35      	ldr	r2, [pc, #212]	; (24006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24006a3c:	4293      	cmp	r3, r2
24006a3e:	d018      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a40:	687b      	ldr	r3, [r7, #4]
24006a42:	681b      	ldr	r3, [r3, #0]
24006a44:	4a33      	ldr	r2, [pc, #204]	; (24006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
24006a46:	4293      	cmp	r3, r2
24006a48:	d013      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a4a:	687b      	ldr	r3, [r7, #4]
24006a4c:	681b      	ldr	r3, [r3, #0]
24006a4e:	4a32      	ldr	r2, [pc, #200]	; (24006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24006a50:	4293      	cmp	r3, r2
24006a52:	d00e      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a54:	687b      	ldr	r3, [r7, #4]
24006a56:	681b      	ldr	r3, [r3, #0]
24006a58:	4a30      	ldr	r2, [pc, #192]	; (24006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
24006a5a:	4293      	cmp	r3, r2
24006a5c:	d009      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a5e:	687b      	ldr	r3, [r7, #4]
24006a60:	681b      	ldr	r3, [r3, #0]
24006a62:	4a2f      	ldr	r2, [pc, #188]	; (24006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24006a64:	4293      	cmp	r3, r2
24006a66:	d004      	beq.n	24006a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a68:	687b      	ldr	r3, [r7, #4]
24006a6a:	681b      	ldr	r3, [r3, #0]
24006a6c:	4a2d      	ldr	r2, [pc, #180]	; (24006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24006a6e:	4293      	cmp	r3, r2
24006a70:	d101      	bne.n	24006a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24006a72:	2301      	movs	r3, #1
24006a74:	e000      	b.n	24006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24006a76:	2300      	movs	r3, #0
24006a78:	2b00      	cmp	r3, #0
24006a7a:	d01a      	beq.n	24006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24006a7c:	687b      	ldr	r3, [r7, #4]
24006a7e:	681b      	ldr	r3, [r3, #0]
24006a80:	b2db      	uxtb	r3, r3
24006a82:	3b08      	subs	r3, #8
24006a84:	4a28      	ldr	r2, [pc, #160]	; (24006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24006a86:	fba2 2303 	umull	r2, r3, r2, r3
24006a8a:	091b      	lsrs	r3, r3, #4
24006a8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24006a8e:	68fa      	ldr	r2, [r7, #12]
24006a90:	4b26      	ldr	r3, [pc, #152]	; (24006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24006a92:	4413      	add	r3, r2
24006a94:	009b      	lsls	r3, r3, #2
24006a96:	461a      	mov	r2, r3
24006a98:	687b      	ldr	r3, [r7, #4]
24006a9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24006a9c:	687b      	ldr	r3, [r7, #4]
24006a9e:	4a24      	ldr	r2, [pc, #144]	; (24006b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24006aa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006aa2:	68fb      	ldr	r3, [r7, #12]
24006aa4:	f003 031f 	and.w	r3, r3, #31
24006aa8:	2201      	movs	r2, #1
24006aaa:	409a      	lsls	r2, r3
24006aac:	687b      	ldr	r3, [r7, #4]
24006aae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24006ab0:	e024      	b.n	24006afc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006ab2:	687b      	ldr	r3, [r7, #4]
24006ab4:	681b      	ldr	r3, [r3, #0]
24006ab6:	b2db      	uxtb	r3, r3
24006ab8:	3b10      	subs	r3, #16
24006aba:	4a1e      	ldr	r2, [pc, #120]	; (24006b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
24006abc:	fba2 2303 	umull	r2, r3, r2, r3
24006ac0:	091b      	lsrs	r3, r3, #4
24006ac2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24006ac4:	68bb      	ldr	r3, [r7, #8]
24006ac6:	4a1c      	ldr	r2, [pc, #112]	; (24006b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24006ac8:	4293      	cmp	r3, r2
24006aca:	d806      	bhi.n	24006ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
24006acc:	68bb      	ldr	r3, [r7, #8]
24006ace:	4a1b      	ldr	r2, [pc, #108]	; (24006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24006ad0:	4293      	cmp	r3, r2
24006ad2:	d902      	bls.n	24006ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24006ad4:	68fb      	ldr	r3, [r7, #12]
24006ad6:	3308      	adds	r3, #8
24006ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006ada:	68fa      	ldr	r2, [r7, #12]
24006adc:	4b18      	ldr	r3, [pc, #96]	; (24006b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
24006ade:	4413      	add	r3, r2
24006ae0:	009b      	lsls	r3, r3, #2
24006ae2:	461a      	mov	r2, r3
24006ae4:	687b      	ldr	r3, [r7, #4]
24006ae6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24006ae8:	687b      	ldr	r3, [r7, #4]
24006aea:	4a16      	ldr	r2, [pc, #88]	; (24006b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
24006aec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006aee:	68fb      	ldr	r3, [r7, #12]
24006af0:	f003 031f 	and.w	r3, r3, #31
24006af4:	2201      	movs	r2, #1
24006af6:	409a      	lsls	r2, r3
24006af8:	687b      	ldr	r3, [r7, #4]
24006afa:	669a      	str	r2, [r3, #104]	; 0x68
}
24006afc:	bf00      	nop
24006afe:	3714      	adds	r7, #20
24006b00:	46bd      	mov	sp, r7
24006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
24006b06:	4770      	bx	lr
24006b08:	58025408 	.word	0x58025408
24006b0c:	5802541c 	.word	0x5802541c
24006b10:	58025430 	.word	0x58025430
24006b14:	58025444 	.word	0x58025444
24006b18:	58025458 	.word	0x58025458
24006b1c:	5802546c 	.word	0x5802546c
24006b20:	58025480 	.word	0x58025480
24006b24:	58025494 	.word	0x58025494
24006b28:	cccccccd 	.word	0xcccccccd
24006b2c:	16009600 	.word	0x16009600
24006b30:	58025880 	.word	0x58025880
24006b34:	aaaaaaab 	.word	0xaaaaaaab
24006b38:	400204b8 	.word	0x400204b8
24006b3c:	4002040f 	.word	0x4002040f
24006b40:	10008200 	.word	0x10008200
24006b44:	40020880 	.word	0x40020880

24006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
24006b48:	b480      	push	{r7}
24006b4a:	b085      	sub	sp, #20
24006b4c:	af00      	add	r7, sp, #0
24006b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24006b50:	687b      	ldr	r3, [r7, #4]
24006b52:	685b      	ldr	r3, [r3, #4]
24006b54:	b2db      	uxtb	r3, r3
24006b56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24006b58:	68fb      	ldr	r3, [r7, #12]
24006b5a:	2b00      	cmp	r3, #0
24006b5c:	d04a      	beq.n	24006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24006b5e:	68fb      	ldr	r3, [r7, #12]
24006b60:	2b08      	cmp	r3, #8
24006b62:	d847      	bhi.n	24006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24006b64:	687b      	ldr	r3, [r7, #4]
24006b66:	681b      	ldr	r3, [r3, #0]
24006b68:	4a25      	ldr	r2, [pc, #148]	; (24006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
24006b6a:	4293      	cmp	r3, r2
24006b6c:	d022      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b6e:	687b      	ldr	r3, [r7, #4]
24006b70:	681b      	ldr	r3, [r3, #0]
24006b72:	4a24      	ldr	r2, [pc, #144]	; (24006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24006b74:	4293      	cmp	r3, r2
24006b76:	d01d      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b78:	687b      	ldr	r3, [r7, #4]
24006b7a:	681b      	ldr	r3, [r3, #0]
24006b7c:	4a22      	ldr	r2, [pc, #136]	; (24006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24006b7e:	4293      	cmp	r3, r2
24006b80:	d018      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b82:	687b      	ldr	r3, [r7, #4]
24006b84:	681b      	ldr	r3, [r3, #0]
24006b86:	4a21      	ldr	r2, [pc, #132]	; (24006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24006b88:	4293      	cmp	r3, r2
24006b8a:	d013      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b8c:	687b      	ldr	r3, [r7, #4]
24006b8e:	681b      	ldr	r3, [r3, #0]
24006b90:	4a1f      	ldr	r2, [pc, #124]	; (24006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24006b92:	4293      	cmp	r3, r2
24006b94:	d00e      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b96:	687b      	ldr	r3, [r7, #4]
24006b98:	681b      	ldr	r3, [r3, #0]
24006b9a:	4a1e      	ldr	r2, [pc, #120]	; (24006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24006b9c:	4293      	cmp	r3, r2
24006b9e:	d009      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006ba0:	687b      	ldr	r3, [r7, #4]
24006ba2:	681b      	ldr	r3, [r3, #0]
24006ba4:	4a1c      	ldr	r2, [pc, #112]	; (24006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24006ba6:	4293      	cmp	r3, r2
24006ba8:	d004      	beq.n	24006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006baa:	687b      	ldr	r3, [r7, #4]
24006bac:	681b      	ldr	r3, [r3, #0]
24006bae:	4a1b      	ldr	r2, [pc, #108]	; (24006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24006bb0:	4293      	cmp	r3, r2
24006bb2:	d101      	bne.n	24006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24006bb4:	2301      	movs	r3, #1
24006bb6:	e000      	b.n	24006bba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24006bb8:	2300      	movs	r3, #0
24006bba:	2b00      	cmp	r3, #0
24006bbc:	d00a      	beq.n	24006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24006bbe:	68fa      	ldr	r2, [r7, #12]
24006bc0:	4b17      	ldr	r3, [pc, #92]	; (24006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24006bc2:	4413      	add	r3, r2
24006bc4:	009b      	lsls	r3, r3, #2
24006bc6:	461a      	mov	r2, r3
24006bc8:	687b      	ldr	r3, [r7, #4]
24006bca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24006bcc:	687b      	ldr	r3, [r7, #4]
24006bce:	4a15      	ldr	r2, [pc, #84]	; (24006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24006bd0:	671a      	str	r2, [r3, #112]	; 0x70
24006bd2:	e009      	b.n	24006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24006bd4:	68fa      	ldr	r2, [r7, #12]
24006bd6:	4b14      	ldr	r3, [pc, #80]	; (24006c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24006bd8:	4413      	add	r3, r2
24006bda:	009b      	lsls	r3, r3, #2
24006bdc:	461a      	mov	r2, r3
24006bde:	687b      	ldr	r3, [r7, #4]
24006be0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24006be2:	687b      	ldr	r3, [r7, #4]
24006be4:	4a11      	ldr	r2, [pc, #68]	; (24006c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24006be6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24006be8:	68fb      	ldr	r3, [r7, #12]
24006bea:	3b01      	subs	r3, #1
24006bec:	2201      	movs	r2, #1
24006bee:	409a      	lsls	r2, r3
24006bf0:	687b      	ldr	r3, [r7, #4]
24006bf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24006bf4:	bf00      	nop
24006bf6:	3714      	adds	r7, #20
24006bf8:	46bd      	mov	sp, r7
24006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
24006bfe:	4770      	bx	lr
24006c00:	58025408 	.word	0x58025408
24006c04:	5802541c 	.word	0x5802541c
24006c08:	58025430 	.word	0x58025430
24006c0c:	58025444 	.word	0x58025444
24006c10:	58025458 	.word	0x58025458
24006c14:	5802546c 	.word	0x5802546c
24006c18:	58025480 	.word	0x58025480
24006c1c:	58025494 	.word	0x58025494
24006c20:	1600963f 	.word	0x1600963f
24006c24:	58025940 	.word	0x58025940
24006c28:	1000823f 	.word	0x1000823f
24006c2c:	40020940 	.word	0x40020940

24006c30 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24006c30:	b580      	push	{r7, lr}
24006c32:	b086      	sub	sp, #24
24006c34:	af00      	add	r7, sp, #0
24006c36:	60f8      	str	r0, [r7, #12]
24006c38:	60b9      	str	r1, [r7, #8]
24006c3a:	607a      	str	r2, [r7, #4]
24006c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006c3e:	2300      	movs	r3, #0
24006c40:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24006c42:	68fb      	ldr	r3, [r7, #12]
24006c44:	689b      	ldr	r3, [r3, #8]
24006c46:	2b80      	cmp	r3, #128	; 0x80
24006c48:	d106      	bne.n	24006c58 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24006c4a:	68fb      	ldr	r3, [r7, #12]
24006c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
24006c50:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
24006c52:	2301      	movs	r3, #1
24006c54:	75fb      	strb	r3, [r7, #23]
24006c56:	e1c8      	b.n	24006fea <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006c58:	68fb      	ldr	r3, [r7, #12]
24006c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006c5e:	2b01      	cmp	r3, #1
24006c60:	d101      	bne.n	24006c66 <HAL_DMAEx_MultiBufferStart+0x36>
24006c62:	2302      	movs	r3, #2
24006c64:	e1c2      	b.n	24006fec <HAL_DMAEx_MultiBufferStart+0x3bc>
24006c66:	68fb      	ldr	r3, [r7, #12]
24006c68:	2201      	movs	r2, #1
24006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
24006c6e:	68fb      	ldr	r3, [r7, #12]
24006c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006c74:	b2db      	uxtb	r3, r3
24006c76:	2b01      	cmp	r3, #1
24006c78:	f040 81b1 	bne.w	24006fde <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
24006c7c:	68fb      	ldr	r3, [r7, #12]
24006c7e:	2202      	movs	r2, #2
24006c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006c84:	68fb      	ldr	r3, [r7, #12]
24006c86:	2200      	movs	r2, #0
24006c88:	655a      	str	r2, [r3, #84]	; 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006c8a:	68fb      	ldr	r3, [r7, #12]
24006c8c:	681b      	ldr	r3, [r3, #0]
24006c8e:	4a7f      	ldr	r2, [pc, #508]	; (24006e8c <HAL_DMAEx_MultiBufferStart+0x25c>)
24006c90:	4293      	cmp	r3, r2
24006c92:	d04a      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006c94:	68fb      	ldr	r3, [r7, #12]
24006c96:	681b      	ldr	r3, [r3, #0]
24006c98:	4a7d      	ldr	r2, [pc, #500]	; (24006e90 <HAL_DMAEx_MultiBufferStart+0x260>)
24006c9a:	4293      	cmp	r3, r2
24006c9c:	d045      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006c9e:	68fb      	ldr	r3, [r7, #12]
24006ca0:	681b      	ldr	r3, [r3, #0]
24006ca2:	4a7c      	ldr	r2, [pc, #496]	; (24006e94 <HAL_DMAEx_MultiBufferStart+0x264>)
24006ca4:	4293      	cmp	r3, r2
24006ca6:	d040      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006ca8:	68fb      	ldr	r3, [r7, #12]
24006caa:	681b      	ldr	r3, [r3, #0]
24006cac:	4a7a      	ldr	r2, [pc, #488]	; (24006e98 <HAL_DMAEx_MultiBufferStart+0x268>)
24006cae:	4293      	cmp	r3, r2
24006cb0:	d03b      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cb2:	68fb      	ldr	r3, [r7, #12]
24006cb4:	681b      	ldr	r3, [r3, #0]
24006cb6:	4a79      	ldr	r2, [pc, #484]	; (24006e9c <HAL_DMAEx_MultiBufferStart+0x26c>)
24006cb8:	4293      	cmp	r3, r2
24006cba:	d036      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cbc:	68fb      	ldr	r3, [r7, #12]
24006cbe:	681b      	ldr	r3, [r3, #0]
24006cc0:	4a77      	ldr	r2, [pc, #476]	; (24006ea0 <HAL_DMAEx_MultiBufferStart+0x270>)
24006cc2:	4293      	cmp	r3, r2
24006cc4:	d031      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cc6:	68fb      	ldr	r3, [r7, #12]
24006cc8:	681b      	ldr	r3, [r3, #0]
24006cca:	4a76      	ldr	r2, [pc, #472]	; (24006ea4 <HAL_DMAEx_MultiBufferStart+0x274>)
24006ccc:	4293      	cmp	r3, r2
24006cce:	d02c      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cd0:	68fb      	ldr	r3, [r7, #12]
24006cd2:	681b      	ldr	r3, [r3, #0]
24006cd4:	4a74      	ldr	r2, [pc, #464]	; (24006ea8 <HAL_DMAEx_MultiBufferStart+0x278>)
24006cd6:	4293      	cmp	r3, r2
24006cd8:	d027      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cda:	68fb      	ldr	r3, [r7, #12]
24006cdc:	681b      	ldr	r3, [r3, #0]
24006cde:	4a73      	ldr	r2, [pc, #460]	; (24006eac <HAL_DMAEx_MultiBufferStart+0x27c>)
24006ce0:	4293      	cmp	r3, r2
24006ce2:	d022      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006ce4:	68fb      	ldr	r3, [r7, #12]
24006ce6:	681b      	ldr	r3, [r3, #0]
24006ce8:	4a71      	ldr	r2, [pc, #452]	; (24006eb0 <HAL_DMAEx_MultiBufferStart+0x280>)
24006cea:	4293      	cmp	r3, r2
24006cec:	d01d      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cee:	68fb      	ldr	r3, [r7, #12]
24006cf0:	681b      	ldr	r3, [r3, #0]
24006cf2:	4a70      	ldr	r2, [pc, #448]	; (24006eb4 <HAL_DMAEx_MultiBufferStart+0x284>)
24006cf4:	4293      	cmp	r3, r2
24006cf6:	d018      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006cf8:	68fb      	ldr	r3, [r7, #12]
24006cfa:	681b      	ldr	r3, [r3, #0]
24006cfc:	4a6e      	ldr	r2, [pc, #440]	; (24006eb8 <HAL_DMAEx_MultiBufferStart+0x288>)
24006cfe:	4293      	cmp	r3, r2
24006d00:	d013      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006d02:	68fb      	ldr	r3, [r7, #12]
24006d04:	681b      	ldr	r3, [r3, #0]
24006d06:	4a6d      	ldr	r2, [pc, #436]	; (24006ebc <HAL_DMAEx_MultiBufferStart+0x28c>)
24006d08:	4293      	cmp	r3, r2
24006d0a:	d00e      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006d0c:	68fb      	ldr	r3, [r7, #12]
24006d0e:	681b      	ldr	r3, [r3, #0]
24006d10:	4a6b      	ldr	r2, [pc, #428]	; (24006ec0 <HAL_DMAEx_MultiBufferStart+0x290>)
24006d12:	4293      	cmp	r3, r2
24006d14:	d009      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006d16:	68fb      	ldr	r3, [r7, #12]
24006d18:	681b      	ldr	r3, [r3, #0]
24006d1a:	4a6a      	ldr	r2, [pc, #424]	; (24006ec4 <HAL_DMAEx_MultiBufferStart+0x294>)
24006d1c:	4293      	cmp	r3, r2
24006d1e:	d004      	beq.n	24006d2a <HAL_DMAEx_MultiBufferStart+0xfa>
24006d20:	68fb      	ldr	r3, [r7, #12]
24006d22:	681b      	ldr	r3, [r3, #0]
24006d24:	4a68      	ldr	r2, [pc, #416]	; (24006ec8 <HAL_DMAEx_MultiBufferStart+0x298>)
24006d26:	4293      	cmp	r3, r2
24006d28:	d101      	bne.n	24006d2e <HAL_DMAEx_MultiBufferStart+0xfe>
24006d2a:	2301      	movs	r3, #1
24006d2c:	e000      	b.n	24006d30 <HAL_DMAEx_MultiBufferStart+0x100>
24006d2e:	2300      	movs	r3, #0
24006d30:	2b00      	cmp	r3, #0
24006d32:	d018      	beq.n	24006d66 <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24006d34:	68fb      	ldr	r3, [r7, #12]
24006d36:	681b      	ldr	r3, [r3, #0]
24006d38:	681a      	ldr	r2, [r3, #0]
24006d3a:	68fb      	ldr	r3, [r7, #12]
24006d3c:	681b      	ldr	r3, [r3, #0]
24006d3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24006d42:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24006d44:	68fb      	ldr	r3, [r7, #12]
24006d46:	681b      	ldr	r3, [r3, #0]
24006d48:	683a      	ldr	r2, [r7, #0]
24006d4a:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24006d4c:	68fb      	ldr	r3, [r7, #12]
24006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006d50:	3308      	adds	r3, #8
24006d52:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006d54:	68fb      	ldr	r3, [r7, #12]
24006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006d58:	f003 031f 	and.w	r3, r3, #31
24006d5c:	223f      	movs	r2, #63	; 0x3f
24006d5e:	409a      	lsls	r2, r3
24006d60:	693b      	ldr	r3, [r7, #16]
24006d62:	601a      	str	r2, [r3, #0]
24006d64:	e018      	b.n	24006d98 <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24006d66:	68fb      	ldr	r3, [r7, #12]
24006d68:	681b      	ldr	r3, [r3, #0]
24006d6a:	6819      	ldr	r1, [r3, #0]
24006d6c:	68fb      	ldr	r3, [r7, #12]
24006d6e:	681a      	ldr	r2, [r3, #0]
24006d70:	f248 0320 	movw	r3, #32800	; 0x8020
24006d74:	430b      	orrs	r3, r1
24006d76:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24006d78:	68fb      	ldr	r3, [r7, #12]
24006d7a:	681b      	ldr	r3, [r3, #0]
24006d7c:	683a      	ldr	r2, [r7, #0]
24006d7e:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24006d80:	68fb      	ldr	r3, [r7, #12]
24006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006d84:	3304      	adds	r3, #4
24006d86:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006d88:	68fb      	ldr	r3, [r7, #12]
24006d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006d8c:	f003 031f 	and.w	r3, r3, #31
24006d90:	2201      	movs	r2, #1
24006d92:	409a      	lsls	r2, r3
24006d94:	693b      	ldr	r3, [r7, #16]
24006d96:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006d98:	68fb      	ldr	r3, [r7, #12]
24006d9a:	681b      	ldr	r3, [r3, #0]
24006d9c:	4a3b      	ldr	r2, [pc, #236]	; (24006e8c <HAL_DMAEx_MultiBufferStart+0x25c>)
24006d9e:	4293      	cmp	r3, r2
24006da0:	d072      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006da2:	68fb      	ldr	r3, [r7, #12]
24006da4:	681b      	ldr	r3, [r3, #0]
24006da6:	4a3a      	ldr	r2, [pc, #232]	; (24006e90 <HAL_DMAEx_MultiBufferStart+0x260>)
24006da8:	4293      	cmp	r3, r2
24006daa:	d06d      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dac:	68fb      	ldr	r3, [r7, #12]
24006dae:	681b      	ldr	r3, [r3, #0]
24006db0:	4a38      	ldr	r2, [pc, #224]	; (24006e94 <HAL_DMAEx_MultiBufferStart+0x264>)
24006db2:	4293      	cmp	r3, r2
24006db4:	d068      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006db6:	68fb      	ldr	r3, [r7, #12]
24006db8:	681b      	ldr	r3, [r3, #0]
24006dba:	4a37      	ldr	r2, [pc, #220]	; (24006e98 <HAL_DMAEx_MultiBufferStart+0x268>)
24006dbc:	4293      	cmp	r3, r2
24006dbe:	d063      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dc0:	68fb      	ldr	r3, [r7, #12]
24006dc2:	681b      	ldr	r3, [r3, #0]
24006dc4:	4a35      	ldr	r2, [pc, #212]	; (24006e9c <HAL_DMAEx_MultiBufferStart+0x26c>)
24006dc6:	4293      	cmp	r3, r2
24006dc8:	d05e      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dca:	68fb      	ldr	r3, [r7, #12]
24006dcc:	681b      	ldr	r3, [r3, #0]
24006dce:	4a34      	ldr	r2, [pc, #208]	; (24006ea0 <HAL_DMAEx_MultiBufferStart+0x270>)
24006dd0:	4293      	cmp	r3, r2
24006dd2:	d059      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dd4:	68fb      	ldr	r3, [r7, #12]
24006dd6:	681b      	ldr	r3, [r3, #0]
24006dd8:	4a32      	ldr	r2, [pc, #200]	; (24006ea4 <HAL_DMAEx_MultiBufferStart+0x274>)
24006dda:	4293      	cmp	r3, r2
24006ddc:	d054      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dde:	68fb      	ldr	r3, [r7, #12]
24006de0:	681b      	ldr	r3, [r3, #0]
24006de2:	4a31      	ldr	r2, [pc, #196]	; (24006ea8 <HAL_DMAEx_MultiBufferStart+0x278>)
24006de4:	4293      	cmp	r3, r2
24006de6:	d04f      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006de8:	68fb      	ldr	r3, [r7, #12]
24006dea:	681b      	ldr	r3, [r3, #0]
24006dec:	4a2f      	ldr	r2, [pc, #188]	; (24006eac <HAL_DMAEx_MultiBufferStart+0x27c>)
24006dee:	4293      	cmp	r3, r2
24006df0:	d04a      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006df2:	68fb      	ldr	r3, [r7, #12]
24006df4:	681b      	ldr	r3, [r3, #0]
24006df6:	4a2e      	ldr	r2, [pc, #184]	; (24006eb0 <HAL_DMAEx_MultiBufferStart+0x280>)
24006df8:	4293      	cmp	r3, r2
24006dfa:	d045      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006dfc:	68fb      	ldr	r3, [r7, #12]
24006dfe:	681b      	ldr	r3, [r3, #0]
24006e00:	4a2c      	ldr	r2, [pc, #176]	; (24006eb4 <HAL_DMAEx_MultiBufferStart+0x284>)
24006e02:	4293      	cmp	r3, r2
24006e04:	d040      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e06:	68fb      	ldr	r3, [r7, #12]
24006e08:	681b      	ldr	r3, [r3, #0]
24006e0a:	4a2b      	ldr	r2, [pc, #172]	; (24006eb8 <HAL_DMAEx_MultiBufferStart+0x288>)
24006e0c:	4293      	cmp	r3, r2
24006e0e:	d03b      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e10:	68fb      	ldr	r3, [r7, #12]
24006e12:	681b      	ldr	r3, [r3, #0]
24006e14:	4a29      	ldr	r2, [pc, #164]	; (24006ebc <HAL_DMAEx_MultiBufferStart+0x28c>)
24006e16:	4293      	cmp	r3, r2
24006e18:	d036      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e1a:	68fb      	ldr	r3, [r7, #12]
24006e1c:	681b      	ldr	r3, [r3, #0]
24006e1e:	4a28      	ldr	r2, [pc, #160]	; (24006ec0 <HAL_DMAEx_MultiBufferStart+0x290>)
24006e20:	4293      	cmp	r3, r2
24006e22:	d031      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e24:	68fb      	ldr	r3, [r7, #12]
24006e26:	681b      	ldr	r3, [r3, #0]
24006e28:	4a26      	ldr	r2, [pc, #152]	; (24006ec4 <HAL_DMAEx_MultiBufferStart+0x294>)
24006e2a:	4293      	cmp	r3, r2
24006e2c:	d02c      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e2e:	68fb      	ldr	r3, [r7, #12]
24006e30:	681b      	ldr	r3, [r3, #0]
24006e32:	4a25      	ldr	r2, [pc, #148]	; (24006ec8 <HAL_DMAEx_MultiBufferStart+0x298>)
24006e34:	4293      	cmp	r3, r2
24006e36:	d027      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e38:	68fb      	ldr	r3, [r7, #12]
24006e3a:	681b      	ldr	r3, [r3, #0]
24006e3c:	4a23      	ldr	r2, [pc, #140]	; (24006ecc <HAL_DMAEx_MultiBufferStart+0x29c>)
24006e3e:	4293      	cmp	r3, r2
24006e40:	d022      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e42:	68fb      	ldr	r3, [r7, #12]
24006e44:	681b      	ldr	r3, [r3, #0]
24006e46:	4a22      	ldr	r2, [pc, #136]	; (24006ed0 <HAL_DMAEx_MultiBufferStart+0x2a0>)
24006e48:	4293      	cmp	r3, r2
24006e4a:	d01d      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e4c:	68fb      	ldr	r3, [r7, #12]
24006e4e:	681b      	ldr	r3, [r3, #0]
24006e50:	4a20      	ldr	r2, [pc, #128]	; (24006ed4 <HAL_DMAEx_MultiBufferStart+0x2a4>)
24006e52:	4293      	cmp	r3, r2
24006e54:	d018      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e56:	68fb      	ldr	r3, [r7, #12]
24006e58:	681b      	ldr	r3, [r3, #0]
24006e5a:	4a1f      	ldr	r2, [pc, #124]	; (24006ed8 <HAL_DMAEx_MultiBufferStart+0x2a8>)
24006e5c:	4293      	cmp	r3, r2
24006e5e:	d013      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e60:	68fb      	ldr	r3, [r7, #12]
24006e62:	681b      	ldr	r3, [r3, #0]
24006e64:	4a1d      	ldr	r2, [pc, #116]	; (24006edc <HAL_DMAEx_MultiBufferStart+0x2ac>)
24006e66:	4293      	cmp	r3, r2
24006e68:	d00e      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e6a:	68fb      	ldr	r3, [r7, #12]
24006e6c:	681b      	ldr	r3, [r3, #0]
24006e6e:	4a1c      	ldr	r2, [pc, #112]	; (24006ee0 <HAL_DMAEx_MultiBufferStart+0x2b0>)
24006e70:	4293      	cmp	r3, r2
24006e72:	d009      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e74:	68fb      	ldr	r3, [r7, #12]
24006e76:	681b      	ldr	r3, [r3, #0]
24006e78:	4a1a      	ldr	r2, [pc, #104]	; (24006ee4 <HAL_DMAEx_MultiBufferStart+0x2b4>)
24006e7a:	4293      	cmp	r3, r2
24006e7c:	d004      	beq.n	24006e88 <HAL_DMAEx_MultiBufferStart+0x258>
24006e7e:	68fb      	ldr	r3, [r7, #12]
24006e80:	681b      	ldr	r3, [r3, #0]
24006e82:	4a19      	ldr	r2, [pc, #100]	; (24006ee8 <HAL_DMAEx_MultiBufferStart+0x2b8>)
24006e84:	4293      	cmp	r3, r2
24006e86:	d131      	bne.n	24006eec <HAL_DMAEx_MultiBufferStart+0x2bc>
24006e88:	2301      	movs	r3, #1
24006e8a:	e030      	b.n	24006eee <HAL_DMAEx_MultiBufferStart+0x2be>
24006e8c:	40020010 	.word	0x40020010
24006e90:	40020028 	.word	0x40020028
24006e94:	40020040 	.word	0x40020040
24006e98:	40020058 	.word	0x40020058
24006e9c:	40020070 	.word	0x40020070
24006ea0:	40020088 	.word	0x40020088
24006ea4:	400200a0 	.word	0x400200a0
24006ea8:	400200b8 	.word	0x400200b8
24006eac:	40020410 	.word	0x40020410
24006eb0:	40020428 	.word	0x40020428
24006eb4:	40020440 	.word	0x40020440
24006eb8:	40020458 	.word	0x40020458
24006ebc:	40020470 	.word	0x40020470
24006ec0:	40020488 	.word	0x40020488
24006ec4:	400204a0 	.word	0x400204a0
24006ec8:	400204b8 	.word	0x400204b8
24006ecc:	58025408 	.word	0x58025408
24006ed0:	5802541c 	.word	0x5802541c
24006ed4:	58025430 	.word	0x58025430
24006ed8:	58025444 	.word	0x58025444
24006edc:	58025458 	.word	0x58025458
24006ee0:	5802546c 	.word	0x5802546c
24006ee4:	58025480 	.word	0x58025480
24006ee8:	58025494 	.word	0x58025494
24006eec:	2300      	movs	r3, #0
24006eee:	2b00      	cmp	r3, #0
24006ef0:	d013      	beq.n	24006f1a <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24006ef2:	6a3b      	ldr	r3, [r7, #32]
24006ef4:	687a      	ldr	r2, [r7, #4]
24006ef6:	68b9      	ldr	r1, [r7, #8]
24006ef8:	68f8      	ldr	r0, [r7, #12]
24006efa:	f000 fea5 	bl	24007c48 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006efe:	68fb      	ldr	r3, [r7, #12]
24006f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24006f02:	68fa      	ldr	r2, [r7, #12]
24006f04:	6e92      	ldr	r2, [r2, #104]	; 0x68
24006f06:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24006f08:	68fb      	ldr	r3, [r7, #12]
24006f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24006f0c:	2b00      	cmp	r3, #0
24006f0e:	d004      	beq.n	24006f1a <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006f10:	68fb      	ldr	r3, [r7, #12]
24006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006f14:	68fa      	ldr	r2, [r7, #12]
24006f16:	6f52      	ldr	r2, [r2, #116]	; 0x74
24006f18:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
24006f1a:	68fb      	ldr	r3, [r7, #12]
24006f1c:	681b      	ldr	r3, [r3, #0]
24006f1e:	4a35      	ldr	r2, [pc, #212]	; (24006ff4 <HAL_DMAEx_MultiBufferStart+0x3c4>)
24006f20:	4293      	cmp	r3, r2
24006f22:	d04a      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f24:	68fb      	ldr	r3, [r7, #12]
24006f26:	681b      	ldr	r3, [r3, #0]
24006f28:	4a33      	ldr	r2, [pc, #204]	; (24006ff8 <HAL_DMAEx_MultiBufferStart+0x3c8>)
24006f2a:	4293      	cmp	r3, r2
24006f2c:	d045      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f2e:	68fb      	ldr	r3, [r7, #12]
24006f30:	681b      	ldr	r3, [r3, #0]
24006f32:	4a32      	ldr	r2, [pc, #200]	; (24006ffc <HAL_DMAEx_MultiBufferStart+0x3cc>)
24006f34:	4293      	cmp	r3, r2
24006f36:	d040      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f38:	68fb      	ldr	r3, [r7, #12]
24006f3a:	681b      	ldr	r3, [r3, #0]
24006f3c:	4a30      	ldr	r2, [pc, #192]	; (24007000 <HAL_DMAEx_MultiBufferStart+0x3d0>)
24006f3e:	4293      	cmp	r3, r2
24006f40:	d03b      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f42:	68fb      	ldr	r3, [r7, #12]
24006f44:	681b      	ldr	r3, [r3, #0]
24006f46:	4a2f      	ldr	r2, [pc, #188]	; (24007004 <HAL_DMAEx_MultiBufferStart+0x3d4>)
24006f48:	4293      	cmp	r3, r2
24006f4a:	d036      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f4c:	68fb      	ldr	r3, [r7, #12]
24006f4e:	681b      	ldr	r3, [r3, #0]
24006f50:	4a2d      	ldr	r2, [pc, #180]	; (24007008 <HAL_DMAEx_MultiBufferStart+0x3d8>)
24006f52:	4293      	cmp	r3, r2
24006f54:	d031      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f56:	68fb      	ldr	r3, [r7, #12]
24006f58:	681b      	ldr	r3, [r3, #0]
24006f5a:	4a2c      	ldr	r2, [pc, #176]	; (2400700c <HAL_DMAEx_MultiBufferStart+0x3dc>)
24006f5c:	4293      	cmp	r3, r2
24006f5e:	d02c      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f60:	68fb      	ldr	r3, [r7, #12]
24006f62:	681b      	ldr	r3, [r3, #0]
24006f64:	4a2a      	ldr	r2, [pc, #168]	; (24007010 <HAL_DMAEx_MultiBufferStart+0x3e0>)
24006f66:	4293      	cmp	r3, r2
24006f68:	d027      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f6a:	68fb      	ldr	r3, [r7, #12]
24006f6c:	681b      	ldr	r3, [r3, #0]
24006f6e:	4a29      	ldr	r2, [pc, #164]	; (24007014 <HAL_DMAEx_MultiBufferStart+0x3e4>)
24006f70:	4293      	cmp	r3, r2
24006f72:	d022      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f74:	68fb      	ldr	r3, [r7, #12]
24006f76:	681b      	ldr	r3, [r3, #0]
24006f78:	4a27      	ldr	r2, [pc, #156]	; (24007018 <HAL_DMAEx_MultiBufferStart+0x3e8>)
24006f7a:	4293      	cmp	r3, r2
24006f7c:	d01d      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f7e:	68fb      	ldr	r3, [r7, #12]
24006f80:	681b      	ldr	r3, [r3, #0]
24006f82:	4a26      	ldr	r2, [pc, #152]	; (2400701c <HAL_DMAEx_MultiBufferStart+0x3ec>)
24006f84:	4293      	cmp	r3, r2
24006f86:	d018      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f88:	68fb      	ldr	r3, [r7, #12]
24006f8a:	681b      	ldr	r3, [r3, #0]
24006f8c:	4a24      	ldr	r2, [pc, #144]	; (24007020 <HAL_DMAEx_MultiBufferStart+0x3f0>)
24006f8e:	4293      	cmp	r3, r2
24006f90:	d013      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f92:	68fb      	ldr	r3, [r7, #12]
24006f94:	681b      	ldr	r3, [r3, #0]
24006f96:	4a23      	ldr	r2, [pc, #140]	; (24007024 <HAL_DMAEx_MultiBufferStart+0x3f4>)
24006f98:	4293      	cmp	r3, r2
24006f9a:	d00e      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006f9c:	68fb      	ldr	r3, [r7, #12]
24006f9e:	681b      	ldr	r3, [r3, #0]
24006fa0:	4a21      	ldr	r2, [pc, #132]	; (24007028 <HAL_DMAEx_MultiBufferStart+0x3f8>)
24006fa2:	4293      	cmp	r3, r2
24006fa4:	d009      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006fa6:	68fb      	ldr	r3, [r7, #12]
24006fa8:	681b      	ldr	r3, [r3, #0]
24006faa:	4a20      	ldr	r2, [pc, #128]	; (2400702c <HAL_DMAEx_MultiBufferStart+0x3fc>)
24006fac:	4293      	cmp	r3, r2
24006fae:	d004      	beq.n	24006fba <HAL_DMAEx_MultiBufferStart+0x38a>
24006fb0:	68fb      	ldr	r3, [r7, #12]
24006fb2:	681b      	ldr	r3, [r3, #0]
24006fb4:	4a1e      	ldr	r2, [pc, #120]	; (24007030 <HAL_DMAEx_MultiBufferStart+0x400>)
24006fb6:	4293      	cmp	r3, r2
24006fb8:	d108      	bne.n	24006fcc <HAL_DMAEx_MultiBufferStart+0x39c>
24006fba:	68fb      	ldr	r3, [r7, #12]
24006fbc:	681b      	ldr	r3, [r3, #0]
24006fbe:	681a      	ldr	r2, [r3, #0]
24006fc0:	68fb      	ldr	r3, [r7, #12]
24006fc2:	681b      	ldr	r3, [r3, #0]
24006fc4:	f042 0201 	orr.w	r2, r2, #1
24006fc8:	601a      	str	r2, [r3, #0]
24006fca:	e00e      	b.n	24006fea <HAL_DMAEx_MultiBufferStart+0x3ba>
24006fcc:	68fb      	ldr	r3, [r7, #12]
24006fce:	681b      	ldr	r3, [r3, #0]
24006fd0:	681a      	ldr	r2, [r3, #0]
24006fd2:	68fb      	ldr	r3, [r7, #12]
24006fd4:	681b      	ldr	r3, [r3, #0]
24006fd6:	f042 0201 	orr.w	r2, r2, #1
24006fda:	601a      	str	r2, [r3, #0]
24006fdc:	e005      	b.n	24006fea <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006fde:	68fb      	ldr	r3, [r7, #12]
24006fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006fe4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Return error status */
      status = HAL_ERROR;
24006fe6:	2301      	movs	r3, #1
24006fe8:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
24006fea:	7dfb      	ldrb	r3, [r7, #23]
}
24006fec:	4618      	mov	r0, r3
24006fee:	3718      	adds	r7, #24
24006ff0:	46bd      	mov	sp, r7
24006ff2:	bd80      	pop	{r7, pc}
24006ff4:	40020010 	.word	0x40020010
24006ff8:	40020028 	.word	0x40020028
24006ffc:	40020040 	.word	0x40020040
24007000:	40020058 	.word	0x40020058
24007004:	40020070 	.word	0x40020070
24007008:	40020088 	.word	0x40020088
2400700c:	400200a0 	.word	0x400200a0
24007010:	400200b8 	.word	0x400200b8
24007014:	40020410 	.word	0x40020410
24007018:	40020428 	.word	0x40020428
2400701c:	40020440 	.word	0x40020440
24007020:	40020458 	.word	0x40020458
24007024:	40020470 	.word	0x40020470
24007028:	40020488 	.word	0x40020488
2400702c:	400204a0 	.word	0x400204a0
24007030:	400204b8 	.word	0x400204b8

24007034 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24007034:	b580      	push	{r7, lr}
24007036:	b086      	sub	sp, #24
24007038:	af00      	add	r7, sp, #0
2400703a:	60f8      	str	r0, [r7, #12]
2400703c:	60b9      	str	r1, [r7, #8]
2400703e:	607a      	str	r2, [r7, #4]
24007040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007042:	2300      	movs	r3, #0
24007044:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24007046:	68fb      	ldr	r3, [r7, #12]
24007048:	689b      	ldr	r3, [r3, #8]
2400704a:	2b80      	cmp	r3, #128	; 0x80
2400704c:	d105      	bne.n	2400705a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2400704e:	68fb      	ldr	r3, [r7, #12]
24007050:	f44f 7280 	mov.w	r2, #256	; 0x100
24007054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24007056:	2301      	movs	r3, #1
24007058:	e315      	b.n	24007686 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
2400705a:	68fb      	ldr	r3, [r7, #12]
2400705c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007060:	2b01      	cmp	r3, #1
24007062:	d101      	bne.n	24007068 <HAL_DMAEx_MultiBufferStart_IT+0x34>
24007064:	2302      	movs	r3, #2
24007066:	e30e      	b.n	24007686 <HAL_DMAEx_MultiBufferStart_IT+0x652>
24007068:	68fb      	ldr	r3, [r7, #12]
2400706a:	2201      	movs	r2, #1
2400706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24007070:	68fb      	ldr	r3, [r7, #12]
24007072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007076:	b2db      	uxtb	r3, r3
24007078:	2b01      	cmp	r3, #1
2400707a:	f040 82fd 	bne.w	24007678 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2400707e:	68fb      	ldr	r3, [r7, #12]
24007080:	2202      	movs	r2, #2
24007082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24007086:	68fb      	ldr	r3, [r7, #12]
24007088:	2200      	movs	r2, #0
2400708a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400708c:	68fb      	ldr	r3, [r7, #12]
2400708e:	681b      	ldr	r3, [r3, #0]
24007090:	4a82      	ldr	r2, [pc, #520]	; (2400729c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24007092:	4293      	cmp	r3, r2
24007094:	d04a      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007096:	68fb      	ldr	r3, [r7, #12]
24007098:	681b      	ldr	r3, [r3, #0]
2400709a:	4a81      	ldr	r2, [pc, #516]	; (240072a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
2400709c:	4293      	cmp	r3, r2
2400709e:	d045      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070a0:	68fb      	ldr	r3, [r7, #12]
240070a2:	681b      	ldr	r3, [r3, #0]
240070a4:	4a7f      	ldr	r2, [pc, #508]	; (240072a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
240070a6:	4293      	cmp	r3, r2
240070a8:	d040      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070aa:	68fb      	ldr	r3, [r7, #12]
240070ac:	681b      	ldr	r3, [r3, #0]
240070ae:	4a7e      	ldr	r2, [pc, #504]	; (240072a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
240070b0:	4293      	cmp	r3, r2
240070b2:	d03b      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070b4:	68fb      	ldr	r3, [r7, #12]
240070b6:	681b      	ldr	r3, [r3, #0]
240070b8:	4a7c      	ldr	r2, [pc, #496]	; (240072ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
240070ba:	4293      	cmp	r3, r2
240070bc:	d036      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070be:	68fb      	ldr	r3, [r7, #12]
240070c0:	681b      	ldr	r3, [r3, #0]
240070c2:	4a7b      	ldr	r2, [pc, #492]	; (240072b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
240070c4:	4293      	cmp	r3, r2
240070c6:	d031      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070c8:	68fb      	ldr	r3, [r7, #12]
240070ca:	681b      	ldr	r3, [r3, #0]
240070cc:	4a79      	ldr	r2, [pc, #484]	; (240072b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
240070ce:	4293      	cmp	r3, r2
240070d0:	d02c      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070d2:	68fb      	ldr	r3, [r7, #12]
240070d4:	681b      	ldr	r3, [r3, #0]
240070d6:	4a78      	ldr	r2, [pc, #480]	; (240072b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
240070d8:	4293      	cmp	r3, r2
240070da:	d027      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070dc:	68fb      	ldr	r3, [r7, #12]
240070de:	681b      	ldr	r3, [r3, #0]
240070e0:	4a76      	ldr	r2, [pc, #472]	; (240072bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
240070e2:	4293      	cmp	r3, r2
240070e4:	d022      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070e6:	68fb      	ldr	r3, [r7, #12]
240070e8:	681b      	ldr	r3, [r3, #0]
240070ea:	4a75      	ldr	r2, [pc, #468]	; (240072c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
240070ec:	4293      	cmp	r3, r2
240070ee:	d01d      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070f0:	68fb      	ldr	r3, [r7, #12]
240070f2:	681b      	ldr	r3, [r3, #0]
240070f4:	4a73      	ldr	r2, [pc, #460]	; (240072c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
240070f6:	4293      	cmp	r3, r2
240070f8:	d018      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070fa:	68fb      	ldr	r3, [r7, #12]
240070fc:	681b      	ldr	r3, [r3, #0]
240070fe:	4a72      	ldr	r2, [pc, #456]	; (240072c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007100:	4293      	cmp	r3, r2
24007102:	d013      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007104:	68fb      	ldr	r3, [r7, #12]
24007106:	681b      	ldr	r3, [r3, #0]
24007108:	4a70      	ldr	r2, [pc, #448]	; (240072cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
2400710a:	4293      	cmp	r3, r2
2400710c:	d00e      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400710e:	68fb      	ldr	r3, [r7, #12]
24007110:	681b      	ldr	r3, [r3, #0]
24007112:	4a6f      	ldr	r2, [pc, #444]	; (240072d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007114:	4293      	cmp	r3, r2
24007116:	d009      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007118:	68fb      	ldr	r3, [r7, #12]
2400711a:	681b      	ldr	r3, [r3, #0]
2400711c:	4a6d      	ldr	r2, [pc, #436]	; (240072d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
2400711e:	4293      	cmp	r3, r2
24007120:	d004      	beq.n	2400712c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007122:	68fb      	ldr	r3, [r7, #12]
24007124:	681b      	ldr	r3, [r3, #0]
24007126:	4a6c      	ldr	r2, [pc, #432]	; (240072d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007128:	4293      	cmp	r3, r2
2400712a:	d101      	bne.n	24007130 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
2400712c:	2301      	movs	r3, #1
2400712e:	e000      	b.n	24007132 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
24007130:	2300      	movs	r3, #0
24007132:	2b00      	cmp	r3, #0
24007134:	d018      	beq.n	24007168 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24007136:	68fb      	ldr	r3, [r7, #12]
24007138:	681b      	ldr	r3, [r3, #0]
2400713a:	681a      	ldr	r2, [r3, #0]
2400713c:	68fb      	ldr	r3, [r7, #12]
2400713e:	681b      	ldr	r3, [r3, #0]
24007140:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24007144:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24007146:	68fb      	ldr	r3, [r7, #12]
24007148:	681b      	ldr	r3, [r3, #0]
2400714a:	683a      	ldr	r2, [r7, #0]
2400714c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
2400714e:	68fb      	ldr	r3, [r7, #12]
24007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24007152:	3308      	adds	r3, #8
24007154:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007156:	68fb      	ldr	r3, [r7, #12]
24007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400715a:	f003 031f 	and.w	r3, r3, #31
2400715e:	223f      	movs	r2, #63	; 0x3f
24007160:	409a      	lsls	r2, r3
24007162:	693b      	ldr	r3, [r7, #16]
24007164:	601a      	str	r2, [r3, #0]
24007166:	e018      	b.n	2400719a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007168:	68fb      	ldr	r3, [r7, #12]
2400716a:	681b      	ldr	r3, [r3, #0]
2400716c:	6819      	ldr	r1, [r3, #0]
2400716e:	68fb      	ldr	r3, [r7, #12]
24007170:	681a      	ldr	r2, [r3, #0]
24007172:	f248 0320 	movw	r3, #32800	; 0x8020
24007176:	430b      	orrs	r3, r1
24007178:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
2400717a:	68fb      	ldr	r3, [r7, #12]
2400717c:	681b      	ldr	r3, [r3, #0]
2400717e:	683a      	ldr	r2, [r7, #0]
24007180:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24007182:	68fb      	ldr	r3, [r7, #12]
24007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24007186:	3304      	adds	r3, #4
24007188:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400718a:	68fb      	ldr	r3, [r7, #12]
2400718c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400718e:	f003 031f 	and.w	r3, r3, #31
24007192:	2201      	movs	r2, #1
24007194:	409a      	lsls	r2, r3
24007196:	693b      	ldr	r3, [r7, #16]
24007198:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
2400719a:	6a3b      	ldr	r3, [r7, #32]
2400719c:	687a      	ldr	r2, [r7, #4]
2400719e:	68b9      	ldr	r1, [r7, #8]
240071a0:	68f8      	ldr	r0, [r7, #12]
240071a2:	f000 fd51 	bl	24007c48 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240071a6:	68fb      	ldr	r3, [r7, #12]
240071a8:	681b      	ldr	r3, [r3, #0]
240071aa:	4a3c      	ldr	r2, [pc, #240]	; (2400729c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
240071ac:	4293      	cmp	r3, r2
240071ae:	d072      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071b0:	68fb      	ldr	r3, [r7, #12]
240071b2:	681b      	ldr	r3, [r3, #0]
240071b4:	4a3a      	ldr	r2, [pc, #232]	; (240072a0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
240071b6:	4293      	cmp	r3, r2
240071b8:	d06d      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ba:	68fb      	ldr	r3, [r7, #12]
240071bc:	681b      	ldr	r3, [r3, #0]
240071be:	4a39      	ldr	r2, [pc, #228]	; (240072a4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
240071c0:	4293      	cmp	r3, r2
240071c2:	d068      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071c4:	68fb      	ldr	r3, [r7, #12]
240071c6:	681b      	ldr	r3, [r3, #0]
240071c8:	4a37      	ldr	r2, [pc, #220]	; (240072a8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
240071ca:	4293      	cmp	r3, r2
240071cc:	d063      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ce:	68fb      	ldr	r3, [r7, #12]
240071d0:	681b      	ldr	r3, [r3, #0]
240071d2:	4a36      	ldr	r2, [pc, #216]	; (240072ac <HAL_DMAEx_MultiBufferStart_IT+0x278>)
240071d4:	4293      	cmp	r3, r2
240071d6:	d05e      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071d8:	68fb      	ldr	r3, [r7, #12]
240071da:	681b      	ldr	r3, [r3, #0]
240071dc:	4a34      	ldr	r2, [pc, #208]	; (240072b0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
240071de:	4293      	cmp	r3, r2
240071e0:	d059      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071e2:	68fb      	ldr	r3, [r7, #12]
240071e4:	681b      	ldr	r3, [r3, #0]
240071e6:	4a33      	ldr	r2, [pc, #204]	; (240072b4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
240071e8:	4293      	cmp	r3, r2
240071ea:	d054      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ec:	68fb      	ldr	r3, [r7, #12]
240071ee:	681b      	ldr	r3, [r3, #0]
240071f0:	4a31      	ldr	r2, [pc, #196]	; (240072b8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
240071f2:	4293      	cmp	r3, r2
240071f4:	d04f      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071f6:	68fb      	ldr	r3, [r7, #12]
240071f8:	681b      	ldr	r3, [r3, #0]
240071fa:	4a30      	ldr	r2, [pc, #192]	; (240072bc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
240071fc:	4293      	cmp	r3, r2
240071fe:	d04a      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007200:	68fb      	ldr	r3, [r7, #12]
24007202:	681b      	ldr	r3, [r3, #0]
24007204:	4a2e      	ldr	r2, [pc, #184]	; (240072c0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24007206:	4293      	cmp	r3, r2
24007208:	d045      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400720a:	68fb      	ldr	r3, [r7, #12]
2400720c:	681b      	ldr	r3, [r3, #0]
2400720e:	4a2d      	ldr	r2, [pc, #180]	; (240072c4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24007210:	4293      	cmp	r3, r2
24007212:	d040      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007214:	68fb      	ldr	r3, [r7, #12]
24007216:	681b      	ldr	r3, [r3, #0]
24007218:	4a2b      	ldr	r2, [pc, #172]	; (240072c8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
2400721a:	4293      	cmp	r3, r2
2400721c:	d03b      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400721e:	68fb      	ldr	r3, [r7, #12]
24007220:	681b      	ldr	r3, [r3, #0]
24007222:	4a2a      	ldr	r2, [pc, #168]	; (240072cc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
24007224:	4293      	cmp	r3, r2
24007226:	d036      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007228:	68fb      	ldr	r3, [r7, #12]
2400722a:	681b      	ldr	r3, [r3, #0]
2400722c:	4a28      	ldr	r2, [pc, #160]	; (240072d0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
2400722e:	4293      	cmp	r3, r2
24007230:	d031      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007232:	68fb      	ldr	r3, [r7, #12]
24007234:	681b      	ldr	r3, [r3, #0]
24007236:	4a27      	ldr	r2, [pc, #156]	; (240072d4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007238:	4293      	cmp	r3, r2
2400723a:	d02c      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400723c:	68fb      	ldr	r3, [r7, #12]
2400723e:	681b      	ldr	r3, [r3, #0]
24007240:	4a25      	ldr	r2, [pc, #148]	; (240072d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007242:	4293      	cmp	r3, r2
24007244:	d027      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007246:	68fb      	ldr	r3, [r7, #12]
24007248:	681b      	ldr	r3, [r3, #0]
2400724a:	4a24      	ldr	r2, [pc, #144]	; (240072dc <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
2400724c:	4293      	cmp	r3, r2
2400724e:	d022      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007250:	68fb      	ldr	r3, [r7, #12]
24007252:	681b      	ldr	r3, [r3, #0]
24007254:	4a22      	ldr	r2, [pc, #136]	; (240072e0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
24007256:	4293      	cmp	r3, r2
24007258:	d01d      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400725a:	68fb      	ldr	r3, [r7, #12]
2400725c:	681b      	ldr	r3, [r3, #0]
2400725e:	4a21      	ldr	r2, [pc, #132]	; (240072e4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
24007260:	4293      	cmp	r3, r2
24007262:	d018      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007264:	68fb      	ldr	r3, [r7, #12]
24007266:	681b      	ldr	r3, [r3, #0]
24007268:	4a1f      	ldr	r2, [pc, #124]	; (240072e8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
2400726a:	4293      	cmp	r3, r2
2400726c:	d013      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400726e:	68fb      	ldr	r3, [r7, #12]
24007270:	681b      	ldr	r3, [r3, #0]
24007272:	4a1e      	ldr	r2, [pc, #120]	; (240072ec <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
24007274:	4293      	cmp	r3, r2
24007276:	d00e      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007278:	68fb      	ldr	r3, [r7, #12]
2400727a:	681b      	ldr	r3, [r3, #0]
2400727c:	4a1c      	ldr	r2, [pc, #112]	; (240072f0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
2400727e:	4293      	cmp	r3, r2
24007280:	d009      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007282:	68fb      	ldr	r3, [r7, #12]
24007284:	681b      	ldr	r3, [r3, #0]
24007286:	4a1b      	ldr	r2, [pc, #108]	; (240072f4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
24007288:	4293      	cmp	r3, r2
2400728a:	d004      	beq.n	24007296 <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400728c:	68fb      	ldr	r3, [r7, #12]
2400728e:	681b      	ldr	r3, [r3, #0]
24007290:	4a19      	ldr	r2, [pc, #100]	; (240072f8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
24007292:	4293      	cmp	r3, r2
24007294:	d132      	bne.n	240072fc <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
24007296:	2301      	movs	r3, #1
24007298:	e031      	b.n	240072fe <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
2400729a:	bf00      	nop
2400729c:	40020010 	.word	0x40020010
240072a0:	40020028 	.word	0x40020028
240072a4:	40020040 	.word	0x40020040
240072a8:	40020058 	.word	0x40020058
240072ac:	40020070 	.word	0x40020070
240072b0:	40020088 	.word	0x40020088
240072b4:	400200a0 	.word	0x400200a0
240072b8:	400200b8 	.word	0x400200b8
240072bc:	40020410 	.word	0x40020410
240072c0:	40020428 	.word	0x40020428
240072c4:	40020440 	.word	0x40020440
240072c8:	40020458 	.word	0x40020458
240072cc:	40020470 	.word	0x40020470
240072d0:	40020488 	.word	0x40020488
240072d4:	400204a0 	.word	0x400204a0
240072d8:	400204b8 	.word	0x400204b8
240072dc:	58025408 	.word	0x58025408
240072e0:	5802541c 	.word	0x5802541c
240072e4:	58025430 	.word	0x58025430
240072e8:	58025444 	.word	0x58025444
240072ec:	58025458 	.word	0x58025458
240072f0:	5802546c 	.word	0x5802546c
240072f4:	58025480 	.word	0x58025480
240072f8:	58025494 	.word	0x58025494
240072fc:	2300      	movs	r3, #0
240072fe:	2b00      	cmp	r3, #0
24007300:	d00d      	beq.n	2400731e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007302:	68fb      	ldr	r3, [r7, #12]
24007304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007306:	68fa      	ldr	r2, [r7, #12]
24007308:	6e92      	ldr	r2, [r2, #104]	; 0x68
2400730a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
2400730c:	68fb      	ldr	r3, [r7, #12]
2400730e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007310:	2b00      	cmp	r3, #0
24007312:	d004      	beq.n	2400731e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007314:	68fb      	ldr	r3, [r7, #12]
24007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007318:	68fa      	ldr	r2, [r7, #12]
2400731a:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400731c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400731e:	68fb      	ldr	r3, [r7, #12]
24007320:	681b      	ldr	r3, [r3, #0]
24007322:	4a3b      	ldr	r2, [pc, #236]	; (24007410 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
24007324:	4293      	cmp	r3, r2
24007326:	d04a      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007328:	68fb      	ldr	r3, [r7, #12]
2400732a:	681b      	ldr	r3, [r3, #0]
2400732c:	4a39      	ldr	r2, [pc, #228]	; (24007414 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
2400732e:	4293      	cmp	r3, r2
24007330:	d045      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007332:	68fb      	ldr	r3, [r7, #12]
24007334:	681b      	ldr	r3, [r3, #0]
24007336:	4a38      	ldr	r2, [pc, #224]	; (24007418 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
24007338:	4293      	cmp	r3, r2
2400733a:	d040      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400733c:	68fb      	ldr	r3, [r7, #12]
2400733e:	681b      	ldr	r3, [r3, #0]
24007340:	4a36      	ldr	r2, [pc, #216]	; (2400741c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
24007342:	4293      	cmp	r3, r2
24007344:	d03b      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007346:	68fb      	ldr	r3, [r7, #12]
24007348:	681b      	ldr	r3, [r3, #0]
2400734a:	4a35      	ldr	r2, [pc, #212]	; (24007420 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
2400734c:	4293      	cmp	r3, r2
2400734e:	d036      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007350:	68fb      	ldr	r3, [r7, #12]
24007352:	681b      	ldr	r3, [r3, #0]
24007354:	4a33      	ldr	r2, [pc, #204]	; (24007424 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
24007356:	4293      	cmp	r3, r2
24007358:	d031      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400735a:	68fb      	ldr	r3, [r7, #12]
2400735c:	681b      	ldr	r3, [r3, #0]
2400735e:	4a32      	ldr	r2, [pc, #200]	; (24007428 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
24007360:	4293      	cmp	r3, r2
24007362:	d02c      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007364:	68fb      	ldr	r3, [r7, #12]
24007366:	681b      	ldr	r3, [r3, #0]
24007368:	4a30      	ldr	r2, [pc, #192]	; (2400742c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
2400736a:	4293      	cmp	r3, r2
2400736c:	d027      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400736e:	68fb      	ldr	r3, [r7, #12]
24007370:	681b      	ldr	r3, [r3, #0]
24007372:	4a2f      	ldr	r2, [pc, #188]	; (24007430 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
24007374:	4293      	cmp	r3, r2
24007376:	d022      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007378:	68fb      	ldr	r3, [r7, #12]
2400737a:	681b      	ldr	r3, [r3, #0]
2400737c:	4a2d      	ldr	r2, [pc, #180]	; (24007434 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
2400737e:	4293      	cmp	r3, r2
24007380:	d01d      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007382:	68fb      	ldr	r3, [r7, #12]
24007384:	681b      	ldr	r3, [r3, #0]
24007386:	4a2c      	ldr	r2, [pc, #176]	; (24007438 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
24007388:	4293      	cmp	r3, r2
2400738a:	d018      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400738c:	68fb      	ldr	r3, [r7, #12]
2400738e:	681b      	ldr	r3, [r3, #0]
24007390:	4a2a      	ldr	r2, [pc, #168]	; (2400743c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
24007392:	4293      	cmp	r3, r2
24007394:	d013      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007396:	68fb      	ldr	r3, [r7, #12]
24007398:	681b      	ldr	r3, [r3, #0]
2400739a:	4a29      	ldr	r2, [pc, #164]	; (24007440 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
2400739c:	4293      	cmp	r3, r2
2400739e:	d00e      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240073a0:	68fb      	ldr	r3, [r7, #12]
240073a2:	681b      	ldr	r3, [r3, #0]
240073a4:	4a27      	ldr	r2, [pc, #156]	; (24007444 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
240073a6:	4293      	cmp	r3, r2
240073a8:	d009      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240073aa:	68fb      	ldr	r3, [r7, #12]
240073ac:	681b      	ldr	r3, [r3, #0]
240073ae:	4a26      	ldr	r2, [pc, #152]	; (24007448 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
240073b0:	4293      	cmp	r3, r2
240073b2:	d004      	beq.n	240073be <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240073b4:	68fb      	ldr	r3, [r7, #12]
240073b6:	681b      	ldr	r3, [r3, #0]
240073b8:	4a24      	ldr	r2, [pc, #144]	; (2400744c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
240073ba:	4293      	cmp	r3, r2
240073bc:	d101      	bne.n	240073c2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
240073be:	2301      	movs	r3, #1
240073c0:	e000      	b.n	240073c4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
240073c2:	2300      	movs	r3, #0
240073c4:	2b00      	cmp	r3, #0
240073c6:	d043      	beq.n	24007450 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240073c8:	68fb      	ldr	r3, [r7, #12]
240073ca:	681b      	ldr	r3, [r3, #0]
240073cc:	681b      	ldr	r3, [r3, #0]
240073ce:	f023 021e 	bic.w	r2, r3, #30
240073d2:	68fb      	ldr	r3, [r7, #12]
240073d4:	681b      	ldr	r3, [r3, #0]
240073d6:	f042 0216 	orr.w	r2, r2, #22
240073da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
240073dc:	68fb      	ldr	r3, [r7, #12]
240073de:	681b      	ldr	r3, [r3, #0]
240073e0:	695a      	ldr	r2, [r3, #20]
240073e2:	68fb      	ldr	r3, [r7, #12]
240073e4:	681b      	ldr	r3, [r3, #0]
240073e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
240073ea:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240073ec:	68fb      	ldr	r3, [r7, #12]
240073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240073f0:	2b00      	cmp	r3, #0
240073f2:	d103      	bne.n	240073fc <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
240073f4:	68fb      	ldr	r3, [r7, #12]
240073f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240073f8:	2b00      	cmp	r3, #0
240073fa:	d043      	beq.n	24007484 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240073fc:	68fb      	ldr	r3, [r7, #12]
240073fe:	681b      	ldr	r3, [r3, #0]
24007400:	681a      	ldr	r2, [r3, #0]
24007402:	68fb      	ldr	r3, [r7, #12]
24007404:	681b      	ldr	r3, [r3, #0]
24007406:	f042 0208 	orr.w	r2, r2, #8
2400740a:	601a      	str	r2, [r3, #0]
2400740c:	e03a      	b.n	24007484 <HAL_DMAEx_MultiBufferStart_IT+0x450>
2400740e:	bf00      	nop
24007410:	40020010 	.word	0x40020010
24007414:	40020028 	.word	0x40020028
24007418:	40020040 	.word	0x40020040
2400741c:	40020058 	.word	0x40020058
24007420:	40020070 	.word	0x40020070
24007424:	40020088 	.word	0x40020088
24007428:	400200a0 	.word	0x400200a0
2400742c:	400200b8 	.word	0x400200b8
24007430:	40020410 	.word	0x40020410
24007434:	40020428 	.word	0x40020428
24007438:	40020440 	.word	0x40020440
2400743c:	40020458 	.word	0x40020458
24007440:	40020470 	.word	0x40020470
24007444:	40020488 	.word	0x40020488
24007448:	400204a0 	.word	0x400204a0
2400744c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24007450:	68fb      	ldr	r3, [r7, #12]
24007452:	681b      	ldr	r3, [r3, #0]
24007454:	681b      	ldr	r3, [r3, #0]
24007456:	f023 020e 	bic.w	r2, r3, #14
2400745a:	68fb      	ldr	r3, [r7, #12]
2400745c:	681b      	ldr	r3, [r3, #0]
2400745e:	f042 020a 	orr.w	r2, r2, #10
24007462:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24007464:	68fb      	ldr	r3, [r7, #12]
24007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24007468:	2b00      	cmp	r3, #0
2400746a:	d103      	bne.n	24007474 <HAL_DMAEx_MultiBufferStart_IT+0x440>
2400746c:	68fb      	ldr	r3, [r7, #12]
2400746e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24007470:	2b00      	cmp	r3, #0
24007472:	d007      	beq.n	24007484 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24007474:	68fb      	ldr	r3, [r7, #12]
24007476:	681b      	ldr	r3, [r3, #0]
24007478:	681a      	ldr	r2, [r3, #0]
2400747a:	68fb      	ldr	r3, [r7, #12]
2400747c:	681b      	ldr	r3, [r3, #0]
2400747e:	f042 0204 	orr.w	r2, r2, #4
24007482:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24007484:	68fb      	ldr	r3, [r7, #12]
24007486:	681b      	ldr	r3, [r3, #0]
24007488:	4a81      	ldr	r2, [pc, #516]	; (24007690 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
2400748a:	4293      	cmp	r3, r2
2400748c:	d072      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400748e:	68fb      	ldr	r3, [r7, #12]
24007490:	681b      	ldr	r3, [r3, #0]
24007492:	4a80      	ldr	r2, [pc, #512]	; (24007694 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
24007494:	4293      	cmp	r3, r2
24007496:	d06d      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007498:	68fb      	ldr	r3, [r7, #12]
2400749a:	681b      	ldr	r3, [r3, #0]
2400749c:	4a7e      	ldr	r2, [pc, #504]	; (24007698 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
2400749e:	4293      	cmp	r3, r2
240074a0:	d068      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074a2:	68fb      	ldr	r3, [r7, #12]
240074a4:	681b      	ldr	r3, [r3, #0]
240074a6:	4a7d      	ldr	r2, [pc, #500]	; (2400769c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
240074a8:	4293      	cmp	r3, r2
240074aa:	d063      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074ac:	68fb      	ldr	r3, [r7, #12]
240074ae:	681b      	ldr	r3, [r3, #0]
240074b0:	4a7b      	ldr	r2, [pc, #492]	; (240076a0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
240074b2:	4293      	cmp	r3, r2
240074b4:	d05e      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074b6:	68fb      	ldr	r3, [r7, #12]
240074b8:	681b      	ldr	r3, [r3, #0]
240074ba:	4a7a      	ldr	r2, [pc, #488]	; (240076a4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240074bc:	4293      	cmp	r3, r2
240074be:	d059      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074c0:	68fb      	ldr	r3, [r7, #12]
240074c2:	681b      	ldr	r3, [r3, #0]
240074c4:	4a78      	ldr	r2, [pc, #480]	; (240076a8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240074c6:	4293      	cmp	r3, r2
240074c8:	d054      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074ca:	68fb      	ldr	r3, [r7, #12]
240074cc:	681b      	ldr	r3, [r3, #0]
240074ce:	4a77      	ldr	r2, [pc, #476]	; (240076ac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240074d0:	4293      	cmp	r3, r2
240074d2:	d04f      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074d4:	68fb      	ldr	r3, [r7, #12]
240074d6:	681b      	ldr	r3, [r3, #0]
240074d8:	4a75      	ldr	r2, [pc, #468]	; (240076b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
240074da:	4293      	cmp	r3, r2
240074dc:	d04a      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074de:	68fb      	ldr	r3, [r7, #12]
240074e0:	681b      	ldr	r3, [r3, #0]
240074e2:	4a74      	ldr	r2, [pc, #464]	; (240076b4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
240074e4:	4293      	cmp	r3, r2
240074e6:	d045      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074e8:	68fb      	ldr	r3, [r7, #12]
240074ea:	681b      	ldr	r3, [r3, #0]
240074ec:	4a72      	ldr	r2, [pc, #456]	; (240076b8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
240074ee:	4293      	cmp	r3, r2
240074f0:	d040      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074f2:	68fb      	ldr	r3, [r7, #12]
240074f4:	681b      	ldr	r3, [r3, #0]
240074f6:	4a71      	ldr	r2, [pc, #452]	; (240076bc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
240074f8:	4293      	cmp	r3, r2
240074fa:	d03b      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074fc:	68fb      	ldr	r3, [r7, #12]
240074fe:	681b      	ldr	r3, [r3, #0]
24007500:	4a6f      	ldr	r2, [pc, #444]	; (240076c0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
24007502:	4293      	cmp	r3, r2
24007504:	d036      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007506:	68fb      	ldr	r3, [r7, #12]
24007508:	681b      	ldr	r3, [r3, #0]
2400750a:	4a6e      	ldr	r2, [pc, #440]	; (240076c4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
2400750c:	4293      	cmp	r3, r2
2400750e:	d031      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007510:	68fb      	ldr	r3, [r7, #12]
24007512:	681b      	ldr	r3, [r3, #0]
24007514:	4a6c      	ldr	r2, [pc, #432]	; (240076c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
24007516:	4293      	cmp	r3, r2
24007518:	d02c      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400751a:	68fb      	ldr	r3, [r7, #12]
2400751c:	681b      	ldr	r3, [r3, #0]
2400751e:	4a6b      	ldr	r2, [pc, #428]	; (240076cc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24007520:	4293      	cmp	r3, r2
24007522:	d027      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007524:	68fb      	ldr	r3, [r7, #12]
24007526:	681b      	ldr	r3, [r3, #0]
24007528:	4a69      	ldr	r2, [pc, #420]	; (240076d0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
2400752a:	4293      	cmp	r3, r2
2400752c:	d022      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400752e:	68fb      	ldr	r3, [r7, #12]
24007530:	681b      	ldr	r3, [r3, #0]
24007532:	4a68      	ldr	r2, [pc, #416]	; (240076d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
24007534:	4293      	cmp	r3, r2
24007536:	d01d      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007538:	68fb      	ldr	r3, [r7, #12]
2400753a:	681b      	ldr	r3, [r3, #0]
2400753c:	4a66      	ldr	r2, [pc, #408]	; (240076d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
2400753e:	4293      	cmp	r3, r2
24007540:	d018      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007542:	68fb      	ldr	r3, [r7, #12]
24007544:	681b      	ldr	r3, [r3, #0]
24007546:	4a65      	ldr	r2, [pc, #404]	; (240076dc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
24007548:	4293      	cmp	r3, r2
2400754a:	d013      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400754c:	68fb      	ldr	r3, [r7, #12]
2400754e:	681b      	ldr	r3, [r3, #0]
24007550:	4a63      	ldr	r2, [pc, #396]	; (240076e0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
24007552:	4293      	cmp	r3, r2
24007554:	d00e      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007556:	68fb      	ldr	r3, [r7, #12]
24007558:	681b      	ldr	r3, [r3, #0]
2400755a:	4a62      	ldr	r2, [pc, #392]	; (240076e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
2400755c:	4293      	cmp	r3, r2
2400755e:	d009      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007560:	68fb      	ldr	r3, [r7, #12]
24007562:	681b      	ldr	r3, [r3, #0]
24007564:	4a60      	ldr	r2, [pc, #384]	; (240076e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
24007566:	4293      	cmp	r3, r2
24007568:	d004      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400756a:	68fb      	ldr	r3, [r7, #12]
2400756c:	681b      	ldr	r3, [r3, #0]
2400756e:	4a5f      	ldr	r2, [pc, #380]	; (240076ec <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
24007570:	4293      	cmp	r3, r2
24007572:	d101      	bne.n	24007578 <HAL_DMAEx_MultiBufferStart_IT+0x544>
24007574:	2301      	movs	r3, #1
24007576:	e000      	b.n	2400757a <HAL_DMAEx_MultiBufferStart_IT+0x546>
24007578:	2300      	movs	r3, #0
2400757a:	2b00      	cmp	r3, #0
2400757c:	d01a      	beq.n	240075b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2400757e:	68fb      	ldr	r3, [r7, #12]
24007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007582:	681b      	ldr	r3, [r3, #0]
24007584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24007588:	2b00      	cmp	r3, #0
2400758a:	d007      	beq.n	2400759c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
2400758c:	68fb      	ldr	r3, [r7, #12]
2400758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007590:	681a      	ldr	r2, [r3, #0]
24007592:	68fb      	ldr	r3, [r7, #12]
24007594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400759a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
2400759c:	68fb      	ldr	r3, [r7, #12]
2400759e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240075a0:	2b00      	cmp	r3, #0
240075a2:	d007      	beq.n	240075b4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240075a4:	68fb      	ldr	r3, [r7, #12]
240075a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240075a8:	681a      	ldr	r2, [r3, #0]
240075aa:	68fb      	ldr	r3, [r7, #12]
240075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240075ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240075b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
240075b4:	68fb      	ldr	r3, [r7, #12]
240075b6:	681b      	ldr	r3, [r3, #0]
240075b8:	4a35      	ldr	r2, [pc, #212]	; (24007690 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
240075ba:	4293      	cmp	r3, r2
240075bc:	d04a      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075be:	68fb      	ldr	r3, [r7, #12]
240075c0:	681b      	ldr	r3, [r3, #0]
240075c2:	4a34      	ldr	r2, [pc, #208]	; (24007694 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
240075c4:	4293      	cmp	r3, r2
240075c6:	d045      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075c8:	68fb      	ldr	r3, [r7, #12]
240075ca:	681b      	ldr	r3, [r3, #0]
240075cc:	4a32      	ldr	r2, [pc, #200]	; (24007698 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
240075ce:	4293      	cmp	r3, r2
240075d0:	d040      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075d2:	68fb      	ldr	r3, [r7, #12]
240075d4:	681b      	ldr	r3, [r3, #0]
240075d6:	4a31      	ldr	r2, [pc, #196]	; (2400769c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
240075d8:	4293      	cmp	r3, r2
240075da:	d03b      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075dc:	68fb      	ldr	r3, [r7, #12]
240075de:	681b      	ldr	r3, [r3, #0]
240075e0:	4a2f      	ldr	r2, [pc, #188]	; (240076a0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
240075e2:	4293      	cmp	r3, r2
240075e4:	d036      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075e6:	68fb      	ldr	r3, [r7, #12]
240075e8:	681b      	ldr	r3, [r3, #0]
240075ea:	4a2e      	ldr	r2, [pc, #184]	; (240076a4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240075ec:	4293      	cmp	r3, r2
240075ee:	d031      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075f0:	68fb      	ldr	r3, [r7, #12]
240075f2:	681b      	ldr	r3, [r3, #0]
240075f4:	4a2c      	ldr	r2, [pc, #176]	; (240076a8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240075f6:	4293      	cmp	r3, r2
240075f8:	d02c      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075fa:	68fb      	ldr	r3, [r7, #12]
240075fc:	681b      	ldr	r3, [r3, #0]
240075fe:	4a2b      	ldr	r2, [pc, #172]	; (240076ac <HAL_DMAEx_MultiBufferStart_IT+0x678>)
24007600:	4293      	cmp	r3, r2
24007602:	d027      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007604:	68fb      	ldr	r3, [r7, #12]
24007606:	681b      	ldr	r3, [r3, #0]
24007608:	4a29      	ldr	r2, [pc, #164]	; (240076b0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
2400760a:	4293      	cmp	r3, r2
2400760c:	d022      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400760e:	68fb      	ldr	r3, [r7, #12]
24007610:	681b      	ldr	r3, [r3, #0]
24007612:	4a28      	ldr	r2, [pc, #160]	; (240076b4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
24007614:	4293      	cmp	r3, r2
24007616:	d01d      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007618:	68fb      	ldr	r3, [r7, #12]
2400761a:	681b      	ldr	r3, [r3, #0]
2400761c:	4a26      	ldr	r2, [pc, #152]	; (240076b8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
2400761e:	4293      	cmp	r3, r2
24007620:	d018      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007622:	68fb      	ldr	r3, [r7, #12]
24007624:	681b      	ldr	r3, [r3, #0]
24007626:	4a25      	ldr	r2, [pc, #148]	; (240076bc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
24007628:	4293      	cmp	r3, r2
2400762a:	d013      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400762c:	68fb      	ldr	r3, [r7, #12]
2400762e:	681b      	ldr	r3, [r3, #0]
24007630:	4a23      	ldr	r2, [pc, #140]	; (240076c0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
24007632:	4293      	cmp	r3, r2
24007634:	d00e      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007636:	68fb      	ldr	r3, [r7, #12]
24007638:	681b      	ldr	r3, [r3, #0]
2400763a:	4a22      	ldr	r2, [pc, #136]	; (240076c4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
2400763c:	4293      	cmp	r3, r2
2400763e:	d009      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007640:	68fb      	ldr	r3, [r7, #12]
24007642:	681b      	ldr	r3, [r3, #0]
24007644:	4a20      	ldr	r2, [pc, #128]	; (240076c8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
24007646:	4293      	cmp	r3, r2
24007648:	d004      	beq.n	24007654 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400764a:	68fb      	ldr	r3, [r7, #12]
2400764c:	681b      	ldr	r3, [r3, #0]
2400764e:	4a1f      	ldr	r2, [pc, #124]	; (240076cc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24007650:	4293      	cmp	r3, r2
24007652:	d108      	bne.n	24007666 <HAL_DMAEx_MultiBufferStart_IT+0x632>
24007654:	68fb      	ldr	r3, [r7, #12]
24007656:	681b      	ldr	r3, [r3, #0]
24007658:	681a      	ldr	r2, [r3, #0]
2400765a:	68fb      	ldr	r3, [r7, #12]
2400765c:	681b      	ldr	r3, [r3, #0]
2400765e:	f042 0201 	orr.w	r2, r2, #1
24007662:	601a      	str	r2, [r3, #0]
24007664:	e00e      	b.n	24007684 <HAL_DMAEx_MultiBufferStart_IT+0x650>
24007666:	68fb      	ldr	r3, [r7, #12]
24007668:	681b      	ldr	r3, [r3, #0]
2400766a:	681a      	ldr	r2, [r3, #0]
2400766c:	68fb      	ldr	r3, [r7, #12]
2400766e:	681b      	ldr	r3, [r3, #0]
24007670:	f042 0201 	orr.w	r2, r2, #1
24007674:	601a      	str	r2, [r3, #0]
24007676:	e005      	b.n	24007684 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007678:	68fb      	ldr	r3, [r7, #12]
2400767a:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400767e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
24007680:	2301      	movs	r3, #1
24007682:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24007684:	7dfb      	ldrb	r3, [r7, #23]
}
24007686:	4618      	mov	r0, r3
24007688:	3718      	adds	r7, #24
2400768a:	46bd      	mov	sp, r7
2400768c:	bd80      	pop	{r7, pc}
2400768e:	bf00      	nop
24007690:	40020010 	.word	0x40020010
24007694:	40020028 	.word	0x40020028
24007698:	40020040 	.word	0x40020040
2400769c:	40020058 	.word	0x40020058
240076a0:	40020070 	.word	0x40020070
240076a4:	40020088 	.word	0x40020088
240076a8:	400200a0 	.word	0x400200a0
240076ac:	400200b8 	.word	0x400200b8
240076b0:	40020410 	.word	0x40020410
240076b4:	40020428 	.word	0x40020428
240076b8:	40020440 	.word	0x40020440
240076bc:	40020458 	.word	0x40020458
240076c0:	40020470 	.word	0x40020470
240076c4:	40020488 	.word	0x40020488
240076c8:	400204a0 	.word	0x400204a0
240076cc:	400204b8 	.word	0x400204b8
240076d0:	58025408 	.word	0x58025408
240076d4:	5802541c 	.word	0x5802541c
240076d8:	58025430 	.word	0x58025430
240076dc:	58025444 	.word	0x58025444
240076e0:	58025458 	.word	0x58025458
240076e4:	5802546c 	.word	0x5802546c
240076e8:	58025480 	.word	0x58025480
240076ec:	58025494 	.word	0x58025494

240076f0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
240076f0:	b480      	push	{r7}
240076f2:	b085      	sub	sp, #20
240076f4:	af00      	add	r7, sp, #0
240076f6:	60f8      	str	r0, [r7, #12]
240076f8:	60b9      	str	r1, [r7, #8]
240076fa:	4613      	mov	r3, r2
240076fc:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240076fe:	68fb      	ldr	r3, [r7, #12]
24007700:	681b      	ldr	r3, [r3, #0]
24007702:	4a39      	ldr	r2, [pc, #228]	; (240077e8 <HAL_DMAEx_ChangeMemory+0xf8>)
24007704:	4293      	cmp	r3, r2
24007706:	d04a      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007708:	68fb      	ldr	r3, [r7, #12]
2400770a:	681b      	ldr	r3, [r3, #0]
2400770c:	4a37      	ldr	r2, [pc, #220]	; (240077ec <HAL_DMAEx_ChangeMemory+0xfc>)
2400770e:	4293      	cmp	r3, r2
24007710:	d045      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007712:	68fb      	ldr	r3, [r7, #12]
24007714:	681b      	ldr	r3, [r3, #0]
24007716:	4a36      	ldr	r2, [pc, #216]	; (240077f0 <HAL_DMAEx_ChangeMemory+0x100>)
24007718:	4293      	cmp	r3, r2
2400771a:	d040      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
2400771c:	68fb      	ldr	r3, [r7, #12]
2400771e:	681b      	ldr	r3, [r3, #0]
24007720:	4a34      	ldr	r2, [pc, #208]	; (240077f4 <HAL_DMAEx_ChangeMemory+0x104>)
24007722:	4293      	cmp	r3, r2
24007724:	d03b      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007726:	68fb      	ldr	r3, [r7, #12]
24007728:	681b      	ldr	r3, [r3, #0]
2400772a:	4a33      	ldr	r2, [pc, #204]	; (240077f8 <HAL_DMAEx_ChangeMemory+0x108>)
2400772c:	4293      	cmp	r3, r2
2400772e:	d036      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007730:	68fb      	ldr	r3, [r7, #12]
24007732:	681b      	ldr	r3, [r3, #0]
24007734:	4a31      	ldr	r2, [pc, #196]	; (240077fc <HAL_DMAEx_ChangeMemory+0x10c>)
24007736:	4293      	cmp	r3, r2
24007738:	d031      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
2400773a:	68fb      	ldr	r3, [r7, #12]
2400773c:	681b      	ldr	r3, [r3, #0]
2400773e:	4a30      	ldr	r2, [pc, #192]	; (24007800 <HAL_DMAEx_ChangeMemory+0x110>)
24007740:	4293      	cmp	r3, r2
24007742:	d02c      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007744:	68fb      	ldr	r3, [r7, #12]
24007746:	681b      	ldr	r3, [r3, #0]
24007748:	4a2e      	ldr	r2, [pc, #184]	; (24007804 <HAL_DMAEx_ChangeMemory+0x114>)
2400774a:	4293      	cmp	r3, r2
2400774c:	d027      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
2400774e:	68fb      	ldr	r3, [r7, #12]
24007750:	681b      	ldr	r3, [r3, #0]
24007752:	4a2d      	ldr	r2, [pc, #180]	; (24007808 <HAL_DMAEx_ChangeMemory+0x118>)
24007754:	4293      	cmp	r3, r2
24007756:	d022      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007758:	68fb      	ldr	r3, [r7, #12]
2400775a:	681b      	ldr	r3, [r3, #0]
2400775c:	4a2b      	ldr	r2, [pc, #172]	; (2400780c <HAL_DMAEx_ChangeMemory+0x11c>)
2400775e:	4293      	cmp	r3, r2
24007760:	d01d      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007762:	68fb      	ldr	r3, [r7, #12]
24007764:	681b      	ldr	r3, [r3, #0]
24007766:	4a2a      	ldr	r2, [pc, #168]	; (24007810 <HAL_DMAEx_ChangeMemory+0x120>)
24007768:	4293      	cmp	r3, r2
2400776a:	d018      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
2400776c:	68fb      	ldr	r3, [r7, #12]
2400776e:	681b      	ldr	r3, [r3, #0]
24007770:	4a28      	ldr	r2, [pc, #160]	; (24007814 <HAL_DMAEx_ChangeMemory+0x124>)
24007772:	4293      	cmp	r3, r2
24007774:	d013      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007776:	68fb      	ldr	r3, [r7, #12]
24007778:	681b      	ldr	r3, [r3, #0]
2400777a:	4a27      	ldr	r2, [pc, #156]	; (24007818 <HAL_DMAEx_ChangeMemory+0x128>)
2400777c:	4293      	cmp	r3, r2
2400777e:	d00e      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007780:	68fb      	ldr	r3, [r7, #12]
24007782:	681b      	ldr	r3, [r3, #0]
24007784:	4a25      	ldr	r2, [pc, #148]	; (2400781c <HAL_DMAEx_ChangeMemory+0x12c>)
24007786:	4293      	cmp	r3, r2
24007788:	d009      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
2400778a:	68fb      	ldr	r3, [r7, #12]
2400778c:	681b      	ldr	r3, [r3, #0]
2400778e:	4a24      	ldr	r2, [pc, #144]	; (24007820 <HAL_DMAEx_ChangeMemory+0x130>)
24007790:	4293      	cmp	r3, r2
24007792:	d004      	beq.n	2400779e <HAL_DMAEx_ChangeMemory+0xae>
24007794:	68fb      	ldr	r3, [r7, #12]
24007796:	681b      	ldr	r3, [r3, #0]
24007798:	4a22      	ldr	r2, [pc, #136]	; (24007824 <HAL_DMAEx_ChangeMemory+0x134>)
2400779a:	4293      	cmp	r3, r2
2400779c:	d101      	bne.n	240077a2 <HAL_DMAEx_ChangeMemory+0xb2>
2400779e:	2301      	movs	r3, #1
240077a0:	e000      	b.n	240077a4 <HAL_DMAEx_ChangeMemory+0xb4>
240077a2:	2300      	movs	r3, #0
240077a4:	2b00      	cmp	r3, #0
240077a6:	d00c      	beq.n	240077c2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
240077a8:	79fb      	ldrb	r3, [r7, #7]
240077aa:	2b00      	cmp	r3, #0
240077ac:	d104      	bne.n	240077b8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
240077ae:	68fb      	ldr	r3, [r7, #12]
240077b0:	681b      	ldr	r3, [r3, #0]
240077b2:	68ba      	ldr	r2, [r7, #8]
240077b4:	60da      	str	r2, [r3, #12]
240077b6:	e010      	b.n	240077da <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
240077b8:	68fb      	ldr	r3, [r7, #12]
240077ba:	681b      	ldr	r3, [r3, #0]
240077bc:	68ba      	ldr	r2, [r7, #8]
240077be:	611a      	str	r2, [r3, #16]
240077c0:	e00b      	b.n	240077da <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
240077c2:	79fb      	ldrb	r3, [r7, #7]
240077c4:	2b00      	cmp	r3, #0
240077c6:	d104      	bne.n	240077d2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
240077c8:	68fb      	ldr	r3, [r7, #12]
240077ca:	681b      	ldr	r3, [r3, #0]
240077cc:	68ba      	ldr	r2, [r7, #8]
240077ce:	60da      	str	r2, [r3, #12]
240077d0:	e003      	b.n	240077da <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
240077d2:	68fb      	ldr	r3, [r7, #12]
240077d4:	681b      	ldr	r3, [r3, #0]
240077d6:	68ba      	ldr	r2, [r7, #8]
240077d8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
240077da:	2300      	movs	r3, #0
}
240077dc:	4618      	mov	r0, r3
240077de:	3714      	adds	r7, #20
240077e0:	46bd      	mov	sp, r7
240077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240077e6:	4770      	bx	lr
240077e8:	40020010 	.word	0x40020010
240077ec:	40020028 	.word	0x40020028
240077f0:	40020040 	.word	0x40020040
240077f4:	40020058 	.word	0x40020058
240077f8:	40020070 	.word	0x40020070
240077fc:	40020088 	.word	0x40020088
24007800:	400200a0 	.word	0x400200a0
24007804:	400200b8 	.word	0x400200b8
24007808:	40020410 	.word	0x40020410
2400780c:	40020428 	.word	0x40020428
24007810:	40020440 	.word	0x40020440
24007814:	40020458 	.word	0x40020458
24007818:	40020470 	.word	0x40020470
2400781c:	40020488 	.word	0x40020488
24007820:	400204a0 	.word	0x400204a0
24007824:	400204b8 	.word	0x400204b8

24007828 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24007828:	b480      	push	{r7}
2400782a:	b085      	sub	sp, #20
2400782c:	af00      	add	r7, sp, #0
2400782e:	6078      	str	r0, [r7, #4]
24007830:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
24007832:	2300      	movs	r3, #0
24007834:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
24007836:	2300      	movs	r3, #0
24007838:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
2400783a:	683b      	ldr	r3, [r7, #0]
2400783c:	7a1b      	ldrb	r3, [r3, #8]
2400783e:	2b01      	cmp	r3, #1
24007840:	d155      	bne.n	240078ee <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007842:	687b      	ldr	r3, [r7, #4]
24007844:	681b      	ldr	r3, [r3, #0]
24007846:	4a4b      	ldr	r2, [pc, #300]	; (24007974 <HAL_DMAEx_ConfigMuxSync+0x14c>)
24007848:	4293      	cmp	r3, r2
2400784a:	d049      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400784c:	687b      	ldr	r3, [r7, #4]
2400784e:	681b      	ldr	r3, [r3, #0]
24007850:	4a49      	ldr	r2, [pc, #292]	; (24007978 <HAL_DMAEx_ConfigMuxSync+0x150>)
24007852:	4293      	cmp	r3, r2
24007854:	d044      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007856:	687b      	ldr	r3, [r7, #4]
24007858:	681b      	ldr	r3, [r3, #0]
2400785a:	4a48      	ldr	r2, [pc, #288]	; (2400797c <HAL_DMAEx_ConfigMuxSync+0x154>)
2400785c:	4293      	cmp	r3, r2
2400785e:	d03f      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007860:	687b      	ldr	r3, [r7, #4]
24007862:	681b      	ldr	r3, [r3, #0]
24007864:	4a46      	ldr	r2, [pc, #280]	; (24007980 <HAL_DMAEx_ConfigMuxSync+0x158>)
24007866:	4293      	cmp	r3, r2
24007868:	d03a      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400786a:	687b      	ldr	r3, [r7, #4]
2400786c:	681b      	ldr	r3, [r3, #0]
2400786e:	4a45      	ldr	r2, [pc, #276]	; (24007984 <HAL_DMAEx_ConfigMuxSync+0x15c>)
24007870:	4293      	cmp	r3, r2
24007872:	d035      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007874:	687b      	ldr	r3, [r7, #4]
24007876:	681b      	ldr	r3, [r3, #0]
24007878:	4a43      	ldr	r2, [pc, #268]	; (24007988 <HAL_DMAEx_ConfigMuxSync+0x160>)
2400787a:	4293      	cmp	r3, r2
2400787c:	d030      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400787e:	687b      	ldr	r3, [r7, #4]
24007880:	681b      	ldr	r3, [r3, #0]
24007882:	4a42      	ldr	r2, [pc, #264]	; (2400798c <HAL_DMAEx_ConfigMuxSync+0x164>)
24007884:	4293      	cmp	r3, r2
24007886:	d02b      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007888:	687b      	ldr	r3, [r7, #4]
2400788a:	681b      	ldr	r3, [r3, #0]
2400788c:	4a40      	ldr	r2, [pc, #256]	; (24007990 <HAL_DMAEx_ConfigMuxSync+0x168>)
2400788e:	4293      	cmp	r3, r2
24007890:	d026      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007892:	687b      	ldr	r3, [r7, #4]
24007894:	681b      	ldr	r3, [r3, #0]
24007896:	4a3f      	ldr	r2, [pc, #252]	; (24007994 <HAL_DMAEx_ConfigMuxSync+0x16c>)
24007898:	4293      	cmp	r3, r2
2400789a:	d021      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400789c:	687b      	ldr	r3, [r7, #4]
2400789e:	681b      	ldr	r3, [r3, #0]
240078a0:	4a3d      	ldr	r2, [pc, #244]	; (24007998 <HAL_DMAEx_ConfigMuxSync+0x170>)
240078a2:	4293      	cmp	r3, r2
240078a4:	d01c      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078a6:	687b      	ldr	r3, [r7, #4]
240078a8:	681b      	ldr	r3, [r3, #0]
240078aa:	4a3c      	ldr	r2, [pc, #240]	; (2400799c <HAL_DMAEx_ConfigMuxSync+0x174>)
240078ac:	4293      	cmp	r3, r2
240078ae:	d017      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078b0:	687b      	ldr	r3, [r7, #4]
240078b2:	681b      	ldr	r3, [r3, #0]
240078b4:	4a3a      	ldr	r2, [pc, #232]	; (240079a0 <HAL_DMAEx_ConfigMuxSync+0x178>)
240078b6:	4293      	cmp	r3, r2
240078b8:	d012      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078ba:	687b      	ldr	r3, [r7, #4]
240078bc:	681b      	ldr	r3, [r3, #0]
240078be:	4a39      	ldr	r2, [pc, #228]	; (240079a4 <HAL_DMAEx_ConfigMuxSync+0x17c>)
240078c0:	4293      	cmp	r3, r2
240078c2:	d00d      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078c4:	687b      	ldr	r3, [r7, #4]
240078c6:	681b      	ldr	r3, [r3, #0]
240078c8:	4a37      	ldr	r2, [pc, #220]	; (240079a8 <HAL_DMAEx_ConfigMuxSync+0x180>)
240078ca:	4293      	cmp	r3, r2
240078cc:	d008      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078ce:	687b      	ldr	r3, [r7, #4]
240078d0:	681b      	ldr	r3, [r3, #0]
240078d2:	4a36      	ldr	r2, [pc, #216]	; (240079ac <HAL_DMAEx_ConfigMuxSync+0x184>)
240078d4:	4293      	cmp	r3, r2
240078d6:	d003      	beq.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078d8:	687b      	ldr	r3, [r7, #4]
240078da:	681b      	ldr	r3, [r3, #0]
240078dc:	4a34      	ldr	r2, [pc, #208]	; (240079b0 <HAL_DMAEx_ConfigMuxSync+0x188>)
240078de:	4293      	cmp	r3, r2
240078e0:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
240078e2:	683b      	ldr	r3, [r7, #0]
240078e4:	681b      	ldr	r3, [r3, #0]
240078e6:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
240078e8:	683b      	ldr	r3, [r7, #0]
240078ea:	685b      	ldr	r3, [r3, #4]
240078ec:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
240078ee:	687b      	ldr	r3, [r7, #4]
240078f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240078f4:	b2db      	uxtb	r3, r3
240078f6:	2b01      	cmp	r3, #1
240078f8:	d131      	bne.n	2400795e <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
240078fa:	687b      	ldr	r3, [r7, #4]
240078fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007900:	2b01      	cmp	r3, #1
24007902:	d101      	bne.n	24007908 <HAL_DMAEx_ConfigMuxSync+0xe0>
24007904:	2302      	movs	r3, #2
24007906:	e02f      	b.n	24007968 <HAL_DMAEx_ConfigMuxSync+0x140>
24007908:	687b      	ldr	r3, [r7, #4]
2400790a:	2201      	movs	r2, #1
2400790c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007910:	687b      	ldr	r3, [r7, #4]
24007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007914:	681a      	ldr	r2, [r3, #0]
24007916:	687b      	ldr	r3, [r7, #4]
24007918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400791a:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
2400791e:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007920:	687b      	ldr	r3, [r7, #4]
24007922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007924:	681b      	ldr	r3, [r3, #0]
24007926:	b2d9      	uxtb	r1, r3
24007928:	68fb      	ldr	r3, [r7, #12]
2400792a:	061a      	lsls	r2, r3, #24
2400792c:	683b      	ldr	r3, [r7, #0]
2400792e:	68db      	ldr	r3, [r3, #12]
24007930:	3b01      	subs	r3, #1
24007932:	04db      	lsls	r3, r3, #19
24007934:	431a      	orrs	r2, r3
24007936:	68bb      	ldr	r3, [r7, #8]
24007938:	431a      	orrs	r2, r3
2400793a:	683b      	ldr	r3, [r7, #0]
2400793c:	7a1b      	ldrb	r3, [r3, #8]
2400793e:	041b      	lsls	r3, r3, #16
24007940:	431a      	orrs	r2, r3
24007942:	683b      	ldr	r3, [r7, #0]
24007944:	7a5b      	ldrb	r3, [r3, #9]
24007946:	025b      	lsls	r3, r3, #9
24007948:	431a      	orrs	r2, r3
2400794a:	687b      	ldr	r3, [r7, #4]
2400794c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400794e:	430a      	orrs	r2, r1
24007950:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24007952:	687b      	ldr	r3, [r7, #4]
24007954:	2200      	movs	r2, #0
24007956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
2400795a:	2300      	movs	r3, #0
2400795c:	e004      	b.n	24007968 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400795e:	687b      	ldr	r3, [r7, #4]
24007960:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007964:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
24007966:	2301      	movs	r3, #1
  }
}
24007968:	4618      	mov	r0, r3
2400796a:	3714      	adds	r7, #20
2400796c:	46bd      	mov	sp, r7
2400796e:	f85d 7b04 	ldr.w	r7, [sp], #4
24007972:	4770      	bx	lr
24007974:	40020010 	.word	0x40020010
24007978:	40020028 	.word	0x40020028
2400797c:	40020040 	.word	0x40020040
24007980:	40020058 	.word	0x40020058
24007984:	40020070 	.word	0x40020070
24007988:	40020088 	.word	0x40020088
2400798c:	400200a0 	.word	0x400200a0
24007990:	400200b8 	.word	0x400200b8
24007994:	40020410 	.word	0x40020410
24007998:	40020428 	.word	0x40020428
2400799c:	40020440 	.word	0x40020440
240079a0:	40020458 	.word	0x40020458
240079a4:	40020470 	.word	0x40020470
240079a8:	40020488 	.word	0x40020488
240079ac:	400204a0 	.word	0x400204a0
240079b0:	400204b8 	.word	0x400204b8

240079b4 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
240079b4:	b480      	push	{r7}
240079b6:	b085      	sub	sp, #20
240079b8:	af00      	add	r7, sp, #0
240079ba:	6078      	str	r0, [r7, #4]
240079bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
240079be:	687b      	ldr	r3, [r7, #4]
240079c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240079c4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240079c6:	687b      	ldr	r3, [r7, #4]
240079c8:	681b      	ldr	r3, [r3, #0]
240079ca:	4a47      	ldr	r2, [pc, #284]	; (24007ae8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
240079cc:	4293      	cmp	r3, r2
240079ce:	d049      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079d0:	687b      	ldr	r3, [r7, #4]
240079d2:	681b      	ldr	r3, [r3, #0]
240079d4:	4a45      	ldr	r2, [pc, #276]	; (24007aec <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
240079d6:	4293      	cmp	r3, r2
240079d8:	d044      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079da:	687b      	ldr	r3, [r7, #4]
240079dc:	681b      	ldr	r3, [r3, #0]
240079de:	4a44      	ldr	r2, [pc, #272]	; (24007af0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
240079e0:	4293      	cmp	r3, r2
240079e2:	d03f      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079e4:	687b      	ldr	r3, [r7, #4]
240079e6:	681b      	ldr	r3, [r3, #0]
240079e8:	4a42      	ldr	r2, [pc, #264]	; (24007af4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
240079ea:	4293      	cmp	r3, r2
240079ec:	d03a      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079ee:	687b      	ldr	r3, [r7, #4]
240079f0:	681b      	ldr	r3, [r3, #0]
240079f2:	4a41      	ldr	r2, [pc, #260]	; (24007af8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
240079f4:	4293      	cmp	r3, r2
240079f6:	d035      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079f8:	687b      	ldr	r3, [r7, #4]
240079fa:	681b      	ldr	r3, [r3, #0]
240079fc:	4a3f      	ldr	r2, [pc, #252]	; (24007afc <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
240079fe:	4293      	cmp	r3, r2
24007a00:	d030      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a02:	687b      	ldr	r3, [r7, #4]
24007a04:	681b      	ldr	r3, [r3, #0]
24007a06:	4a3e      	ldr	r2, [pc, #248]	; (24007b00 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
24007a08:	4293      	cmp	r3, r2
24007a0a:	d02b      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a0c:	687b      	ldr	r3, [r7, #4]
24007a0e:	681b      	ldr	r3, [r3, #0]
24007a10:	4a3c      	ldr	r2, [pc, #240]	; (24007b04 <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
24007a12:	4293      	cmp	r3, r2
24007a14:	d026      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a16:	687b      	ldr	r3, [r7, #4]
24007a18:	681b      	ldr	r3, [r3, #0]
24007a1a:	4a3b      	ldr	r2, [pc, #236]	; (24007b08 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
24007a1c:	4293      	cmp	r3, r2
24007a1e:	d021      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a20:	687b      	ldr	r3, [r7, #4]
24007a22:	681b      	ldr	r3, [r3, #0]
24007a24:	4a39      	ldr	r2, [pc, #228]	; (24007b0c <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
24007a26:	4293      	cmp	r3, r2
24007a28:	d01c      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a2a:	687b      	ldr	r3, [r7, #4]
24007a2c:	681b      	ldr	r3, [r3, #0]
24007a2e:	4a38      	ldr	r2, [pc, #224]	; (24007b10 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
24007a30:	4293      	cmp	r3, r2
24007a32:	d017      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a34:	687b      	ldr	r3, [r7, #4]
24007a36:	681b      	ldr	r3, [r3, #0]
24007a38:	4a36      	ldr	r2, [pc, #216]	; (24007b14 <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
24007a3a:	4293      	cmp	r3, r2
24007a3c:	d012      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a3e:	687b      	ldr	r3, [r7, #4]
24007a40:	681b      	ldr	r3, [r3, #0]
24007a42:	4a35      	ldr	r2, [pc, #212]	; (24007b18 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
24007a44:	4293      	cmp	r3, r2
24007a46:	d00d      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a48:	687b      	ldr	r3, [r7, #4]
24007a4a:	681b      	ldr	r3, [r3, #0]
24007a4c:	4a33      	ldr	r2, [pc, #204]	; (24007b1c <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
24007a4e:	4293      	cmp	r3, r2
24007a50:	d008      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a52:	687b      	ldr	r3, [r7, #4]
24007a54:	681b      	ldr	r3, [r3, #0]
24007a56:	4a32      	ldr	r2, [pc, #200]	; (24007b20 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
24007a58:	4293      	cmp	r3, r2
24007a5a:	d003      	beq.n	24007a64 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a5c:	687b      	ldr	r3, [r7, #4]
24007a5e:	681b      	ldr	r3, [r3, #0]
24007a60:	4a30      	ldr	r2, [pc, #192]	; (24007b24 <HAL_DMAEx_ConfigMuxRequestGenerator+0x170>)
24007a62:	4293      	cmp	r3, r2
24007a64:	bf00      	nop
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
24007a66:	687b      	ldr	r3, [r7, #4]
24007a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a6a:	2b00      	cmp	r3, #0
24007a6c:	d105      	bne.n	24007a7a <HAL_DMAEx_ConfigMuxRequestGenerator+0xc6>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24007a6e:	687b      	ldr	r3, [r7, #4]
24007a70:	2240      	movs	r2, #64	; 0x40
24007a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
24007a74:	2301      	movs	r3, #1
24007a76:	73fb      	strb	r3, [r7, #15]
24007a78:	e02e      	b.n	24007ad8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
24007a7a:	687b      	ldr	r3, [r7, #4]
24007a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a7e:	681b      	ldr	r3, [r3, #0]
24007a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24007a84:	2b00      	cmp	r3, #0
24007a86:	d121      	bne.n	24007acc <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
24007a88:	7bbb      	ldrb	r3, [r7, #14]
24007a8a:	2b01      	cmp	r3, #1
24007a8c:	d11e      	bne.n	24007acc <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
24007a8e:	687b      	ldr	r3, [r7, #4]
24007a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007a94:	2b01      	cmp	r3, #1
24007a96:	d101      	bne.n	24007a9c <HAL_DMAEx_ConfigMuxRequestGenerator+0xe8>
24007a98:	2302      	movs	r3, #2
24007a9a:	e01e      	b.n	24007ada <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
24007a9c:	687b      	ldr	r3, [r7, #4]
24007a9e:	2201      	movs	r2, #1
24007aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007aa4:	683b      	ldr	r3, [r7, #0]
24007aa6:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
24007aa8:	683b      	ldr	r3, [r7, #0]
24007aaa:	689b      	ldr	r3, [r3, #8]
24007aac:	3b01      	subs	r3, #1
24007aae:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007ab0:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
24007ab4:	683b      	ldr	r3, [r7, #0]
24007ab6:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007ab8:	687b      	ldr	r3, [r7, #4]
24007aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
24007abc:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007abe:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
24007ac0:	687b      	ldr	r3, [r7, #4]
24007ac2:	2200      	movs	r2, #0
24007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
24007ac8:	2300      	movs	r3, #0
24007aca:	e006      	b.n	24007ada <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007acc:	687b      	ldr	r3, [r7, #4]
24007ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007ad2:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
24007ad4:	2301      	movs	r3, #1
24007ad6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
24007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
24007ada:	4618      	mov	r0, r3
24007adc:	3714      	adds	r7, #20
24007ade:	46bd      	mov	sp, r7
24007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
24007ae4:	4770      	bx	lr
24007ae6:	bf00      	nop
24007ae8:	40020010 	.word	0x40020010
24007aec:	40020028 	.word	0x40020028
24007af0:	40020040 	.word	0x40020040
24007af4:	40020058 	.word	0x40020058
24007af8:	40020070 	.word	0x40020070
24007afc:	40020088 	.word	0x40020088
24007b00:	400200a0 	.word	0x400200a0
24007b04:	400200b8 	.word	0x400200b8
24007b08:	40020410 	.word	0x40020410
24007b0c:	40020428 	.word	0x40020428
24007b10:	40020440 	.word	0x40020440
24007b14:	40020458 	.word	0x40020458
24007b18:	40020470 	.word	0x40020470
24007b1c:	40020488 	.word	0x40020488
24007b20:	400204a0 	.word	0x400204a0
24007b24:	400204b8 	.word	0x400204b8

24007b28 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007b28:	b480      	push	{r7}
24007b2a:	b083      	sub	sp, #12
24007b2c:	af00      	add	r7, sp, #0
24007b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007b30:	687b      	ldr	r3, [r7, #4]
24007b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007b36:	b2db      	uxtb	r3, r3
24007b38:	2b00      	cmp	r3, #0
24007b3a:	d00d      	beq.n	24007b58 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
24007b3c:	687b      	ldr	r3, [r7, #4]
24007b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b40:	2b00      	cmp	r3, #0
24007b42:	d009      	beq.n	24007b58 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
24007b44:	687b      	ldr	r3, [r7, #4]
24007b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b48:	681a      	ldr	r2, [r3, #0]
24007b4a:	687b      	ldr	r3, [r7, #4]
24007b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007b52:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007b54:	2300      	movs	r3, #0
24007b56:	e000      	b.n	24007b5a <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007b58:	2301      	movs	r3, #1
 }
}
24007b5a:	4618      	mov	r0, r3
24007b5c:	370c      	adds	r7, #12
24007b5e:	46bd      	mov	sp, r7
24007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
24007b64:	4770      	bx	lr

24007b66 <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007b66:	b480      	push	{r7}
24007b68:	b083      	sub	sp, #12
24007b6a:	af00      	add	r7, sp, #0
24007b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007b6e:	687b      	ldr	r3, [r7, #4]
24007b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007b74:	b2db      	uxtb	r3, r3
24007b76:	2b00      	cmp	r3, #0
24007b78:	d00d      	beq.n	24007b96 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
24007b7a:	687b      	ldr	r3, [r7, #4]
24007b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b7e:	2b00      	cmp	r3, #0
24007b80:	d009      	beq.n	24007b96 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
24007b82:	687b      	ldr	r3, [r7, #4]
24007b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b86:	681a      	ldr	r2, [r3, #0]
24007b88:	687b      	ldr	r3, [r7, #4]
24007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007b90:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007b92:	2300      	movs	r3, #0
24007b94:	e000      	b.n	24007b98 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007b96:	2301      	movs	r3, #1
 }
}
24007b98:	4618      	mov	r0, r3
24007b9a:	370c      	adds	r7, #12
24007b9c:	46bd      	mov	sp, r7
24007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24007ba2:	4770      	bx	lr

24007ba4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24007ba4:	b580      	push	{r7, lr}
24007ba6:	b082      	sub	sp, #8
24007ba8:	af00      	add	r7, sp, #0
24007baa:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007bac:	687b      	ldr	r3, [r7, #4]
24007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007bb0:	681a      	ldr	r2, [r3, #0]
24007bb2:	687b      	ldr	r3, [r7, #4]
24007bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24007bb6:	4013      	ands	r3, r2
24007bb8:	2b00      	cmp	r3, #0
24007bba:	d01a      	beq.n	24007bf2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24007bbc:	687b      	ldr	r3, [r7, #4]
24007bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007bc0:	681a      	ldr	r2, [r3, #0]
24007bc2:	687b      	ldr	r3, [r7, #4]
24007bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007bcc:	687b      	ldr	r3, [r7, #4]
24007bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007bd0:	687a      	ldr	r2, [r7, #4]
24007bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
24007bd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007bd6:	687b      	ldr	r3, [r7, #4]
24007bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007bda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24007bde:	687b      	ldr	r3, [r7, #4]
24007be0:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24007be2:	687b      	ldr	r3, [r7, #4]
24007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007be6:	2b00      	cmp	r3, #0
24007be8:	d003      	beq.n	24007bf2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24007bea:	687b      	ldr	r3, [r7, #4]
24007bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007bee:	6878      	ldr	r0, [r7, #4]
24007bf0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24007bf2:	687b      	ldr	r3, [r7, #4]
24007bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007bf6:	2b00      	cmp	r3, #0
24007bf8:	d022      	beq.n	24007c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24007bfa:	687b      	ldr	r3, [r7, #4]
24007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007bfe:	681a      	ldr	r2, [r3, #0]
24007c00:	687b      	ldr	r3, [r7, #4]
24007c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24007c04:	4013      	ands	r3, r2
24007c06:	2b00      	cmp	r3, #0
24007c08:	d01a      	beq.n	24007c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007c0a:	687b      	ldr	r3, [r7, #4]
24007c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007c0e:	681a      	ldr	r2, [r3, #0]
24007c10:	687b      	ldr	r3, [r7, #4]
24007c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007c18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007c1a:	687b      	ldr	r3, [r7, #4]
24007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007c1e:	687a      	ldr	r2, [r7, #4]
24007c20:	6f52      	ldr	r2, [r2, #116]	; 0x74
24007c22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007c24:	687b      	ldr	r3, [r7, #4]
24007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007c28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24007c2c:	687b      	ldr	r3, [r7, #4]
24007c2e:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24007c30:	687b      	ldr	r3, [r7, #4]
24007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007c34:	2b00      	cmp	r3, #0
24007c36:	d003      	beq.n	24007c40 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007c38:	687b      	ldr	r3, [r7, #4]
24007c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007c3c:	6878      	ldr	r0, [r7, #4]
24007c3e:	4798      	blx	r3
      }
    }
  }
}
24007c40:	bf00      	nop
24007c42:	3708      	adds	r7, #8
24007c44:	46bd      	mov	sp, r7
24007c46:	bd80      	pop	{r7, pc}

24007c48 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24007c48:	b480      	push	{r7}
24007c4a:	b085      	sub	sp, #20
24007c4c:	af00      	add	r7, sp, #0
24007c4e:	60f8      	str	r0, [r7, #12]
24007c50:	60b9      	str	r1, [r7, #8]
24007c52:	607a      	str	r2, [r7, #4]
24007c54:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007c56:	68fb      	ldr	r3, [r7, #12]
24007c58:	681b      	ldr	r3, [r3, #0]
24007c5a:	4a46      	ldr	r2, [pc, #280]	; (24007d74 <DMA_MultiBufferSetConfig+0x12c>)
24007c5c:	4293      	cmp	r3, r2
24007c5e:	d04a      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c60:	68fb      	ldr	r3, [r7, #12]
24007c62:	681b      	ldr	r3, [r3, #0]
24007c64:	4a44      	ldr	r2, [pc, #272]	; (24007d78 <DMA_MultiBufferSetConfig+0x130>)
24007c66:	4293      	cmp	r3, r2
24007c68:	d045      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c6a:	68fb      	ldr	r3, [r7, #12]
24007c6c:	681b      	ldr	r3, [r3, #0]
24007c6e:	4a43      	ldr	r2, [pc, #268]	; (24007d7c <DMA_MultiBufferSetConfig+0x134>)
24007c70:	4293      	cmp	r3, r2
24007c72:	d040      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c74:	68fb      	ldr	r3, [r7, #12]
24007c76:	681b      	ldr	r3, [r3, #0]
24007c78:	4a41      	ldr	r2, [pc, #260]	; (24007d80 <DMA_MultiBufferSetConfig+0x138>)
24007c7a:	4293      	cmp	r3, r2
24007c7c:	d03b      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c7e:	68fb      	ldr	r3, [r7, #12]
24007c80:	681b      	ldr	r3, [r3, #0]
24007c82:	4a40      	ldr	r2, [pc, #256]	; (24007d84 <DMA_MultiBufferSetConfig+0x13c>)
24007c84:	4293      	cmp	r3, r2
24007c86:	d036      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c88:	68fb      	ldr	r3, [r7, #12]
24007c8a:	681b      	ldr	r3, [r3, #0]
24007c8c:	4a3e      	ldr	r2, [pc, #248]	; (24007d88 <DMA_MultiBufferSetConfig+0x140>)
24007c8e:	4293      	cmp	r3, r2
24007c90:	d031      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c92:	68fb      	ldr	r3, [r7, #12]
24007c94:	681b      	ldr	r3, [r3, #0]
24007c96:	4a3d      	ldr	r2, [pc, #244]	; (24007d8c <DMA_MultiBufferSetConfig+0x144>)
24007c98:	4293      	cmp	r3, r2
24007c9a:	d02c      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007c9c:	68fb      	ldr	r3, [r7, #12]
24007c9e:	681b      	ldr	r3, [r3, #0]
24007ca0:	4a3b      	ldr	r2, [pc, #236]	; (24007d90 <DMA_MultiBufferSetConfig+0x148>)
24007ca2:	4293      	cmp	r3, r2
24007ca4:	d027      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007ca6:	68fb      	ldr	r3, [r7, #12]
24007ca8:	681b      	ldr	r3, [r3, #0]
24007caa:	4a3a      	ldr	r2, [pc, #232]	; (24007d94 <DMA_MultiBufferSetConfig+0x14c>)
24007cac:	4293      	cmp	r3, r2
24007cae:	d022      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cb0:	68fb      	ldr	r3, [r7, #12]
24007cb2:	681b      	ldr	r3, [r3, #0]
24007cb4:	4a38      	ldr	r2, [pc, #224]	; (24007d98 <DMA_MultiBufferSetConfig+0x150>)
24007cb6:	4293      	cmp	r3, r2
24007cb8:	d01d      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cba:	68fb      	ldr	r3, [r7, #12]
24007cbc:	681b      	ldr	r3, [r3, #0]
24007cbe:	4a37      	ldr	r2, [pc, #220]	; (24007d9c <DMA_MultiBufferSetConfig+0x154>)
24007cc0:	4293      	cmp	r3, r2
24007cc2:	d018      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cc4:	68fb      	ldr	r3, [r7, #12]
24007cc6:	681b      	ldr	r3, [r3, #0]
24007cc8:	4a35      	ldr	r2, [pc, #212]	; (24007da0 <DMA_MultiBufferSetConfig+0x158>)
24007cca:	4293      	cmp	r3, r2
24007ccc:	d013      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cce:	68fb      	ldr	r3, [r7, #12]
24007cd0:	681b      	ldr	r3, [r3, #0]
24007cd2:	4a34      	ldr	r2, [pc, #208]	; (24007da4 <DMA_MultiBufferSetConfig+0x15c>)
24007cd4:	4293      	cmp	r3, r2
24007cd6:	d00e      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cd8:	68fb      	ldr	r3, [r7, #12]
24007cda:	681b      	ldr	r3, [r3, #0]
24007cdc:	4a32      	ldr	r2, [pc, #200]	; (24007da8 <DMA_MultiBufferSetConfig+0x160>)
24007cde:	4293      	cmp	r3, r2
24007ce0:	d009      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007ce2:	68fb      	ldr	r3, [r7, #12]
24007ce4:	681b      	ldr	r3, [r3, #0]
24007ce6:	4a31      	ldr	r2, [pc, #196]	; (24007dac <DMA_MultiBufferSetConfig+0x164>)
24007ce8:	4293      	cmp	r3, r2
24007cea:	d004      	beq.n	24007cf6 <DMA_MultiBufferSetConfig+0xae>
24007cec:	68fb      	ldr	r3, [r7, #12]
24007cee:	681b      	ldr	r3, [r3, #0]
24007cf0:	4a2f      	ldr	r2, [pc, #188]	; (24007db0 <DMA_MultiBufferSetConfig+0x168>)
24007cf2:	4293      	cmp	r3, r2
24007cf4:	d101      	bne.n	24007cfa <DMA_MultiBufferSetConfig+0xb2>
24007cf6:	2301      	movs	r3, #1
24007cf8:	e000      	b.n	24007cfc <DMA_MultiBufferSetConfig+0xb4>
24007cfa:	2300      	movs	r3, #0
24007cfc:	2b00      	cmp	r3, #0
24007cfe:	d019      	beq.n	24007d34 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
24007d00:	68fb      	ldr	r3, [r7, #12]
24007d02:	681b      	ldr	r3, [r3, #0]
24007d04:	683a      	ldr	r2, [r7, #0]
24007d06:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007d08:	68fb      	ldr	r3, [r7, #12]
24007d0a:	689b      	ldr	r3, [r3, #8]
24007d0c:	2b40      	cmp	r3, #64	; 0x40
24007d0e:	d108      	bne.n	24007d22 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
24007d10:	68fb      	ldr	r3, [r7, #12]
24007d12:	681b      	ldr	r3, [r3, #0]
24007d14:	687a      	ldr	r2, [r7, #4]
24007d16:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
24007d18:	68fb      	ldr	r3, [r7, #12]
24007d1a:	681b      	ldr	r3, [r3, #0]
24007d1c:	68ba      	ldr	r2, [r7, #8]
24007d1e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
24007d20:	e021      	b.n	24007d66 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
24007d22:	68fb      	ldr	r3, [r7, #12]
24007d24:	681b      	ldr	r3, [r3, #0]
24007d26:	68ba      	ldr	r2, [r7, #8]
24007d28:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
24007d2a:	68fb      	ldr	r3, [r7, #12]
24007d2c:	681b      	ldr	r3, [r3, #0]
24007d2e:	687a      	ldr	r2, [r7, #4]
24007d30:	60da      	str	r2, [r3, #12]
}
24007d32:	e018      	b.n	24007d66 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
24007d34:	68fb      	ldr	r3, [r7, #12]
24007d36:	681b      	ldr	r3, [r3, #0]
24007d38:	683a      	ldr	r2, [r7, #0]
24007d3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007d3c:	68fb      	ldr	r3, [r7, #12]
24007d3e:	689b      	ldr	r3, [r3, #8]
24007d40:	2b40      	cmp	r3, #64	; 0x40
24007d42:	d108      	bne.n	24007d56 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
24007d44:	68fb      	ldr	r3, [r7, #12]
24007d46:	681b      	ldr	r3, [r3, #0]
24007d48:	687a      	ldr	r2, [r7, #4]
24007d4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
24007d4c:	68fb      	ldr	r3, [r7, #12]
24007d4e:	681b      	ldr	r3, [r3, #0]
24007d50:	68ba      	ldr	r2, [r7, #8]
24007d52:	60da      	str	r2, [r3, #12]
}
24007d54:	e007      	b.n	24007d66 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
24007d56:	68fb      	ldr	r3, [r7, #12]
24007d58:	681b      	ldr	r3, [r3, #0]
24007d5a:	68ba      	ldr	r2, [r7, #8]
24007d5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
24007d5e:	68fb      	ldr	r3, [r7, #12]
24007d60:	681b      	ldr	r3, [r3, #0]
24007d62:	687a      	ldr	r2, [r7, #4]
24007d64:	60da      	str	r2, [r3, #12]
}
24007d66:	bf00      	nop
24007d68:	3714      	adds	r7, #20
24007d6a:	46bd      	mov	sp, r7
24007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24007d70:	4770      	bx	lr
24007d72:	bf00      	nop
24007d74:	40020010 	.word	0x40020010
24007d78:	40020028 	.word	0x40020028
24007d7c:	40020040 	.word	0x40020040
24007d80:	40020058 	.word	0x40020058
24007d84:	40020070 	.word	0x40020070
24007d88:	40020088 	.word	0x40020088
24007d8c:	400200a0 	.word	0x400200a0
24007d90:	400200b8 	.word	0x400200b8
24007d94:	40020410 	.word	0x40020410
24007d98:	40020428 	.word	0x40020428
24007d9c:	40020440 	.word	0x40020440
24007da0:	40020458 	.word	0x40020458
24007da4:	40020470 	.word	0x40020470
24007da8:	40020488 	.word	0x40020488
24007dac:	400204a0 	.word	0x400204a0
24007db0:	400204b8 	.word	0x400204b8

24007db4 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24007db4:	b480      	push	{r7}
24007db6:	b089      	sub	sp, #36	; 0x24
24007db8:	af00      	add	r7, sp, #0
24007dba:	6078      	str	r0, [r7, #4]
24007dbc:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24007dbe:	687b      	ldr	r3, [r7, #4]
24007dc0:	2b00      	cmp	r3, #0
24007dc2:	d002      	beq.n	24007dca <HAL_EXTI_SetConfigLine+0x16>
24007dc4:	683b      	ldr	r3, [r7, #0]
24007dc6:	2b00      	cmp	r3, #0
24007dc8:	d101      	bne.n	24007dce <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
24007dca:	2301      	movs	r3, #1
24007dcc:	e109      	b.n	24007fe2 <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
24007dce:	683b      	ldr	r3, [r7, #0]
24007dd0:	681a      	ldr	r2, [r3, #0]
24007dd2:	687b      	ldr	r3, [r7, #4]
24007dd4:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24007dd6:	683b      	ldr	r3, [r7, #0]
24007dd8:	681b      	ldr	r3, [r3, #0]
24007dda:	0c1b      	lsrs	r3, r3, #16
24007ddc:	f003 0303 	and.w	r3, r3, #3
24007de0:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24007de2:	683b      	ldr	r3, [r7, #0]
24007de4:	681b      	ldr	r3, [r3, #0]
24007de6:	f003 031f 	and.w	r3, r3, #31
24007dea:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
24007dec:	2201      	movs	r2, #1
24007dee:	68fb      	ldr	r3, [r7, #12]
24007df0:	fa02 f303 	lsl.w	r3, r2, r3
24007df4:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24007df6:	683b      	ldr	r3, [r7, #0]
24007df8:	681b      	ldr	r3, [r3, #0]
24007dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007dfe:	2b00      	cmp	r3, #0
24007e00:	d064      	beq.n	24007ecc <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007e02:	693b      	ldr	r3, [r7, #16]
24007e04:	015b      	lsls	r3, r3, #5
24007e06:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24007e0a:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007e0c:	69fb      	ldr	r3, [r7, #28]
24007e0e:	681b      	ldr	r3, [r3, #0]
24007e10:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
24007e12:	683b      	ldr	r3, [r7, #0]
24007e14:	689b      	ldr	r3, [r3, #8]
24007e16:	f003 0301 	and.w	r3, r3, #1
24007e1a:	2b00      	cmp	r3, #0
24007e1c:	d004      	beq.n	24007e28 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
24007e1e:	69ba      	ldr	r2, [r7, #24]
24007e20:	68bb      	ldr	r3, [r7, #8]
24007e22:	4313      	orrs	r3, r2
24007e24:	61bb      	str	r3, [r7, #24]
24007e26:	e004      	b.n	24007e32 <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
24007e28:	68bb      	ldr	r3, [r7, #8]
24007e2a:	43db      	mvns	r3, r3
24007e2c:	69ba      	ldr	r2, [r7, #24]
24007e2e:	4013      	ands	r3, r2
24007e30:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
24007e32:	69fb      	ldr	r3, [r7, #28]
24007e34:	69ba      	ldr	r2, [r7, #24]
24007e36:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007e38:	693b      	ldr	r3, [r7, #16]
24007e3a:	015a      	lsls	r2, r3, #5
24007e3c:	4b6c      	ldr	r3, [pc, #432]	; (24007ff0 <HAL_EXTI_SetConfigLine+0x23c>)
24007e3e:	4413      	add	r3, r2
24007e40:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007e42:	69fb      	ldr	r3, [r7, #28]
24007e44:	681b      	ldr	r3, [r3, #0]
24007e46:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
24007e48:	683b      	ldr	r3, [r7, #0]
24007e4a:	689b      	ldr	r3, [r3, #8]
24007e4c:	f003 0302 	and.w	r3, r3, #2
24007e50:	2b00      	cmp	r3, #0
24007e52:	d004      	beq.n	24007e5e <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
24007e54:	69ba      	ldr	r2, [r7, #24]
24007e56:	68bb      	ldr	r3, [r7, #8]
24007e58:	4313      	orrs	r3, r2
24007e5a:	61bb      	str	r3, [r7, #24]
24007e5c:	e004      	b.n	24007e68 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
24007e5e:	68bb      	ldr	r3, [r7, #8]
24007e60:	43db      	mvns	r3, r3
24007e62:	69ba      	ldr	r2, [r7, #24]
24007e64:	4013      	ands	r3, r2
24007e66:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
24007e68:	69fb      	ldr	r3, [r7, #28]
24007e6a:	69ba      	ldr	r2, [r7, #24]
24007e6c:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24007e6e:	683b      	ldr	r3, [r7, #0]
24007e70:	681b      	ldr	r3, [r3, #0]
24007e72:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24007e76:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24007e7a:	d127      	bne.n	24007ecc <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24007e7c:	4a5d      	ldr	r2, [pc, #372]	; (24007ff4 <HAL_EXTI_SetConfigLine+0x240>)
24007e7e:	68fb      	ldr	r3, [r7, #12]
24007e80:	089b      	lsrs	r3, r3, #2
24007e82:	f003 0303 	and.w	r3, r3, #3
24007e86:	3302      	adds	r3, #2
24007e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24007e8c:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007e8e:	68fb      	ldr	r3, [r7, #12]
24007e90:	f003 0303 	and.w	r3, r3, #3
24007e94:	009b      	lsls	r3, r3, #2
24007e96:	220f      	movs	r2, #15
24007e98:	fa02 f303 	lsl.w	r3, r2, r3
24007e9c:	43db      	mvns	r3, r3
24007e9e:	69ba      	ldr	r2, [r7, #24]
24007ea0:	4013      	ands	r3, r2
24007ea2:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007ea4:	683b      	ldr	r3, [r7, #0]
24007ea6:	68da      	ldr	r2, [r3, #12]
24007ea8:	68fb      	ldr	r3, [r7, #12]
24007eaa:	f003 0303 	and.w	r3, r3, #3
24007eae:	009b      	lsls	r3, r3, #2
24007eb0:	fa02 f303 	lsl.w	r3, r2, r3
24007eb4:	69ba      	ldr	r2, [r7, #24]
24007eb6:	4313      	orrs	r3, r2
24007eb8:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24007eba:	494e      	ldr	r1, [pc, #312]	; (24007ff4 <HAL_EXTI_SetConfigLine+0x240>)
24007ebc:	68fb      	ldr	r3, [r7, #12]
24007ebe:	089b      	lsrs	r3, r3, #2
24007ec0:	f003 0303 	and.w	r3, r3, #3
24007ec4:	3302      	adds	r3, #2
24007ec6:	69ba      	ldr	r2, [r7, #24]
24007ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24007ecc:	693b      	ldr	r3, [r7, #16]
24007ece:	011a      	lsls	r2, r3, #4
24007ed0:	4b49      	ldr	r3, [pc, #292]	; (24007ff8 <HAL_EXTI_SetConfigLine+0x244>)
24007ed2:	4413      	add	r3, r2
24007ed4:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007ed6:	69fb      	ldr	r3, [r7, #28]
24007ed8:	681b      	ldr	r3, [r3, #0]
24007eda:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
24007edc:	683b      	ldr	r3, [r7, #0]
24007ede:	685b      	ldr	r3, [r3, #4]
24007ee0:	f003 0301 	and.w	r3, r3, #1
24007ee4:	2b00      	cmp	r3, #0
24007ee6:	d004      	beq.n	24007ef2 <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
24007ee8:	69ba      	ldr	r2, [r7, #24]
24007eea:	68bb      	ldr	r3, [r7, #8]
24007eec:	4313      	orrs	r3, r2
24007eee:	61bb      	str	r3, [r7, #24]
24007ef0:	e004      	b.n	24007efc <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
24007ef2:	68bb      	ldr	r3, [r7, #8]
24007ef4:	43db      	mvns	r3, r3
24007ef6:	69ba      	ldr	r2, [r7, #24]
24007ef8:	4013      	ands	r3, r2
24007efa:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
24007efc:	69fb      	ldr	r3, [r7, #28]
24007efe:	69ba      	ldr	r2, [r7, #24]
24007f00:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24007f02:	693b      	ldr	r3, [r7, #16]
24007f04:	011a      	lsls	r2, r3, #4
24007f06:	4b3d      	ldr	r3, [pc, #244]	; (24007ffc <HAL_EXTI_SetConfigLine+0x248>)
24007f08:	4413      	add	r3, r2
24007f0a:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007f0c:	69fb      	ldr	r3, [r7, #28]
24007f0e:	681b      	ldr	r3, [r3, #0]
24007f10:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
24007f12:	683b      	ldr	r3, [r7, #0]
24007f14:	685b      	ldr	r3, [r3, #4]
24007f16:	f003 0302 	and.w	r3, r3, #2
24007f1a:	2b00      	cmp	r3, #0
24007f1c:	d004      	beq.n	24007f28 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
24007f1e:	69ba      	ldr	r2, [r7, #24]
24007f20:	68bb      	ldr	r3, [r7, #8]
24007f22:	4313      	orrs	r3, r2
24007f24:	61bb      	str	r3, [r7, #24]
24007f26:	e004      	b.n	24007f32 <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
24007f28:	68bb      	ldr	r3, [r7, #8]
24007f2a:	43db      	mvns	r3, r3
24007f2c:	69ba      	ldr	r2, [r7, #24]
24007f2e:	4013      	ands	r3, r2
24007f30:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
24007f32:	69fb      	ldr	r3, [r7, #28]
24007f34:	69ba      	ldr	r2, [r7, #24]
24007f36:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24007f38:	683b      	ldr	r3, [r7, #0]
24007f3a:	681b      	ldr	r3, [r3, #0]
24007f3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24007f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24007f44:	d14c      	bne.n	24007fe0 <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24007f46:	693b      	ldr	r3, [r7, #16]
24007f48:	015a      	lsls	r2, r3, #5
24007f4a:	4b2d      	ldr	r3, [pc, #180]	; (24008000 <HAL_EXTI_SetConfigLine+0x24c>)
24007f4c:	4413      	add	r3, r2
24007f4e:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007f50:	69fb      	ldr	r3, [r7, #28]
24007f52:	681b      	ldr	r3, [r3, #0]
24007f54:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
24007f56:	683b      	ldr	r3, [r7, #0]
24007f58:	691b      	ldr	r3, [r3, #16]
24007f5a:	2b00      	cmp	r3, #0
24007f5c:	d108      	bne.n	24007f70 <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
24007f5e:	68bb      	ldr	r3, [r7, #8]
24007f60:	43db      	mvns	r3, r3
24007f62:	69ba      	ldr	r2, [r7, #24]
24007f64:	4013      	ands	r3, r2
24007f66:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007f68:	69fb      	ldr	r3, [r7, #28]
24007f6a:	69ba      	ldr	r2, [r7, #24]
24007f6c:	601a      	str	r2, [r3, #0]
24007f6e:	e037      	b.n	24007fe0 <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
24007f70:	69ba      	ldr	r2, [r7, #24]
24007f72:	68bb      	ldr	r3, [r7, #8]
24007f74:	4313      	orrs	r3, r2
24007f76:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007f78:	69fb      	ldr	r3, [r7, #28]
24007f7a:	69ba      	ldr	r2, [r7, #24]
24007f7c:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
24007f7e:	68fb      	ldr	r3, [r7, #12]
24007f80:	2b0f      	cmp	r3, #15
24007f82:	d80a      	bhi.n	24007f9a <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24007f84:	693b      	ldr	r3, [r7, #16]
24007f86:	015a      	lsls	r2, r3, #5
24007f88:	4b1e      	ldr	r3, [pc, #120]	; (24008004 <HAL_EXTI_SetConfigLine+0x250>)
24007f8a:	4413      	add	r3, r2
24007f8c:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24007f8e:	2201      	movs	r2, #1
24007f90:	68fb      	ldr	r3, [r7, #12]
24007f92:	fa02 f303 	lsl.w	r3, r2, r3
24007f96:	617b      	str	r3, [r7, #20]
24007f98:	e00a      	b.n	24007fb0 <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24007f9a:	693b      	ldr	r3, [r7, #16]
24007f9c:	015a      	lsls	r2, r3, #5
24007f9e:	4b1a      	ldr	r3, [pc, #104]	; (24008008 <HAL_EXTI_SetConfigLine+0x254>)
24007fa0:	4413      	add	r3, r2
24007fa2:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24007fa4:	68fb      	ldr	r3, [r7, #12]
24007fa6:	3b10      	subs	r3, #16
24007fa8:	2201      	movs	r2, #1
24007faa:	fa02 f303 	lsl.w	r3, r2, r3
24007fae:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
24007fb0:	69fb      	ldr	r3, [r7, #28]
24007fb2:	6819      	ldr	r1, [r3, #0]
24007fb4:	697b      	ldr	r3, [r7, #20]
24007fb6:	fb03 f203 	mul.w	r2, r3, r3
24007fba:	4613      	mov	r3, r2
24007fbc:	005b      	lsls	r3, r3, #1
24007fbe:	4413      	add	r3, r2
24007fc0:	43db      	mvns	r3, r3
24007fc2:	ea01 0203 	and.w	r2, r1, r3
24007fc6:	697b      	ldr	r3, [r7, #20]
24007fc8:	fb03 f303 	mul.w	r3, r3, r3
24007fcc:	6839      	ldr	r1, [r7, #0]
24007fce:	6909      	ldr	r1, [r1, #16]
24007fd0:	3901      	subs	r1, #1
24007fd2:	fb01 f303 	mul.w	r3, r1, r3
24007fd6:	4313      	orrs	r3, r2
24007fd8:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
24007fda:	69fb      	ldr	r3, [r7, #28]
24007fdc:	69ba      	ldr	r2, [r7, #24]
24007fde:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
24007fe0:	2300      	movs	r3, #0
}
24007fe2:	4618      	mov	r0, r3
24007fe4:	3724      	adds	r7, #36	; 0x24
24007fe6:	46bd      	mov	sp, r7
24007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
24007fec:	4770      	bx	lr
24007fee:	bf00      	nop
24007ff0:	58000004 	.word	0x58000004
24007ff4:	58000400 	.word	0x58000400
24007ff8:	58000080 	.word	0x58000080
24007ffc:	58000084 	.word	0x58000084
24008000:	5800000c 	.word	0x5800000c
24008004:	58000010 	.word	0x58000010
24008008:	58000014 	.word	0x58000014

2400800c <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
2400800c:	b480      	push	{r7}
2400800e:	b089      	sub	sp, #36	; 0x24
24008010:	af00      	add	r7, sp, #0
24008012:	6078      	str	r0, [r7, #4]
24008014:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24008016:	687b      	ldr	r3, [r7, #4]
24008018:	2b00      	cmp	r3, #0
2400801a:	d002      	beq.n	24008022 <HAL_EXTI_GetConfigLine+0x16>
2400801c:	683b      	ldr	r3, [r7, #0]
2400801e:	2b00      	cmp	r3, #0
24008020:	d101      	bne.n	24008026 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
24008022:	2301      	movs	r3, #1
24008024:	e0c4      	b.n	240081b0 <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
24008026:	687b      	ldr	r3, [r7, #4]
24008028:	681a      	ldr	r2, [r3, #0]
2400802a:	683b      	ldr	r3, [r7, #0]
2400802c:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
2400802e:	683b      	ldr	r3, [r7, #0]
24008030:	681b      	ldr	r3, [r3, #0]
24008032:	0c1b      	lsrs	r3, r3, #16
24008034:	f003 0303 	and.w	r3, r3, #3
24008038:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2400803a:	683b      	ldr	r3, [r7, #0]
2400803c:	681b      	ldr	r3, [r3, #0]
2400803e:	f003 031f 	and.w	r3, r3, #31
24008042:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008044:	2201      	movs	r2, #1
24008046:	693b      	ldr	r3, [r7, #16]
24008048:	fa02 f303 	lsl.w	r3, r2, r3
2400804c:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
2400804e:	697b      	ldr	r3, [r7, #20]
24008050:	011a      	lsls	r2, r3, #4
24008052:	4b5a      	ldr	r3, [pc, #360]	; (240081bc <HAL_EXTI_GetConfigLine+0x1b0>)
24008054:	4413      	add	r3, r2
24008056:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008058:	69fb      	ldr	r3, [r7, #28]
2400805a:	681b      	ldr	r3, [r3, #0]
2400805c:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
2400805e:	683b      	ldr	r3, [r7, #0]
24008060:	2200      	movs	r2, #0
24008062:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008064:	68ba      	ldr	r2, [r7, #8]
24008066:	68fb      	ldr	r3, [r7, #12]
24008068:	4013      	ands	r3, r2
2400806a:	2b00      	cmp	r3, #0
2400806c:	d002      	beq.n	24008074 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
2400806e:	683b      	ldr	r3, [r7, #0]
24008070:	2201      	movs	r2, #1
24008072:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008074:	697b      	ldr	r3, [r7, #20]
24008076:	011a      	lsls	r2, r3, #4
24008078:	4b51      	ldr	r3, [pc, #324]	; (240081c0 <HAL_EXTI_GetConfigLine+0x1b4>)
2400807a:	4413      	add	r3, r2
2400807c:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
2400807e:	69fb      	ldr	r3, [r7, #28]
24008080:	681b      	ldr	r3, [r3, #0]
24008082:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008084:	68ba      	ldr	r2, [r7, #8]
24008086:	68fb      	ldr	r3, [r7, #12]
24008088:	4013      	ands	r3, r2
2400808a:	2b00      	cmp	r3, #0
2400808c:	d005      	beq.n	2400809a <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
2400808e:	683b      	ldr	r3, [r7, #0]
24008090:	685b      	ldr	r3, [r3, #4]
24008092:	f043 0202 	orr.w	r2, r3, #2
24008096:	683b      	ldr	r3, [r7, #0]
24008098:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
2400809a:	683b      	ldr	r3, [r7, #0]
2400809c:	2200      	movs	r2, #0
2400809e:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
240080a0:	683b      	ldr	r3, [r7, #0]
240080a2:	2200      	movs	r2, #0
240080a4:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
240080a6:	683b      	ldr	r3, [r7, #0]
240080a8:	681b      	ldr	r3, [r3, #0]
240080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240080ae:	2b00      	cmp	r3, #0
240080b0:	d03d      	beq.n	2400812e <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
240080b2:	697b      	ldr	r3, [r7, #20]
240080b4:	015b      	lsls	r3, r3, #5
240080b6:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
240080ba:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
240080bc:	69fb      	ldr	r3, [r7, #28]
240080be:	681b      	ldr	r3, [r3, #0]
240080c0:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
240080c2:	68ba      	ldr	r2, [r7, #8]
240080c4:	68fb      	ldr	r3, [r7, #12]
240080c6:	4013      	ands	r3, r2
240080c8:	2b00      	cmp	r3, #0
240080ca:	d002      	beq.n	240080d2 <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
240080cc:	683b      	ldr	r3, [r7, #0]
240080ce:	2201      	movs	r2, #1
240080d0:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
240080d2:	697b      	ldr	r3, [r7, #20]
240080d4:	015a      	lsls	r2, r3, #5
240080d6:	4b3b      	ldr	r3, [pc, #236]	; (240081c4 <HAL_EXTI_GetConfigLine+0x1b8>)
240080d8:	4413      	add	r3, r2
240080da:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
240080dc:	69fb      	ldr	r3, [r7, #28]
240080de:	681b      	ldr	r3, [r3, #0]
240080e0:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
240080e2:	68ba      	ldr	r2, [r7, #8]
240080e4:	68fb      	ldr	r3, [r7, #12]
240080e6:	4013      	ands	r3, r2
240080e8:	2b00      	cmp	r3, #0
240080ea:	d005      	beq.n	240080f8 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
240080ec:	683b      	ldr	r3, [r7, #0]
240080ee:	689b      	ldr	r3, [r3, #8]
240080f0:	f043 0202 	orr.w	r2, r3, #2
240080f4:	683b      	ldr	r3, [r7, #0]
240080f6:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
240080f8:	683b      	ldr	r3, [r7, #0]
240080fa:	681b      	ldr	r3, [r3, #0]
240080fc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24008100:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24008104:	d113      	bne.n	2400812e <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008106:	4a30      	ldr	r2, [pc, #192]	; (240081c8 <HAL_EXTI_GetConfigLine+0x1bc>)
24008108:	693b      	ldr	r3, [r7, #16]
2400810a:	089b      	lsrs	r3, r3, #2
2400810c:	f003 0303 	and.w	r3, r3, #3
24008110:	3302      	adds	r3, #2
24008112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008116:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3UL - (linepos & 0x03UL)))) >> 24U);
24008118:	693b      	ldr	r3, [r7, #16]
2400811a:	43db      	mvns	r3, r3
2400811c:	f003 0303 	and.w	r3, r3, #3
24008120:	009b      	lsls	r3, r3, #2
24008122:	68ba      	ldr	r2, [r7, #8]
24008124:	fa02 f303 	lsl.w	r3, r2, r3
24008128:	0e1a      	lsrs	r2, r3, #24
2400812a:	683b      	ldr	r3, [r7, #0]
2400812c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
2400812e:	683b      	ldr	r3, [r7, #0]
24008130:	2200      	movs	r2, #0
24008132:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008134:	683b      	ldr	r3, [r7, #0]
24008136:	681b      	ldr	r3, [r3, #0]
24008138:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
2400813c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008140:	d135      	bne.n	240081ae <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008142:	697b      	ldr	r3, [r7, #20]
24008144:	015a      	lsls	r2, r3, #5
24008146:	4b21      	ldr	r3, [pc, #132]	; (240081cc <HAL_EXTI_GetConfigLine+0x1c0>)
24008148:	4413      	add	r3, r2
2400814a:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
2400814c:	69fb      	ldr	r3, [r7, #28]
2400814e:	681a      	ldr	r2, [r3, #0]
24008150:	693b      	ldr	r3, [r7, #16]
24008152:	4013      	ands	r3, r2
24008154:	2b00      	cmp	r3, #0
24008156:	d02a      	beq.n	240081ae <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
24008158:	693b      	ldr	r3, [r7, #16]
2400815a:	2b0f      	cmp	r3, #15
2400815c:	d80a      	bhi.n	24008174 <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
2400815e:	697b      	ldr	r3, [r7, #20]
24008160:	015a      	lsls	r2, r3, #5
24008162:	4b1b      	ldr	r3, [pc, #108]	; (240081d0 <HAL_EXTI_GetConfigLine+0x1c4>)
24008164:	4413      	add	r3, r2
24008166:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008168:	2201      	movs	r2, #1
2400816a:	693b      	ldr	r3, [r7, #16]
2400816c:	fa02 f303 	lsl.w	r3, r2, r3
24008170:	61bb      	str	r3, [r7, #24]
24008172:	e00a      	b.n	2400818a <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008174:	697b      	ldr	r3, [r7, #20]
24008176:	015a      	lsls	r2, r3, #5
24008178:	4b16      	ldr	r3, [pc, #88]	; (240081d4 <HAL_EXTI_GetConfigLine+0x1c8>)
2400817a:	4413      	add	r3, r2
2400817c:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
2400817e:	693b      	ldr	r3, [r7, #16]
24008180:	3b10      	subs	r3, #16
24008182:	2201      	movs	r2, #1
24008184:	fa02 f303 	lsl.w	r3, r2, r3
24008188:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
2400818a:	69fb      	ldr	r3, [r7, #28]
2400818c:	6819      	ldr	r1, [r3, #0]
2400818e:	69bb      	ldr	r3, [r7, #24]
24008190:	fb03 f203 	mul.w	r2, r3, r3
24008194:	4613      	mov	r3, r2
24008196:	005b      	lsls	r3, r3, #1
24008198:	4413      	add	r3, r2
2400819a:	ea01 0203 	and.w	r2, r1, r3
2400819e:	69bb      	ldr	r3, [r7, #24]
240081a0:	fb03 f303 	mul.w	r3, r3, r3
240081a4:	fbb2 f3f3 	udiv	r3, r2, r3
240081a8:	1c5a      	adds	r2, r3, #1
240081aa:	683b      	ldr	r3, [r7, #0]
240081ac:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
240081ae:	2300      	movs	r3, #0
}
240081b0:	4618      	mov	r0, r3
240081b2:	3724      	adds	r7, #36	; 0x24
240081b4:	46bd      	mov	sp, r7
240081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240081ba:	4770      	bx	lr
240081bc:	58000080 	.word	0x58000080
240081c0:	58000084 	.word	0x58000084
240081c4:	58000004 	.word	0x58000004
240081c8:	58000400 	.word	0x58000400
240081cc:	5800000c 	.word	0x5800000c
240081d0:	58000010 	.word	0x58000010
240081d4:	58000014 	.word	0x58000014

240081d8 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
240081d8:	b480      	push	{r7}
240081da:	b089      	sub	sp, #36	; 0x24
240081dc:	af00      	add	r7, sp, #0
240081de:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
240081e0:	687b      	ldr	r3, [r7, #4]
240081e2:	2b00      	cmp	r3, #0
240081e4:	d101      	bne.n	240081ea <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
240081e6:	2301      	movs	r3, #1
240081e8:	e0ab      	b.n	24008342 <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240081ea:	687b      	ldr	r3, [r7, #4]
240081ec:	681b      	ldr	r3, [r3, #0]
240081ee:	0c1b      	lsrs	r3, r3, #16
240081f0:	f003 0303 	and.w	r3, r3, #3
240081f4:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
240081f6:	687b      	ldr	r3, [r7, #4]
240081f8:	681b      	ldr	r3, [r3, #0]
240081fa:	f003 031f 	and.w	r3, r3, #31
240081fe:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008200:	2201      	movs	r2, #1
24008202:	693b      	ldr	r3, [r7, #16]
24008204:	fa02 f303 	lsl.w	r3, r2, r3
24008208:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
2400820a:	697b      	ldr	r3, [r7, #20]
2400820c:	011a      	lsls	r2, r3, #4
2400820e:	4b50      	ldr	r3, [pc, #320]	; (24008350 <HAL_EXTI_ClearConfigLine+0x178>)
24008210:	4413      	add	r3, r2
24008212:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008214:	69fb      	ldr	r3, [r7, #28]
24008216:	681a      	ldr	r2, [r3, #0]
24008218:	68fb      	ldr	r3, [r7, #12]
2400821a:	43db      	mvns	r3, r3
2400821c:	4013      	ands	r3, r2
2400821e:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008220:	69fb      	ldr	r3, [r7, #28]
24008222:	68ba      	ldr	r2, [r7, #8]
24008224:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008226:	697b      	ldr	r3, [r7, #20]
24008228:	011a      	lsls	r2, r3, #4
2400822a:	4b4a      	ldr	r3, [pc, #296]	; (24008354 <HAL_EXTI_ClearConfigLine+0x17c>)
2400822c:	4413      	add	r3, r2
2400822e:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008230:	69fb      	ldr	r3, [r7, #28]
24008232:	681a      	ldr	r2, [r3, #0]
24008234:	68fb      	ldr	r3, [r7, #12]
24008236:	43db      	mvns	r3, r3
24008238:	4013      	ands	r3, r2
2400823a:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
2400823c:	69fb      	ldr	r3, [r7, #28]
2400823e:	68ba      	ldr	r2, [r7, #8]
24008240:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
24008242:	687b      	ldr	r3, [r7, #4]
24008244:	681b      	ldr	r3, [r3, #0]
24008246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400824a:	2b00      	cmp	r3, #0
2400824c:	d03f      	beq.n	240082ce <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
2400824e:	697b      	ldr	r3, [r7, #20]
24008250:	015b      	lsls	r3, r3, #5
24008252:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24008256:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008258:	69fb      	ldr	r3, [r7, #28]
2400825a:	681a      	ldr	r2, [r3, #0]
2400825c:	68fb      	ldr	r3, [r7, #12]
2400825e:	43db      	mvns	r3, r3
24008260:	4013      	ands	r3, r2
24008262:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
24008264:	69fb      	ldr	r3, [r7, #28]
24008266:	68ba      	ldr	r2, [r7, #8]
24008268:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
2400826a:	697b      	ldr	r3, [r7, #20]
2400826c:	015a      	lsls	r2, r3, #5
2400826e:	4b3a      	ldr	r3, [pc, #232]	; (24008358 <HAL_EXTI_ClearConfigLine+0x180>)
24008270:	4413      	add	r3, r2
24008272:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008274:	69fb      	ldr	r3, [r7, #28]
24008276:	681a      	ldr	r2, [r3, #0]
24008278:	68fb      	ldr	r3, [r7, #12]
2400827a:	43db      	mvns	r3, r3
2400827c:	4013      	ands	r3, r2
2400827e:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
24008280:	69fb      	ldr	r3, [r7, #28]
24008282:	68ba      	ldr	r2, [r7, #8]
24008284:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
24008286:	687b      	ldr	r3, [r7, #4]
24008288:	681b      	ldr	r3, [r3, #0]
2400828a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
2400828e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24008292:	d11c      	bne.n	240082ce <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008294:	4a31      	ldr	r2, [pc, #196]	; (2400835c <HAL_EXTI_ClearConfigLine+0x184>)
24008296:	693b      	ldr	r3, [r7, #16]
24008298:	089b      	lsrs	r3, r3, #2
2400829a:	f003 0303 	and.w	r3, r3, #3
2400829e:	3302      	adds	r3, #2
240082a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240082a4:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
240082a6:	693b      	ldr	r3, [r7, #16]
240082a8:	f003 0303 	and.w	r3, r3, #3
240082ac:	009b      	lsls	r3, r3, #2
240082ae:	220f      	movs	r2, #15
240082b0:	fa02 f303 	lsl.w	r3, r2, r3
240082b4:	43db      	mvns	r3, r3
240082b6:	68ba      	ldr	r2, [r7, #8]
240082b8:	4013      	ands	r3, r2
240082ba:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
240082bc:	4927      	ldr	r1, [pc, #156]	; (2400835c <HAL_EXTI_ClearConfigLine+0x184>)
240082be:	693b      	ldr	r3, [r7, #16]
240082c0:	089b      	lsrs	r3, r3, #2
240082c2:	f003 0303 	and.w	r3, r3, #3
240082c6:	3302      	adds	r3, #2
240082c8:	68ba      	ldr	r2, [r7, #8]
240082ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
240082ce:	687b      	ldr	r3, [r7, #4]
240082d0:	681b      	ldr	r3, [r3, #0]
240082d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
240082d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240082da:	d131      	bne.n	24008340 <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
240082dc:	697b      	ldr	r3, [r7, #20]
240082de:	015a      	lsls	r2, r3, #5
240082e0:	4b1f      	ldr	r3, [pc, #124]	; (24008360 <HAL_EXTI_ClearConfigLine+0x188>)
240082e2:	4413      	add	r3, r2
240082e4:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
240082e6:	69fb      	ldr	r3, [r7, #28]
240082e8:	681a      	ldr	r2, [r3, #0]
240082ea:	68fb      	ldr	r3, [r7, #12]
240082ec:	43db      	mvns	r3, r3
240082ee:	401a      	ands	r2, r3
240082f0:	69fb      	ldr	r3, [r7, #28]
240082f2:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
240082f4:	693b      	ldr	r3, [r7, #16]
240082f6:	2b0f      	cmp	r3, #15
240082f8:	d80a      	bhi.n	24008310 <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
240082fa:	697b      	ldr	r3, [r7, #20]
240082fc:	015a      	lsls	r2, r3, #5
240082fe:	4b19      	ldr	r3, [pc, #100]	; (24008364 <HAL_EXTI_ClearConfigLine+0x18c>)
24008300:	4413      	add	r3, r2
24008302:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
24008304:	2201      	movs	r2, #1
24008306:	693b      	ldr	r3, [r7, #16]
24008308:	fa02 f303 	lsl.w	r3, r2, r3
2400830c:	61bb      	str	r3, [r7, #24]
2400830e:	e00a      	b.n	24008326 <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008310:	697b      	ldr	r3, [r7, #20]
24008312:	015a      	lsls	r2, r3, #5
24008314:	4b14      	ldr	r3, [pc, #80]	; (24008368 <HAL_EXTI_ClearConfigLine+0x190>)
24008316:	4413      	add	r3, r2
24008318:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
2400831a:	693b      	ldr	r3, [r7, #16]
2400831c:	3b10      	subs	r3, #16
2400831e:	2201      	movs	r2, #1
24008320:	fa02 f303 	lsl.w	r3, r2, r3
24008324:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
24008326:	69fb      	ldr	r3, [r7, #28]
24008328:	6819      	ldr	r1, [r3, #0]
2400832a:	69bb      	ldr	r3, [r7, #24]
2400832c:	fb03 f203 	mul.w	r2, r3, r3
24008330:	4613      	mov	r3, r2
24008332:	005b      	lsls	r3, r3, #1
24008334:	4413      	add	r3, r2
24008336:	43db      	mvns	r3, r3
24008338:	ea01 0203 	and.w	r2, r1, r3
2400833c:	69fb      	ldr	r3, [r7, #28]
2400833e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
24008340:	2300      	movs	r3, #0
}
24008342:	4618      	mov	r0, r3
24008344:	3724      	adds	r7, #36	; 0x24
24008346:	46bd      	mov	sp, r7
24008348:	f85d 7b04 	ldr.w	r7, [sp], #4
2400834c:	4770      	bx	lr
2400834e:	bf00      	nop
24008350:	58000080 	.word	0x58000080
24008354:	58000084 	.word	0x58000084
24008358:	58000004 	.word	0x58000004
2400835c:	58000400 	.word	0x58000400
24008360:	5800000c 	.word	0x5800000c
24008364:	58000010 	.word	0x58000010
24008368:	58000014 	.word	0x58000014

2400836c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
2400836c:	b480      	push	{r7}
2400836e:	b087      	sub	sp, #28
24008370:	af00      	add	r7, sp, #0
24008372:	60f8      	str	r0, [r7, #12]
24008374:	460b      	mov	r3, r1
24008376:	607a      	str	r2, [r7, #4]
24008378:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2400837a:	2300      	movs	r3, #0
2400837c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
2400837e:	68fb      	ldr	r3, [r7, #12]
24008380:	2b00      	cmp	r3, #0
24008382:	d101      	bne.n	24008388 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24008384:	2301      	movs	r3, #1
24008386:	e00a      	b.n	2400839e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
24008388:	7afb      	ldrb	r3, [r7, #11]
2400838a:	2b00      	cmp	r3, #0
2400838c:	d103      	bne.n	24008396 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
2400838e:	68fb      	ldr	r3, [r7, #12]
24008390:	687a      	ldr	r2, [r7, #4]
24008392:	605a      	str	r2, [r3, #4]
      break;
24008394:	e002      	b.n	2400839c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
24008396:	2301      	movs	r3, #1
24008398:	75fb      	strb	r3, [r7, #23]
      break;
2400839a:	bf00      	nop
  }

  return status;
2400839c:	7dfb      	ldrb	r3, [r7, #23]
}
2400839e:	4618      	mov	r0, r3
240083a0:	371c      	adds	r7, #28
240083a2:	46bd      	mov	sp, r7
240083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240083a8:	4770      	bx	lr

240083aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
240083aa:	b480      	push	{r7}
240083ac:	b083      	sub	sp, #12
240083ae:	af00      	add	r7, sp, #0
240083b0:	6078      	str	r0, [r7, #4]
240083b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
240083b4:	687b      	ldr	r3, [r7, #4]
240083b6:	2b00      	cmp	r3, #0
240083b8:	d101      	bne.n	240083be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
240083ba:	2301      	movs	r3, #1
240083bc:	e003      	b.n	240083c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
240083be:	687b      	ldr	r3, [r7, #4]
240083c0:	683a      	ldr	r2, [r7, #0]
240083c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
240083c4:	2300      	movs	r3, #0
  }
}
240083c6:	4618      	mov	r0, r3
240083c8:	370c      	adds	r7, #12
240083ca:	46bd      	mov	sp, r7
240083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240083d0:	4770      	bx	lr
	...

240083d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
240083d4:	b580      	push	{r7, lr}
240083d6:	b086      	sub	sp, #24
240083d8:	af00      	add	r7, sp, #0
240083da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240083dc:	687b      	ldr	r3, [r7, #4]
240083de:	681b      	ldr	r3, [r3, #0]
240083e0:	0c1b      	lsrs	r3, r3, #16
240083e2:	f003 0303 	and.w	r3, r3, #3
240083e6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240083e8:	687b      	ldr	r3, [r7, #4]
240083ea:	681b      	ldr	r3, [r3, #0]
240083ec:	f003 031f 	and.w	r3, r3, #31
240083f0:	2201      	movs	r2, #1
240083f2:	fa02 f303 	lsl.w	r3, r2, r3
240083f6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
240083f8:	697b      	ldr	r3, [r7, #20]
240083fa:	011a      	lsls	r2, r3, #4
240083fc:	4b0c      	ldr	r3, [pc, #48]	; (24008430 <HAL_EXTI_IRQHandler+0x5c>)
240083fe:	4413      	add	r3, r2
24008400:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
24008402:	68fb      	ldr	r3, [r7, #12]
24008404:	681b      	ldr	r3, [r3, #0]
24008406:	693a      	ldr	r2, [r7, #16]
24008408:	4013      	ands	r3, r2
2400840a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
2400840c:	68bb      	ldr	r3, [r7, #8]
2400840e:	2b00      	cmp	r3, #0
24008410:	d009      	beq.n	24008426 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
24008412:	68fb      	ldr	r3, [r7, #12]
24008414:	693a      	ldr	r2, [r7, #16]
24008416:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
24008418:	687b      	ldr	r3, [r7, #4]
2400841a:	685b      	ldr	r3, [r3, #4]
2400841c:	2b00      	cmp	r3, #0
2400841e:	d002      	beq.n	24008426 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
24008420:	687b      	ldr	r3, [r7, #4]
24008422:	685b      	ldr	r3, [r3, #4]
24008424:	4798      	blx	r3
    }
  }
}
24008426:	bf00      	nop
24008428:	3718      	adds	r7, #24
2400842a:	46bd      	mov	sp, r7
2400842c:	bd80      	pop	{r7, pc}
2400842e:	bf00      	nop
24008430:	58000088 	.word	0x58000088

24008434 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
24008434:	b480      	push	{r7}
24008436:	b089      	sub	sp, #36	; 0x24
24008438:	af00      	add	r7, sp, #0
2400843a:	6078      	str	r0, [r7, #4]
2400843c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
2400843e:	687b      	ldr	r3, [r7, #4]
24008440:	681b      	ldr	r3, [r3, #0]
24008442:	0c1b      	lsrs	r3, r3, #16
24008444:	f003 0303 	and.w	r3, r3, #3
24008448:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
2400844a:	687b      	ldr	r3, [r7, #4]
2400844c:	681b      	ldr	r3, [r3, #0]
2400844e:	f003 031f 	and.w	r3, r3, #31
24008452:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
24008454:	2201      	movs	r2, #1
24008456:	69bb      	ldr	r3, [r7, #24]
24008458:	fa02 f303 	lsl.w	r3, r2, r3
2400845c:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
2400845e:	69fb      	ldr	r3, [r7, #28]
24008460:	011a      	lsls	r2, r3, #4
24008462:	4b09      	ldr	r3, [pc, #36]	; (24008488 <HAL_EXTI_GetPending+0x54>)
24008464:	4413      	add	r3, r2
24008466:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
24008468:	693b      	ldr	r3, [r7, #16]
2400846a:	681a      	ldr	r2, [r3, #0]
2400846c:	697b      	ldr	r3, [r7, #20]
2400846e:	401a      	ands	r2, r3
24008470:	69bb      	ldr	r3, [r7, #24]
24008472:	fa22 f303 	lsr.w	r3, r2, r3
24008476:	60fb      	str	r3, [r7, #12]
  return regval;
24008478:	68fb      	ldr	r3, [r7, #12]
}
2400847a:	4618      	mov	r0, r3
2400847c:	3724      	adds	r7, #36	; 0x24
2400847e:	46bd      	mov	sp, r7
24008480:	f85d 7b04 	ldr.w	r7, [sp], #4
24008484:	4770      	bx	lr
24008486:	bf00      	nop
24008488:	58000088 	.word	0x58000088

2400848c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
2400848c:	b480      	push	{r7}
2400848e:	b087      	sub	sp, #28
24008490:	af00      	add	r7, sp, #0
24008492:	6078      	str	r0, [r7, #4]
24008494:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008496:	687b      	ldr	r3, [r7, #4]
24008498:	681b      	ldr	r3, [r3, #0]
2400849a:	0c1b      	lsrs	r3, r3, #16
2400849c:	f003 0303 	and.w	r3, r3, #3
240084a0:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240084a2:	687b      	ldr	r3, [r7, #4]
240084a4:	681b      	ldr	r3, [r3, #0]
240084a6:	f003 031f 	and.w	r3, r3, #31
240084aa:	2201      	movs	r2, #1
240084ac:	fa02 f303 	lsl.w	r3, r2, r3
240084b0:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
240084b2:	697b      	ldr	r3, [r7, #20]
240084b4:	011a      	lsls	r2, r3, #4
240084b6:	4b06      	ldr	r3, [pc, #24]	; (240084d0 <HAL_EXTI_ClearPending+0x44>)
240084b8:	4413      	add	r3, r2
240084ba:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
240084bc:	68fb      	ldr	r3, [r7, #12]
240084be:	693a      	ldr	r2, [r7, #16]
240084c0:	601a      	str	r2, [r3, #0]
}
240084c2:	bf00      	nop
240084c4:	371c      	adds	r7, #28
240084c6:	46bd      	mov	sp, r7
240084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240084cc:	4770      	bx	lr
240084ce:	bf00      	nop
240084d0:	58000088 	.word	0x58000088

240084d4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
240084d4:	b480      	push	{r7}
240084d6:	b087      	sub	sp, #28
240084d8:	af00      	add	r7, sp, #0
240084da:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240084dc:	687b      	ldr	r3, [r7, #4]
240084de:	681b      	ldr	r3, [r3, #0]
240084e0:	0c1b      	lsrs	r3, r3, #16
240084e2:	f003 0303 	and.w	r3, r3, #3
240084e6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240084e8:	687b      	ldr	r3, [r7, #4]
240084ea:	681b      	ldr	r3, [r3, #0]
240084ec:	f003 031f 	and.w	r3, r3, #31
240084f0:	2201      	movs	r2, #1
240084f2:	fa02 f303 	lsl.w	r3, r2, r3
240084f6:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
240084f8:	697b      	ldr	r3, [r7, #20]
240084fa:	015a      	lsls	r2, r3, #5
240084fc:	4b05      	ldr	r3, [pc, #20]	; (24008514 <HAL_EXTI_GenerateSWI+0x40>)
240084fe:	4413      	add	r3, r2
24008500:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
24008502:	68fb      	ldr	r3, [r7, #12]
24008504:	693a      	ldr	r2, [r7, #16]
24008506:	601a      	str	r2, [r3, #0]
}
24008508:	bf00      	nop
2400850a:	371c      	adds	r7, #28
2400850c:	46bd      	mov	sp, r7
2400850e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008512:	4770      	bx	lr
24008514:	58000008 	.word	0x58000008

24008518 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
24008518:	b580      	push	{r7, lr}
2400851a:	b08a      	sub	sp, #40	; 0x28
2400851c:	af00      	add	r7, sp, #0
2400851e:	60f8      	str	r0, [r7, #12]
24008520:	60b9      	str	r1, [r7, #8]
24008522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
24008524:	68bb      	ldr	r3, [r7, #8]
24008526:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
24008528:	687b      	ldr	r3, [r7, #4]
2400852a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
2400852c:	2308      	movs	r3, #8
2400852e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008530:	4b40      	ldr	r3, [pc, #256]	; (24008634 <HAL_FLASH_Program+0x11c>)
24008532:	7d1b      	ldrb	r3, [r3, #20]
24008534:	2b01      	cmp	r3, #1
24008536:	d101      	bne.n	2400853c <HAL_FLASH_Program+0x24>
24008538:	2302      	movs	r3, #2
2400853a:	e076      	b.n	2400862a <HAL_FLASH_Program+0x112>
2400853c:	4b3d      	ldr	r3, [pc, #244]	; (24008634 <HAL_FLASH_Program+0x11c>)
2400853e:	2201      	movs	r2, #1
24008540:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
24008542:	68bb      	ldr	r3, [r7, #8]
24008544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008548:	d306      	bcc.n	24008558 <HAL_FLASH_Program+0x40>
2400854a:	68bb      	ldr	r3, [r7, #8]
2400854c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
24008550:	d202      	bcs.n	24008558 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
24008552:	2301      	movs	r3, #1
24008554:	61bb      	str	r3, [r7, #24]
24008556:	e00c      	b.n	24008572 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
24008558:	68bb      	ldr	r3, [r7, #8]
2400855a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
2400855e:	d306      	bcc.n	2400856e <HAL_FLASH_Program+0x56>
24008560:	68bb      	ldr	r3, [r7, #8]
24008562:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
24008566:	d202      	bcs.n	2400856e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
24008568:	2302      	movs	r3, #2
2400856a:	61bb      	str	r3, [r7, #24]
2400856c:	e001      	b.n	24008572 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
2400856e:	2301      	movs	r3, #1
24008570:	e05b      	b.n	2400862a <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008572:	4b30      	ldr	r3, [pc, #192]	; (24008634 <HAL_FLASH_Program+0x11c>)
24008574:	2200      	movs	r2, #0
24008576:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008578:	69b9      	ldr	r1, [r7, #24]
2400857a:	f24c 3050 	movw	r0, #50000	; 0xc350
2400857e:	f000 fb33 	bl	24008be8 <FLASH_WaitForLastOperation>
24008582:	4603      	mov	r3, r0
24008584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
24008588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400858c:	2b00      	cmp	r3, #0
2400858e:	d147      	bne.n	24008620 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
24008590:	69bb      	ldr	r3, [r7, #24]
24008592:	2b01      	cmp	r3, #1
24008594:	d106      	bne.n	240085a4 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
24008596:	4b28      	ldr	r3, [pc, #160]	; (24008638 <HAL_FLASH_Program+0x120>)
24008598:	68db      	ldr	r3, [r3, #12]
2400859a:	4a27      	ldr	r2, [pc, #156]	; (24008638 <HAL_FLASH_Program+0x120>)
2400859c:	f043 0302 	orr.w	r3, r3, #2
240085a0:	60d3      	str	r3, [r2, #12]
240085a2:	e007      	b.n	240085b4 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
240085a4:	4b24      	ldr	r3, [pc, #144]	; (24008638 <HAL_FLASH_Program+0x120>)
240085a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240085aa:	4a23      	ldr	r2, [pc, #140]	; (24008638 <HAL_FLASH_Program+0x120>)
240085ac:	f043 0302 	orr.w	r3, r3, #2
240085b0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
240085b4:	f3bf 8f6f 	isb	sy
}
240085b8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240085ba:	f3bf 8f4f 	dsb	sy
}
240085be:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
240085c0:	69fb      	ldr	r3, [r7, #28]
240085c2:	681a      	ldr	r2, [r3, #0]
240085c4:	6a3b      	ldr	r3, [r7, #32]
240085c6:	601a      	str	r2, [r3, #0]
        dest_addr++;
240085c8:	6a3b      	ldr	r3, [r7, #32]
240085ca:	3304      	adds	r3, #4
240085cc:	623b      	str	r3, [r7, #32]
        src_addr++;
240085ce:	69fb      	ldr	r3, [r7, #28]
240085d0:	3304      	adds	r3, #4
240085d2:	61fb      	str	r3, [r7, #28]
        row_index--;
240085d4:	7dfb      	ldrb	r3, [r7, #23]
240085d6:	3b01      	subs	r3, #1
240085d8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
240085da:	7dfb      	ldrb	r3, [r7, #23]
240085dc:	2b00      	cmp	r3, #0
240085de:	d1ef      	bne.n	240085c0 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
240085e0:	f3bf 8f6f 	isb	sy
}
240085e4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240085e6:	f3bf 8f4f 	dsb	sy
}
240085ea:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
240085ec:	69b9      	ldr	r1, [r7, #24]
240085ee:	f24c 3050 	movw	r0, #50000	; 0xc350
240085f2:	f000 faf9 	bl	24008be8 <FLASH_WaitForLastOperation>
240085f6:	4603      	mov	r3, r0
240085f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
240085fc:	69bb      	ldr	r3, [r7, #24]
240085fe:	2b01      	cmp	r3, #1
24008600:	d106      	bne.n	24008610 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
24008602:	4b0d      	ldr	r3, [pc, #52]	; (24008638 <HAL_FLASH_Program+0x120>)
24008604:	68db      	ldr	r3, [r3, #12]
24008606:	4a0c      	ldr	r2, [pc, #48]	; (24008638 <HAL_FLASH_Program+0x120>)
24008608:	f023 0302 	bic.w	r3, r3, #2
2400860c:	60d3      	str	r3, [r2, #12]
2400860e:	e007      	b.n	24008620 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
24008610:	4b09      	ldr	r3, [pc, #36]	; (24008638 <HAL_FLASH_Program+0x120>)
24008612:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008616:	4a08      	ldr	r2, [pc, #32]	; (24008638 <HAL_FLASH_Program+0x120>)
24008618:	f023 0302 	bic.w	r3, r3, #2
2400861c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008620:	4b04      	ldr	r3, [pc, #16]	; (24008634 <HAL_FLASH_Program+0x11c>)
24008622:	2200      	movs	r2, #0
24008624:	751a      	strb	r2, [r3, #20]

  return status;
24008626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2400862a:	4618      	mov	r0, r3
2400862c:	3728      	adds	r7, #40	; 0x28
2400862e:	46bd      	mov	sp, r7
24008630:	bd80      	pop	{r7, pc}
24008632:	bf00      	nop
24008634:	24000618 	.word	0x24000618
24008638:	52002000 	.word	0x52002000

2400863c <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
2400863c:	b580      	push	{r7, lr}
2400863e:	b088      	sub	sp, #32
24008640:	af00      	add	r7, sp, #0
24008642:	60f8      	str	r0, [r7, #12]
24008644:	60b9      	str	r1, [r7, #8]
24008646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
24008648:	68bb      	ldr	r3, [r7, #8]
2400864a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
2400864c:	687b      	ldr	r3, [r7, #4]
2400864e:	61bb      	str	r3, [r7, #24]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
24008650:	2308      	movs	r3, #8
24008652:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008654:	4b3d      	ldr	r3, [pc, #244]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
24008656:	7d1b      	ldrb	r3, [r3, #20]
24008658:	2b01      	cmp	r3, #1
2400865a:	d101      	bne.n	24008660 <HAL_FLASH_Program_IT+0x24>
2400865c:	2302      	movs	r3, #2
2400865e:	e071      	b.n	24008744 <HAL_FLASH_Program_IT+0x108>
24008660:	4b3a      	ldr	r3, [pc, #232]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
24008662:	2201      	movs	r2, #1
24008664:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008666:	4b39      	ldr	r3, [pc, #228]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
24008668:	2200      	movs	r2, #0
2400866a:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
2400866c:	68bb      	ldr	r3, [r7, #8]
2400866e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008672:	d306      	bcc.n	24008682 <HAL_FLASH_Program_IT+0x46>
24008674:	68bb      	ldr	r3, [r7, #8]
24008676:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
2400867a:	d202      	bcs.n	24008682 <HAL_FLASH_Program_IT+0x46>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
2400867c:	2301      	movs	r3, #1
2400867e:	617b      	str	r3, [r7, #20]
24008680:	e00c      	b.n	2400869c <HAL_FLASH_Program_IT+0x60>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
24008682:	68bb      	ldr	r3, [r7, #8]
24008684:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
24008688:	d306      	bcc.n	24008698 <HAL_FLASH_Program_IT+0x5c>
2400868a:	68bb      	ldr	r3, [r7, #8]
2400868c:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
24008690:	d202      	bcs.n	24008698 <HAL_FLASH_Program_IT+0x5c>
  {
    bank = FLASH_BANK_2;
24008692:	2302      	movs	r3, #2
24008694:	617b      	str	r3, [r7, #20]
24008696:	e001      	b.n	2400869c <HAL_FLASH_Program_IT+0x60>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
24008698:	2301      	movs	r3, #1
2400869a:	e053      	b.n	24008744 <HAL_FLASH_Program_IT+0x108>
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
2400869c:	6979      	ldr	r1, [r7, #20]
2400869e:	f24c 3050 	movw	r0, #50000	; 0xc350
240086a2:	f000 faa1 	bl	24008be8 <FLASH_WaitForLastOperation>
240086a6:	4603      	mov	r3, r0
240086a8:	74bb      	strb	r3, [r7, #18]

  if (status != HAL_OK)
240086aa:	7cbb      	ldrb	r3, [r7, #18]
240086ac:	2b00      	cmp	r3, #0
240086ae:	d003      	beq.n	240086b8 <HAL_FLASH_Program_IT+0x7c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
240086b0:	4b26      	ldr	r3, [pc, #152]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
240086b2:	2200      	movs	r2, #0
240086b4:	751a      	strb	r2, [r3, #20]
240086b6:	e044      	b.n	24008742 <HAL_FLASH_Program_IT+0x106>
  }
  else
  {
    pFlash.Address = FlashAddress;
240086b8:	4a24      	ldr	r2, [pc, #144]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
240086ba:	68bb      	ldr	r3, [r7, #8]
240086bc:	6113      	str	r3, [r2, #16]

#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
240086be:	697b      	ldr	r3, [r7, #20]
240086c0:	2b01      	cmp	r3, #1
240086c2:	d10f      	bne.n	240086e4 <HAL_FLASH_Program_IT+0xa8>
    {
      /* Set internal variables used by the IRQ handler */
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
240086c4:	4b21      	ldr	r3, [pc, #132]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
240086c6:	2203      	movs	r2, #3
240086c8:	701a      	strb	r2, [r3, #0]
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
240086ca:	4b21      	ldr	r3, [pc, #132]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086cc:	68db      	ldr	r3, [r3, #12]
240086ce:	4a20      	ldr	r2, [pc, #128]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086d0:	f043 0302 	orr.w	r3, r3, #2
240086d4:	60d3      	str	r3, [r2, #12]
      }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
240086d6:	4b1e      	ldr	r3, [pc, #120]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086d8:	68db      	ldr	r3, [r3, #12]
240086da:	4a1d      	ldr	r2, [pc, #116]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086dc:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
240086e0:	60d3      	str	r3, [r2, #12]
240086e2:	e012      	b.n	2400870a <HAL_FLASH_Program_IT+0xce>
#endif /* FLASH_CR_OPERRIE */
    }
    else
    {
      /* Set internal variables used by the IRQ handler */
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK2;
240086e4:	4b19      	ldr	r3, [pc, #100]	; (2400874c <HAL_FLASH_Program_IT+0x110>)
240086e6:	2206      	movs	r2, #6
240086e8:	701a      	strb	r2, [r3, #0]

      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
240086ea:	4b19      	ldr	r3, [pc, #100]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240086f0:	4a17      	ldr	r2, [pc, #92]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086f2:	f043 0302 	orr.w	r3, r3, #2
240086f6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Enable End of Operation and Error interrupts for Bank2 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
240086fa:	4b15      	ldr	r3, [pc, #84]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
240086fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008700:	4a13      	ldr	r2, [pc, #76]	; (24008750 <HAL_FLASH_Program_IT+0x114>)
24008702:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24008706:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
2400870a:	f3bf 8f6f 	isb	sy
}
2400870e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24008710:	f3bf 8f4f 	dsb	sy
}
24008714:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
24008716:	69bb      	ldr	r3, [r7, #24]
24008718:	681a      	ldr	r2, [r3, #0]
2400871a:	69fb      	ldr	r3, [r7, #28]
2400871c:	601a      	str	r2, [r3, #0]
        dest_addr++;
2400871e:	69fb      	ldr	r3, [r7, #28]
24008720:	3304      	adds	r3, #4
24008722:	61fb      	str	r3, [r7, #28]
        src_addr++;
24008724:	69bb      	ldr	r3, [r7, #24]
24008726:	3304      	adds	r3, #4
24008728:	61bb      	str	r3, [r7, #24]
        row_index--;
2400872a:	7cfb      	ldrb	r3, [r7, #19]
2400872c:	3b01      	subs	r3, #1
2400872e:	74fb      	strb	r3, [r7, #19]
      } while (row_index != 0U);
24008730:	7cfb      	ldrb	r3, [r7, #19]
24008732:	2b00      	cmp	r3, #0
24008734:	d1ef      	bne.n	24008716 <HAL_FLASH_Program_IT+0xda>
  __ASM volatile ("isb 0xF":::"memory");
24008736:	f3bf 8f6f 	isb	sy
}
2400873a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400873c:	f3bf 8f4f 	dsb	sy
}
24008740:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
24008742:	7cbb      	ldrb	r3, [r7, #18]
}
24008744:	4618      	mov	r0, r3
24008746:	3720      	adds	r7, #32
24008748:	46bd      	mov	sp, r7
2400874a:	bd80      	pop	{r7, pc}
2400874c:	24000618 	.word	0x24000618
24008750:	52002000 	.word	0x52002000

24008754 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
24008754:	b580      	push	{r7, lr}
24008756:	b084      	sub	sp, #16
24008758:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
2400875a:	4b95      	ldr	r3, [pc, #596]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
2400875c:	691b      	ldr	r3, [r3, #16]
2400875e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008766:	d15c      	bne.n	24008822 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
24008768:	4b92      	ldr	r3, [pc, #584]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400876a:	781b      	ldrb	r3, [r3, #0]
2400876c:	b2db      	uxtb	r3, r3
2400876e:	2b01      	cmp	r3, #1
24008770:	d132      	bne.n	240087d8 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
24008772:	4b90      	ldr	r3, [pc, #576]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008774:	685b      	ldr	r3, [r3, #4]
24008776:	3b01      	subs	r3, #1
24008778:	4a8e      	ldr	r2, [pc, #568]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400877a:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
2400877c:	4b8d      	ldr	r3, [pc, #564]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400877e:	685b      	ldr	r3, [r3, #4]
24008780:	2b00      	cmp	r3, #0
24008782:	d018      	beq.n	240087b6 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24008784:	4b8b      	ldr	r3, [pc, #556]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008786:	68db      	ldr	r3, [r3, #12]
24008788:	4618      	mov	r0, r3
2400878a:	f000 f93d 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400878e:	4b88      	ldr	r3, [pc, #544]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
24008790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008794:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
24008796:	4b87      	ldr	r3, [pc, #540]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008798:	68db      	ldr	r3, [r3, #12]
2400879a:	3301      	adds	r3, #1
2400879c:	4a85      	ldr	r2, [pc, #532]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400879e:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
240087a0:	4b84      	ldr	r3, [pc, #528]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087a2:	68db      	ldr	r3, [r3, #12]
240087a4:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
240087a6:	4b83      	ldr	r3, [pc, #524]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087a8:	689b      	ldr	r3, [r3, #8]
240087aa:	461a      	mov	r2, r3
240087ac:	2101      	movs	r1, #1
240087ae:	68f8      	ldr	r0, [r7, #12]
240087b0:	f000 ff9e 	bl	240096f0 <FLASH_Erase_Sector>
240087b4:	e035      	b.n	24008822 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
240087b6:	4b7f      	ldr	r3, [pc, #508]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087b8:	f04f 32ff 	mov.w	r2, #4294967295
240087bc:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240087be:	4b7d      	ldr	r3, [pc, #500]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087c0:	2200      	movs	r2, #0
240087c2:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
240087c4:	4b7b      	ldr	r3, [pc, #492]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087c6:	68db      	ldr	r3, [r3, #12]
240087c8:	4618      	mov	r0, r3
240087ca:	f000 f91d 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
240087ce:	4b78      	ldr	r3, [pc, #480]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
240087d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240087d4:	615a      	str	r2, [r3, #20]
240087d6:	e024      	b.n	24008822 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
240087d8:	4b76      	ldr	r3, [pc, #472]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087da:	781b      	ldrb	r3, [r3, #0]
240087dc:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
240087de:	7afb      	ldrb	r3, [r7, #11]
240087e0:	2b02      	cmp	r3, #2
240087e2:	d002      	beq.n	240087ea <HAL_FLASH_IRQHandler+0x96>
240087e4:	7afb      	ldrb	r3, [r7, #11]
240087e6:	2b07      	cmp	r3, #7
240087e8:	d103      	bne.n	240087f2 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
240087ea:	2001      	movs	r0, #1
240087ec:	f000 f90c 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>
240087f0:	e007      	b.n	24008802 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
240087f2:	7afb      	ldrb	r3, [r7, #11]
240087f4:	2b03      	cmp	r3, #3
240087f6:	d104      	bne.n	24008802 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
240087f8:	4b6e      	ldr	r3, [pc, #440]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240087fa:	691b      	ldr	r3, [r3, #16]
240087fc:	4618      	mov	r0, r3
240087fe:	f000 f903 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
24008802:	7afb      	ldrb	r3, [r7, #11]
24008804:	2b04      	cmp	r3, #4
24008806:	d00c      	beq.n	24008822 <HAL_FLASH_IRQHandler+0xce>
24008808:	7afb      	ldrb	r3, [r7, #11]
2400880a:	2b05      	cmp	r3, #5
2400880c:	d009      	beq.n	24008822 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
2400880e:	7afb      	ldrb	r3, [r7, #11]
24008810:	2b06      	cmp	r3, #6
24008812:	d006      	beq.n	24008822 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24008814:	4b67      	ldr	r3, [pc, #412]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008816:	2200      	movs	r2, #0
24008818:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400881a:	4b65      	ldr	r3, [pc, #404]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
2400881c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008820:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
24008822:	4b63      	ldr	r3, [pc, #396]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
24008824:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24008828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400882c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008830:	d15f      	bne.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
24008832:	4b60      	ldr	r3, [pc, #384]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008834:	781b      	ldrb	r3, [r3, #0]
24008836:	b2db      	uxtb	r3, r3
24008838:	2b04      	cmp	r3, #4
2400883a:	d134      	bne.n	240088a6 <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
2400883c:	4b5d      	ldr	r3, [pc, #372]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400883e:	685b      	ldr	r3, [r3, #4]
24008840:	3b01      	subs	r3, #1
24008842:	4a5c      	ldr	r2, [pc, #368]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008844:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
24008846:	4b5b      	ldr	r3, [pc, #364]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008848:	685b      	ldr	r3, [r3, #4]
2400884a:	2b00      	cmp	r3, #0
2400884c:	d019      	beq.n	24008882 <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
2400884e:	4b59      	ldr	r3, [pc, #356]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008850:	68db      	ldr	r3, [r3, #12]
24008852:	4618      	mov	r0, r3
24008854:	f000 f8d8 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
24008858:	4b55      	ldr	r3, [pc, #340]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
2400885a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2400885e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
24008862:	4b54      	ldr	r3, [pc, #336]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008864:	68db      	ldr	r3, [r3, #12]
24008866:	3301      	adds	r3, #1
24008868:	4a52      	ldr	r2, [pc, #328]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400886a:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
2400886c:	4b51      	ldr	r3, [pc, #324]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400886e:	68db      	ldr	r3, [r3, #12]
24008870:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
24008872:	4b50      	ldr	r3, [pc, #320]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008874:	689b      	ldr	r3, [r3, #8]
24008876:	461a      	mov	r2, r3
24008878:	2102      	movs	r1, #2
2400887a:	68f8      	ldr	r0, [r7, #12]
2400887c:	f000 ff38 	bl	240096f0 <FLASH_Erase_Sector>
24008880:	e037      	b.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
24008882:	4b4c      	ldr	r3, [pc, #304]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008884:	f04f 32ff 	mov.w	r2, #4294967295
24008888:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2400888a:	4b4a      	ldr	r3, [pc, #296]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400888c:	2200      	movs	r2, #0
2400888e:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24008890:	4b48      	ldr	r3, [pc, #288]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008892:	68db      	ldr	r3, [r3, #12]
24008894:	4618      	mov	r0, r3
24008896:	f000 f8b7 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
2400889a:	4b45      	ldr	r3, [pc, #276]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
2400889c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240088a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
240088a4:	e025      	b.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
240088a6:	4b43      	ldr	r3, [pc, #268]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240088a8:	781b      	ldrb	r3, [r3, #0]
240088aa:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
240088ac:	7afb      	ldrb	r3, [r7, #11]
240088ae:	2b05      	cmp	r3, #5
240088b0:	d002      	beq.n	240088b8 <HAL_FLASH_IRQHandler+0x164>
240088b2:	7afb      	ldrb	r3, [r7, #11]
240088b4:	2b07      	cmp	r3, #7
240088b6:	d103      	bne.n	240088c0 <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
240088b8:	2002      	movs	r0, #2
240088ba:	f000 f8a5 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>
240088be:	e007      	b.n	240088d0 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
240088c0:	7afb      	ldrb	r3, [r7, #11]
240088c2:	2b06      	cmp	r3, #6
240088c4:	d104      	bne.n	240088d0 <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
240088c6:	4b3b      	ldr	r3, [pc, #236]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240088c8:	691b      	ldr	r3, [r3, #16]
240088ca:	4618      	mov	r0, r3
240088cc:	f000 f89c 	bl	24008a08 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
240088d0:	7afb      	ldrb	r3, [r7, #11]
240088d2:	2b01      	cmp	r3, #1
240088d4:	d00d      	beq.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
240088d6:	7afb      	ldrb	r3, [r7, #11]
240088d8:	2b02      	cmp	r3, #2
240088da:	d00a      	beq.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
240088dc:	7afb      	ldrb	r3, [r7, #11]
240088de:	2b03      	cmp	r3, #3
240088e0:	d007      	beq.n	240088f2 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240088e2:	4b34      	ldr	r3, [pc, #208]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
240088e4:	2200      	movs	r2, #0
240088e6:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
240088e8:	4b31      	ldr	r3, [pc, #196]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
240088ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240088ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
240088f2:	4b2f      	ldr	r3, [pc, #188]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
240088f4:	691b      	ldr	r3, [r3, #16]
240088f6:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
240088fa:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
240088fc:	687b      	ldr	r3, [r7, #4]
240088fe:	2b00      	cmp	r3, #0
24008900:	d028      	beq.n	24008954 <HAL_FLASH_IRQHandler+0x200>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
24008902:	4b2c      	ldr	r3, [pc, #176]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008904:	699a      	ldr	r2, [r3, #24]
24008906:	687b      	ldr	r3, [r7, #4]
24008908:	4313      	orrs	r3, r2
2400890a:	4a2a      	ldr	r2, [pc, #168]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400890c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
2400890e:	4a28      	ldr	r2, [pc, #160]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
24008910:	687b      	ldr	r3, [r7, #4]
24008912:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
24008914:	4b27      	ldr	r3, [pc, #156]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008916:	781b      	ldrb	r3, [r3, #0]
24008918:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
2400891a:	7afb      	ldrb	r3, [r7, #11]
2400891c:	2b01      	cmp	r3, #1
2400891e:	d107      	bne.n	24008930 <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
24008920:	4b24      	ldr	r3, [pc, #144]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008922:	68db      	ldr	r3, [r3, #12]
24008924:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
24008926:	4b23      	ldr	r3, [pc, #140]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008928:	f04f 32ff 	mov.w	r2, #4294967295
2400892c:	60da      	str	r2, [r3, #12]
2400892e:	e00b      	b.n	24008948 <HAL_FLASH_IRQHandler+0x1f4>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24008930:	7afb      	ldrb	r3, [r7, #11]
24008932:	2b02      	cmp	r3, #2
24008934:	d002      	beq.n	2400893c <HAL_FLASH_IRQHandler+0x1e8>
24008936:	7afb      	ldrb	r3, [r7, #11]
24008938:	2b07      	cmp	r3, #7
2400893a:	d102      	bne.n	24008942 <HAL_FLASH_IRQHandler+0x1ee>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
2400893c:	2301      	movs	r3, #1
2400893e:	60fb      	str	r3, [r7, #12]
24008940:	e002      	b.n	24008948 <HAL_FLASH_IRQHandler+0x1f4>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
24008942:	4b1c      	ldr	r3, [pc, #112]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008944:	691b      	ldr	r3, [r3, #16]
24008946:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24008948:	4b1a      	ldr	r3, [pc, #104]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
2400894a:	2200      	movs	r2, #0
2400894c:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
2400894e:	68f8      	ldr	r0, [r7, #12]
24008950:	f000 f864 	bl	24008a1c <HAL_FLASH_OperationErrorCallback>
  }

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
24008954:	4b16      	ldr	r3, [pc, #88]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
24008956:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
2400895a:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
2400895e:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
24008960:	687b      	ldr	r3, [r7, #4]
24008962:	2b00      	cmp	r3, #0
24008964:	d031      	beq.n	240089ca <HAL_FLASH_IRQHandler+0x276>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
24008966:	4b13      	ldr	r3, [pc, #76]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008968:	699a      	ldr	r2, [r3, #24]
2400896a:	687b      	ldr	r3, [r7, #4]
2400896c:	4313      	orrs	r3, r2
2400896e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24008972:	4a10      	ldr	r2, [pc, #64]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008974:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
24008976:	4a0e      	ldr	r2, [pc, #56]	; (240089b0 <HAL_FLASH_IRQHandler+0x25c>)
24008978:	687b      	ldr	r3, [r7, #4]
2400897a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400897e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
24008982:	4b0c      	ldr	r3, [pc, #48]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008984:	781b      	ldrb	r3, [r3, #0]
24008986:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
24008988:	7afb      	ldrb	r3, [r7, #11]
2400898a:	2b04      	cmp	r3, #4
2400898c:	d107      	bne.n	2400899e <HAL_FLASH_IRQHandler+0x24a>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
2400898e:	4b09      	ldr	r3, [pc, #36]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008990:	68db      	ldr	r3, [r3, #12]
24008992:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
24008994:	4b07      	ldr	r3, [pc, #28]	; (240089b4 <HAL_FLASH_IRQHandler+0x260>)
24008996:	f04f 32ff 	mov.w	r2, #4294967295
2400899a:	60da      	str	r2, [r3, #12]
2400899c:	e00f      	b.n	240089be <HAL_FLASH_IRQHandler+0x26a>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
2400899e:	7afb      	ldrb	r3, [r7, #11]
240089a0:	2b05      	cmp	r3, #5
240089a2:	d002      	beq.n	240089aa <HAL_FLASH_IRQHandler+0x256>
240089a4:	7afb      	ldrb	r3, [r7, #11]
240089a6:	2b07      	cmp	r3, #7
240089a8:	d106      	bne.n	240089b8 <HAL_FLASH_IRQHandler+0x264>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
240089aa:	2302      	movs	r3, #2
240089ac:	60fb      	str	r3, [r7, #12]
240089ae:	e006      	b.n	240089be <HAL_FLASH_IRQHandler+0x26a>
240089b0:	52002000 	.word	0x52002000
240089b4:	24000618 	.word	0x24000618
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
240089b8:	4b11      	ldr	r3, [pc, #68]	; (24008a00 <HAL_FLASH_IRQHandler+0x2ac>)
240089ba:	691b      	ldr	r3, [r3, #16]
240089bc:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240089be:	4b10      	ldr	r3, [pc, #64]	; (24008a00 <HAL_FLASH_IRQHandler+0x2ac>)
240089c0:	2200      	movs	r2, #0
240089c2:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
240089c4:	68f8      	ldr	r0, [r7, #12]
240089c6:	f000 f829 	bl	24008a1c <HAL_FLASH_OperationErrorCallback>
  }
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
240089ca:	4b0d      	ldr	r3, [pc, #52]	; (24008a00 <HAL_FLASH_IRQHandler+0x2ac>)
240089cc:	781b      	ldrb	r3, [r3, #0]
240089ce:	b2db      	uxtb	r3, r3
240089d0:	2b00      	cmp	r3, #0
240089d2:	d110      	bne.n	240089f6 <HAL_FLASH_IRQHandler+0x2a2>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
240089d4:	4b0b      	ldr	r3, [pc, #44]	; (24008a04 <HAL_FLASH_IRQHandler+0x2b0>)
240089d6:	68db      	ldr	r3, [r3, #12]
240089d8:	4a0a      	ldr	r2, [pc, #40]	; (24008a04 <HAL_FLASH_IRQHandler+0x2b0>)
240089da:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
240089de:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
240089e0:	4b08      	ldr	r3, [pc, #32]	; (24008a04 <HAL_FLASH_IRQHandler+0x2b0>)
240089e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240089e6:	4a07      	ldr	r2, [pc, #28]	; (24008a04 <HAL_FLASH_IRQHandler+0x2b0>)
240089e8:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
240089ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
240089f0:	4b03      	ldr	r3, [pc, #12]	; (24008a00 <HAL_FLASH_IRQHandler+0x2ac>)
240089f2:	2200      	movs	r2, #0
240089f4:	751a      	strb	r2, [r3, #20]
  }
}
240089f6:	bf00      	nop
240089f8:	3710      	adds	r7, #16
240089fa:	46bd      	mov	sp, r7
240089fc:	bd80      	pop	{r7, pc}
240089fe:	bf00      	nop
24008a00:	24000618 	.word	0x24000618
24008a04:	52002000 	.word	0x52002000

24008a08 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
24008a08:	b480      	push	{r7}
24008a0a:	b083      	sub	sp, #12
24008a0c:	af00      	add	r7, sp, #0
24008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
24008a10:	bf00      	nop
24008a12:	370c      	adds	r7, #12
24008a14:	46bd      	mov	sp, r7
24008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
24008a1a:	4770      	bx	lr

24008a1c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
24008a1c:	b480      	push	{r7}
24008a1e:	b083      	sub	sp, #12
24008a20:	af00      	add	r7, sp, #0
24008a22:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
24008a24:	bf00      	nop
24008a26:	370c      	adds	r7, #12
24008a28:	46bd      	mov	sp, r7
24008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24008a2e:	4770      	bx	lr

24008a30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
24008a30:	b480      	push	{r7}
24008a32:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008a34:	4b18      	ldr	r3, [pc, #96]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a36:	68db      	ldr	r3, [r3, #12]
24008a38:	f003 0301 	and.w	r3, r3, #1
24008a3c:	2b00      	cmp	r3, #0
24008a3e:	d00d      	beq.n	24008a5c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
24008a40:	4b15      	ldr	r3, [pc, #84]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a42:	4a16      	ldr	r2, [pc, #88]	; (24008a9c <HAL_FLASH_Unlock+0x6c>)
24008a44:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24008a46:	4b14      	ldr	r3, [pc, #80]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a48:	4a15      	ldr	r2, [pc, #84]	; (24008aa0 <HAL_FLASH_Unlock+0x70>)
24008a4a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008a4c:	4b12      	ldr	r3, [pc, #72]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a4e:	68db      	ldr	r3, [r3, #12]
24008a50:	f003 0301 	and.w	r3, r3, #1
24008a54:	2b00      	cmp	r3, #0
24008a56:	d001      	beq.n	24008a5c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
24008a58:	2301      	movs	r3, #1
24008a5a:	e018      	b.n	24008a8e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
24008a5c:	4b0e      	ldr	r3, [pc, #56]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008a62:	f003 0301 	and.w	r3, r3, #1
24008a66:	2b00      	cmp	r3, #0
24008a68:	d010      	beq.n	24008a8c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
24008a6a:	4b0b      	ldr	r3, [pc, #44]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a6c:	4a0b      	ldr	r2, [pc, #44]	; (24008a9c <HAL_FLASH_Unlock+0x6c>)
24008a6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
24008a72:	4b09      	ldr	r3, [pc, #36]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a74:	4a0a      	ldr	r2, [pc, #40]	; (24008aa0 <HAL_FLASH_Unlock+0x70>)
24008a76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
24008a7a:	4b07      	ldr	r3, [pc, #28]	; (24008a98 <HAL_FLASH_Unlock+0x68>)
24008a7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008a80:	f003 0301 	and.w	r3, r3, #1
24008a84:	2b00      	cmp	r3, #0
24008a86:	d001      	beq.n	24008a8c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
24008a88:	2301      	movs	r3, #1
24008a8a:	e000      	b.n	24008a8e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008a8c:	2300      	movs	r3, #0
}
24008a8e:	4618      	mov	r0, r3
24008a90:	46bd      	mov	sp, r7
24008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
24008a96:	4770      	bx	lr
24008a98:	52002000 	.word	0x52002000
24008a9c:	45670123 	.word	0x45670123
24008aa0:	cdef89ab 	.word	0xcdef89ab

24008aa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
24008aa4:	b480      	push	{r7}
24008aa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24008aa8:	4b12      	ldr	r3, [pc, #72]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008aaa:	68db      	ldr	r3, [r3, #12]
24008aac:	4a11      	ldr	r2, [pc, #68]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008aae:	f043 0301 	orr.w	r3, r3, #1
24008ab2:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
24008ab4:	4b0f      	ldr	r3, [pc, #60]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008ab6:	68db      	ldr	r3, [r3, #12]
24008ab8:	f003 0301 	and.w	r3, r3, #1
24008abc:	2b00      	cmp	r3, #0
24008abe:	d101      	bne.n	24008ac4 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
24008ac0:	2301      	movs	r3, #1
24008ac2:	e011      	b.n	24008ae8 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
24008ac4:	4b0b      	ldr	r3, [pc, #44]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008ac6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008aca:	4a0a      	ldr	r2, [pc, #40]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008acc:	f043 0301 	orr.w	r3, r3, #1
24008ad0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
24008ad4:	4b07      	ldr	r3, [pc, #28]	; (24008af4 <HAL_FLASH_Lock+0x50>)
24008ad6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008ada:	f003 0301 	and.w	r3, r3, #1
24008ade:	2b00      	cmp	r3, #0
24008ae0:	d101      	bne.n	24008ae6 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
24008ae2:	2301      	movs	r3, #1
24008ae4:	e000      	b.n	24008ae8 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008ae6:	2300      	movs	r3, #0
}
24008ae8:	4618      	mov	r0, r3
24008aea:	46bd      	mov	sp, r7
24008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
24008af0:	4770      	bx	lr
24008af2:	bf00      	nop
24008af4:	52002000 	.word	0x52002000

24008af8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
24008af8:	b480      	push	{r7}
24008afa:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
24008afc:	4b0c      	ldr	r3, [pc, #48]	; (24008b30 <HAL_FLASH_OB_Unlock+0x38>)
24008afe:	699b      	ldr	r3, [r3, #24]
24008b00:	f003 0301 	and.w	r3, r3, #1
24008b04:	2b00      	cmp	r3, #0
24008b06:	d00d      	beq.n	24008b24 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
24008b08:	4b09      	ldr	r3, [pc, #36]	; (24008b30 <HAL_FLASH_OB_Unlock+0x38>)
24008b0a:	4a0a      	ldr	r2, [pc, #40]	; (24008b34 <HAL_FLASH_OB_Unlock+0x3c>)
24008b0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
24008b0e:	4b08      	ldr	r3, [pc, #32]	; (24008b30 <HAL_FLASH_OB_Unlock+0x38>)
24008b10:	4a09      	ldr	r2, [pc, #36]	; (24008b38 <HAL_FLASH_OB_Unlock+0x40>)
24008b12:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
24008b14:	4b06      	ldr	r3, [pc, #24]	; (24008b30 <HAL_FLASH_OB_Unlock+0x38>)
24008b16:	699b      	ldr	r3, [r3, #24]
24008b18:	f003 0301 	and.w	r3, r3, #1
24008b1c:	2b00      	cmp	r3, #0
24008b1e:	d001      	beq.n	24008b24 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
24008b20:	2301      	movs	r3, #1
24008b22:	e000      	b.n	24008b26 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
24008b24:	2300      	movs	r3, #0
}
24008b26:	4618      	mov	r0, r3
24008b28:	46bd      	mov	sp, r7
24008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24008b2e:	4770      	bx	lr
24008b30:	52002000 	.word	0x52002000
24008b34:	08192a3b 	.word	0x08192a3b
24008b38:	4c5d6e7f 	.word	0x4c5d6e7f

24008b3c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
24008b3c:	b480      	push	{r7}
24008b3e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
24008b40:	4b09      	ldr	r3, [pc, #36]	; (24008b68 <HAL_FLASH_OB_Lock+0x2c>)
24008b42:	699b      	ldr	r3, [r3, #24]
24008b44:	4a08      	ldr	r2, [pc, #32]	; (24008b68 <HAL_FLASH_OB_Lock+0x2c>)
24008b46:	f043 0301 	orr.w	r3, r3, #1
24008b4a:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
24008b4c:	4b06      	ldr	r3, [pc, #24]	; (24008b68 <HAL_FLASH_OB_Lock+0x2c>)
24008b4e:	699b      	ldr	r3, [r3, #24]
24008b50:	f003 0301 	and.w	r3, r3, #1
24008b54:	2b00      	cmp	r3, #0
24008b56:	d101      	bne.n	24008b5c <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
24008b58:	2301      	movs	r3, #1
24008b5a:	e000      	b.n	24008b5e <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
24008b5c:	2300      	movs	r3, #0
}
24008b5e:	4618      	mov	r0, r3
24008b60:	46bd      	mov	sp, r7
24008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
24008b66:	4770      	bx	lr
24008b68:	52002000 	.word	0x52002000

24008b6c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
24008b6c:	b580      	push	{r7, lr}
24008b6e:	b082      	sub	sp, #8
24008b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008b72:	2101      	movs	r1, #1
24008b74:	f24c 3050 	movw	r0, #50000	; 0xc350
24008b78:	f000 f90e 	bl	24008d98 <FLASH_CRC_WaitForLastOperation>
24008b7c:	4603      	mov	r3, r0
24008b7e:	2b00      	cmp	r3, #0
24008b80:	d002      	beq.n	24008b88 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
24008b82:	2301      	movs	r3, #1
24008b84:	71fb      	strb	r3, [r7, #7]
24008b86:	e00c      	b.n	24008ba2 <HAL_FLASH_OB_Launch+0x36>
  }
#if defined (DUAL_BANK)
  else if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24008b88:	2102      	movs	r1, #2
24008b8a:	f24c 3050 	movw	r0, #50000	; 0xc350
24008b8e:	f000 f903 	bl	24008d98 <FLASH_CRC_WaitForLastOperation>
24008b92:	4603      	mov	r3, r0
24008b94:	2b00      	cmp	r3, #0
24008b96:	d002      	beq.n	24008b9e <HAL_FLASH_OB_Launch+0x32>
  {
    status = HAL_ERROR;
24008b98:	2301      	movs	r3, #1
24008b9a:	71fb      	strb	r3, [r7, #7]
24008b9c:	e001      	b.n	24008ba2 <HAL_FLASH_OB_Launch+0x36>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24008b9e:	2300      	movs	r3, #0
24008ba0:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
24008ba2:	79fb      	ldrb	r3, [r7, #7]
24008ba4:	2b00      	cmp	r3, #0
24008ba6:	d10b      	bne.n	24008bc0 <HAL_FLASH_OB_Launch+0x54>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
24008ba8:	4b08      	ldr	r3, [pc, #32]	; (24008bcc <HAL_FLASH_OB_Launch+0x60>)
24008baa:	699b      	ldr	r3, [r3, #24]
24008bac:	4a07      	ldr	r2, [pc, #28]	; (24008bcc <HAL_FLASH_OB_Launch+0x60>)
24008bae:	f043 0302 	orr.w	r3, r3, #2
24008bb2:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24008bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
24008bb8:	f000 f8b2 	bl	24008d20 <FLASH_OB_WaitForLastOperation>
24008bbc:	4603      	mov	r3, r0
24008bbe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
24008bc0:	79fb      	ldrb	r3, [r7, #7]
}
24008bc2:	4618      	mov	r0, r3
24008bc4:	3708      	adds	r7, #8
24008bc6:	46bd      	mov	sp, r7
24008bc8:	bd80      	pop	{r7, pc}
24008bca:	bf00      	nop
24008bcc:	52002000 	.word	0x52002000

24008bd0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
24008bd0:	b480      	push	{r7}
24008bd2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
24008bd4:	4b03      	ldr	r3, [pc, #12]	; (24008be4 <HAL_FLASH_GetError+0x14>)
24008bd6:	699b      	ldr	r3, [r3, #24]
}
24008bd8:	4618      	mov	r0, r3
24008bda:	46bd      	mov	sp, r7
24008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
24008be0:	4770      	bx	lr
24008be2:	bf00      	nop
24008be4:	24000618 	.word	0x24000618

24008be8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24008be8:	b580      	push	{r7, lr}
24008bea:	b086      	sub	sp, #24
24008bec:	af00      	add	r7, sp, #0
24008bee:	6078      	str	r0, [r7, #4]
24008bf0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
24008bf2:	2304      	movs	r3, #4
24008bf4:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
24008bf6:	2300      	movs	r3, #0
24008bf8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
24008bfa:	f7f9 fb13 	bl	24002224 <HAL_GetTick>
24008bfe:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
24008c00:	683b      	ldr	r3, [r7, #0]
24008c02:	2b02      	cmp	r3, #2
24008c04:	d113      	bne.n	24008c2e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
24008c06:	4b41      	ldr	r3, [pc, #260]	; (24008d0c <FLASH_WaitForLastOperation+0x124>)
24008c08:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008c0a:	e010      	b.n	24008c2e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
24008c0c:	687b      	ldr	r3, [r7, #4]
24008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
24008c12:	d00c      	beq.n	24008c2e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008c14:	f7f9 fb06 	bl	24002224 <HAL_GetTick>
24008c18:	4602      	mov	r2, r0
24008c1a:	68fb      	ldr	r3, [r7, #12]
24008c1c:	1ad3      	subs	r3, r2, r3
24008c1e:	687a      	ldr	r2, [r7, #4]
24008c20:	429a      	cmp	r2, r3
24008c22:	d302      	bcc.n	24008c2a <FLASH_WaitForLastOperation+0x42>
24008c24:	687b      	ldr	r3, [r7, #4]
24008c26:	2b00      	cmp	r3, #0
24008c28:	d101      	bne.n	24008c2e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
24008c2a:	2303      	movs	r3, #3
24008c2c:	e06a      	b.n	24008d04 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008c2e:	697a      	ldr	r2, [r7, #20]
24008c30:	4b37      	ldr	r3, [pc, #220]	; (24008d10 <FLASH_WaitForLastOperation+0x128>)
24008c32:	4013      	ands	r3, r2
24008c34:	697a      	ldr	r2, [r7, #20]
24008c36:	429a      	cmp	r2, r3
24008c38:	d10a      	bne.n	24008c50 <FLASH_WaitForLastOperation+0x68>
24008c3a:	4b36      	ldr	r3, [pc, #216]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008c3c:	691a      	ldr	r2, [r3, #16]
24008c3e:	697b      	ldr	r3, [r7, #20]
24008c40:	4013      	ands	r3, r2
24008c42:	697a      	ldr	r2, [r7, #20]
24008c44:	429a      	cmp	r2, r3
24008c46:	bf0c      	ite	eq
24008c48:	2301      	moveq	r3, #1
24008c4a:	2300      	movne	r3, #0
24008c4c:	b2db      	uxtb	r3, r3
24008c4e:	e00c      	b.n	24008c6a <FLASH_WaitForLastOperation+0x82>
24008c50:	4b30      	ldr	r3, [pc, #192]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008c52:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24008c56:	43da      	mvns	r2, r3
24008c58:	697b      	ldr	r3, [r7, #20]
24008c5a:	4013      	ands	r3, r2
24008c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008c60:	2b00      	cmp	r3, #0
24008c62:	bf0c      	ite	eq
24008c64:	2301      	moveq	r3, #1
24008c66:	2300      	movne	r3, #0
24008c68:	b2db      	uxtb	r3, r3
24008c6a:	2b00      	cmp	r3, #0
24008c6c:	d1ce      	bne.n	24008c0c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
24008c6e:	683b      	ldr	r3, [r7, #0]
24008c70:	2b01      	cmp	r3, #1
24008c72:	d105      	bne.n	24008c80 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
24008c74:	4b27      	ldr	r3, [pc, #156]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008c76:	691a      	ldr	r2, [r3, #16]
24008c78:	4b27      	ldr	r3, [pc, #156]	; (24008d18 <FLASH_WaitForLastOperation+0x130>)
24008c7a:	4013      	ands	r3, r2
24008c7c:	613b      	str	r3, [r7, #16]
24008c7e:	e007      	b.n	24008c90 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
24008c80:	4b24      	ldr	r3, [pc, #144]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008c82:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
24008c86:	4b24      	ldr	r3, [pc, #144]	; (24008d18 <FLASH_WaitForLastOperation+0x130>)
24008c88:	4013      	ands	r3, r2
24008c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24008c8e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
24008c90:	693b      	ldr	r3, [r7, #16]
24008c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008c96:	2b00      	cmp	r3, #0
24008c98:	d017      	beq.n	24008cca <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
24008c9a:	4b20      	ldr	r3, [pc, #128]	; (24008d1c <FLASH_WaitForLastOperation+0x134>)
24008c9c:	699a      	ldr	r2, [r3, #24]
24008c9e:	693b      	ldr	r3, [r7, #16]
24008ca0:	4313      	orrs	r3, r2
24008ca2:	4a1e      	ldr	r2, [pc, #120]	; (24008d1c <FLASH_WaitForLastOperation+0x134>)
24008ca4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
24008ca6:	693a      	ldr	r2, [r7, #16]
24008ca8:	4b19      	ldr	r3, [pc, #100]	; (24008d10 <FLASH_WaitForLastOperation+0x128>)
24008caa:	4013      	ands	r3, r2
24008cac:	693a      	ldr	r2, [r7, #16]
24008cae:	429a      	cmp	r2, r3
24008cb0:	d103      	bne.n	24008cba <FLASH_WaitForLastOperation+0xd2>
24008cb2:	4a18      	ldr	r2, [pc, #96]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008cb4:	693b      	ldr	r3, [r7, #16]
24008cb6:	6153      	str	r3, [r2, #20]
24008cb8:	e005      	b.n	24008cc6 <FLASH_WaitForLastOperation+0xde>
24008cba:	4a16      	ldr	r2, [pc, #88]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008cbc:	693b      	ldr	r3, [r7, #16]
24008cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008cc2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
24008cc6:	2301      	movs	r3, #1
24008cc8:	e01c      	b.n	24008d04 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
24008cca:	683b      	ldr	r3, [r7, #0]
24008ccc:	2b01      	cmp	r3, #1
24008cce:	d10b      	bne.n	24008ce8 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
24008cd0:	4b10      	ldr	r3, [pc, #64]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008cd2:	691b      	ldr	r3, [r3, #16]
24008cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008cdc:	d111      	bne.n	24008d02 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008cde:	4b0d      	ldr	r3, [pc, #52]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008ce0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008ce4:	615a      	str	r2, [r3, #20]
24008ce6:	e00c      	b.n	24008d02 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
24008ce8:	4b0a      	ldr	r3, [pc, #40]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008cea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24008cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008cf6:	d104      	bne.n	24008d02 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
24008cf8:	4b06      	ldr	r3, [pc, #24]	; (24008d14 <FLASH_WaitForLastOperation+0x12c>)
24008cfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008cfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008d02:	2300      	movs	r3, #0
}
24008d04:	4618      	mov	r0, r3
24008d06:	3718      	adds	r7, #24
24008d08:	46bd      	mov	sp, r7
24008d0a:	bd80      	pop	{r7, pc}
24008d0c:	80000004 	.word	0x80000004
24008d10:	1fef000f 	.word	0x1fef000f
24008d14:	52002000 	.word	0x52002000
24008d18:	17ee0000 	.word	0x17ee0000
24008d1c:	24000618 	.word	0x24000618

24008d20 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
24008d20:	b580      	push	{r7, lr}
24008d22:	b084      	sub	sp, #16
24008d24:	af00      	add	r7, sp, #0
24008d26:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
24008d28:	f7f9 fa7c 	bl	24002224 <HAL_GetTick>
24008d2c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24008d2e:	e010      	b.n	24008d52 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
24008d30:	687b      	ldr	r3, [r7, #4]
24008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
24008d36:	d00c      	beq.n	24008d52 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008d38:	f7f9 fa74 	bl	24002224 <HAL_GetTick>
24008d3c:	4602      	mov	r2, r0
24008d3e:	68fb      	ldr	r3, [r7, #12]
24008d40:	1ad3      	subs	r3, r2, r3
24008d42:	687a      	ldr	r2, [r7, #4]
24008d44:	429a      	cmp	r2, r3
24008d46:	d302      	bcc.n	24008d4e <FLASH_OB_WaitForLastOperation+0x2e>
24008d48:	687b      	ldr	r3, [r7, #4]
24008d4a:	2b00      	cmp	r3, #0
24008d4c:	d101      	bne.n	24008d52 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
24008d4e:	2303      	movs	r3, #3
24008d50:	e01a      	b.n	24008d88 <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24008d52:	4b0f      	ldr	r3, [pc, #60]	; (24008d90 <FLASH_OB_WaitForLastOperation+0x70>)
24008d54:	69db      	ldr	r3, [r3, #28]
24008d56:	f003 0301 	and.w	r3, r3, #1
24008d5a:	2b00      	cmp	r3, #0
24008d5c:	d1e8      	bne.n	24008d30 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
24008d5e:	4b0c      	ldr	r3, [pc, #48]	; (24008d90 <FLASH_OB_WaitForLastOperation+0x70>)
24008d60:	69db      	ldr	r3, [r3, #28]
24008d62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24008d66:	2b00      	cmp	r3, #0
24008d68:	d00d      	beq.n	24008d86 <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
24008d6a:	4b0a      	ldr	r3, [pc, #40]	; (24008d94 <FLASH_OB_WaitForLastOperation+0x74>)
24008d6c:	699b      	ldr	r3, [r3, #24]
24008d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24008d72:	4a08      	ldr	r2, [pc, #32]	; (24008d94 <FLASH_OB_WaitForLastOperation+0x74>)
24008d74:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
24008d76:	4b06      	ldr	r3, [pc, #24]	; (24008d90 <FLASH_OB_WaitForLastOperation+0x70>)
24008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24008d7a:	4a05      	ldr	r2, [pc, #20]	; (24008d90 <FLASH_OB_WaitForLastOperation+0x70>)
24008d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24008d80:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
24008d82:	2301      	movs	r3, #1
24008d84:	e000      	b.n	24008d88 <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
24008d86:	2300      	movs	r3, #0
}
24008d88:	4618      	mov	r0, r3
24008d8a:	3710      	adds	r7, #16
24008d8c:	46bd      	mov	sp, r7
24008d8e:	bd80      	pop	{r7, pc}
24008d90:	52002000 	.word	0x52002000
24008d94:	24000618 	.word	0x24000618

24008d98 <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24008d98:	b580      	push	{r7, lr}
24008d9a:	b084      	sub	sp, #16
24008d9c:	af00      	add	r7, sp, #0
24008d9e:	6078      	str	r0, [r7, #4]
24008da0:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
24008da2:	f7f9 fa3f 	bl	24002224 <HAL_GetTick>
24008da6:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
24008da8:	683b      	ldr	r3, [r7, #0]
24008daa:	2b01      	cmp	r3, #1
24008dac:	d102      	bne.n	24008db4 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
24008dae:	2308      	movs	r3, #8
24008db0:	60fb      	str	r3, [r7, #12]
24008db2:	e013      	b.n	24008ddc <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
24008db4:	4b31      	ldr	r3, [pc, #196]	; (24008e7c <FLASH_CRC_WaitForLastOperation+0xe4>)
24008db6:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008db8:	e010      	b.n	24008ddc <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
24008dba:	687b      	ldr	r3, [r7, #4]
24008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
24008dc0:	d00c      	beq.n	24008ddc <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008dc2:	f7f9 fa2f 	bl	24002224 <HAL_GetTick>
24008dc6:	4602      	mov	r2, r0
24008dc8:	68bb      	ldr	r3, [r7, #8]
24008dca:	1ad3      	subs	r3, r2, r3
24008dcc:	687a      	ldr	r2, [r7, #4]
24008dce:	429a      	cmp	r2, r3
24008dd0:	d302      	bcc.n	24008dd8 <FLASH_CRC_WaitForLastOperation+0x40>
24008dd2:	687b      	ldr	r3, [r7, #4]
24008dd4:	2b00      	cmp	r3, #0
24008dd6:	d101      	bne.n	24008ddc <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
24008dd8:	2303      	movs	r3, #3
24008dda:	e04b      	b.n	24008e74 <FLASH_CRC_WaitForLastOperation+0xdc>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008ddc:	68fa      	ldr	r2, [r7, #12]
24008dde:	4b28      	ldr	r3, [pc, #160]	; (24008e80 <FLASH_CRC_WaitForLastOperation+0xe8>)
24008de0:	4013      	ands	r3, r2
24008de2:	68fa      	ldr	r2, [r7, #12]
24008de4:	429a      	cmp	r2, r3
24008de6:	d10a      	bne.n	24008dfe <FLASH_CRC_WaitForLastOperation+0x66>
24008de8:	4b26      	ldr	r3, [pc, #152]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008dea:	691a      	ldr	r2, [r3, #16]
24008dec:	68fb      	ldr	r3, [r7, #12]
24008dee:	4013      	ands	r3, r2
24008df0:	68fa      	ldr	r2, [r7, #12]
24008df2:	429a      	cmp	r2, r3
24008df4:	bf0c      	ite	eq
24008df6:	2301      	moveq	r3, #1
24008df8:	2300      	movne	r3, #0
24008dfa:	b2db      	uxtb	r3, r3
24008dfc:	e00c      	b.n	24008e18 <FLASH_CRC_WaitForLastOperation+0x80>
24008dfe:	4b21      	ldr	r3, [pc, #132]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008e00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24008e04:	43da      	mvns	r2, r3
24008e06:	68fb      	ldr	r3, [r7, #12]
24008e08:	4013      	ands	r3, r2
24008e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008e0e:	2b00      	cmp	r3, #0
24008e10:	bf0c      	ite	eq
24008e12:	2301      	moveq	r3, #1
24008e14:	2300      	movne	r3, #0
24008e16:	b2db      	uxtb	r3, r3
24008e18:	2b00      	cmp	r3, #0
24008e1a:	d1ce      	bne.n	24008dba <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
24008e1c:	683b      	ldr	r3, [r7, #0]
24008e1e:	2b01      	cmp	r3, #1
24008e20:	d112      	bne.n	24008e48 <FLASH_CRC_WaitForLastOperation+0xb0>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
24008e22:	4b18      	ldr	r3, [pc, #96]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008e24:	691b      	ldr	r3, [r3, #16]
24008e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24008e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008e2e:	d120      	bne.n	24008e72 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
24008e30:	4b15      	ldr	r3, [pc, #84]	; (24008e88 <FLASH_CRC_WaitForLastOperation+0xf0>)
24008e32:	699b      	ldr	r3, [r3, #24]
24008e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008e38:	4a13      	ldr	r2, [pc, #76]	; (24008e88 <FLASH_CRC_WaitForLastOperation+0xf0>)
24008e3a:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
24008e3c:	4b11      	ldr	r3, [pc, #68]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24008e42:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
24008e44:	2301      	movs	r3, #1
24008e46:	e015      	b.n	24008e74 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2))
24008e48:	4b0e      	ldr	r3, [pc, #56]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008e4a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
24008e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24008e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008e56:	d10c      	bne.n	24008e72 <FLASH_CRC_WaitForLastOperation+0xda>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK2;
24008e58:	4b0b      	ldr	r3, [pc, #44]	; (24008e88 <FLASH_CRC_WaitForLastOperation+0xf0>)
24008e5a:	699b      	ldr	r3, [r3, #24]
24008e5c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
24008e60:	4a09      	ldr	r2, [pc, #36]	; (24008e88 <FLASH_CRC_WaitForLastOperation+0xf0>)
24008e62:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCRDERR_BANK2);
24008e64:	4b07      	ldr	r3, [pc, #28]	; (24008e84 <FLASH_CRC_WaitForLastOperation+0xec>)
24008e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24008e6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      return HAL_ERROR;
24008e6e:	2301      	movs	r3, #1
24008e70:	e000      	b.n	24008e74 <FLASH_CRC_WaitForLastOperation+0xdc>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
24008e72:	2300      	movs	r3, #0
}
24008e74:	4618      	mov	r0, r3
24008e76:	3710      	adds	r7, #16
24008e78:	46bd      	mov	sp, r7
24008e7a:	bd80      	pop	{r7, pc}
24008e7c:	80000008 	.word	0x80000008
24008e80:	1fef000f 	.word	0x1fef000f
24008e84:	52002000 	.word	0x52002000
24008e88:	24000618 	.word	0x24000618

24008e8c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
24008e8c:	b580      	push	{r7, lr}
24008e8e:	b084      	sub	sp, #16
24008e90:	af00      	add	r7, sp, #0
24008e92:	6078      	str	r0, [r7, #4]
24008e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24008e96:	2300      	movs	r3, #0
24008e98:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008e9a:	4b5e      	ldr	r3, [pc, #376]	; (24009014 <HAL_FLASHEx_Erase+0x188>)
24008e9c:	7d1b      	ldrb	r3, [r3, #20]
24008e9e:	2b01      	cmp	r3, #1
24008ea0:	d101      	bne.n	24008ea6 <HAL_FLASHEx_Erase+0x1a>
24008ea2:	2302      	movs	r3, #2
24008ea4:	e0b2      	b.n	2400900c <HAL_FLASHEx_Erase+0x180>
24008ea6:	4b5b      	ldr	r3, [pc, #364]	; (24009014 <HAL_FLASHEx_Erase+0x188>)
24008ea8:	2201      	movs	r2, #1
24008eaa:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008eac:	4b59      	ldr	r3, [pc, #356]	; (24009014 <HAL_FLASHEx_Erase+0x188>)
24008eae:	2200      	movs	r2, #0
24008eb0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008eb2:	687b      	ldr	r3, [r7, #4]
24008eb4:	685b      	ldr	r3, [r3, #4]
24008eb6:	f003 0301 	and.w	r3, r3, #1
24008eba:	2b00      	cmp	r3, #0
24008ebc:	d009      	beq.n	24008ed2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008ebe:	2101      	movs	r1, #1
24008ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
24008ec4:	f7ff fe90 	bl	24008be8 <FLASH_WaitForLastOperation>
24008ec8:	4603      	mov	r3, r0
24008eca:	2b00      	cmp	r3, #0
24008ecc:	d001      	beq.n	24008ed2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
24008ece:	2301      	movs	r3, #1
24008ed0:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24008ed2:	687b      	ldr	r3, [r7, #4]
24008ed4:	685b      	ldr	r3, [r3, #4]
24008ed6:	f003 0302 	and.w	r3, r3, #2
24008eda:	2b00      	cmp	r3, #0
24008edc:	d009      	beq.n	24008ef2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24008ede:	2102      	movs	r1, #2
24008ee0:	f24c 3050 	movw	r0, #50000	; 0xc350
24008ee4:	f7ff fe80 	bl	24008be8 <FLASH_WaitForLastOperation>
24008ee8:	4603      	mov	r3, r0
24008eea:	2b00      	cmp	r3, #0
24008eec:	d001      	beq.n	24008ef2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
24008eee:	2301      	movs	r3, #1
24008ef0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
24008ef2:	7bfb      	ldrb	r3, [r7, #15]
24008ef4:	2b00      	cmp	r3, #0
24008ef6:	f040 8085 	bne.w	24009004 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24008efa:	687b      	ldr	r3, [r7, #4]
24008efc:	681b      	ldr	r3, [r3, #0]
24008efe:	2b01      	cmp	r3, #1
24008f00:	d136      	bne.n	24008f70 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24008f02:	687b      	ldr	r3, [r7, #4]
24008f04:	691a      	ldr	r2, [r3, #16]
24008f06:	687b      	ldr	r3, [r7, #4]
24008f08:	685b      	ldr	r3, [r3, #4]
24008f0a:	4619      	mov	r1, r3
24008f0c:	4610      	mov	r0, r2
24008f0e:	f000 fb85 	bl	2400961c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008f12:	687b      	ldr	r3, [r7, #4]
24008f14:	685b      	ldr	r3, [r3, #4]
24008f16:	f003 0301 	and.w	r3, r3, #1
24008f1a:	2b00      	cmp	r3, #0
24008f1c:	d00f      	beq.n	24008f3e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008f1e:	2101      	movs	r1, #1
24008f20:	f24c 3050 	movw	r0, #50000	; 0xc350
24008f24:	f7ff fe60 	bl	24008be8 <FLASH_WaitForLastOperation>
24008f28:	4603      	mov	r3, r0
24008f2a:	2b00      	cmp	r3, #0
24008f2c:	d001      	beq.n	24008f32 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
24008f2e:	2301      	movs	r3, #1
24008f30:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
24008f32:	4b39      	ldr	r3, [pc, #228]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008f34:	68db      	ldr	r3, [r3, #12]
24008f36:	4a38      	ldr	r2, [pc, #224]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008f38:	f023 0308 	bic.w	r3, r3, #8
24008f3c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24008f3e:	687b      	ldr	r3, [r7, #4]
24008f40:	685b      	ldr	r3, [r3, #4]
24008f42:	f003 0302 	and.w	r3, r3, #2
24008f46:	2b00      	cmp	r3, #0
24008f48:	d05c      	beq.n	24009004 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24008f4a:	2102      	movs	r1, #2
24008f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
24008f50:	f7ff fe4a 	bl	24008be8 <FLASH_WaitForLastOperation>
24008f54:	4603      	mov	r3, r0
24008f56:	2b00      	cmp	r3, #0
24008f58:	d001      	beq.n	24008f5e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
24008f5a:	2301      	movs	r3, #1
24008f5c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
24008f5e:	4b2e      	ldr	r3, [pc, #184]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008f60:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24008f64:	4a2c      	ldr	r2, [pc, #176]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008f66:	f023 0308 	bic.w	r3, r3, #8
24008f6a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
24008f6e:	e049      	b.n	24009004 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
24008f70:	683b      	ldr	r3, [r7, #0]
24008f72:	f04f 32ff 	mov.w	r2, #4294967295
24008f76:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008f78:	687b      	ldr	r3, [r7, #4]
24008f7a:	689b      	ldr	r3, [r3, #8]
24008f7c:	60bb      	str	r3, [r7, #8]
24008f7e:	e039      	b.n	24008ff4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
24008f80:	687b      	ldr	r3, [r7, #4]
24008f82:	6859      	ldr	r1, [r3, #4]
24008f84:	687b      	ldr	r3, [r7, #4]
24008f86:	691b      	ldr	r3, [r3, #16]
24008f88:	461a      	mov	r2, r3
24008f8a:	68b8      	ldr	r0, [r7, #8]
24008f8c:	f000 fbb0 	bl	240096f0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008f90:	687b      	ldr	r3, [r7, #4]
24008f92:	685b      	ldr	r3, [r3, #4]
24008f94:	f003 0301 	and.w	r3, r3, #1
24008f98:	2b00      	cmp	r3, #0
24008f9a:	d00c      	beq.n	24008fb6 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24008f9c:	2101      	movs	r1, #1
24008f9e:	f24c 3050 	movw	r0, #50000	; 0xc350
24008fa2:	f7ff fe21 	bl	24008be8 <FLASH_WaitForLastOperation>
24008fa6:	4603      	mov	r3, r0
24008fa8:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24008faa:	4b1b      	ldr	r3, [pc, #108]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008fac:	68da      	ldr	r2, [r3, #12]
24008fae:	491a      	ldr	r1, [pc, #104]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008fb0:	4b1a      	ldr	r3, [pc, #104]	; (2400901c <HAL_FLASHEx_Erase+0x190>)
24008fb2:	4013      	ands	r3, r2
24008fb4:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24008fb6:	687b      	ldr	r3, [r7, #4]
24008fb8:	685b      	ldr	r3, [r3, #4]
24008fba:	f003 0302 	and.w	r3, r3, #2
24008fbe:	2b00      	cmp	r3, #0
24008fc0:	d00e      	beq.n	24008fe0 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
24008fc2:	2102      	movs	r1, #2
24008fc4:	f24c 3050 	movw	r0, #50000	; 0xc350
24008fc8:	f7ff fe0e 	bl	24008be8 <FLASH_WaitForLastOperation>
24008fcc:	4603      	mov	r3, r0
24008fce:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24008fd0:	4b11      	ldr	r3, [pc, #68]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008fd2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
24008fd6:	4910      	ldr	r1, [pc, #64]	; (24009018 <HAL_FLASHEx_Erase+0x18c>)
24008fd8:	4b10      	ldr	r3, [pc, #64]	; (2400901c <HAL_FLASHEx_Erase+0x190>)
24008fda:	4013      	ands	r3, r2
24008fdc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
24008fe0:	7bfb      	ldrb	r3, [r7, #15]
24008fe2:	2b00      	cmp	r3, #0
24008fe4:	d003      	beq.n	24008fee <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
24008fe6:	683b      	ldr	r3, [r7, #0]
24008fe8:	68ba      	ldr	r2, [r7, #8]
24008fea:	601a      	str	r2, [r3, #0]
          break;
24008fec:	e00a      	b.n	24009004 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008fee:	68bb      	ldr	r3, [r7, #8]
24008ff0:	3301      	adds	r3, #1
24008ff2:	60bb      	str	r3, [r7, #8]
24008ff4:	687b      	ldr	r3, [r7, #4]
24008ff6:	68da      	ldr	r2, [r3, #12]
24008ff8:	687b      	ldr	r3, [r7, #4]
24008ffa:	689b      	ldr	r3, [r3, #8]
24008ffc:	4413      	add	r3, r2
24008ffe:	68ba      	ldr	r2, [r7, #8]
24009000:	429a      	cmp	r2, r3
24009002:	d3bd      	bcc.n	24008f80 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24009004:	4b03      	ldr	r3, [pc, #12]	; (24009014 <HAL_FLASHEx_Erase+0x188>)
24009006:	2200      	movs	r2, #0
24009008:	751a      	strb	r2, [r3, #20]

  return status;
2400900a:	7bfb      	ldrb	r3, [r7, #15]
}
2400900c:	4618      	mov	r0, r3
2400900e:	3710      	adds	r7, #16
24009010:	46bd      	mov	sp, r7
24009012:	bd80      	pop	{r7, pc}
24009014:	24000618 	.word	0x24000618
24009018:	52002000 	.word	0x52002000
2400901c:	fffff8fb 	.word	0xfffff8fb

24009020 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
24009020:	b580      	push	{r7, lr}
24009022:	b084      	sub	sp, #16
24009024:	af00      	add	r7, sp, #0
24009026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24009028:	2300      	movs	r3, #0
2400902a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
2400902c:	4b48      	ldr	r3, [pc, #288]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
2400902e:	7d1b      	ldrb	r3, [r3, #20]
24009030:	2b01      	cmp	r3, #1
24009032:	d101      	bne.n	24009038 <HAL_FLASHEx_Erase_IT+0x18>
24009034:	2302      	movs	r3, #2
24009036:	e087      	b.n	24009148 <HAL_FLASHEx_Erase_IT+0x128>
24009038:	4b45      	ldr	r3, [pc, #276]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
2400903a:	2201      	movs	r2, #1
2400903c:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2400903e:	4b44      	ldr	r3, [pc, #272]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
24009040:	2200      	movs	r2, #0
24009042:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009044:	687b      	ldr	r3, [r7, #4]
24009046:	685b      	ldr	r3, [r3, #4]
24009048:	f003 0301 	and.w	r3, r3, #1
2400904c:	2b00      	cmp	r3, #0
2400904e:	d009      	beq.n	24009064 <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009050:	2101      	movs	r1, #1
24009052:	f24c 3050 	movw	r0, #50000	; 0xc350
24009056:	f7ff fdc7 	bl	24008be8 <FLASH_WaitForLastOperation>
2400905a:	4603      	mov	r3, r0
2400905c:	2b00      	cmp	r3, #0
2400905e:	d001      	beq.n	24009064 <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
24009060:	2301      	movs	r3, #1
24009062:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank 2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009064:	687b      	ldr	r3, [r7, #4]
24009066:	685b      	ldr	r3, [r3, #4]
24009068:	f003 0302 	and.w	r3, r3, #2
2400906c:	2b00      	cmp	r3, #0
2400906e:	d009      	beq.n	24009084 <HAL_FLASHEx_Erase_IT+0x64>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
24009070:	2102      	movs	r1, #2
24009072:	f24c 3050 	movw	r0, #50000	; 0xc350
24009076:	f7ff fdb7 	bl	24008be8 <FLASH_WaitForLastOperation>
2400907a:	4603      	mov	r3, r0
2400907c:	2b00      	cmp	r3, #0
2400907e:	d001      	beq.n	24009084 <HAL_FLASHEx_Erase_IT+0x64>
    {
      status = HAL_ERROR;
24009080:	2301      	movs	r3, #1
24009082:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
24009084:	7bfb      	ldrb	r3, [r7, #15]
24009086:	2b00      	cmp	r3, #0
24009088:	d003      	beq.n	24009092 <HAL_FLASHEx_Erase_IT+0x72>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400908a:	4b31      	ldr	r3, [pc, #196]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
2400908c:	2200      	movs	r2, #0
2400908e:	751a      	strb	r2, [r3, #20]
24009090:	e059      	b.n	24009146 <HAL_FLASHEx_Erase_IT+0x126>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009092:	687b      	ldr	r3, [r7, #4]
24009094:	685b      	ldr	r3, [r3, #4]
24009096:	f003 0301 	and.w	r3, r3, #1
2400909a:	2b00      	cmp	r3, #0
2400909c:	d005      	beq.n	240090aa <HAL_FLASHEx_Erase_IT+0x8a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
2400909e:	4b2d      	ldr	r3, [pc, #180]	; (24009154 <HAL_FLASHEx_Erase_IT+0x134>)
240090a0:	68db      	ldr	r3, [r3, #12]
240090a2:	4a2c      	ldr	r2, [pc, #176]	; (24009154 <HAL_FLASHEx_Erase_IT+0x134>)
240090a4:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
240090a8:	60d3      	str	r3, [r2, #12]
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
                                  FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1);
#endif /* FLASH_CR_OPERRIE */
    }
#if defined (DUAL_BANK)
    if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
240090aa:	687b      	ldr	r3, [r7, #4]
240090ac:	685b      	ldr	r3, [r3, #4]
240090ae:	f003 0302 	and.w	r3, r3, #2
240090b2:	2b00      	cmp	r3, #0
240090b4:	d007      	beq.n	240090c6 <HAL_FLASHEx_Erase_IT+0xa6>
    {
      /* Enable End of Operation and Error interrupts for Bank 2 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK2(FLASH_IT_EOP_BANK2     | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
240090b6:	4b27      	ldr	r3, [pc, #156]	; (24009154 <HAL_FLASHEx_Erase_IT+0x134>)
240090b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240090bc:	4a25      	ldr	r2, [pc, #148]	; (24009154 <HAL_FLASHEx_Erase_IT+0x134>)
240090be:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
240090c2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
240090c6:	687b      	ldr	r3, [r7, #4]
240090c8:	681b      	ldr	r3, [r3, #0]
240090ca:	2b01      	cmp	r3, #1
240090cc:	d11b      	bne.n	24009106 <HAL_FLASHEx_Erase_IT+0xe6>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
240090ce:	687b      	ldr	r3, [r7, #4]
240090d0:	685b      	ldr	r3, [r3, #4]
240090d2:	2b01      	cmp	r3, #1
240090d4:	d103      	bne.n	240090de <HAL_FLASHEx_Erase_IT+0xbe>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
240090d6:	4b1e      	ldr	r3, [pc, #120]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
240090d8:	2202      	movs	r2, #2
240090da:	701a      	strb	r2, [r3, #0]
240090dc:	e00a      	b.n	240090f4 <HAL_FLASHEx_Erase_IT+0xd4>
      }
#if defined (DUAL_BANK)
      else if(pEraseInit->Banks == FLASH_BANK_2)
240090de:	687b      	ldr	r3, [r7, #4]
240090e0:	685b      	ldr	r3, [r3, #4]
240090e2:	2b02      	cmp	r3, #2
240090e4:	d103      	bne.n	240090ee <HAL_FLASHEx_Erase_IT+0xce>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
240090e6:	4b1a      	ldr	r3, [pc, #104]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
240090e8:	2205      	movs	r2, #5
240090ea:	701a      	strb	r2, [r3, #0]
240090ec:	e002      	b.n	240090f4 <HAL_FLASHEx_Erase_IT+0xd4>
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
240090ee:	4b18      	ldr	r3, [pc, #96]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
240090f0:	2207      	movs	r2, #7
240090f2:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
240090f4:	687b      	ldr	r3, [r7, #4]
240090f6:	691a      	ldr	r2, [r3, #16]
240090f8:	687b      	ldr	r3, [r7, #4]
240090fa:	685b      	ldr	r3, [r3, #4]
240090fc:	4619      	mov	r1, r3
240090fe:	4610      	mov	r0, r2
24009100:	f000 fa8c 	bl	2400961c <FLASH_MassErase>
24009104:	e01f      	b.n	24009146 <HAL_FLASHEx_Erase_IT+0x126>
    }
    else
    {
      /* Erase by sector to be done */
#if defined (DUAL_BANK)
      if(pEraseInit->Banks == FLASH_BANK_1)
24009106:	687b      	ldr	r3, [r7, #4]
24009108:	685b      	ldr	r3, [r3, #4]
2400910a:	2b01      	cmp	r3, #1
2400910c:	d103      	bne.n	24009116 <HAL_FLASHEx_Erase_IT+0xf6>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
2400910e:	4b10      	ldr	r3, [pc, #64]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
24009110:	2201      	movs	r2, #1
24009112:	701a      	strb	r2, [r3, #0]
24009114:	e002      	b.n	2400911c <HAL_FLASHEx_Erase_IT+0xfc>
      }
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
24009116:	4b0e      	ldr	r3, [pc, #56]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
24009118:	2204      	movs	r2, #4
2400911a:	701a      	strb	r2, [r3, #0]
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
2400911c:	687b      	ldr	r3, [r7, #4]
2400911e:	68db      	ldr	r3, [r3, #12]
24009120:	4a0b      	ldr	r2, [pc, #44]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
24009122:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
24009124:	687b      	ldr	r3, [r7, #4]
24009126:	689b      	ldr	r3, [r3, #8]
24009128:	4a09      	ldr	r2, [pc, #36]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
2400912a:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
2400912c:	687b      	ldr	r3, [r7, #4]
2400912e:	691b      	ldr	r3, [r3, #16]
24009130:	4a07      	ldr	r2, [pc, #28]	; (24009150 <HAL_FLASHEx_Erase_IT+0x130>)
24009132:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
24009134:	687b      	ldr	r3, [r7, #4]
24009136:	6898      	ldr	r0, [r3, #8]
24009138:	687b      	ldr	r3, [r7, #4]
2400913a:	6859      	ldr	r1, [r3, #4]
2400913c:	687b      	ldr	r3, [r7, #4]
2400913e:	691b      	ldr	r3, [r3, #16]
24009140:	461a      	mov	r2, r3
24009142:	f000 fad5 	bl	240096f0 <FLASH_Erase_Sector>
    }
  }

  return status;
24009146:	7bfb      	ldrb	r3, [r7, #15]
}
24009148:	4618      	mov	r0, r3
2400914a:	3710      	adds	r7, #16
2400914c:	46bd      	mov	sp, r7
2400914e:	bd80      	pop	{r7, pc}
24009150:	24000618 	.word	0x24000618
24009154:	52002000 	.word	0x52002000

24009158 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
24009158:	b580      	push	{r7, lr}
2400915a:	b084      	sub	sp, #16
2400915c:	af00      	add	r7, sp, #0
2400915e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009160:	4b4e      	ldr	r3, [pc, #312]	; (2400929c <HAL_FLASHEx_OBProgram+0x144>)
24009162:	7d1b      	ldrb	r3, [r3, #20]
24009164:	2b01      	cmp	r3, #1
24009166:	d101      	bne.n	2400916c <HAL_FLASHEx_OBProgram+0x14>
24009168:	2302      	movs	r3, #2
2400916a:	e092      	b.n	24009292 <HAL_FLASHEx_OBProgram+0x13a>
2400916c:	4b4b      	ldr	r3, [pc, #300]	; (2400929c <HAL_FLASHEx_OBProgram+0x144>)
2400916e:	2201      	movs	r2, #1
24009170:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009172:	4b4a      	ldr	r3, [pc, #296]	; (2400929c <HAL_FLASHEx_OBProgram+0x144>)
24009174:	2200      	movs	r2, #0
24009176:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009178:	2101      	movs	r1, #1
2400917a:	f24c 3050 	movw	r0, #50000	; 0xc350
2400917e:	f7ff fd33 	bl	24008be8 <FLASH_WaitForLastOperation>
24009182:	4603      	mov	r3, r0
24009184:	2b00      	cmp	r3, #0
24009186:	d002      	beq.n	2400918e <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
24009188:	2301      	movs	r3, #1
2400918a:	73fb      	strb	r3, [r7, #15]
2400918c:	e00c      	b.n	240091a8 <HAL_FLASHEx_OBProgram+0x50>
  }
#if defined (DUAL_BANK)
  else if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
2400918e:	2102      	movs	r1, #2
24009190:	f24c 3050 	movw	r0, #50000	; 0xc350
24009194:	f7ff fd28 	bl	24008be8 <FLASH_WaitForLastOperation>
24009198:	4603      	mov	r3, r0
2400919a:	2b00      	cmp	r3, #0
2400919c:	d002      	beq.n	240091a4 <HAL_FLASHEx_OBProgram+0x4c>
  {
    status = HAL_ERROR;
2400919e:	2301      	movs	r3, #1
240091a0:	73fb      	strb	r3, [r7, #15]
240091a2:	e001      	b.n	240091a8 <HAL_FLASHEx_OBProgram+0x50>
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
240091a4:	2300      	movs	r3, #0
240091a6:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
240091a8:	7bfb      	ldrb	r3, [r7, #15]
240091aa:	2b00      	cmp	r3, #0
240091ac:	d16d      	bne.n	2400928a <HAL_FLASHEx_OBProgram+0x132>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
240091ae:	687b      	ldr	r3, [r7, #4]
240091b0:	681b      	ldr	r3, [r3, #0]
240091b2:	f003 0301 	and.w	r3, r3, #1
240091b6:	2b00      	cmp	r3, #0
240091b8:	d014      	beq.n	240091e4 <HAL_FLASHEx_OBProgram+0x8c>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
240091ba:	687b      	ldr	r3, [r7, #4]
240091bc:	685b      	ldr	r3, [r3, #4]
240091be:	2b01      	cmp	r3, #1
240091c0:	d108      	bne.n	240091d4 <HAL_FLASHEx_OBProgram+0x7c>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
240091c2:	687b      	ldr	r3, [r7, #4]
240091c4:	689a      	ldr	r2, [r3, #8]
240091c6:	687b      	ldr	r3, [r7, #4]
240091c8:	69db      	ldr	r3, [r3, #28]
240091ca:	4619      	mov	r1, r3
240091cc:	4610      	mov	r0, r2
240091ce:	f000 facd 	bl	2400976c <FLASH_OB_EnableWRP>
240091d2:	e007      	b.n	240091e4 <HAL_FLASHEx_OBProgram+0x8c>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
240091d4:	687b      	ldr	r3, [r7, #4]
240091d6:	689a      	ldr	r2, [r3, #8]
240091d8:	687b      	ldr	r3, [r7, #4]
240091da:	69db      	ldr	r3, [r3, #28]
240091dc:	4619      	mov	r1, r3
240091de:	4610      	mov	r0, r2
240091e0:	f000 faee 	bl	240097c0 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
240091e4:	687b      	ldr	r3, [r7, #4]
240091e6:	681b      	ldr	r3, [r3, #0]
240091e8:	f003 0302 	and.w	r3, r3, #2
240091ec:	2b00      	cmp	r3, #0
240091ee:	d004      	beq.n	240091fa <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
240091f0:	687b      	ldr	r3, [r7, #4]
240091f2:	68db      	ldr	r3, [r3, #12]
240091f4:	4618      	mov	r0, r3
240091f6:	f000 fb39 	bl	2400986c <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
240091fa:	687b      	ldr	r3, [r7, #4]
240091fc:	681b      	ldr	r3, [r3, #0]
240091fe:	f003 0304 	and.w	r3, r3, #4
24009202:	2b00      	cmp	r3, #0
24009204:	d007      	beq.n	24009216 <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
24009206:	687b      	ldr	r3, [r7, #4]
24009208:	695a      	ldr	r2, [r3, #20]
2400920a:	687b      	ldr	r3, [r7, #4]
2400920c:	699b      	ldr	r3, [r3, #24]
2400920e:	4619      	mov	r1, r3
24009210:	4610      	mov	r0, r2
24009212:	f000 fb5b 	bl	240098cc <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
24009216:	687b      	ldr	r3, [r7, #4]
24009218:	681b      	ldr	r3, [r3, #0]
2400921a:	f003 0308 	and.w	r3, r3, #8
2400921e:	2b00      	cmp	r3, #0
24009220:	d009      	beq.n	24009236 <HAL_FLASHEx_OBProgram+0xde>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
24009222:	687b      	ldr	r3, [r7, #4]
24009224:	6a18      	ldr	r0, [r3, #32]
24009226:	687b      	ldr	r3, [r7, #4]
24009228:	6a59      	ldr	r1, [r3, #36]	; 0x24
2400922a:	687b      	ldr	r3, [r7, #4]
2400922c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400922e:	687b      	ldr	r3, [r7, #4]
24009230:	69db      	ldr	r3, [r3, #28]
24009232:	f000 fc03 	bl	24009a3c <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
24009236:	687b      	ldr	r3, [r7, #4]
24009238:	681b      	ldr	r3, [r3, #0]
2400923a:	f003 0310 	and.w	r3, r3, #16
2400923e:	2b00      	cmp	r3, #0
24009240:	d004      	beq.n	2400924c <HAL_FLASHEx_OBProgram+0xf4>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
24009242:	687b      	ldr	r3, [r7, #4]
24009244:	691b      	ldr	r3, [r3, #16]
24009246:	4618      	mov	r0, r3
24009248:	f000 fc70 	bl	24009b2c <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
2400924c:	687b      	ldr	r3, [r7, #4]
2400924e:	681b      	ldr	r3, [r3, #0]
24009250:	f003 0340 	and.w	r3, r3, #64	; 0x40
24009254:	2b00      	cmp	r3, #0
24009256:	d008      	beq.n	2400926a <HAL_FLASHEx_OBProgram+0x112>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
24009258:	687b      	ldr	r3, [r7, #4]
2400925a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
2400925c:	687b      	ldr	r3, [r7, #4]
2400925e:	6b19      	ldr	r1, [r3, #48]	; 0x30
24009260:	687b      	ldr	r3, [r7, #4]
24009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24009264:	461a      	mov	r2, r3
24009266:	f000 fc83 	bl	24009b70 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
2400926a:	687b      	ldr	r3, [r7, #4]
2400926c:	681b      	ldr	r3, [r3, #0]
2400926e:	f003 0320 	and.w	r3, r3, #32
24009272:	2b00      	cmp	r3, #0
24009274:	d009      	beq.n	2400928a <HAL_FLASHEx_OBProgram+0x132>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
24009276:	687b      	ldr	r3, [r7, #4]
24009278:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400927a:	687b      	ldr	r3, [r7, #4]
2400927c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
2400927e:	687b      	ldr	r3, [r7, #4]
24009280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24009282:	687b      	ldr	r3, [r7, #4]
24009284:	69db      	ldr	r3, [r3, #28]
24009286:	f000 fcb9 	bl	24009bfc <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2400928a:	4b04      	ldr	r3, [pc, #16]	; (2400929c <HAL_FLASHEx_OBProgram+0x144>)
2400928c:	2200      	movs	r2, #0
2400928e:	751a      	strb	r2, [r3, #20]

  return status;
24009290:	7bfb      	ldrb	r3, [r7, #15]
}
24009292:	4618      	mov	r0, r3
24009294:	3710      	adds	r7, #16
24009296:	46bd      	mov	sp, r7
24009298:	bd80      	pop	{r7, pc}
2400929a:	bf00      	nop
2400929c:	24000618 	.word	0x24000618

240092a0 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
240092a0:	b580      	push	{r7, lr}
240092a2:	b082      	sub	sp, #8
240092a4:	af00      	add	r7, sp, #0
240092a6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
240092a8:	687b      	ldr	r3, [r7, #4]
240092aa:	2216      	movs	r2, #22
240092ac:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
240092ae:	f000 faf1 	bl	24009894 <FLASH_OB_GetRDP>
240092b2:	4602      	mov	r2, r0
240092b4:	687b      	ldr	r3, [r7, #4]
240092b6:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
240092b8:	f000 fbaa 	bl	24009a10 <FLASH_OB_GetUser>
240092bc:	4602      	mov	r2, r0
240092be:	687b      	ldr	r3, [r7, #4]
240092c0:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
240092c2:	f000 fc47 	bl	24009b54 <FLASH_OB_GetBOR>
240092c6:	4602      	mov	r2, r0
240092c8:	687b      	ldr	r3, [r7, #4]
240092ca:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
240092cc:	687b      	ldr	r3, [r7, #4]
240092ce:	69db      	ldr	r3, [r3, #28]
240092d0:	2b01      	cmp	r3, #1
240092d2:	d003      	beq.n	240092dc <HAL_FLASHEx_OBGetConfig+0x3c>
240092d4:	687b      	ldr	r3, [r7, #4]
240092d6:	69db      	ldr	r3, [r3, #28]
240092d8:	2b02      	cmp	r3, #2
240092da:	d129      	bne.n	24009330 <HAL_FLASHEx_OBGetConfig+0x90>
#else
  if (pOBInit->Banks == FLASH_BANK_1)
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
240092dc:	687b      	ldr	r3, [r7, #4]
240092de:	681b      	ldr	r3, [r3, #0]
240092e0:	f043 0229 	orr.w	r2, r3, #41	; 0x29
240092e4:	687b      	ldr	r3, [r7, #4]
240092e6:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
240092e8:	687b      	ldr	r3, [r7, #4]
240092ea:	1d18      	adds	r0, r3, #4
240092ec:	687b      	ldr	r3, [r7, #4]
240092ee:	f103 0108 	add.w	r1, r3, #8
240092f2:	687b      	ldr	r3, [r7, #4]
240092f4:	69db      	ldr	r3, [r3, #28]
240092f6:	461a      	mov	r2, r3
240092f8:	f000 fa8a 	bl	24009810 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
240092fc:	687b      	ldr	r3, [r7, #4]
240092fe:	f103 0020 	add.w	r0, r3, #32
24009302:	687b      	ldr	r3, [r7, #4]
24009304:	f103 0124 	add.w	r1, r3, #36	; 0x24
24009308:	687b      	ldr	r3, [r7, #4]
2400930a:	f103 0228 	add.w	r2, r3, #40	; 0x28
2400930e:	687b      	ldr	r3, [r7, #4]
24009310:	69db      	ldr	r3, [r3, #28]
24009312:	f000 fbc9 	bl	24009aa8 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
24009316:	687b      	ldr	r3, [r7, #4]
24009318:	f103 0038 	add.w	r0, r3, #56	; 0x38
2400931c:	687b      	ldr	r3, [r7, #4]
2400931e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24009322:	687b      	ldr	r3, [r7, #4]
24009324:	f103 0240 	add.w	r2, r3, #64	; 0x40
24009328:	687b      	ldr	r3, [r7, #4]
2400932a:	69db      	ldr	r3, [r3, #28]
2400932c:	f000 fca0 	bl	24009c70 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
24009330:	687b      	ldr	r3, [r7, #4]
24009332:	f103 0230 	add.w	r2, r3, #48	; 0x30
24009336:	687b      	ldr	r3, [r7, #4]
24009338:	3334      	adds	r3, #52	; 0x34
2400933a:	4619      	mov	r1, r3
2400933c:	4610      	mov	r0, r2
2400933e:	f000 fc41 	bl	24009bc4 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
24009342:	687b      	ldr	r3, [r7, #4]
24009344:	681b      	ldr	r3, [r3, #0]
24009346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2400934a:	687b      	ldr	r3, [r7, #4]
2400934c:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
2400934e:	bf00      	nop
24009350:	3708      	adds	r7, #8
24009352:	46bd      	mov	sp, r7
24009354:	bd80      	pop	{r7, pc}
	...

24009358 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
24009358:	b480      	push	{r7}
2400935a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
2400935c:	4b0c      	ldr	r3, [pc, #48]	; (24009390 <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400935e:	68db      	ldr	r3, [r3, #12]
24009360:	f003 0301 	and.w	r3, r3, #1
24009364:	2b00      	cmp	r3, #0
24009366:	d00d      	beq.n	24009384 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
24009368:	4b09      	ldr	r3, [pc, #36]	; (24009390 <HAL_FLASHEx_Unlock_Bank1+0x38>)
2400936a:	4a0a      	ldr	r2, [pc, #40]	; (24009394 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
2400936c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
2400936e:	4b08      	ldr	r3, [pc, #32]	; (24009390 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009370:	4a09      	ldr	r2, [pc, #36]	; (24009398 <HAL_FLASHEx_Unlock_Bank1+0x40>)
24009372:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24009374:	4b06      	ldr	r3, [pc, #24]	; (24009390 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009376:	68db      	ldr	r3, [r3, #12]
24009378:	f003 0301 	and.w	r3, r3, #1
2400937c:	2b00      	cmp	r3, #0
2400937e:	d001      	beq.n	24009384 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
24009380:	2301      	movs	r3, #1
24009382:	e000      	b.n	24009386 <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
24009384:	2300      	movs	r3, #0
}
24009386:	4618      	mov	r0, r3
24009388:	46bd      	mov	sp, r7
2400938a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400938e:	4770      	bx	lr
24009390:	52002000 	.word	0x52002000
24009394:	45670123 	.word	0x45670123
24009398:	cdef89ab 	.word	0xcdef89ab

2400939c <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
2400939c:	b480      	push	{r7}
2400939e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
240093a0:	4b05      	ldr	r3, [pc, #20]	; (240093b8 <HAL_FLASHEx_Lock_Bank1+0x1c>)
240093a2:	68db      	ldr	r3, [r3, #12]
240093a4:	4a04      	ldr	r2, [pc, #16]	; (240093b8 <HAL_FLASHEx_Lock_Bank1+0x1c>)
240093a6:	f043 0301 	orr.w	r3, r3, #1
240093aa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
240093ac:	2300      	movs	r3, #0
}
240093ae:	4618      	mov	r0, r3
240093b0:	46bd      	mov	sp, r7
240093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240093b6:	4770      	bx	lr
240093b8:	52002000 	.word	0x52002000

240093bc <HAL_FLASHEx_Unlock_Bank2>:
/**
  * @brief  Unlock the FLASH Bank2 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank2(void)
{
240093bc:	b480      	push	{r7}
240093be:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
240093c0:	4b0e      	ldr	r3, [pc, #56]	; (240093fc <HAL_FLASHEx_Unlock_Bank2+0x40>)
240093c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240093c6:	f003 0301 	and.w	r3, r3, #1
240093ca:	2b00      	cmp	r3, #0
240093cc:	d010      	beq.n	240093f0 <HAL_FLASHEx_Unlock_Bank2+0x34>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
240093ce:	4b0b      	ldr	r3, [pc, #44]	; (240093fc <HAL_FLASHEx_Unlock_Bank2+0x40>)
240093d0:	4a0b      	ldr	r2, [pc, #44]	; (24009400 <HAL_FLASHEx_Unlock_Bank2+0x44>)
240093d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
240093d6:	4b09      	ldr	r3, [pc, #36]	; (240093fc <HAL_FLASHEx_Unlock_Bank2+0x40>)
240093d8:	4a0a      	ldr	r2, [pc, #40]	; (24009404 <HAL_FLASHEx_Unlock_Bank2+0x48>)
240093da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
240093de:	4b07      	ldr	r3, [pc, #28]	; (240093fc <HAL_FLASHEx_Unlock_Bank2+0x40>)
240093e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240093e4:	f003 0301 	and.w	r3, r3, #1
240093e8:	2b00      	cmp	r3, #0
240093ea:	d001      	beq.n	240093f0 <HAL_FLASHEx_Unlock_Bank2+0x34>
    {
      return HAL_ERROR;
240093ec:	2301      	movs	r3, #1
240093ee:	e000      	b.n	240093f2 <HAL_FLASHEx_Unlock_Bank2+0x36>
    }
  }

  return HAL_OK;
240093f0:	2300      	movs	r3, #0
}
240093f2:	4618      	mov	r0, r3
240093f4:	46bd      	mov	sp, r7
240093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240093fa:	4770      	bx	lr
240093fc:	52002000 	.word	0x52002000
24009400:	45670123 	.word	0x45670123
24009404:	cdef89ab 	.word	0xcdef89ab

24009408 <HAL_FLASHEx_Lock_Bank2>:
/**
  * @brief  Locks the FLASH Bank2 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank2(void)
{
24009408:	b480      	push	{r7}
2400940a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
2400940c:	4b06      	ldr	r3, [pc, #24]	; (24009428 <HAL_FLASHEx_Lock_Bank2+0x20>)
2400940e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009412:	4a05      	ldr	r2, [pc, #20]	; (24009428 <HAL_FLASHEx_Lock_Bank2+0x20>)
24009414:	f043 0301 	orr.w	r3, r3, #1
24009418:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  return HAL_OK;
2400941c:	2300      	movs	r3, #0
}
2400941e:	4618      	mov	r0, r3
24009420:	46bd      	mov	sp, r7
24009422:	f85d 7b04 	ldr.w	r7, [sp], #4
24009426:	4770      	bx	lr
24009428:	52002000 	.word	0x52002000

2400942c <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
2400942c:	b580      	push	{r7, lr}
2400942e:	b084      	sub	sp, #16
24009430:	af00      	add	r7, sp, #0
24009432:	6078      	str	r0, [r7, #4]
24009434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24009436:	f24c 3050 	movw	r0, #50000	; 0xc350
2400943a:	f7ff fc71 	bl	24008d20 <FLASH_OB_WaitForLastOperation>
2400943e:	4603      	mov	r3, r0
24009440:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
24009442:	7bfb      	ldrb	r3, [r7, #15]
24009444:	2b00      	cmp	r3, #0
24009446:	f040 80e0 	bne.w	2400960a <HAL_FLASHEx_ComputeCRC+0x1de>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
2400944a:	687b      	ldr	r3, [r7, #4]
2400944c:	689b      	ldr	r3, [r3, #8]
2400944e:	2b01      	cmp	r3, #1
24009450:	d166      	bne.n	24009520 <HAL_FLASHEx_ComputeCRC+0xf4>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
24009452:	4b70      	ldr	r3, [pc, #448]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009454:	68db      	ldr	r3, [r3, #12]
24009456:	4a6f      	ldr	r2, [pc, #444]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400945c:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
2400945e:	4b6d      	ldr	r3, [pc, #436]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009460:	695b      	ldr	r3, [r3, #20]
24009462:	4a6c      	ldr	r2, [pc, #432]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009464:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
24009468:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
2400946a:	4b6a      	ldr	r3, [pc, #424]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400946c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400946e:	687b      	ldr	r3, [r7, #4]
24009470:	6859      	ldr	r1, [r3, #4]
24009472:	687b      	ldr	r3, [r7, #4]
24009474:	681b      	ldr	r3, [r3, #0]
24009476:	430b      	orrs	r3, r1
24009478:	4313      	orrs	r3, r2
2400947a:	4a66      	ldr	r2, [pc, #408]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400947c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009480:	6513      	str	r3, [r2, #80]	; 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
24009482:	687b      	ldr	r3, [r7, #4]
24009484:	681b      	ldr	r3, [r3, #0]
24009486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400948a:	d119      	bne.n	240094c0 <HAL_FLASHEx_ComputeCRC+0x94>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
2400948c:	4b61      	ldr	r3, [pc, #388]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009490:	4a60      	ldr	r2, [pc, #384]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24009496:	6513      	str	r3, [r2, #80]	; 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24009498:	687b      	ldr	r3, [r7, #4]
2400949a:	68db      	ldr	r3, [r3, #12]
2400949c:	60bb      	str	r3, [r7, #8]
2400949e:	e006      	b.n	240094ae <HAL_FLASHEx_ComputeCRC+0x82>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
240094a0:	2101      	movs	r1, #1
240094a2:	68b8      	ldr	r0, [r7, #8]
240094a4:	f000 fc26 	bl	24009cf4 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
240094a8:	68bb      	ldr	r3, [r7, #8]
240094aa:	3301      	adds	r3, #1
240094ac:	60bb      	str	r3, [r7, #8]
240094ae:	687b      	ldr	r3, [r7, #4]
240094b0:	691a      	ldr	r2, [r3, #16]
240094b2:	687b      	ldr	r3, [r7, #4]
240094b4:	68db      	ldr	r3, [r3, #12]
240094b6:	4413      	add	r3, r2
240094b8:	68ba      	ldr	r2, [r7, #8]
240094ba:	429a      	cmp	r2, r3
240094bc:	d3f0      	bcc.n	240094a0 <HAL_FLASHEx_ComputeCRC+0x74>
240094be:	e013      	b.n	240094e8 <HAL_FLASHEx_ComputeCRC+0xbc>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
240094c0:	687b      	ldr	r3, [r7, #4]
240094c2:	681b      	ldr	r3, [r3, #0]
240094c4:	4a54      	ldr	r2, [pc, #336]	; (24009618 <HAL_FLASHEx_ComputeCRC+0x1ec>)
240094c6:	4293      	cmp	r3, r2
240094c8:	d106      	bne.n	240094d8 <HAL_FLASHEx_ComputeCRC+0xac>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
240094ca:	4b52      	ldr	r3, [pc, #328]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240094cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240094ce:	4a51      	ldr	r2, [pc, #324]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240094d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240094d4:	6513      	str	r3, [r2, #80]	; 0x50
240094d6:	e007      	b.n	240094e8 <HAL_FLASHEx_ComputeCRC+0xbc>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
240094d8:	687b      	ldr	r3, [r7, #4]
240094da:	6958      	ldr	r0, [r3, #20]
240094dc:	687b      	ldr	r3, [r7, #4]
240094de:	699b      	ldr	r3, [r3, #24]
240094e0:	2201      	movs	r2, #1
240094e2:	4619      	mov	r1, r3
240094e4:	f000 fc38 	bl	24009d58 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
240094e8:	4b4a      	ldr	r3, [pc, #296]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240094ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240094ec:	4a49      	ldr	r2, [pc, #292]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240094ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240094f2:	6513      	str	r3, [r2, #80]	; 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
240094f4:	2101      	movs	r1, #1
240094f6:	f24c 3050 	movw	r0, #50000	; 0xc350
240094fa:	f7ff fc4d 	bl	24008d98 <FLASH_CRC_WaitForLastOperation>
240094fe:	4603      	mov	r3, r0
24009500:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
24009502:	4b44      	ldr	r3, [pc, #272]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24009506:	683b      	ldr	r3, [r7, #0]
24009508:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
2400950a:	4b42      	ldr	r3, [pc, #264]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400950c:	68db      	ldr	r3, [r3, #12]
2400950e:	4a41      	ldr	r2, [pc, #260]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24009514:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
24009516:	4b3f      	ldr	r3, [pc, #252]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009518:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
2400951c:	615a      	str	r2, [r3, #20]
2400951e:	e074      	b.n	2400960a <HAL_FLASHEx_ComputeCRC+0x1de>
    }
#if defined (DUAL_BANK)
    else
    {
      /* Enable CRC feature */
      FLASH->CR2 |= FLASH_CR_CRC_EN;
24009520:	4b3c      	ldr	r3, [pc, #240]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009522:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009526:	4a3b      	ldr	r2, [pc, #236]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400952c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR2 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
24009530:	4b38      	ldr	r3, [pc, #224]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009532:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
24009536:	4a37      	ldr	r2, [pc, #220]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009538:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
2400953c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR2 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
24009540:	4b34      	ldr	r3, [pc, #208]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009542:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
24009546:	687b      	ldr	r3, [r7, #4]
24009548:	6859      	ldr	r1, [r3, #4]
2400954a:	687b      	ldr	r3, [r7, #4]
2400954c:	681b      	ldr	r3, [r3, #0]
2400954e:	430b      	orrs	r3, r1
24009550:	4313      	orrs	r3, r2
24009552:	4a30      	ldr	r2, [pc, #192]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009558:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
2400955c:	687b      	ldr	r3, [r7, #4]
2400955e:	681b      	ldr	r3, [r3, #0]
24009560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009564:	d11b      	bne.n	2400959e <HAL_FLASHEx_ComputeCRC+0x172>
      {
        /* Clear sectors list */
        FLASH->CRCCR2 |= FLASH_CRCCR_CLEAN_SECT;
24009566:	4b2b      	ldr	r3, [pc, #172]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009568:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2400956c:	4a29      	ldr	r2, [pc, #164]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
2400956e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24009572:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

        /* Add CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24009576:	687b      	ldr	r3, [r7, #4]
24009578:	68db      	ldr	r3, [r3, #12]
2400957a:	60bb      	str	r3, [r7, #8]
2400957c:	e006      	b.n	2400958c <HAL_FLASHEx_ComputeCRC+0x160>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_2);
2400957e:	2102      	movs	r1, #2
24009580:	68b8      	ldr	r0, [r7, #8]
24009582:	f000 fbb7 	bl	24009cf4 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24009586:	68bb      	ldr	r3, [r7, #8]
24009588:	3301      	adds	r3, #1
2400958a:	60bb      	str	r3, [r7, #8]
2400958c:	687b      	ldr	r3, [r7, #4]
2400958e:	691a      	ldr	r2, [r3, #16]
24009590:	687b      	ldr	r3, [r7, #4]
24009592:	68db      	ldr	r3, [r3, #12]
24009594:	4413      	add	r3, r2
24009596:	68ba      	ldr	r2, [r7, #8]
24009598:	429a      	cmp	r2, r3
2400959a:	d3f0      	bcc.n	2400957e <HAL_FLASHEx_ComputeCRC+0x152>
2400959c:	e015      	b.n	240095ca <HAL_FLASHEx_ComputeCRC+0x19e>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
2400959e:	687b      	ldr	r3, [r7, #4]
240095a0:	681b      	ldr	r3, [r3, #0]
240095a2:	4a1d      	ldr	r2, [pc, #116]	; (24009618 <HAL_FLASHEx_ComputeCRC+0x1ec>)
240095a4:	4293      	cmp	r3, r2
240095a6:	d108      	bne.n	240095ba <HAL_FLASHEx_ComputeCRC+0x18e>
      {
        /* Enable Bank 2 CRC select bit */
        FLASH->CRCCR2 |= FLASH_CRCCR_ALL_BANK;
240095a8:	4b1a      	ldr	r3, [pc, #104]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240095ae:	4a19      	ldr	r2, [pc, #100]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240095b4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
240095b8:	e007      	b.n	240095ca <HAL_FLASHEx_ComputeCRC+0x19e>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_2);
240095ba:	687b      	ldr	r3, [r7, #4]
240095bc:	6958      	ldr	r0, [r3, #20]
240095be:	687b      	ldr	r3, [r7, #4]
240095c0:	699b      	ldr	r3, [r3, #24]
240095c2:	2202      	movs	r2, #2
240095c4:	4619      	mov	r1, r3
240095c6:	f000 fbc7 	bl	24009d58 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR2 |= FLASH_CRCCR_START_CRC;
240095ca:	4b12      	ldr	r3, [pc, #72]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240095d0:	4a10      	ldr	r2, [pc, #64]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240095d6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
240095da:	2102      	movs	r1, #2
240095dc:	f24c 3050 	movw	r0, #50000	; 0xc350
240095e0:	f7ff fbda 	bl	24008d98 <FLASH_CRC_WaitForLastOperation>
240095e4:	4603      	mov	r3, r0
240095e6:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
240095e8:	4b0a      	ldr	r3, [pc, #40]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240095ec:	683b      	ldr	r3, [r7, #0]
240095ee:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR2 &= (~FLASH_CR_CRC_EN);
240095f0:	4b08      	ldr	r3, [pc, #32]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240095f6:	4a07      	ldr	r2, [pc, #28]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
240095f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240095fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
24009600:	4b04      	ldr	r3, [pc, #16]	; (24009614 <HAL_FLASHEx_ComputeCRC+0x1e8>)
24009602:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
24009606:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
#endif /* DUAL_BANK */
  }

  return status;
2400960a:	7bfb      	ldrb	r3, [r7, #15]
}
2400960c:	4618      	mov	r0, r3
2400960e:	3710      	adds	r7, #16
24009610:	46bd      	mov	sp, r7
24009612:	bd80      	pop	{r7, pc}
24009614:	52002000 	.word	0x52002000
24009618:	00400100 	.word	0x00400100

2400961c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
2400961c:	b480      	push	{r7}
2400961e:	b083      	sub	sp, #12
24009620:	af00      	add	r7, sp, #0
24009622:	6078      	str	r0, [r7, #4]
24009624:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
24009626:	683b      	ldr	r3, [r7, #0]
24009628:	f003 0303 	and.w	r3, r3, #3
2400962c:	2b03      	cmp	r3, #3
2400962e:	d122      	bne.n	24009676 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
24009630:	4b2e      	ldr	r3, [pc, #184]	; (240096ec <FLASH_MassErase+0xd0>)
24009632:	68db      	ldr	r3, [r3, #12]
24009634:	4a2d      	ldr	r2, [pc, #180]	; (240096ec <FLASH_MassErase+0xd0>)
24009636:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400963a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
2400963c:	4b2b      	ldr	r3, [pc, #172]	; (240096ec <FLASH_MassErase+0xd0>)
2400963e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009642:	4a2a      	ldr	r2, [pc, #168]	; (240096ec <FLASH_MassErase+0xd0>)
24009644:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24009648:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
2400964c:	4b27      	ldr	r3, [pc, #156]	; (240096ec <FLASH_MassErase+0xd0>)
2400964e:	68da      	ldr	r2, [r3, #12]
24009650:	4926      	ldr	r1, [pc, #152]	; (240096ec <FLASH_MassErase+0xd0>)
24009652:	687b      	ldr	r3, [r7, #4]
24009654:	4313      	orrs	r3, r2
24009656:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
24009658:	4b24      	ldr	r3, [pc, #144]	; (240096ec <FLASH_MassErase+0xd0>)
2400965a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
2400965e:	4923      	ldr	r1, [pc, #140]	; (240096ec <FLASH_MassErase+0xd0>)
24009660:	687b      	ldr	r3, [r7, #4]
24009662:	4313      	orrs	r3, r2
24009664:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
24009668:	4b20      	ldr	r3, [pc, #128]	; (240096ec <FLASH_MassErase+0xd0>)
2400966a:	699b      	ldr	r3, [r3, #24]
2400966c:	4a1f      	ldr	r2, [pc, #124]	; (240096ec <FLASH_MassErase+0xd0>)
2400966e:	f043 0310 	orr.w	r3, r3, #16
24009672:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
24009674:	e033      	b.n	240096de <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009676:	683b      	ldr	r3, [r7, #0]
24009678:	f003 0301 	and.w	r3, r3, #1
2400967c:	2b00      	cmp	r3, #0
2400967e:	d011      	beq.n	240096a4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
24009680:	4b1a      	ldr	r3, [pc, #104]	; (240096ec <FLASH_MassErase+0xd0>)
24009682:	68db      	ldr	r3, [r3, #12]
24009684:	4a19      	ldr	r2, [pc, #100]	; (240096ec <FLASH_MassErase+0xd0>)
24009686:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400968a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
2400968c:	4b17      	ldr	r3, [pc, #92]	; (240096ec <FLASH_MassErase+0xd0>)
2400968e:	68da      	ldr	r2, [r3, #12]
24009690:	4916      	ldr	r1, [pc, #88]	; (240096ec <FLASH_MassErase+0xd0>)
24009692:	687b      	ldr	r3, [r7, #4]
24009694:	4313      	orrs	r3, r2
24009696:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
24009698:	4b14      	ldr	r3, [pc, #80]	; (240096ec <FLASH_MassErase+0xd0>)
2400969a:	68db      	ldr	r3, [r3, #12]
2400969c:	4a13      	ldr	r2, [pc, #76]	; (240096ec <FLASH_MassErase+0xd0>)
2400969e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
240096a2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
240096a4:	683b      	ldr	r3, [r7, #0]
240096a6:	f003 0302 	and.w	r3, r3, #2
240096aa:	2b00      	cmp	r3, #0
240096ac:	d017      	beq.n	240096de <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
240096ae:	4b0f      	ldr	r3, [pc, #60]	; (240096ec <FLASH_MassErase+0xd0>)
240096b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240096b4:	4a0d      	ldr	r2, [pc, #52]	; (240096ec <FLASH_MassErase+0xd0>)
240096b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
240096ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
240096be:	4b0b      	ldr	r3, [pc, #44]	; (240096ec <FLASH_MassErase+0xd0>)
240096c0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
240096c4:	4909      	ldr	r1, [pc, #36]	; (240096ec <FLASH_MassErase+0xd0>)
240096c6:	687b      	ldr	r3, [r7, #4]
240096c8:	4313      	orrs	r3, r2
240096ca:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
240096ce:	4b07      	ldr	r3, [pc, #28]	; (240096ec <FLASH_MassErase+0xd0>)
240096d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
240096d4:	4a05      	ldr	r2, [pc, #20]	; (240096ec <FLASH_MassErase+0xd0>)
240096d6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
240096da:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
240096de:	bf00      	nop
240096e0:	370c      	adds	r7, #12
240096e2:	46bd      	mov	sp, r7
240096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240096e8:	4770      	bx	lr
240096ea:	bf00      	nop
240096ec:	52002000 	.word	0x52002000

240096f0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
240096f0:	b480      	push	{r7}
240096f2:	b085      	sub	sp, #20
240096f4:	af00      	add	r7, sp, #0
240096f6:	60f8      	str	r0, [r7, #12]
240096f8:	60b9      	str	r1, [r7, #8]
240096fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
240096fc:	68bb      	ldr	r3, [r7, #8]
240096fe:	f003 0301 	and.w	r3, r3, #1
24009702:	2b00      	cmp	r3, #0
24009704:	d010      	beq.n	24009728 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
24009706:	4b18      	ldr	r3, [pc, #96]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009708:	68db      	ldr	r3, [r3, #12]
2400970a:	4a17      	ldr	r2, [pc, #92]	; (24009768 <FLASH_Erase_Sector+0x78>)
2400970c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
24009710:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
24009712:	4b15      	ldr	r3, [pc, #84]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009714:	68da      	ldr	r2, [r3, #12]
24009716:	68fb      	ldr	r3, [r7, #12]
24009718:	0219      	lsls	r1, r3, #8
2400971a:	687b      	ldr	r3, [r7, #4]
2400971c:	430b      	orrs	r3, r1
2400971e:	4313      	orrs	r3, r2
24009720:	4a11      	ldr	r2, [pc, #68]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009722:	f043 0384 	orr.w	r3, r3, #132	; 0x84
24009726:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009728:	68bb      	ldr	r3, [r7, #8]
2400972a:	f003 0302 	and.w	r3, r3, #2
2400972e:	2b00      	cmp	r3, #0
24009730:	d014      	beq.n	2400975c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
24009732:	4b0d      	ldr	r3, [pc, #52]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009734:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
24009738:	4a0b      	ldr	r2, [pc, #44]	; (24009768 <FLASH_Erase_Sector+0x78>)
2400973a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
2400973e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
24009742:	4b09      	ldr	r3, [pc, #36]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009744:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
24009748:	68fb      	ldr	r3, [r7, #12]
2400974a:	0219      	lsls	r1, r3, #8
2400974c:	687b      	ldr	r3, [r7, #4]
2400974e:	430b      	orrs	r3, r1
24009750:	4313      	orrs	r3, r2
24009752:	4a05      	ldr	r2, [pc, #20]	; (24009768 <FLASH_Erase_Sector+0x78>)
24009754:	f043 0384 	orr.w	r3, r3, #132	; 0x84
24009758:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
2400975c:	bf00      	nop
2400975e:	3714      	adds	r7, #20
24009760:	46bd      	mov	sp, r7
24009762:	f85d 7b04 	ldr.w	r7, [sp], #4
24009766:	4770      	bx	lr
24009768:	52002000 	.word	0x52002000

2400976c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
2400976c:	b480      	push	{r7}
2400976e:	b083      	sub	sp, #12
24009770:	af00      	add	r7, sp, #0
24009772:	6078      	str	r0, [r7, #4]
24009774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009776:	683b      	ldr	r3, [r7, #0]
24009778:	f003 0301 	and.w	r3, r3, #1
2400977c:	2b00      	cmp	r3, #0
2400977e:	d007      	beq.n	24009790 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
24009780:	4b0e      	ldr	r3, [pc, #56]	; (240097bc <FLASH_OB_EnableWRP+0x50>)
24009782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24009784:	687b      	ldr	r3, [r7, #4]
24009786:	b2db      	uxtb	r3, r3
24009788:	43db      	mvns	r3, r3
2400978a:	490c      	ldr	r1, [pc, #48]	; (240097bc <FLASH_OB_EnableWRP+0x50>)
2400978c:	4013      	ands	r3, r2
2400978e:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009790:	683b      	ldr	r3, [r7, #0]
24009792:	f003 0302 	and.w	r3, r3, #2
24009796:	2b00      	cmp	r3, #0
24009798:	d009      	beq.n	240097ae <FLASH_OB_EnableWRP+0x42>
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
2400979a:	4b08      	ldr	r3, [pc, #32]	; (240097bc <FLASH_OB_EnableWRP+0x50>)
2400979c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
240097a0:	687b      	ldr	r3, [r7, #4]
240097a2:	b2db      	uxtb	r3, r3
240097a4:	43db      	mvns	r3, r3
240097a6:	4905      	ldr	r1, [pc, #20]	; (240097bc <FLASH_OB_EnableWRP+0x50>)
240097a8:	4013      	ands	r3, r2
240097aa:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
240097ae:	bf00      	nop
240097b0:	370c      	adds	r7, #12
240097b2:	46bd      	mov	sp, r7
240097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240097b8:	4770      	bx	lr
240097ba:	bf00      	nop
240097bc:	52002000 	.word	0x52002000

240097c0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
240097c0:	b480      	push	{r7}
240097c2:	b083      	sub	sp, #12
240097c4:	af00      	add	r7, sp, #0
240097c6:	6078      	str	r0, [r7, #4]
240097c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
240097ca:	683b      	ldr	r3, [r7, #0]
240097cc:	f003 0301 	and.w	r3, r3, #1
240097d0:	2b00      	cmp	r3, #0
240097d2:	d006      	beq.n	240097e2 <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
240097d4:	4b0d      	ldr	r3, [pc, #52]	; (2400980c <FLASH_OB_DisableWRP+0x4c>)
240097d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
240097d8:	687b      	ldr	r3, [r7, #4]
240097da:	b2db      	uxtb	r3, r3
240097dc:	490b      	ldr	r1, [pc, #44]	; (2400980c <FLASH_OB_DisableWRP+0x4c>)
240097de:	4313      	orrs	r3, r2
240097e0:	63cb      	str	r3, [r1, #60]	; 0x3c
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
240097e2:	683b      	ldr	r3, [r7, #0]
240097e4:	f003 0302 	and.w	r3, r3, #2
240097e8:	2b00      	cmp	r3, #0
240097ea:	d008      	beq.n	240097fe <FLASH_OB_DisableWRP+0x3e>
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
240097ec:	4b07      	ldr	r3, [pc, #28]	; (2400980c <FLASH_OB_DisableWRP+0x4c>)
240097ee:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
240097f2:	687b      	ldr	r3, [r7, #4]
240097f4:	b2db      	uxtb	r3, r3
240097f6:	4905      	ldr	r1, [pc, #20]	; (2400980c <FLASH_OB_DisableWRP+0x4c>)
240097f8:	4313      	orrs	r3, r2
240097fa:	f8c1 313c 	str.w	r3, [r1, #316]	; 0x13c
  }
#endif /* DUAL_BANK */
}
240097fe:	bf00      	nop
24009800:	370c      	adds	r7, #12
24009802:	46bd      	mov	sp, r7
24009804:	f85d 7b04 	ldr.w	r7, [sp], #4
24009808:	4770      	bx	lr
2400980a:	bf00      	nop
2400980c:	52002000 	.word	0x52002000

24009810 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
24009810:	b480      	push	{r7}
24009812:	b087      	sub	sp, #28
24009814:	af00      	add	r7, sp, #0
24009816:	60f8      	str	r0, [r7, #12]
24009818:	60b9      	str	r1, [r7, #8]
2400981a:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
2400981c:	2300      	movs	r3, #0
2400981e:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
24009820:	687b      	ldr	r3, [r7, #4]
24009822:	2b01      	cmp	r3, #1
24009824:	d102      	bne.n	2400982c <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
24009826:	4b10      	ldr	r3, [pc, #64]	; (24009868 <FLASH_OB_GetWRP+0x58>)
24009828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400982a:	617b      	str	r3, [r7, #20]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
2400982c:	687b      	ldr	r3, [r7, #4]
2400982e:	2b02      	cmp	r3, #2
24009830:	d103      	bne.n	2400983a <FLASH_OB_GetWRP+0x2a>
  {
    regvalue = FLASH->WPSN_CUR2;
24009832:	4b0d      	ldr	r3, [pc, #52]	; (24009868 <FLASH_OB_GetWRP+0x58>)
24009834:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24009838:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
2400983a:	697b      	ldr	r3, [r7, #20]
2400983c:	43db      	mvns	r3, r3
2400983e:	b2da      	uxtb	r2, r3
24009840:	68bb      	ldr	r3, [r7, #8]
24009842:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
24009844:	68bb      	ldr	r3, [r7, #8]
24009846:	681b      	ldr	r3, [r3, #0]
24009848:	2b00      	cmp	r3, #0
2400984a:	d103      	bne.n	24009854 <FLASH_OB_GetWRP+0x44>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
2400984c:	68fb      	ldr	r3, [r7, #12]
2400984e:	2200      	movs	r2, #0
24009850:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
24009852:	e002      	b.n	2400985a <FLASH_OB_GetWRP+0x4a>
    (*WRPState) = OB_WRPSTATE_ENABLE;
24009854:	68fb      	ldr	r3, [r7, #12]
24009856:	2201      	movs	r2, #1
24009858:	601a      	str	r2, [r3, #0]
}
2400985a:	bf00      	nop
2400985c:	371c      	adds	r7, #28
2400985e:	46bd      	mov	sp, r7
24009860:	f85d 7b04 	ldr.w	r7, [sp], #4
24009864:	4770      	bx	lr
24009866:	bf00      	nop
24009868:	52002000 	.word	0x52002000

2400986c <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
2400986c:	b480      	push	{r7}
2400986e:	b083      	sub	sp, #12
24009870:	af00      	add	r7, sp, #0
24009872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
24009874:	4b06      	ldr	r3, [pc, #24]	; (24009890 <FLASH_OB_RDPConfig+0x24>)
24009876:	6a1b      	ldr	r3, [r3, #32]
24009878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
2400987c:	4904      	ldr	r1, [pc, #16]	; (24009890 <FLASH_OB_RDPConfig+0x24>)
2400987e:	687b      	ldr	r3, [r7, #4]
24009880:	4313      	orrs	r3, r2
24009882:	620b      	str	r3, [r1, #32]
}
24009884:	bf00      	nop
24009886:	370c      	adds	r7, #12
24009888:	46bd      	mov	sp, r7
2400988a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400988e:	4770      	bx	lr
24009890:	52002000 	.word	0x52002000

24009894 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
24009894:	b480      	push	{r7}
24009896:	b083      	sub	sp, #12
24009898:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
2400989a:	4b0b      	ldr	r3, [pc, #44]	; (240098c8 <FLASH_OB_GetRDP+0x34>)
2400989c:	69db      	ldr	r3, [r3, #28]
2400989e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
240098a2:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
240098a4:	687b      	ldr	r3, [r7, #4]
240098a6:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
240098aa:	d006      	beq.n	240098ba <FLASH_OB_GetRDP+0x26>
240098ac:	687b      	ldr	r3, [r7, #4]
240098ae:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
240098b2:	d002      	beq.n	240098ba <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
240098b4:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
240098b8:	e000      	b.n	240098bc <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
240098ba:	687b      	ldr	r3, [r7, #4]
  }
}
240098bc:	4618      	mov	r0, r3
240098be:	370c      	adds	r7, #12
240098c0:	46bd      	mov	sp, r7
240098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240098c6:	4770      	bx	lr
240098c8:	52002000 	.word	0x52002000

240098cc <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
240098cc:	b480      	push	{r7}
240098ce:	b085      	sub	sp, #20
240098d0:	af00      	add	r7, sp, #0
240098d2:	6078      	str	r0, [r7, #4]
240098d4:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
240098d6:	2300      	movs	r3, #0
240098d8:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
240098da:	2300      	movs	r3, #0
240098dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
240098de:	687b      	ldr	r3, [r7, #4]
240098e0:	f003 0301 	and.w	r3, r3, #1
240098e4:	2b00      	cmp	r3, #0
240098e6:	d009      	beq.n	240098fc <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
240098e8:	683b      	ldr	r3, [r7, #0]
240098ea:	f003 0310 	and.w	r3, r3, #16
240098ee:	68fa      	ldr	r2, [r7, #12]
240098f0:	4313      	orrs	r3, r2
240098f2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
240098f4:	68bb      	ldr	r3, [r7, #8]
240098f6:	f043 0310 	orr.w	r3, r3, #16
240098fa:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
240098fc:	687b      	ldr	r3, [r7, #4]
240098fe:	f003 0302 	and.w	r3, r3, #2
24009902:	2b00      	cmp	r3, #0
24009904:	d009      	beq.n	2400991a <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
24009906:	683b      	ldr	r3, [r7, #0]
24009908:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400990c:	68fa      	ldr	r2, [r7, #12]
2400990e:	4313      	orrs	r3, r2
24009910:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
24009912:	68bb      	ldr	r3, [r7, #8]
24009914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009918:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
2400991a:	687b      	ldr	r3, [r7, #4]
2400991c:	f003 0304 	and.w	r3, r3, #4
24009920:	2b00      	cmp	r3, #0
24009922:	d009      	beq.n	24009938 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
24009924:	683b      	ldr	r3, [r7, #0]
24009926:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400992a:	68fa      	ldr	r2, [r7, #12]
2400992c:	4313      	orrs	r3, r2
2400992e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
24009930:	68bb      	ldr	r3, [r7, #8]
24009932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24009936:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
24009938:	687b      	ldr	r3, [r7, #4]
2400993a:	f003 0308 	and.w	r3, r3, #8
2400993e:	2b00      	cmp	r3, #0
24009940:	d009      	beq.n	24009956 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
24009942:	683b      	ldr	r3, [r7, #0]
24009944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24009948:	68fa      	ldr	r2, [r7, #12]
2400994a:	4313      	orrs	r3, r2
2400994c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
2400994e:	68bb      	ldr	r3, [r7, #8]
24009950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009954:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
24009956:	687b      	ldr	r3, [r7, #4]
24009958:	f003 0310 	and.w	r3, r3, #16
2400995c:	2b00      	cmp	r3, #0
2400995e:	d009      	beq.n	24009974 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
24009960:	683b      	ldr	r3, [r7, #0]
24009962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24009966:	68fa      	ldr	r2, [r7, #12]
24009968:	4313      	orrs	r3, r2
2400996a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
2400996c:	68bb      	ldr	r3, [r7, #8]
2400996e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24009972:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
24009974:	687b      	ldr	r3, [r7, #4]
24009976:	f003 0320 	and.w	r3, r3, #32
2400997a:	2b00      	cmp	r3, #0
2400997c:	d009      	beq.n	24009992 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
2400997e:	683b      	ldr	r3, [r7, #0]
24009980:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
24009984:	68fa      	ldr	r2, [r7, #12]
24009986:	4313      	orrs	r3, r2
24009988:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
2400998a:	68bb      	ldr	r3, [r7, #8]
2400998c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
24009990:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
24009992:	687b      	ldr	r3, [r7, #4]
24009994:	f003 0340 	and.w	r3, r3, #64	; 0x40
24009998:	2b00      	cmp	r3, #0
2400999a:	d009      	beq.n	240099b0 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
2400999c:	683b      	ldr	r3, [r7, #0]
2400999e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240099a2:	68fa      	ldr	r2, [r7, #12]
240099a4:	4313      	orrs	r3, r2
240099a6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
240099a8:	68bb      	ldr	r3, [r7, #8]
240099aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240099ae:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
  }
#endif /* FLASH_OPTSR_NRST_STOP_D2 */

#if defined (DUAL_BANK)
  if((UserType & OB_USER_SWAP_BANK) != 0U)
240099b0:	687b      	ldr	r3, [r7, #4]
240099b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
240099b6:	2b00      	cmp	r3, #0
240099b8:	d009      	beq.n	240099ce <FLASH_OB_UserConfig+0x102>
  {
    /* SWAP_BANK_OPT option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTSR_SWAP_BANK_OPT));

    /* Set value and mask for SWAP_BANK_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
240099ba:	683b      	ldr	r3, [r7, #0]
240099bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
240099c0:	68fa      	ldr	r2, [r7, #12]
240099c2:	4313      	orrs	r3, r2
240099c4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
240099c6:	68bb      	ldr	r3, [r7, #8]
240099c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
240099cc:	60bb      	str	r3, [r7, #8]
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
240099ce:	687b      	ldr	r3, [r7, #4]
240099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
240099d4:	2b00      	cmp	r3, #0
240099d6:	d009      	beq.n	240099ec <FLASH_OB_UserConfig+0x120>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
240099d8:	683b      	ldr	r3, [r7, #0]
240099da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240099de:	68fa      	ldr	r2, [r7, #12]
240099e0:	4313      	orrs	r3, r2
240099e2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
240099e4:	68bb      	ldr	r3, [r7, #8]
240099e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
240099ea:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
240099ec:	4b07      	ldr	r3, [pc, #28]	; (24009a0c <FLASH_OB_UserConfig+0x140>)
240099ee:	6a1a      	ldr	r2, [r3, #32]
240099f0:	68bb      	ldr	r3, [r7, #8]
240099f2:	43db      	mvns	r3, r3
240099f4:	401a      	ands	r2, r3
240099f6:	4905      	ldr	r1, [pc, #20]	; (24009a0c <FLASH_OB_UserConfig+0x140>)
240099f8:	68fb      	ldr	r3, [r7, #12]
240099fa:	4313      	orrs	r3, r2
240099fc:	620b      	str	r3, [r1, #32]
}
240099fe:	bf00      	nop
24009a00:	3714      	adds	r7, #20
24009a02:	46bd      	mov	sp, r7
24009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
24009a08:	4770      	bx	lr
24009a0a:	bf00      	nop
24009a0c:	52002000 	.word	0x52002000

24009a10 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
24009a10:	b480      	push	{r7}
24009a12:	b083      	sub	sp, #12
24009a14:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
24009a16:	4b07      	ldr	r3, [pc, #28]	; (24009a34 <FLASH_OB_GetUser+0x24>)
24009a18:	69db      	ldr	r3, [r3, #28]
24009a1a:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
24009a1c:	687a      	ldr	r2, [r7, #4]
24009a1e:	4b06      	ldr	r3, [pc, #24]	; (24009a38 <FLASH_OB_GetUser+0x28>)
24009a20:	4013      	ands	r3, r2
24009a22:	607b      	str	r3, [r7, #4]

  return userConfig;
24009a24:	687b      	ldr	r3, [r7, #4]
}
24009a26:	4618      	mov	r0, r3
24009a28:	370c      	adds	r7, #12
24009a2a:	46bd      	mov	sp, r7
24009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009a30:	4770      	bx	lr
24009a32:	bf00      	nop
24009a34:	52002000 	.word	0x52002000
24009a38:	ffff00f3 	.word	0xffff00f3

24009a3c <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
24009a3c:	b480      	push	{r7}
24009a3e:	b085      	sub	sp, #20
24009a40:	af00      	add	r7, sp, #0
24009a42:	60f8      	str	r0, [r7, #12]
24009a44:	60b9      	str	r1, [r7, #8]
24009a46:	607a      	str	r2, [r7, #4]
24009a48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009a4a:	683b      	ldr	r3, [r7, #0]
24009a4c:	f003 0301 	and.w	r3, r3, #1
24009a50:	2b00      	cmp	r3, #0
24009a52:	d00d      	beq.n	24009a70 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
24009a54:	68bb      	ldr	r3, [r7, #8]
24009a56:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009a5a:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
24009a5c:	687b      	ldr	r3, [r7, #4]
24009a5e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009a62:	0a1b      	lsrs	r3, r3, #8
24009a64:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
24009a66:	431a      	orrs	r2, r3
24009a68:	490e      	ldr	r1, [pc, #56]	; (24009aa4 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
24009a6a:	68fb      	ldr	r3, [r7, #12]
24009a6c:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
24009a6e:	62cb      	str	r3, [r1, #44]	; 0x2c
                       PCROPConfig;
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009a70:	683b      	ldr	r3, [r7, #0]
24009a72:	f003 0302 	and.w	r3, r3, #2
24009a76:	2b00      	cmp	r3, #0
24009a78:	d00e      	beq.n	24009a98 <FLASH_OB_PCROPConfig+0x5c>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
24009a7a:	68bb      	ldr	r3, [r7, #8]
24009a7c:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
24009a80:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
24009a82:	687b      	ldr	r3, [r7, #4]
24009a84:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
24009a88:	0a1b      	lsrs	r3, r3, #8
24009a8a:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
24009a8c:	431a      	orrs	r2, r3
24009a8e:	4905      	ldr	r1, [pc, #20]	; (24009aa4 <FLASH_OB_PCROPConfig+0x68>)
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
24009a90:	68fb      	ldr	r3, [r7, #12]
24009a92:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
24009a94:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
24009a98:	bf00      	nop
24009a9a:	3714      	adds	r7, #20
24009a9c:	46bd      	mov	sp, r7
24009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009aa2:	4770      	bx	lr
24009aa4:	52002000 	.word	0x52002000

24009aa8 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
24009aa8:	b480      	push	{r7}
24009aaa:	b087      	sub	sp, #28
24009aac:	af00      	add	r7, sp, #0
24009aae:	60f8      	str	r0, [r7, #12]
24009ab0:	60b9      	str	r1, [r7, #8]
24009ab2:	607a      	str	r2, [r7, #4]
24009ab4:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
24009ab6:	2300      	movs	r3, #0
24009ab8:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
24009aba:	2300      	movs	r3, #0
24009abc:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
24009abe:	683b      	ldr	r3, [r7, #0]
24009ac0:	2b01      	cmp	r3, #1
24009ac2:	d105      	bne.n	24009ad0 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
24009ac4:	4b17      	ldr	r3, [pc, #92]	; (24009b24 <FLASH_OB_GetPCROP+0x7c>)
24009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009ac8:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
24009aca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
24009ace:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
24009ad0:	683b      	ldr	r3, [r7, #0]
24009ad2:	2b02      	cmp	r3, #2
24009ad4:	d106      	bne.n	24009ae4 <FLASH_OB_GetPCROP+0x3c>
  {
    regvalue = FLASH->PRAR_CUR2;
24009ad6:	4b13      	ldr	r3, [pc, #76]	; (24009b24 <FLASH_OB_GetPCROP+0x7c>)
24009ad8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
24009adc:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
24009ade:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
24009ae2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
24009ae4:	697b      	ldr	r3, [r7, #20]
24009ae6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24009aea:	68fb      	ldr	r3, [r7, #12]
24009aec:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
24009aee:	697b      	ldr	r3, [r7, #20]
24009af0:	021a      	lsls	r2, r3, #8
24009af2:	4b0d      	ldr	r3, [pc, #52]	; (24009b28 <FLASH_OB_GetPCROP+0x80>)
24009af4:	4013      	ands	r3, r2
24009af6:	693a      	ldr	r2, [r7, #16]
24009af8:	441a      	add	r2, r3
24009afa:	68bb      	ldr	r3, [r7, #8]
24009afc:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
24009afe:	697b      	ldr	r3, [r7, #20]
24009b00:	0c1b      	lsrs	r3, r3, #16
24009b02:	f3c3 020b 	ubfx	r2, r3, #0, #12
24009b06:	687b      	ldr	r3, [r7, #4]
24009b08:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
24009b0a:	687b      	ldr	r3, [r7, #4]
24009b0c:	681b      	ldr	r3, [r3, #0]
24009b0e:	021a      	lsls	r2, r3, #8
24009b10:	693b      	ldr	r3, [r7, #16]
24009b12:	441a      	add	r2, r3
24009b14:	687b      	ldr	r3, [r7, #4]
24009b16:	601a      	str	r2, [r3, #0]
}
24009b18:	bf00      	nop
24009b1a:	371c      	adds	r7, #28
24009b1c:	46bd      	mov	sp, r7
24009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b22:	4770      	bx	lr
24009b24:	52002000 	.word	0x52002000
24009b28:	000fff00 	.word	0x000fff00

24009b2c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
24009b2c:	b480      	push	{r7}
24009b2e:	b083      	sub	sp, #12
24009b30:	af00      	add	r7, sp, #0
24009b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
24009b34:	4b06      	ldr	r3, [pc, #24]	; (24009b50 <FLASH_OB_BOR_LevelConfig+0x24>)
24009b36:	6a1b      	ldr	r3, [r3, #32]
24009b38:	f023 020c 	bic.w	r2, r3, #12
24009b3c:	4904      	ldr	r1, [pc, #16]	; (24009b50 <FLASH_OB_BOR_LevelConfig+0x24>)
24009b3e:	687b      	ldr	r3, [r7, #4]
24009b40:	4313      	orrs	r3, r2
24009b42:	620b      	str	r3, [r1, #32]
}
24009b44:	bf00      	nop
24009b46:	370c      	adds	r7, #12
24009b48:	46bd      	mov	sp, r7
24009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b4e:	4770      	bx	lr
24009b50:	52002000 	.word	0x52002000

24009b54 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
24009b54:	b480      	push	{r7}
24009b56:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
24009b58:	4b04      	ldr	r3, [pc, #16]	; (24009b6c <FLASH_OB_GetBOR+0x18>)
24009b5a:	69db      	ldr	r3, [r3, #28]
24009b5c:	f003 030c 	and.w	r3, r3, #12
}
24009b60:	4618      	mov	r0, r3
24009b62:	46bd      	mov	sp, r7
24009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b68:	4770      	bx	lr
24009b6a:	bf00      	nop
24009b6c:	52002000 	.word	0x52002000

24009b70 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
24009b70:	b480      	push	{r7}
24009b72:	b085      	sub	sp, #20
24009b74:	af00      	add	r7, sp, #0
24009b76:	60f8      	str	r0, [r7, #12]
24009b78:	60b9      	str	r1, [r7, #8]
24009b7a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
24009b7c:	68fb      	ldr	r3, [r7, #12]
24009b7e:	f003 0301 	and.w	r3, r3, #1
24009b82:	2b00      	cmp	r3, #0
24009b84:	d008      	beq.n	24009b98 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
24009b86:	4b0d      	ldr	r3, [pc, #52]	; (24009bbc <FLASH_OB_BootAddConfig+0x4c>)
24009b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24009b8a:	4b0d      	ldr	r3, [pc, #52]	; (24009bc0 <FLASH_OB_BootAddConfig+0x50>)
24009b8c:	4013      	ands	r3, r2
24009b8e:	68ba      	ldr	r2, [r7, #8]
24009b90:	0c12      	lsrs	r2, r2, #16
24009b92:	490a      	ldr	r1, [pc, #40]	; (24009bbc <FLASH_OB_BootAddConfig+0x4c>)
24009b94:	4313      	orrs	r3, r2
24009b96:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
24009b98:	68fb      	ldr	r3, [r7, #12]
24009b9a:	f003 0302 	and.w	r3, r3, #2
24009b9e:	2b00      	cmp	r3, #0
24009ba0:	d006      	beq.n	24009bb0 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
24009ba2:	4b06      	ldr	r3, [pc, #24]	; (24009bbc <FLASH_OB_BootAddConfig+0x4c>)
24009ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24009ba6:	b29a      	uxth	r2, r3
24009ba8:	4904      	ldr	r1, [pc, #16]	; (24009bbc <FLASH_OB_BootAddConfig+0x4c>)
24009baa:	687b      	ldr	r3, [r7, #4]
24009bac:	4313      	orrs	r3, r2
24009bae:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
24009bb0:	bf00      	nop
24009bb2:	3714      	adds	r7, #20
24009bb4:	46bd      	mov	sp, r7
24009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bba:	4770      	bx	lr
24009bbc:	52002000 	.word	0x52002000
24009bc0:	ffff0000 	.word	0xffff0000

24009bc4 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
24009bc4:	b480      	push	{r7}
24009bc6:	b085      	sub	sp, #20
24009bc8:	af00      	add	r7, sp, #0
24009bca:	6078      	str	r0, [r7, #4]
24009bcc:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
24009bce:	4b09      	ldr	r3, [pc, #36]	; (24009bf4 <FLASH_OB_GetBootAdd+0x30>)
24009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24009bd2:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
24009bd4:	68fb      	ldr	r3, [r7, #12]
24009bd6:	041a      	lsls	r2, r3, #16
24009bd8:	687b      	ldr	r3, [r7, #4]
24009bda:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
24009bdc:	68fa      	ldr	r2, [r7, #12]
24009bde:	4b06      	ldr	r3, [pc, #24]	; (24009bf8 <FLASH_OB_GetBootAdd+0x34>)
24009be0:	4013      	ands	r3, r2
24009be2:	683a      	ldr	r2, [r7, #0]
24009be4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
24009be6:	bf00      	nop
24009be8:	3714      	adds	r7, #20
24009bea:	46bd      	mov	sp, r7
24009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bf0:	4770      	bx	lr
24009bf2:	bf00      	nop
24009bf4:	52002000 	.word	0x52002000
24009bf8:	ffff0000 	.word	0xffff0000

24009bfc <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
24009bfc:	b480      	push	{r7}
24009bfe:	b085      	sub	sp, #20
24009c00:	af00      	add	r7, sp, #0
24009c02:	60f8      	str	r0, [r7, #12]
24009c04:	60b9      	str	r1, [r7, #8]
24009c06:	607a      	str	r2, [r7, #4]
24009c08:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009c0a:	683b      	ldr	r3, [r7, #0]
24009c0c:	f003 0301 	and.w	r3, r3, #1
24009c10:	2b00      	cmp	r3, #0
24009c12:	d00f      	beq.n	24009c34 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009c14:	68bb      	ldr	r3, [r7, #8]
24009c16:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009c1a:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009c1c:	687b      	ldr	r3, [r7, #4]
24009c1e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009c22:	0a1b      	lsrs	r3, r3, #8
24009c24:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009c26:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
24009c28:	68fb      	ldr	r3, [r7, #12]
24009c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009c2e:	490f      	ldr	r1, [pc, #60]	; (24009c6c <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009c30:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009c32:	634b      	str	r3, [r1, #52]	; 0x34
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
24009c34:	683b      	ldr	r3, [r7, #0]
24009c36:	f003 0302 	and.w	r3, r3, #2
24009c3a:	2b00      	cmp	r3, #0
24009c3c:	d010      	beq.n	24009c60 <FLASH_OB_SecureAreaConfig+0x64>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK2(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
24009c3e:	68bb      	ldr	r3, [r7, #8]
24009c40:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
24009c44:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009c46:	687b      	ldr	r3, [r7, #4]
24009c48:	f1a3 6301 	sub.w	r3, r3, #135266304	; 0x8100000
24009c4c:	0a1b      	lsrs	r3, r3, #8
24009c4e:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
24009c50:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
24009c52:	68fb      	ldr	r3, [r7, #12]
24009c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
24009c58:	4904      	ldr	r1, [pc, #16]	; (24009c6c <FLASH_OB_SecureAreaConfig+0x70>)
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009c5a:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
24009c5c:	f8c1 3134 	str.w	r3, [r1, #308]	; 0x134
  }
#endif /* DUAL_BANK */
}
24009c60:	bf00      	nop
24009c62:	3714      	adds	r7, #20
24009c64:	46bd      	mov	sp, r7
24009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c6a:	4770      	bx	lr
24009c6c:	52002000 	.word	0x52002000

24009c70 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
24009c70:	b480      	push	{r7}
24009c72:	b087      	sub	sp, #28
24009c74:	af00      	add	r7, sp, #0
24009c76:	60f8      	str	r0, [r7, #12]
24009c78:	60b9      	str	r1, [r7, #8]
24009c7a:	607a      	str	r2, [r7, #4]
24009c7c:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
24009c7e:	2300      	movs	r3, #0
24009c80:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
24009c82:	2300      	movs	r3, #0
24009c84:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
24009c86:	683b      	ldr	r3, [r7, #0]
24009c88:	2b01      	cmp	r3, #1
24009c8a:	d105      	bne.n	24009c98 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
24009c8c:	4b17      	ldr	r3, [pc, #92]	; (24009cec <FLASH_OB_GetSecureArea+0x7c>)
24009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009c90:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
24009c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
24009c96:	613b      	str	r3, [r7, #16]
  }

#if defined (DUAL_BANK)
  if(Bank == FLASH_BANK_2)
24009c98:	683b      	ldr	r3, [r7, #0]
24009c9a:	2b02      	cmp	r3, #2
24009c9c:	d106      	bne.n	24009cac <FLASH_OB_GetSecureArea+0x3c>
  {
    regvalue = FLASH->SCAR_CUR2;
24009c9e:	4b13      	ldr	r3, [pc, #76]	; (24009cec <FLASH_OB_GetSecureArea+0x7c>)
24009ca0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
24009ca4:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK2_BASE;
24009ca6:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
24009caa:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
24009cac:	697b      	ldr	r3, [r7, #20]
24009cae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24009cb2:	68fb      	ldr	r3, [r7, #12]
24009cb4:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
24009cb6:	697b      	ldr	r3, [r7, #20]
24009cb8:	021a      	lsls	r2, r3, #8
24009cba:	4b0d      	ldr	r3, [pc, #52]	; (24009cf0 <FLASH_OB_GetSecureArea+0x80>)
24009cbc:	4013      	ands	r3, r2
24009cbe:	693a      	ldr	r2, [r7, #16]
24009cc0:	441a      	add	r2, r3
24009cc2:	68bb      	ldr	r3, [r7, #8]
24009cc4:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
24009cc6:	697b      	ldr	r3, [r7, #20]
24009cc8:	0c1b      	lsrs	r3, r3, #16
24009cca:	f3c3 020b 	ubfx	r2, r3, #0, #12
24009cce:	687b      	ldr	r3, [r7, #4]
24009cd0:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
24009cd2:	687b      	ldr	r3, [r7, #4]
24009cd4:	681b      	ldr	r3, [r3, #0]
24009cd6:	021a      	lsls	r2, r3, #8
24009cd8:	693b      	ldr	r3, [r7, #16]
24009cda:	441a      	add	r2, r3
24009cdc:	687b      	ldr	r3, [r7, #4]
24009cde:	601a      	str	r2, [r3, #0]
}
24009ce0:	bf00      	nop
24009ce2:	371c      	adds	r7, #28
24009ce4:	46bd      	mov	sp, r7
24009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009cea:	4770      	bx	lr
24009cec:	52002000 	.word	0x52002000
24009cf0:	000fff00 	.word	0x000fff00

24009cf4 <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
24009cf4:	b480      	push	{r7}
24009cf6:	b083      	sub	sp, #12
24009cf8:	af00      	add	r7, sp, #0
24009cfa:	6078      	str	r0, [r7, #4]
24009cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
24009cfe:	683b      	ldr	r3, [r7, #0]
24009d00:	2b01      	cmp	r3, #1
24009d02:	d10e      	bne.n	24009d22 <FLASH_CRC_AddSector+0x2e>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
24009d04:	4b13      	ldr	r3, [pc, #76]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009d08:	4a12      	ldr	r2, [pc, #72]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d0a:	f023 0307 	bic.w	r3, r3, #7
24009d0e:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
24009d10:	4b10      	ldr	r3, [pc, #64]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24009d14:	687b      	ldr	r3, [r7, #4]
24009d16:	4313      	orrs	r3, r2
24009d18:	4a0e      	ldr	r2, [pc, #56]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24009d1e:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
24009d20:	e011      	b.n	24009d46 <FLASH_CRC_AddSector+0x52>
    FLASH->CRCCR2 &= (~FLASH_CRCCR_CRC_SECT);
24009d22:	4b0c      	ldr	r3, [pc, #48]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d24:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24009d28:	4a0a      	ldr	r2, [pc, #40]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d2a:	f023 0307 	bic.w	r3, r3, #7
24009d2e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
24009d32:	4b08      	ldr	r3, [pc, #32]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d34:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
24009d38:	687b      	ldr	r3, [r7, #4]
24009d3a:	4313      	orrs	r3, r2
24009d3c:	4a05      	ldr	r2, [pc, #20]	; (24009d54 <FLASH_CRC_AddSector+0x60>)
24009d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24009d42:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
}
24009d46:	bf00      	nop
24009d48:	370c      	adds	r7, #12
24009d4a:	46bd      	mov	sp, r7
24009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d50:	4770      	bx	lr
24009d52:	bf00      	nop
24009d54:	52002000 	.word	0x52002000

24009d58 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
24009d58:	b480      	push	{r7}
24009d5a:	b085      	sub	sp, #20
24009d5c:	af00      	add	r7, sp, #0
24009d5e:	60f8      	str	r0, [r7, #12]
24009d60:	60b9      	str	r1, [r7, #8]
24009d62:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
24009d64:	687b      	ldr	r3, [r7, #4]
24009d66:	2b01      	cmp	r3, #1
24009d68:	d106      	bne.n	24009d78 <FLASH_CRC_SelectAddress+0x20>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
24009d6a:	4a0a      	ldr	r2, [pc, #40]	; (24009d94 <FLASH_CRC_SelectAddress+0x3c>)
24009d6c:	68fb      	ldr	r3, [r7, #12]
24009d6e:	6553      	str	r3, [r2, #84]	; 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
24009d70:	4a08      	ldr	r2, [pc, #32]	; (24009d94 <FLASH_CRC_SelectAddress+0x3c>)
24009d72:	68bb      	ldr	r3, [r7, #8]
24009d74:	6593      	str	r3, [r2, #88]	; 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
24009d76:	e007      	b.n	24009d88 <FLASH_CRC_SelectAddress+0x30>
    FLASH->CRCSADD2 = CRCStartAddr;
24009d78:	4a06      	ldr	r2, [pc, #24]	; (24009d94 <FLASH_CRC_SelectAddress+0x3c>)
24009d7a:	68fb      	ldr	r3, [r7, #12]
24009d7c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
    FLASH->CRCEADD2 = CRCEndAddr;
24009d80:	4a04      	ldr	r2, [pc, #16]	; (24009d94 <FLASH_CRC_SelectAddress+0x3c>)
24009d82:	68bb      	ldr	r3, [r7, #8]
24009d84:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
}
24009d88:	bf00      	nop
24009d8a:	3714      	adds	r7, #20
24009d8c:	46bd      	mov	sp, r7
24009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d92:	4770      	bx	lr
24009d94:	52002000 	.word	0x52002000

24009d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24009d98:	b480      	push	{r7}
24009d9a:	b089      	sub	sp, #36	; 0x24
24009d9c:	af00      	add	r7, sp, #0
24009d9e:	6078      	str	r0, [r7, #4]
24009da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24009da2:	2300      	movs	r3, #0
24009da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24009da6:	4b89      	ldr	r3, [pc, #548]	; (24009fcc <HAL_GPIO_Init+0x234>)
24009da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24009daa:	e194      	b.n	2400a0d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24009dac:	683b      	ldr	r3, [r7, #0]
24009dae:	681a      	ldr	r2, [r3, #0]
24009db0:	2101      	movs	r1, #1
24009db2:	69fb      	ldr	r3, [r7, #28]
24009db4:	fa01 f303 	lsl.w	r3, r1, r3
24009db8:	4013      	ands	r3, r2
24009dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
24009dbc:	693b      	ldr	r3, [r7, #16]
24009dbe:	2b00      	cmp	r3, #0
24009dc0:	f000 8186 	beq.w	2400a0d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24009dc4:	683b      	ldr	r3, [r7, #0]
24009dc6:	685b      	ldr	r3, [r3, #4]
24009dc8:	f003 0303 	and.w	r3, r3, #3
24009dcc:	2b01      	cmp	r3, #1
24009dce:	d005      	beq.n	24009ddc <HAL_GPIO_Init+0x44>
24009dd0:	683b      	ldr	r3, [r7, #0]
24009dd2:	685b      	ldr	r3, [r3, #4]
24009dd4:	f003 0303 	and.w	r3, r3, #3
24009dd8:	2b02      	cmp	r3, #2
24009dda:	d130      	bne.n	24009e3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24009ddc:	687b      	ldr	r3, [r7, #4]
24009dde:	689b      	ldr	r3, [r3, #8]
24009de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24009de2:	69fb      	ldr	r3, [r7, #28]
24009de4:	005b      	lsls	r3, r3, #1
24009de6:	2203      	movs	r2, #3
24009de8:	fa02 f303 	lsl.w	r3, r2, r3
24009dec:	43db      	mvns	r3, r3
24009dee:	69ba      	ldr	r2, [r7, #24]
24009df0:	4013      	ands	r3, r2
24009df2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24009df4:	683b      	ldr	r3, [r7, #0]
24009df6:	68da      	ldr	r2, [r3, #12]
24009df8:	69fb      	ldr	r3, [r7, #28]
24009dfa:	005b      	lsls	r3, r3, #1
24009dfc:	fa02 f303 	lsl.w	r3, r2, r3
24009e00:	69ba      	ldr	r2, [r7, #24]
24009e02:	4313      	orrs	r3, r2
24009e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24009e06:	687b      	ldr	r3, [r7, #4]
24009e08:	69ba      	ldr	r2, [r7, #24]
24009e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24009e0c:	687b      	ldr	r3, [r7, #4]
24009e0e:	685b      	ldr	r3, [r3, #4]
24009e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24009e12:	2201      	movs	r2, #1
24009e14:	69fb      	ldr	r3, [r7, #28]
24009e16:	fa02 f303 	lsl.w	r3, r2, r3
24009e1a:	43db      	mvns	r3, r3
24009e1c:	69ba      	ldr	r2, [r7, #24]
24009e1e:	4013      	ands	r3, r2
24009e20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24009e22:	683b      	ldr	r3, [r7, #0]
24009e24:	685b      	ldr	r3, [r3, #4]
24009e26:	091b      	lsrs	r3, r3, #4
24009e28:	f003 0201 	and.w	r2, r3, #1
24009e2c:	69fb      	ldr	r3, [r7, #28]
24009e2e:	fa02 f303 	lsl.w	r3, r2, r3
24009e32:	69ba      	ldr	r2, [r7, #24]
24009e34:	4313      	orrs	r3, r2
24009e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24009e38:	687b      	ldr	r3, [r7, #4]
24009e3a:	69ba      	ldr	r2, [r7, #24]
24009e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24009e3e:	683b      	ldr	r3, [r7, #0]
24009e40:	685b      	ldr	r3, [r3, #4]
24009e42:	f003 0303 	and.w	r3, r3, #3
24009e46:	2b03      	cmp	r3, #3
24009e48:	d017      	beq.n	24009e7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
24009e4a:	687b      	ldr	r3, [r7, #4]
24009e4c:	68db      	ldr	r3, [r3, #12]
24009e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24009e50:	69fb      	ldr	r3, [r7, #28]
24009e52:	005b      	lsls	r3, r3, #1
24009e54:	2203      	movs	r2, #3
24009e56:	fa02 f303 	lsl.w	r3, r2, r3
24009e5a:	43db      	mvns	r3, r3
24009e5c:	69ba      	ldr	r2, [r7, #24]
24009e5e:	4013      	ands	r3, r2
24009e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24009e62:	683b      	ldr	r3, [r7, #0]
24009e64:	689a      	ldr	r2, [r3, #8]
24009e66:	69fb      	ldr	r3, [r7, #28]
24009e68:	005b      	lsls	r3, r3, #1
24009e6a:	fa02 f303 	lsl.w	r3, r2, r3
24009e6e:	69ba      	ldr	r2, [r7, #24]
24009e70:	4313      	orrs	r3, r2
24009e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
24009e74:	687b      	ldr	r3, [r7, #4]
24009e76:	69ba      	ldr	r2, [r7, #24]
24009e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24009e7a:	683b      	ldr	r3, [r7, #0]
24009e7c:	685b      	ldr	r3, [r3, #4]
24009e7e:	f003 0303 	and.w	r3, r3, #3
24009e82:	2b02      	cmp	r3, #2
24009e84:	d123      	bne.n	24009ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
24009e86:	69fb      	ldr	r3, [r7, #28]
24009e88:	08da      	lsrs	r2, r3, #3
24009e8a:	687b      	ldr	r3, [r7, #4]
24009e8c:	3208      	adds	r2, #8
24009e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24009e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24009e94:	69fb      	ldr	r3, [r7, #28]
24009e96:	f003 0307 	and.w	r3, r3, #7
24009e9a:	009b      	lsls	r3, r3, #2
24009e9c:	220f      	movs	r2, #15
24009e9e:	fa02 f303 	lsl.w	r3, r2, r3
24009ea2:	43db      	mvns	r3, r3
24009ea4:	69ba      	ldr	r2, [r7, #24]
24009ea6:	4013      	ands	r3, r2
24009ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24009eaa:	683b      	ldr	r3, [r7, #0]
24009eac:	691a      	ldr	r2, [r3, #16]
24009eae:	69fb      	ldr	r3, [r7, #28]
24009eb0:	f003 0307 	and.w	r3, r3, #7
24009eb4:	009b      	lsls	r3, r3, #2
24009eb6:	fa02 f303 	lsl.w	r3, r2, r3
24009eba:	69ba      	ldr	r2, [r7, #24]
24009ebc:	4313      	orrs	r3, r2
24009ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24009ec0:	69fb      	ldr	r3, [r7, #28]
24009ec2:	08da      	lsrs	r2, r3, #3
24009ec4:	687b      	ldr	r3, [r7, #4]
24009ec6:	3208      	adds	r2, #8
24009ec8:	69b9      	ldr	r1, [r7, #24]
24009eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
24009ece:	687b      	ldr	r3, [r7, #4]
24009ed0:	681b      	ldr	r3, [r3, #0]
24009ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24009ed4:	69fb      	ldr	r3, [r7, #28]
24009ed6:	005b      	lsls	r3, r3, #1
24009ed8:	2203      	movs	r2, #3
24009eda:	fa02 f303 	lsl.w	r3, r2, r3
24009ede:	43db      	mvns	r3, r3
24009ee0:	69ba      	ldr	r2, [r7, #24]
24009ee2:	4013      	ands	r3, r2
24009ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24009ee6:	683b      	ldr	r3, [r7, #0]
24009ee8:	685b      	ldr	r3, [r3, #4]
24009eea:	f003 0203 	and.w	r2, r3, #3
24009eee:	69fb      	ldr	r3, [r7, #28]
24009ef0:	005b      	lsls	r3, r3, #1
24009ef2:	fa02 f303 	lsl.w	r3, r2, r3
24009ef6:	69ba      	ldr	r2, [r7, #24]
24009ef8:	4313      	orrs	r3, r2
24009efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
24009efc:	687b      	ldr	r3, [r7, #4]
24009efe:	69ba      	ldr	r2, [r7, #24]
24009f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24009f02:	683b      	ldr	r3, [r7, #0]
24009f04:	685b      	ldr	r3, [r3, #4]
24009f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24009f0a:	2b00      	cmp	r3, #0
24009f0c:	f000 80e0 	beq.w	2400a0d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24009f10:	4b2f      	ldr	r3, [pc, #188]	; (24009fd0 <HAL_GPIO_Init+0x238>)
24009f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24009f16:	4a2e      	ldr	r2, [pc, #184]	; (24009fd0 <HAL_GPIO_Init+0x238>)
24009f18:	f043 0302 	orr.w	r3, r3, #2
24009f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24009f20:	4b2b      	ldr	r3, [pc, #172]	; (24009fd0 <HAL_GPIO_Init+0x238>)
24009f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24009f26:	f003 0302 	and.w	r3, r3, #2
24009f2a:	60fb      	str	r3, [r7, #12]
24009f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
24009f2e:	4a29      	ldr	r2, [pc, #164]	; (24009fd4 <HAL_GPIO_Init+0x23c>)
24009f30:	69fb      	ldr	r3, [r7, #28]
24009f32:	089b      	lsrs	r3, r3, #2
24009f34:	3302      	adds	r3, #2
24009f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24009f3c:	69fb      	ldr	r3, [r7, #28]
24009f3e:	f003 0303 	and.w	r3, r3, #3
24009f42:	009b      	lsls	r3, r3, #2
24009f44:	220f      	movs	r2, #15
24009f46:	fa02 f303 	lsl.w	r3, r2, r3
24009f4a:	43db      	mvns	r3, r3
24009f4c:	69ba      	ldr	r2, [r7, #24]
24009f4e:	4013      	ands	r3, r2
24009f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24009f52:	687b      	ldr	r3, [r7, #4]
24009f54:	4a20      	ldr	r2, [pc, #128]	; (24009fd8 <HAL_GPIO_Init+0x240>)
24009f56:	4293      	cmp	r3, r2
24009f58:	d052      	beq.n	2400a000 <HAL_GPIO_Init+0x268>
24009f5a:	687b      	ldr	r3, [r7, #4]
24009f5c:	4a1f      	ldr	r2, [pc, #124]	; (24009fdc <HAL_GPIO_Init+0x244>)
24009f5e:	4293      	cmp	r3, r2
24009f60:	d031      	beq.n	24009fc6 <HAL_GPIO_Init+0x22e>
24009f62:	687b      	ldr	r3, [r7, #4]
24009f64:	4a1e      	ldr	r2, [pc, #120]	; (24009fe0 <HAL_GPIO_Init+0x248>)
24009f66:	4293      	cmp	r3, r2
24009f68:	d02b      	beq.n	24009fc2 <HAL_GPIO_Init+0x22a>
24009f6a:	687b      	ldr	r3, [r7, #4]
24009f6c:	4a1d      	ldr	r2, [pc, #116]	; (24009fe4 <HAL_GPIO_Init+0x24c>)
24009f6e:	4293      	cmp	r3, r2
24009f70:	d025      	beq.n	24009fbe <HAL_GPIO_Init+0x226>
24009f72:	687b      	ldr	r3, [r7, #4]
24009f74:	4a1c      	ldr	r2, [pc, #112]	; (24009fe8 <HAL_GPIO_Init+0x250>)
24009f76:	4293      	cmp	r3, r2
24009f78:	d01f      	beq.n	24009fba <HAL_GPIO_Init+0x222>
24009f7a:	687b      	ldr	r3, [r7, #4]
24009f7c:	4a1b      	ldr	r2, [pc, #108]	; (24009fec <HAL_GPIO_Init+0x254>)
24009f7e:	4293      	cmp	r3, r2
24009f80:	d019      	beq.n	24009fb6 <HAL_GPIO_Init+0x21e>
24009f82:	687b      	ldr	r3, [r7, #4]
24009f84:	4a1a      	ldr	r2, [pc, #104]	; (24009ff0 <HAL_GPIO_Init+0x258>)
24009f86:	4293      	cmp	r3, r2
24009f88:	d013      	beq.n	24009fb2 <HAL_GPIO_Init+0x21a>
24009f8a:	687b      	ldr	r3, [r7, #4]
24009f8c:	4a19      	ldr	r2, [pc, #100]	; (24009ff4 <HAL_GPIO_Init+0x25c>)
24009f8e:	4293      	cmp	r3, r2
24009f90:	d00d      	beq.n	24009fae <HAL_GPIO_Init+0x216>
24009f92:	687b      	ldr	r3, [r7, #4]
24009f94:	4a18      	ldr	r2, [pc, #96]	; (24009ff8 <HAL_GPIO_Init+0x260>)
24009f96:	4293      	cmp	r3, r2
24009f98:	d007      	beq.n	24009faa <HAL_GPIO_Init+0x212>
24009f9a:	687b      	ldr	r3, [r7, #4]
24009f9c:	4a17      	ldr	r2, [pc, #92]	; (24009ffc <HAL_GPIO_Init+0x264>)
24009f9e:	4293      	cmp	r3, r2
24009fa0:	d101      	bne.n	24009fa6 <HAL_GPIO_Init+0x20e>
24009fa2:	2309      	movs	r3, #9
24009fa4:	e02d      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fa6:	230a      	movs	r3, #10
24009fa8:	e02b      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009faa:	2308      	movs	r3, #8
24009fac:	e029      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fae:	2307      	movs	r3, #7
24009fb0:	e027      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fb2:	2306      	movs	r3, #6
24009fb4:	e025      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fb6:	2305      	movs	r3, #5
24009fb8:	e023      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fba:	2304      	movs	r3, #4
24009fbc:	e021      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fbe:	2303      	movs	r3, #3
24009fc0:	e01f      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fc2:	2302      	movs	r3, #2
24009fc4:	e01d      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fc6:	2301      	movs	r3, #1
24009fc8:	e01b      	b.n	2400a002 <HAL_GPIO_Init+0x26a>
24009fca:	bf00      	nop
24009fcc:	58000080 	.word	0x58000080
24009fd0:	58024400 	.word	0x58024400
24009fd4:	58000400 	.word	0x58000400
24009fd8:	58020000 	.word	0x58020000
24009fdc:	58020400 	.word	0x58020400
24009fe0:	58020800 	.word	0x58020800
24009fe4:	58020c00 	.word	0x58020c00
24009fe8:	58021000 	.word	0x58021000
24009fec:	58021400 	.word	0x58021400
24009ff0:	58021800 	.word	0x58021800
24009ff4:	58021c00 	.word	0x58021c00
24009ff8:	58022000 	.word	0x58022000
24009ffc:	58022400 	.word	0x58022400
2400a000:	2300      	movs	r3, #0
2400a002:	69fa      	ldr	r2, [r7, #28]
2400a004:	f002 0203 	and.w	r2, r2, #3
2400a008:	0092      	lsls	r2, r2, #2
2400a00a:	4093      	lsls	r3, r2
2400a00c:	69ba      	ldr	r2, [r7, #24]
2400a00e:	4313      	orrs	r3, r2
2400a010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2400a012:	4938      	ldr	r1, [pc, #224]	; (2400a0f4 <HAL_GPIO_Init+0x35c>)
2400a014:	69fb      	ldr	r3, [r7, #28]
2400a016:	089b      	lsrs	r3, r3, #2
2400a018:	3302      	adds	r3, #2
2400a01a:	69ba      	ldr	r2, [r7, #24]
2400a01c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2400a020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a024:	681b      	ldr	r3, [r3, #0]
2400a026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a028:	693b      	ldr	r3, [r7, #16]
2400a02a:	43db      	mvns	r3, r3
2400a02c:	69ba      	ldr	r2, [r7, #24]
2400a02e:	4013      	ands	r3, r2
2400a030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2400a032:	683b      	ldr	r3, [r7, #0]
2400a034:	685b      	ldr	r3, [r3, #4]
2400a036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2400a03a:	2b00      	cmp	r3, #0
2400a03c:	d003      	beq.n	2400a046 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
2400a03e:	69ba      	ldr	r2, [r7, #24]
2400a040:	693b      	ldr	r3, [r7, #16]
2400a042:	4313      	orrs	r3, r2
2400a044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2400a046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400a04a:	69bb      	ldr	r3, [r7, #24]
2400a04c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
2400a04e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a052:	685b      	ldr	r3, [r3, #4]
2400a054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a056:	693b      	ldr	r3, [r7, #16]
2400a058:	43db      	mvns	r3, r3
2400a05a:	69ba      	ldr	r2, [r7, #24]
2400a05c:	4013      	ands	r3, r2
2400a05e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400a060:	683b      	ldr	r3, [r7, #0]
2400a062:	685b      	ldr	r3, [r3, #4]
2400a064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400a068:	2b00      	cmp	r3, #0
2400a06a:	d003      	beq.n	2400a074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
2400a06c:	69ba      	ldr	r2, [r7, #24]
2400a06e:	693b      	ldr	r3, [r7, #16]
2400a070:	4313      	orrs	r3, r2
2400a072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
2400a074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400a078:	69bb      	ldr	r3, [r7, #24]
2400a07a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2400a07c:	697b      	ldr	r3, [r7, #20]
2400a07e:	685b      	ldr	r3, [r3, #4]
2400a080:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a082:	693b      	ldr	r3, [r7, #16]
2400a084:	43db      	mvns	r3, r3
2400a086:	69ba      	ldr	r2, [r7, #24]
2400a088:	4013      	ands	r3, r2
2400a08a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400a08c:	683b      	ldr	r3, [r7, #0]
2400a08e:	685b      	ldr	r3, [r3, #4]
2400a090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400a094:	2b00      	cmp	r3, #0
2400a096:	d003      	beq.n	2400a0a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
2400a098:	69ba      	ldr	r2, [r7, #24]
2400a09a:	693b      	ldr	r3, [r7, #16]
2400a09c:	4313      	orrs	r3, r2
2400a09e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400a0a0:	697b      	ldr	r3, [r7, #20]
2400a0a2:	69ba      	ldr	r2, [r7, #24]
2400a0a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2400a0a6:	697b      	ldr	r3, [r7, #20]
2400a0a8:	681b      	ldr	r3, [r3, #0]
2400a0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a0ac:	693b      	ldr	r3, [r7, #16]
2400a0ae:	43db      	mvns	r3, r3
2400a0b0:	69ba      	ldr	r2, [r7, #24]
2400a0b2:	4013      	ands	r3, r2
2400a0b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2400a0b6:	683b      	ldr	r3, [r7, #0]
2400a0b8:	685b      	ldr	r3, [r3, #4]
2400a0ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400a0be:	2b00      	cmp	r3, #0
2400a0c0:	d003      	beq.n	2400a0ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
2400a0c2:	69ba      	ldr	r2, [r7, #24]
2400a0c4:	693b      	ldr	r3, [r7, #16]
2400a0c6:	4313      	orrs	r3, r2
2400a0c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400a0ca:	697b      	ldr	r3, [r7, #20]
2400a0cc:	69ba      	ldr	r2, [r7, #24]
2400a0ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
2400a0d0:	69fb      	ldr	r3, [r7, #28]
2400a0d2:	3301      	adds	r3, #1
2400a0d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400a0d6:	683b      	ldr	r3, [r7, #0]
2400a0d8:	681a      	ldr	r2, [r3, #0]
2400a0da:	69fb      	ldr	r3, [r7, #28]
2400a0dc:	fa22 f303 	lsr.w	r3, r2, r3
2400a0e0:	2b00      	cmp	r3, #0
2400a0e2:	f47f ae63 	bne.w	24009dac <HAL_GPIO_Init+0x14>
  }
}
2400a0e6:	bf00      	nop
2400a0e8:	bf00      	nop
2400a0ea:	3724      	adds	r7, #36	; 0x24
2400a0ec:	46bd      	mov	sp, r7
2400a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a0f2:	4770      	bx	lr
2400a0f4:	58000400 	.word	0x58000400

2400a0f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
2400a0f8:	b480      	push	{r7}
2400a0fa:	b087      	sub	sp, #28
2400a0fc:	af00      	add	r7, sp, #0
2400a0fe:	6078      	str	r0, [r7, #4]
2400a100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2400a102:	2300      	movs	r3, #0
2400a104:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2400a106:	4b75      	ldr	r3, [pc, #468]	; (2400a2dc <HAL_GPIO_DeInit+0x1e4>)
2400a108:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
2400a10a:	e0d9      	b.n	2400a2c0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
2400a10c:	2201      	movs	r2, #1
2400a10e:	697b      	ldr	r3, [r7, #20]
2400a110:	fa02 f303 	lsl.w	r3, r2, r3
2400a114:	683a      	ldr	r2, [r7, #0]
2400a116:	4013      	ands	r3, r2
2400a118:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
2400a11a:	68fb      	ldr	r3, [r7, #12]
2400a11c:	2b00      	cmp	r3, #0
2400a11e:	f000 80cc 	beq.w	2400a2ba <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
2400a122:	4a6f      	ldr	r2, [pc, #444]	; (2400a2e0 <HAL_GPIO_DeInit+0x1e8>)
2400a124:	697b      	ldr	r3, [r7, #20]
2400a126:	089b      	lsrs	r3, r3, #2
2400a128:	3302      	adds	r3, #2
2400a12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400a12e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
2400a130:	697b      	ldr	r3, [r7, #20]
2400a132:	f003 0303 	and.w	r3, r3, #3
2400a136:	009b      	lsls	r3, r3, #2
2400a138:	220f      	movs	r2, #15
2400a13a:	fa02 f303 	lsl.w	r3, r2, r3
2400a13e:	68ba      	ldr	r2, [r7, #8]
2400a140:	4013      	ands	r3, r2
2400a142:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
2400a144:	687b      	ldr	r3, [r7, #4]
2400a146:	4a67      	ldr	r2, [pc, #412]	; (2400a2e4 <HAL_GPIO_DeInit+0x1ec>)
2400a148:	4293      	cmp	r3, r2
2400a14a:	d037      	beq.n	2400a1bc <HAL_GPIO_DeInit+0xc4>
2400a14c:	687b      	ldr	r3, [r7, #4]
2400a14e:	4a66      	ldr	r2, [pc, #408]	; (2400a2e8 <HAL_GPIO_DeInit+0x1f0>)
2400a150:	4293      	cmp	r3, r2
2400a152:	d031      	beq.n	2400a1b8 <HAL_GPIO_DeInit+0xc0>
2400a154:	687b      	ldr	r3, [r7, #4]
2400a156:	4a65      	ldr	r2, [pc, #404]	; (2400a2ec <HAL_GPIO_DeInit+0x1f4>)
2400a158:	4293      	cmp	r3, r2
2400a15a:	d02b      	beq.n	2400a1b4 <HAL_GPIO_DeInit+0xbc>
2400a15c:	687b      	ldr	r3, [r7, #4]
2400a15e:	4a64      	ldr	r2, [pc, #400]	; (2400a2f0 <HAL_GPIO_DeInit+0x1f8>)
2400a160:	4293      	cmp	r3, r2
2400a162:	d025      	beq.n	2400a1b0 <HAL_GPIO_DeInit+0xb8>
2400a164:	687b      	ldr	r3, [r7, #4]
2400a166:	4a63      	ldr	r2, [pc, #396]	; (2400a2f4 <HAL_GPIO_DeInit+0x1fc>)
2400a168:	4293      	cmp	r3, r2
2400a16a:	d01f      	beq.n	2400a1ac <HAL_GPIO_DeInit+0xb4>
2400a16c:	687b      	ldr	r3, [r7, #4]
2400a16e:	4a62      	ldr	r2, [pc, #392]	; (2400a2f8 <HAL_GPIO_DeInit+0x200>)
2400a170:	4293      	cmp	r3, r2
2400a172:	d019      	beq.n	2400a1a8 <HAL_GPIO_DeInit+0xb0>
2400a174:	687b      	ldr	r3, [r7, #4]
2400a176:	4a61      	ldr	r2, [pc, #388]	; (2400a2fc <HAL_GPIO_DeInit+0x204>)
2400a178:	4293      	cmp	r3, r2
2400a17a:	d013      	beq.n	2400a1a4 <HAL_GPIO_DeInit+0xac>
2400a17c:	687b      	ldr	r3, [r7, #4]
2400a17e:	4a60      	ldr	r2, [pc, #384]	; (2400a300 <HAL_GPIO_DeInit+0x208>)
2400a180:	4293      	cmp	r3, r2
2400a182:	d00d      	beq.n	2400a1a0 <HAL_GPIO_DeInit+0xa8>
2400a184:	687b      	ldr	r3, [r7, #4]
2400a186:	4a5f      	ldr	r2, [pc, #380]	; (2400a304 <HAL_GPIO_DeInit+0x20c>)
2400a188:	4293      	cmp	r3, r2
2400a18a:	d007      	beq.n	2400a19c <HAL_GPIO_DeInit+0xa4>
2400a18c:	687b      	ldr	r3, [r7, #4]
2400a18e:	4a5e      	ldr	r2, [pc, #376]	; (2400a308 <HAL_GPIO_DeInit+0x210>)
2400a190:	4293      	cmp	r3, r2
2400a192:	d101      	bne.n	2400a198 <HAL_GPIO_DeInit+0xa0>
2400a194:	2309      	movs	r3, #9
2400a196:	e012      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a198:	230a      	movs	r3, #10
2400a19a:	e010      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a19c:	2308      	movs	r3, #8
2400a19e:	e00e      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1a0:	2307      	movs	r3, #7
2400a1a2:	e00c      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1a4:	2306      	movs	r3, #6
2400a1a6:	e00a      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1a8:	2305      	movs	r3, #5
2400a1aa:	e008      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1ac:	2304      	movs	r3, #4
2400a1ae:	e006      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1b0:	2303      	movs	r3, #3
2400a1b2:	e004      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1b4:	2302      	movs	r3, #2
2400a1b6:	e002      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1b8:	2301      	movs	r3, #1
2400a1ba:	e000      	b.n	2400a1be <HAL_GPIO_DeInit+0xc6>
2400a1bc:	2300      	movs	r3, #0
2400a1be:	697a      	ldr	r2, [r7, #20]
2400a1c0:	f002 0203 	and.w	r2, r2, #3
2400a1c4:	0092      	lsls	r2, r2, #2
2400a1c6:	4093      	lsls	r3, r2
2400a1c8:	68ba      	ldr	r2, [r7, #8]
2400a1ca:	429a      	cmp	r2, r3
2400a1cc:	d136      	bne.n	2400a23c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
2400a1ce:	693b      	ldr	r3, [r7, #16]
2400a1d0:	681a      	ldr	r2, [r3, #0]
2400a1d2:	68fb      	ldr	r3, [r7, #12]
2400a1d4:	43db      	mvns	r3, r3
2400a1d6:	401a      	ands	r2, r3
2400a1d8:	693b      	ldr	r3, [r7, #16]
2400a1da:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
2400a1dc:	693b      	ldr	r3, [r7, #16]
2400a1de:	685a      	ldr	r2, [r3, #4]
2400a1e0:	68fb      	ldr	r3, [r7, #12]
2400a1e2:	43db      	mvns	r3, r3
2400a1e4:	401a      	ands	r2, r3
2400a1e6:	693b      	ldr	r3, [r7, #16]
2400a1e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
2400a1ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a1ee:	685a      	ldr	r2, [r3, #4]
2400a1f0:	68fb      	ldr	r3, [r7, #12]
2400a1f2:	43db      	mvns	r3, r3
2400a1f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2400a1f8:	4013      	ands	r3, r2
2400a1fa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
2400a1fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a200:	681a      	ldr	r2, [r3, #0]
2400a202:	68fb      	ldr	r3, [r7, #12]
2400a204:	43db      	mvns	r3, r3
2400a206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2400a20a:	4013      	ands	r3, r2
2400a20c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
2400a20e:	697b      	ldr	r3, [r7, #20]
2400a210:	f003 0303 	and.w	r3, r3, #3
2400a214:	009b      	lsls	r3, r3, #2
2400a216:	220f      	movs	r2, #15
2400a218:	fa02 f303 	lsl.w	r3, r2, r3
2400a21c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
2400a21e:	4a30      	ldr	r2, [pc, #192]	; (2400a2e0 <HAL_GPIO_DeInit+0x1e8>)
2400a220:	697b      	ldr	r3, [r7, #20]
2400a222:	089b      	lsrs	r3, r3, #2
2400a224:	3302      	adds	r3, #2
2400a226:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
2400a22a:	68bb      	ldr	r3, [r7, #8]
2400a22c:	43da      	mvns	r2, r3
2400a22e:	482c      	ldr	r0, [pc, #176]	; (2400a2e0 <HAL_GPIO_DeInit+0x1e8>)
2400a230:	697b      	ldr	r3, [r7, #20]
2400a232:	089b      	lsrs	r3, r3, #2
2400a234:	400a      	ands	r2, r1
2400a236:	3302      	adds	r3, #2
2400a238:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
2400a23c:	687b      	ldr	r3, [r7, #4]
2400a23e:	681a      	ldr	r2, [r3, #0]
2400a240:	697b      	ldr	r3, [r7, #20]
2400a242:	005b      	lsls	r3, r3, #1
2400a244:	2103      	movs	r1, #3
2400a246:	fa01 f303 	lsl.w	r3, r1, r3
2400a24a:	431a      	orrs	r2, r3
2400a24c:	687b      	ldr	r3, [r7, #4]
2400a24e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
2400a250:	697b      	ldr	r3, [r7, #20]
2400a252:	08da      	lsrs	r2, r3, #3
2400a254:	687b      	ldr	r3, [r7, #4]
2400a256:	3208      	adds	r2, #8
2400a258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
2400a25c:	697b      	ldr	r3, [r7, #20]
2400a25e:	f003 0307 	and.w	r3, r3, #7
2400a262:	009b      	lsls	r3, r3, #2
2400a264:	220f      	movs	r2, #15
2400a266:	fa02 f303 	lsl.w	r3, r2, r3
2400a26a:	43db      	mvns	r3, r3
2400a26c:	697a      	ldr	r2, [r7, #20]
2400a26e:	08d2      	lsrs	r2, r2, #3
2400a270:	4019      	ands	r1, r3
2400a272:	687b      	ldr	r3, [r7, #4]
2400a274:	3208      	adds	r2, #8
2400a276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400a27a:	687b      	ldr	r3, [r7, #4]
2400a27c:	68da      	ldr	r2, [r3, #12]
2400a27e:	697b      	ldr	r3, [r7, #20]
2400a280:	005b      	lsls	r3, r3, #1
2400a282:	2103      	movs	r1, #3
2400a284:	fa01 f303 	lsl.w	r3, r1, r3
2400a288:	43db      	mvns	r3, r3
2400a28a:	401a      	ands	r2, r3
2400a28c:	687b      	ldr	r3, [r7, #4]
2400a28e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
2400a290:	687b      	ldr	r3, [r7, #4]
2400a292:	685a      	ldr	r2, [r3, #4]
2400a294:	2101      	movs	r1, #1
2400a296:	697b      	ldr	r3, [r7, #20]
2400a298:	fa01 f303 	lsl.w	r3, r1, r3
2400a29c:	43db      	mvns	r3, r3
2400a29e:	401a      	ands	r2, r3
2400a2a0:	687b      	ldr	r3, [r7, #4]
2400a2a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400a2a4:	687b      	ldr	r3, [r7, #4]
2400a2a6:	689a      	ldr	r2, [r3, #8]
2400a2a8:	697b      	ldr	r3, [r7, #20]
2400a2aa:	005b      	lsls	r3, r3, #1
2400a2ac:	2103      	movs	r1, #3
2400a2ae:	fa01 f303 	lsl.w	r3, r1, r3
2400a2b2:	43db      	mvns	r3, r3
2400a2b4:	401a      	ands	r2, r3
2400a2b6:	687b      	ldr	r3, [r7, #4]
2400a2b8:	609a      	str	r2, [r3, #8]
    }

    position++;
2400a2ba:	697b      	ldr	r3, [r7, #20]
2400a2bc:	3301      	adds	r3, #1
2400a2be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
2400a2c0:	683a      	ldr	r2, [r7, #0]
2400a2c2:	697b      	ldr	r3, [r7, #20]
2400a2c4:	fa22 f303 	lsr.w	r3, r2, r3
2400a2c8:	2b00      	cmp	r3, #0
2400a2ca:	f47f af1f 	bne.w	2400a10c <HAL_GPIO_DeInit+0x14>
  }
}
2400a2ce:	bf00      	nop
2400a2d0:	bf00      	nop
2400a2d2:	371c      	adds	r7, #28
2400a2d4:	46bd      	mov	sp, r7
2400a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a2da:	4770      	bx	lr
2400a2dc:	58000080 	.word	0x58000080
2400a2e0:	58000400 	.word	0x58000400
2400a2e4:	58020000 	.word	0x58020000
2400a2e8:	58020400 	.word	0x58020400
2400a2ec:	58020800 	.word	0x58020800
2400a2f0:	58020c00 	.word	0x58020c00
2400a2f4:	58021000 	.word	0x58021000
2400a2f8:	58021400 	.word	0x58021400
2400a2fc:	58021800 	.word	0x58021800
2400a300:	58021c00 	.word	0x58021c00
2400a304:	58022000 	.word	0x58022000
2400a308:	58022400 	.word	0x58022400

2400a30c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a30c:	b480      	push	{r7}
2400a30e:	b085      	sub	sp, #20
2400a310:	af00      	add	r7, sp, #0
2400a312:	6078      	str	r0, [r7, #4]
2400a314:	460b      	mov	r3, r1
2400a316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2400a318:	687b      	ldr	r3, [r7, #4]
2400a31a:	691a      	ldr	r2, [r3, #16]
2400a31c:	887b      	ldrh	r3, [r7, #2]
2400a31e:	4013      	ands	r3, r2
2400a320:	2b00      	cmp	r3, #0
2400a322:	d002      	beq.n	2400a32a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2400a324:	2301      	movs	r3, #1
2400a326:	73fb      	strb	r3, [r7, #15]
2400a328:	e001      	b.n	2400a32e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2400a32a:	2300      	movs	r3, #0
2400a32c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2400a32e:	7bfb      	ldrb	r3, [r7, #15]
}
2400a330:	4618      	mov	r0, r3
2400a332:	3714      	adds	r7, #20
2400a334:	46bd      	mov	sp, r7
2400a336:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a33a:	4770      	bx	lr

2400a33c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2400a33c:	b480      	push	{r7}
2400a33e:	b083      	sub	sp, #12
2400a340:	af00      	add	r7, sp, #0
2400a342:	6078      	str	r0, [r7, #4]
2400a344:	460b      	mov	r3, r1
2400a346:	807b      	strh	r3, [r7, #2]
2400a348:	4613      	mov	r3, r2
2400a34a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2400a34c:	787b      	ldrb	r3, [r7, #1]
2400a34e:	2b00      	cmp	r3, #0
2400a350:	d003      	beq.n	2400a35a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2400a352:	887a      	ldrh	r2, [r7, #2]
2400a354:	687b      	ldr	r3, [r7, #4]
2400a356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
2400a358:	e003      	b.n	2400a362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400a35a:	887b      	ldrh	r3, [r7, #2]
2400a35c:	041a      	lsls	r2, r3, #16
2400a35e:	687b      	ldr	r3, [r7, #4]
2400a360:	619a      	str	r2, [r3, #24]
}
2400a362:	bf00      	nop
2400a364:	370c      	adds	r7, #12
2400a366:	46bd      	mov	sp, r7
2400a368:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a36c:	4770      	bx	lr

2400a36e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a36e:	b480      	push	{r7}
2400a370:	b085      	sub	sp, #20
2400a372:	af00      	add	r7, sp, #0
2400a374:	6078      	str	r0, [r7, #4]
2400a376:	460b      	mov	r3, r1
2400a378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
2400a37a:	687b      	ldr	r3, [r7, #4]
2400a37c:	695b      	ldr	r3, [r3, #20]
2400a37e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
2400a380:	887a      	ldrh	r2, [r7, #2]
2400a382:	68fb      	ldr	r3, [r7, #12]
2400a384:	4013      	ands	r3, r2
2400a386:	041a      	lsls	r2, r3, #16
2400a388:	68fb      	ldr	r3, [r7, #12]
2400a38a:	43d9      	mvns	r1, r3
2400a38c:	887b      	ldrh	r3, [r7, #2]
2400a38e:	400b      	ands	r3, r1
2400a390:	431a      	orrs	r2, r3
2400a392:	687b      	ldr	r3, [r7, #4]
2400a394:	619a      	str	r2, [r3, #24]
}
2400a396:	bf00      	nop
2400a398:	3714      	adds	r7, #20
2400a39a:	46bd      	mov	sp, r7
2400a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a3a0:	4770      	bx	lr

2400a3a2 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a3a2:	b480      	push	{r7}
2400a3a4:	b085      	sub	sp, #20
2400a3a6:	af00      	add	r7, sp, #0
2400a3a8:	6078      	str	r0, [r7, #4]
2400a3aa:	460b      	mov	r3, r1
2400a3ac:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
2400a3ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2400a3b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
2400a3b4:	887a      	ldrh	r2, [r7, #2]
2400a3b6:	68fb      	ldr	r3, [r7, #12]
2400a3b8:	4313      	orrs	r3, r2
2400a3ba:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400a3bc:	68fa      	ldr	r2, [r7, #12]
2400a3be:	687b      	ldr	r3, [r7, #4]
2400a3c0:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
2400a3c2:	887a      	ldrh	r2, [r7, #2]
2400a3c4:	687b      	ldr	r3, [r7, #4]
2400a3c6:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400a3c8:	68fa      	ldr	r2, [r7, #12]
2400a3ca:	687b      	ldr	r3, [r7, #4]
2400a3cc:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
2400a3ce:	687b      	ldr	r3, [r7, #4]
2400a3d0:	69db      	ldr	r3, [r3, #28]
2400a3d2:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
2400a3d4:	687b      	ldr	r3, [r7, #4]
2400a3d6:	69db      	ldr	r3, [r3, #28]
2400a3d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400a3dc:	2b00      	cmp	r3, #0
2400a3de:	d001      	beq.n	2400a3e4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
2400a3e0:	2300      	movs	r3, #0
2400a3e2:	e000      	b.n	2400a3e6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
2400a3e4:	2301      	movs	r3, #1
  }
}
2400a3e6:	4618      	mov	r0, r3
2400a3e8:	3714      	adds	r7, #20
2400a3ea:	46bd      	mov	sp, r7
2400a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a3f0:	4770      	bx	lr

2400a3f2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
2400a3f2:	b580      	push	{r7, lr}
2400a3f4:	b082      	sub	sp, #8
2400a3f6:	af00      	add	r7, sp, #0
2400a3f8:	4603      	mov	r3, r0
2400a3fa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2400a3fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
2400a404:	88fb      	ldrh	r3, [r7, #6]
2400a406:	4013      	ands	r3, r2
2400a408:	2b00      	cmp	r3, #0
2400a40a:	d008      	beq.n	2400a41e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2400a40c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400a410:	88fb      	ldrh	r3, [r7, #6]
2400a412:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
2400a416:	88fb      	ldrh	r3, [r7, #6]
2400a418:	4618      	mov	r0, r3
2400a41a:	f000 f804 	bl	2400a426 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2400a41e:	bf00      	nop
2400a420:	3708      	adds	r7, #8
2400a422:	46bd      	mov	sp, r7
2400a424:	bd80      	pop	{r7, pc}

2400a426 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
2400a426:	b480      	push	{r7}
2400a428:	b083      	sub	sp, #12
2400a42a:	af00      	add	r7, sp, #0
2400a42c:	4603      	mov	r3, r0
2400a42e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
2400a430:	bf00      	nop
2400a432:	370c      	adds	r7, #12
2400a434:	46bd      	mov	sp, r7
2400a436:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a43a:	4770      	bx	lr

2400a43c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
2400a43c:	b480      	push	{r7}
2400a43e:	b083      	sub	sp, #12
2400a440:	af00      	add	r7, sp, #0
2400a442:	6078      	str	r0, [r7, #4]
2400a444:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
2400a446:	490c      	ldr	r1, [pc, #48]	; (2400a478 <HAL_HSEM_Take+0x3c>)
2400a448:	683a      	ldr	r2, [r7, #0]
2400a44a:	4b0c      	ldr	r3, [pc, #48]	; (2400a47c <HAL_HSEM_Take+0x40>)
2400a44c:	4313      	orrs	r3, r2
2400a44e:	687a      	ldr	r2, [r7, #4]
2400a450:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
2400a454:	4a08      	ldr	r2, [pc, #32]	; (2400a478 <HAL_HSEM_Take+0x3c>)
2400a456:	687b      	ldr	r3, [r7, #4]
2400a458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
2400a45c:	6839      	ldr	r1, [r7, #0]
2400a45e:	4b07      	ldr	r3, [pc, #28]	; (2400a47c <HAL_HSEM_Take+0x40>)
2400a460:	430b      	orrs	r3, r1
2400a462:	429a      	cmp	r2, r3
2400a464:	d101      	bne.n	2400a46a <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
2400a466:	2300      	movs	r3, #0
2400a468:	e000      	b.n	2400a46c <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
2400a46a:	2301      	movs	r3, #1
}
2400a46c:	4618      	mov	r0, r3
2400a46e:	370c      	adds	r7, #12
2400a470:	46bd      	mov	sp, r7
2400a472:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a476:	4770      	bx	lr
2400a478:	58026400 	.word	0x58026400
2400a47c:	80000300 	.word	0x80000300

2400a480 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
2400a480:	b480      	push	{r7}
2400a482:	b083      	sub	sp, #12
2400a484:	af00      	add	r7, sp, #0
2400a486:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
2400a488:	4a08      	ldr	r2, [pc, #32]	; (2400a4ac <HAL_HSEM_FastTake+0x2c>)
2400a48a:	687b      	ldr	r3, [r7, #4]
2400a48c:	3320      	adds	r3, #32
2400a48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400a492:	4a07      	ldr	r2, [pc, #28]	; (2400a4b0 <HAL_HSEM_FastTake+0x30>)
2400a494:	4293      	cmp	r3, r2
2400a496:	d101      	bne.n	2400a49c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
2400a498:	2300      	movs	r3, #0
2400a49a:	e000      	b.n	2400a49e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
2400a49c:	2301      	movs	r3, #1
}
2400a49e:	4618      	mov	r0, r3
2400a4a0:	370c      	adds	r7, #12
2400a4a2:	46bd      	mov	sp, r7
2400a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a4a8:	4770      	bx	lr
2400a4aa:	bf00      	nop
2400a4ac:	58026400 	.word	0x58026400
2400a4b0:	80000300 	.word	0x80000300

2400a4b4 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
2400a4b4:	b480      	push	{r7}
2400a4b6:	b083      	sub	sp, #12
2400a4b8:	af00      	add	r7, sp, #0
2400a4ba:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
2400a4bc:	4a07      	ldr	r2, [pc, #28]	; (2400a4dc <HAL_HSEM_IsSemTaken+0x28>)
2400a4be:	687b      	ldr	r3, [r7, #4]
2400a4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400a4c4:	2b00      	cmp	r3, #0
2400a4c6:	da01      	bge.n	2400a4cc <HAL_HSEM_IsSemTaken+0x18>
2400a4c8:	2301      	movs	r3, #1
2400a4ca:	e000      	b.n	2400a4ce <HAL_HSEM_IsSemTaken+0x1a>
2400a4cc:	2300      	movs	r3, #0
}
2400a4ce:	4618      	mov	r0, r3
2400a4d0:	370c      	adds	r7, #12
2400a4d2:	46bd      	mov	sp, r7
2400a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a4d8:	4770      	bx	lr
2400a4da:	bf00      	nop
2400a4dc:	58026400 	.word	0x58026400

2400a4e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
2400a4e0:	b480      	push	{r7}
2400a4e2:	b083      	sub	sp, #12
2400a4e4:	af00      	add	r7, sp, #0
2400a4e6:	6078      	str	r0, [r7, #4]
2400a4e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
2400a4ea:	4906      	ldr	r1, [pc, #24]	; (2400a504 <HAL_HSEM_Release+0x24>)
2400a4ec:	683b      	ldr	r3, [r7, #0]
2400a4ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
2400a4f2:	687b      	ldr	r3, [r7, #4]
2400a4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
2400a4f8:	bf00      	nop
2400a4fa:	370c      	adds	r7, #12
2400a4fc:	46bd      	mov	sp, r7
2400a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a502:	4770      	bx	lr
2400a504:	58026400 	.word	0x58026400

2400a508 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
2400a508:	b480      	push	{r7}
2400a50a:	b083      	sub	sp, #12
2400a50c:	af00      	add	r7, sp, #0
2400a50e:	6078      	str	r0, [r7, #4]
2400a510:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
2400a512:	687b      	ldr	r3, [r7, #4]
2400a514:	041a      	lsls	r2, r3, #16
2400a516:	683b      	ldr	r3, [r7, #0]
2400a518:	021b      	lsls	r3, r3, #8
2400a51a:	4905      	ldr	r1, [pc, #20]	; (2400a530 <HAL_HSEM_ReleaseAll+0x28>)
2400a51c:	4313      	orrs	r3, r2
2400a51e:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
}
2400a522:	bf00      	nop
2400a524:	370c      	adds	r7, #12
2400a526:	46bd      	mov	sp, r7
2400a528:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a52c:	4770      	bx	lr
2400a52e:	bf00      	nop
2400a530:	58026400 	.word	0x58026400

2400a534 <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
2400a534:	b480      	push	{r7}
2400a536:	b083      	sub	sp, #12
2400a538:	af00      	add	r7, sp, #0
2400a53a:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
2400a53c:	4b07      	ldr	r3, [pc, #28]	; (2400a55c <HAL_HSEM_SetClearKey+0x28>)
2400a53e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2400a542:	b29a      	uxth	r2, r3
2400a544:	687b      	ldr	r3, [r7, #4]
2400a546:	041b      	lsls	r3, r3, #16
2400a548:	4904      	ldr	r1, [pc, #16]	; (2400a55c <HAL_HSEM_SetClearKey+0x28>)
2400a54a:	4313      	orrs	r3, r2
2400a54c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

}
2400a550:	bf00      	nop
2400a552:	370c      	adds	r7, #12
2400a554:	46bd      	mov	sp, r7
2400a556:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a55a:	4770      	bx	lr
2400a55c:	58026400 	.word	0x58026400

2400a560 <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
2400a560:	b480      	push	{r7}
2400a562:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
2400a564:	4b04      	ldr	r3, [pc, #16]	; (2400a578 <HAL_HSEM_GetClearKey+0x18>)
2400a566:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2400a56a:	0c1b      	lsrs	r3, r3, #16
}
2400a56c:	4618      	mov	r0, r3
2400a56e:	46bd      	mov	sp, r7
2400a570:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a574:	4770      	bx	lr
2400a576:	bf00      	nop
2400a578:	58026400 	.word	0x58026400

2400a57c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
2400a57c:	b480      	push	{r7}
2400a57e:	b083      	sub	sp, #12
2400a580:	af00      	add	r7, sp, #0
2400a582:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
2400a584:	4b05      	ldr	r3, [pc, #20]	; (2400a59c <HAL_HSEM_ActivateNotification+0x20>)
2400a586:	681a      	ldr	r2, [r3, #0]
2400a588:	4904      	ldr	r1, [pc, #16]	; (2400a59c <HAL_HSEM_ActivateNotification+0x20>)
2400a58a:	687b      	ldr	r3, [r7, #4]
2400a58c:	4313      	orrs	r3, r2
2400a58e:	600b      	str	r3, [r1, #0]
#endif
}
2400a590:	bf00      	nop
2400a592:	370c      	adds	r7, #12
2400a594:	46bd      	mov	sp, r7
2400a596:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a59a:	4770      	bx	lr
2400a59c:	58026500 	.word	0x58026500

2400a5a0 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
2400a5a0:	b480      	push	{r7}
2400a5a2:	b083      	sub	sp, #12
2400a5a4:	af00      	add	r7, sp, #0
2400a5a6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
2400a5a8:	4b06      	ldr	r3, [pc, #24]	; (2400a5c4 <HAL_HSEM_DeactivateNotification+0x24>)
2400a5aa:	681a      	ldr	r2, [r3, #0]
2400a5ac:	687b      	ldr	r3, [r7, #4]
2400a5ae:	43db      	mvns	r3, r3
2400a5b0:	4904      	ldr	r1, [pc, #16]	; (2400a5c4 <HAL_HSEM_DeactivateNotification+0x24>)
2400a5b2:	4013      	ands	r3, r2
2400a5b4:	600b      	str	r3, [r1, #0]
#endif
}
2400a5b6:	bf00      	nop
2400a5b8:	370c      	adds	r7, #12
2400a5ba:	46bd      	mov	sp, r7
2400a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a5c0:	4770      	bx	lr
2400a5c2:	bf00      	nop
2400a5c4:	58026500 	.word	0x58026500

2400a5c8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
2400a5c8:	b580      	push	{r7, lr}
2400a5ca:	b082      	sub	sp, #8
2400a5cc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
2400a5ce:	4b0a      	ldr	r3, [pc, #40]	; (2400a5f8 <HAL_HSEM_IRQHandler+0x30>)
2400a5d0:	68db      	ldr	r3, [r3, #12]
2400a5d2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
2400a5d4:	4b08      	ldr	r3, [pc, #32]	; (2400a5f8 <HAL_HSEM_IRQHandler+0x30>)
2400a5d6:	681a      	ldr	r2, [r3, #0]
2400a5d8:	687b      	ldr	r3, [r7, #4]
2400a5da:	43db      	mvns	r3, r3
2400a5dc:	4906      	ldr	r1, [pc, #24]	; (2400a5f8 <HAL_HSEM_IRQHandler+0x30>)
2400a5de:	4013      	ands	r3, r2
2400a5e0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
2400a5e2:	4a05      	ldr	r2, [pc, #20]	; (2400a5f8 <HAL_HSEM_IRQHandler+0x30>)
2400a5e4:	687b      	ldr	r3, [r7, #4]
2400a5e6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
2400a5e8:	6878      	ldr	r0, [r7, #4]
2400a5ea:	f000 f807 	bl	2400a5fc <HAL_HSEM_FreeCallback>
}
2400a5ee:	bf00      	nop
2400a5f0:	3708      	adds	r7, #8
2400a5f2:	46bd      	mov	sp, r7
2400a5f4:	bd80      	pop	{r7, pc}
2400a5f6:	bf00      	nop
2400a5f8:	58026500 	.word	0x58026500

2400a5fc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
2400a5fc:	b480      	push	{r7}
2400a5fe:	b083      	sub	sp, #12
2400a600:	af00      	add	r7, sp, #0
2400a602:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
2400a604:	bf00      	nop
2400a606:	370c      	adds	r7, #12
2400a608:	46bd      	mov	sp, r7
2400a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a60e:	4770      	bx	lr

2400a610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
2400a610:	b580      	push	{r7, lr}
2400a612:	b082      	sub	sp, #8
2400a614:	af00      	add	r7, sp, #0
2400a616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400a618:	687b      	ldr	r3, [r7, #4]
2400a61a:	2b00      	cmp	r3, #0
2400a61c:	d101      	bne.n	2400a622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
2400a61e:	2301      	movs	r3, #1
2400a620:	e07f      	b.n	2400a722 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
2400a622:	687b      	ldr	r3, [r7, #4]
2400a624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a628:	b2db      	uxtb	r3, r3
2400a62a:	2b00      	cmp	r3, #0
2400a62c:	d106      	bne.n	2400a63c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
2400a62e:	687b      	ldr	r3, [r7, #4]
2400a630:	2200      	movs	r2, #0
2400a632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
2400a636:	6878      	ldr	r0, [r7, #4]
2400a638:	f000 f8a9 	bl	2400a78e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
2400a63c:	687b      	ldr	r3, [r7, #4]
2400a63e:	2224      	movs	r2, #36	; 0x24
2400a640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
2400a644:	687b      	ldr	r3, [r7, #4]
2400a646:	681b      	ldr	r3, [r3, #0]
2400a648:	681a      	ldr	r2, [r3, #0]
2400a64a:	687b      	ldr	r3, [r7, #4]
2400a64c:	681b      	ldr	r3, [r3, #0]
2400a64e:	f022 0201 	bic.w	r2, r2, #1
2400a652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
2400a654:	687b      	ldr	r3, [r7, #4]
2400a656:	685a      	ldr	r2, [r3, #4]
2400a658:	687b      	ldr	r3, [r7, #4]
2400a65a:	681b      	ldr	r3, [r3, #0]
2400a65c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
2400a660:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400a662:	687b      	ldr	r3, [r7, #4]
2400a664:	681b      	ldr	r3, [r3, #0]
2400a666:	689a      	ldr	r2, [r3, #8]
2400a668:	687b      	ldr	r3, [r7, #4]
2400a66a:	681b      	ldr	r3, [r3, #0]
2400a66c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a670:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400a672:	687b      	ldr	r3, [r7, #4]
2400a674:	68db      	ldr	r3, [r3, #12]
2400a676:	2b01      	cmp	r3, #1
2400a678:	d107      	bne.n	2400a68a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400a67a:	687b      	ldr	r3, [r7, #4]
2400a67c:	689a      	ldr	r2, [r3, #8]
2400a67e:	687b      	ldr	r3, [r7, #4]
2400a680:	681b      	ldr	r3, [r3, #0]
2400a682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a686:	609a      	str	r2, [r3, #8]
2400a688:	e006      	b.n	2400a698 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400a68a:	687b      	ldr	r3, [r7, #4]
2400a68c:	689a      	ldr	r2, [r3, #8]
2400a68e:	687b      	ldr	r3, [r7, #4]
2400a690:	681b      	ldr	r3, [r3, #0]
2400a692:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
2400a696:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400a698:	687b      	ldr	r3, [r7, #4]
2400a69a:	68db      	ldr	r3, [r3, #12]
2400a69c:	2b02      	cmp	r3, #2
2400a69e:	d104      	bne.n	2400a6aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
2400a6a0:	687b      	ldr	r3, [r7, #4]
2400a6a2:	681b      	ldr	r3, [r3, #0]
2400a6a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400a6a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400a6aa:	687b      	ldr	r3, [r7, #4]
2400a6ac:	681b      	ldr	r3, [r3, #0]
2400a6ae:	6859      	ldr	r1, [r3, #4]
2400a6b0:	687b      	ldr	r3, [r7, #4]
2400a6b2:	681a      	ldr	r2, [r3, #0]
2400a6b4:	4b1d      	ldr	r3, [pc, #116]	; (2400a72c <HAL_I2C_Init+0x11c>)
2400a6b6:	430b      	orrs	r3, r1
2400a6b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2400a6ba:	687b      	ldr	r3, [r7, #4]
2400a6bc:	681b      	ldr	r3, [r3, #0]
2400a6be:	68da      	ldr	r2, [r3, #12]
2400a6c0:	687b      	ldr	r3, [r7, #4]
2400a6c2:	681b      	ldr	r3, [r3, #0]
2400a6c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a6c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400a6ca:	687b      	ldr	r3, [r7, #4]
2400a6cc:	691a      	ldr	r2, [r3, #16]
2400a6ce:	687b      	ldr	r3, [r7, #4]
2400a6d0:	695b      	ldr	r3, [r3, #20]
2400a6d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
2400a6d6:	687b      	ldr	r3, [r7, #4]
2400a6d8:	699b      	ldr	r3, [r3, #24]
2400a6da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400a6dc:	687b      	ldr	r3, [r7, #4]
2400a6de:	681b      	ldr	r3, [r3, #0]
2400a6e0:	430a      	orrs	r2, r1
2400a6e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400a6e4:	687b      	ldr	r3, [r7, #4]
2400a6e6:	69d9      	ldr	r1, [r3, #28]
2400a6e8:	687b      	ldr	r3, [r7, #4]
2400a6ea:	6a1a      	ldr	r2, [r3, #32]
2400a6ec:	687b      	ldr	r3, [r7, #4]
2400a6ee:	681b      	ldr	r3, [r3, #0]
2400a6f0:	430a      	orrs	r2, r1
2400a6f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
2400a6f4:	687b      	ldr	r3, [r7, #4]
2400a6f6:	681b      	ldr	r3, [r3, #0]
2400a6f8:	681a      	ldr	r2, [r3, #0]
2400a6fa:	687b      	ldr	r3, [r7, #4]
2400a6fc:	681b      	ldr	r3, [r3, #0]
2400a6fe:	f042 0201 	orr.w	r2, r2, #1
2400a702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a704:	687b      	ldr	r3, [r7, #4]
2400a706:	2200      	movs	r2, #0
2400a708:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2400a70a:	687b      	ldr	r3, [r7, #4]
2400a70c:	2220      	movs	r2, #32
2400a70e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400a712:	687b      	ldr	r3, [r7, #4]
2400a714:	2200      	movs	r2, #0
2400a716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400a718:	687b      	ldr	r3, [r7, #4]
2400a71a:	2200      	movs	r2, #0
2400a71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
2400a720:	2300      	movs	r3, #0
}
2400a722:	4618      	mov	r0, r3
2400a724:	3708      	adds	r7, #8
2400a726:	46bd      	mov	sp, r7
2400a728:	bd80      	pop	{r7, pc}
2400a72a:	bf00      	nop
2400a72c:	02008000 	.word	0x02008000

2400a730 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
2400a730:	b580      	push	{r7, lr}
2400a732:	b082      	sub	sp, #8
2400a734:	af00      	add	r7, sp, #0
2400a736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400a738:	687b      	ldr	r3, [r7, #4]
2400a73a:	2b00      	cmp	r3, #0
2400a73c:	d101      	bne.n	2400a742 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
2400a73e:	2301      	movs	r3, #1
2400a740:	e021      	b.n	2400a786 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
2400a742:	687b      	ldr	r3, [r7, #4]
2400a744:	2224      	movs	r2, #36	; 0x24
2400a746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
2400a74a:	687b      	ldr	r3, [r7, #4]
2400a74c:	681b      	ldr	r3, [r3, #0]
2400a74e:	681a      	ldr	r2, [r3, #0]
2400a750:	687b      	ldr	r3, [r7, #4]
2400a752:	681b      	ldr	r3, [r3, #0]
2400a754:	f022 0201 	bic.w	r2, r2, #1
2400a758:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
2400a75a:	6878      	ldr	r0, [r7, #4]
2400a75c:	f000 f821 	bl	2400a7a2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a760:	687b      	ldr	r3, [r7, #4]
2400a762:	2200      	movs	r2, #0
2400a764:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
2400a766:	687b      	ldr	r3, [r7, #4]
2400a768:	2200      	movs	r2, #0
2400a76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400a76e:	687b      	ldr	r3, [r7, #4]
2400a770:	2200      	movs	r2, #0
2400a772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400a774:	687b      	ldr	r3, [r7, #4]
2400a776:	2200      	movs	r2, #0
2400a778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
2400a77c:	687b      	ldr	r3, [r7, #4]
2400a77e:	2200      	movs	r2, #0
2400a780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400a784:	2300      	movs	r3, #0
}
2400a786:	4618      	mov	r0, r3
2400a788:	3708      	adds	r7, #8
2400a78a:	46bd      	mov	sp, r7
2400a78c:	bd80      	pop	{r7, pc}

2400a78e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
2400a78e:	b480      	push	{r7}
2400a790:	b083      	sub	sp, #12
2400a792:	af00      	add	r7, sp, #0
2400a794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
2400a796:	bf00      	nop
2400a798:	370c      	adds	r7, #12
2400a79a:	46bd      	mov	sp, r7
2400a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a7a0:	4770      	bx	lr

2400a7a2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
2400a7a2:	b480      	push	{r7}
2400a7a4:	b083      	sub	sp, #12
2400a7a6:	af00      	add	r7, sp, #0
2400a7a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
2400a7aa:	bf00      	nop
2400a7ac:	370c      	adds	r7, #12
2400a7ae:	46bd      	mov	sp, r7
2400a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a7b4:	4770      	bx	lr
	...

2400a7b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
2400a7b8:	b580      	push	{r7, lr}
2400a7ba:	b088      	sub	sp, #32
2400a7bc:	af02      	add	r7, sp, #8
2400a7be:	60f8      	str	r0, [r7, #12]
2400a7c0:	607a      	str	r2, [r7, #4]
2400a7c2:	461a      	mov	r2, r3
2400a7c4:	460b      	mov	r3, r1
2400a7c6:	817b      	strh	r3, [r7, #10]
2400a7c8:	4613      	mov	r3, r2
2400a7ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a7cc:	68fb      	ldr	r3, [r7, #12]
2400a7ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a7d2:	b2db      	uxtb	r3, r3
2400a7d4:	2b20      	cmp	r3, #32
2400a7d6:	f040 80da 	bne.w	2400a98e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a7da:	68fb      	ldr	r3, [r7, #12]
2400a7dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a7e0:	2b01      	cmp	r3, #1
2400a7e2:	d101      	bne.n	2400a7e8 <HAL_I2C_Master_Transmit+0x30>
2400a7e4:	2302      	movs	r3, #2
2400a7e6:	e0d3      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
2400a7e8:	68fb      	ldr	r3, [r7, #12]
2400a7ea:	2201      	movs	r2, #1
2400a7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a7f0:	f7f7 fd18 	bl	24002224 <HAL_GetTick>
2400a7f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400a7f6:	697b      	ldr	r3, [r7, #20]
2400a7f8:	9300      	str	r3, [sp, #0]
2400a7fa:	2319      	movs	r3, #25
2400a7fc:	2201      	movs	r2, #1
2400a7fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a802:	68f8      	ldr	r0, [r7, #12]
2400a804:	f004 fd3c 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400a808:	4603      	mov	r3, r0
2400a80a:	2b00      	cmp	r3, #0
2400a80c:	d001      	beq.n	2400a812 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2400a80e:	2301      	movs	r3, #1
2400a810:	e0be      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400a812:	68fb      	ldr	r3, [r7, #12]
2400a814:	2221      	movs	r2, #33	; 0x21
2400a816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400a81a:	68fb      	ldr	r3, [r7, #12]
2400a81c:	2210      	movs	r2, #16
2400a81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a822:	68fb      	ldr	r3, [r7, #12]
2400a824:	2200      	movs	r2, #0
2400a826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a828:	68fb      	ldr	r3, [r7, #12]
2400a82a:	687a      	ldr	r2, [r7, #4]
2400a82c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a82e:	68fb      	ldr	r3, [r7, #12]
2400a830:	893a      	ldrh	r2, [r7, #8]
2400a832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a834:	68fb      	ldr	r3, [r7, #12]
2400a836:	2200      	movs	r2, #0
2400a838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a83a:	68fb      	ldr	r3, [r7, #12]
2400a83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a83e:	b29b      	uxth	r3, r3
2400a840:	2bff      	cmp	r3, #255	; 0xff
2400a842:	d90e      	bls.n	2400a862 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a844:	68fb      	ldr	r3, [r7, #12]
2400a846:	22ff      	movs	r2, #255	; 0xff
2400a848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a84a:	68fb      	ldr	r3, [r7, #12]
2400a84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a84e:	b2da      	uxtb	r2, r3
2400a850:	8979      	ldrh	r1, [r7, #10]
2400a852:	4b51      	ldr	r3, [pc, #324]	; (2400a998 <HAL_I2C_Master_Transmit+0x1e0>)
2400a854:	9300      	str	r3, [sp, #0]
2400a856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a85a:	68f8      	ldr	r0, [r7, #12]
2400a85c:	f004 ff32 	bl	2400f6c4 <I2C_TransferConfig>
2400a860:	e06c      	b.n	2400a93c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a862:	68fb      	ldr	r3, [r7, #12]
2400a864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a866:	b29a      	uxth	r2, r3
2400a868:	68fb      	ldr	r3, [r7, #12]
2400a86a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a86c:	68fb      	ldr	r3, [r7, #12]
2400a86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a870:	b2da      	uxtb	r2, r3
2400a872:	8979      	ldrh	r1, [r7, #10]
2400a874:	4b48      	ldr	r3, [pc, #288]	; (2400a998 <HAL_I2C_Master_Transmit+0x1e0>)
2400a876:	9300      	str	r3, [sp, #0]
2400a878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a87c:	68f8      	ldr	r0, [r7, #12]
2400a87e:	f004 ff21 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2400a882:	e05b      	b.n	2400a93c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a884:	697a      	ldr	r2, [r7, #20]
2400a886:	6a39      	ldr	r1, [r7, #32]
2400a888:	68f8      	ldr	r0, [r7, #12]
2400a88a:	f004 fd39 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400a88e:	4603      	mov	r3, r0
2400a890:	2b00      	cmp	r3, #0
2400a892:	d001      	beq.n	2400a898 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
2400a894:	2301      	movs	r3, #1
2400a896:	e07b      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400a898:	68fb      	ldr	r3, [r7, #12]
2400a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a89c:	781a      	ldrb	r2, [r3, #0]
2400a89e:	68fb      	ldr	r3, [r7, #12]
2400a8a0:	681b      	ldr	r3, [r3, #0]
2400a8a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a8a4:	68fb      	ldr	r3, [r7, #12]
2400a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a8a8:	1c5a      	adds	r2, r3, #1
2400a8aa:	68fb      	ldr	r3, [r7, #12]
2400a8ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a8ae:	68fb      	ldr	r3, [r7, #12]
2400a8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a8b2:	b29b      	uxth	r3, r3
2400a8b4:	3b01      	subs	r3, #1
2400a8b6:	b29a      	uxth	r2, r3
2400a8b8:	68fb      	ldr	r3, [r7, #12]
2400a8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400a8bc:	68fb      	ldr	r3, [r7, #12]
2400a8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a8c0:	3b01      	subs	r3, #1
2400a8c2:	b29a      	uxth	r2, r3
2400a8c4:	68fb      	ldr	r3, [r7, #12]
2400a8c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400a8c8:	68fb      	ldr	r3, [r7, #12]
2400a8ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a8cc:	b29b      	uxth	r3, r3
2400a8ce:	2b00      	cmp	r3, #0
2400a8d0:	d034      	beq.n	2400a93c <HAL_I2C_Master_Transmit+0x184>
2400a8d2:	68fb      	ldr	r3, [r7, #12]
2400a8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a8d6:	2b00      	cmp	r3, #0
2400a8d8:	d130      	bne.n	2400a93c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400a8da:	697b      	ldr	r3, [r7, #20]
2400a8dc:	9300      	str	r3, [sp, #0]
2400a8de:	6a3b      	ldr	r3, [r7, #32]
2400a8e0:	2200      	movs	r2, #0
2400a8e2:	2180      	movs	r1, #128	; 0x80
2400a8e4:	68f8      	ldr	r0, [r7, #12]
2400a8e6:	f004 fccb 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400a8ea:	4603      	mov	r3, r0
2400a8ec:	2b00      	cmp	r3, #0
2400a8ee:	d001      	beq.n	2400a8f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
2400a8f0:	2301      	movs	r3, #1
2400a8f2:	e04d      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a8f4:	68fb      	ldr	r3, [r7, #12]
2400a8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a8f8:	b29b      	uxth	r3, r3
2400a8fa:	2bff      	cmp	r3, #255	; 0xff
2400a8fc:	d90e      	bls.n	2400a91c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400a8fe:	68fb      	ldr	r3, [r7, #12]
2400a900:	22ff      	movs	r2, #255	; 0xff
2400a902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a904:	68fb      	ldr	r3, [r7, #12]
2400a906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a908:	b2da      	uxtb	r2, r3
2400a90a:	8979      	ldrh	r1, [r7, #10]
2400a90c:	2300      	movs	r3, #0
2400a90e:	9300      	str	r3, [sp, #0]
2400a910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a914:	68f8      	ldr	r0, [r7, #12]
2400a916:	f004 fed5 	bl	2400f6c4 <I2C_TransferConfig>
2400a91a:	e00f      	b.n	2400a93c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400a91c:	68fb      	ldr	r3, [r7, #12]
2400a91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a920:	b29a      	uxth	r2, r3
2400a922:	68fb      	ldr	r3, [r7, #12]
2400a924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a926:	68fb      	ldr	r3, [r7, #12]
2400a928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a92a:	b2da      	uxtb	r2, r3
2400a92c:	8979      	ldrh	r1, [r7, #10]
2400a92e:	2300      	movs	r3, #0
2400a930:	9300      	str	r3, [sp, #0]
2400a932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a936:	68f8      	ldr	r0, [r7, #12]
2400a938:	f004 fec4 	bl	2400f6c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400a93c:	68fb      	ldr	r3, [r7, #12]
2400a93e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a940:	b29b      	uxth	r3, r3
2400a942:	2b00      	cmp	r3, #0
2400a944:	d19e      	bne.n	2400a884 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a946:	697a      	ldr	r2, [r7, #20]
2400a948:	6a39      	ldr	r1, [r7, #32]
2400a94a:	68f8      	ldr	r0, [r7, #12]
2400a94c:	f004 fd18 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a950:	4603      	mov	r3, r0
2400a952:	2b00      	cmp	r3, #0
2400a954:	d001      	beq.n	2400a95a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
2400a956:	2301      	movs	r3, #1
2400a958:	e01a      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a95a:	68fb      	ldr	r3, [r7, #12]
2400a95c:	681b      	ldr	r3, [r3, #0]
2400a95e:	2220      	movs	r2, #32
2400a960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400a962:	68fb      	ldr	r3, [r7, #12]
2400a964:	681b      	ldr	r3, [r3, #0]
2400a966:	6859      	ldr	r1, [r3, #4]
2400a968:	68fb      	ldr	r3, [r7, #12]
2400a96a:	681a      	ldr	r2, [r3, #0]
2400a96c:	4b0b      	ldr	r3, [pc, #44]	; (2400a99c <HAL_I2C_Master_Transmit+0x1e4>)
2400a96e:	400b      	ands	r3, r1
2400a970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a972:	68fb      	ldr	r3, [r7, #12]
2400a974:	2220      	movs	r2, #32
2400a976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a97a:	68fb      	ldr	r3, [r7, #12]
2400a97c:	2200      	movs	r2, #0
2400a97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a982:	68fb      	ldr	r3, [r7, #12]
2400a984:	2200      	movs	r2, #0
2400a986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a98a:	2300      	movs	r3, #0
2400a98c:	e000      	b.n	2400a990 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
2400a98e:	2302      	movs	r3, #2
  }
}
2400a990:	4618      	mov	r0, r3
2400a992:	3718      	adds	r7, #24
2400a994:	46bd      	mov	sp, r7
2400a996:	bd80      	pop	{r7, pc}
2400a998:	80002000 	.word	0x80002000
2400a99c:	fe00e800 	.word	0xfe00e800

2400a9a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2400a9a0:	b580      	push	{r7, lr}
2400a9a2:	b088      	sub	sp, #32
2400a9a4:	af02      	add	r7, sp, #8
2400a9a6:	60f8      	str	r0, [r7, #12]
2400a9a8:	607a      	str	r2, [r7, #4]
2400a9aa:	461a      	mov	r2, r3
2400a9ac:	460b      	mov	r3, r1
2400a9ae:	817b      	strh	r3, [r7, #10]
2400a9b0:	4613      	mov	r3, r2
2400a9b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a9b4:	68fb      	ldr	r3, [r7, #12]
2400a9b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a9ba:	b2db      	uxtb	r3, r3
2400a9bc:	2b20      	cmp	r3, #32
2400a9be:	f040 80db 	bne.w	2400ab78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a9c2:	68fb      	ldr	r3, [r7, #12]
2400a9c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a9c8:	2b01      	cmp	r3, #1
2400a9ca:	d101      	bne.n	2400a9d0 <HAL_I2C_Master_Receive+0x30>
2400a9cc:	2302      	movs	r3, #2
2400a9ce:	e0d4      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
2400a9d0:	68fb      	ldr	r3, [r7, #12]
2400a9d2:	2201      	movs	r2, #1
2400a9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a9d8:	f7f7 fc24 	bl	24002224 <HAL_GetTick>
2400a9dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400a9de:	697b      	ldr	r3, [r7, #20]
2400a9e0:	9300      	str	r3, [sp, #0]
2400a9e2:	2319      	movs	r3, #25
2400a9e4:	2201      	movs	r2, #1
2400a9e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a9ea:	68f8      	ldr	r0, [r7, #12]
2400a9ec:	f004 fc48 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400a9f0:	4603      	mov	r3, r0
2400a9f2:	2b00      	cmp	r3, #0
2400a9f4:	d001      	beq.n	2400a9fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2400a9f6:	2301      	movs	r3, #1
2400a9f8:	e0bf      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400a9fa:	68fb      	ldr	r3, [r7, #12]
2400a9fc:	2222      	movs	r2, #34	; 0x22
2400a9fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400aa02:	68fb      	ldr	r3, [r7, #12]
2400aa04:	2210      	movs	r2, #16
2400aa06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400aa0a:	68fb      	ldr	r3, [r7, #12]
2400aa0c:	2200      	movs	r2, #0
2400aa0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400aa10:	68fb      	ldr	r3, [r7, #12]
2400aa12:	687a      	ldr	r2, [r7, #4]
2400aa14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400aa16:	68fb      	ldr	r3, [r7, #12]
2400aa18:	893a      	ldrh	r2, [r7, #8]
2400aa1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400aa1c:	68fb      	ldr	r3, [r7, #12]
2400aa1e:	2200      	movs	r2, #0
2400aa20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400aa22:	68fb      	ldr	r3, [r7, #12]
2400aa24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aa26:	b29b      	uxth	r3, r3
2400aa28:	2bff      	cmp	r3, #255	; 0xff
2400aa2a:	d90e      	bls.n	2400aa4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400aa2c:	68fb      	ldr	r3, [r7, #12]
2400aa2e:	22ff      	movs	r2, #255	; 0xff
2400aa30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400aa32:	68fb      	ldr	r3, [r7, #12]
2400aa34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aa36:	b2da      	uxtb	r2, r3
2400aa38:	8979      	ldrh	r1, [r7, #10]
2400aa3a:	4b52      	ldr	r3, [pc, #328]	; (2400ab84 <HAL_I2C_Master_Receive+0x1e4>)
2400aa3c:	9300      	str	r3, [sp, #0]
2400aa3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400aa42:	68f8      	ldr	r0, [r7, #12]
2400aa44:	f004 fe3e 	bl	2400f6c4 <I2C_TransferConfig>
2400aa48:	e06d      	b.n	2400ab26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400aa4a:	68fb      	ldr	r3, [r7, #12]
2400aa4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aa4e:	b29a      	uxth	r2, r3
2400aa50:	68fb      	ldr	r3, [r7, #12]
2400aa52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400aa54:	68fb      	ldr	r3, [r7, #12]
2400aa56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aa58:	b2da      	uxtb	r2, r3
2400aa5a:	8979      	ldrh	r1, [r7, #10]
2400aa5c:	4b49      	ldr	r3, [pc, #292]	; (2400ab84 <HAL_I2C_Master_Receive+0x1e4>)
2400aa5e:	9300      	str	r3, [sp, #0]
2400aa60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400aa64:	68f8      	ldr	r0, [r7, #12]
2400aa66:	f004 fe2d 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2400aa6a:	e05c      	b.n	2400ab26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400aa6c:	697a      	ldr	r2, [r7, #20]
2400aa6e:	6a39      	ldr	r1, [r7, #32]
2400aa70:	68f8      	ldr	r0, [r7, #12]
2400aa72:	f004 fcc1 	bl	2400f3f8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400aa76:	4603      	mov	r3, r0
2400aa78:	2b00      	cmp	r3, #0
2400aa7a:	d001      	beq.n	2400aa80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2400aa7c:	2301      	movs	r3, #1
2400aa7e:	e07c      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400aa80:	68fb      	ldr	r3, [r7, #12]
2400aa82:	681b      	ldr	r3, [r3, #0]
2400aa84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400aa86:	68fb      	ldr	r3, [r7, #12]
2400aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400aa8a:	b2d2      	uxtb	r2, r2
2400aa8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400aa8e:	68fb      	ldr	r3, [r7, #12]
2400aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400aa92:	1c5a      	adds	r2, r3, #1
2400aa94:	68fb      	ldr	r3, [r7, #12]
2400aa96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400aa98:	68fb      	ldr	r3, [r7, #12]
2400aa9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aa9c:	3b01      	subs	r3, #1
2400aa9e:	b29a      	uxth	r2, r3
2400aaa0:	68fb      	ldr	r3, [r7, #12]
2400aaa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400aaa4:	68fb      	ldr	r3, [r7, #12]
2400aaa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aaa8:	b29b      	uxth	r3, r3
2400aaaa:	3b01      	subs	r3, #1
2400aaac:	b29a      	uxth	r2, r3
2400aaae:	68fb      	ldr	r3, [r7, #12]
2400aab0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400aab2:	68fb      	ldr	r3, [r7, #12]
2400aab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aab6:	b29b      	uxth	r3, r3
2400aab8:	2b00      	cmp	r3, #0
2400aaba:	d034      	beq.n	2400ab26 <HAL_I2C_Master_Receive+0x186>
2400aabc:	68fb      	ldr	r3, [r7, #12]
2400aabe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aac0:	2b00      	cmp	r3, #0
2400aac2:	d130      	bne.n	2400ab26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400aac4:	697b      	ldr	r3, [r7, #20]
2400aac6:	9300      	str	r3, [sp, #0]
2400aac8:	6a3b      	ldr	r3, [r7, #32]
2400aaca:	2200      	movs	r2, #0
2400aacc:	2180      	movs	r1, #128	; 0x80
2400aace:	68f8      	ldr	r0, [r7, #12]
2400aad0:	f004 fbd6 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400aad4:	4603      	mov	r3, r0
2400aad6:	2b00      	cmp	r3, #0
2400aad8:	d001      	beq.n	2400aade <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2400aada:	2301      	movs	r3, #1
2400aadc:	e04d      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400aade:	68fb      	ldr	r3, [r7, #12]
2400aae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aae2:	b29b      	uxth	r3, r3
2400aae4:	2bff      	cmp	r3, #255	; 0xff
2400aae6:	d90e      	bls.n	2400ab06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400aae8:	68fb      	ldr	r3, [r7, #12]
2400aaea:	22ff      	movs	r2, #255	; 0xff
2400aaec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400aaee:	68fb      	ldr	r3, [r7, #12]
2400aaf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aaf2:	b2da      	uxtb	r2, r3
2400aaf4:	8979      	ldrh	r1, [r7, #10]
2400aaf6:	2300      	movs	r3, #0
2400aaf8:	9300      	str	r3, [sp, #0]
2400aafa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400aafe:	68f8      	ldr	r0, [r7, #12]
2400ab00:	f004 fde0 	bl	2400f6c4 <I2C_TransferConfig>
2400ab04:	e00f      	b.n	2400ab26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400ab06:	68fb      	ldr	r3, [r7, #12]
2400ab08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ab0a:	b29a      	uxth	r2, r3
2400ab0c:	68fb      	ldr	r3, [r7, #12]
2400ab0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400ab10:	68fb      	ldr	r3, [r7, #12]
2400ab12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ab14:	b2da      	uxtb	r2, r3
2400ab16:	8979      	ldrh	r1, [r7, #10]
2400ab18:	2300      	movs	r3, #0
2400ab1a:	9300      	str	r3, [sp, #0]
2400ab1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ab20:	68f8      	ldr	r0, [r7, #12]
2400ab22:	f004 fdcf 	bl	2400f6c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400ab26:	68fb      	ldr	r3, [r7, #12]
2400ab28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ab2a:	b29b      	uxth	r3, r3
2400ab2c:	2b00      	cmp	r3, #0
2400ab2e:	d19d      	bne.n	2400aa6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400ab30:	697a      	ldr	r2, [r7, #20]
2400ab32:	6a39      	ldr	r1, [r7, #32]
2400ab34:	68f8      	ldr	r0, [r7, #12]
2400ab36:	f004 fc23 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400ab3a:	4603      	mov	r3, r0
2400ab3c:	2b00      	cmp	r3, #0
2400ab3e:	d001      	beq.n	2400ab44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2400ab40:	2301      	movs	r3, #1
2400ab42:	e01a      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400ab44:	68fb      	ldr	r3, [r7, #12]
2400ab46:	681b      	ldr	r3, [r3, #0]
2400ab48:	2220      	movs	r2, #32
2400ab4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400ab4c:	68fb      	ldr	r3, [r7, #12]
2400ab4e:	681b      	ldr	r3, [r3, #0]
2400ab50:	6859      	ldr	r1, [r3, #4]
2400ab52:	68fb      	ldr	r3, [r7, #12]
2400ab54:	681a      	ldr	r2, [r3, #0]
2400ab56:	4b0c      	ldr	r3, [pc, #48]	; (2400ab88 <HAL_I2C_Master_Receive+0x1e8>)
2400ab58:	400b      	ands	r3, r1
2400ab5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400ab5c:	68fb      	ldr	r3, [r7, #12]
2400ab5e:	2220      	movs	r2, #32
2400ab60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400ab64:	68fb      	ldr	r3, [r7, #12]
2400ab66:	2200      	movs	r2, #0
2400ab68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ab6c:	68fb      	ldr	r3, [r7, #12]
2400ab6e:	2200      	movs	r2, #0
2400ab70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400ab74:	2300      	movs	r3, #0
2400ab76:	e000      	b.n	2400ab7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2400ab78:	2302      	movs	r3, #2
  }
}
2400ab7a:	4618      	mov	r0, r3
2400ab7c:	3718      	adds	r7, #24
2400ab7e:	46bd      	mov	sp, r7
2400ab80:	bd80      	pop	{r7, pc}
2400ab82:	bf00      	nop
2400ab84:	80002400 	.word	0x80002400
2400ab88:	fe00e800 	.word	0xfe00e800

2400ab8c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2400ab8c:	b580      	push	{r7, lr}
2400ab8e:	b088      	sub	sp, #32
2400ab90:	af02      	add	r7, sp, #8
2400ab92:	60f8      	str	r0, [r7, #12]
2400ab94:	60b9      	str	r1, [r7, #8]
2400ab96:	603b      	str	r3, [r7, #0]
2400ab98:	4613      	mov	r3, r2
2400ab9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ab9c:	68fb      	ldr	r3, [r7, #12]
2400ab9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aba2:	b2db      	uxtb	r3, r3
2400aba4:	2b20      	cmp	r3, #32
2400aba6:	f040 8109 	bne.w	2400adbc <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
2400abaa:	68bb      	ldr	r3, [r7, #8]
2400abac:	2b00      	cmp	r3, #0
2400abae:	d002      	beq.n	2400abb6 <HAL_I2C_Slave_Transmit+0x2a>
2400abb0:	88fb      	ldrh	r3, [r7, #6]
2400abb2:	2b00      	cmp	r3, #0
2400abb4:	d105      	bne.n	2400abc2 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400abb6:	68fb      	ldr	r3, [r7, #12]
2400abb8:	f44f 7200 	mov.w	r2, #512	; 0x200
2400abbc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400abbe:	2301      	movs	r3, #1
2400abc0:	e0fd      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400abc2:	68fb      	ldr	r3, [r7, #12]
2400abc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400abc8:	2b01      	cmp	r3, #1
2400abca:	d101      	bne.n	2400abd0 <HAL_I2C_Slave_Transmit+0x44>
2400abcc:	2302      	movs	r3, #2
2400abce:	e0f6      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
2400abd0:	68fb      	ldr	r3, [r7, #12]
2400abd2:	2201      	movs	r2, #1
2400abd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400abd8:	f7f7 fb24 	bl	24002224 <HAL_GetTick>
2400abdc:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400abde:	68fb      	ldr	r3, [r7, #12]
2400abe0:	2221      	movs	r2, #33	; 0x21
2400abe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400abe6:	68fb      	ldr	r3, [r7, #12]
2400abe8:	2220      	movs	r2, #32
2400abea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400abee:	68fb      	ldr	r3, [r7, #12]
2400abf0:	2200      	movs	r2, #0
2400abf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400abf4:	68fb      	ldr	r3, [r7, #12]
2400abf6:	68ba      	ldr	r2, [r7, #8]
2400abf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400abfa:	68fb      	ldr	r3, [r7, #12]
2400abfc:	88fa      	ldrh	r2, [r7, #6]
2400abfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400ac00:	68fb      	ldr	r3, [r7, #12]
2400ac02:	2200      	movs	r2, #0
2400ac04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400ac06:	68fb      	ldr	r3, [r7, #12]
2400ac08:	681b      	ldr	r3, [r3, #0]
2400ac0a:	685a      	ldr	r2, [r3, #4]
2400ac0c:	68fb      	ldr	r3, [r7, #12]
2400ac0e:	681b      	ldr	r3, [r3, #0]
2400ac10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ac14:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400ac16:	697b      	ldr	r3, [r7, #20]
2400ac18:	9300      	str	r3, [sp, #0]
2400ac1a:	683b      	ldr	r3, [r7, #0]
2400ac1c:	2200      	movs	r2, #0
2400ac1e:	2108      	movs	r1, #8
2400ac20:	68f8      	ldr	r0, [r7, #12]
2400ac22:	f004 fb2d 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ac26:	4603      	mov	r3, r0
2400ac28:	2b00      	cmp	r3, #0
2400ac2a:	d009      	beq.n	2400ac40 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ac2c:	68fb      	ldr	r3, [r7, #12]
2400ac2e:	681b      	ldr	r3, [r3, #0]
2400ac30:	685a      	ldr	r2, [r3, #4]
2400ac32:	68fb      	ldr	r3, [r7, #12]
2400ac34:	681b      	ldr	r3, [r3, #0]
2400ac36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ac3a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400ac3c:	2301      	movs	r3, #1
2400ac3e:	e0be      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400ac40:	68fb      	ldr	r3, [r7, #12]
2400ac42:	681b      	ldr	r3, [r3, #0]
2400ac44:	2208      	movs	r2, #8
2400ac46:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400ac48:	68fb      	ldr	r3, [r7, #12]
2400ac4a:	68db      	ldr	r3, [r3, #12]
2400ac4c:	2b02      	cmp	r3, #2
2400ac4e:	d118      	bne.n	2400ac82 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400ac50:	697b      	ldr	r3, [r7, #20]
2400ac52:	9300      	str	r3, [sp, #0]
2400ac54:	683b      	ldr	r3, [r7, #0]
2400ac56:	2200      	movs	r2, #0
2400ac58:	2108      	movs	r1, #8
2400ac5a:	68f8      	ldr	r0, [r7, #12]
2400ac5c:	f004 fb10 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ac60:	4603      	mov	r3, r0
2400ac62:	2b00      	cmp	r3, #0
2400ac64:	d009      	beq.n	2400ac7a <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ac66:	68fb      	ldr	r3, [r7, #12]
2400ac68:	681b      	ldr	r3, [r3, #0]
2400ac6a:	685a      	ldr	r2, [r3, #4]
2400ac6c:	68fb      	ldr	r3, [r7, #12]
2400ac6e:	681b      	ldr	r3, [r3, #0]
2400ac70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ac74:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400ac76:	2301      	movs	r3, #1
2400ac78:	e0a1      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400ac7a:	68fb      	ldr	r3, [r7, #12]
2400ac7c:	681b      	ldr	r3, [r3, #0]
2400ac7e:	2208      	movs	r2, #8
2400ac80:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2400ac82:	697b      	ldr	r3, [r7, #20]
2400ac84:	9300      	str	r3, [sp, #0]
2400ac86:	683b      	ldr	r3, [r7, #0]
2400ac88:	2200      	movs	r2, #0
2400ac8a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400ac8e:	68f8      	ldr	r0, [r7, #12]
2400ac90:	f004 faf6 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ac94:	4603      	mov	r3, r0
2400ac96:	2b00      	cmp	r3, #0
2400ac98:	d02d      	beq.n	2400acf6 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ac9a:	68fb      	ldr	r3, [r7, #12]
2400ac9c:	681b      	ldr	r3, [r3, #0]
2400ac9e:	685a      	ldr	r2, [r3, #4]
2400aca0:	68fb      	ldr	r3, [r7, #12]
2400aca2:	681b      	ldr	r3, [r3, #0]
2400aca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400aca8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400acaa:	2301      	movs	r3, #1
2400acac:	e087      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400acae:	697a      	ldr	r2, [r7, #20]
2400acb0:	6839      	ldr	r1, [r7, #0]
2400acb2:	68f8      	ldr	r0, [r7, #12]
2400acb4:	f004 fb24 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400acb8:	4603      	mov	r3, r0
2400acba:	2b00      	cmp	r3, #0
2400acbc:	d009      	beq.n	2400acd2 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400acbe:	68fb      	ldr	r3, [r7, #12]
2400acc0:	681b      	ldr	r3, [r3, #0]
2400acc2:	685a      	ldr	r2, [r3, #4]
2400acc4:	68fb      	ldr	r3, [r7, #12]
2400acc6:	681b      	ldr	r3, [r3, #0]
2400acc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400accc:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400acce:	2301      	movs	r3, #1
2400acd0:	e075      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400acd2:	68fb      	ldr	r3, [r7, #12]
2400acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400acd6:	781a      	ldrb	r2, [r3, #0]
2400acd8:	68fb      	ldr	r3, [r7, #12]
2400acda:	681b      	ldr	r3, [r3, #0]
2400acdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400acde:	68fb      	ldr	r3, [r7, #12]
2400ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ace2:	1c5a      	adds	r2, r3, #1
2400ace4:	68fb      	ldr	r3, [r7, #12]
2400ace6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400ace8:	68fb      	ldr	r3, [r7, #12]
2400acea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400acec:	b29b      	uxth	r3, r3
2400acee:	3b01      	subs	r3, #1
2400acf0:	b29a      	uxth	r2, r3
2400acf2:	68fb      	ldr	r3, [r7, #12]
2400acf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
2400acf6:	68fb      	ldr	r3, [r7, #12]
2400acf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400acfa:	b29b      	uxth	r3, r3
2400acfc:	2b00      	cmp	r3, #0
2400acfe:	d1d6      	bne.n	2400acae <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
2400ad00:	697b      	ldr	r3, [r7, #20]
2400ad02:	9300      	str	r3, [sp, #0]
2400ad04:	683b      	ldr	r3, [r7, #0]
2400ad06:	2200      	movs	r2, #0
2400ad08:	2110      	movs	r1, #16
2400ad0a:	68f8      	ldr	r0, [r7, #12]
2400ad0c:	f004 fab8 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ad10:	4603      	mov	r3, r0
2400ad12:	2b00      	cmp	r3, #0
2400ad14:	d009      	beq.n	2400ad2a <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ad16:	68fb      	ldr	r3, [r7, #12]
2400ad18:	681b      	ldr	r3, [r3, #0]
2400ad1a:	685a      	ldr	r2, [r3, #4]
2400ad1c:	68fb      	ldr	r3, [r7, #12]
2400ad1e:	681b      	ldr	r3, [r3, #0]
2400ad20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ad24:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400ad26:	2301      	movs	r3, #1
2400ad28:	e049      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400ad2a:	68f8      	ldr	r0, [r7, #12]
2400ad2c:	f003 ffc3 	bl	2400ecb6 <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ad30:	68fb      	ldr	r3, [r7, #12]
2400ad32:	681b      	ldr	r3, [r3, #0]
2400ad34:	2210      	movs	r2, #16
2400ad36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400ad38:	697a      	ldr	r2, [r7, #20]
2400ad3a:	6839      	ldr	r1, [r7, #0]
2400ad3c:	68f8      	ldr	r0, [r7, #12]
2400ad3e:	f004 fb1f 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400ad42:	4603      	mov	r3, r0
2400ad44:	2b00      	cmp	r3, #0
2400ad46:	d009      	beq.n	2400ad5c <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ad48:	68fb      	ldr	r3, [r7, #12]
2400ad4a:	681b      	ldr	r3, [r3, #0]
2400ad4c:	685a      	ldr	r2, [r3, #4]
2400ad4e:	68fb      	ldr	r3, [r7, #12]
2400ad50:	681b      	ldr	r3, [r3, #0]
2400ad52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ad56:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
2400ad58:	2301      	movs	r3, #1
2400ad5a:	e030      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400ad5c:	68fb      	ldr	r3, [r7, #12]
2400ad5e:	681b      	ldr	r3, [r3, #0]
2400ad60:	2220      	movs	r2, #32
2400ad62:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400ad64:	697b      	ldr	r3, [r7, #20]
2400ad66:	9300      	str	r3, [sp, #0]
2400ad68:	683b      	ldr	r3, [r7, #0]
2400ad6a:	2201      	movs	r2, #1
2400ad6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400ad70:	68f8      	ldr	r0, [r7, #12]
2400ad72:	f004 fa85 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ad76:	4603      	mov	r3, r0
2400ad78:	2b00      	cmp	r3, #0
2400ad7a:	d009      	beq.n	2400ad90 <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ad7c:	68fb      	ldr	r3, [r7, #12]
2400ad7e:	681b      	ldr	r3, [r3, #0]
2400ad80:	685a      	ldr	r2, [r3, #4]
2400ad82:	68fb      	ldr	r3, [r7, #12]
2400ad84:	681b      	ldr	r3, [r3, #0]
2400ad86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ad8a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400ad8c:	2301      	movs	r3, #1
2400ad8e:	e016      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ad90:	68fb      	ldr	r3, [r7, #12]
2400ad92:	681b      	ldr	r3, [r3, #0]
2400ad94:	685a      	ldr	r2, [r3, #4]
2400ad96:	68fb      	ldr	r3, [r7, #12]
2400ad98:	681b      	ldr	r3, [r3, #0]
2400ad9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ad9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400ada0:	68fb      	ldr	r3, [r7, #12]
2400ada2:	2220      	movs	r2, #32
2400ada4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400ada8:	68fb      	ldr	r3, [r7, #12]
2400adaa:	2200      	movs	r2, #0
2400adac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400adb0:	68fb      	ldr	r3, [r7, #12]
2400adb2:	2200      	movs	r2, #0
2400adb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400adb8:	2300      	movs	r3, #0
2400adba:	e000      	b.n	2400adbe <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
2400adbc:	2302      	movs	r3, #2
  }
}
2400adbe:	4618      	mov	r0, r3
2400adc0:	3718      	adds	r7, #24
2400adc2:	46bd      	mov	sp, r7
2400adc4:	bd80      	pop	{r7, pc}

2400adc6 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2400adc6:	b580      	push	{r7, lr}
2400adc8:	b088      	sub	sp, #32
2400adca:	af02      	add	r7, sp, #8
2400adcc:	60f8      	str	r0, [r7, #12]
2400adce:	60b9      	str	r1, [r7, #8]
2400add0:	603b      	str	r3, [r7, #0]
2400add2:	4613      	mov	r3, r2
2400add4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400add6:	68fb      	ldr	r3, [r7, #12]
2400add8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400addc:	b2db      	uxtb	r3, r3
2400adde:	2b20      	cmp	r3, #32
2400ade0:	f040 80fc 	bne.w	2400afdc <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2400ade4:	68bb      	ldr	r3, [r7, #8]
2400ade6:	2b00      	cmp	r3, #0
2400ade8:	d002      	beq.n	2400adf0 <HAL_I2C_Slave_Receive+0x2a>
2400adea:	88fb      	ldrh	r3, [r7, #6]
2400adec:	2b00      	cmp	r3, #0
2400adee:	d105      	bne.n	2400adfc <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400adf0:	68fb      	ldr	r3, [r7, #12]
2400adf2:	f44f 7200 	mov.w	r2, #512	; 0x200
2400adf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400adf8:	2301      	movs	r3, #1
2400adfa:	e0f0      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400adfc:	68fb      	ldr	r3, [r7, #12]
2400adfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ae02:	2b01      	cmp	r3, #1
2400ae04:	d101      	bne.n	2400ae0a <HAL_I2C_Slave_Receive+0x44>
2400ae06:	2302      	movs	r3, #2
2400ae08:	e0e9      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
2400ae0a:	68fb      	ldr	r3, [r7, #12]
2400ae0c:	2201      	movs	r2, #1
2400ae0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400ae12:	f7f7 fa07 	bl	24002224 <HAL_GetTick>
2400ae16:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400ae18:	68fb      	ldr	r3, [r7, #12]
2400ae1a:	2222      	movs	r2, #34	; 0x22
2400ae1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400ae20:	68fb      	ldr	r3, [r7, #12]
2400ae22:	2220      	movs	r2, #32
2400ae24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ae28:	68fb      	ldr	r3, [r7, #12]
2400ae2a:	2200      	movs	r2, #0
2400ae2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400ae2e:	68fb      	ldr	r3, [r7, #12]
2400ae30:	68ba      	ldr	r2, [r7, #8]
2400ae32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400ae34:	68fb      	ldr	r3, [r7, #12]
2400ae36:	88fa      	ldrh	r2, [r7, #6]
2400ae38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
2400ae3a:	68fb      	ldr	r3, [r7, #12]
2400ae3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ae3e:	b29a      	uxth	r2, r3
2400ae40:	68fb      	ldr	r3, [r7, #12]
2400ae42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
2400ae44:	68fb      	ldr	r3, [r7, #12]
2400ae46:	2200      	movs	r2, #0
2400ae48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400ae4a:	68fb      	ldr	r3, [r7, #12]
2400ae4c:	681b      	ldr	r3, [r3, #0]
2400ae4e:	685a      	ldr	r2, [r3, #4]
2400ae50:	68fb      	ldr	r3, [r7, #12]
2400ae52:	681b      	ldr	r3, [r3, #0]
2400ae54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ae58:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400ae5a:	697b      	ldr	r3, [r7, #20]
2400ae5c:	9300      	str	r3, [sp, #0]
2400ae5e:	683b      	ldr	r3, [r7, #0]
2400ae60:	2200      	movs	r2, #0
2400ae62:	2108      	movs	r1, #8
2400ae64:	68f8      	ldr	r0, [r7, #12]
2400ae66:	f004 fa0b 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ae6a:	4603      	mov	r3, r0
2400ae6c:	2b00      	cmp	r3, #0
2400ae6e:	d009      	beq.n	2400ae84 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ae70:	68fb      	ldr	r3, [r7, #12]
2400ae72:	681b      	ldr	r3, [r3, #0]
2400ae74:	685a      	ldr	r2, [r3, #4]
2400ae76:	68fb      	ldr	r3, [r7, #12]
2400ae78:	681b      	ldr	r3, [r3, #0]
2400ae7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ae7e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400ae80:	2301      	movs	r3, #1
2400ae82:	e0ac      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400ae84:	68fb      	ldr	r3, [r7, #12]
2400ae86:	681b      	ldr	r3, [r3, #0]
2400ae88:	2208      	movs	r2, #8
2400ae8a:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2400ae8c:	697b      	ldr	r3, [r7, #20]
2400ae8e:	9300      	str	r3, [sp, #0]
2400ae90:	683b      	ldr	r3, [r7, #0]
2400ae92:	2201      	movs	r2, #1
2400ae94:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400ae98:	68f8      	ldr	r0, [r7, #12]
2400ae9a:	f004 f9f1 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400ae9e:	4603      	mov	r3, r0
2400aea0:	2b00      	cmp	r3, #0
2400aea2:	d054      	beq.n	2400af4e <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400aea4:	68fb      	ldr	r3, [r7, #12]
2400aea6:	681b      	ldr	r3, [r3, #0]
2400aea8:	685a      	ldr	r2, [r3, #4]
2400aeaa:	68fb      	ldr	r3, [r7, #12]
2400aeac:	681b      	ldr	r3, [r3, #0]
2400aeae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400aeb2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400aeb4:	2301      	movs	r3, #1
2400aeb6:	e092      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400aeb8:	697a      	ldr	r2, [r7, #20]
2400aeba:	6839      	ldr	r1, [r7, #0]
2400aebc:	68f8      	ldr	r0, [r7, #12]
2400aebe:	f004 fa9b 	bl	2400f3f8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400aec2:	4603      	mov	r3, r0
2400aec4:	2b00      	cmp	r3, #0
2400aec6:	d029      	beq.n	2400af1c <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400aec8:	68fb      	ldr	r3, [r7, #12]
2400aeca:	681b      	ldr	r3, [r3, #0]
2400aecc:	685a      	ldr	r2, [r3, #4]
2400aece:	68fb      	ldr	r3, [r7, #12]
2400aed0:	681b      	ldr	r3, [r3, #0]
2400aed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400aed6:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2400aed8:	68fb      	ldr	r3, [r7, #12]
2400aeda:	681b      	ldr	r3, [r3, #0]
2400aedc:	699b      	ldr	r3, [r3, #24]
2400aede:	f003 0304 	and.w	r3, r3, #4
2400aee2:	2b04      	cmp	r3, #4
2400aee4:	d118      	bne.n	2400af18 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400aee6:	68fb      	ldr	r3, [r7, #12]
2400aee8:	681b      	ldr	r3, [r3, #0]
2400aeea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400aeec:	68fb      	ldr	r3, [r7, #12]
2400aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400aef0:	b2d2      	uxtb	r2, r2
2400aef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2400aef4:	68fb      	ldr	r3, [r7, #12]
2400aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400aef8:	1c5a      	adds	r2, r3, #1
2400aefa:	68fb      	ldr	r3, [r7, #12]
2400aefc:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
2400aefe:	68fb      	ldr	r3, [r7, #12]
2400af00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400af02:	b29b      	uxth	r3, r3
2400af04:	3b01      	subs	r3, #1
2400af06:	b29a      	uxth	r2, r3
2400af08:	68fb      	ldr	r3, [r7, #12]
2400af0a:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
2400af0c:	68fb      	ldr	r3, [r7, #12]
2400af0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400af10:	3b01      	subs	r3, #1
2400af12:	b29a      	uxth	r2, r3
2400af14:	68fb      	ldr	r3, [r7, #12]
2400af16:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
2400af18:	2301      	movs	r3, #1
2400af1a:	e060      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400af1c:	68fb      	ldr	r3, [r7, #12]
2400af1e:	681b      	ldr	r3, [r3, #0]
2400af20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400af22:	68fb      	ldr	r3, [r7, #12]
2400af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400af26:	b2d2      	uxtb	r2, r2
2400af28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400af2a:	68fb      	ldr	r3, [r7, #12]
2400af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400af2e:	1c5a      	adds	r2, r3, #1
2400af30:	68fb      	ldr	r3, [r7, #12]
2400af32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400af34:	68fb      	ldr	r3, [r7, #12]
2400af36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400af38:	b29b      	uxth	r3, r3
2400af3a:	3b01      	subs	r3, #1
2400af3c:	b29a      	uxth	r2, r3
2400af3e:	68fb      	ldr	r3, [r7, #12]
2400af40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400af42:	68fb      	ldr	r3, [r7, #12]
2400af44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400af46:	3b01      	subs	r3, #1
2400af48:	b29a      	uxth	r2, r3
2400af4a:	68fb      	ldr	r3, [r7, #12]
2400af4c:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
2400af4e:	68fb      	ldr	r3, [r7, #12]
2400af50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400af52:	b29b      	uxth	r3, r3
2400af54:	2b00      	cmp	r3, #0
2400af56:	d1af      	bne.n	2400aeb8 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400af58:	697a      	ldr	r2, [r7, #20]
2400af5a:	6839      	ldr	r1, [r7, #0]
2400af5c:	68f8      	ldr	r0, [r7, #12]
2400af5e:	f004 fa0f 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400af62:	4603      	mov	r3, r0
2400af64:	2b00      	cmp	r3, #0
2400af66:	d009      	beq.n	2400af7c <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400af68:	68fb      	ldr	r3, [r7, #12]
2400af6a:	681b      	ldr	r3, [r3, #0]
2400af6c:	685a      	ldr	r2, [r3, #4]
2400af6e:	68fb      	ldr	r3, [r7, #12]
2400af70:	681b      	ldr	r3, [r3, #0]
2400af72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400af76:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400af78:	2301      	movs	r3, #1
2400af7a:	e030      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400af7c:	68fb      	ldr	r3, [r7, #12]
2400af7e:	681b      	ldr	r3, [r3, #0]
2400af80:	2220      	movs	r2, #32
2400af82:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400af84:	697b      	ldr	r3, [r7, #20]
2400af86:	9300      	str	r3, [sp, #0]
2400af88:	683b      	ldr	r3, [r7, #0]
2400af8a:	2201      	movs	r2, #1
2400af8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400af90:	68f8      	ldr	r0, [r7, #12]
2400af92:	f004 f975 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400af96:	4603      	mov	r3, r0
2400af98:	2b00      	cmp	r3, #0
2400af9a:	d009      	beq.n	2400afb0 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400af9c:	68fb      	ldr	r3, [r7, #12]
2400af9e:	681b      	ldr	r3, [r3, #0]
2400afa0:	685a      	ldr	r2, [r3, #4]
2400afa2:	68fb      	ldr	r3, [r7, #12]
2400afa4:	681b      	ldr	r3, [r3, #0]
2400afa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400afaa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400afac:	2301      	movs	r3, #1
2400afae:	e016      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400afb0:	68fb      	ldr	r3, [r7, #12]
2400afb2:	681b      	ldr	r3, [r3, #0]
2400afb4:	685a      	ldr	r2, [r3, #4]
2400afb6:	68fb      	ldr	r3, [r7, #12]
2400afb8:	681b      	ldr	r3, [r3, #0]
2400afba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400afbe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400afc0:	68fb      	ldr	r3, [r7, #12]
2400afc2:	2220      	movs	r2, #32
2400afc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400afc8:	68fb      	ldr	r3, [r7, #12]
2400afca:	2200      	movs	r2, #0
2400afcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400afd0:	68fb      	ldr	r3, [r7, #12]
2400afd2:	2200      	movs	r2, #0
2400afd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400afd8:	2300      	movs	r3, #0
2400afda:	e000      	b.n	2400afde <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2400afdc:	2302      	movs	r3, #2
  }
}
2400afde:	4618      	mov	r0, r3
2400afe0:	3718      	adds	r7, #24
2400afe2:	46bd      	mov	sp, r7
2400afe4:	bd80      	pop	{r7, pc}
	...

2400afe8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400afe8:	b580      	push	{r7, lr}
2400afea:	b088      	sub	sp, #32
2400afec:	af02      	add	r7, sp, #8
2400afee:	60f8      	str	r0, [r7, #12]
2400aff0:	607a      	str	r2, [r7, #4]
2400aff2:	461a      	mov	r2, r3
2400aff4:	460b      	mov	r3, r1
2400aff6:	817b      	strh	r3, [r7, #10]
2400aff8:	4613      	mov	r3, r2
2400affa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400affc:	68fb      	ldr	r3, [r7, #12]
2400affe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b002:	b2db      	uxtb	r3, r3
2400b004:	2b20      	cmp	r3, #32
2400b006:	d153      	bne.n	2400b0b0 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b008:	68fb      	ldr	r3, [r7, #12]
2400b00a:	681b      	ldr	r3, [r3, #0]
2400b00c:	699b      	ldr	r3, [r3, #24]
2400b00e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b016:	d101      	bne.n	2400b01c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2400b018:	2302      	movs	r3, #2
2400b01a:	e04a      	b.n	2400b0b2 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b01c:	68fb      	ldr	r3, [r7, #12]
2400b01e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b022:	2b01      	cmp	r3, #1
2400b024:	d101      	bne.n	2400b02a <HAL_I2C_Master_Transmit_IT+0x42>
2400b026:	2302      	movs	r3, #2
2400b028:	e043      	b.n	2400b0b2 <HAL_I2C_Master_Transmit_IT+0xca>
2400b02a:	68fb      	ldr	r3, [r7, #12]
2400b02c:	2201      	movs	r2, #1
2400b02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b032:	68fb      	ldr	r3, [r7, #12]
2400b034:	2221      	movs	r2, #33	; 0x21
2400b036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b03a:	68fb      	ldr	r3, [r7, #12]
2400b03c:	2210      	movs	r2, #16
2400b03e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b042:	68fb      	ldr	r3, [r7, #12]
2400b044:	2200      	movs	r2, #0
2400b046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b048:	68fb      	ldr	r3, [r7, #12]
2400b04a:	687a      	ldr	r2, [r7, #4]
2400b04c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b04e:	68fb      	ldr	r3, [r7, #12]
2400b050:	893a      	ldrh	r2, [r7, #8]
2400b052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b054:	68fb      	ldr	r3, [r7, #12]
2400b056:	4a19      	ldr	r2, [pc, #100]	; (2400b0bc <HAL_I2C_Master_Transmit_IT+0xd4>)
2400b058:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b05a:	68fb      	ldr	r3, [r7, #12]
2400b05c:	4a18      	ldr	r2, [pc, #96]	; (2400b0c0 <HAL_I2C_Master_Transmit_IT+0xd8>)
2400b05e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b060:	68fb      	ldr	r3, [r7, #12]
2400b062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b064:	b29b      	uxth	r3, r3
2400b066:	2bff      	cmp	r3, #255	; 0xff
2400b068:	d906      	bls.n	2400b078 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b06a:	68fb      	ldr	r3, [r7, #12]
2400b06c:	22ff      	movs	r2, #255	; 0xff
2400b06e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b074:	617b      	str	r3, [r7, #20]
2400b076:	e007      	b.n	2400b088 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b078:	68fb      	ldr	r3, [r7, #12]
2400b07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b07c:	b29a      	uxth	r2, r3
2400b07e:	68fb      	ldr	r3, [r7, #12]
2400b080:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b086:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400b088:	68fb      	ldr	r3, [r7, #12]
2400b08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b08c:	b2da      	uxtb	r2, r3
2400b08e:	8979      	ldrh	r1, [r7, #10]
2400b090:	4b0c      	ldr	r3, [pc, #48]	; (2400b0c4 <HAL_I2C_Master_Transmit_IT+0xdc>)
2400b092:	9300      	str	r3, [sp, #0]
2400b094:	697b      	ldr	r3, [r7, #20]
2400b096:	68f8      	ldr	r0, [r7, #12]
2400b098:	f004 fb14 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b09c:	68fb      	ldr	r3, [r7, #12]
2400b09e:	2200      	movs	r2, #0
2400b0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b0a4:	2101      	movs	r1, #1
2400b0a6:	68f8      	ldr	r0, [r7, #12]
2400b0a8:	f004 fb3e 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400b0ac:	2300      	movs	r3, #0
2400b0ae:	e000      	b.n	2400b0b2 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400b0b0:	2302      	movs	r3, #2
  }
}
2400b0b2:	4618      	mov	r0, r3
2400b0b4:	3718      	adds	r7, #24
2400b0b6:	46bd      	mov	sp, r7
2400b0b8:	bd80      	pop	{r7, pc}
2400b0ba:	bf00      	nop
2400b0bc:	ffff0000 	.word	0xffff0000
2400b0c0:	2400d707 	.word	0x2400d707
2400b0c4:	80002000 	.word	0x80002000

2400b0c8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2400b0c8:	b580      	push	{r7, lr}
2400b0ca:	b088      	sub	sp, #32
2400b0cc:	af02      	add	r7, sp, #8
2400b0ce:	60f8      	str	r0, [r7, #12]
2400b0d0:	607a      	str	r2, [r7, #4]
2400b0d2:	461a      	mov	r2, r3
2400b0d4:	460b      	mov	r3, r1
2400b0d6:	817b      	strh	r3, [r7, #10]
2400b0d8:	4613      	mov	r3, r2
2400b0da:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b0dc:	68fb      	ldr	r3, [r7, #12]
2400b0de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b0e2:	b2db      	uxtb	r3, r3
2400b0e4:	2b20      	cmp	r3, #32
2400b0e6:	d153      	bne.n	2400b190 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b0e8:	68fb      	ldr	r3, [r7, #12]
2400b0ea:	681b      	ldr	r3, [r3, #0]
2400b0ec:	699b      	ldr	r3, [r3, #24]
2400b0ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b0f6:	d101      	bne.n	2400b0fc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2400b0f8:	2302      	movs	r3, #2
2400b0fa:	e04a      	b.n	2400b192 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b0fc:	68fb      	ldr	r3, [r7, #12]
2400b0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b102:	2b01      	cmp	r3, #1
2400b104:	d101      	bne.n	2400b10a <HAL_I2C_Master_Receive_IT+0x42>
2400b106:	2302      	movs	r3, #2
2400b108:	e043      	b.n	2400b192 <HAL_I2C_Master_Receive_IT+0xca>
2400b10a:	68fb      	ldr	r3, [r7, #12]
2400b10c:	2201      	movs	r2, #1
2400b10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b112:	68fb      	ldr	r3, [r7, #12]
2400b114:	2222      	movs	r2, #34	; 0x22
2400b116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b11a:	68fb      	ldr	r3, [r7, #12]
2400b11c:	2210      	movs	r2, #16
2400b11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b122:	68fb      	ldr	r3, [r7, #12]
2400b124:	2200      	movs	r2, #0
2400b126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b128:	68fb      	ldr	r3, [r7, #12]
2400b12a:	687a      	ldr	r2, [r7, #4]
2400b12c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b12e:	68fb      	ldr	r3, [r7, #12]
2400b130:	893a      	ldrh	r2, [r7, #8]
2400b132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b134:	68fb      	ldr	r3, [r7, #12]
2400b136:	4a19      	ldr	r2, [pc, #100]	; (2400b19c <HAL_I2C_Master_Receive_IT+0xd4>)
2400b138:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b13a:	68fb      	ldr	r3, [r7, #12]
2400b13c:	4a18      	ldr	r2, [pc, #96]	; (2400b1a0 <HAL_I2C_Master_Receive_IT+0xd8>)
2400b13e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b140:	68fb      	ldr	r3, [r7, #12]
2400b142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b144:	b29b      	uxth	r3, r3
2400b146:	2bff      	cmp	r3, #255	; 0xff
2400b148:	d906      	bls.n	2400b158 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b14a:	68fb      	ldr	r3, [r7, #12]
2400b14c:	22ff      	movs	r2, #255	; 0xff
2400b14e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b154:	617b      	str	r3, [r7, #20]
2400b156:	e007      	b.n	2400b168 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b158:	68fb      	ldr	r3, [r7, #12]
2400b15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b15c:	b29a      	uxth	r2, r3
2400b15e:	68fb      	ldr	r3, [r7, #12]
2400b160:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b166:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400b168:	68fb      	ldr	r3, [r7, #12]
2400b16a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b16c:	b2da      	uxtb	r2, r3
2400b16e:	8979      	ldrh	r1, [r7, #10]
2400b170:	4b0c      	ldr	r3, [pc, #48]	; (2400b1a4 <HAL_I2C_Master_Receive_IT+0xdc>)
2400b172:	9300      	str	r3, [sp, #0]
2400b174:	697b      	ldr	r3, [r7, #20]
2400b176:	68f8      	ldr	r0, [r7, #12]
2400b178:	f004 faa4 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b17c:	68fb      	ldr	r3, [r7, #12]
2400b17e:	2200      	movs	r2, #0
2400b180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400b184:	2102      	movs	r1, #2
2400b186:	68f8      	ldr	r0, [r7, #12]
2400b188:	f004 face 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400b18c:	2300      	movs	r3, #0
2400b18e:	e000      	b.n	2400b192 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400b190:	2302      	movs	r3, #2
  }
}
2400b192:	4618      	mov	r0, r3
2400b194:	3718      	adds	r7, #24
2400b196:	46bd      	mov	sp, r7
2400b198:	bd80      	pop	{r7, pc}
2400b19a:	bf00      	nop
2400b19c:	ffff0000 	.word	0xffff0000
2400b1a0:	2400d707 	.word	0x2400d707
2400b1a4:	80002400 	.word	0x80002400

2400b1a8 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b1a8:	b580      	push	{r7, lr}
2400b1aa:	b084      	sub	sp, #16
2400b1ac:	af00      	add	r7, sp, #0
2400b1ae:	60f8      	str	r0, [r7, #12]
2400b1b0:	60b9      	str	r1, [r7, #8]
2400b1b2:	4613      	mov	r3, r2
2400b1b4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400b1b6:	68fb      	ldr	r3, [r7, #12]
2400b1b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b1bc:	b2db      	uxtb	r3, r3
2400b1be:	2b20      	cmp	r3, #32
2400b1c0:	d139      	bne.n	2400b236 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b1c2:	68fb      	ldr	r3, [r7, #12]
2400b1c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b1c8:	2b01      	cmp	r3, #1
2400b1ca:	d101      	bne.n	2400b1d0 <HAL_I2C_Slave_Transmit_IT+0x28>
2400b1cc:	2302      	movs	r3, #2
2400b1ce:	e033      	b.n	2400b238 <HAL_I2C_Slave_Transmit_IT+0x90>
2400b1d0:	68fb      	ldr	r3, [r7, #12]
2400b1d2:	2201      	movs	r2, #1
2400b1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b1d8:	68fb      	ldr	r3, [r7, #12]
2400b1da:	2221      	movs	r2, #33	; 0x21
2400b1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b1e0:	68fb      	ldr	r3, [r7, #12]
2400b1e2:	2220      	movs	r2, #32
2400b1e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b1e8:	68fb      	ldr	r3, [r7, #12]
2400b1ea:	2200      	movs	r2, #0
2400b1ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b1ee:	68fb      	ldr	r3, [r7, #12]
2400b1f0:	681b      	ldr	r3, [r3, #0]
2400b1f2:	685a      	ldr	r2, [r3, #4]
2400b1f4:	68fb      	ldr	r3, [r7, #12]
2400b1f6:	681b      	ldr	r3, [r3, #0]
2400b1f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b1fc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b1fe:	68fb      	ldr	r3, [r7, #12]
2400b200:	68ba      	ldr	r2, [r7, #8]
2400b202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b204:	68fb      	ldr	r3, [r7, #12]
2400b206:	88fa      	ldrh	r2, [r7, #6]
2400b208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b20a:	68fb      	ldr	r3, [r7, #12]
2400b20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b20e:	b29a      	uxth	r2, r3
2400b210:	68fb      	ldr	r3, [r7, #12]
2400b212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b214:	68fb      	ldr	r3, [r7, #12]
2400b216:	4a0a      	ldr	r2, [pc, #40]	; (2400b240 <HAL_I2C_Slave_Transmit_IT+0x98>)
2400b218:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400b21a:	68fb      	ldr	r3, [r7, #12]
2400b21c:	4a09      	ldr	r2, [pc, #36]	; (2400b244 <HAL_I2C_Slave_Transmit_IT+0x9c>)
2400b21e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b220:	68fb      	ldr	r3, [r7, #12]
2400b222:	2200      	movs	r2, #0
2400b224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400b228:	f248 0101 	movw	r1, #32769	; 0x8001
2400b22c:	68f8      	ldr	r0, [r7, #12]
2400b22e:	f004 fa7b 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400b232:	2300      	movs	r3, #0
2400b234:	e000      	b.n	2400b238 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400b236:	2302      	movs	r3, #2
  }
}
2400b238:	4618      	mov	r0, r3
2400b23a:	3710      	adds	r7, #16
2400b23c:	46bd      	mov	sp, r7
2400b23e:	bd80      	pop	{r7, pc}
2400b240:	ffff0000 	.word	0xffff0000
2400b244:	2400d957 	.word	0x2400d957

2400b248 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b248:	b580      	push	{r7, lr}
2400b24a:	b084      	sub	sp, #16
2400b24c:	af00      	add	r7, sp, #0
2400b24e:	60f8      	str	r0, [r7, #12]
2400b250:	60b9      	str	r1, [r7, #8]
2400b252:	4613      	mov	r3, r2
2400b254:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400b256:	68fb      	ldr	r3, [r7, #12]
2400b258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b25c:	b2db      	uxtb	r3, r3
2400b25e:	2b20      	cmp	r3, #32
2400b260:	d139      	bne.n	2400b2d6 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b262:	68fb      	ldr	r3, [r7, #12]
2400b264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b268:	2b01      	cmp	r3, #1
2400b26a:	d101      	bne.n	2400b270 <HAL_I2C_Slave_Receive_IT+0x28>
2400b26c:	2302      	movs	r3, #2
2400b26e:	e033      	b.n	2400b2d8 <HAL_I2C_Slave_Receive_IT+0x90>
2400b270:	68fb      	ldr	r3, [r7, #12]
2400b272:	2201      	movs	r2, #1
2400b274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b278:	68fb      	ldr	r3, [r7, #12]
2400b27a:	2222      	movs	r2, #34	; 0x22
2400b27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b280:	68fb      	ldr	r3, [r7, #12]
2400b282:	2220      	movs	r2, #32
2400b284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b288:	68fb      	ldr	r3, [r7, #12]
2400b28a:	2200      	movs	r2, #0
2400b28c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b28e:	68fb      	ldr	r3, [r7, #12]
2400b290:	681b      	ldr	r3, [r3, #0]
2400b292:	685a      	ldr	r2, [r3, #4]
2400b294:	68fb      	ldr	r3, [r7, #12]
2400b296:	681b      	ldr	r3, [r3, #0]
2400b298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b29c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b29e:	68fb      	ldr	r3, [r7, #12]
2400b2a0:	68ba      	ldr	r2, [r7, #8]
2400b2a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b2a4:	68fb      	ldr	r3, [r7, #12]
2400b2a6:	88fa      	ldrh	r2, [r7, #6]
2400b2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b2aa:	68fb      	ldr	r3, [r7, #12]
2400b2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b2ae:	b29a      	uxth	r2, r3
2400b2b0:	68fb      	ldr	r3, [r7, #12]
2400b2b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b2b4:	68fb      	ldr	r3, [r7, #12]
2400b2b6:	4a0a      	ldr	r2, [pc, #40]	; (2400b2e0 <HAL_I2C_Slave_Receive_IT+0x98>)
2400b2b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400b2ba:	68fb      	ldr	r3, [r7, #12]
2400b2bc:	4a09      	ldr	r2, [pc, #36]	; (2400b2e4 <HAL_I2C_Slave_Receive_IT+0x9c>)
2400b2be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b2c0:	68fb      	ldr	r3, [r7, #12]
2400b2c2:	2200      	movs	r2, #0
2400b2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400b2c8:	f248 0102 	movw	r1, #32770	; 0x8002
2400b2cc:	68f8      	ldr	r0, [r7, #12]
2400b2ce:	f004 fa2b 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400b2d2:	2300      	movs	r3, #0
2400b2d4:	e000      	b.n	2400b2d8 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400b2d6:	2302      	movs	r3, #2
  }
}
2400b2d8:	4618      	mov	r0, r3
2400b2da:	3710      	adds	r7, #16
2400b2dc:	46bd      	mov	sp, r7
2400b2de:	bd80      	pop	{r7, pc}
2400b2e0:	ffff0000 	.word	0xffff0000
2400b2e4:	2400d957 	.word	0x2400d957

2400b2e8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2400b2e8:	b580      	push	{r7, lr}
2400b2ea:	b088      	sub	sp, #32
2400b2ec:	af02      	add	r7, sp, #8
2400b2ee:	60f8      	str	r0, [r7, #12]
2400b2f0:	607a      	str	r2, [r7, #4]
2400b2f2:	461a      	mov	r2, r3
2400b2f4:	460b      	mov	r3, r1
2400b2f6:	817b      	strh	r3, [r7, #10]
2400b2f8:	4613      	mov	r3, r2
2400b2fa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b2fc:	68fb      	ldr	r3, [r7, #12]
2400b2fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b302:	b2db      	uxtb	r3, r3
2400b304:	2b20      	cmp	r3, #32
2400b306:	f040 80cd 	bne.w	2400b4a4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b30a:	68fb      	ldr	r3, [r7, #12]
2400b30c:	681b      	ldr	r3, [r3, #0]
2400b30e:	699b      	ldr	r3, [r3, #24]
2400b310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b318:	d101      	bne.n	2400b31e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
2400b31a:	2302      	movs	r3, #2
2400b31c:	e0c3      	b.n	2400b4a6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b31e:	68fb      	ldr	r3, [r7, #12]
2400b320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b324:	2b01      	cmp	r3, #1
2400b326:	d101      	bne.n	2400b32c <HAL_I2C_Master_Transmit_DMA+0x44>
2400b328:	2302      	movs	r3, #2
2400b32a:	e0bc      	b.n	2400b4a6 <HAL_I2C_Master_Transmit_DMA+0x1be>
2400b32c:	68fb      	ldr	r3, [r7, #12]
2400b32e:	2201      	movs	r2, #1
2400b330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b334:	68fb      	ldr	r3, [r7, #12]
2400b336:	2221      	movs	r2, #33	; 0x21
2400b338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b33c:	68fb      	ldr	r3, [r7, #12]
2400b33e:	2210      	movs	r2, #16
2400b340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b344:	68fb      	ldr	r3, [r7, #12]
2400b346:	2200      	movs	r2, #0
2400b348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b34a:	68fb      	ldr	r3, [r7, #12]
2400b34c:	687a      	ldr	r2, [r7, #4]
2400b34e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b350:	68fb      	ldr	r3, [r7, #12]
2400b352:	893a      	ldrh	r2, [r7, #8]
2400b354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b356:	68fb      	ldr	r3, [r7, #12]
2400b358:	4a55      	ldr	r2, [pc, #340]	; (2400b4b0 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
2400b35a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400b35c:	68fb      	ldr	r3, [r7, #12]
2400b35e:	4a55      	ldr	r2, [pc, #340]	; (2400b4b4 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
2400b360:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b362:	68fb      	ldr	r3, [r7, #12]
2400b364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b366:	b29b      	uxth	r3, r3
2400b368:	2bff      	cmp	r3, #255	; 0xff
2400b36a:	d906      	bls.n	2400b37a <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b36c:	68fb      	ldr	r3, [r7, #12]
2400b36e:	22ff      	movs	r2, #255	; 0xff
2400b370:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b376:	617b      	str	r3, [r7, #20]
2400b378:	e007      	b.n	2400b38a <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b37a:	68fb      	ldr	r3, [r7, #12]
2400b37c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b37e:	b29a      	uxth	r2, r3
2400b380:	68fb      	ldr	r3, [r7, #12]
2400b382:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b388:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400b38a:	68fb      	ldr	r3, [r7, #12]
2400b38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b38e:	2b00      	cmp	r3, #0
2400b390:	d070      	beq.n	2400b474 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
2400b392:	68fb      	ldr	r3, [r7, #12]
2400b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b396:	2b00      	cmp	r3, #0
2400b398:	d020      	beq.n	2400b3dc <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400b39a:	68fb      	ldr	r3, [r7, #12]
2400b39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b39e:	4a46      	ldr	r2, [pc, #280]	; (2400b4b8 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
2400b3a0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400b3a2:	68fb      	ldr	r3, [r7, #12]
2400b3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b3a6:	4a45      	ldr	r2, [pc, #276]	; (2400b4bc <HAL_I2C_Master_Transmit_DMA+0x1d4>)
2400b3a8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400b3aa:	68fb      	ldr	r3, [r7, #12]
2400b3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b3ae:	2200      	movs	r2, #0
2400b3b0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400b3b2:	68fb      	ldr	r3, [r7, #12]
2400b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b3b6:	2200      	movs	r2, #0
2400b3b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b3ba:	68fb      	ldr	r3, [r7, #12]
2400b3bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400b3be:	6879      	ldr	r1, [r7, #4]
2400b3c0:	68fb      	ldr	r3, [r7, #12]
2400b3c2:	681b      	ldr	r3, [r3, #0]
2400b3c4:	3328      	adds	r3, #40	; 0x28
2400b3c6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400b3c8:	68fb      	ldr	r3, [r7, #12]
2400b3ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b3cc:	f7f8 fcc4 	bl	24003d58 <HAL_DMA_Start_IT>
2400b3d0:	4603      	mov	r3, r0
2400b3d2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400b3d4:	7cfb      	ldrb	r3, [r7, #19]
2400b3d6:	2b00      	cmp	r3, #0
2400b3d8:	d138      	bne.n	2400b44c <HAL_I2C_Master_Transmit_DMA+0x164>
2400b3da:	e013      	b.n	2400b404 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400b3dc:	68fb      	ldr	r3, [r7, #12]
2400b3de:	2220      	movs	r2, #32
2400b3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b3e4:	68fb      	ldr	r3, [r7, #12]
2400b3e6:	2200      	movs	r2, #0
2400b3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b3ec:	68fb      	ldr	r3, [r7, #12]
2400b3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b3f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b3f4:	68fb      	ldr	r3, [r7, #12]
2400b3f6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400b3f8:	68fb      	ldr	r3, [r7, #12]
2400b3fa:	2200      	movs	r2, #0
2400b3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400b400:	2301      	movs	r3, #1
2400b402:	e050      	b.n	2400b4a6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400b404:	68fb      	ldr	r3, [r7, #12]
2400b406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b408:	b2da      	uxtb	r2, r3
2400b40a:	8979      	ldrh	r1, [r7, #10]
2400b40c:	4b2c      	ldr	r3, [pc, #176]	; (2400b4c0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400b40e:	9300      	str	r3, [sp, #0]
2400b410:	697b      	ldr	r3, [r7, #20]
2400b412:	68f8      	ldr	r0, [r7, #12]
2400b414:	f004 f956 	bl	2400f6c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400b418:	68fb      	ldr	r3, [r7, #12]
2400b41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b41c:	b29a      	uxth	r2, r3
2400b41e:	68fb      	ldr	r3, [r7, #12]
2400b420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b422:	1ad3      	subs	r3, r2, r3
2400b424:	b29a      	uxth	r2, r3
2400b426:	68fb      	ldr	r3, [r7, #12]
2400b428:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400b42a:	68fb      	ldr	r3, [r7, #12]
2400b42c:	2200      	movs	r2, #0
2400b42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400b432:	2110      	movs	r1, #16
2400b434:	68f8      	ldr	r0, [r7, #12]
2400b436:	f004 f977 	bl	2400f728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400b43a:	68fb      	ldr	r3, [r7, #12]
2400b43c:	681b      	ldr	r3, [r3, #0]
2400b43e:	681a      	ldr	r2, [r3, #0]
2400b440:	68fb      	ldr	r3, [r7, #12]
2400b442:	681b      	ldr	r3, [r3, #0]
2400b444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400b448:	601a      	str	r2, [r3, #0]
2400b44a:	e029      	b.n	2400b4a0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400b44c:	68fb      	ldr	r3, [r7, #12]
2400b44e:	2220      	movs	r2, #32
2400b450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b454:	68fb      	ldr	r3, [r7, #12]
2400b456:	2200      	movs	r2, #0
2400b458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b45c:	68fb      	ldr	r3, [r7, #12]
2400b45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b460:	f043 0210 	orr.w	r2, r3, #16
2400b464:	68fb      	ldr	r3, [r7, #12]
2400b466:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400b468:	68fb      	ldr	r3, [r7, #12]
2400b46a:	2200      	movs	r2, #0
2400b46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400b470:	2301      	movs	r3, #1
2400b472:	e018      	b.n	2400b4a6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400b474:	68fb      	ldr	r3, [r7, #12]
2400b476:	4a13      	ldr	r2, [pc, #76]	; (2400b4c4 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
2400b478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b47a:	68fb      	ldr	r3, [r7, #12]
2400b47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b47e:	b2da      	uxtb	r2, r3
2400b480:	8979      	ldrh	r1, [r7, #10]
2400b482:	4b0f      	ldr	r3, [pc, #60]	; (2400b4c0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400b484:	9300      	str	r3, [sp, #0]
2400b486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b48a:	68f8      	ldr	r0, [r7, #12]
2400b48c:	f004 f91a 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b490:	68fb      	ldr	r3, [r7, #12]
2400b492:	2200      	movs	r2, #0
2400b494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b498:	2101      	movs	r1, #1
2400b49a:	68f8      	ldr	r0, [r7, #12]
2400b49c:	f004 f944 	bl	2400f728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400b4a0:	2300      	movs	r3, #0
2400b4a2:	e000      	b.n	2400b4a6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400b4a4:	2302      	movs	r3, #2
  }
}
2400b4a6:	4618      	mov	r0, r3
2400b4a8:	3718      	adds	r7, #24
2400b4aa:	46bd      	mov	sp, r7
2400b4ac:	bd80      	pop	{r7, pc}
2400b4ae:	bf00      	nop
2400b4b0:	ffff0000 	.word	0xffff0000
2400b4b4:	2400db5d 	.word	0x2400db5d
2400b4b8:	2400ecff 	.word	0x2400ecff
2400b4bc:	2400efd1 	.word	0x2400efd1
2400b4c0:	80002000 	.word	0x80002000
2400b4c4:	2400d707 	.word	0x2400d707

2400b4c8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400b4c8:	b580      	push	{r7, lr}
2400b4ca:	b088      	sub	sp, #32
2400b4cc:	af02      	add	r7, sp, #8
2400b4ce:	60f8      	str	r0, [r7, #12]
2400b4d0:	607a      	str	r2, [r7, #4]
2400b4d2:	461a      	mov	r2, r3
2400b4d4:	460b      	mov	r3, r1
2400b4d6:	817b      	strh	r3, [r7, #10]
2400b4d8:	4613      	mov	r3, r2
2400b4da:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b4dc:	68fb      	ldr	r3, [r7, #12]
2400b4de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b4e2:	b2db      	uxtb	r3, r3
2400b4e4:	2b20      	cmp	r3, #32
2400b4e6:	f040 80cd 	bne.w	2400b684 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b4ea:	68fb      	ldr	r3, [r7, #12]
2400b4ec:	681b      	ldr	r3, [r3, #0]
2400b4ee:	699b      	ldr	r3, [r3, #24]
2400b4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b4f8:	d101      	bne.n	2400b4fe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2400b4fa:	2302      	movs	r3, #2
2400b4fc:	e0c3      	b.n	2400b686 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b4fe:	68fb      	ldr	r3, [r7, #12]
2400b500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b504:	2b01      	cmp	r3, #1
2400b506:	d101      	bne.n	2400b50c <HAL_I2C_Master_Receive_DMA+0x44>
2400b508:	2302      	movs	r3, #2
2400b50a:	e0bc      	b.n	2400b686 <HAL_I2C_Master_Receive_DMA+0x1be>
2400b50c:	68fb      	ldr	r3, [r7, #12]
2400b50e:	2201      	movs	r2, #1
2400b510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b514:	68fb      	ldr	r3, [r7, #12]
2400b516:	2222      	movs	r2, #34	; 0x22
2400b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b51c:	68fb      	ldr	r3, [r7, #12]
2400b51e:	2210      	movs	r2, #16
2400b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b524:	68fb      	ldr	r3, [r7, #12]
2400b526:	2200      	movs	r2, #0
2400b528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b52a:	68fb      	ldr	r3, [r7, #12]
2400b52c:	687a      	ldr	r2, [r7, #4]
2400b52e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b530:	68fb      	ldr	r3, [r7, #12]
2400b532:	893a      	ldrh	r2, [r7, #8]
2400b534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b536:	68fb      	ldr	r3, [r7, #12]
2400b538:	4a55      	ldr	r2, [pc, #340]	; (2400b690 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2400b53a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400b53c:	68fb      	ldr	r3, [r7, #12]
2400b53e:	4a55      	ldr	r2, [pc, #340]	; (2400b694 <HAL_I2C_Master_Receive_DMA+0x1cc>)
2400b540:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b542:	68fb      	ldr	r3, [r7, #12]
2400b544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b546:	b29b      	uxth	r3, r3
2400b548:	2bff      	cmp	r3, #255	; 0xff
2400b54a:	d906      	bls.n	2400b55a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b54c:	68fb      	ldr	r3, [r7, #12]
2400b54e:	22ff      	movs	r2, #255	; 0xff
2400b550:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b556:	617b      	str	r3, [r7, #20]
2400b558:	e007      	b.n	2400b56a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b55a:	68fb      	ldr	r3, [r7, #12]
2400b55c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b55e:	b29a      	uxth	r2, r3
2400b560:	68fb      	ldr	r3, [r7, #12]
2400b562:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b568:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400b56a:	68fb      	ldr	r3, [r7, #12]
2400b56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b56e:	2b00      	cmp	r3, #0
2400b570:	d070      	beq.n	2400b654 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2400b572:	68fb      	ldr	r3, [r7, #12]
2400b574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b576:	2b00      	cmp	r3, #0
2400b578:	d020      	beq.n	2400b5bc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400b57a:	68fb      	ldr	r3, [r7, #12]
2400b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b57e:	4a46      	ldr	r2, [pc, #280]	; (2400b698 <HAL_I2C_Master_Receive_DMA+0x1d0>)
2400b580:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400b582:	68fb      	ldr	r3, [r7, #12]
2400b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b586:	4a45      	ldr	r2, [pc, #276]	; (2400b69c <HAL_I2C_Master_Receive_DMA+0x1d4>)
2400b588:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400b58a:	68fb      	ldr	r3, [r7, #12]
2400b58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b58e:	2200      	movs	r2, #0
2400b590:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400b592:	68fb      	ldr	r3, [r7, #12]
2400b594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b596:	2200      	movs	r2, #0
2400b598:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b59a:	68fb      	ldr	r3, [r7, #12]
2400b59c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400b59e:	68fb      	ldr	r3, [r7, #12]
2400b5a0:	681b      	ldr	r3, [r3, #0]
2400b5a2:	3324      	adds	r3, #36	; 0x24
2400b5a4:	4619      	mov	r1, r3
2400b5a6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400b5a8:	68fb      	ldr	r3, [r7, #12]
2400b5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b5ac:	f7f8 fbd4 	bl	24003d58 <HAL_DMA_Start_IT>
2400b5b0:	4603      	mov	r3, r0
2400b5b2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400b5b4:	7cfb      	ldrb	r3, [r7, #19]
2400b5b6:	2b00      	cmp	r3, #0
2400b5b8:	d138      	bne.n	2400b62c <HAL_I2C_Master_Receive_DMA+0x164>
2400b5ba:	e013      	b.n	2400b5e4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400b5bc:	68fb      	ldr	r3, [r7, #12]
2400b5be:	2220      	movs	r2, #32
2400b5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b5c4:	68fb      	ldr	r3, [r7, #12]
2400b5c6:	2200      	movs	r2, #0
2400b5c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b5cc:	68fb      	ldr	r3, [r7, #12]
2400b5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b5d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b5d4:	68fb      	ldr	r3, [r7, #12]
2400b5d6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400b5d8:	68fb      	ldr	r3, [r7, #12]
2400b5da:	2200      	movs	r2, #0
2400b5dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400b5e0:	2301      	movs	r3, #1
2400b5e2:	e050      	b.n	2400b686 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400b5e4:	68fb      	ldr	r3, [r7, #12]
2400b5e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b5e8:	b2da      	uxtb	r2, r3
2400b5ea:	8979      	ldrh	r1, [r7, #10]
2400b5ec:	4b2c      	ldr	r3, [pc, #176]	; (2400b6a0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400b5ee:	9300      	str	r3, [sp, #0]
2400b5f0:	697b      	ldr	r3, [r7, #20]
2400b5f2:	68f8      	ldr	r0, [r7, #12]
2400b5f4:	f004 f866 	bl	2400f6c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400b5f8:	68fb      	ldr	r3, [r7, #12]
2400b5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b5fc:	b29a      	uxth	r2, r3
2400b5fe:	68fb      	ldr	r3, [r7, #12]
2400b600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b602:	1ad3      	subs	r3, r2, r3
2400b604:	b29a      	uxth	r2, r3
2400b606:	68fb      	ldr	r3, [r7, #12]
2400b608:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400b60a:	68fb      	ldr	r3, [r7, #12]
2400b60c:	2200      	movs	r2, #0
2400b60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400b612:	2110      	movs	r1, #16
2400b614:	68f8      	ldr	r0, [r7, #12]
2400b616:	f004 f887 	bl	2400f728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400b61a:	68fb      	ldr	r3, [r7, #12]
2400b61c:	681b      	ldr	r3, [r3, #0]
2400b61e:	681a      	ldr	r2, [r3, #0]
2400b620:	68fb      	ldr	r3, [r7, #12]
2400b622:	681b      	ldr	r3, [r3, #0]
2400b624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400b628:	601a      	str	r2, [r3, #0]
2400b62a:	e029      	b.n	2400b680 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400b62c:	68fb      	ldr	r3, [r7, #12]
2400b62e:	2220      	movs	r2, #32
2400b630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b634:	68fb      	ldr	r3, [r7, #12]
2400b636:	2200      	movs	r2, #0
2400b638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b63c:	68fb      	ldr	r3, [r7, #12]
2400b63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b640:	f043 0210 	orr.w	r2, r3, #16
2400b644:	68fb      	ldr	r3, [r7, #12]
2400b646:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400b648:	68fb      	ldr	r3, [r7, #12]
2400b64a:	2200      	movs	r2, #0
2400b64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400b650:	2301      	movs	r3, #1
2400b652:	e018      	b.n	2400b686 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400b654:	68fb      	ldr	r3, [r7, #12]
2400b656:	4a13      	ldr	r2, [pc, #76]	; (2400b6a4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
2400b658:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b65a:	68fb      	ldr	r3, [r7, #12]
2400b65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b65e:	b2da      	uxtb	r2, r3
2400b660:	8979      	ldrh	r1, [r7, #10]
2400b662:	4b0f      	ldr	r3, [pc, #60]	; (2400b6a0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400b664:	9300      	str	r3, [sp, #0]
2400b666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b66a:	68f8      	ldr	r0, [r7, #12]
2400b66c:	f004 f82a 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b670:	68fb      	ldr	r3, [r7, #12]
2400b672:	2200      	movs	r2, #0
2400b674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b678:	2101      	movs	r1, #1
2400b67a:	68f8      	ldr	r0, [r7, #12]
2400b67c:	f004 f854 	bl	2400f728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400b680:	2300      	movs	r3, #0
2400b682:	e000      	b.n	2400b686 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400b684:	2302      	movs	r3, #2
  }
}
2400b686:	4618      	mov	r0, r3
2400b688:	3718      	adds	r7, #24
2400b68a:	46bd      	mov	sp, r7
2400b68c:	bd80      	pop	{r7, pc}
2400b68e:	bf00      	nop
2400b690:	ffff0000 	.word	0xffff0000
2400b694:	2400db5d 	.word	0x2400db5d
2400b698:	2400edd5 	.word	0x2400edd5
2400b69c:	2400efd1 	.word	0x2400efd1
2400b6a0:	80002400 	.word	0x80002400
2400b6a4:	2400d707 	.word	0x2400d707

2400b6a8 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b6a8:	b580      	push	{r7, lr}
2400b6aa:	b086      	sub	sp, #24
2400b6ac:	af00      	add	r7, sp, #0
2400b6ae:	60f8      	str	r0, [r7, #12]
2400b6b0:	60b9      	str	r1, [r7, #8]
2400b6b2:	4613      	mov	r3, r2
2400b6b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b6b6:	68fb      	ldr	r3, [r7, #12]
2400b6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b6bc:	b2db      	uxtb	r3, r3
2400b6be:	2b20      	cmp	r3, #32
2400b6c0:	f040 809b 	bne.w	2400b7fa <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400b6c4:	68bb      	ldr	r3, [r7, #8]
2400b6c6:	2b00      	cmp	r3, #0
2400b6c8:	d002      	beq.n	2400b6d0 <HAL_I2C_Slave_Transmit_DMA+0x28>
2400b6ca:	88fb      	ldrh	r3, [r7, #6]
2400b6cc:	2b00      	cmp	r3, #0
2400b6ce:	d105      	bne.n	2400b6dc <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b6d0:	68fb      	ldr	r3, [r7, #12]
2400b6d2:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b6d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b6d8:	2301      	movs	r3, #1
2400b6da:	e08f      	b.n	2400b7fc <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b6dc:	68fb      	ldr	r3, [r7, #12]
2400b6de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b6e2:	2b01      	cmp	r3, #1
2400b6e4:	d101      	bne.n	2400b6ea <HAL_I2C_Slave_Transmit_DMA+0x42>
2400b6e6:	2302      	movs	r3, #2
2400b6e8:	e088      	b.n	2400b7fc <HAL_I2C_Slave_Transmit_DMA+0x154>
2400b6ea:	68fb      	ldr	r3, [r7, #12]
2400b6ec:	2201      	movs	r2, #1
2400b6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b6f2:	68fb      	ldr	r3, [r7, #12]
2400b6f4:	2221      	movs	r2, #33	; 0x21
2400b6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b6fa:	68fb      	ldr	r3, [r7, #12]
2400b6fc:	2220      	movs	r2, #32
2400b6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b702:	68fb      	ldr	r3, [r7, #12]
2400b704:	2200      	movs	r2, #0
2400b706:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b708:	68fb      	ldr	r3, [r7, #12]
2400b70a:	68ba      	ldr	r2, [r7, #8]
2400b70c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b70e:	68fb      	ldr	r3, [r7, #12]
2400b710:	88fa      	ldrh	r2, [r7, #6]
2400b712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b714:	68fb      	ldr	r3, [r7, #12]
2400b716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b718:	b29a      	uxth	r2, r3
2400b71a:	68fb      	ldr	r3, [r7, #12]
2400b71c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b71e:	68fb      	ldr	r3, [r7, #12]
2400b720:	4a38      	ldr	r2, [pc, #224]	; (2400b804 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
2400b722:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400b724:	68fb      	ldr	r3, [r7, #12]
2400b726:	4a38      	ldr	r2, [pc, #224]	; (2400b808 <HAL_I2C_Slave_Transmit_DMA+0x160>)
2400b728:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400b72a:	68fb      	ldr	r3, [r7, #12]
2400b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b72e:	2b00      	cmp	r3, #0
2400b730:	d020      	beq.n	2400b774 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400b732:	68fb      	ldr	r3, [r7, #12]
2400b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b736:	4a35      	ldr	r2, [pc, #212]	; (2400b80c <HAL_I2C_Slave_Transmit_DMA+0x164>)
2400b738:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400b73a:	68fb      	ldr	r3, [r7, #12]
2400b73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b73e:	4a34      	ldr	r2, [pc, #208]	; (2400b810 <HAL_I2C_Slave_Transmit_DMA+0x168>)
2400b740:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400b742:	68fb      	ldr	r3, [r7, #12]
2400b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b746:	2200      	movs	r2, #0
2400b748:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400b74a:	68fb      	ldr	r3, [r7, #12]
2400b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b74e:	2200      	movs	r2, #0
2400b750:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b752:	68fb      	ldr	r3, [r7, #12]
2400b754:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400b756:	68b9      	ldr	r1, [r7, #8]
2400b758:	68fb      	ldr	r3, [r7, #12]
2400b75a:	681b      	ldr	r3, [r3, #0]
2400b75c:	3328      	adds	r3, #40	; 0x28
2400b75e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400b760:	68fb      	ldr	r3, [r7, #12]
2400b762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b764:	f7f8 faf8 	bl	24003d58 <HAL_DMA_Start_IT>
2400b768:	4603      	mov	r3, r0
2400b76a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b76c:	7dfb      	ldrb	r3, [r7, #23]
2400b76e:	2b00      	cmp	r3, #0
2400b770:	d12f      	bne.n	2400b7d2 <HAL_I2C_Slave_Transmit_DMA+0x12a>
2400b772:	e013      	b.n	2400b79c <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b774:	68fb      	ldr	r3, [r7, #12]
2400b776:	2228      	movs	r2, #40	; 0x28
2400b778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b77c:	68fb      	ldr	r3, [r7, #12]
2400b77e:	2200      	movs	r2, #0
2400b780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b784:	68fb      	ldr	r3, [r7, #12]
2400b786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b788:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b78c:	68fb      	ldr	r3, [r7, #12]
2400b78e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b790:	68fb      	ldr	r3, [r7, #12]
2400b792:	2200      	movs	r2, #0
2400b794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b798:	2301      	movs	r3, #1
2400b79a:	e02f      	b.n	2400b7fc <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b79c:	68fb      	ldr	r3, [r7, #12]
2400b79e:	681b      	ldr	r3, [r3, #0]
2400b7a0:	685a      	ldr	r2, [r3, #4]
2400b7a2:	68fb      	ldr	r3, [r7, #12]
2400b7a4:	681b      	ldr	r3, [r3, #0]
2400b7a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b7aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b7ac:	68fb      	ldr	r3, [r7, #12]
2400b7ae:	2200      	movs	r2, #0
2400b7b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400b7b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b7b8:	68f8      	ldr	r0, [r7, #12]
2400b7ba:	f003 ffb5 	bl	2400f728 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400b7be:	68fb      	ldr	r3, [r7, #12]
2400b7c0:	681b      	ldr	r3, [r3, #0]
2400b7c2:	681a      	ldr	r2, [r3, #0]
2400b7c4:	68fb      	ldr	r3, [r7, #12]
2400b7c6:	681b      	ldr	r3, [r3, #0]
2400b7c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400b7cc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b7ce:	2300      	movs	r3, #0
2400b7d0:	e014      	b.n	2400b7fc <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b7d2:	68fb      	ldr	r3, [r7, #12]
2400b7d4:	2228      	movs	r2, #40	; 0x28
2400b7d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b7da:	68fb      	ldr	r3, [r7, #12]
2400b7dc:	2200      	movs	r2, #0
2400b7de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b7e2:	68fb      	ldr	r3, [r7, #12]
2400b7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b7e6:	f043 0210 	orr.w	r2, r3, #16
2400b7ea:	68fb      	ldr	r3, [r7, #12]
2400b7ec:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b7ee:	68fb      	ldr	r3, [r7, #12]
2400b7f0:	2200      	movs	r2, #0
2400b7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b7f6:	2301      	movs	r3, #1
2400b7f8:	e000      	b.n	2400b7fc <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400b7fa:	2302      	movs	r3, #2
  }
}
2400b7fc:	4618      	mov	r0, r3
2400b7fe:	3718      	adds	r7, #24
2400b800:	46bd      	mov	sp, r7
2400b802:	bd80      	pop	{r7, pc}
2400b804:	ffff0000 	.word	0xffff0000
2400b808:	2400dd45 	.word	0x2400dd45
2400b80c:	2400ed95 	.word	0x2400ed95
2400b810:	2400efd1 	.word	0x2400efd1

2400b814 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b814:	b580      	push	{r7, lr}
2400b816:	b086      	sub	sp, #24
2400b818:	af00      	add	r7, sp, #0
2400b81a:	60f8      	str	r0, [r7, #12]
2400b81c:	60b9      	str	r1, [r7, #8]
2400b81e:	4613      	mov	r3, r2
2400b820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b822:	68fb      	ldr	r3, [r7, #12]
2400b824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b828:	b2db      	uxtb	r3, r3
2400b82a:	2b20      	cmp	r3, #32
2400b82c:	f040 809b 	bne.w	2400b966 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400b830:	68bb      	ldr	r3, [r7, #8]
2400b832:	2b00      	cmp	r3, #0
2400b834:	d002      	beq.n	2400b83c <HAL_I2C_Slave_Receive_DMA+0x28>
2400b836:	88fb      	ldrh	r3, [r7, #6]
2400b838:	2b00      	cmp	r3, #0
2400b83a:	d105      	bne.n	2400b848 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b83c:	68fb      	ldr	r3, [r7, #12]
2400b83e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b842:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b844:	2301      	movs	r3, #1
2400b846:	e08f      	b.n	2400b968 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b848:	68fb      	ldr	r3, [r7, #12]
2400b84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b84e:	2b01      	cmp	r3, #1
2400b850:	d101      	bne.n	2400b856 <HAL_I2C_Slave_Receive_DMA+0x42>
2400b852:	2302      	movs	r3, #2
2400b854:	e088      	b.n	2400b968 <HAL_I2C_Slave_Receive_DMA+0x154>
2400b856:	68fb      	ldr	r3, [r7, #12]
2400b858:	2201      	movs	r2, #1
2400b85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b85e:	68fb      	ldr	r3, [r7, #12]
2400b860:	2222      	movs	r2, #34	; 0x22
2400b862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b866:	68fb      	ldr	r3, [r7, #12]
2400b868:	2220      	movs	r2, #32
2400b86a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b86e:	68fb      	ldr	r3, [r7, #12]
2400b870:	2200      	movs	r2, #0
2400b872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b874:	68fb      	ldr	r3, [r7, #12]
2400b876:	68ba      	ldr	r2, [r7, #8]
2400b878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b87a:	68fb      	ldr	r3, [r7, #12]
2400b87c:	88fa      	ldrh	r2, [r7, #6]
2400b87e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b880:	68fb      	ldr	r3, [r7, #12]
2400b882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b884:	b29a      	uxth	r2, r3
2400b886:	68fb      	ldr	r3, [r7, #12]
2400b888:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b88a:	68fb      	ldr	r3, [r7, #12]
2400b88c:	4a38      	ldr	r2, [pc, #224]	; (2400b970 <HAL_I2C_Slave_Receive_DMA+0x15c>)
2400b88e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400b890:	68fb      	ldr	r3, [r7, #12]
2400b892:	4a38      	ldr	r2, [pc, #224]	; (2400b974 <HAL_I2C_Slave_Receive_DMA+0x160>)
2400b894:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400b896:	68fb      	ldr	r3, [r7, #12]
2400b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b89a:	2b00      	cmp	r3, #0
2400b89c:	d020      	beq.n	2400b8e0 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400b89e:	68fb      	ldr	r3, [r7, #12]
2400b8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b8a2:	4a35      	ldr	r2, [pc, #212]	; (2400b978 <HAL_I2C_Slave_Receive_DMA+0x164>)
2400b8a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400b8a6:	68fb      	ldr	r3, [r7, #12]
2400b8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b8aa:	4a34      	ldr	r2, [pc, #208]	; (2400b97c <HAL_I2C_Slave_Receive_DMA+0x168>)
2400b8ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400b8ae:	68fb      	ldr	r3, [r7, #12]
2400b8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b8b2:	2200      	movs	r2, #0
2400b8b4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400b8b6:	68fb      	ldr	r3, [r7, #12]
2400b8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b8ba:	2200      	movs	r2, #0
2400b8bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b8be:	68fb      	ldr	r3, [r7, #12]
2400b8c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400b8c2:	68fb      	ldr	r3, [r7, #12]
2400b8c4:	681b      	ldr	r3, [r3, #0]
2400b8c6:	3324      	adds	r3, #36	; 0x24
2400b8c8:	4619      	mov	r1, r3
2400b8ca:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2400b8cc:	68fb      	ldr	r3, [r7, #12]
2400b8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b8d0:	f7f8 fa42 	bl	24003d58 <HAL_DMA_Start_IT>
2400b8d4:	4603      	mov	r3, r0
2400b8d6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b8d8:	7dfb      	ldrb	r3, [r7, #23]
2400b8da:	2b00      	cmp	r3, #0
2400b8dc:	d12f      	bne.n	2400b93e <HAL_I2C_Slave_Receive_DMA+0x12a>
2400b8de:	e013      	b.n	2400b908 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b8e0:	68fb      	ldr	r3, [r7, #12]
2400b8e2:	2228      	movs	r2, #40	; 0x28
2400b8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b8e8:	68fb      	ldr	r3, [r7, #12]
2400b8ea:	2200      	movs	r2, #0
2400b8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b8f0:	68fb      	ldr	r3, [r7, #12]
2400b8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b8f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b8f8:	68fb      	ldr	r3, [r7, #12]
2400b8fa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b8fc:	68fb      	ldr	r3, [r7, #12]
2400b8fe:	2200      	movs	r2, #0
2400b900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b904:	2301      	movs	r3, #1
2400b906:	e02f      	b.n	2400b968 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b908:	68fb      	ldr	r3, [r7, #12]
2400b90a:	681b      	ldr	r3, [r3, #0]
2400b90c:	685a      	ldr	r2, [r3, #4]
2400b90e:	68fb      	ldr	r3, [r7, #12]
2400b910:	681b      	ldr	r3, [r3, #0]
2400b912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b916:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b918:	68fb      	ldr	r3, [r7, #12]
2400b91a:	2200      	movs	r2, #0
2400b91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400b920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b924:	68f8      	ldr	r0, [r7, #12]
2400b926:	f003 feff 	bl	2400f728 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400b92a:	68fb      	ldr	r3, [r7, #12]
2400b92c:	681b      	ldr	r3, [r3, #0]
2400b92e:	681a      	ldr	r2, [r3, #0]
2400b930:	68fb      	ldr	r3, [r7, #12]
2400b932:	681b      	ldr	r3, [r3, #0]
2400b934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400b938:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b93a:	2300      	movs	r3, #0
2400b93c:	e014      	b.n	2400b968 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b93e:	68fb      	ldr	r3, [r7, #12]
2400b940:	2228      	movs	r2, #40	; 0x28
2400b942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b946:	68fb      	ldr	r3, [r7, #12]
2400b948:	2200      	movs	r2, #0
2400b94a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b94e:	68fb      	ldr	r3, [r7, #12]
2400b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b952:	f043 0210 	orr.w	r2, r3, #16
2400b956:	68fb      	ldr	r3, [r7, #12]
2400b958:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b95a:	68fb      	ldr	r3, [r7, #12]
2400b95c:	2200      	movs	r2, #0
2400b95e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b962:	2301      	movs	r3, #1
2400b964:	e000      	b.n	2400b968 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400b966:	2302      	movs	r3, #2
  }
}
2400b968:	4618      	mov	r0, r3
2400b96a:	3718      	adds	r7, #24
2400b96c:	46bd      	mov	sp, r7
2400b96e:	bd80      	pop	{r7, pc}
2400b970:	ffff0000 	.word	0xffff0000
2400b974:	2400dd45 	.word	0x2400dd45
2400b978:	2400ee6d 	.word	0x2400ee6d
2400b97c:	2400efd1 	.word	0x2400efd1

2400b980 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400b980:	b580      	push	{r7, lr}
2400b982:	b088      	sub	sp, #32
2400b984:	af02      	add	r7, sp, #8
2400b986:	60f8      	str	r0, [r7, #12]
2400b988:	4608      	mov	r0, r1
2400b98a:	4611      	mov	r1, r2
2400b98c:	461a      	mov	r2, r3
2400b98e:	4603      	mov	r3, r0
2400b990:	817b      	strh	r3, [r7, #10]
2400b992:	460b      	mov	r3, r1
2400b994:	813b      	strh	r3, [r7, #8]
2400b996:	4613      	mov	r3, r2
2400b998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b99a:	68fb      	ldr	r3, [r7, #12]
2400b99c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b9a0:	b2db      	uxtb	r3, r3
2400b9a2:	2b20      	cmp	r3, #32
2400b9a4:	f040 80f9 	bne.w	2400bb9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2400b9a8:	6a3b      	ldr	r3, [r7, #32]
2400b9aa:	2b00      	cmp	r3, #0
2400b9ac:	d002      	beq.n	2400b9b4 <HAL_I2C_Mem_Write+0x34>
2400b9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b9b0:	2b00      	cmp	r3, #0
2400b9b2:	d105      	bne.n	2400b9c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b9b4:	68fb      	ldr	r3, [r7, #12]
2400b9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b9ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b9bc:	2301      	movs	r3, #1
2400b9be:	e0ed      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b9c0:	68fb      	ldr	r3, [r7, #12]
2400b9c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b9c6:	2b01      	cmp	r3, #1
2400b9c8:	d101      	bne.n	2400b9ce <HAL_I2C_Mem_Write+0x4e>
2400b9ca:	2302      	movs	r3, #2
2400b9cc:	e0e6      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
2400b9ce:	68fb      	ldr	r3, [r7, #12]
2400b9d0:	2201      	movs	r2, #1
2400b9d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b9d6:	f7f6 fc25 	bl	24002224 <HAL_GetTick>
2400b9da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b9dc:	697b      	ldr	r3, [r7, #20]
2400b9de:	9300      	str	r3, [sp, #0]
2400b9e0:	2319      	movs	r3, #25
2400b9e2:	2201      	movs	r2, #1
2400b9e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b9e8:	68f8      	ldr	r0, [r7, #12]
2400b9ea:	f003 fc49 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400b9ee:	4603      	mov	r3, r0
2400b9f0:	2b00      	cmp	r3, #0
2400b9f2:	d001      	beq.n	2400b9f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2400b9f4:	2301      	movs	r3, #1
2400b9f6:	e0d1      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400b9f8:	68fb      	ldr	r3, [r7, #12]
2400b9fa:	2221      	movs	r2, #33	; 0x21
2400b9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400ba00:	68fb      	ldr	r3, [r7, #12]
2400ba02:	2240      	movs	r2, #64	; 0x40
2400ba04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ba08:	68fb      	ldr	r3, [r7, #12]
2400ba0a:	2200      	movs	r2, #0
2400ba0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400ba0e:	68fb      	ldr	r3, [r7, #12]
2400ba10:	6a3a      	ldr	r2, [r7, #32]
2400ba12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400ba14:	68fb      	ldr	r3, [r7, #12]
2400ba16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400ba18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400ba1a:	68fb      	ldr	r3, [r7, #12]
2400ba1c:	2200      	movs	r2, #0
2400ba1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400ba20:	88f8      	ldrh	r0, [r7, #6]
2400ba22:	893a      	ldrh	r2, [r7, #8]
2400ba24:	8979      	ldrh	r1, [r7, #10]
2400ba26:	697b      	ldr	r3, [r7, #20]
2400ba28:	9301      	str	r3, [sp, #4]
2400ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400ba2c:	9300      	str	r3, [sp, #0]
2400ba2e:	4603      	mov	r3, r0
2400ba30:	68f8      	ldr	r0, [r7, #12]
2400ba32:	f002 fb69 	bl	2400e108 <I2C_RequestMemoryWrite>
2400ba36:	4603      	mov	r3, r0
2400ba38:	2b00      	cmp	r3, #0
2400ba3a:	d005      	beq.n	2400ba48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ba3c:	68fb      	ldr	r3, [r7, #12]
2400ba3e:	2200      	movs	r2, #0
2400ba40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400ba44:	2301      	movs	r3, #1
2400ba46:	e0a9      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ba48:	68fb      	ldr	r3, [r7, #12]
2400ba4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ba4c:	b29b      	uxth	r3, r3
2400ba4e:	2bff      	cmp	r3, #255	; 0xff
2400ba50:	d90e      	bls.n	2400ba70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ba52:	68fb      	ldr	r3, [r7, #12]
2400ba54:	22ff      	movs	r2, #255	; 0xff
2400ba56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400ba58:	68fb      	ldr	r3, [r7, #12]
2400ba5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ba5c:	b2da      	uxtb	r2, r3
2400ba5e:	8979      	ldrh	r1, [r7, #10]
2400ba60:	2300      	movs	r3, #0
2400ba62:	9300      	str	r3, [sp, #0]
2400ba64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ba68:	68f8      	ldr	r0, [r7, #12]
2400ba6a:	f003 fe2b 	bl	2400f6c4 <I2C_TransferConfig>
2400ba6e:	e00f      	b.n	2400ba90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ba70:	68fb      	ldr	r3, [r7, #12]
2400ba72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ba74:	b29a      	uxth	r2, r3
2400ba76:	68fb      	ldr	r3, [r7, #12]
2400ba78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400ba7a:	68fb      	ldr	r3, [r7, #12]
2400ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ba7e:	b2da      	uxtb	r2, r3
2400ba80:	8979      	ldrh	r1, [r7, #10]
2400ba82:	2300      	movs	r3, #0
2400ba84:	9300      	str	r3, [sp, #0]
2400ba86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ba8a:	68f8      	ldr	r0, [r7, #12]
2400ba8c:	f003 fe1a 	bl	2400f6c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400ba90:	697a      	ldr	r2, [r7, #20]
2400ba92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400ba94:	68f8      	ldr	r0, [r7, #12]
2400ba96:	f003 fc33 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400ba9a:	4603      	mov	r3, r0
2400ba9c:	2b00      	cmp	r3, #0
2400ba9e:	d001      	beq.n	2400baa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2400baa0:	2301      	movs	r3, #1
2400baa2:	e07b      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400baa4:	68fb      	ldr	r3, [r7, #12]
2400baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400baa8:	781a      	ldrb	r2, [r3, #0]
2400baaa:	68fb      	ldr	r3, [r7, #12]
2400baac:	681b      	ldr	r3, [r3, #0]
2400baae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400bab0:	68fb      	ldr	r3, [r7, #12]
2400bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bab4:	1c5a      	adds	r2, r3, #1
2400bab6:	68fb      	ldr	r3, [r7, #12]
2400bab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400baba:	68fb      	ldr	r3, [r7, #12]
2400babc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400babe:	b29b      	uxth	r3, r3
2400bac0:	3b01      	subs	r3, #1
2400bac2:	b29a      	uxth	r2, r3
2400bac4:	68fb      	ldr	r3, [r7, #12]
2400bac6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400bac8:	68fb      	ldr	r3, [r7, #12]
2400baca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bacc:	3b01      	subs	r3, #1
2400bace:	b29a      	uxth	r2, r3
2400bad0:	68fb      	ldr	r3, [r7, #12]
2400bad2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400bad4:	68fb      	ldr	r3, [r7, #12]
2400bad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bad8:	b29b      	uxth	r3, r3
2400bada:	2b00      	cmp	r3, #0
2400badc:	d034      	beq.n	2400bb48 <HAL_I2C_Mem_Write+0x1c8>
2400bade:	68fb      	ldr	r3, [r7, #12]
2400bae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bae2:	2b00      	cmp	r3, #0
2400bae4:	d130      	bne.n	2400bb48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400bae6:	697b      	ldr	r3, [r7, #20]
2400bae8:	9300      	str	r3, [sp, #0]
2400baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400baec:	2200      	movs	r2, #0
2400baee:	2180      	movs	r1, #128	; 0x80
2400baf0:	68f8      	ldr	r0, [r7, #12]
2400baf2:	f003 fbc5 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400baf6:	4603      	mov	r3, r0
2400baf8:	2b00      	cmp	r3, #0
2400bafa:	d001      	beq.n	2400bb00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400bafc:	2301      	movs	r3, #1
2400bafe:	e04d      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bb00:	68fb      	ldr	r3, [r7, #12]
2400bb02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb04:	b29b      	uxth	r3, r3
2400bb06:	2bff      	cmp	r3, #255	; 0xff
2400bb08:	d90e      	bls.n	2400bb28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400bb0a:	68fb      	ldr	r3, [r7, #12]
2400bb0c:	22ff      	movs	r2, #255	; 0xff
2400bb0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400bb10:	68fb      	ldr	r3, [r7, #12]
2400bb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bb14:	b2da      	uxtb	r2, r3
2400bb16:	8979      	ldrh	r1, [r7, #10]
2400bb18:	2300      	movs	r3, #0
2400bb1a:	9300      	str	r3, [sp, #0]
2400bb1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bb20:	68f8      	ldr	r0, [r7, #12]
2400bb22:	f003 fdcf 	bl	2400f6c4 <I2C_TransferConfig>
2400bb26:	e00f      	b.n	2400bb48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400bb28:	68fb      	ldr	r3, [r7, #12]
2400bb2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb2c:	b29a      	uxth	r2, r3
2400bb2e:	68fb      	ldr	r3, [r7, #12]
2400bb30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400bb32:	68fb      	ldr	r3, [r7, #12]
2400bb34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bb36:	b2da      	uxtb	r2, r3
2400bb38:	8979      	ldrh	r1, [r7, #10]
2400bb3a:	2300      	movs	r3, #0
2400bb3c:	9300      	str	r3, [sp, #0]
2400bb3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bb42:	68f8      	ldr	r0, [r7, #12]
2400bb44:	f003 fdbe 	bl	2400f6c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2400bb48:	68fb      	ldr	r3, [r7, #12]
2400bb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb4c:	b29b      	uxth	r3, r3
2400bb4e:	2b00      	cmp	r3, #0
2400bb50:	d19e      	bne.n	2400ba90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400bb52:	697a      	ldr	r2, [r7, #20]
2400bb54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400bb56:	68f8      	ldr	r0, [r7, #12]
2400bb58:	f003 fc12 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400bb5c:	4603      	mov	r3, r0
2400bb5e:	2b00      	cmp	r3, #0
2400bb60:	d001      	beq.n	2400bb66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2400bb62:	2301      	movs	r3, #1
2400bb64:	e01a      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bb66:	68fb      	ldr	r3, [r7, #12]
2400bb68:	681b      	ldr	r3, [r3, #0]
2400bb6a:	2220      	movs	r2, #32
2400bb6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400bb6e:	68fb      	ldr	r3, [r7, #12]
2400bb70:	681b      	ldr	r3, [r3, #0]
2400bb72:	6859      	ldr	r1, [r3, #4]
2400bb74:	68fb      	ldr	r3, [r7, #12]
2400bb76:	681a      	ldr	r2, [r3, #0]
2400bb78:	4b0a      	ldr	r3, [pc, #40]	; (2400bba4 <HAL_I2C_Mem_Write+0x224>)
2400bb7a:	400b      	ands	r3, r1
2400bb7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400bb7e:	68fb      	ldr	r3, [r7, #12]
2400bb80:	2220      	movs	r2, #32
2400bb82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400bb86:	68fb      	ldr	r3, [r7, #12]
2400bb88:	2200      	movs	r2, #0
2400bb8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bb8e:	68fb      	ldr	r3, [r7, #12]
2400bb90:	2200      	movs	r2, #0
2400bb92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400bb96:	2300      	movs	r3, #0
2400bb98:	e000      	b.n	2400bb9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400bb9a:	2302      	movs	r3, #2
  }
}
2400bb9c:	4618      	mov	r0, r3
2400bb9e:	3718      	adds	r7, #24
2400bba0:	46bd      	mov	sp, r7
2400bba2:	bd80      	pop	{r7, pc}
2400bba4:	fe00e800 	.word	0xfe00e800

2400bba8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400bba8:	b580      	push	{r7, lr}
2400bbaa:	b088      	sub	sp, #32
2400bbac:	af02      	add	r7, sp, #8
2400bbae:	60f8      	str	r0, [r7, #12]
2400bbb0:	4608      	mov	r0, r1
2400bbb2:	4611      	mov	r1, r2
2400bbb4:	461a      	mov	r2, r3
2400bbb6:	4603      	mov	r3, r0
2400bbb8:	817b      	strh	r3, [r7, #10]
2400bbba:	460b      	mov	r3, r1
2400bbbc:	813b      	strh	r3, [r7, #8]
2400bbbe:	4613      	mov	r3, r2
2400bbc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bbc2:	68fb      	ldr	r3, [r7, #12]
2400bbc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bbc8:	b2db      	uxtb	r3, r3
2400bbca:	2b20      	cmp	r3, #32
2400bbcc:	f040 80fd 	bne.w	2400bdca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2400bbd0:	6a3b      	ldr	r3, [r7, #32]
2400bbd2:	2b00      	cmp	r3, #0
2400bbd4:	d002      	beq.n	2400bbdc <HAL_I2C_Mem_Read+0x34>
2400bbd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400bbd8:	2b00      	cmp	r3, #0
2400bbda:	d105      	bne.n	2400bbe8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bbdc:	68fb      	ldr	r3, [r7, #12]
2400bbde:	f44f 7200 	mov.w	r2, #512	; 0x200
2400bbe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400bbe4:	2301      	movs	r3, #1
2400bbe6:	e0f1      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bbe8:	68fb      	ldr	r3, [r7, #12]
2400bbea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bbee:	2b01      	cmp	r3, #1
2400bbf0:	d101      	bne.n	2400bbf6 <HAL_I2C_Mem_Read+0x4e>
2400bbf2:	2302      	movs	r3, #2
2400bbf4:	e0ea      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
2400bbf6:	68fb      	ldr	r3, [r7, #12]
2400bbf8:	2201      	movs	r2, #1
2400bbfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400bbfe:	f7f6 fb11 	bl	24002224 <HAL_GetTick>
2400bc02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400bc04:	697b      	ldr	r3, [r7, #20]
2400bc06:	9300      	str	r3, [sp, #0]
2400bc08:	2319      	movs	r3, #25
2400bc0a:	2201      	movs	r2, #1
2400bc0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400bc10:	68f8      	ldr	r0, [r7, #12]
2400bc12:	f003 fb35 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400bc16:	4603      	mov	r3, r0
2400bc18:	2b00      	cmp	r3, #0
2400bc1a:	d001      	beq.n	2400bc20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2400bc1c:	2301      	movs	r3, #1
2400bc1e:	e0d5      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400bc20:	68fb      	ldr	r3, [r7, #12]
2400bc22:	2222      	movs	r2, #34	; 0x22
2400bc24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400bc28:	68fb      	ldr	r3, [r7, #12]
2400bc2a:	2240      	movs	r2, #64	; 0x40
2400bc2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bc30:	68fb      	ldr	r3, [r7, #12]
2400bc32:	2200      	movs	r2, #0
2400bc34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400bc36:	68fb      	ldr	r3, [r7, #12]
2400bc38:	6a3a      	ldr	r2, [r7, #32]
2400bc3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400bc3c:	68fb      	ldr	r3, [r7, #12]
2400bc3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400bc40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400bc42:	68fb      	ldr	r3, [r7, #12]
2400bc44:	2200      	movs	r2, #0
2400bc46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400bc48:	88f8      	ldrh	r0, [r7, #6]
2400bc4a:	893a      	ldrh	r2, [r7, #8]
2400bc4c:	8979      	ldrh	r1, [r7, #10]
2400bc4e:	697b      	ldr	r3, [r7, #20]
2400bc50:	9301      	str	r3, [sp, #4]
2400bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bc54:	9300      	str	r3, [sp, #0]
2400bc56:	4603      	mov	r3, r0
2400bc58:	68f8      	ldr	r0, [r7, #12]
2400bc5a:	f002 faa9 	bl	2400e1b0 <I2C_RequestMemoryRead>
2400bc5e:	4603      	mov	r3, r0
2400bc60:	2b00      	cmp	r3, #0
2400bc62:	d005      	beq.n	2400bc70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bc64:	68fb      	ldr	r3, [r7, #12]
2400bc66:	2200      	movs	r2, #0
2400bc68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bc6c:	2301      	movs	r3, #1
2400bc6e:	e0ad      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bc70:	68fb      	ldr	r3, [r7, #12]
2400bc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bc74:	b29b      	uxth	r3, r3
2400bc76:	2bff      	cmp	r3, #255	; 0xff
2400bc78:	d90e      	bls.n	2400bc98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bc7a:	68fb      	ldr	r3, [r7, #12]
2400bc7c:	22ff      	movs	r2, #255	; 0xff
2400bc7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400bc80:	68fb      	ldr	r3, [r7, #12]
2400bc82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bc84:	b2da      	uxtb	r2, r3
2400bc86:	8979      	ldrh	r1, [r7, #10]
2400bc88:	4b52      	ldr	r3, [pc, #328]	; (2400bdd4 <HAL_I2C_Mem_Read+0x22c>)
2400bc8a:	9300      	str	r3, [sp, #0]
2400bc8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bc90:	68f8      	ldr	r0, [r7, #12]
2400bc92:	f003 fd17 	bl	2400f6c4 <I2C_TransferConfig>
2400bc96:	e00f      	b.n	2400bcb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bc98:	68fb      	ldr	r3, [r7, #12]
2400bc9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bc9c:	b29a      	uxth	r2, r3
2400bc9e:	68fb      	ldr	r3, [r7, #12]
2400bca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400bca2:	68fb      	ldr	r3, [r7, #12]
2400bca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bca6:	b2da      	uxtb	r2, r3
2400bca8:	8979      	ldrh	r1, [r7, #10]
2400bcaa:	4b4a      	ldr	r3, [pc, #296]	; (2400bdd4 <HAL_I2C_Mem_Read+0x22c>)
2400bcac:	9300      	str	r3, [sp, #0]
2400bcae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bcb2:	68f8      	ldr	r0, [r7, #12]
2400bcb4:	f003 fd06 	bl	2400f6c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2400bcb8:	697b      	ldr	r3, [r7, #20]
2400bcba:	9300      	str	r3, [sp, #0]
2400bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bcbe:	2200      	movs	r2, #0
2400bcc0:	2104      	movs	r1, #4
2400bcc2:	68f8      	ldr	r0, [r7, #12]
2400bcc4:	f003 fadc 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400bcc8:	4603      	mov	r3, r0
2400bcca:	2b00      	cmp	r3, #0
2400bccc:	d001      	beq.n	2400bcd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400bcce:	2301      	movs	r3, #1
2400bcd0:	e07c      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400bcd2:	68fb      	ldr	r3, [r7, #12]
2400bcd4:	681b      	ldr	r3, [r3, #0]
2400bcd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400bcd8:	68fb      	ldr	r3, [r7, #12]
2400bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bcdc:	b2d2      	uxtb	r2, r2
2400bcde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400bce0:	68fb      	ldr	r3, [r7, #12]
2400bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400bce4:	1c5a      	adds	r2, r3, #1
2400bce6:	68fb      	ldr	r3, [r7, #12]
2400bce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400bcea:	68fb      	ldr	r3, [r7, #12]
2400bcec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bcee:	3b01      	subs	r3, #1
2400bcf0:	b29a      	uxth	r2, r3
2400bcf2:	68fb      	ldr	r3, [r7, #12]
2400bcf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400bcf6:	68fb      	ldr	r3, [r7, #12]
2400bcf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bcfa:	b29b      	uxth	r3, r3
2400bcfc:	3b01      	subs	r3, #1
2400bcfe:	b29a      	uxth	r2, r3
2400bd00:	68fb      	ldr	r3, [r7, #12]
2400bd02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400bd04:	68fb      	ldr	r3, [r7, #12]
2400bd06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bd08:	b29b      	uxth	r3, r3
2400bd0a:	2b00      	cmp	r3, #0
2400bd0c:	d034      	beq.n	2400bd78 <HAL_I2C_Mem_Read+0x1d0>
2400bd0e:	68fb      	ldr	r3, [r7, #12]
2400bd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bd12:	2b00      	cmp	r3, #0
2400bd14:	d130      	bne.n	2400bd78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400bd16:	697b      	ldr	r3, [r7, #20]
2400bd18:	9300      	str	r3, [sp, #0]
2400bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bd1c:	2200      	movs	r2, #0
2400bd1e:	2180      	movs	r1, #128	; 0x80
2400bd20:	68f8      	ldr	r0, [r7, #12]
2400bd22:	f003 faad 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400bd26:	4603      	mov	r3, r0
2400bd28:	2b00      	cmp	r3, #0
2400bd2a:	d001      	beq.n	2400bd30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2400bd2c:	2301      	movs	r3, #1
2400bd2e:	e04d      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bd30:	68fb      	ldr	r3, [r7, #12]
2400bd32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bd34:	b29b      	uxth	r3, r3
2400bd36:	2bff      	cmp	r3, #255	; 0xff
2400bd38:	d90e      	bls.n	2400bd58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400bd3a:	68fb      	ldr	r3, [r7, #12]
2400bd3c:	22ff      	movs	r2, #255	; 0xff
2400bd3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2400bd40:	68fb      	ldr	r3, [r7, #12]
2400bd42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bd44:	b2da      	uxtb	r2, r3
2400bd46:	8979      	ldrh	r1, [r7, #10]
2400bd48:	2300      	movs	r3, #0
2400bd4a:	9300      	str	r3, [sp, #0]
2400bd4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bd50:	68f8      	ldr	r0, [r7, #12]
2400bd52:	f003 fcb7 	bl	2400f6c4 <I2C_TransferConfig>
2400bd56:	e00f      	b.n	2400bd78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400bd58:	68fb      	ldr	r3, [r7, #12]
2400bd5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bd5c:	b29a      	uxth	r2, r3
2400bd5e:	68fb      	ldr	r3, [r7, #12]
2400bd60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400bd62:	68fb      	ldr	r3, [r7, #12]
2400bd64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bd66:	b2da      	uxtb	r2, r3
2400bd68:	8979      	ldrh	r1, [r7, #10]
2400bd6a:	2300      	movs	r3, #0
2400bd6c:	9300      	str	r3, [sp, #0]
2400bd6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bd72:	68f8      	ldr	r0, [r7, #12]
2400bd74:	f003 fca6 	bl	2400f6c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2400bd78:	68fb      	ldr	r3, [r7, #12]
2400bd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bd7c:	b29b      	uxth	r3, r3
2400bd7e:	2b00      	cmp	r3, #0
2400bd80:	d19a      	bne.n	2400bcb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400bd82:	697a      	ldr	r2, [r7, #20]
2400bd84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400bd86:	68f8      	ldr	r0, [r7, #12]
2400bd88:	f003 fafa 	bl	2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>
2400bd8c:	4603      	mov	r3, r0
2400bd8e:	2b00      	cmp	r3, #0
2400bd90:	d001      	beq.n	2400bd96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2400bd92:	2301      	movs	r3, #1
2400bd94:	e01a      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd96:	68fb      	ldr	r3, [r7, #12]
2400bd98:	681b      	ldr	r3, [r3, #0]
2400bd9a:	2220      	movs	r2, #32
2400bd9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400bd9e:	68fb      	ldr	r3, [r7, #12]
2400bda0:	681b      	ldr	r3, [r3, #0]
2400bda2:	6859      	ldr	r1, [r3, #4]
2400bda4:	68fb      	ldr	r3, [r7, #12]
2400bda6:	681a      	ldr	r2, [r3, #0]
2400bda8:	4b0b      	ldr	r3, [pc, #44]	; (2400bdd8 <HAL_I2C_Mem_Read+0x230>)
2400bdaa:	400b      	ands	r3, r1
2400bdac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400bdae:	68fb      	ldr	r3, [r7, #12]
2400bdb0:	2220      	movs	r2, #32
2400bdb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400bdb6:	68fb      	ldr	r3, [r7, #12]
2400bdb8:	2200      	movs	r2, #0
2400bdba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bdbe:	68fb      	ldr	r3, [r7, #12]
2400bdc0:	2200      	movs	r2, #0
2400bdc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400bdc6:	2300      	movs	r3, #0
2400bdc8:	e000      	b.n	2400bdcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400bdca:	2302      	movs	r3, #2
  }
}
2400bdcc:	4618      	mov	r0, r3
2400bdce:	3718      	adds	r7, #24
2400bdd0:	46bd      	mov	sp, r7
2400bdd2:	bd80      	pop	{r7, pc}
2400bdd4:	80002400 	.word	0x80002400
2400bdd8:	fe00e800 	.word	0xfe00e800

2400bddc <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400bddc:	b580      	push	{r7, lr}
2400bdde:	b088      	sub	sp, #32
2400bde0:	af02      	add	r7, sp, #8
2400bde2:	60f8      	str	r0, [r7, #12]
2400bde4:	4608      	mov	r0, r1
2400bde6:	4611      	mov	r1, r2
2400bde8:	461a      	mov	r2, r3
2400bdea:	4603      	mov	r3, r0
2400bdec:	817b      	strh	r3, [r7, #10]
2400bdee:	460b      	mov	r3, r1
2400bdf0:	813b      	strh	r3, [r7, #8]
2400bdf2:	4613      	mov	r3, r2
2400bdf4:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bdf6:	68fb      	ldr	r3, [r7, #12]
2400bdf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bdfc:	b2db      	uxtb	r3, r3
2400bdfe:	2b20      	cmp	r3, #32
2400be00:	d176      	bne.n	2400bef0 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400be02:	6a3b      	ldr	r3, [r7, #32]
2400be04:	2b00      	cmp	r3, #0
2400be06:	d002      	beq.n	2400be0e <HAL_I2C_Mem_Write_IT+0x32>
2400be08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400be0a:	2b00      	cmp	r3, #0
2400be0c:	d105      	bne.n	2400be1a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400be0e:	68fb      	ldr	r3, [r7, #12]
2400be10:	f44f 7200 	mov.w	r2, #512	; 0x200
2400be14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400be16:	2301      	movs	r3, #1
2400be18:	e06b      	b.n	2400bef2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400be1a:	68fb      	ldr	r3, [r7, #12]
2400be1c:	681b      	ldr	r3, [r3, #0]
2400be1e:	699b      	ldr	r3, [r3, #24]
2400be20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400be24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400be28:	d101      	bne.n	2400be2e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2400be2a:	2302      	movs	r3, #2
2400be2c:	e061      	b.n	2400bef2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400be2e:	68fb      	ldr	r3, [r7, #12]
2400be30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400be34:	2b01      	cmp	r3, #1
2400be36:	d101      	bne.n	2400be3c <HAL_I2C_Mem_Write_IT+0x60>
2400be38:	2302      	movs	r3, #2
2400be3a:	e05a      	b.n	2400bef2 <HAL_I2C_Mem_Write_IT+0x116>
2400be3c:	68fb      	ldr	r3, [r7, #12]
2400be3e:	2201      	movs	r2, #1
2400be40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400be44:	f7f6 f9ee 	bl	24002224 <HAL_GetTick>
2400be48:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400be4a:	68fb      	ldr	r3, [r7, #12]
2400be4c:	2221      	movs	r2, #33	; 0x21
2400be4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400be52:	68fb      	ldr	r3, [r7, #12]
2400be54:	2240      	movs	r2, #64	; 0x40
2400be56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400be5a:	68fb      	ldr	r3, [r7, #12]
2400be5c:	2200      	movs	r2, #0
2400be5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400be60:	68fb      	ldr	r3, [r7, #12]
2400be62:	6a3a      	ldr	r2, [r7, #32]
2400be64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400be66:	68fb      	ldr	r3, [r7, #12]
2400be68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400be6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400be6c:	68fb      	ldr	r3, [r7, #12]
2400be6e:	4a23      	ldr	r2, [pc, #140]	; (2400befc <HAL_I2C_Mem_Write_IT+0x120>)
2400be70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400be72:	68fb      	ldr	r3, [r7, #12]
2400be74:	4a22      	ldr	r2, [pc, #136]	; (2400bf00 <HAL_I2C_Mem_Write_IT+0x124>)
2400be76:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400be78:	68fb      	ldr	r3, [r7, #12]
2400be7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400be7c:	b29b      	uxth	r3, r3
2400be7e:	2bff      	cmp	r3, #255	; 0xff
2400be80:	d906      	bls.n	2400be90 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400be82:	68fb      	ldr	r3, [r7, #12]
2400be84:	22ff      	movs	r2, #255	; 0xff
2400be86:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400be88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400be8c:	617b      	str	r3, [r7, #20]
2400be8e:	e007      	b.n	2400bea0 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400be90:	68fb      	ldr	r3, [r7, #12]
2400be92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400be94:	b29a      	uxth	r2, r3
2400be96:	68fb      	ldr	r3, [r7, #12]
2400be98:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400be9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400be9e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400bea0:	88f8      	ldrh	r0, [r7, #6]
2400bea2:	893a      	ldrh	r2, [r7, #8]
2400bea4:	8979      	ldrh	r1, [r7, #10]
2400bea6:	693b      	ldr	r3, [r7, #16]
2400bea8:	9301      	str	r3, [sp, #4]
2400beaa:	2319      	movs	r3, #25
2400beac:	9300      	str	r3, [sp, #0]
2400beae:	4603      	mov	r3, r0
2400beb0:	68f8      	ldr	r0, [r7, #12]
2400beb2:	f002 f929 	bl	2400e108 <I2C_RequestMemoryWrite>
2400beb6:	4603      	mov	r3, r0
2400beb8:	2b00      	cmp	r3, #0
2400beba:	d005      	beq.n	2400bec8 <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bebc:	68fb      	ldr	r3, [r7, #12]
2400bebe:	2200      	movs	r2, #0
2400bec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bec4:	2301      	movs	r3, #1
2400bec6:	e014      	b.n	2400bef2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400bec8:	68fb      	ldr	r3, [r7, #12]
2400beca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400becc:	b2da      	uxtb	r2, r3
2400bece:	8979      	ldrh	r1, [r7, #10]
2400bed0:	2300      	movs	r3, #0
2400bed2:	9300      	str	r3, [sp, #0]
2400bed4:	697b      	ldr	r3, [r7, #20]
2400bed6:	68f8      	ldr	r0, [r7, #12]
2400bed8:	f003 fbf4 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bedc:	68fb      	ldr	r3, [r7, #12]
2400bede:	2200      	movs	r2, #0
2400bee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400bee4:	2101      	movs	r1, #1
2400bee6:	68f8      	ldr	r0, [r7, #12]
2400bee8:	f003 fc1e 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400beec:	2300      	movs	r3, #0
2400beee:	e000      	b.n	2400bef2 <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400bef0:	2302      	movs	r3, #2
  }
}
2400bef2:	4618      	mov	r0, r3
2400bef4:	3718      	adds	r7, #24
2400bef6:	46bd      	mov	sp, r7
2400bef8:	bd80      	pop	{r7, pc}
2400befa:	bf00      	nop
2400befc:	ffff0000 	.word	0xffff0000
2400bf00:	2400d707 	.word	0x2400d707

2400bf04 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400bf04:	b580      	push	{r7, lr}
2400bf06:	b088      	sub	sp, #32
2400bf08:	af02      	add	r7, sp, #8
2400bf0a:	60f8      	str	r0, [r7, #12]
2400bf0c:	4608      	mov	r0, r1
2400bf0e:	4611      	mov	r1, r2
2400bf10:	461a      	mov	r2, r3
2400bf12:	4603      	mov	r3, r0
2400bf14:	817b      	strh	r3, [r7, #10]
2400bf16:	460b      	mov	r3, r1
2400bf18:	813b      	strh	r3, [r7, #8]
2400bf1a:	4613      	mov	r3, r2
2400bf1c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bf1e:	68fb      	ldr	r3, [r7, #12]
2400bf20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bf24:	b2db      	uxtb	r3, r3
2400bf26:	2b20      	cmp	r3, #32
2400bf28:	d176      	bne.n	2400c018 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400bf2a:	6a3b      	ldr	r3, [r7, #32]
2400bf2c:	2b00      	cmp	r3, #0
2400bf2e:	d002      	beq.n	2400bf36 <HAL_I2C_Mem_Read_IT+0x32>
2400bf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400bf32:	2b00      	cmp	r3, #0
2400bf34:	d105      	bne.n	2400bf42 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bf36:	68fb      	ldr	r3, [r7, #12]
2400bf38:	f44f 7200 	mov.w	r2, #512	; 0x200
2400bf3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400bf3e:	2301      	movs	r3, #1
2400bf40:	e06b      	b.n	2400c01a <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bf42:	68fb      	ldr	r3, [r7, #12]
2400bf44:	681b      	ldr	r3, [r3, #0]
2400bf46:	699b      	ldr	r3, [r3, #24]
2400bf48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400bf4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bf50:	d101      	bne.n	2400bf56 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2400bf52:	2302      	movs	r3, #2
2400bf54:	e061      	b.n	2400c01a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bf56:	68fb      	ldr	r3, [r7, #12]
2400bf58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bf5c:	2b01      	cmp	r3, #1
2400bf5e:	d101      	bne.n	2400bf64 <HAL_I2C_Mem_Read_IT+0x60>
2400bf60:	2302      	movs	r3, #2
2400bf62:	e05a      	b.n	2400c01a <HAL_I2C_Mem_Read_IT+0x116>
2400bf64:	68fb      	ldr	r3, [r7, #12]
2400bf66:	2201      	movs	r2, #1
2400bf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400bf6c:	f7f6 f95a 	bl	24002224 <HAL_GetTick>
2400bf70:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400bf72:	68fb      	ldr	r3, [r7, #12]
2400bf74:	2222      	movs	r2, #34	; 0x22
2400bf76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400bf7a:	68fb      	ldr	r3, [r7, #12]
2400bf7c:	2240      	movs	r2, #64	; 0x40
2400bf7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400bf82:	68fb      	ldr	r3, [r7, #12]
2400bf84:	2200      	movs	r2, #0
2400bf86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bf88:	68fb      	ldr	r3, [r7, #12]
2400bf8a:	6a3a      	ldr	r2, [r7, #32]
2400bf8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bf8e:	68fb      	ldr	r3, [r7, #12]
2400bf90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400bf92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400bf94:	68fb      	ldr	r3, [r7, #12]
2400bf96:	4a23      	ldr	r2, [pc, #140]	; (2400c024 <HAL_I2C_Mem_Read_IT+0x120>)
2400bf98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400bf9a:	68fb      	ldr	r3, [r7, #12]
2400bf9c:	4a22      	ldr	r2, [pc, #136]	; (2400c028 <HAL_I2C_Mem_Read_IT+0x124>)
2400bf9e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bfa0:	68fb      	ldr	r3, [r7, #12]
2400bfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bfa4:	b29b      	uxth	r3, r3
2400bfa6:	2bff      	cmp	r3, #255	; 0xff
2400bfa8:	d906      	bls.n	2400bfb8 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bfaa:	68fb      	ldr	r3, [r7, #12]
2400bfac:	22ff      	movs	r2, #255	; 0xff
2400bfae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bfb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bfb4:	617b      	str	r3, [r7, #20]
2400bfb6:	e007      	b.n	2400bfc8 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bfb8:	68fb      	ldr	r3, [r7, #12]
2400bfba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bfbc:	b29a      	uxth	r2, r3
2400bfbe:	68fb      	ldr	r3, [r7, #12]
2400bfc0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400bfc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bfc6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400bfc8:	88f8      	ldrh	r0, [r7, #6]
2400bfca:	893a      	ldrh	r2, [r7, #8]
2400bfcc:	8979      	ldrh	r1, [r7, #10]
2400bfce:	693b      	ldr	r3, [r7, #16]
2400bfd0:	9301      	str	r3, [sp, #4]
2400bfd2:	2319      	movs	r3, #25
2400bfd4:	9300      	str	r3, [sp, #0]
2400bfd6:	4603      	mov	r3, r0
2400bfd8:	68f8      	ldr	r0, [r7, #12]
2400bfda:	f002 f8e9 	bl	2400e1b0 <I2C_RequestMemoryRead>
2400bfde:	4603      	mov	r3, r0
2400bfe0:	2b00      	cmp	r3, #0
2400bfe2:	d005      	beq.n	2400bff0 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bfe4:	68fb      	ldr	r3, [r7, #12]
2400bfe6:	2200      	movs	r2, #0
2400bfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bfec:	2301      	movs	r3, #1
2400bfee:	e014      	b.n	2400c01a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400bff0:	68fb      	ldr	r3, [r7, #12]
2400bff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bff4:	b2da      	uxtb	r2, r3
2400bff6:	8979      	ldrh	r1, [r7, #10]
2400bff8:	4b0c      	ldr	r3, [pc, #48]	; (2400c02c <HAL_I2C_Mem_Read_IT+0x128>)
2400bffa:	9300      	str	r3, [sp, #0]
2400bffc:	697b      	ldr	r3, [r7, #20]
2400bffe:	68f8      	ldr	r0, [r7, #12]
2400c000:	f003 fb60 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c004:	68fb      	ldr	r3, [r7, #12]
2400c006:	2200      	movs	r2, #0
2400c008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c00c:	2102      	movs	r1, #2
2400c00e:	68f8      	ldr	r0, [r7, #12]
2400c010:	f003 fb8a 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400c014:	2300      	movs	r3, #0
2400c016:	e000      	b.n	2400c01a <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400c018:	2302      	movs	r3, #2
  }
}
2400c01a:	4618      	mov	r0, r3
2400c01c:	3718      	adds	r7, #24
2400c01e:	46bd      	mov	sp, r7
2400c020:	bd80      	pop	{r7, pc}
2400c022:	bf00      	nop
2400c024:	ffff0000 	.word	0xffff0000
2400c028:	2400d707 	.word	0x2400d707
2400c02c:	80002400 	.word	0x80002400

2400c030 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c030:	b580      	push	{r7, lr}
2400c032:	b08a      	sub	sp, #40	; 0x28
2400c034:	af02      	add	r7, sp, #8
2400c036:	60f8      	str	r0, [r7, #12]
2400c038:	4608      	mov	r0, r1
2400c03a:	4611      	mov	r1, r2
2400c03c:	461a      	mov	r2, r3
2400c03e:	4603      	mov	r3, r0
2400c040:	817b      	strh	r3, [r7, #10]
2400c042:	460b      	mov	r3, r1
2400c044:	813b      	strh	r3, [r7, #8]
2400c046:	4613      	mov	r3, r2
2400c048:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c04a:	68fb      	ldr	r3, [r7, #12]
2400c04c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c050:	b2db      	uxtb	r3, r3
2400c052:	2b20      	cmp	r3, #32
2400c054:	f040 80d5 	bne.w	2400c202 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c05a:	2b00      	cmp	r3, #0
2400c05c:	d002      	beq.n	2400c064 <HAL_I2C_Mem_Write_DMA+0x34>
2400c05e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400c060:	2b00      	cmp	r3, #0
2400c062:	d105      	bne.n	2400c070 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c064:	68fb      	ldr	r3, [r7, #12]
2400c066:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c06a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c06c:	2301      	movs	r3, #1
2400c06e:	e0c9      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c070:	68fb      	ldr	r3, [r7, #12]
2400c072:	681b      	ldr	r3, [r3, #0]
2400c074:	699b      	ldr	r3, [r3, #24]
2400c076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c07e:	d101      	bne.n	2400c084 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2400c080:	2302      	movs	r3, #2
2400c082:	e0bf      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c084:	68fb      	ldr	r3, [r7, #12]
2400c086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c08a:	2b01      	cmp	r3, #1
2400c08c:	d101      	bne.n	2400c092 <HAL_I2C_Mem_Write_DMA+0x62>
2400c08e:	2302      	movs	r3, #2
2400c090:	e0b8      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
2400c092:	68fb      	ldr	r3, [r7, #12]
2400c094:	2201      	movs	r2, #1
2400c096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400c09a:	f7f6 f8c3 	bl	24002224 <HAL_GetTick>
2400c09e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c0a0:	68fb      	ldr	r3, [r7, #12]
2400c0a2:	2221      	movs	r2, #33	; 0x21
2400c0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c0a8:	68fb      	ldr	r3, [r7, #12]
2400c0aa:	2240      	movs	r2, #64	; 0x40
2400c0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c0b0:	68fb      	ldr	r3, [r7, #12]
2400c0b2:	2200      	movs	r2, #0
2400c0b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c0b6:	68fb      	ldr	r3, [r7, #12]
2400c0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400c0ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c0bc:	68fb      	ldr	r3, [r7, #12]
2400c0be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400c0c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c0c2:	68fb      	ldr	r3, [r7, #12]
2400c0c4:	4a51      	ldr	r2, [pc, #324]	; (2400c20c <HAL_I2C_Mem_Write_DMA+0x1dc>)
2400c0c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c0c8:	68fb      	ldr	r3, [r7, #12]
2400c0ca:	4a51      	ldr	r2, [pc, #324]	; (2400c210 <HAL_I2C_Mem_Write_DMA+0x1e0>)
2400c0cc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c0ce:	68fb      	ldr	r3, [r7, #12]
2400c0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c0d2:	b29b      	uxth	r3, r3
2400c0d4:	2bff      	cmp	r3, #255	; 0xff
2400c0d6:	d906      	bls.n	2400c0e6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c0d8:	68fb      	ldr	r3, [r7, #12]
2400c0da:	22ff      	movs	r2, #255	; 0xff
2400c0dc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c0de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c0e2:	61fb      	str	r3, [r7, #28]
2400c0e4:	e007      	b.n	2400c0f6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c0e6:	68fb      	ldr	r3, [r7, #12]
2400c0e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c0ea:	b29a      	uxth	r2, r3
2400c0ec:	68fb      	ldr	r3, [r7, #12]
2400c0ee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400c0f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c0f4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400c0f6:	88f8      	ldrh	r0, [r7, #6]
2400c0f8:	893a      	ldrh	r2, [r7, #8]
2400c0fa:	8979      	ldrh	r1, [r7, #10]
2400c0fc:	69bb      	ldr	r3, [r7, #24]
2400c0fe:	9301      	str	r3, [sp, #4]
2400c100:	2319      	movs	r3, #25
2400c102:	9300      	str	r3, [sp, #0]
2400c104:	4603      	mov	r3, r0
2400c106:	68f8      	ldr	r0, [r7, #12]
2400c108:	f001 fffe 	bl	2400e108 <I2C_RequestMemoryWrite>
2400c10c:	4603      	mov	r3, r0
2400c10e:	2b00      	cmp	r3, #0
2400c110:	d005      	beq.n	2400c11e <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c112:	68fb      	ldr	r3, [r7, #12]
2400c114:	2200      	movs	r2, #0
2400c116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c11a:	2301      	movs	r3, #1
2400c11c:	e072      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
2400c11e:	68fb      	ldr	r3, [r7, #12]
2400c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c122:	2b00      	cmp	r3, #0
2400c124:	d020      	beq.n	2400c168 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400c126:	68fb      	ldr	r3, [r7, #12]
2400c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c12a:	4a3a      	ldr	r2, [pc, #232]	; (2400c214 <HAL_I2C_Mem_Write_DMA+0x1e4>)
2400c12c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c12e:	68fb      	ldr	r3, [r7, #12]
2400c130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c132:	4a39      	ldr	r2, [pc, #228]	; (2400c218 <HAL_I2C_Mem_Write_DMA+0x1e8>)
2400c134:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c136:	68fb      	ldr	r3, [r7, #12]
2400c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c13a:	2200      	movs	r2, #0
2400c13c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400c13e:	68fb      	ldr	r3, [r7, #12]
2400c140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c142:	2200      	movs	r2, #0
2400c144:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c146:	68fb      	ldr	r3, [r7, #12]
2400c148:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400c14c:	68fb      	ldr	r3, [r7, #12]
2400c14e:	681b      	ldr	r3, [r3, #0]
2400c150:	3328      	adds	r3, #40	; 0x28
2400c152:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400c154:	68fb      	ldr	r3, [r7, #12]
2400c156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c158:	f7f7 fdfe 	bl	24003d58 <HAL_DMA_Start_IT>
2400c15c:	4603      	mov	r3, r0
2400c15e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c160:	7dfb      	ldrb	r3, [r7, #23]
2400c162:	2b00      	cmp	r3, #0
2400c164:	d139      	bne.n	2400c1da <HAL_I2C_Mem_Write_DMA+0x1aa>
2400c166:	e013      	b.n	2400c190 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c168:	68fb      	ldr	r3, [r7, #12]
2400c16a:	2220      	movs	r2, #32
2400c16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c170:	68fb      	ldr	r3, [r7, #12]
2400c172:	2200      	movs	r2, #0
2400c174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c178:	68fb      	ldr	r3, [r7, #12]
2400c17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c17c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c180:	68fb      	ldr	r3, [r7, #12]
2400c182:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c184:	68fb      	ldr	r3, [r7, #12]
2400c186:	2200      	movs	r2, #0
2400c188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c18c:	2301      	movs	r3, #1
2400c18e:	e039      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400c190:	68fb      	ldr	r3, [r7, #12]
2400c192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c194:	b2da      	uxtb	r2, r3
2400c196:	8979      	ldrh	r1, [r7, #10]
2400c198:	2300      	movs	r3, #0
2400c19a:	9300      	str	r3, [sp, #0]
2400c19c:	69fb      	ldr	r3, [r7, #28]
2400c19e:	68f8      	ldr	r0, [r7, #12]
2400c1a0:	f003 fa90 	bl	2400f6c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400c1a4:	68fb      	ldr	r3, [r7, #12]
2400c1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c1a8:	b29a      	uxth	r2, r3
2400c1aa:	68fb      	ldr	r3, [r7, #12]
2400c1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c1ae:	1ad3      	subs	r3, r2, r3
2400c1b0:	b29a      	uxth	r2, r3
2400c1b2:	68fb      	ldr	r3, [r7, #12]
2400c1b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c1b6:	68fb      	ldr	r3, [r7, #12]
2400c1b8:	2200      	movs	r2, #0
2400c1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c1be:	2110      	movs	r1, #16
2400c1c0:	68f8      	ldr	r0, [r7, #12]
2400c1c2:	f003 fab1 	bl	2400f728 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c1c6:	68fb      	ldr	r3, [r7, #12]
2400c1c8:	681b      	ldr	r3, [r3, #0]
2400c1ca:	681a      	ldr	r2, [r3, #0]
2400c1cc:	68fb      	ldr	r3, [r7, #12]
2400c1ce:	681b      	ldr	r3, [r3, #0]
2400c1d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c1d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400c1d6:	2300      	movs	r3, #0
2400c1d8:	e014      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c1da:	68fb      	ldr	r3, [r7, #12]
2400c1dc:	2220      	movs	r2, #32
2400c1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c1e2:	68fb      	ldr	r3, [r7, #12]
2400c1e4:	2200      	movs	r2, #0
2400c1e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c1ea:	68fb      	ldr	r3, [r7, #12]
2400c1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c1ee:	f043 0210 	orr.w	r2, r3, #16
2400c1f2:	68fb      	ldr	r3, [r7, #12]
2400c1f4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c1f6:	68fb      	ldr	r3, [r7, #12]
2400c1f8:	2200      	movs	r2, #0
2400c1fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c1fe:	2301      	movs	r3, #1
2400c200:	e000      	b.n	2400c204 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400c202:	2302      	movs	r3, #2
  }
}
2400c204:	4618      	mov	r0, r3
2400c206:	3720      	adds	r7, #32
2400c208:	46bd      	mov	sp, r7
2400c20a:	bd80      	pop	{r7, pc}
2400c20c:	ffff0000 	.word	0xffff0000
2400c210:	2400db5d 	.word	0x2400db5d
2400c214:	2400ecff 	.word	0x2400ecff
2400c218:	2400efd1 	.word	0x2400efd1

2400c21c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c21c:	b580      	push	{r7, lr}
2400c21e:	b08a      	sub	sp, #40	; 0x28
2400c220:	af02      	add	r7, sp, #8
2400c222:	60f8      	str	r0, [r7, #12]
2400c224:	4608      	mov	r0, r1
2400c226:	4611      	mov	r1, r2
2400c228:	461a      	mov	r2, r3
2400c22a:	4603      	mov	r3, r0
2400c22c:	817b      	strh	r3, [r7, #10]
2400c22e:	460b      	mov	r3, r1
2400c230:	813b      	strh	r3, [r7, #8]
2400c232:	4613      	mov	r3, r2
2400c234:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c236:	68fb      	ldr	r3, [r7, #12]
2400c238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c23c:	b2db      	uxtb	r3, r3
2400c23e:	2b20      	cmp	r3, #32
2400c240:	f040 80d5 	bne.w	2400c3ee <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c246:	2b00      	cmp	r3, #0
2400c248:	d002      	beq.n	2400c250 <HAL_I2C_Mem_Read_DMA+0x34>
2400c24a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400c24c:	2b00      	cmp	r3, #0
2400c24e:	d105      	bne.n	2400c25c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c250:	68fb      	ldr	r3, [r7, #12]
2400c252:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c258:	2301      	movs	r3, #1
2400c25a:	e0c9      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c25c:	68fb      	ldr	r3, [r7, #12]
2400c25e:	681b      	ldr	r3, [r3, #0]
2400c260:	699b      	ldr	r3, [r3, #24]
2400c262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c26a:	d101      	bne.n	2400c270 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2400c26c:	2302      	movs	r3, #2
2400c26e:	e0bf      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c270:	68fb      	ldr	r3, [r7, #12]
2400c272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c276:	2b01      	cmp	r3, #1
2400c278:	d101      	bne.n	2400c27e <HAL_I2C_Mem_Read_DMA+0x62>
2400c27a:	2302      	movs	r3, #2
2400c27c:	e0b8      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
2400c27e:	68fb      	ldr	r3, [r7, #12]
2400c280:	2201      	movs	r2, #1
2400c282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400c286:	f7f5 ffcd 	bl	24002224 <HAL_GetTick>
2400c28a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c28c:	68fb      	ldr	r3, [r7, #12]
2400c28e:	2222      	movs	r2, #34	; 0x22
2400c290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c294:	68fb      	ldr	r3, [r7, #12]
2400c296:	2240      	movs	r2, #64	; 0x40
2400c298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c29c:	68fb      	ldr	r3, [r7, #12]
2400c29e:	2200      	movs	r2, #0
2400c2a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c2a2:	68fb      	ldr	r3, [r7, #12]
2400c2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400c2a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c2a8:	68fb      	ldr	r3, [r7, #12]
2400c2aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400c2ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c2ae:	68fb      	ldr	r3, [r7, #12]
2400c2b0:	4a51      	ldr	r2, [pc, #324]	; (2400c3f8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
2400c2b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c2b4:	68fb      	ldr	r3, [r7, #12]
2400c2b6:	4a51      	ldr	r2, [pc, #324]	; (2400c3fc <HAL_I2C_Mem_Read_DMA+0x1e0>)
2400c2b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c2ba:	68fb      	ldr	r3, [r7, #12]
2400c2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c2be:	b29b      	uxth	r3, r3
2400c2c0:	2bff      	cmp	r3, #255	; 0xff
2400c2c2:	d906      	bls.n	2400c2d2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c2c4:	68fb      	ldr	r3, [r7, #12]
2400c2c6:	22ff      	movs	r2, #255	; 0xff
2400c2c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c2ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c2ce:	61fb      	str	r3, [r7, #28]
2400c2d0:	e007      	b.n	2400c2e2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c2d2:	68fb      	ldr	r3, [r7, #12]
2400c2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c2d6:	b29a      	uxth	r2, r3
2400c2d8:	68fb      	ldr	r3, [r7, #12]
2400c2da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400c2dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c2e0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400c2e2:	88f8      	ldrh	r0, [r7, #6]
2400c2e4:	893a      	ldrh	r2, [r7, #8]
2400c2e6:	8979      	ldrh	r1, [r7, #10]
2400c2e8:	69bb      	ldr	r3, [r7, #24]
2400c2ea:	9301      	str	r3, [sp, #4]
2400c2ec:	2319      	movs	r3, #25
2400c2ee:	9300      	str	r3, [sp, #0]
2400c2f0:	4603      	mov	r3, r0
2400c2f2:	68f8      	ldr	r0, [r7, #12]
2400c2f4:	f001 ff5c 	bl	2400e1b0 <I2C_RequestMemoryRead>
2400c2f8:	4603      	mov	r3, r0
2400c2fa:	2b00      	cmp	r3, #0
2400c2fc:	d005      	beq.n	2400c30a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c2fe:	68fb      	ldr	r3, [r7, #12]
2400c300:	2200      	movs	r2, #0
2400c302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c306:	2301      	movs	r3, #1
2400c308:	e072      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
2400c30a:	68fb      	ldr	r3, [r7, #12]
2400c30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c30e:	2b00      	cmp	r3, #0
2400c310:	d020      	beq.n	2400c354 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400c312:	68fb      	ldr	r3, [r7, #12]
2400c314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c316:	4a3a      	ldr	r2, [pc, #232]	; (2400c400 <HAL_I2C_Mem_Read_DMA+0x1e4>)
2400c318:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c31a:	68fb      	ldr	r3, [r7, #12]
2400c31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c31e:	4a39      	ldr	r2, [pc, #228]	; (2400c404 <HAL_I2C_Mem_Read_DMA+0x1e8>)
2400c320:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c322:	68fb      	ldr	r3, [r7, #12]
2400c324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c326:	2200      	movs	r2, #0
2400c328:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400c32a:	68fb      	ldr	r3, [r7, #12]
2400c32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c32e:	2200      	movs	r2, #0
2400c330:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c332:	68fb      	ldr	r3, [r7, #12]
2400c334:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400c336:	68fb      	ldr	r3, [r7, #12]
2400c338:	681b      	ldr	r3, [r3, #0]
2400c33a:	3324      	adds	r3, #36	; 0x24
2400c33c:	4619      	mov	r1, r3
2400c33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
2400c340:	68fb      	ldr	r3, [r7, #12]
2400c342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c344:	f7f7 fd08 	bl	24003d58 <HAL_DMA_Start_IT>
2400c348:	4603      	mov	r3, r0
2400c34a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c34c:	7dfb      	ldrb	r3, [r7, #23]
2400c34e:	2b00      	cmp	r3, #0
2400c350:	d139      	bne.n	2400c3c6 <HAL_I2C_Mem_Read_DMA+0x1aa>
2400c352:	e013      	b.n	2400c37c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c354:	68fb      	ldr	r3, [r7, #12]
2400c356:	2220      	movs	r2, #32
2400c358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c35c:	68fb      	ldr	r3, [r7, #12]
2400c35e:	2200      	movs	r2, #0
2400c360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c364:	68fb      	ldr	r3, [r7, #12]
2400c366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c36c:	68fb      	ldr	r3, [r7, #12]
2400c36e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c370:	68fb      	ldr	r3, [r7, #12]
2400c372:	2200      	movs	r2, #0
2400c374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c378:	2301      	movs	r3, #1
2400c37a:	e039      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400c37c:	68fb      	ldr	r3, [r7, #12]
2400c37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c380:	b2da      	uxtb	r2, r3
2400c382:	8979      	ldrh	r1, [r7, #10]
2400c384:	4b20      	ldr	r3, [pc, #128]	; (2400c408 <HAL_I2C_Mem_Read_DMA+0x1ec>)
2400c386:	9300      	str	r3, [sp, #0]
2400c388:	69fb      	ldr	r3, [r7, #28]
2400c38a:	68f8      	ldr	r0, [r7, #12]
2400c38c:	f003 f99a 	bl	2400f6c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400c390:	68fb      	ldr	r3, [r7, #12]
2400c392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c394:	b29a      	uxth	r2, r3
2400c396:	68fb      	ldr	r3, [r7, #12]
2400c398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c39a:	1ad3      	subs	r3, r2, r3
2400c39c:	b29a      	uxth	r2, r3
2400c39e:	68fb      	ldr	r3, [r7, #12]
2400c3a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c3a2:	68fb      	ldr	r3, [r7, #12]
2400c3a4:	2200      	movs	r2, #0
2400c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c3aa:	2110      	movs	r1, #16
2400c3ac:	68f8      	ldr	r0, [r7, #12]
2400c3ae:	f003 f9bb 	bl	2400f728 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c3b2:	68fb      	ldr	r3, [r7, #12]
2400c3b4:	681b      	ldr	r3, [r3, #0]
2400c3b6:	681a      	ldr	r2, [r3, #0]
2400c3b8:	68fb      	ldr	r3, [r7, #12]
2400c3ba:	681b      	ldr	r3, [r3, #0]
2400c3bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400c3c0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400c3c2:	2300      	movs	r3, #0
2400c3c4:	e014      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c3c6:	68fb      	ldr	r3, [r7, #12]
2400c3c8:	2220      	movs	r2, #32
2400c3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c3ce:	68fb      	ldr	r3, [r7, #12]
2400c3d0:	2200      	movs	r2, #0
2400c3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c3d6:	68fb      	ldr	r3, [r7, #12]
2400c3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c3da:	f043 0210 	orr.w	r2, r3, #16
2400c3de:	68fb      	ldr	r3, [r7, #12]
2400c3e0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c3e2:	68fb      	ldr	r3, [r7, #12]
2400c3e4:	2200      	movs	r2, #0
2400c3e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c3ea:	2301      	movs	r3, #1
2400c3ec:	e000      	b.n	2400c3f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400c3ee:	2302      	movs	r3, #2
  }
}
2400c3f0:	4618      	mov	r0, r3
2400c3f2:	3720      	adds	r7, #32
2400c3f4:	46bd      	mov	sp, r7
2400c3f6:	bd80      	pop	{r7, pc}
2400c3f8:	ffff0000 	.word	0xffff0000
2400c3fc:	2400db5d 	.word	0x2400db5d
2400c400:	2400edd5 	.word	0x2400edd5
2400c404:	2400efd1 	.word	0x2400efd1
2400c408:	80002400 	.word	0x80002400

2400c40c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400c40c:	b580      	push	{r7, lr}
2400c40e:	b08a      	sub	sp, #40	; 0x28
2400c410:	af02      	add	r7, sp, #8
2400c412:	60f8      	str	r0, [r7, #12]
2400c414:	607a      	str	r2, [r7, #4]
2400c416:	603b      	str	r3, [r7, #0]
2400c418:	460b      	mov	r3, r1
2400c41a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400c41c:	2300      	movs	r3, #0
2400c41e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c420:	68fb      	ldr	r3, [r7, #12]
2400c422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c426:	b2db      	uxtb	r3, r3
2400c428:	2b20      	cmp	r3, #32
2400c42a:	f040 80ef 	bne.w	2400c60c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c42e:	68fb      	ldr	r3, [r7, #12]
2400c430:	681b      	ldr	r3, [r3, #0]
2400c432:	699b      	ldr	r3, [r3, #24]
2400c434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c43c:	d101      	bne.n	2400c442 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2400c43e:	2302      	movs	r3, #2
2400c440:	e0e5      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c442:	68fb      	ldr	r3, [r7, #12]
2400c444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c448:	2b01      	cmp	r3, #1
2400c44a:	d101      	bne.n	2400c450 <HAL_I2C_IsDeviceReady+0x44>
2400c44c:	2302      	movs	r3, #2
2400c44e:	e0de      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
2400c450:	68fb      	ldr	r3, [r7, #12]
2400c452:	2201      	movs	r2, #1
2400c454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400c458:	68fb      	ldr	r3, [r7, #12]
2400c45a:	2224      	movs	r2, #36	; 0x24
2400c45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c460:	68fb      	ldr	r3, [r7, #12]
2400c462:	2200      	movs	r2, #0
2400c464:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2400c466:	68fb      	ldr	r3, [r7, #12]
2400c468:	68db      	ldr	r3, [r3, #12]
2400c46a:	2b01      	cmp	r3, #1
2400c46c:	d105      	bne.n	2400c47a <HAL_I2C_IsDeviceReady+0x6e>
2400c46e:	897b      	ldrh	r3, [r7, #10]
2400c470:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400c474:	4b68      	ldr	r3, [pc, #416]	; (2400c618 <HAL_I2C_IsDeviceReady+0x20c>)
2400c476:	4313      	orrs	r3, r2
2400c478:	e004      	b.n	2400c484 <HAL_I2C_IsDeviceReady+0x78>
2400c47a:	897b      	ldrh	r3, [r7, #10]
2400c47c:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400c480:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
2400c484:	68fa      	ldr	r2, [r7, #12]
2400c486:	6812      	ldr	r2, [r2, #0]
2400c488:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2400c48a:	f7f5 fecb 	bl	24002224 <HAL_GetTick>
2400c48e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400c490:	68fb      	ldr	r3, [r7, #12]
2400c492:	681b      	ldr	r3, [r3, #0]
2400c494:	699b      	ldr	r3, [r3, #24]
2400c496:	f003 0320 	and.w	r3, r3, #32
2400c49a:	2b20      	cmp	r3, #32
2400c49c:	bf0c      	ite	eq
2400c49e:	2301      	moveq	r3, #1
2400c4a0:	2300      	movne	r3, #0
2400c4a2:	b2db      	uxtb	r3, r3
2400c4a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400c4a6:	68fb      	ldr	r3, [r7, #12]
2400c4a8:	681b      	ldr	r3, [r3, #0]
2400c4aa:	699b      	ldr	r3, [r3, #24]
2400c4ac:	f003 0310 	and.w	r3, r3, #16
2400c4b0:	2b10      	cmp	r3, #16
2400c4b2:	bf0c      	ite	eq
2400c4b4:	2301      	moveq	r3, #1
2400c4b6:	2300      	movne	r3, #0
2400c4b8:	b2db      	uxtb	r3, r3
2400c4ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400c4bc:	e034      	b.n	2400c528 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400c4be:	683b      	ldr	r3, [r7, #0]
2400c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
2400c4c4:	d01a      	beq.n	2400c4fc <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400c4c6:	f7f5 fead 	bl	24002224 <HAL_GetTick>
2400c4ca:	4602      	mov	r2, r0
2400c4cc:	69bb      	ldr	r3, [r7, #24]
2400c4ce:	1ad3      	subs	r3, r2, r3
2400c4d0:	683a      	ldr	r2, [r7, #0]
2400c4d2:	429a      	cmp	r2, r3
2400c4d4:	d302      	bcc.n	2400c4dc <HAL_I2C_IsDeviceReady+0xd0>
2400c4d6:	683b      	ldr	r3, [r7, #0]
2400c4d8:	2b00      	cmp	r3, #0
2400c4da:	d10f      	bne.n	2400c4fc <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400c4dc:	68fb      	ldr	r3, [r7, #12]
2400c4de:	2220      	movs	r2, #32
2400c4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400c4e4:	68fb      	ldr	r3, [r7, #12]
2400c4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c4e8:	f043 0220 	orr.w	r2, r3, #32
2400c4ec:	68fb      	ldr	r3, [r7, #12]
2400c4ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2400c4f0:	68fb      	ldr	r3, [r7, #12]
2400c4f2:	2200      	movs	r2, #0
2400c4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
2400c4f8:	2301      	movs	r3, #1
2400c4fa:	e088      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400c4fc:	68fb      	ldr	r3, [r7, #12]
2400c4fe:	681b      	ldr	r3, [r3, #0]
2400c500:	699b      	ldr	r3, [r3, #24]
2400c502:	f003 0320 	and.w	r3, r3, #32
2400c506:	2b20      	cmp	r3, #32
2400c508:	bf0c      	ite	eq
2400c50a:	2301      	moveq	r3, #1
2400c50c:	2300      	movne	r3, #0
2400c50e:	b2db      	uxtb	r3, r3
2400c510:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400c512:	68fb      	ldr	r3, [r7, #12]
2400c514:	681b      	ldr	r3, [r3, #0]
2400c516:	699b      	ldr	r3, [r3, #24]
2400c518:	f003 0310 	and.w	r3, r3, #16
2400c51c:	2b10      	cmp	r3, #16
2400c51e:	bf0c      	ite	eq
2400c520:	2301      	moveq	r3, #1
2400c522:	2300      	movne	r3, #0
2400c524:	b2db      	uxtb	r3, r3
2400c526:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2400c528:	7ffb      	ldrb	r3, [r7, #31]
2400c52a:	2b00      	cmp	r3, #0
2400c52c:	d102      	bne.n	2400c534 <HAL_I2C_IsDeviceReady+0x128>
2400c52e:	7fbb      	ldrb	r3, [r7, #30]
2400c530:	2b00      	cmp	r3, #0
2400c532:	d0c4      	beq.n	2400c4be <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2400c534:	68fb      	ldr	r3, [r7, #12]
2400c536:	681b      	ldr	r3, [r3, #0]
2400c538:	699b      	ldr	r3, [r3, #24]
2400c53a:	f003 0310 	and.w	r3, r3, #16
2400c53e:	2b10      	cmp	r3, #16
2400c540:	d01a      	beq.n	2400c578 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400c542:	69bb      	ldr	r3, [r7, #24]
2400c544:	9300      	str	r3, [sp, #0]
2400c546:	683b      	ldr	r3, [r7, #0]
2400c548:	2200      	movs	r2, #0
2400c54a:	2120      	movs	r1, #32
2400c54c:	68f8      	ldr	r0, [r7, #12]
2400c54e:	f002 fe97 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400c552:	4603      	mov	r3, r0
2400c554:	2b00      	cmp	r3, #0
2400c556:	d001      	beq.n	2400c55c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2400c558:	2301      	movs	r3, #1
2400c55a:	e058      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400c55c:	68fb      	ldr	r3, [r7, #12]
2400c55e:	681b      	ldr	r3, [r3, #0]
2400c560:	2220      	movs	r2, #32
2400c562:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2400c564:	68fb      	ldr	r3, [r7, #12]
2400c566:	2220      	movs	r2, #32
2400c568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c56c:	68fb      	ldr	r3, [r7, #12]
2400c56e:	2200      	movs	r2, #0
2400c570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
2400c574:	2300      	movs	r3, #0
2400c576:	e04a      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400c578:	69bb      	ldr	r3, [r7, #24]
2400c57a:	9300      	str	r3, [sp, #0]
2400c57c:	683b      	ldr	r3, [r7, #0]
2400c57e:	2200      	movs	r2, #0
2400c580:	2120      	movs	r1, #32
2400c582:	68f8      	ldr	r0, [r7, #12]
2400c584:	f002 fe7c 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400c588:	4603      	mov	r3, r0
2400c58a:	2b00      	cmp	r3, #0
2400c58c:	d001      	beq.n	2400c592 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2400c58e:	2301      	movs	r3, #1
2400c590:	e03d      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400c592:	68fb      	ldr	r3, [r7, #12]
2400c594:	681b      	ldr	r3, [r3, #0]
2400c596:	2210      	movs	r2, #16
2400c598:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400c59a:	68fb      	ldr	r3, [r7, #12]
2400c59c:	681b      	ldr	r3, [r3, #0]
2400c59e:	2220      	movs	r2, #32
2400c5a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
2400c5a2:	697b      	ldr	r3, [r7, #20]
2400c5a4:	687a      	ldr	r2, [r7, #4]
2400c5a6:	429a      	cmp	r2, r3
2400c5a8:	d118      	bne.n	2400c5dc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400c5aa:	68fb      	ldr	r3, [r7, #12]
2400c5ac:	681b      	ldr	r3, [r3, #0]
2400c5ae:	685a      	ldr	r2, [r3, #4]
2400c5b0:	68fb      	ldr	r3, [r7, #12]
2400c5b2:	681b      	ldr	r3, [r3, #0]
2400c5b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c5b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400c5ba:	69bb      	ldr	r3, [r7, #24]
2400c5bc:	9300      	str	r3, [sp, #0]
2400c5be:	683b      	ldr	r3, [r7, #0]
2400c5c0:	2200      	movs	r2, #0
2400c5c2:	2120      	movs	r1, #32
2400c5c4:	68f8      	ldr	r0, [r7, #12]
2400c5c6:	f002 fe5b 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400c5ca:	4603      	mov	r3, r0
2400c5cc:	2b00      	cmp	r3, #0
2400c5ce:	d001      	beq.n	2400c5d4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
2400c5d0:	2301      	movs	r3, #1
2400c5d2:	e01c      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400c5d4:	68fb      	ldr	r3, [r7, #12]
2400c5d6:	681b      	ldr	r3, [r3, #0]
2400c5d8:	2220      	movs	r2, #32
2400c5da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400c5dc:	697b      	ldr	r3, [r7, #20]
2400c5de:	3301      	adds	r3, #1
2400c5e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2400c5e2:	697b      	ldr	r3, [r7, #20]
2400c5e4:	687a      	ldr	r2, [r7, #4]
2400c5e6:	429a      	cmp	r2, r3
2400c5e8:	f63f af3d 	bhi.w	2400c466 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400c5ec:	68fb      	ldr	r3, [r7, #12]
2400c5ee:	2220      	movs	r2, #32
2400c5f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400c5f4:	68fb      	ldr	r3, [r7, #12]
2400c5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c5f8:	f043 0220 	orr.w	r2, r3, #32
2400c5fc:	68fb      	ldr	r3, [r7, #12]
2400c5fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c600:	68fb      	ldr	r3, [r7, #12]
2400c602:	2200      	movs	r2, #0
2400c604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
2400c608:	2301      	movs	r3, #1
2400c60a:	e000      	b.n	2400c60e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
2400c60c:	2302      	movs	r3, #2
  }
}
2400c60e:	4618      	mov	r0, r3
2400c610:	3720      	adds	r7, #32
2400c612:	46bd      	mov	sp, r7
2400c614:	bd80      	pop	{r7, pc}
2400c616:	bf00      	nop
2400c618:	02002000 	.word	0x02002000

2400c61c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400c61c:	b580      	push	{r7, lr}
2400c61e:	b088      	sub	sp, #32
2400c620:	af02      	add	r7, sp, #8
2400c622:	60f8      	str	r0, [r7, #12]
2400c624:	607a      	str	r2, [r7, #4]
2400c626:	461a      	mov	r2, r3
2400c628:	460b      	mov	r3, r1
2400c62a:	817b      	strh	r3, [r7, #10]
2400c62c:	4613      	mov	r3, r2
2400c62e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400c630:	4b3a      	ldr	r3, [pc, #232]	; (2400c71c <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
2400c632:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c634:	68fb      	ldr	r3, [r7, #12]
2400c636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c63a:	b2db      	uxtb	r3, r3
2400c63c:	2b20      	cmp	r3, #32
2400c63e:	d167      	bne.n	2400c710 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c640:	68fb      	ldr	r3, [r7, #12]
2400c642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c646:	2b01      	cmp	r3, #1
2400c648:	d101      	bne.n	2400c64e <HAL_I2C_Master_Seq_Transmit_IT+0x32>
2400c64a:	2302      	movs	r3, #2
2400c64c:	e061      	b.n	2400c712 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
2400c64e:	68fb      	ldr	r3, [r7, #12]
2400c650:	2201      	movs	r2, #1
2400c652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400c656:	68fb      	ldr	r3, [r7, #12]
2400c658:	2221      	movs	r2, #33	; 0x21
2400c65a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c65e:	68fb      	ldr	r3, [r7, #12]
2400c660:	2210      	movs	r2, #16
2400c662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c666:	68fb      	ldr	r3, [r7, #12]
2400c668:	2200      	movs	r2, #0
2400c66a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c66c:	68fb      	ldr	r3, [r7, #12]
2400c66e:	687a      	ldr	r2, [r7, #4]
2400c670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c672:	68fb      	ldr	r3, [r7, #12]
2400c674:	893a      	ldrh	r2, [r7, #8]
2400c676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c678:	68fb      	ldr	r3, [r7, #12]
2400c67a:	6a3a      	ldr	r2, [r7, #32]
2400c67c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400c67e:	68fb      	ldr	r3, [r7, #12]
2400c680:	4a27      	ldr	r2, [pc, #156]	; (2400c720 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
2400c682:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c684:	68fb      	ldr	r3, [r7, #12]
2400c686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c688:	b29b      	uxth	r3, r3
2400c68a:	2bff      	cmp	r3, #255	; 0xff
2400c68c:	d906      	bls.n	2400c69c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c68e:	68fb      	ldr	r3, [r7, #12]
2400c690:	22ff      	movs	r2, #255	; 0xff
2400c692:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c698:	617b      	str	r3, [r7, #20]
2400c69a:	e007      	b.n	2400c6ac <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c69c:	68fb      	ldr	r3, [r7, #12]
2400c69e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c6a0:	b29a      	uxth	r2, r3
2400c6a2:	68fb      	ldr	r3, [r7, #12]
2400c6a4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c6a6:	68fb      	ldr	r3, [r7, #12]
2400c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c6aa:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c6ac:	68fb      	ldr	r3, [r7, #12]
2400c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c6b0:	2b11      	cmp	r3, #17
2400c6b2:	d10e      	bne.n	2400c6d2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c6b4:	6a3b      	ldr	r3, [r7, #32]
2400c6b6:	2baa      	cmp	r3, #170	; 0xaa
2400c6b8:	d003      	beq.n	2400c6c2 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
2400c6ba:	6a3b      	ldr	r3, [r7, #32]
2400c6bc:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c6c0:	d101      	bne.n	2400c6c6 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
2400c6c2:	2301      	movs	r3, #1
2400c6c4:	e000      	b.n	2400c6c8 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2400c6c6:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c6c8:	2b00      	cmp	r3, #0
2400c6ca:	d102      	bne.n	2400c6d2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c6cc:	2300      	movs	r3, #0
2400c6ce:	613b      	str	r3, [r7, #16]
2400c6d0:	e00a      	b.n	2400c6e8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c6d2:	68f8      	ldr	r0, [r7, #12]
2400c6d4:	f003 f8ea 	bl	2400f8ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c6d8:	68fb      	ldr	r3, [r7, #12]
2400c6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c6dc:	b29b      	uxth	r3, r3
2400c6de:	2bff      	cmp	r3, #255	; 0xff
2400c6e0:	d802      	bhi.n	2400c6e8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400c6e2:	68fb      	ldr	r3, [r7, #12]
2400c6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c6e6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c6e8:	68fb      	ldr	r3, [r7, #12]
2400c6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c6ec:	b2da      	uxtb	r2, r3
2400c6ee:	8979      	ldrh	r1, [r7, #10]
2400c6f0:	693b      	ldr	r3, [r7, #16]
2400c6f2:	9300      	str	r3, [sp, #0]
2400c6f4:	697b      	ldr	r3, [r7, #20]
2400c6f6:	68f8      	ldr	r0, [r7, #12]
2400c6f8:	f002 ffe4 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c6fc:	68fb      	ldr	r3, [r7, #12]
2400c6fe:	2200      	movs	r2, #0
2400c700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c704:	2101      	movs	r1, #1
2400c706:	68f8      	ldr	r0, [r7, #12]
2400c708:	f003 f80e 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400c70c:	2300      	movs	r3, #0
2400c70e:	e000      	b.n	2400c712 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400c710:	2302      	movs	r3, #2
  }
}
2400c712:	4618      	mov	r0, r3
2400c714:	3718      	adds	r7, #24
2400c716:	46bd      	mov	sp, r7
2400c718:	bd80      	pop	{r7, pc}
2400c71a:	bf00      	nop
2400c71c:	80002000 	.word	0x80002000
2400c720:	2400d707 	.word	0x2400d707

2400c724 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2400c724:	b580      	push	{r7, lr}
2400c726:	b08a      	sub	sp, #40	; 0x28
2400c728:	af02      	add	r7, sp, #8
2400c72a:	60f8      	str	r0, [r7, #12]
2400c72c:	607a      	str	r2, [r7, #4]
2400c72e:	461a      	mov	r2, r3
2400c730:	460b      	mov	r3, r1
2400c732:	817b      	strh	r3, [r7, #10]
2400c734:	4613      	mov	r3, r2
2400c736:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400c738:	4b77      	ldr	r3, [pc, #476]	; (2400c918 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400c73a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c73c:	68fb      	ldr	r3, [r7, #12]
2400c73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c742:	b2db      	uxtb	r3, r3
2400c744:	2b20      	cmp	r3, #32
2400c746:	f040 80e1 	bne.w	2400c90c <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c74a:	68fb      	ldr	r3, [r7, #12]
2400c74c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c750:	2b01      	cmp	r3, #1
2400c752:	d101      	bne.n	2400c758 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
2400c754:	2302      	movs	r3, #2
2400c756:	e0da      	b.n	2400c90e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
2400c758:	68fb      	ldr	r3, [r7, #12]
2400c75a:	2201      	movs	r2, #1
2400c75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400c760:	68fb      	ldr	r3, [r7, #12]
2400c762:	2221      	movs	r2, #33	; 0x21
2400c764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c768:	68fb      	ldr	r3, [r7, #12]
2400c76a:	2210      	movs	r2, #16
2400c76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c770:	68fb      	ldr	r3, [r7, #12]
2400c772:	2200      	movs	r2, #0
2400c774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c776:	68fb      	ldr	r3, [r7, #12]
2400c778:	687a      	ldr	r2, [r7, #4]
2400c77a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c77c:	68fb      	ldr	r3, [r7, #12]
2400c77e:	893a      	ldrh	r2, [r7, #8]
2400c780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c782:	68fb      	ldr	r3, [r7, #12]
2400c784:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400c786:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c788:	68fb      	ldr	r3, [r7, #12]
2400c78a:	4a64      	ldr	r2, [pc, #400]	; (2400c91c <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
2400c78c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c78e:	68fb      	ldr	r3, [r7, #12]
2400c790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c792:	b29b      	uxth	r3, r3
2400c794:	2bff      	cmp	r3, #255	; 0xff
2400c796:	d906      	bls.n	2400c7a6 <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c798:	68fb      	ldr	r3, [r7, #12]
2400c79a:	22ff      	movs	r2, #255	; 0xff
2400c79c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c79e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c7a2:	61fb      	str	r3, [r7, #28]
2400c7a4:	e007      	b.n	2400c7b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c7a6:	68fb      	ldr	r3, [r7, #12]
2400c7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c7aa:	b29a      	uxth	r2, r3
2400c7ac:	68fb      	ldr	r3, [r7, #12]
2400c7ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c7b0:	68fb      	ldr	r3, [r7, #12]
2400c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c7b4:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c7b6:	68fb      	ldr	r3, [r7, #12]
2400c7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c7ba:	2b11      	cmp	r3, #17
2400c7bc:	d10e      	bne.n	2400c7dc <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c7c0:	2baa      	cmp	r3, #170	; 0xaa
2400c7c2:	d003      	beq.n	2400c7cc <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
2400c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c7c6:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c7ca:	d101      	bne.n	2400c7d0 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2400c7cc:	2301      	movs	r3, #1
2400c7ce:	e000      	b.n	2400c7d2 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
2400c7d0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c7d2:	2b00      	cmp	r3, #0
2400c7d4:	d102      	bne.n	2400c7dc <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c7d6:	2300      	movs	r3, #0
2400c7d8:	61bb      	str	r3, [r7, #24]
2400c7da:	e00a      	b.n	2400c7f2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c7dc:	68f8      	ldr	r0, [r7, #12]
2400c7de:	f003 f865 	bl	2400f8ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c7e2:	68fb      	ldr	r3, [r7, #12]
2400c7e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c7e6:	b29b      	uxth	r3, r3
2400c7e8:	2bff      	cmp	r3, #255	; 0xff
2400c7ea:	d802      	bhi.n	2400c7f2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400c7ec:	68fb      	ldr	r3, [r7, #12]
2400c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c7f0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400c7f2:	68fb      	ldr	r3, [r7, #12]
2400c7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c7f6:	2b00      	cmp	r3, #0
2400c7f8:	d070      	beq.n	2400c8dc <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
2400c7fa:	68fb      	ldr	r3, [r7, #12]
2400c7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c7fe:	2b00      	cmp	r3, #0
2400c800:	d020      	beq.n	2400c844 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400c802:	68fb      	ldr	r3, [r7, #12]
2400c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c806:	4a46      	ldr	r2, [pc, #280]	; (2400c920 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
2400c808:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c80a:	68fb      	ldr	r3, [r7, #12]
2400c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c80e:	4a45      	ldr	r2, [pc, #276]	; (2400c924 <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
2400c810:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c812:	68fb      	ldr	r3, [r7, #12]
2400c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c816:	2200      	movs	r2, #0
2400c818:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400c81a:	68fb      	ldr	r3, [r7, #12]
2400c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c81e:	2200      	movs	r2, #0
2400c820:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c822:	68fb      	ldr	r3, [r7, #12]
2400c824:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c826:	6879      	ldr	r1, [r7, #4]
2400c828:	68fb      	ldr	r3, [r7, #12]
2400c82a:	681b      	ldr	r3, [r3, #0]
2400c82c:	3328      	adds	r3, #40	; 0x28
2400c82e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400c830:	68fb      	ldr	r3, [r7, #12]
2400c832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c834:	f7f7 fa90 	bl	24003d58 <HAL_DMA_Start_IT>
2400c838:	4603      	mov	r3, r0
2400c83a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c83c:	7dfb      	ldrb	r3, [r7, #23]
2400c83e:	2b00      	cmp	r3, #0
2400c840:	d138      	bne.n	2400c8b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
2400c842:	e013      	b.n	2400c86c <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c844:	68fb      	ldr	r3, [r7, #12]
2400c846:	2220      	movs	r2, #32
2400c848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c84c:	68fb      	ldr	r3, [r7, #12]
2400c84e:	2200      	movs	r2, #0
2400c850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c854:	68fb      	ldr	r3, [r7, #12]
2400c856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c858:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c85c:	68fb      	ldr	r3, [r7, #12]
2400c85e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c860:	68fb      	ldr	r3, [r7, #12]
2400c862:	2200      	movs	r2, #0
2400c864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c868:	2301      	movs	r3, #1
2400c86a:	e050      	b.n	2400c90e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c86c:	68fb      	ldr	r3, [r7, #12]
2400c86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c870:	b2da      	uxtb	r2, r3
2400c872:	8979      	ldrh	r1, [r7, #10]
2400c874:	69bb      	ldr	r3, [r7, #24]
2400c876:	9300      	str	r3, [sp, #0]
2400c878:	69fb      	ldr	r3, [r7, #28]
2400c87a:	68f8      	ldr	r0, [r7, #12]
2400c87c:	f002 ff22 	bl	2400f6c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c880:	68fb      	ldr	r3, [r7, #12]
2400c882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c884:	b29a      	uxth	r2, r3
2400c886:	68fb      	ldr	r3, [r7, #12]
2400c888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c88a:	1ad3      	subs	r3, r2, r3
2400c88c:	b29a      	uxth	r2, r3
2400c88e:	68fb      	ldr	r3, [r7, #12]
2400c890:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c892:	68fb      	ldr	r3, [r7, #12]
2400c894:	2200      	movs	r2, #0
2400c896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c89a:	2110      	movs	r1, #16
2400c89c:	68f8      	ldr	r0, [r7, #12]
2400c89e:	f002 ff43 	bl	2400f728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c8a2:	68fb      	ldr	r3, [r7, #12]
2400c8a4:	681b      	ldr	r3, [r3, #0]
2400c8a6:	681a      	ldr	r2, [r3, #0]
2400c8a8:	68fb      	ldr	r3, [r7, #12]
2400c8aa:	681b      	ldr	r3, [r3, #0]
2400c8ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c8b0:	601a      	str	r2, [r3, #0]
2400c8b2:	e029      	b.n	2400c908 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c8b4:	68fb      	ldr	r3, [r7, #12]
2400c8b6:	2220      	movs	r2, #32
2400c8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c8bc:	68fb      	ldr	r3, [r7, #12]
2400c8be:	2200      	movs	r2, #0
2400c8c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c8c4:	68fb      	ldr	r3, [r7, #12]
2400c8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c8c8:	f043 0210 	orr.w	r2, r3, #16
2400c8cc:	68fb      	ldr	r3, [r7, #12]
2400c8ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c8d0:	68fb      	ldr	r3, [r7, #12]
2400c8d2:	2200      	movs	r2, #0
2400c8d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c8d8:	2301      	movs	r3, #1
2400c8da:	e018      	b.n	2400c90e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c8dc:	68fb      	ldr	r3, [r7, #12]
2400c8de:	4a12      	ldr	r2, [pc, #72]	; (2400c928 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
2400c8e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c8e2:	68fb      	ldr	r3, [r7, #12]
2400c8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c8e6:	b2da      	uxtb	r2, r3
2400c8e8:	8979      	ldrh	r1, [r7, #10]
2400c8ea:	4b0b      	ldr	r3, [pc, #44]	; (2400c918 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400c8ec:	9300      	str	r3, [sp, #0]
2400c8ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c8f2:	68f8      	ldr	r0, [r7, #12]
2400c8f4:	f002 fee6 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c8f8:	68fb      	ldr	r3, [r7, #12]
2400c8fa:	2200      	movs	r2, #0
2400c8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c900:	2101      	movs	r1, #1
2400c902:	68f8      	ldr	r0, [r7, #12]
2400c904:	f002 ff10 	bl	2400f728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c908:	2300      	movs	r3, #0
2400c90a:	e000      	b.n	2400c90e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400c90c:	2302      	movs	r3, #2
  }
}
2400c90e:	4618      	mov	r0, r3
2400c910:	3720      	adds	r7, #32
2400c912:	46bd      	mov	sp, r7
2400c914:	bd80      	pop	{r7, pc}
2400c916:	bf00      	nop
2400c918:	80002000 	.word	0x80002000
2400c91c:	2400db5d 	.word	0x2400db5d
2400c920:	2400ecff 	.word	0x2400ecff
2400c924:	2400efd1 	.word	0x2400efd1
2400c928:	2400d707 	.word	0x2400d707

2400c92c <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2400c92c:	b580      	push	{r7, lr}
2400c92e:	b088      	sub	sp, #32
2400c930:	af02      	add	r7, sp, #8
2400c932:	60f8      	str	r0, [r7, #12]
2400c934:	607a      	str	r2, [r7, #4]
2400c936:	461a      	mov	r2, r3
2400c938:	460b      	mov	r3, r1
2400c93a:	817b      	strh	r3, [r7, #10]
2400c93c:	4613      	mov	r3, r2
2400c93e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400c940:	4b3a      	ldr	r3, [pc, #232]	; (2400ca2c <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2400c942:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c944:	68fb      	ldr	r3, [r7, #12]
2400c946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c94a:	b2db      	uxtb	r3, r3
2400c94c:	2b20      	cmp	r3, #32
2400c94e:	d167      	bne.n	2400ca20 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c950:	68fb      	ldr	r3, [r7, #12]
2400c952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c956:	2b01      	cmp	r3, #1
2400c958:	d101      	bne.n	2400c95e <HAL_I2C_Master_Seq_Receive_IT+0x32>
2400c95a:	2302      	movs	r3, #2
2400c95c:	e061      	b.n	2400ca22 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2400c95e:	68fb      	ldr	r3, [r7, #12]
2400c960:	2201      	movs	r2, #1
2400c962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c966:	68fb      	ldr	r3, [r7, #12]
2400c968:	2222      	movs	r2, #34	; 0x22
2400c96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c96e:	68fb      	ldr	r3, [r7, #12]
2400c970:	2210      	movs	r2, #16
2400c972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c976:	68fb      	ldr	r3, [r7, #12]
2400c978:	2200      	movs	r2, #0
2400c97a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c97c:	68fb      	ldr	r3, [r7, #12]
2400c97e:	687a      	ldr	r2, [r7, #4]
2400c980:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c982:	68fb      	ldr	r3, [r7, #12]
2400c984:	893a      	ldrh	r2, [r7, #8]
2400c986:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c988:	68fb      	ldr	r3, [r7, #12]
2400c98a:	6a3a      	ldr	r2, [r7, #32]
2400c98c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400c98e:	68fb      	ldr	r3, [r7, #12]
2400c990:	4a27      	ldr	r2, [pc, #156]	; (2400ca30 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2400c992:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c994:	68fb      	ldr	r3, [r7, #12]
2400c996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c998:	b29b      	uxth	r3, r3
2400c99a:	2bff      	cmp	r3, #255	; 0xff
2400c99c:	d906      	bls.n	2400c9ac <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c99e:	68fb      	ldr	r3, [r7, #12]
2400c9a0:	22ff      	movs	r2, #255	; 0xff
2400c9a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c9a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c9a8:	617b      	str	r3, [r7, #20]
2400c9aa:	e007      	b.n	2400c9bc <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c9ac:	68fb      	ldr	r3, [r7, #12]
2400c9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c9b0:	b29a      	uxth	r2, r3
2400c9b2:	68fb      	ldr	r3, [r7, #12]
2400c9b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c9b6:	68fb      	ldr	r3, [r7, #12]
2400c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c9ba:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c9bc:	68fb      	ldr	r3, [r7, #12]
2400c9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c9c0:	2b12      	cmp	r3, #18
2400c9c2:	d10e      	bne.n	2400c9e2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c9c4:	6a3b      	ldr	r3, [r7, #32]
2400c9c6:	2baa      	cmp	r3, #170	; 0xaa
2400c9c8:	d003      	beq.n	2400c9d2 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2400c9ca:	6a3b      	ldr	r3, [r7, #32]
2400c9cc:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c9d0:	d101      	bne.n	2400c9d6 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2400c9d2:	2301      	movs	r3, #1
2400c9d4:	e000      	b.n	2400c9d8 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2400c9d6:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c9d8:	2b00      	cmp	r3, #0
2400c9da:	d102      	bne.n	2400c9e2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c9dc:	2300      	movs	r3, #0
2400c9de:	613b      	str	r3, [r7, #16]
2400c9e0:	e00a      	b.n	2400c9f8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c9e2:	68f8      	ldr	r0, [r7, #12]
2400c9e4:	f002 ff62 	bl	2400f8ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c9e8:	68fb      	ldr	r3, [r7, #12]
2400c9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c9ec:	b29b      	uxth	r3, r3
2400c9ee:	2bff      	cmp	r3, #255	; 0xff
2400c9f0:	d802      	bhi.n	2400c9f8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400c9f2:	68fb      	ldr	r3, [r7, #12]
2400c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c9f6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c9f8:	68fb      	ldr	r3, [r7, #12]
2400c9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c9fc:	b2da      	uxtb	r2, r3
2400c9fe:	8979      	ldrh	r1, [r7, #10]
2400ca00:	693b      	ldr	r3, [r7, #16]
2400ca02:	9300      	str	r3, [sp, #0]
2400ca04:	697b      	ldr	r3, [r7, #20]
2400ca06:	68f8      	ldr	r0, [r7, #12]
2400ca08:	f002 fe5c 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ca0c:	68fb      	ldr	r3, [r7, #12]
2400ca0e:	2200      	movs	r2, #0
2400ca10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400ca14:	2102      	movs	r1, #2
2400ca16:	68f8      	ldr	r0, [r7, #12]
2400ca18:	f002 fe86 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400ca1c:	2300      	movs	r3, #0
2400ca1e:	e000      	b.n	2400ca22 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400ca20:	2302      	movs	r3, #2
  }
}
2400ca22:	4618      	mov	r0, r3
2400ca24:	3718      	adds	r7, #24
2400ca26:	46bd      	mov	sp, r7
2400ca28:	bd80      	pop	{r7, pc}
2400ca2a:	bf00      	nop
2400ca2c:	80002400 	.word	0x80002400
2400ca30:	2400d707 	.word	0x2400d707

2400ca34 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400ca34:	b580      	push	{r7, lr}
2400ca36:	b08a      	sub	sp, #40	; 0x28
2400ca38:	af02      	add	r7, sp, #8
2400ca3a:	60f8      	str	r0, [r7, #12]
2400ca3c:	607a      	str	r2, [r7, #4]
2400ca3e:	461a      	mov	r2, r3
2400ca40:	460b      	mov	r3, r1
2400ca42:	817b      	strh	r3, [r7, #10]
2400ca44:	4613      	mov	r3, r2
2400ca46:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400ca48:	4b77      	ldr	r3, [pc, #476]	; (2400cc28 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400ca4a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ca4c:	68fb      	ldr	r3, [r7, #12]
2400ca4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ca52:	b2db      	uxtb	r3, r3
2400ca54:	2b20      	cmp	r3, #32
2400ca56:	f040 80e1 	bne.w	2400cc1c <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ca5a:	68fb      	ldr	r3, [r7, #12]
2400ca5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ca60:	2b01      	cmp	r3, #1
2400ca62:	d101      	bne.n	2400ca68 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2400ca64:	2302      	movs	r3, #2
2400ca66:	e0da      	b.n	2400cc1e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2400ca68:	68fb      	ldr	r3, [r7, #12]
2400ca6a:	2201      	movs	r2, #1
2400ca6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400ca70:	68fb      	ldr	r3, [r7, #12]
2400ca72:	2222      	movs	r2, #34	; 0x22
2400ca74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400ca78:	68fb      	ldr	r3, [r7, #12]
2400ca7a:	2210      	movs	r2, #16
2400ca7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ca80:	68fb      	ldr	r3, [r7, #12]
2400ca82:	2200      	movs	r2, #0
2400ca84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ca86:	68fb      	ldr	r3, [r7, #12]
2400ca88:	687a      	ldr	r2, [r7, #4]
2400ca8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ca8c:	68fb      	ldr	r3, [r7, #12]
2400ca8e:	893a      	ldrh	r2, [r7, #8]
2400ca90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400ca92:	68fb      	ldr	r3, [r7, #12]
2400ca94:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400ca96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400ca98:	68fb      	ldr	r3, [r7, #12]
2400ca9a:	4a64      	ldr	r2, [pc, #400]	; (2400cc2c <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2400ca9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ca9e:	68fb      	ldr	r3, [r7, #12]
2400caa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400caa2:	b29b      	uxth	r3, r3
2400caa4:	2bff      	cmp	r3, #255	; 0xff
2400caa6:	d906      	bls.n	2400cab6 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400caa8:	68fb      	ldr	r3, [r7, #12]
2400caaa:	22ff      	movs	r2, #255	; 0xff
2400caac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400caae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400cab2:	61fb      	str	r3, [r7, #28]
2400cab4:	e007      	b.n	2400cac6 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400cab6:	68fb      	ldr	r3, [r7, #12]
2400cab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400caba:	b29a      	uxth	r2, r3
2400cabc:	68fb      	ldr	r3, [r7, #12]
2400cabe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400cac0:	68fb      	ldr	r3, [r7, #12]
2400cac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400cac4:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400cac6:	68fb      	ldr	r3, [r7, #12]
2400cac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400caca:	2b12      	cmp	r3, #18
2400cacc:	d10e      	bne.n	2400caec <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400cad0:	2baa      	cmp	r3, #170	; 0xaa
2400cad2:	d003      	beq.n	2400cadc <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2400cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400cad6:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400cada:	d101      	bne.n	2400cae0 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2400cadc:	2301      	movs	r3, #1
2400cade:	e000      	b.n	2400cae2 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2400cae0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400cae2:	2b00      	cmp	r3, #0
2400cae4:	d102      	bne.n	2400caec <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400cae6:	2300      	movs	r3, #0
2400cae8:	61bb      	str	r3, [r7, #24]
2400caea:	e00a      	b.n	2400cb02 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400caec:	68f8      	ldr	r0, [r7, #12]
2400caee:	f002 fedd 	bl	2400f8ac <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400caf2:	68fb      	ldr	r3, [r7, #12]
2400caf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400caf6:	b29b      	uxth	r3, r3
2400caf8:	2bff      	cmp	r3, #255	; 0xff
2400cafa:	d802      	bhi.n	2400cb02 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400cafc:	68fb      	ldr	r3, [r7, #12]
2400cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400cb00:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400cb02:	68fb      	ldr	r3, [r7, #12]
2400cb04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cb06:	2b00      	cmp	r3, #0
2400cb08:	d070      	beq.n	2400cbec <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2400cb0a:	68fb      	ldr	r3, [r7, #12]
2400cb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb0e:	2b00      	cmp	r3, #0
2400cb10:	d020      	beq.n	2400cb54 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400cb12:	68fb      	ldr	r3, [r7, #12]
2400cb14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb16:	4a46      	ldr	r2, [pc, #280]	; (2400cc30 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2400cb18:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400cb1a:	68fb      	ldr	r3, [r7, #12]
2400cb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb1e:	4a45      	ldr	r2, [pc, #276]	; (2400cc34 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2400cb20:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400cb22:	68fb      	ldr	r3, [r7, #12]
2400cb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb26:	2200      	movs	r2, #0
2400cb28:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400cb2a:	68fb      	ldr	r3, [r7, #12]
2400cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb2e:	2200      	movs	r2, #0
2400cb30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400cb32:	68fb      	ldr	r3, [r7, #12]
2400cb34:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400cb36:	68fb      	ldr	r3, [r7, #12]
2400cb38:	681b      	ldr	r3, [r3, #0]
2400cb3a:	3324      	adds	r3, #36	; 0x24
2400cb3c:	4619      	mov	r1, r3
2400cb3e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400cb40:	68fb      	ldr	r3, [r7, #12]
2400cb42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400cb44:	f7f7 f908 	bl	24003d58 <HAL_DMA_Start_IT>
2400cb48:	4603      	mov	r3, r0
2400cb4a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400cb4c:	7dfb      	ldrb	r3, [r7, #23]
2400cb4e:	2b00      	cmp	r3, #0
2400cb50:	d138      	bne.n	2400cbc4 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2400cb52:	e013      	b.n	2400cb7c <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400cb54:	68fb      	ldr	r3, [r7, #12]
2400cb56:	2220      	movs	r2, #32
2400cb58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cb5c:	68fb      	ldr	r3, [r7, #12]
2400cb5e:	2200      	movs	r2, #0
2400cb60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400cb64:	68fb      	ldr	r3, [r7, #12]
2400cb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cb68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400cb6c:	68fb      	ldr	r3, [r7, #12]
2400cb6e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400cb70:	68fb      	ldr	r3, [r7, #12]
2400cb72:	2200      	movs	r2, #0
2400cb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400cb78:	2301      	movs	r3, #1
2400cb7a:	e050      	b.n	2400cc1e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400cb7c:	68fb      	ldr	r3, [r7, #12]
2400cb7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cb80:	b2da      	uxtb	r2, r3
2400cb82:	8979      	ldrh	r1, [r7, #10]
2400cb84:	69bb      	ldr	r3, [r7, #24]
2400cb86:	9300      	str	r3, [sp, #0]
2400cb88:	69fb      	ldr	r3, [r7, #28]
2400cb8a:	68f8      	ldr	r0, [r7, #12]
2400cb8c:	f002 fd9a 	bl	2400f6c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400cb90:	68fb      	ldr	r3, [r7, #12]
2400cb92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cb94:	b29a      	uxth	r2, r3
2400cb96:	68fb      	ldr	r3, [r7, #12]
2400cb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cb9a:	1ad3      	subs	r3, r2, r3
2400cb9c:	b29a      	uxth	r2, r3
2400cb9e:	68fb      	ldr	r3, [r7, #12]
2400cba0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400cba2:	68fb      	ldr	r3, [r7, #12]
2400cba4:	2200      	movs	r2, #0
2400cba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400cbaa:	2110      	movs	r1, #16
2400cbac:	68f8      	ldr	r0, [r7, #12]
2400cbae:	f002 fdbb 	bl	2400f728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400cbb2:	68fb      	ldr	r3, [r7, #12]
2400cbb4:	681b      	ldr	r3, [r3, #0]
2400cbb6:	681a      	ldr	r2, [r3, #0]
2400cbb8:	68fb      	ldr	r3, [r7, #12]
2400cbba:	681b      	ldr	r3, [r3, #0]
2400cbbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400cbc0:	601a      	str	r2, [r3, #0]
2400cbc2:	e029      	b.n	2400cc18 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400cbc4:	68fb      	ldr	r3, [r7, #12]
2400cbc6:	2220      	movs	r2, #32
2400cbc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cbcc:	68fb      	ldr	r3, [r7, #12]
2400cbce:	2200      	movs	r2, #0
2400cbd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400cbd4:	68fb      	ldr	r3, [r7, #12]
2400cbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cbd8:	f043 0210 	orr.w	r2, r3, #16
2400cbdc:	68fb      	ldr	r3, [r7, #12]
2400cbde:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400cbe0:	68fb      	ldr	r3, [r7, #12]
2400cbe2:	2200      	movs	r2, #0
2400cbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400cbe8:	2301      	movs	r3, #1
2400cbea:	e018      	b.n	2400cc1e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400cbec:	68fb      	ldr	r3, [r7, #12]
2400cbee:	4a12      	ldr	r2, [pc, #72]	; (2400cc38 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2400cbf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400cbf2:	68fb      	ldr	r3, [r7, #12]
2400cbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cbf6:	b2da      	uxtb	r2, r3
2400cbf8:	8979      	ldrh	r1, [r7, #10]
2400cbfa:	4b0b      	ldr	r3, [pc, #44]	; (2400cc28 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400cbfc:	9300      	str	r3, [sp, #0]
2400cbfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cc02:	68f8      	ldr	r0, [r7, #12]
2400cc04:	f002 fd5e 	bl	2400f6c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400cc08:	68fb      	ldr	r3, [r7, #12]
2400cc0a:	2200      	movs	r2, #0
2400cc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400cc10:	2101      	movs	r1, #1
2400cc12:	68f8      	ldr	r0, [r7, #12]
2400cc14:	f002 fd88 	bl	2400f728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400cc18:	2300      	movs	r3, #0
2400cc1a:	e000      	b.n	2400cc1e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400cc1c:	2302      	movs	r3, #2
  }
}
2400cc1e:	4618      	mov	r0, r3
2400cc20:	3720      	adds	r7, #32
2400cc22:	46bd      	mov	sp, r7
2400cc24:	bd80      	pop	{r7, pc}
2400cc26:	bf00      	nop
2400cc28:	80002400 	.word	0x80002400
2400cc2c:	2400db5d 	.word	0x2400db5d
2400cc30:	2400edd5 	.word	0x2400edd5
2400cc34:	2400efd1 	.word	0x2400efd1
2400cc38:	2400d707 	.word	0x2400d707

2400cc3c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400cc3c:	b580      	push	{r7, lr}
2400cc3e:	b084      	sub	sp, #16
2400cc40:	af00      	add	r7, sp, #0
2400cc42:	60f8      	str	r0, [r7, #12]
2400cc44:	60b9      	str	r1, [r7, #8]
2400cc46:	603b      	str	r3, [r7, #0]
2400cc48:	4613      	mov	r3, r2
2400cc4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400cc4c:	68fb      	ldr	r3, [r7, #12]
2400cc4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc52:	b2db      	uxtb	r3, r3
2400cc54:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400cc58:	2b28      	cmp	r3, #40	; 0x28
2400cc5a:	f040 808a 	bne.w	2400cd72 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400cc5e:	68bb      	ldr	r3, [r7, #8]
2400cc60:	2b00      	cmp	r3, #0
2400cc62:	d002      	beq.n	2400cc6a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2400cc64:	88fb      	ldrh	r3, [r7, #6]
2400cc66:	2b00      	cmp	r3, #0
2400cc68:	d105      	bne.n	2400cc76 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400cc6a:	68fb      	ldr	r3, [r7, #12]
2400cc6c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cc70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400cc72:	2301      	movs	r3, #1
2400cc74:	e07e      	b.n	2400cd74 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400cc76:	f248 0101 	movw	r1, #32769	; 0x8001
2400cc7a:	68f8      	ldr	r0, [r7, #12]
2400cc7c:	f002 fdb8 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cc80:	68fb      	ldr	r3, [r7, #12]
2400cc82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cc86:	2b01      	cmp	r3, #1
2400cc88:	d101      	bne.n	2400cc8e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2400cc8a:	2302      	movs	r3, #2
2400cc8c:	e072      	b.n	2400cd74 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
2400cc8e:	68fb      	ldr	r3, [r7, #12]
2400cc90:	2201      	movs	r2, #1
2400cc92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400cc96:	68fb      	ldr	r3, [r7, #12]
2400cc98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc9c:	b2db      	uxtb	r3, r3
2400cc9e:	2b2a      	cmp	r3, #42	; 0x2a
2400cca0:	d12a      	bne.n	2400ccf8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400cca2:	2102      	movs	r1, #2
2400cca4:	68f8      	ldr	r0, [r7, #12]
2400cca6:	f002 fda3 	bl	2400f7f0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400ccaa:	68fb      	ldr	r3, [r7, #12]
2400ccac:	681b      	ldr	r3, [r3, #0]
2400ccae:	681b      	ldr	r3, [r3, #0]
2400ccb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ccb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ccb8:	d11e      	bne.n	2400ccf8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ccba:	68fb      	ldr	r3, [r7, #12]
2400ccbc:	681b      	ldr	r3, [r3, #0]
2400ccbe:	681a      	ldr	r2, [r3, #0]
2400ccc0:	68fb      	ldr	r3, [r7, #12]
2400ccc2:	681b      	ldr	r3, [r3, #0]
2400ccc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ccc8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2400ccca:	68fb      	ldr	r3, [r7, #12]
2400cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ccce:	2b00      	cmp	r3, #0
2400ccd0:	d012      	beq.n	2400ccf8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400ccd2:	68fb      	ldr	r3, [r7, #12]
2400ccd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ccd6:	4a29      	ldr	r2, [pc, #164]	; (2400cd7c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
2400ccd8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400ccda:	68fb      	ldr	r3, [r7, #12]
2400ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ccde:	4618      	mov	r0, r3
2400cce0:	f7f7 fdc2 	bl	24004868 <HAL_DMA_Abort_IT>
2400cce4:	4603      	mov	r3, r0
2400cce6:	2b00      	cmp	r3, #0
2400cce8:	d006      	beq.n	2400ccf8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400ccea:	68fb      	ldr	r3, [r7, #12]
2400ccec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ccee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ccf0:	68fa      	ldr	r2, [r7, #12]
2400ccf2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400ccf4:	4610      	mov	r0, r2
2400ccf6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400ccf8:	68fb      	ldr	r3, [r7, #12]
2400ccfa:	2229      	movs	r2, #41	; 0x29
2400ccfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400cd00:	68fb      	ldr	r3, [r7, #12]
2400cd02:	2220      	movs	r2, #32
2400cd04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cd08:	68fb      	ldr	r3, [r7, #12]
2400cd0a:	2200      	movs	r2, #0
2400cd0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400cd0e:	68fb      	ldr	r3, [r7, #12]
2400cd10:	681b      	ldr	r3, [r3, #0]
2400cd12:	685a      	ldr	r2, [r3, #4]
2400cd14:	68fb      	ldr	r3, [r7, #12]
2400cd16:	681b      	ldr	r3, [r3, #0]
2400cd18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400cd1c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400cd1e:	68fb      	ldr	r3, [r7, #12]
2400cd20:	68ba      	ldr	r2, [r7, #8]
2400cd22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400cd24:	68fb      	ldr	r3, [r7, #12]
2400cd26:	88fa      	ldrh	r2, [r7, #6]
2400cd28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400cd2a:	68fb      	ldr	r3, [r7, #12]
2400cd2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cd2e:	b29a      	uxth	r2, r3
2400cd30:	68fb      	ldr	r3, [r7, #12]
2400cd32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400cd34:	68fb      	ldr	r3, [r7, #12]
2400cd36:	683a      	ldr	r2, [r7, #0]
2400cd38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400cd3a:	68fb      	ldr	r3, [r7, #12]
2400cd3c:	4a10      	ldr	r2, [pc, #64]	; (2400cd80 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
2400cd3e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400cd40:	68fb      	ldr	r3, [r7, #12]
2400cd42:	681b      	ldr	r3, [r3, #0]
2400cd44:	699b      	ldr	r3, [r3, #24]
2400cd46:	0c1b      	lsrs	r3, r3, #16
2400cd48:	b2db      	uxtb	r3, r3
2400cd4a:	f003 0301 	and.w	r3, r3, #1
2400cd4e:	b2db      	uxtb	r3, r3
2400cd50:	2b01      	cmp	r3, #1
2400cd52:	d103      	bne.n	2400cd5c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400cd54:	68fb      	ldr	r3, [r7, #12]
2400cd56:	681b      	ldr	r3, [r3, #0]
2400cd58:	2208      	movs	r2, #8
2400cd5a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cd5c:	68fb      	ldr	r3, [r7, #12]
2400cd5e:	2200      	movs	r2, #0
2400cd60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400cd64:	f248 0101 	movw	r1, #32769	; 0x8001
2400cd68:	68f8      	ldr	r0, [r7, #12]
2400cd6a:	f002 fcdd 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400cd6e:	2300      	movs	r3, #0
2400cd70:	e000      	b.n	2400cd74 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400cd72:	2301      	movs	r3, #1
  }
}
2400cd74:	4618      	mov	r0, r3
2400cd76:	3710      	adds	r7, #16
2400cd78:	46bd      	mov	sp, r7
2400cd7a:	bd80      	pop	{r7, pc}
2400cd7c:	2400f245 	.word	0x2400f245
2400cd80:	2400d957 	.word	0x2400d957

2400cd84 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2400cd84:	b580      	push	{r7, lr}
2400cd86:	b086      	sub	sp, #24
2400cd88:	af00      	add	r7, sp, #0
2400cd8a:	60f8      	str	r0, [r7, #12]
2400cd8c:	60b9      	str	r1, [r7, #8]
2400cd8e:	603b      	str	r3, [r7, #0]
2400cd90:	4613      	mov	r3, r2
2400cd92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400cd94:	68fb      	ldr	r3, [r7, #12]
2400cd96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cd9a:	b2db      	uxtb	r3, r3
2400cd9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400cda0:	2b28      	cmp	r3, #40	; 0x28
2400cda2:	f040 811a 	bne.w	2400cfda <HAL_I2C_Slave_Seq_Transmit_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400cda6:	68bb      	ldr	r3, [r7, #8]
2400cda8:	2b00      	cmp	r3, #0
2400cdaa:	d002      	beq.n	2400cdb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2400cdac:	88fb      	ldrh	r3, [r7, #6]
2400cdae:	2b00      	cmp	r3, #0
2400cdb0:	d105      	bne.n	2400cdbe <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400cdb2:	68fb      	ldr	r3, [r7, #12]
2400cdb4:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cdb8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400cdba:	2301      	movs	r3, #1
2400cdbc:	e10e      	b.n	2400cfdc <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cdbe:	68fb      	ldr	r3, [r7, #12]
2400cdc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cdc4:	2b01      	cmp	r3, #1
2400cdc6:	d101      	bne.n	2400cdcc <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2400cdc8:	2302      	movs	r3, #2
2400cdca:	e107      	b.n	2400cfdc <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
2400cdcc:	68fb      	ldr	r3, [r7, #12]
2400cdce:	2201      	movs	r2, #1
2400cdd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400cdd4:	f248 0101 	movw	r1, #32769	; 0x8001
2400cdd8:	68f8      	ldr	r0, [r7, #12]
2400cdda:	f002 fd09 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400cdde:	68fb      	ldr	r3, [r7, #12]
2400cde0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cde4:	b2db      	uxtb	r3, r3
2400cde6:	2b2a      	cmp	r3, #42	; 0x2a
2400cde8:	d12b      	bne.n	2400ce42 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400cdea:	2102      	movs	r1, #2
2400cdec:	68f8      	ldr	r0, [r7, #12]
2400cdee:	f002 fcff 	bl	2400f7f0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400cdf2:	68fb      	ldr	r3, [r7, #12]
2400cdf4:	681b      	ldr	r3, [r3, #0]
2400cdf6:	681b      	ldr	r3, [r3, #0]
2400cdf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400cdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ce00:	d14c      	bne.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400ce02:	68fb      	ldr	r3, [r7, #12]
2400ce04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ce06:	2b00      	cmp	r3, #0
2400ce08:	d048      	beq.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ce0a:	68fb      	ldr	r3, [r7, #12]
2400ce0c:	681b      	ldr	r3, [r3, #0]
2400ce0e:	681a      	ldr	r2, [r3, #0]
2400ce10:	68fb      	ldr	r3, [r7, #12]
2400ce12:	681b      	ldr	r3, [r3, #0]
2400ce14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ce18:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400ce1a:	68fb      	ldr	r3, [r7, #12]
2400ce1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ce1e:	4a71      	ldr	r2, [pc, #452]	; (2400cfe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400ce20:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400ce22:	68fb      	ldr	r3, [r7, #12]
2400ce24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ce26:	4618      	mov	r0, r3
2400ce28:	f7f7 fd1e 	bl	24004868 <HAL_DMA_Abort_IT>
2400ce2c:	4603      	mov	r3, r0
2400ce2e:	2b00      	cmp	r3, #0
2400ce30:	d034      	beq.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400ce32:	68fb      	ldr	r3, [r7, #12]
2400ce34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ce36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ce38:	68fa      	ldr	r2, [r7, #12]
2400ce3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400ce3c:	4610      	mov	r0, r2
2400ce3e:	4798      	blx	r3
2400ce40:	e02c      	b.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400ce42:	68fb      	ldr	r3, [r7, #12]
2400ce44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ce48:	b2db      	uxtb	r3, r3
2400ce4a:	2b29      	cmp	r3, #41	; 0x29
2400ce4c:	d126      	bne.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400ce4e:	68fb      	ldr	r3, [r7, #12]
2400ce50:	681b      	ldr	r3, [r3, #0]
2400ce52:	681b      	ldr	r3, [r3, #0]
2400ce54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400ce58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ce5c:	d11e      	bne.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400ce5e:	68fb      	ldr	r3, [r7, #12]
2400ce60:	681b      	ldr	r3, [r3, #0]
2400ce62:	681a      	ldr	r2, [r3, #0]
2400ce64:	68fb      	ldr	r3, [r7, #12]
2400ce66:	681b      	ldr	r3, [r3, #0]
2400ce68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400ce6c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400ce6e:	68fb      	ldr	r3, [r7, #12]
2400ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ce72:	2b00      	cmp	r3, #0
2400ce74:	d012      	beq.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400ce76:	68fb      	ldr	r3, [r7, #12]
2400ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ce7a:	4a5a      	ldr	r2, [pc, #360]	; (2400cfe4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400ce7c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400ce7e:	68fb      	ldr	r3, [r7, #12]
2400ce80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ce82:	4618      	mov	r0, r3
2400ce84:	f7f7 fcf0 	bl	24004868 <HAL_DMA_Abort_IT>
2400ce88:	4603      	mov	r3, r0
2400ce8a:	2b00      	cmp	r3, #0
2400ce8c:	d006      	beq.n	2400ce9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400ce8e:	68fb      	ldr	r3, [r7, #12]
2400ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ce92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ce94:	68fa      	ldr	r2, [r7, #12]
2400ce96:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400ce98:	4610      	mov	r0, r2
2400ce9a:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400ce9c:	68fb      	ldr	r3, [r7, #12]
2400ce9e:	2229      	movs	r2, #41	; 0x29
2400cea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400cea4:	68fb      	ldr	r3, [r7, #12]
2400cea6:	2220      	movs	r2, #32
2400cea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ceac:	68fb      	ldr	r3, [r7, #12]
2400ceae:	2200      	movs	r2, #0
2400ceb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400ceb2:	68fb      	ldr	r3, [r7, #12]
2400ceb4:	681b      	ldr	r3, [r3, #0]
2400ceb6:	685a      	ldr	r2, [r3, #4]
2400ceb8:	68fb      	ldr	r3, [r7, #12]
2400ceba:	681b      	ldr	r3, [r3, #0]
2400cebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400cec0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400cec2:	68fb      	ldr	r3, [r7, #12]
2400cec4:	68ba      	ldr	r2, [r7, #8]
2400cec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400cec8:	68fb      	ldr	r3, [r7, #12]
2400ceca:	88fa      	ldrh	r2, [r7, #6]
2400cecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400cece:	68fb      	ldr	r3, [r7, #12]
2400ced0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ced2:	b29a      	uxth	r2, r3
2400ced4:	68fb      	ldr	r3, [r7, #12]
2400ced6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400ced8:	68fb      	ldr	r3, [r7, #12]
2400ceda:	683a      	ldr	r2, [r7, #0]
2400cedc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400cede:	68fb      	ldr	r3, [r7, #12]
2400cee0:	4a41      	ldr	r2, [pc, #260]	; (2400cfe8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x264>)
2400cee2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400cee4:	68fb      	ldr	r3, [r7, #12]
2400cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400cee8:	2b00      	cmp	r3, #0
2400ceea:	d020      	beq.n	2400cf2e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400ceec:	68fb      	ldr	r3, [r7, #12]
2400ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400cef0:	4a3e      	ldr	r2, [pc, #248]	; (2400cfec <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
2400cef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400cef4:	68fb      	ldr	r3, [r7, #12]
2400cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400cef8:	4a3d      	ldr	r2, [pc, #244]	; (2400cff0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
2400cefa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400cefc:	68fb      	ldr	r3, [r7, #12]
2400cefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400cf00:	2200      	movs	r2, #0
2400cf02:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400cf04:	68fb      	ldr	r3, [r7, #12]
2400cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400cf08:	2200      	movs	r2, #0
2400cf0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400cf0c:	68fb      	ldr	r3, [r7, #12]
2400cf0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400cf10:	68b9      	ldr	r1, [r7, #8]
2400cf12:	68fb      	ldr	r3, [r7, #12]
2400cf14:	681b      	ldr	r3, [r3, #0]
2400cf16:	3328      	adds	r3, #40	; 0x28
2400cf18:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400cf1a:	68fb      	ldr	r3, [r7, #12]
2400cf1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400cf1e:	f7f6 ff1b 	bl	24003d58 <HAL_DMA_Start_IT>
2400cf22:	4603      	mov	r3, r0
2400cf24:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400cf26:	7dfb      	ldrb	r3, [r7, #23]
2400cf28:	2b00      	cmp	r3, #0
2400cf2a:	d12b      	bne.n	2400cf84 <HAL_I2C_Slave_Seq_Transmit_DMA+0x200>
2400cf2c:	e013      	b.n	2400cf56 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400cf2e:	68fb      	ldr	r3, [r7, #12]
2400cf30:	2228      	movs	r2, #40	; 0x28
2400cf32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cf36:	68fb      	ldr	r3, [r7, #12]
2400cf38:	2200      	movs	r2, #0
2400cf3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400cf3e:	68fb      	ldr	r3, [r7, #12]
2400cf40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cf42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400cf46:	68fb      	ldr	r3, [r7, #12]
2400cf48:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cf4a:	68fb      	ldr	r3, [r7, #12]
2400cf4c:	2200      	movs	r2, #0
2400cf4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cf52:	2301      	movs	r3, #1
2400cf54:	e042      	b.n	2400cfdc <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400cf56:	68fb      	ldr	r3, [r7, #12]
2400cf58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cf5a:	b29a      	uxth	r2, r3
2400cf5c:	68fb      	ldr	r3, [r7, #12]
2400cf5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cf60:	1ad3      	subs	r3, r2, r3
2400cf62:	b29a      	uxth	r2, r3
2400cf64:	68fb      	ldr	r3, [r7, #12]
2400cf66:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400cf68:	68fb      	ldr	r3, [r7, #12]
2400cf6a:	2200      	movs	r2, #0
2400cf6c:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400cf6e:	68fb      	ldr	r3, [r7, #12]
2400cf70:	681b      	ldr	r3, [r3, #0]
2400cf72:	699b      	ldr	r3, [r3, #24]
2400cf74:	0c1b      	lsrs	r3, r3, #16
2400cf76:	b2db      	uxtb	r3, r3
2400cf78:	f003 0301 	and.w	r3, r3, #1
2400cf7c:	b2db      	uxtb	r3, r3
2400cf7e:	2b01      	cmp	r3, #1
2400cf80:	d118      	bne.n	2400cfb4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x230>
2400cf82:	e013      	b.n	2400cfac <HAL_I2C_Slave_Seq_Transmit_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400cf84:	68fb      	ldr	r3, [r7, #12]
2400cf86:	2228      	movs	r2, #40	; 0x28
2400cf88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cf8c:	68fb      	ldr	r3, [r7, #12]
2400cf8e:	2200      	movs	r2, #0
2400cf90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400cf94:	68fb      	ldr	r3, [r7, #12]
2400cf96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cf98:	f043 0210 	orr.w	r2, r3, #16
2400cf9c:	68fb      	ldr	r3, [r7, #12]
2400cf9e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cfa0:	68fb      	ldr	r3, [r7, #12]
2400cfa2:	2200      	movs	r2, #0
2400cfa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cfa8:	2301      	movs	r3, #1
2400cfaa:	e017      	b.n	2400cfdc <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400cfac:	68fb      	ldr	r3, [r7, #12]
2400cfae:	681b      	ldr	r3, [r3, #0]
2400cfb0:	2208      	movs	r2, #8
2400cfb2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cfb4:	68fb      	ldr	r3, [r7, #12]
2400cfb6:	2200      	movs	r2, #0
2400cfb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400cfbc:	68fb      	ldr	r3, [r7, #12]
2400cfbe:	681b      	ldr	r3, [r3, #0]
2400cfc0:	681a      	ldr	r2, [r3, #0]
2400cfc2:	68fb      	ldr	r3, [r7, #12]
2400cfc4:	681b      	ldr	r3, [r3, #0]
2400cfc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400cfca:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400cfcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400cfd0:	68f8      	ldr	r0, [r7, #12]
2400cfd2:	f002 fba9 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400cfd6:	2300      	movs	r3, #0
2400cfd8:	e000      	b.n	2400cfdc <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400cfda:	2301      	movs	r3, #1
  }
}
2400cfdc:	4618      	mov	r0, r3
2400cfde:	3718      	adds	r7, #24
2400cfe0:	46bd      	mov	sp, r7
2400cfe2:	bd80      	pop	{r7, pc}
2400cfe4:	2400f245 	.word	0x2400f245
2400cfe8:	2400dd45 	.word	0x2400dd45
2400cfec:	2400ed95 	.word	0x2400ed95
2400cff0:	2400efd1 	.word	0x2400efd1

2400cff4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2400cff4:	b580      	push	{r7, lr}
2400cff6:	b084      	sub	sp, #16
2400cff8:	af00      	add	r7, sp, #0
2400cffa:	60f8      	str	r0, [r7, #12]
2400cffc:	60b9      	str	r1, [r7, #8]
2400cffe:	603b      	str	r3, [r7, #0]
2400d000:	4613      	mov	r3, r2
2400d002:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d004:	68fb      	ldr	r3, [r7, #12]
2400d006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d00a:	b2db      	uxtb	r3, r3
2400d00c:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400d010:	2b28      	cmp	r3, #40	; 0x28
2400d012:	f040 808a 	bne.w	2400d12a <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400d016:	68bb      	ldr	r3, [r7, #8]
2400d018:	2b00      	cmp	r3, #0
2400d01a:	d002      	beq.n	2400d022 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2400d01c:	88fb      	ldrh	r3, [r7, #6]
2400d01e:	2b00      	cmp	r3, #0
2400d020:	d105      	bne.n	2400d02e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d022:	68fb      	ldr	r3, [r7, #12]
2400d024:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d028:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400d02a:	2301      	movs	r3, #1
2400d02c:	e07e      	b.n	2400d12c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400d02e:	f248 0102 	movw	r1, #32770	; 0x8002
2400d032:	68f8      	ldr	r0, [r7, #12]
2400d034:	f002 fbdc 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d038:	68fb      	ldr	r3, [r7, #12]
2400d03a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d03e:	2b01      	cmp	r3, #1
2400d040:	d101      	bne.n	2400d046 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2400d042:	2302      	movs	r3, #2
2400d044:	e072      	b.n	2400d12c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
2400d046:	68fb      	ldr	r3, [r7, #12]
2400d048:	2201      	movs	r2, #1
2400d04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400d04e:	68fb      	ldr	r3, [r7, #12]
2400d050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d054:	b2db      	uxtb	r3, r3
2400d056:	2b29      	cmp	r3, #41	; 0x29
2400d058:	d12a      	bne.n	2400d0b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d05a:	2101      	movs	r1, #1
2400d05c:	68f8      	ldr	r0, [r7, #12]
2400d05e:	f002 fbc7 	bl	2400f7f0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400d062:	68fb      	ldr	r3, [r7, #12]
2400d064:	681b      	ldr	r3, [r3, #0]
2400d066:	681b      	ldr	r3, [r3, #0]
2400d068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400d06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400d070:	d11e      	bne.n	2400d0b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400d072:	68fb      	ldr	r3, [r7, #12]
2400d074:	681b      	ldr	r3, [r3, #0]
2400d076:	681a      	ldr	r2, [r3, #0]
2400d078:	68fb      	ldr	r3, [r7, #12]
2400d07a:	681b      	ldr	r3, [r3, #0]
2400d07c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400d080:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400d082:	68fb      	ldr	r3, [r7, #12]
2400d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d086:	2b00      	cmp	r3, #0
2400d088:	d012      	beq.n	2400d0b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400d08a:	68fb      	ldr	r3, [r7, #12]
2400d08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d08e:	4a29      	ldr	r2, [pc, #164]	; (2400d134 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
2400d090:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400d092:	68fb      	ldr	r3, [r7, #12]
2400d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d096:	4618      	mov	r0, r3
2400d098:	f7f7 fbe6 	bl	24004868 <HAL_DMA_Abort_IT>
2400d09c:	4603      	mov	r3, r0
2400d09e:	2b00      	cmp	r3, #0
2400d0a0:	d006      	beq.n	2400d0b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400d0a2:	68fb      	ldr	r3, [r7, #12]
2400d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400d0a8:	68fa      	ldr	r2, [r7, #12]
2400d0aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400d0ac:	4610      	mov	r0, r2
2400d0ae:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400d0b0:	68fb      	ldr	r3, [r7, #12]
2400d0b2:	222a      	movs	r2, #42	; 0x2a
2400d0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400d0b8:	68fb      	ldr	r3, [r7, #12]
2400d0ba:	2220      	movs	r2, #32
2400d0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d0c0:	68fb      	ldr	r3, [r7, #12]
2400d0c2:	2200      	movs	r2, #0
2400d0c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400d0c6:	68fb      	ldr	r3, [r7, #12]
2400d0c8:	681b      	ldr	r3, [r3, #0]
2400d0ca:	685a      	ldr	r2, [r3, #4]
2400d0cc:	68fb      	ldr	r3, [r7, #12]
2400d0ce:	681b      	ldr	r3, [r3, #0]
2400d0d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400d0d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d0d6:	68fb      	ldr	r3, [r7, #12]
2400d0d8:	68ba      	ldr	r2, [r7, #8]
2400d0da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d0dc:	68fb      	ldr	r3, [r7, #12]
2400d0de:	88fa      	ldrh	r2, [r7, #6]
2400d0e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400d0e2:	68fb      	ldr	r3, [r7, #12]
2400d0e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d0e6:	b29a      	uxth	r2, r3
2400d0e8:	68fb      	ldr	r3, [r7, #12]
2400d0ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400d0ec:	68fb      	ldr	r3, [r7, #12]
2400d0ee:	683a      	ldr	r2, [r7, #0]
2400d0f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400d0f2:	68fb      	ldr	r3, [r7, #12]
2400d0f4:	4a10      	ldr	r2, [pc, #64]	; (2400d138 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
2400d0f6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400d0f8:	68fb      	ldr	r3, [r7, #12]
2400d0fa:	681b      	ldr	r3, [r3, #0]
2400d0fc:	699b      	ldr	r3, [r3, #24]
2400d0fe:	0c1b      	lsrs	r3, r3, #16
2400d100:	b2db      	uxtb	r3, r3
2400d102:	f003 0301 	and.w	r3, r3, #1
2400d106:	b2db      	uxtb	r3, r3
2400d108:	2b00      	cmp	r3, #0
2400d10a:	d103      	bne.n	2400d114 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400d10c:	68fb      	ldr	r3, [r7, #12]
2400d10e:	681b      	ldr	r3, [r3, #0]
2400d110:	2208      	movs	r2, #8
2400d112:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d114:	68fb      	ldr	r3, [r7, #12]
2400d116:	2200      	movs	r2, #0
2400d118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400d11c:	f248 0102 	movw	r1, #32770	; 0x8002
2400d120:	68f8      	ldr	r0, [r7, #12]
2400d122:	f002 fb01 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400d126:	2300      	movs	r3, #0
2400d128:	e000      	b.n	2400d12c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400d12a:	2301      	movs	r3, #1
  }
}
2400d12c:	4618      	mov	r0, r3
2400d12e:	3710      	adds	r7, #16
2400d130:	46bd      	mov	sp, r7
2400d132:	bd80      	pop	{r7, pc}
2400d134:	2400f245 	.word	0x2400f245
2400d138:	2400d957 	.word	0x2400d957

2400d13c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400d13c:	b580      	push	{r7, lr}
2400d13e:	b086      	sub	sp, #24
2400d140:	af00      	add	r7, sp, #0
2400d142:	60f8      	str	r0, [r7, #12]
2400d144:	60b9      	str	r1, [r7, #8]
2400d146:	603b      	str	r3, [r7, #0]
2400d148:	4613      	mov	r3, r2
2400d14a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d14c:	68fb      	ldr	r3, [r7, #12]
2400d14e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d152:	b2db      	uxtb	r3, r3
2400d154:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400d158:	2b28      	cmp	r3, #40	; 0x28
2400d15a:	f040 811a 	bne.w	2400d392 <HAL_I2C_Slave_Seq_Receive_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400d15e:	68bb      	ldr	r3, [r7, #8]
2400d160:	2b00      	cmp	r3, #0
2400d162:	d002      	beq.n	2400d16a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2400d164:	88fb      	ldrh	r3, [r7, #6]
2400d166:	2b00      	cmp	r3, #0
2400d168:	d105      	bne.n	2400d176 <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d16a:	68fb      	ldr	r3, [r7, #12]
2400d16c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d170:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400d172:	2301      	movs	r3, #1
2400d174:	e10e      	b.n	2400d394 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400d176:	f248 0102 	movw	r1, #32770	; 0x8002
2400d17a:	68f8      	ldr	r0, [r7, #12]
2400d17c:	f002 fb38 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d180:	68fb      	ldr	r3, [r7, #12]
2400d182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d186:	2b01      	cmp	r3, #1
2400d188:	d101      	bne.n	2400d18e <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2400d18a:	2302      	movs	r3, #2
2400d18c:	e102      	b.n	2400d394 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
2400d18e:	68fb      	ldr	r3, [r7, #12]
2400d190:	2201      	movs	r2, #1
2400d192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400d196:	68fb      	ldr	r3, [r7, #12]
2400d198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d19c:	b2db      	uxtb	r3, r3
2400d19e:	2b29      	cmp	r3, #41	; 0x29
2400d1a0:	d12b      	bne.n	2400d1fa <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d1a2:	2101      	movs	r1, #1
2400d1a4:	68f8      	ldr	r0, [r7, #12]
2400d1a6:	f002 fb23 	bl	2400f7f0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400d1aa:	68fb      	ldr	r3, [r7, #12]
2400d1ac:	681b      	ldr	r3, [r3, #0]
2400d1ae:	681b      	ldr	r3, [r3, #0]
2400d1b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400d1b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400d1b8:	d14c      	bne.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400d1ba:	68fb      	ldr	r3, [r7, #12]
2400d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d1be:	2b00      	cmp	r3, #0
2400d1c0:	d048      	beq.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400d1c2:	68fb      	ldr	r3, [r7, #12]
2400d1c4:	681b      	ldr	r3, [r3, #0]
2400d1c6:	681a      	ldr	r2, [r3, #0]
2400d1c8:	68fb      	ldr	r3, [r7, #12]
2400d1ca:	681b      	ldr	r3, [r3, #0]
2400d1cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400d1d0:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400d1d2:	68fb      	ldr	r3, [r7, #12]
2400d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d1d6:	4a71      	ldr	r2, [pc, #452]	; (2400d39c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400d1d8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400d1da:	68fb      	ldr	r3, [r7, #12]
2400d1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d1de:	4618      	mov	r0, r3
2400d1e0:	f7f7 fb42 	bl	24004868 <HAL_DMA_Abort_IT>
2400d1e4:	4603      	mov	r3, r0
2400d1e6:	2b00      	cmp	r3, #0
2400d1e8:	d034      	beq.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400d1ea:	68fb      	ldr	r3, [r7, #12]
2400d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400d1f0:	68fa      	ldr	r2, [r7, #12]
2400d1f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400d1f4:	4610      	mov	r0, r2
2400d1f6:	4798      	blx	r3
2400d1f8:	e02c      	b.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400d1fa:	68fb      	ldr	r3, [r7, #12]
2400d1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d200:	b2db      	uxtb	r3, r3
2400d202:	2b2a      	cmp	r3, #42	; 0x2a
2400d204:	d126      	bne.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400d206:	68fb      	ldr	r3, [r7, #12]
2400d208:	681b      	ldr	r3, [r3, #0]
2400d20a:	681b      	ldr	r3, [r3, #0]
2400d20c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400d210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400d214:	d11e      	bne.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400d216:	68fb      	ldr	r3, [r7, #12]
2400d218:	681b      	ldr	r3, [r3, #0]
2400d21a:	681a      	ldr	r2, [r3, #0]
2400d21c:	68fb      	ldr	r3, [r7, #12]
2400d21e:	681b      	ldr	r3, [r3, #0]
2400d220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400d224:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400d226:	68fb      	ldr	r3, [r7, #12]
2400d228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d22a:	2b00      	cmp	r3, #0
2400d22c:	d012      	beq.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400d22e:	68fb      	ldr	r3, [r7, #12]
2400d230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d232:	4a5a      	ldr	r2, [pc, #360]	; (2400d39c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400d234:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400d236:	68fb      	ldr	r3, [r7, #12]
2400d238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d23a:	4618      	mov	r0, r3
2400d23c:	f7f7 fb14 	bl	24004868 <HAL_DMA_Abort_IT>
2400d240:	4603      	mov	r3, r0
2400d242:	2b00      	cmp	r3, #0
2400d244:	d006      	beq.n	2400d254 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400d246:	68fb      	ldr	r3, [r7, #12]
2400d248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400d24c:	68fa      	ldr	r2, [r7, #12]
2400d24e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400d250:	4610      	mov	r0, r2
2400d252:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400d254:	68fb      	ldr	r3, [r7, #12]
2400d256:	222a      	movs	r2, #42	; 0x2a
2400d258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400d25c:	68fb      	ldr	r3, [r7, #12]
2400d25e:	2220      	movs	r2, #32
2400d260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d264:	68fb      	ldr	r3, [r7, #12]
2400d266:	2200      	movs	r2, #0
2400d268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400d26a:	68fb      	ldr	r3, [r7, #12]
2400d26c:	681b      	ldr	r3, [r3, #0]
2400d26e:	685a      	ldr	r2, [r3, #4]
2400d270:	68fb      	ldr	r3, [r7, #12]
2400d272:	681b      	ldr	r3, [r3, #0]
2400d274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400d278:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d27a:	68fb      	ldr	r3, [r7, #12]
2400d27c:	68ba      	ldr	r2, [r7, #8]
2400d27e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400d280:	68fb      	ldr	r3, [r7, #12]
2400d282:	88fa      	ldrh	r2, [r7, #6]
2400d284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400d286:	68fb      	ldr	r3, [r7, #12]
2400d288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d28a:	b29a      	uxth	r2, r3
2400d28c:	68fb      	ldr	r3, [r7, #12]
2400d28e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400d290:	68fb      	ldr	r3, [r7, #12]
2400d292:	683a      	ldr	r2, [r7, #0]
2400d294:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400d296:	68fb      	ldr	r3, [r7, #12]
2400d298:	4a41      	ldr	r2, [pc, #260]	; (2400d3a0 <HAL_I2C_Slave_Seq_Receive_DMA+0x264>)
2400d29a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400d29c:	68fb      	ldr	r3, [r7, #12]
2400d29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d2a0:	2b00      	cmp	r3, #0
2400d2a2:	d020      	beq.n	2400d2e6 <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400d2a4:	68fb      	ldr	r3, [r7, #12]
2400d2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d2a8:	4a3e      	ldr	r2, [pc, #248]	; (2400d3a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
2400d2aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400d2ac:	68fb      	ldr	r3, [r7, #12]
2400d2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d2b0:	4a3d      	ldr	r2, [pc, #244]	; (2400d3a8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
2400d2b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400d2b4:	68fb      	ldr	r3, [r7, #12]
2400d2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d2b8:	2200      	movs	r2, #0
2400d2ba:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400d2bc:	68fb      	ldr	r3, [r7, #12]
2400d2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d2c0:	2200      	movs	r2, #0
2400d2c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400d2c4:	68fb      	ldr	r3, [r7, #12]
2400d2c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400d2c8:	68fb      	ldr	r3, [r7, #12]
2400d2ca:	681b      	ldr	r3, [r3, #0]
2400d2cc:	3324      	adds	r3, #36	; 0x24
2400d2ce:	4619      	mov	r1, r3
2400d2d0:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2400d2d2:	68fb      	ldr	r3, [r7, #12]
2400d2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400d2d6:	f7f6 fd3f 	bl	24003d58 <HAL_DMA_Start_IT>
2400d2da:	4603      	mov	r3, r0
2400d2dc:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400d2de:	7dfb      	ldrb	r3, [r7, #23]
2400d2e0:	2b00      	cmp	r3, #0
2400d2e2:	d12b      	bne.n	2400d33c <HAL_I2C_Slave_Seq_Receive_DMA+0x200>
2400d2e4:	e013      	b.n	2400d30e <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400d2e6:	68fb      	ldr	r3, [r7, #12]
2400d2e8:	2228      	movs	r2, #40	; 0x28
2400d2ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d2ee:	68fb      	ldr	r3, [r7, #12]
2400d2f0:	2200      	movs	r2, #0
2400d2f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d2f6:	68fb      	ldr	r3, [r7, #12]
2400d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d2fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400d2fe:	68fb      	ldr	r3, [r7, #12]
2400d300:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d302:	68fb      	ldr	r3, [r7, #12]
2400d304:	2200      	movs	r2, #0
2400d306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d30a:	2301      	movs	r3, #1
2400d30c:	e042      	b.n	2400d394 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400d30e:	68fb      	ldr	r3, [r7, #12]
2400d310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d312:	b29a      	uxth	r2, r3
2400d314:	68fb      	ldr	r3, [r7, #12]
2400d316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d318:	1ad3      	subs	r3, r2, r3
2400d31a:	b29a      	uxth	r2, r3
2400d31c:	68fb      	ldr	r3, [r7, #12]
2400d31e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400d320:	68fb      	ldr	r3, [r7, #12]
2400d322:	2200      	movs	r2, #0
2400d324:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400d326:	68fb      	ldr	r3, [r7, #12]
2400d328:	681b      	ldr	r3, [r3, #0]
2400d32a:	699b      	ldr	r3, [r3, #24]
2400d32c:	0c1b      	lsrs	r3, r3, #16
2400d32e:	b2db      	uxtb	r3, r3
2400d330:	f003 0301 	and.w	r3, r3, #1
2400d334:	b2db      	uxtb	r3, r3
2400d336:	2b00      	cmp	r3, #0
2400d338:	d118      	bne.n	2400d36c <HAL_I2C_Slave_Seq_Receive_DMA+0x230>
2400d33a:	e013      	b.n	2400d364 <HAL_I2C_Slave_Seq_Receive_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400d33c:	68fb      	ldr	r3, [r7, #12]
2400d33e:	2228      	movs	r2, #40	; 0x28
2400d340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d344:	68fb      	ldr	r3, [r7, #12]
2400d346:	2200      	movs	r2, #0
2400d348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d34c:	68fb      	ldr	r3, [r7, #12]
2400d34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d350:	f043 0210 	orr.w	r2, r3, #16
2400d354:	68fb      	ldr	r3, [r7, #12]
2400d356:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400d358:	68fb      	ldr	r3, [r7, #12]
2400d35a:	2200      	movs	r2, #0
2400d35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400d360:	2301      	movs	r3, #1
2400d362:	e017      	b.n	2400d394 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400d364:	68fb      	ldr	r3, [r7, #12]
2400d366:	681b      	ldr	r3, [r3, #0]
2400d368:	2208      	movs	r2, #8
2400d36a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d36c:	68fb      	ldr	r3, [r7, #12]
2400d36e:	2200      	movs	r2, #0
2400d370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400d374:	68fb      	ldr	r3, [r7, #12]
2400d376:	681b      	ldr	r3, [r3, #0]
2400d378:	681a      	ldr	r2, [r3, #0]
2400d37a:	68fb      	ldr	r3, [r7, #12]
2400d37c:	681b      	ldr	r3, [r3, #0]
2400d37e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400d382:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400d384:	f248 0102 	movw	r1, #32770	; 0x8002
2400d388:	68f8      	ldr	r0, [r7, #12]
2400d38a:	f002 f9cd 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400d38e:	2300      	movs	r3, #0
2400d390:	e000      	b.n	2400d394 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400d392:	2301      	movs	r3, #1
  }
}
2400d394:	4618      	mov	r0, r3
2400d396:	3718      	adds	r7, #24
2400d398:	46bd      	mov	sp, r7
2400d39a:	bd80      	pop	{r7, pc}
2400d39c:	2400f245 	.word	0x2400f245
2400d3a0:	2400dd45 	.word	0x2400dd45
2400d3a4:	2400ee6d 	.word	0x2400ee6d
2400d3a8:	2400efd1 	.word	0x2400efd1

2400d3ac <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400d3ac:	b580      	push	{r7, lr}
2400d3ae:	b082      	sub	sp, #8
2400d3b0:	af00      	add	r7, sp, #0
2400d3b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400d3b4:	687b      	ldr	r3, [r7, #4]
2400d3b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d3ba:	b2db      	uxtb	r3, r3
2400d3bc:	2b20      	cmp	r3, #32
2400d3be:	d10d      	bne.n	2400d3dc <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2400d3c0:	687b      	ldr	r3, [r7, #4]
2400d3c2:	2228      	movs	r2, #40	; 0x28
2400d3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2400d3c8:	687b      	ldr	r3, [r7, #4]
2400d3ca:	4a07      	ldr	r2, [pc, #28]	; (2400d3e8 <HAL_I2C_EnableListen_IT+0x3c>)
2400d3cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400d3ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400d3d2:	6878      	ldr	r0, [r7, #4]
2400d3d4:	f002 f9a8 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400d3d8:	2300      	movs	r3, #0
2400d3da:	e000      	b.n	2400d3de <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2400d3dc:	2302      	movs	r3, #2
  }
}
2400d3de:	4618      	mov	r0, r3
2400d3e0:	3708      	adds	r7, #8
2400d3e2:	46bd      	mov	sp, r7
2400d3e4:	bd80      	pop	{r7, pc}
2400d3e6:	bf00      	nop
2400d3e8:	2400d957 	.word	0x2400d957

2400d3ec <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400d3ec:	b580      	push	{r7, lr}
2400d3ee:	b084      	sub	sp, #16
2400d3f0:	af00      	add	r7, sp, #0
2400d3f2:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400d3f4:	687b      	ldr	r3, [r7, #4]
2400d3f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d3fa:	b2db      	uxtb	r3, r3
2400d3fc:	2b28      	cmp	r3, #40	; 0x28
2400d3fe:	d121      	bne.n	2400d444 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2400d400:	687b      	ldr	r3, [r7, #4]
2400d402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d406:	b2db      	uxtb	r3, r3
2400d408:	f003 0303 	and.w	r3, r3, #3
2400d40c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2400d40e:	687b      	ldr	r3, [r7, #4]
2400d410:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400d414:	b2db      	uxtb	r3, r3
2400d416:	461a      	mov	r2, r3
2400d418:	68fb      	ldr	r3, [r7, #12]
2400d41a:	431a      	orrs	r2, r3
2400d41c:	687b      	ldr	r3, [r7, #4]
2400d41e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2400d420:	687b      	ldr	r3, [r7, #4]
2400d422:	2220      	movs	r2, #32
2400d424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400d428:	687b      	ldr	r3, [r7, #4]
2400d42a:	2200      	movs	r2, #0
2400d42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
2400d430:	687b      	ldr	r3, [r7, #4]
2400d432:	2200      	movs	r2, #0
2400d434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400d436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400d43a:	6878      	ldr	r0, [r7, #4]
2400d43c:	f002 f9d8 	bl	2400f7f0 <I2C_Disable_IRQ>

    return HAL_OK;
2400d440:	2300      	movs	r3, #0
2400d442:	e000      	b.n	2400d446 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2400d444:	2302      	movs	r3, #2
  }
}
2400d446:	4618      	mov	r0, r3
2400d448:	3710      	adds	r7, #16
2400d44a:	46bd      	mov	sp, r7
2400d44c:	bd80      	pop	{r7, pc}
	...

2400d450 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2400d450:	b580      	push	{r7, lr}
2400d452:	b084      	sub	sp, #16
2400d454:	af02      	add	r7, sp, #8
2400d456:	6078      	str	r0, [r7, #4]
2400d458:	460b      	mov	r3, r1
2400d45a:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2400d45c:	687b      	ldr	r3, [r7, #4]
2400d45e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400d462:	b2db      	uxtb	r3, r3
2400d464:	2b10      	cmp	r3, #16
2400d466:	d13c      	bne.n	2400d4e2 <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d468:	687b      	ldr	r3, [r7, #4]
2400d46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d46e:	2b01      	cmp	r3, #1
2400d470:	d101      	bne.n	2400d476 <HAL_I2C_Master_Abort_IT+0x26>
2400d472:	2302      	movs	r3, #2
2400d474:	e036      	b.n	2400d4e4 <HAL_I2C_Master_Abort_IT+0x94>
2400d476:	687b      	ldr	r3, [r7, #4]
2400d478:	2201      	movs	r2, #1
2400d47a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400d47e:	687b      	ldr	r3, [r7, #4]
2400d480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d484:	b2db      	uxtb	r3, r3
2400d486:	2b21      	cmp	r3, #33	; 0x21
2400d488:	d107      	bne.n	2400d49a <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d48a:	2101      	movs	r1, #1
2400d48c:	6878      	ldr	r0, [r7, #4]
2400d48e:	f002 f9af 	bl	2400f7f0 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400d492:	687b      	ldr	r3, [r7, #4]
2400d494:	2211      	movs	r2, #17
2400d496:	631a      	str	r2, [r3, #48]	; 0x30
2400d498:	e00c      	b.n	2400d4b4 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400d49a:	687b      	ldr	r3, [r7, #4]
2400d49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d4a0:	b2db      	uxtb	r3, r3
2400d4a2:	2b22      	cmp	r3, #34	; 0x22
2400d4a4:	d106      	bne.n	2400d4b4 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d4a6:	2102      	movs	r1, #2
2400d4a8:	6878      	ldr	r0, [r7, #4]
2400d4aa:	f002 f9a1 	bl	2400f7f0 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400d4ae:	687b      	ldr	r3, [r7, #4]
2400d4b0:	2212      	movs	r2, #18
2400d4b2:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2400d4b4:	687b      	ldr	r3, [r7, #4]
2400d4b6:	2260      	movs	r2, #96	; 0x60
2400d4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2400d4bc:	8879      	ldrh	r1, [r7, #2]
2400d4be:	4b0b      	ldr	r3, [pc, #44]	; (2400d4ec <HAL_I2C_Master_Abort_IT+0x9c>)
2400d4c0:	9300      	str	r3, [sp, #0]
2400d4c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d4c6:	2201      	movs	r2, #1
2400d4c8:	6878      	ldr	r0, [r7, #4]
2400d4ca:	f002 f8fb 	bl	2400f6c4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d4ce:	687b      	ldr	r3, [r7, #4]
2400d4d0:	2200      	movs	r2, #0
2400d4d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400d4d6:	2120      	movs	r1, #32
2400d4d8:	6878      	ldr	r0, [r7, #4]
2400d4da:	f002 f925 	bl	2400f728 <I2C_Enable_IRQ>

    return HAL_OK;
2400d4de:	2300      	movs	r3, #0
2400d4e0:	e000      	b.n	2400d4e4 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2400d4e2:	2301      	movs	r3, #1
  }
}
2400d4e4:	4618      	mov	r0, r3
2400d4e6:	3708      	adds	r7, #8
2400d4e8:	46bd      	mov	sp, r7
2400d4ea:	bd80      	pop	{r7, pc}
2400d4ec:	80004000 	.word	0x80004000

2400d4f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400d4f0:	b580      	push	{r7, lr}
2400d4f2:	b084      	sub	sp, #16
2400d4f4:	af00      	add	r7, sp, #0
2400d4f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400d4f8:	687b      	ldr	r3, [r7, #4]
2400d4fa:	681b      	ldr	r3, [r3, #0]
2400d4fc:	699b      	ldr	r3, [r3, #24]
2400d4fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400d500:	687b      	ldr	r3, [r7, #4]
2400d502:	681b      	ldr	r3, [r3, #0]
2400d504:	681b      	ldr	r3, [r3, #0]
2400d506:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2400d508:	687b      	ldr	r3, [r7, #4]
2400d50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400d50c:	2b00      	cmp	r3, #0
2400d50e:	d005      	beq.n	2400d51c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2400d510:	687b      	ldr	r3, [r7, #4]
2400d512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400d514:	68ba      	ldr	r2, [r7, #8]
2400d516:	68f9      	ldr	r1, [r7, #12]
2400d518:	6878      	ldr	r0, [r7, #4]
2400d51a:	4798      	blx	r3
  }
}
2400d51c:	bf00      	nop
2400d51e:	3710      	adds	r7, #16
2400d520:	46bd      	mov	sp, r7
2400d522:	bd80      	pop	{r7, pc}

2400d524 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400d524:	b580      	push	{r7, lr}
2400d526:	b086      	sub	sp, #24
2400d528:	af00      	add	r7, sp, #0
2400d52a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400d52c:	687b      	ldr	r3, [r7, #4]
2400d52e:	681b      	ldr	r3, [r3, #0]
2400d530:	699b      	ldr	r3, [r3, #24]
2400d532:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400d534:	687b      	ldr	r3, [r7, #4]
2400d536:	681b      	ldr	r3, [r3, #0]
2400d538:	681b      	ldr	r3, [r3, #0]
2400d53a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400d53c:	697b      	ldr	r3, [r7, #20]
2400d53e:	0a1b      	lsrs	r3, r3, #8
2400d540:	f003 0301 	and.w	r3, r3, #1
2400d544:	2b00      	cmp	r3, #0
2400d546:	d010      	beq.n	2400d56a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400d548:	693b      	ldr	r3, [r7, #16]
2400d54a:	09db      	lsrs	r3, r3, #7
2400d54c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400d550:	2b00      	cmp	r3, #0
2400d552:	d00a      	beq.n	2400d56a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400d554:	687b      	ldr	r3, [r7, #4]
2400d556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d558:	f043 0201 	orr.w	r2, r3, #1
2400d55c:	687b      	ldr	r3, [r7, #4]
2400d55e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400d560:	687b      	ldr	r3, [r7, #4]
2400d562:	681b      	ldr	r3, [r3, #0]
2400d564:	f44f 7280 	mov.w	r2, #256	; 0x100
2400d568:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400d56a:	697b      	ldr	r3, [r7, #20]
2400d56c:	0a9b      	lsrs	r3, r3, #10
2400d56e:	f003 0301 	and.w	r3, r3, #1
2400d572:	2b00      	cmp	r3, #0
2400d574:	d010      	beq.n	2400d598 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400d576:	693b      	ldr	r3, [r7, #16]
2400d578:	09db      	lsrs	r3, r3, #7
2400d57a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400d57e:	2b00      	cmp	r3, #0
2400d580:	d00a      	beq.n	2400d598 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400d582:	687b      	ldr	r3, [r7, #4]
2400d584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d586:	f043 0208 	orr.w	r2, r3, #8
2400d58a:	687b      	ldr	r3, [r7, #4]
2400d58c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400d58e:	687b      	ldr	r3, [r7, #4]
2400d590:	681b      	ldr	r3, [r3, #0]
2400d592:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400d596:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400d598:	697b      	ldr	r3, [r7, #20]
2400d59a:	0a5b      	lsrs	r3, r3, #9
2400d59c:	f003 0301 	and.w	r3, r3, #1
2400d5a0:	2b00      	cmp	r3, #0
2400d5a2:	d010      	beq.n	2400d5c6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400d5a4:	693b      	ldr	r3, [r7, #16]
2400d5a6:	09db      	lsrs	r3, r3, #7
2400d5a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400d5ac:	2b00      	cmp	r3, #0
2400d5ae:	d00a      	beq.n	2400d5c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400d5b0:	687b      	ldr	r3, [r7, #4]
2400d5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d5b4:	f043 0202 	orr.w	r2, r3, #2
2400d5b8:	687b      	ldr	r3, [r7, #4]
2400d5ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400d5bc:	687b      	ldr	r3, [r7, #4]
2400d5be:	681b      	ldr	r3, [r3, #0]
2400d5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d5c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400d5c6:	687b      	ldr	r3, [r7, #4]
2400d5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d5ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400d5cc:	68fb      	ldr	r3, [r7, #12]
2400d5ce:	f003 030b 	and.w	r3, r3, #11
2400d5d2:	2b00      	cmp	r3, #0
2400d5d4:	d003      	beq.n	2400d5de <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
2400d5d6:	68f9      	ldr	r1, [r7, #12]
2400d5d8:	6878      	ldr	r0, [r7, #4]
2400d5da:	f001 fa75 	bl	2400eac8 <I2C_ITError>
  }
}
2400d5de:	bf00      	nop
2400d5e0:	3718      	adds	r7, #24
2400d5e2:	46bd      	mov	sp, r7
2400d5e4:	bd80      	pop	{r7, pc}

2400d5e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d5e6:	b480      	push	{r7}
2400d5e8:	b083      	sub	sp, #12
2400d5ea:	af00      	add	r7, sp, #0
2400d5ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2400d5ee:	bf00      	nop
2400d5f0:	370c      	adds	r7, #12
2400d5f2:	46bd      	mov	sp, r7
2400d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d5f8:	4770      	bx	lr

2400d5fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d5fa:	b480      	push	{r7}
2400d5fc:	b083      	sub	sp, #12
2400d5fe:	af00      	add	r7, sp, #0
2400d600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2400d602:	bf00      	nop
2400d604:	370c      	adds	r7, #12
2400d606:	46bd      	mov	sp, r7
2400d608:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d60c:	4770      	bx	lr

2400d60e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d60e:	b480      	push	{r7}
2400d610:	b083      	sub	sp, #12
2400d612:	af00      	add	r7, sp, #0
2400d614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2400d616:	bf00      	nop
2400d618:	370c      	adds	r7, #12
2400d61a:	46bd      	mov	sp, r7
2400d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d620:	4770      	bx	lr

2400d622 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d622:	b480      	push	{r7}
2400d624:	b083      	sub	sp, #12
2400d626:	af00      	add	r7, sp, #0
2400d628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2400d62a:	bf00      	nop
2400d62c:	370c      	adds	r7, #12
2400d62e:	46bd      	mov	sp, r7
2400d630:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d634:	4770      	bx	lr

2400d636 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2400d636:	b480      	push	{r7}
2400d638:	b083      	sub	sp, #12
2400d63a:	af00      	add	r7, sp, #0
2400d63c:	6078      	str	r0, [r7, #4]
2400d63e:	460b      	mov	r3, r1
2400d640:	70fb      	strb	r3, [r7, #3]
2400d642:	4613      	mov	r3, r2
2400d644:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2400d646:	bf00      	nop
2400d648:	370c      	adds	r7, #12
2400d64a:	46bd      	mov	sp, r7
2400d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d650:	4770      	bx	lr

2400d652 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d652:	b480      	push	{r7}
2400d654:	b083      	sub	sp, #12
2400d656:	af00      	add	r7, sp, #0
2400d658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2400d65a:	bf00      	nop
2400d65c:	370c      	adds	r7, #12
2400d65e:	46bd      	mov	sp, r7
2400d660:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d664:	4770      	bx	lr

2400d666 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d666:	b480      	push	{r7}
2400d668:	b083      	sub	sp, #12
2400d66a:	af00      	add	r7, sp, #0
2400d66c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2400d66e:	bf00      	nop
2400d670:	370c      	adds	r7, #12
2400d672:	46bd      	mov	sp, r7
2400d674:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d678:	4770      	bx	lr

2400d67a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d67a:	b480      	push	{r7}
2400d67c:	b083      	sub	sp, #12
2400d67e:	af00      	add	r7, sp, #0
2400d680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2400d682:	bf00      	nop
2400d684:	370c      	adds	r7, #12
2400d686:	46bd      	mov	sp, r7
2400d688:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d68c:	4770      	bx	lr

2400d68e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400d68e:	b480      	push	{r7}
2400d690:	b083      	sub	sp, #12
2400d692:	af00      	add	r7, sp, #0
2400d694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2400d696:	bf00      	nop
2400d698:	370c      	adds	r7, #12
2400d69a:	46bd      	mov	sp, r7
2400d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d6a0:	4770      	bx	lr

2400d6a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400d6a2:	b480      	push	{r7}
2400d6a4:	b083      	sub	sp, #12
2400d6a6:	af00      	add	r7, sp, #0
2400d6a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2400d6aa:	bf00      	nop
2400d6ac:	370c      	adds	r7, #12
2400d6ae:	46bd      	mov	sp, r7
2400d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d6b4:	4770      	bx	lr

2400d6b6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
2400d6b6:	b480      	push	{r7}
2400d6b8:	b083      	sub	sp, #12
2400d6ba:	af00      	add	r7, sp, #0
2400d6bc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2400d6be:	687b      	ldr	r3, [r7, #4]
2400d6c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d6c4:	b2db      	uxtb	r3, r3
}
2400d6c6:	4618      	mov	r0, r3
2400d6c8:	370c      	adds	r7, #12
2400d6ca:	46bd      	mov	sp, r7
2400d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d6d0:	4770      	bx	lr

2400d6d2 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
2400d6d2:	b480      	push	{r7}
2400d6d4:	b083      	sub	sp, #12
2400d6d6:	af00      	add	r7, sp, #0
2400d6d8:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2400d6da:	687b      	ldr	r3, [r7, #4]
2400d6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400d6e0:	b2db      	uxtb	r3, r3
}
2400d6e2:	4618      	mov	r0, r3
2400d6e4:	370c      	adds	r7, #12
2400d6e6:	46bd      	mov	sp, r7
2400d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d6ec:	4770      	bx	lr

2400d6ee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
2400d6ee:	b480      	push	{r7}
2400d6f0:	b083      	sub	sp, #12
2400d6f2:	af00      	add	r7, sp, #0
2400d6f4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2400d6f6:	687b      	ldr	r3, [r7, #4]
2400d6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
2400d6fa:	4618      	mov	r0, r3
2400d6fc:	370c      	adds	r7, #12
2400d6fe:	46bd      	mov	sp, r7
2400d700:	f85d 7b04 	ldr.w	r7, [sp], #4
2400d704:	4770      	bx	lr

2400d706 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400d706:	b580      	push	{r7, lr}
2400d708:	b088      	sub	sp, #32
2400d70a:	af02      	add	r7, sp, #8
2400d70c:	60f8      	str	r0, [r7, #12]
2400d70e:	60b9      	str	r1, [r7, #8]
2400d710:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2400d712:	68bb      	ldr	r3, [r7, #8]
2400d714:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400d716:	68fb      	ldr	r3, [r7, #12]
2400d718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d71c:	2b01      	cmp	r3, #1
2400d71e:	d101      	bne.n	2400d724 <I2C_Master_ISR_IT+0x1e>
2400d720:	2302      	movs	r3, #2
2400d722:	e114      	b.n	2400d94e <I2C_Master_ISR_IT+0x248>
2400d724:	68fb      	ldr	r3, [r7, #12]
2400d726:	2201      	movs	r2, #1
2400d728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d72c:	697b      	ldr	r3, [r7, #20]
2400d72e:	091b      	lsrs	r3, r3, #4
2400d730:	f003 0301 	and.w	r3, r3, #1
2400d734:	2b00      	cmp	r3, #0
2400d736:	d013      	beq.n	2400d760 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d738:	687b      	ldr	r3, [r7, #4]
2400d73a:	091b      	lsrs	r3, r3, #4
2400d73c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d740:	2b00      	cmp	r3, #0
2400d742:	d00d      	beq.n	2400d760 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d744:	68fb      	ldr	r3, [r7, #12]
2400d746:	681b      	ldr	r3, [r3, #0]
2400d748:	2210      	movs	r2, #16
2400d74a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d74c:	68fb      	ldr	r3, [r7, #12]
2400d74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d750:	f043 0204 	orr.w	r2, r3, #4
2400d754:	68fb      	ldr	r3, [r7, #12]
2400d756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400d758:	68f8      	ldr	r0, [r7, #12]
2400d75a:	f001 faac 	bl	2400ecb6 <I2C_Flush_TXDR>
2400d75e:	e0e1      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d760:	697b      	ldr	r3, [r7, #20]
2400d762:	089b      	lsrs	r3, r3, #2
2400d764:	f003 0301 	and.w	r3, r3, #1
2400d768:	2b00      	cmp	r3, #0
2400d76a:	d023      	beq.n	2400d7b4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400d76c:	687b      	ldr	r3, [r7, #4]
2400d76e:	089b      	lsrs	r3, r3, #2
2400d770:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d774:	2b00      	cmp	r3, #0
2400d776:	d01d      	beq.n	2400d7b4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400d778:	697b      	ldr	r3, [r7, #20]
2400d77a:	f023 0304 	bic.w	r3, r3, #4
2400d77e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400d780:	68fb      	ldr	r3, [r7, #12]
2400d782:	681b      	ldr	r3, [r3, #0]
2400d784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400d786:	68fb      	ldr	r3, [r7, #12]
2400d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d78a:	b2d2      	uxtb	r2, r2
2400d78c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400d78e:	68fb      	ldr	r3, [r7, #12]
2400d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d792:	1c5a      	adds	r2, r3, #1
2400d794:	68fb      	ldr	r3, [r7, #12]
2400d796:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400d798:	68fb      	ldr	r3, [r7, #12]
2400d79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d79c:	3b01      	subs	r3, #1
2400d79e:	b29a      	uxth	r2, r3
2400d7a0:	68fb      	ldr	r3, [r7, #12]
2400d7a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400d7a4:	68fb      	ldr	r3, [r7, #12]
2400d7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d7a8:	b29b      	uxth	r3, r3
2400d7aa:	3b01      	subs	r3, #1
2400d7ac:	b29a      	uxth	r2, r3
2400d7ae:	68fb      	ldr	r3, [r7, #12]
2400d7b0:	855a      	strh	r2, [r3, #42]	; 0x2a
2400d7b2:	e0b7      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d7b4:	697b      	ldr	r3, [r7, #20]
2400d7b6:	085b      	lsrs	r3, r3, #1
2400d7b8:	f003 0301 	and.w	r3, r3, #1
2400d7bc:	2b00      	cmp	r3, #0
2400d7be:	d01e      	beq.n	2400d7fe <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400d7c0:	687b      	ldr	r3, [r7, #4]
2400d7c2:	085b      	lsrs	r3, r3, #1
2400d7c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d7c8:	2b00      	cmp	r3, #0
2400d7ca:	d018      	beq.n	2400d7fe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400d7cc:	68fb      	ldr	r3, [r7, #12]
2400d7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d7d0:	781a      	ldrb	r2, [r3, #0]
2400d7d2:	68fb      	ldr	r3, [r7, #12]
2400d7d4:	681b      	ldr	r3, [r3, #0]
2400d7d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400d7d8:	68fb      	ldr	r3, [r7, #12]
2400d7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d7dc:	1c5a      	adds	r2, r3, #1
2400d7de:	68fb      	ldr	r3, [r7, #12]
2400d7e0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400d7e2:	68fb      	ldr	r3, [r7, #12]
2400d7e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d7e6:	3b01      	subs	r3, #1
2400d7e8:	b29a      	uxth	r2, r3
2400d7ea:	68fb      	ldr	r3, [r7, #12]
2400d7ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400d7ee:	68fb      	ldr	r3, [r7, #12]
2400d7f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d7f2:	b29b      	uxth	r3, r3
2400d7f4:	3b01      	subs	r3, #1
2400d7f6:	b29a      	uxth	r2, r3
2400d7f8:	68fb      	ldr	r3, [r7, #12]
2400d7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
2400d7fc:	e092      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400d7fe:	697b      	ldr	r3, [r7, #20]
2400d800:	09db      	lsrs	r3, r3, #7
2400d802:	f003 0301 	and.w	r3, r3, #1
2400d806:	2b00      	cmp	r3, #0
2400d808:	d05d      	beq.n	2400d8c6 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d80a:	687b      	ldr	r3, [r7, #4]
2400d80c:	099b      	lsrs	r3, r3, #6
2400d80e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400d812:	2b00      	cmp	r3, #0
2400d814:	d057      	beq.n	2400d8c6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d816:	68fb      	ldr	r3, [r7, #12]
2400d818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d81a:	b29b      	uxth	r3, r3
2400d81c:	2b00      	cmp	r3, #0
2400d81e:	d040      	beq.n	2400d8a2 <I2C_Master_ISR_IT+0x19c>
2400d820:	68fb      	ldr	r3, [r7, #12]
2400d822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d824:	2b00      	cmp	r3, #0
2400d826:	d13c      	bne.n	2400d8a2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400d828:	68fb      	ldr	r3, [r7, #12]
2400d82a:	681b      	ldr	r3, [r3, #0]
2400d82c:	685b      	ldr	r3, [r3, #4]
2400d82e:	b29b      	uxth	r3, r3
2400d830:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400d834:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d836:	68fb      	ldr	r3, [r7, #12]
2400d838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d83a:	b29b      	uxth	r3, r3
2400d83c:	2bff      	cmp	r3, #255	; 0xff
2400d83e:	d90e      	bls.n	2400d85e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400d840:	68fb      	ldr	r3, [r7, #12]
2400d842:	22ff      	movs	r2, #255	; 0xff
2400d844:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400d846:	68fb      	ldr	r3, [r7, #12]
2400d848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d84a:	b2da      	uxtb	r2, r3
2400d84c:	8a79      	ldrh	r1, [r7, #18]
2400d84e:	2300      	movs	r3, #0
2400d850:	9300      	str	r3, [sp, #0]
2400d852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d856:	68f8      	ldr	r0, [r7, #12]
2400d858:	f001 ff34 	bl	2400f6c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d85c:	e032      	b.n	2400d8c4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400d85e:	68fb      	ldr	r3, [r7, #12]
2400d860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d862:	b29a      	uxth	r2, r3
2400d864:	68fb      	ldr	r3, [r7, #12]
2400d866:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400d868:	68fb      	ldr	r3, [r7, #12]
2400d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d86c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d870:	d00b      	beq.n	2400d88a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d872:	68fb      	ldr	r3, [r7, #12]
2400d874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d876:	b2da      	uxtb	r2, r3
2400d878:	68fb      	ldr	r3, [r7, #12]
2400d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d87c:	8a79      	ldrh	r1, [r7, #18]
2400d87e:	2000      	movs	r0, #0
2400d880:	9000      	str	r0, [sp, #0]
2400d882:	68f8      	ldr	r0, [r7, #12]
2400d884:	f001 ff1e 	bl	2400f6c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d888:	e01c      	b.n	2400d8c4 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d88a:	68fb      	ldr	r3, [r7, #12]
2400d88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d88e:	b2da      	uxtb	r2, r3
2400d890:	8a79      	ldrh	r1, [r7, #18]
2400d892:	2300      	movs	r3, #0
2400d894:	9300      	str	r3, [sp, #0]
2400d896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d89a:	68f8      	ldr	r0, [r7, #12]
2400d89c:	f001 ff12 	bl	2400f6c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d8a0:	e010      	b.n	2400d8c4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d8a2:	68fb      	ldr	r3, [r7, #12]
2400d8a4:	681b      	ldr	r3, [r3, #0]
2400d8a6:	685b      	ldr	r3, [r3, #4]
2400d8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d8ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d8b0:	d003      	beq.n	2400d8ba <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400d8b2:	68f8      	ldr	r0, [r7, #12]
2400d8b4:	f000 fd54 	bl	2400e360 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d8b8:	e034      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d8ba:	2140      	movs	r1, #64	; 0x40
2400d8bc:	68f8      	ldr	r0, [r7, #12]
2400d8be:	f001 f903 	bl	2400eac8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d8c2:	e02f      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
2400d8c4:	e02e      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d8c6:	697b      	ldr	r3, [r7, #20]
2400d8c8:	099b      	lsrs	r3, r3, #6
2400d8ca:	f003 0301 	and.w	r3, r3, #1
2400d8ce:	2b00      	cmp	r3, #0
2400d8d0:	d028      	beq.n	2400d924 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d8d2:	687b      	ldr	r3, [r7, #4]
2400d8d4:	099b      	lsrs	r3, r3, #6
2400d8d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d8da:	2b00      	cmp	r3, #0
2400d8dc:	d022      	beq.n	2400d924 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
2400d8de:	68fb      	ldr	r3, [r7, #12]
2400d8e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d8e2:	b29b      	uxth	r3, r3
2400d8e4:	2b00      	cmp	r3, #0
2400d8e6:	d119      	bne.n	2400d91c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d8e8:	68fb      	ldr	r3, [r7, #12]
2400d8ea:	681b      	ldr	r3, [r3, #0]
2400d8ec:	685b      	ldr	r3, [r3, #4]
2400d8ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d8f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d8f6:	d015      	beq.n	2400d924 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400d8f8:	68fb      	ldr	r3, [r7, #12]
2400d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d8fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d900:	d108      	bne.n	2400d914 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d902:	68fb      	ldr	r3, [r7, #12]
2400d904:	681b      	ldr	r3, [r3, #0]
2400d906:	685a      	ldr	r2, [r3, #4]
2400d908:	68fb      	ldr	r3, [r7, #12]
2400d90a:	681b      	ldr	r3, [r3, #0]
2400d90c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d910:	605a      	str	r2, [r3, #4]
2400d912:	e007      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400d914:	68f8      	ldr	r0, [r7, #12]
2400d916:	f000 fd23 	bl	2400e360 <I2C_ITMasterSeqCplt>
2400d91a:	e003      	b.n	2400d924 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d91c:	2140      	movs	r1, #64	; 0x40
2400d91e:	68f8      	ldr	r0, [r7, #12]
2400d920:	f001 f8d2 	bl	2400eac8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d924:	697b      	ldr	r3, [r7, #20]
2400d926:	095b      	lsrs	r3, r3, #5
2400d928:	f003 0301 	and.w	r3, r3, #1
2400d92c:	2b00      	cmp	r3, #0
2400d92e:	d009      	beq.n	2400d944 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d930:	687b      	ldr	r3, [r7, #4]
2400d932:	095b      	lsrs	r3, r3, #5
2400d934:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d938:	2b00      	cmp	r3, #0
2400d93a:	d003      	beq.n	2400d944 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400d93c:	6979      	ldr	r1, [r7, #20]
2400d93e:	68f8      	ldr	r0, [r7, #12]
2400d940:	f000 fdaa 	bl	2400e498 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d944:	68fb      	ldr	r3, [r7, #12]
2400d946:	2200      	movs	r2, #0
2400d948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d94c:	2300      	movs	r3, #0
}
2400d94e:	4618      	mov	r0, r3
2400d950:	3718      	adds	r7, #24
2400d952:	46bd      	mov	sp, r7
2400d954:	bd80      	pop	{r7, pc}

2400d956 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2400d956:	b580      	push	{r7, lr}
2400d958:	b086      	sub	sp, #24
2400d95a:	af00      	add	r7, sp, #0
2400d95c:	60f8      	str	r0, [r7, #12]
2400d95e:	60b9      	str	r1, [r7, #8]
2400d960:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400d962:	68fb      	ldr	r3, [r7, #12]
2400d964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d966:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400d968:	68bb      	ldr	r3, [r7, #8]
2400d96a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2400d96c:	68fb      	ldr	r3, [r7, #12]
2400d96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d972:	2b01      	cmp	r3, #1
2400d974:	d101      	bne.n	2400d97a <I2C_Slave_ISR_IT+0x24>
2400d976:	2302      	movs	r3, #2
2400d978:	e0ec      	b.n	2400db54 <I2C_Slave_ISR_IT+0x1fe>
2400d97a:	68fb      	ldr	r3, [r7, #12]
2400d97c:	2201      	movs	r2, #1
2400d97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d982:	693b      	ldr	r3, [r7, #16]
2400d984:	095b      	lsrs	r3, r3, #5
2400d986:	f003 0301 	and.w	r3, r3, #1
2400d98a:	2b00      	cmp	r3, #0
2400d98c:	d009      	beq.n	2400d9a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d98e:	687b      	ldr	r3, [r7, #4]
2400d990:	095b      	lsrs	r3, r3, #5
2400d992:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d996:	2b00      	cmp	r3, #0
2400d998:	d003      	beq.n	2400d9a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2400d99a:	6939      	ldr	r1, [r7, #16]
2400d99c:	68f8      	ldr	r0, [r7, #12]
2400d99e:	f000 fe45 	bl	2400e62c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d9a2:	693b      	ldr	r3, [r7, #16]
2400d9a4:	091b      	lsrs	r3, r3, #4
2400d9a6:	f003 0301 	and.w	r3, r3, #1
2400d9aa:	2b00      	cmp	r3, #0
2400d9ac:	d04d      	beq.n	2400da4a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d9ae:	687b      	ldr	r3, [r7, #4]
2400d9b0:	091b      	lsrs	r3, r3, #4
2400d9b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d9b6:	2b00      	cmp	r3, #0
2400d9b8:	d047      	beq.n	2400da4a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400d9ba:	68fb      	ldr	r3, [r7, #12]
2400d9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d9be:	b29b      	uxth	r3, r3
2400d9c0:	2b00      	cmp	r3, #0
2400d9c2:	d128      	bne.n	2400da16 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400d9c4:	68fb      	ldr	r3, [r7, #12]
2400d9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d9ca:	b2db      	uxtb	r3, r3
2400d9cc:	2b28      	cmp	r3, #40	; 0x28
2400d9ce:	d108      	bne.n	2400d9e2 <I2C_Slave_ISR_IT+0x8c>
2400d9d0:	697b      	ldr	r3, [r7, #20]
2400d9d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d9d6:	d104      	bne.n	2400d9e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400d9d8:	6939      	ldr	r1, [r7, #16]
2400d9da:	68f8      	ldr	r0, [r7, #12]
2400d9dc:	f001 f81e 	bl	2400ea1c <I2C_ITListenCplt>
2400d9e0:	e032      	b.n	2400da48 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400d9e2:	68fb      	ldr	r3, [r7, #12]
2400d9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d9e8:	b2db      	uxtb	r3, r3
2400d9ea:	2b29      	cmp	r3, #41	; 0x29
2400d9ec:	d10e      	bne.n	2400da0c <I2C_Slave_ISR_IT+0xb6>
2400d9ee:	697b      	ldr	r3, [r7, #20]
2400d9f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d9f4:	d00a      	beq.n	2400da0c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d9f6:	68fb      	ldr	r3, [r7, #12]
2400d9f8:	681b      	ldr	r3, [r3, #0]
2400d9fa:	2210      	movs	r2, #16
2400d9fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400d9fe:	68f8      	ldr	r0, [r7, #12]
2400da00:	f001 f959 	bl	2400ecb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400da04:	68f8      	ldr	r0, [r7, #12]
2400da06:	f000 fce8 	bl	2400e3da <I2C_ITSlaveSeqCplt>
2400da0a:	e01d      	b.n	2400da48 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400da0c:	68fb      	ldr	r3, [r7, #12]
2400da0e:	681b      	ldr	r3, [r3, #0]
2400da10:	2210      	movs	r2, #16
2400da12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2400da14:	e096      	b.n	2400db44 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400da16:	68fb      	ldr	r3, [r7, #12]
2400da18:	681b      	ldr	r3, [r3, #0]
2400da1a:	2210      	movs	r2, #16
2400da1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400da1e:	68fb      	ldr	r3, [r7, #12]
2400da20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400da22:	f043 0204 	orr.w	r2, r3, #4
2400da26:	68fb      	ldr	r3, [r7, #12]
2400da28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400da2a:	697b      	ldr	r3, [r7, #20]
2400da2c:	2b00      	cmp	r3, #0
2400da2e:	d004      	beq.n	2400da3a <I2C_Slave_ISR_IT+0xe4>
2400da30:	697b      	ldr	r3, [r7, #20]
2400da32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400da36:	f040 8085 	bne.w	2400db44 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400da3a:	68fb      	ldr	r3, [r7, #12]
2400da3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400da3e:	4619      	mov	r1, r3
2400da40:	68f8      	ldr	r0, [r7, #12]
2400da42:	f001 f841 	bl	2400eac8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400da46:	e07d      	b.n	2400db44 <I2C_Slave_ISR_IT+0x1ee>
2400da48:	e07c      	b.n	2400db44 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400da4a:	693b      	ldr	r3, [r7, #16]
2400da4c:	089b      	lsrs	r3, r3, #2
2400da4e:	f003 0301 	and.w	r3, r3, #1
2400da52:	2b00      	cmp	r3, #0
2400da54:	d030      	beq.n	2400dab8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400da56:	687b      	ldr	r3, [r7, #4]
2400da58:	089b      	lsrs	r3, r3, #2
2400da5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400da5e:	2b00      	cmp	r3, #0
2400da60:	d02a      	beq.n	2400dab8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
2400da62:	68fb      	ldr	r3, [r7, #12]
2400da64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400da66:	b29b      	uxth	r3, r3
2400da68:	2b00      	cmp	r3, #0
2400da6a:	d018      	beq.n	2400da9e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400da6c:	68fb      	ldr	r3, [r7, #12]
2400da6e:	681b      	ldr	r3, [r3, #0]
2400da70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400da72:	68fb      	ldr	r3, [r7, #12]
2400da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400da76:	b2d2      	uxtb	r2, r2
2400da78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400da7a:	68fb      	ldr	r3, [r7, #12]
2400da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400da7e:	1c5a      	adds	r2, r3, #1
2400da80:	68fb      	ldr	r3, [r7, #12]
2400da82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400da84:	68fb      	ldr	r3, [r7, #12]
2400da86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400da88:	3b01      	subs	r3, #1
2400da8a:	b29a      	uxth	r2, r3
2400da8c:	68fb      	ldr	r3, [r7, #12]
2400da8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400da90:	68fb      	ldr	r3, [r7, #12]
2400da92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400da94:	b29b      	uxth	r3, r3
2400da96:	3b01      	subs	r3, #1
2400da98:	b29a      	uxth	r2, r3
2400da9a:	68fb      	ldr	r3, [r7, #12]
2400da9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2400da9e:	68fb      	ldr	r3, [r7, #12]
2400daa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400daa2:	b29b      	uxth	r3, r3
2400daa4:	2b00      	cmp	r3, #0
2400daa6:	d14f      	bne.n	2400db48 <I2C_Slave_ISR_IT+0x1f2>
2400daa8:	697b      	ldr	r3, [r7, #20]
2400daaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400daae:	d04b      	beq.n	2400db48 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2400dab0:	68f8      	ldr	r0, [r7, #12]
2400dab2:	f000 fc92 	bl	2400e3da <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2400dab6:	e047      	b.n	2400db48 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400dab8:	693b      	ldr	r3, [r7, #16]
2400daba:	08db      	lsrs	r3, r3, #3
2400dabc:	f003 0301 	and.w	r3, r3, #1
2400dac0:	2b00      	cmp	r3, #0
2400dac2:	d00a      	beq.n	2400dada <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400dac4:	687b      	ldr	r3, [r7, #4]
2400dac6:	08db      	lsrs	r3, r3, #3
2400dac8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400dacc:	2b00      	cmp	r3, #0
2400dace:	d004      	beq.n	2400dada <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2400dad0:	6939      	ldr	r1, [r7, #16]
2400dad2:	68f8      	ldr	r0, [r7, #12]
2400dad4:	f000 fbc0 	bl	2400e258 <I2C_ITAddrCplt>
2400dad8:	e037      	b.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400dada:	693b      	ldr	r3, [r7, #16]
2400dadc:	085b      	lsrs	r3, r3, #1
2400dade:	f003 0301 	and.w	r3, r3, #1
2400dae2:	2b00      	cmp	r3, #0
2400dae4:	d031      	beq.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400dae6:	687b      	ldr	r3, [r7, #4]
2400dae8:	085b      	lsrs	r3, r3, #1
2400daea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400daee:	2b00      	cmp	r3, #0
2400daf0:	d02b      	beq.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2400daf2:	68fb      	ldr	r3, [r7, #12]
2400daf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400daf6:	b29b      	uxth	r3, r3
2400daf8:	2b00      	cmp	r3, #0
2400dafa:	d018      	beq.n	2400db2e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400dafc:	68fb      	ldr	r3, [r7, #12]
2400dafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400db00:	781a      	ldrb	r2, [r3, #0]
2400db02:	68fb      	ldr	r3, [r7, #12]
2400db04:	681b      	ldr	r3, [r3, #0]
2400db06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400db08:	68fb      	ldr	r3, [r7, #12]
2400db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400db0c:	1c5a      	adds	r2, r3, #1
2400db0e:	68fb      	ldr	r3, [r7, #12]
2400db10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400db12:	68fb      	ldr	r3, [r7, #12]
2400db14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400db16:	b29b      	uxth	r3, r3
2400db18:	3b01      	subs	r3, #1
2400db1a:	b29a      	uxth	r2, r3
2400db1c:	68fb      	ldr	r3, [r7, #12]
2400db1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400db20:	68fb      	ldr	r3, [r7, #12]
2400db22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400db24:	3b01      	subs	r3, #1
2400db26:	b29a      	uxth	r2, r3
2400db28:	68fb      	ldr	r3, [r7, #12]
2400db2a:	851a      	strh	r2, [r3, #40]	; 0x28
2400db2c:	e00d      	b.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400db2e:	697b      	ldr	r3, [r7, #20]
2400db30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400db34:	d002      	beq.n	2400db3c <I2C_Slave_ISR_IT+0x1e6>
2400db36:	697b      	ldr	r3, [r7, #20]
2400db38:	2b00      	cmp	r3, #0
2400db3a:	d106      	bne.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400db3c:	68f8      	ldr	r0, [r7, #12]
2400db3e:	f000 fc4c 	bl	2400e3da <I2C_ITSlaveSeqCplt>
2400db42:	e002      	b.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
2400db44:	bf00      	nop
2400db46:	e000      	b.n	2400db4a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
2400db48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400db4a:	68fb      	ldr	r3, [r7, #12]
2400db4c:	2200      	movs	r2, #0
2400db4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400db52:	2300      	movs	r3, #0
}
2400db54:	4618      	mov	r0, r3
2400db56:	3718      	adds	r7, #24
2400db58:	46bd      	mov	sp, r7
2400db5a:	bd80      	pop	{r7, pc}

2400db5c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2400db5c:	b580      	push	{r7, lr}
2400db5e:	b088      	sub	sp, #32
2400db60:	af02      	add	r7, sp, #8
2400db62:	60f8      	str	r0, [r7, #12]
2400db64:	60b9      	str	r1, [r7, #8]
2400db66:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400db68:	68fb      	ldr	r3, [r7, #12]
2400db6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400db6e:	2b01      	cmp	r3, #1
2400db70:	d101      	bne.n	2400db76 <I2C_Master_ISR_DMA+0x1a>
2400db72:	2302      	movs	r3, #2
2400db74:	e0e1      	b.n	2400dd3a <I2C_Master_ISR_DMA+0x1de>
2400db76:	68fb      	ldr	r3, [r7, #12]
2400db78:	2201      	movs	r2, #1
2400db7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400db7e:	68bb      	ldr	r3, [r7, #8]
2400db80:	091b      	lsrs	r3, r3, #4
2400db82:	f003 0301 	and.w	r3, r3, #1
2400db86:	2b00      	cmp	r3, #0
2400db88:	d017      	beq.n	2400dbba <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400db8a:	687b      	ldr	r3, [r7, #4]
2400db8c:	091b      	lsrs	r3, r3, #4
2400db8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400db92:	2b00      	cmp	r3, #0
2400db94:	d011      	beq.n	2400dbba <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400db96:	68fb      	ldr	r3, [r7, #12]
2400db98:	681b      	ldr	r3, [r3, #0]
2400db9a:	2210      	movs	r2, #16
2400db9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400db9e:	68fb      	ldr	r3, [r7, #12]
2400dba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400dba2:	f043 0204 	orr.w	r2, r3, #4
2400dba6:	68fb      	ldr	r3, [r7, #12]
2400dba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400dbaa:	2120      	movs	r1, #32
2400dbac:	68f8      	ldr	r0, [r7, #12]
2400dbae:	f001 fdbb 	bl	2400f728 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400dbb2:	68f8      	ldr	r0, [r7, #12]
2400dbb4:	f001 f87f 	bl	2400ecb6 <I2C_Flush_TXDR>
2400dbb8:	e0ba      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400dbba:	68bb      	ldr	r3, [r7, #8]
2400dbbc:	09db      	lsrs	r3, r3, #7
2400dbbe:	f003 0301 	and.w	r3, r3, #1
2400dbc2:	2b00      	cmp	r3, #0
2400dbc4:	d072      	beq.n	2400dcac <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400dbc6:	687b      	ldr	r3, [r7, #4]
2400dbc8:	099b      	lsrs	r3, r3, #6
2400dbca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400dbce:	2b00      	cmp	r3, #0
2400dbd0:	d06c      	beq.n	2400dcac <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400dbd2:	68fb      	ldr	r3, [r7, #12]
2400dbd4:	681b      	ldr	r3, [r3, #0]
2400dbd6:	681a      	ldr	r2, [r3, #0]
2400dbd8:	68fb      	ldr	r3, [r7, #12]
2400dbda:	681b      	ldr	r3, [r3, #0]
2400dbdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2400dbe0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2400dbe2:	68fb      	ldr	r3, [r7, #12]
2400dbe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dbe6:	b29b      	uxth	r3, r3
2400dbe8:	2b00      	cmp	r3, #0
2400dbea:	d04e      	beq.n	2400dc8a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400dbec:	68fb      	ldr	r3, [r7, #12]
2400dbee:	681b      	ldr	r3, [r3, #0]
2400dbf0:	685b      	ldr	r3, [r3, #4]
2400dbf2:	b29b      	uxth	r3, r3
2400dbf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400dbf8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400dbfa:	68fb      	ldr	r3, [r7, #12]
2400dbfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dbfe:	b29b      	uxth	r3, r3
2400dc00:	2bff      	cmp	r3, #255	; 0xff
2400dc02:	d906      	bls.n	2400dc12 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400dc04:	68fb      	ldr	r3, [r7, #12]
2400dc06:	22ff      	movs	r2, #255	; 0xff
2400dc08:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
2400dc0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400dc0e:	617b      	str	r3, [r7, #20]
2400dc10:	e010      	b.n	2400dc34 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400dc12:	68fb      	ldr	r3, [r7, #12]
2400dc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dc16:	b29a      	uxth	r2, r3
2400dc18:	68fb      	ldr	r3, [r7, #12]
2400dc1a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400dc1c:	68fb      	ldr	r3, [r7, #12]
2400dc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400dc20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400dc24:	d003      	beq.n	2400dc2e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
2400dc26:	68fb      	ldr	r3, [r7, #12]
2400dc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400dc2a:	617b      	str	r3, [r7, #20]
2400dc2c:	e002      	b.n	2400dc34 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2400dc2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400dc32:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400dc34:	68fb      	ldr	r3, [r7, #12]
2400dc36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400dc38:	b2da      	uxtb	r2, r3
2400dc3a:	8a79      	ldrh	r1, [r7, #18]
2400dc3c:	2300      	movs	r3, #0
2400dc3e:	9300      	str	r3, [sp, #0]
2400dc40:	697b      	ldr	r3, [r7, #20]
2400dc42:	68f8      	ldr	r0, [r7, #12]
2400dc44:	f001 fd3e 	bl	2400f6c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400dc48:	68fb      	ldr	r3, [r7, #12]
2400dc4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dc4c:	b29a      	uxth	r2, r3
2400dc4e:	68fb      	ldr	r3, [r7, #12]
2400dc50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400dc52:	1ad3      	subs	r3, r2, r3
2400dc54:	b29a      	uxth	r2, r3
2400dc56:	68fb      	ldr	r3, [r7, #12]
2400dc58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400dc5a:	68fb      	ldr	r3, [r7, #12]
2400dc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dc60:	b2db      	uxtb	r3, r3
2400dc62:	2b22      	cmp	r3, #34	; 0x22
2400dc64:	d108      	bne.n	2400dc78 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400dc66:	68fb      	ldr	r3, [r7, #12]
2400dc68:	681b      	ldr	r3, [r3, #0]
2400dc6a:	681a      	ldr	r2, [r3, #0]
2400dc6c:	68fb      	ldr	r3, [r7, #12]
2400dc6e:	681b      	ldr	r3, [r3, #0]
2400dc70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400dc74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400dc76:	e05b      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400dc78:	68fb      	ldr	r3, [r7, #12]
2400dc7a:	681b      	ldr	r3, [r3, #0]
2400dc7c:	681a      	ldr	r2, [r3, #0]
2400dc7e:	68fb      	ldr	r3, [r7, #12]
2400dc80:	681b      	ldr	r3, [r3, #0]
2400dc82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400dc86:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400dc88:	e052      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400dc8a:	68fb      	ldr	r3, [r7, #12]
2400dc8c:	681b      	ldr	r3, [r3, #0]
2400dc8e:	685b      	ldr	r3, [r3, #4]
2400dc90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400dc94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400dc98:	d003      	beq.n	2400dca2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400dc9a:	68f8      	ldr	r0, [r7, #12]
2400dc9c:	f000 fb60 	bl	2400e360 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2400dca0:	e046      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400dca2:	2140      	movs	r1, #64	; 0x40
2400dca4:	68f8      	ldr	r0, [r7, #12]
2400dca6:	f000 ff0f 	bl	2400eac8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400dcaa:	e041      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400dcac:	68bb      	ldr	r3, [r7, #8]
2400dcae:	099b      	lsrs	r3, r3, #6
2400dcb0:	f003 0301 	and.w	r3, r3, #1
2400dcb4:	2b00      	cmp	r3, #0
2400dcb6:	d029      	beq.n	2400dd0c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400dcb8:	687b      	ldr	r3, [r7, #4]
2400dcba:	099b      	lsrs	r3, r3, #6
2400dcbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400dcc0:	2b00      	cmp	r3, #0
2400dcc2:	d023      	beq.n	2400dd0c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
2400dcc4:	68fb      	ldr	r3, [r7, #12]
2400dcc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400dcc8:	b29b      	uxth	r3, r3
2400dcca:	2b00      	cmp	r3, #0
2400dccc:	d119      	bne.n	2400dd02 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400dcce:	68fb      	ldr	r3, [r7, #12]
2400dcd0:	681b      	ldr	r3, [r3, #0]
2400dcd2:	685b      	ldr	r3, [r3, #4]
2400dcd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400dcd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400dcdc:	d027      	beq.n	2400dd2e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400dcde:	68fb      	ldr	r3, [r7, #12]
2400dce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400dce2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400dce6:	d108      	bne.n	2400dcfa <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400dce8:	68fb      	ldr	r3, [r7, #12]
2400dcea:	681b      	ldr	r3, [r3, #0]
2400dcec:	685a      	ldr	r2, [r3, #4]
2400dcee:	68fb      	ldr	r3, [r7, #12]
2400dcf0:	681b      	ldr	r3, [r3, #0]
2400dcf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400dcf6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2400dcf8:	e019      	b.n	2400dd2e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400dcfa:	68f8      	ldr	r0, [r7, #12]
2400dcfc:	f000 fb30 	bl	2400e360 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2400dd00:	e015      	b.n	2400dd2e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400dd02:	2140      	movs	r1, #64	; 0x40
2400dd04:	68f8      	ldr	r0, [r7, #12]
2400dd06:	f000 fedf 	bl	2400eac8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400dd0a:	e010      	b.n	2400dd2e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400dd0c:	68bb      	ldr	r3, [r7, #8]
2400dd0e:	095b      	lsrs	r3, r3, #5
2400dd10:	f003 0301 	and.w	r3, r3, #1
2400dd14:	2b00      	cmp	r3, #0
2400dd16:	d00b      	beq.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400dd18:	687b      	ldr	r3, [r7, #4]
2400dd1a:	095b      	lsrs	r3, r3, #5
2400dd1c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400dd20:	2b00      	cmp	r3, #0
2400dd22:	d005      	beq.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400dd24:	68b9      	ldr	r1, [r7, #8]
2400dd26:	68f8      	ldr	r0, [r7, #12]
2400dd28:	f000 fbb6 	bl	2400e498 <I2C_ITMasterCplt>
2400dd2c:	e000      	b.n	2400dd30 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
2400dd2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400dd30:	68fb      	ldr	r3, [r7, #12]
2400dd32:	2200      	movs	r2, #0
2400dd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400dd38:	2300      	movs	r3, #0
}
2400dd3a:	4618      	mov	r0, r3
2400dd3c:	3718      	adds	r7, #24
2400dd3e:	46bd      	mov	sp, r7
2400dd40:	bd80      	pop	{r7, pc}
	...

2400dd44 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400dd44:	b580      	push	{r7, lr}
2400dd46:	b088      	sub	sp, #32
2400dd48:	af00      	add	r7, sp, #0
2400dd4a:	60f8      	str	r0, [r7, #12]
2400dd4c:	60b9      	str	r1, [r7, #8]
2400dd4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400dd50:	68fb      	ldr	r3, [r7, #12]
2400dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400dd54:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2400dd56:	2300      	movs	r3, #0
2400dd58:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2400dd5a:	68fb      	ldr	r3, [r7, #12]
2400dd5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400dd60:	2b01      	cmp	r3, #1
2400dd62:	d101      	bne.n	2400dd68 <I2C_Slave_ISR_DMA+0x24>
2400dd64:	2302      	movs	r3, #2
2400dd66:	e1ca      	b.n	2400e0fe <I2C_Slave_ISR_DMA+0x3ba>
2400dd68:	68fb      	ldr	r3, [r7, #12]
2400dd6a:	2201      	movs	r2, #1
2400dd6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400dd70:	68bb      	ldr	r3, [r7, #8]
2400dd72:	095b      	lsrs	r3, r3, #5
2400dd74:	f003 0301 	and.w	r3, r3, #1
2400dd78:	2b00      	cmp	r3, #0
2400dd7a:	d009      	beq.n	2400dd90 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400dd7c:	687b      	ldr	r3, [r7, #4]
2400dd7e:	095b      	lsrs	r3, r3, #5
2400dd80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400dd84:	2b00      	cmp	r3, #0
2400dd86:	d003      	beq.n	2400dd90 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400dd88:	68b9      	ldr	r1, [r7, #8]
2400dd8a:	68f8      	ldr	r0, [r7, #12]
2400dd8c:	f000 fc4e 	bl	2400e62c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400dd90:	68bb      	ldr	r3, [r7, #8]
2400dd92:	091b      	lsrs	r3, r3, #4
2400dd94:	f003 0301 	and.w	r3, r3, #1
2400dd98:	2b00      	cmp	r3, #0
2400dd9a:	f000 819b 	beq.w	2400e0d4 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400dd9e:	687b      	ldr	r3, [r7, #4]
2400dda0:	091b      	lsrs	r3, r3, #4
2400dda2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400dda6:	2b00      	cmp	r3, #0
2400dda8:	f000 8194 	beq.w	2400e0d4 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ddac:	687b      	ldr	r3, [r7, #4]
2400ddae:	0b9b      	lsrs	r3, r3, #14
2400ddb0:	f003 0301 	and.w	r3, r3, #1
2400ddb4:	2b00      	cmp	r3, #0
2400ddb6:	d106      	bne.n	2400ddc6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2400ddb8:	687b      	ldr	r3, [r7, #4]
2400ddba:	0bdb      	lsrs	r3, r3, #15
2400ddbc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ddc0:	2b00      	cmp	r3, #0
2400ddc2:	f000 8180 	beq.w	2400e0c6 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2400ddc6:	68fb      	ldr	r3, [r7, #12]
2400ddc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ddca:	2b00      	cmp	r3, #0
2400ddcc:	d07c      	beq.n	2400dec8 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400ddce:	687b      	ldr	r3, [r7, #4]
2400ddd0:	0bdb      	lsrs	r3, r3, #15
2400ddd2:	f003 0301 	and.w	r3, r3, #1
2400ddd6:	2b00      	cmp	r3, #0
2400ddd8:	d076      	beq.n	2400dec8 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400ddda:	68fb      	ldr	r3, [r7, #12]
2400dddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ddde:	681b      	ldr	r3, [r3, #0]
2400dde0:	4a74      	ldr	r2, [pc, #464]	; (2400dfb4 <I2C_Slave_ISR_DMA+0x270>)
2400dde2:	4293      	cmp	r3, r2
2400dde4:	d059      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400dde6:	68fb      	ldr	r3, [r7, #12]
2400dde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ddea:	681b      	ldr	r3, [r3, #0]
2400ddec:	4a72      	ldr	r2, [pc, #456]	; (2400dfb8 <I2C_Slave_ISR_DMA+0x274>)
2400ddee:	4293      	cmp	r3, r2
2400ddf0:	d053      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400ddf2:	68fb      	ldr	r3, [r7, #12]
2400ddf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ddf6:	681b      	ldr	r3, [r3, #0]
2400ddf8:	4a70      	ldr	r2, [pc, #448]	; (2400dfbc <I2C_Slave_ISR_DMA+0x278>)
2400ddfa:	4293      	cmp	r3, r2
2400ddfc:	d04d      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400ddfe:	68fb      	ldr	r3, [r7, #12]
2400de00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de02:	681b      	ldr	r3, [r3, #0]
2400de04:	4a6e      	ldr	r2, [pc, #440]	; (2400dfc0 <I2C_Slave_ISR_DMA+0x27c>)
2400de06:	4293      	cmp	r3, r2
2400de08:	d047      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de0a:	68fb      	ldr	r3, [r7, #12]
2400de0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de0e:	681b      	ldr	r3, [r3, #0]
2400de10:	4a6c      	ldr	r2, [pc, #432]	; (2400dfc4 <I2C_Slave_ISR_DMA+0x280>)
2400de12:	4293      	cmp	r3, r2
2400de14:	d041      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de16:	68fb      	ldr	r3, [r7, #12]
2400de18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de1a:	681b      	ldr	r3, [r3, #0]
2400de1c:	4a6a      	ldr	r2, [pc, #424]	; (2400dfc8 <I2C_Slave_ISR_DMA+0x284>)
2400de1e:	4293      	cmp	r3, r2
2400de20:	d03b      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de22:	68fb      	ldr	r3, [r7, #12]
2400de24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de26:	681b      	ldr	r3, [r3, #0]
2400de28:	4a68      	ldr	r2, [pc, #416]	; (2400dfcc <I2C_Slave_ISR_DMA+0x288>)
2400de2a:	4293      	cmp	r3, r2
2400de2c:	d035      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de2e:	68fb      	ldr	r3, [r7, #12]
2400de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de32:	681b      	ldr	r3, [r3, #0]
2400de34:	4a66      	ldr	r2, [pc, #408]	; (2400dfd0 <I2C_Slave_ISR_DMA+0x28c>)
2400de36:	4293      	cmp	r3, r2
2400de38:	d02f      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de3a:	68fb      	ldr	r3, [r7, #12]
2400de3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de3e:	681b      	ldr	r3, [r3, #0]
2400de40:	4a64      	ldr	r2, [pc, #400]	; (2400dfd4 <I2C_Slave_ISR_DMA+0x290>)
2400de42:	4293      	cmp	r3, r2
2400de44:	d029      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de46:	68fb      	ldr	r3, [r7, #12]
2400de48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de4a:	681b      	ldr	r3, [r3, #0]
2400de4c:	4a62      	ldr	r2, [pc, #392]	; (2400dfd8 <I2C_Slave_ISR_DMA+0x294>)
2400de4e:	4293      	cmp	r3, r2
2400de50:	d023      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de52:	68fb      	ldr	r3, [r7, #12]
2400de54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de56:	681b      	ldr	r3, [r3, #0]
2400de58:	4a60      	ldr	r2, [pc, #384]	; (2400dfdc <I2C_Slave_ISR_DMA+0x298>)
2400de5a:	4293      	cmp	r3, r2
2400de5c:	d01d      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de5e:	68fb      	ldr	r3, [r7, #12]
2400de60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de62:	681b      	ldr	r3, [r3, #0]
2400de64:	4a5e      	ldr	r2, [pc, #376]	; (2400dfe0 <I2C_Slave_ISR_DMA+0x29c>)
2400de66:	4293      	cmp	r3, r2
2400de68:	d017      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de6a:	68fb      	ldr	r3, [r7, #12]
2400de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de6e:	681b      	ldr	r3, [r3, #0]
2400de70:	4a5c      	ldr	r2, [pc, #368]	; (2400dfe4 <I2C_Slave_ISR_DMA+0x2a0>)
2400de72:	4293      	cmp	r3, r2
2400de74:	d011      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de76:	68fb      	ldr	r3, [r7, #12]
2400de78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de7a:	681b      	ldr	r3, [r3, #0]
2400de7c:	4a5a      	ldr	r2, [pc, #360]	; (2400dfe8 <I2C_Slave_ISR_DMA+0x2a4>)
2400de7e:	4293      	cmp	r3, r2
2400de80:	d00b      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de82:	68fb      	ldr	r3, [r7, #12]
2400de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de86:	681b      	ldr	r3, [r3, #0]
2400de88:	4a58      	ldr	r2, [pc, #352]	; (2400dfec <I2C_Slave_ISR_DMA+0x2a8>)
2400de8a:	4293      	cmp	r3, r2
2400de8c:	d005      	beq.n	2400de9a <I2C_Slave_ISR_DMA+0x156>
2400de8e:	68fb      	ldr	r3, [r7, #12]
2400de90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de92:	681b      	ldr	r3, [r3, #0]
2400de94:	4a56      	ldr	r2, [pc, #344]	; (2400dff0 <I2C_Slave_ISR_DMA+0x2ac>)
2400de96:	4293      	cmp	r3, r2
2400de98:	d109      	bne.n	2400deae <I2C_Slave_ISR_DMA+0x16a>
2400de9a:	68fb      	ldr	r3, [r7, #12]
2400de9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400de9e:	681b      	ldr	r3, [r3, #0]
2400dea0:	685b      	ldr	r3, [r3, #4]
2400dea2:	2b00      	cmp	r3, #0
2400dea4:	bf0c      	ite	eq
2400dea6:	2301      	moveq	r3, #1
2400dea8:	2300      	movne	r3, #0
2400deaa:	b2db      	uxtb	r3, r3
2400deac:	e008      	b.n	2400dec0 <I2C_Slave_ISR_DMA+0x17c>
2400deae:	68fb      	ldr	r3, [r7, #12]
2400deb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400deb2:	681b      	ldr	r3, [r3, #0]
2400deb4:	685b      	ldr	r3, [r3, #4]
2400deb6:	2b00      	cmp	r3, #0
2400deb8:	bf0c      	ite	eq
2400deba:	2301      	moveq	r3, #1
2400debc:	2300      	movne	r3, #0
2400debe:	b2db      	uxtb	r3, r3
2400dec0:	2b00      	cmp	r3, #0
2400dec2:	d001      	beq.n	2400dec8 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
2400dec4:	2301      	movs	r3, #1
2400dec6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2400dec8:	68fb      	ldr	r3, [r7, #12]
2400deca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400decc:	2b00      	cmp	r3, #0
2400dece:	f000 809e 	beq.w	2400e00e <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400ded2:	687b      	ldr	r3, [r7, #4]
2400ded4:	0b9b      	lsrs	r3, r3, #14
2400ded6:	f003 0301 	and.w	r3, r3, #1
2400deda:	2b00      	cmp	r3, #0
2400dedc:	f000 8097 	beq.w	2400e00e <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400dee0:	68fb      	ldr	r3, [r7, #12]
2400dee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dee4:	681b      	ldr	r3, [r3, #0]
2400dee6:	4a33      	ldr	r2, [pc, #204]	; (2400dfb4 <I2C_Slave_ISR_DMA+0x270>)
2400dee8:	4293      	cmp	r3, r2
2400deea:	d059      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400deec:	68fb      	ldr	r3, [r7, #12]
2400deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400def0:	681b      	ldr	r3, [r3, #0]
2400def2:	4a31      	ldr	r2, [pc, #196]	; (2400dfb8 <I2C_Slave_ISR_DMA+0x274>)
2400def4:	4293      	cmp	r3, r2
2400def6:	d053      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400def8:	68fb      	ldr	r3, [r7, #12]
2400defa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400defc:	681b      	ldr	r3, [r3, #0]
2400defe:	4a2f      	ldr	r2, [pc, #188]	; (2400dfbc <I2C_Slave_ISR_DMA+0x278>)
2400df00:	4293      	cmp	r3, r2
2400df02:	d04d      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df04:	68fb      	ldr	r3, [r7, #12]
2400df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df08:	681b      	ldr	r3, [r3, #0]
2400df0a:	4a2d      	ldr	r2, [pc, #180]	; (2400dfc0 <I2C_Slave_ISR_DMA+0x27c>)
2400df0c:	4293      	cmp	r3, r2
2400df0e:	d047      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df10:	68fb      	ldr	r3, [r7, #12]
2400df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df14:	681b      	ldr	r3, [r3, #0]
2400df16:	4a2b      	ldr	r2, [pc, #172]	; (2400dfc4 <I2C_Slave_ISR_DMA+0x280>)
2400df18:	4293      	cmp	r3, r2
2400df1a:	d041      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df1c:	68fb      	ldr	r3, [r7, #12]
2400df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df20:	681b      	ldr	r3, [r3, #0]
2400df22:	4a29      	ldr	r2, [pc, #164]	; (2400dfc8 <I2C_Slave_ISR_DMA+0x284>)
2400df24:	4293      	cmp	r3, r2
2400df26:	d03b      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df28:	68fb      	ldr	r3, [r7, #12]
2400df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df2c:	681b      	ldr	r3, [r3, #0]
2400df2e:	4a27      	ldr	r2, [pc, #156]	; (2400dfcc <I2C_Slave_ISR_DMA+0x288>)
2400df30:	4293      	cmp	r3, r2
2400df32:	d035      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df34:	68fb      	ldr	r3, [r7, #12]
2400df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df38:	681b      	ldr	r3, [r3, #0]
2400df3a:	4a25      	ldr	r2, [pc, #148]	; (2400dfd0 <I2C_Slave_ISR_DMA+0x28c>)
2400df3c:	4293      	cmp	r3, r2
2400df3e:	d02f      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df40:	68fb      	ldr	r3, [r7, #12]
2400df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df44:	681b      	ldr	r3, [r3, #0]
2400df46:	4a23      	ldr	r2, [pc, #140]	; (2400dfd4 <I2C_Slave_ISR_DMA+0x290>)
2400df48:	4293      	cmp	r3, r2
2400df4a:	d029      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df4c:	68fb      	ldr	r3, [r7, #12]
2400df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df50:	681b      	ldr	r3, [r3, #0]
2400df52:	4a21      	ldr	r2, [pc, #132]	; (2400dfd8 <I2C_Slave_ISR_DMA+0x294>)
2400df54:	4293      	cmp	r3, r2
2400df56:	d023      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df58:	68fb      	ldr	r3, [r7, #12]
2400df5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df5c:	681b      	ldr	r3, [r3, #0]
2400df5e:	4a1f      	ldr	r2, [pc, #124]	; (2400dfdc <I2C_Slave_ISR_DMA+0x298>)
2400df60:	4293      	cmp	r3, r2
2400df62:	d01d      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df64:	68fb      	ldr	r3, [r7, #12]
2400df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df68:	681b      	ldr	r3, [r3, #0]
2400df6a:	4a1d      	ldr	r2, [pc, #116]	; (2400dfe0 <I2C_Slave_ISR_DMA+0x29c>)
2400df6c:	4293      	cmp	r3, r2
2400df6e:	d017      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df70:	68fb      	ldr	r3, [r7, #12]
2400df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df74:	681b      	ldr	r3, [r3, #0]
2400df76:	4a1b      	ldr	r2, [pc, #108]	; (2400dfe4 <I2C_Slave_ISR_DMA+0x2a0>)
2400df78:	4293      	cmp	r3, r2
2400df7a:	d011      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df7c:	68fb      	ldr	r3, [r7, #12]
2400df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df80:	681b      	ldr	r3, [r3, #0]
2400df82:	4a19      	ldr	r2, [pc, #100]	; (2400dfe8 <I2C_Slave_ISR_DMA+0x2a4>)
2400df84:	4293      	cmp	r3, r2
2400df86:	d00b      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df88:	68fb      	ldr	r3, [r7, #12]
2400df8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df8c:	681b      	ldr	r3, [r3, #0]
2400df8e:	4a17      	ldr	r2, [pc, #92]	; (2400dfec <I2C_Slave_ISR_DMA+0x2a8>)
2400df90:	4293      	cmp	r3, r2
2400df92:	d005      	beq.n	2400dfa0 <I2C_Slave_ISR_DMA+0x25c>
2400df94:	68fb      	ldr	r3, [r7, #12]
2400df96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df98:	681b      	ldr	r3, [r3, #0]
2400df9a:	4a15      	ldr	r2, [pc, #84]	; (2400dff0 <I2C_Slave_ISR_DMA+0x2ac>)
2400df9c:	4293      	cmp	r3, r2
2400df9e:	d129      	bne.n	2400dff4 <I2C_Slave_ISR_DMA+0x2b0>
2400dfa0:	68fb      	ldr	r3, [r7, #12]
2400dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfa4:	681b      	ldr	r3, [r3, #0]
2400dfa6:	685b      	ldr	r3, [r3, #4]
2400dfa8:	2b00      	cmp	r3, #0
2400dfaa:	bf0c      	ite	eq
2400dfac:	2301      	moveq	r3, #1
2400dfae:	2300      	movne	r3, #0
2400dfb0:	b2db      	uxtb	r3, r3
2400dfb2:	e028      	b.n	2400e006 <I2C_Slave_ISR_DMA+0x2c2>
2400dfb4:	40020010 	.word	0x40020010
2400dfb8:	40020028 	.word	0x40020028
2400dfbc:	40020040 	.word	0x40020040
2400dfc0:	40020058 	.word	0x40020058
2400dfc4:	40020070 	.word	0x40020070
2400dfc8:	40020088 	.word	0x40020088
2400dfcc:	400200a0 	.word	0x400200a0
2400dfd0:	400200b8 	.word	0x400200b8
2400dfd4:	40020410 	.word	0x40020410
2400dfd8:	40020428 	.word	0x40020428
2400dfdc:	40020440 	.word	0x40020440
2400dfe0:	40020458 	.word	0x40020458
2400dfe4:	40020470 	.word	0x40020470
2400dfe8:	40020488 	.word	0x40020488
2400dfec:	400204a0 	.word	0x400204a0
2400dff0:	400204b8 	.word	0x400204b8
2400dff4:	68fb      	ldr	r3, [r7, #12]
2400dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dff8:	681b      	ldr	r3, [r3, #0]
2400dffa:	685b      	ldr	r3, [r3, #4]
2400dffc:	2b00      	cmp	r3, #0
2400dffe:	bf0c      	ite	eq
2400e000:	2301      	moveq	r3, #1
2400e002:	2300      	movne	r3, #0
2400e004:	b2db      	uxtb	r3, r3
2400e006:	2b00      	cmp	r3, #0
2400e008:	d001      	beq.n	2400e00e <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
2400e00a:	2301      	movs	r3, #1
2400e00c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2400e00e:	69fb      	ldr	r3, [r7, #28]
2400e010:	2b01      	cmp	r3, #1
2400e012:	d128      	bne.n	2400e066 <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400e014:	68fb      	ldr	r3, [r7, #12]
2400e016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e01a:	b2db      	uxtb	r3, r3
2400e01c:	2b28      	cmp	r3, #40	; 0x28
2400e01e:	d108      	bne.n	2400e032 <I2C_Slave_ISR_DMA+0x2ee>
2400e020:	69bb      	ldr	r3, [r7, #24]
2400e022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400e026:	d104      	bne.n	2400e032 <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2400e028:	68b9      	ldr	r1, [r7, #8]
2400e02a:	68f8      	ldr	r0, [r7, #12]
2400e02c:	f000 fcf6 	bl	2400ea1c <I2C_ITListenCplt>
2400e030:	e048      	b.n	2400e0c4 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400e032:	68fb      	ldr	r3, [r7, #12]
2400e034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e038:	b2db      	uxtb	r3, r3
2400e03a:	2b29      	cmp	r3, #41	; 0x29
2400e03c:	d10e      	bne.n	2400e05c <I2C_Slave_ISR_DMA+0x318>
2400e03e:	69bb      	ldr	r3, [r7, #24]
2400e040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e044:	d00a      	beq.n	2400e05c <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e046:	68fb      	ldr	r3, [r7, #12]
2400e048:	681b      	ldr	r3, [r3, #0]
2400e04a:	2210      	movs	r2, #16
2400e04c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2400e04e:	68f8      	ldr	r0, [r7, #12]
2400e050:	f000 fe31 	bl	2400ecb6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2400e054:	68f8      	ldr	r0, [r7, #12]
2400e056:	f000 f9c0 	bl	2400e3da <I2C_ITSlaveSeqCplt>
2400e05a:	e033      	b.n	2400e0c4 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e05c:	68fb      	ldr	r3, [r7, #12]
2400e05e:	681b      	ldr	r3, [r3, #0]
2400e060:	2210      	movs	r2, #16
2400e062:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2400e064:	e034      	b.n	2400e0d0 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e066:	68fb      	ldr	r3, [r7, #12]
2400e068:	681b      	ldr	r3, [r3, #0]
2400e06a:	2210      	movs	r2, #16
2400e06c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e06e:	68fb      	ldr	r3, [r7, #12]
2400e070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e072:	f043 0204 	orr.w	r2, r3, #4
2400e076:	68fb      	ldr	r3, [r7, #12]
2400e078:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2400e07a:	68fb      	ldr	r3, [r7, #12]
2400e07c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e080:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400e082:	69bb      	ldr	r3, [r7, #24]
2400e084:	2b00      	cmp	r3, #0
2400e086:	d003      	beq.n	2400e090 <I2C_Slave_ISR_DMA+0x34c>
2400e088:	69bb      	ldr	r3, [r7, #24]
2400e08a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400e08e:	d11f      	bne.n	2400e0d0 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400e090:	7dfb      	ldrb	r3, [r7, #23]
2400e092:	2b21      	cmp	r3, #33	; 0x21
2400e094:	d002      	beq.n	2400e09c <I2C_Slave_ISR_DMA+0x358>
2400e096:	7dfb      	ldrb	r3, [r7, #23]
2400e098:	2b29      	cmp	r3, #41	; 0x29
2400e09a:	d103      	bne.n	2400e0a4 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400e09c:	68fb      	ldr	r3, [r7, #12]
2400e09e:	2221      	movs	r2, #33	; 0x21
2400e0a0:	631a      	str	r2, [r3, #48]	; 0x30
2400e0a2:	e008      	b.n	2400e0b6 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400e0a4:	7dfb      	ldrb	r3, [r7, #23]
2400e0a6:	2b22      	cmp	r3, #34	; 0x22
2400e0a8:	d002      	beq.n	2400e0b0 <I2C_Slave_ISR_DMA+0x36c>
2400e0aa:	7dfb      	ldrb	r3, [r7, #23]
2400e0ac:	2b2a      	cmp	r3, #42	; 0x2a
2400e0ae:	d102      	bne.n	2400e0b6 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400e0b0:	68fb      	ldr	r3, [r7, #12]
2400e0b2:	2222      	movs	r2, #34	; 0x22
2400e0b4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2400e0b6:	68fb      	ldr	r3, [r7, #12]
2400e0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e0ba:	4619      	mov	r1, r3
2400e0bc:	68f8      	ldr	r0, [r7, #12]
2400e0be:	f000 fd03 	bl	2400eac8 <I2C_ITError>
      if (treatdmanack == 1U)
2400e0c2:	e005      	b.n	2400e0d0 <I2C_Slave_ISR_DMA+0x38c>
2400e0c4:	e004      	b.n	2400e0d0 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e0c6:	68fb      	ldr	r3, [r7, #12]
2400e0c8:	681b      	ldr	r3, [r3, #0]
2400e0ca:	2210      	movs	r2, #16
2400e0cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400e0ce:	e011      	b.n	2400e0f4 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
2400e0d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400e0d2:	e00f      	b.n	2400e0f4 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400e0d4:	68bb      	ldr	r3, [r7, #8]
2400e0d6:	08db      	lsrs	r3, r3, #3
2400e0d8:	f003 0301 	and.w	r3, r3, #1
2400e0dc:	2b00      	cmp	r3, #0
2400e0de:	d009      	beq.n	2400e0f4 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400e0e0:	687b      	ldr	r3, [r7, #4]
2400e0e2:	08db      	lsrs	r3, r3, #3
2400e0e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400e0e8:	2b00      	cmp	r3, #0
2400e0ea:	d003      	beq.n	2400e0f4 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2400e0ec:	68b9      	ldr	r1, [r7, #8]
2400e0ee:	68f8      	ldr	r0, [r7, #12]
2400e0f0:	f000 f8b2 	bl	2400e258 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e0f4:	68fb      	ldr	r3, [r7, #12]
2400e0f6:	2200      	movs	r2, #0
2400e0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400e0fc:	2300      	movs	r3, #0
}
2400e0fe:	4618      	mov	r0, r3
2400e100:	3720      	adds	r7, #32
2400e102:	46bd      	mov	sp, r7
2400e104:	bd80      	pop	{r7, pc}
2400e106:	bf00      	nop

2400e108 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400e108:	b580      	push	{r7, lr}
2400e10a:	b086      	sub	sp, #24
2400e10c:	af02      	add	r7, sp, #8
2400e10e:	60f8      	str	r0, [r7, #12]
2400e110:	4608      	mov	r0, r1
2400e112:	4611      	mov	r1, r2
2400e114:	461a      	mov	r2, r3
2400e116:	4603      	mov	r3, r0
2400e118:	817b      	strh	r3, [r7, #10]
2400e11a:	460b      	mov	r3, r1
2400e11c:	813b      	strh	r3, [r7, #8]
2400e11e:	4613      	mov	r3, r2
2400e120:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400e122:	88fb      	ldrh	r3, [r7, #6]
2400e124:	b2da      	uxtb	r2, r3
2400e126:	8979      	ldrh	r1, [r7, #10]
2400e128:	4b20      	ldr	r3, [pc, #128]	; (2400e1ac <I2C_RequestMemoryWrite+0xa4>)
2400e12a:	9300      	str	r3, [sp, #0]
2400e12c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400e130:	68f8      	ldr	r0, [r7, #12]
2400e132:	f001 fac7 	bl	2400f6c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400e136:	69fa      	ldr	r2, [r7, #28]
2400e138:	69b9      	ldr	r1, [r7, #24]
2400e13a:	68f8      	ldr	r0, [r7, #12]
2400e13c:	f001 f8e0 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400e140:	4603      	mov	r3, r0
2400e142:	2b00      	cmp	r3, #0
2400e144:	d001      	beq.n	2400e14a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2400e146:	2301      	movs	r3, #1
2400e148:	e02c      	b.n	2400e1a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400e14a:	88fb      	ldrh	r3, [r7, #6]
2400e14c:	2b01      	cmp	r3, #1
2400e14e:	d105      	bne.n	2400e15c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400e150:	893b      	ldrh	r3, [r7, #8]
2400e152:	b2da      	uxtb	r2, r3
2400e154:	68fb      	ldr	r3, [r7, #12]
2400e156:	681b      	ldr	r3, [r3, #0]
2400e158:	629a      	str	r2, [r3, #40]	; 0x28
2400e15a:	e015      	b.n	2400e188 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400e15c:	893b      	ldrh	r3, [r7, #8]
2400e15e:	0a1b      	lsrs	r3, r3, #8
2400e160:	b29b      	uxth	r3, r3
2400e162:	b2da      	uxtb	r2, r3
2400e164:	68fb      	ldr	r3, [r7, #12]
2400e166:	681b      	ldr	r3, [r3, #0]
2400e168:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400e16a:	69fa      	ldr	r2, [r7, #28]
2400e16c:	69b9      	ldr	r1, [r7, #24]
2400e16e:	68f8      	ldr	r0, [r7, #12]
2400e170:	f001 f8c6 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400e174:	4603      	mov	r3, r0
2400e176:	2b00      	cmp	r3, #0
2400e178:	d001      	beq.n	2400e17e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2400e17a:	2301      	movs	r3, #1
2400e17c:	e012      	b.n	2400e1a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400e17e:	893b      	ldrh	r3, [r7, #8]
2400e180:	b2da      	uxtb	r2, r3
2400e182:	68fb      	ldr	r3, [r7, #12]
2400e184:	681b      	ldr	r3, [r3, #0]
2400e186:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2400e188:	69fb      	ldr	r3, [r7, #28]
2400e18a:	9300      	str	r3, [sp, #0]
2400e18c:	69bb      	ldr	r3, [r7, #24]
2400e18e:	2200      	movs	r2, #0
2400e190:	2180      	movs	r1, #128	; 0x80
2400e192:	68f8      	ldr	r0, [r7, #12]
2400e194:	f001 f874 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400e198:	4603      	mov	r3, r0
2400e19a:	2b00      	cmp	r3, #0
2400e19c:	d001      	beq.n	2400e1a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2400e19e:	2301      	movs	r3, #1
2400e1a0:	e000      	b.n	2400e1a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2400e1a2:	2300      	movs	r3, #0
}
2400e1a4:	4618      	mov	r0, r3
2400e1a6:	3710      	adds	r7, #16
2400e1a8:	46bd      	mov	sp, r7
2400e1aa:	bd80      	pop	{r7, pc}
2400e1ac:	80002000 	.word	0x80002000

2400e1b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2400e1b0:	b580      	push	{r7, lr}
2400e1b2:	b086      	sub	sp, #24
2400e1b4:	af02      	add	r7, sp, #8
2400e1b6:	60f8      	str	r0, [r7, #12]
2400e1b8:	4608      	mov	r0, r1
2400e1ba:	4611      	mov	r1, r2
2400e1bc:	461a      	mov	r2, r3
2400e1be:	4603      	mov	r3, r0
2400e1c0:	817b      	strh	r3, [r7, #10]
2400e1c2:	460b      	mov	r3, r1
2400e1c4:	813b      	strh	r3, [r7, #8]
2400e1c6:	4613      	mov	r3, r2
2400e1c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400e1ca:	88fb      	ldrh	r3, [r7, #6]
2400e1cc:	b2da      	uxtb	r2, r3
2400e1ce:	8979      	ldrh	r1, [r7, #10]
2400e1d0:	4b20      	ldr	r3, [pc, #128]	; (2400e254 <I2C_RequestMemoryRead+0xa4>)
2400e1d2:	9300      	str	r3, [sp, #0]
2400e1d4:	2300      	movs	r3, #0
2400e1d6:	68f8      	ldr	r0, [r7, #12]
2400e1d8:	f001 fa74 	bl	2400f6c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400e1dc:	69fa      	ldr	r2, [r7, #28]
2400e1de:	69b9      	ldr	r1, [r7, #24]
2400e1e0:	68f8      	ldr	r0, [r7, #12]
2400e1e2:	f001 f88d 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400e1e6:	4603      	mov	r3, r0
2400e1e8:	2b00      	cmp	r3, #0
2400e1ea:	d001      	beq.n	2400e1f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2400e1ec:	2301      	movs	r3, #1
2400e1ee:	e02c      	b.n	2400e24a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400e1f0:	88fb      	ldrh	r3, [r7, #6]
2400e1f2:	2b01      	cmp	r3, #1
2400e1f4:	d105      	bne.n	2400e202 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400e1f6:	893b      	ldrh	r3, [r7, #8]
2400e1f8:	b2da      	uxtb	r2, r3
2400e1fa:	68fb      	ldr	r3, [r7, #12]
2400e1fc:	681b      	ldr	r3, [r3, #0]
2400e1fe:	629a      	str	r2, [r3, #40]	; 0x28
2400e200:	e015      	b.n	2400e22e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400e202:	893b      	ldrh	r3, [r7, #8]
2400e204:	0a1b      	lsrs	r3, r3, #8
2400e206:	b29b      	uxth	r3, r3
2400e208:	b2da      	uxtb	r2, r3
2400e20a:	68fb      	ldr	r3, [r7, #12]
2400e20c:	681b      	ldr	r3, [r3, #0]
2400e20e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400e210:	69fa      	ldr	r2, [r7, #28]
2400e212:	69b9      	ldr	r1, [r7, #24]
2400e214:	68f8      	ldr	r0, [r7, #12]
2400e216:	f001 f873 	bl	2400f300 <I2C_WaitOnTXISFlagUntilTimeout>
2400e21a:	4603      	mov	r3, r0
2400e21c:	2b00      	cmp	r3, #0
2400e21e:	d001      	beq.n	2400e224 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2400e220:	2301      	movs	r3, #1
2400e222:	e012      	b.n	2400e24a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400e224:	893b      	ldrh	r3, [r7, #8]
2400e226:	b2da      	uxtb	r2, r3
2400e228:	68fb      	ldr	r3, [r7, #12]
2400e22a:	681b      	ldr	r3, [r3, #0]
2400e22c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2400e22e:	69fb      	ldr	r3, [r7, #28]
2400e230:	9300      	str	r3, [sp, #0]
2400e232:	69bb      	ldr	r3, [r7, #24]
2400e234:	2200      	movs	r2, #0
2400e236:	2140      	movs	r1, #64	; 0x40
2400e238:	68f8      	ldr	r0, [r7, #12]
2400e23a:	f001 f821 	bl	2400f280 <I2C_WaitOnFlagUntilTimeout>
2400e23e:	4603      	mov	r3, r0
2400e240:	2b00      	cmp	r3, #0
2400e242:	d001      	beq.n	2400e248 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2400e244:	2301      	movs	r3, #1
2400e246:	e000      	b.n	2400e24a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2400e248:	2300      	movs	r3, #0
}
2400e24a:	4618      	mov	r0, r3
2400e24c:	3710      	adds	r7, #16
2400e24e:	46bd      	mov	sp, r7
2400e250:	bd80      	pop	{r7, pc}
2400e252:	bf00      	nop
2400e254:	80002000 	.word	0x80002000

2400e258 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400e258:	b580      	push	{r7, lr}
2400e25a:	b084      	sub	sp, #16
2400e25c:	af00      	add	r7, sp, #0
2400e25e:	6078      	str	r0, [r7, #4]
2400e260:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400e262:	687b      	ldr	r3, [r7, #4]
2400e264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e268:	b2db      	uxtb	r3, r3
2400e26a:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400e26e:	2b28      	cmp	r3, #40	; 0x28
2400e270:	d16a      	bne.n	2400e348 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2400e272:	687b      	ldr	r3, [r7, #4]
2400e274:	681b      	ldr	r3, [r3, #0]
2400e276:	699b      	ldr	r3, [r3, #24]
2400e278:	0c1b      	lsrs	r3, r3, #16
2400e27a:	b2db      	uxtb	r3, r3
2400e27c:	f003 0301 	and.w	r3, r3, #1
2400e280:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2400e282:	687b      	ldr	r3, [r7, #4]
2400e284:	681b      	ldr	r3, [r3, #0]
2400e286:	699b      	ldr	r3, [r3, #24]
2400e288:	0c1b      	lsrs	r3, r3, #16
2400e28a:	b29b      	uxth	r3, r3
2400e28c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400e290:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400e292:	687b      	ldr	r3, [r7, #4]
2400e294:	681b      	ldr	r3, [r3, #0]
2400e296:	689b      	ldr	r3, [r3, #8]
2400e298:	b29b      	uxth	r3, r3
2400e29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400e29e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2400e2a0:	687b      	ldr	r3, [r7, #4]
2400e2a2:	681b      	ldr	r3, [r3, #0]
2400e2a4:	68db      	ldr	r3, [r3, #12]
2400e2a6:	b29b      	uxth	r3, r3
2400e2a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400e2ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400e2ae:	687b      	ldr	r3, [r7, #4]
2400e2b0:	68db      	ldr	r3, [r3, #12]
2400e2b2:	2b02      	cmp	r3, #2
2400e2b4:	d138      	bne.n	2400e328 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400e2b6:	897b      	ldrh	r3, [r7, #10]
2400e2b8:	09db      	lsrs	r3, r3, #7
2400e2ba:	b29a      	uxth	r2, r3
2400e2bc:	89bb      	ldrh	r3, [r7, #12]
2400e2be:	4053      	eors	r3, r2
2400e2c0:	b29b      	uxth	r3, r3
2400e2c2:	f003 0306 	and.w	r3, r3, #6
2400e2c6:	2b00      	cmp	r3, #0
2400e2c8:	d11c      	bne.n	2400e304 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2400e2ca:	897b      	ldrh	r3, [r7, #10]
2400e2cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2400e2ce:	687b      	ldr	r3, [r7, #4]
2400e2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400e2d2:	1c5a      	adds	r2, r3, #1
2400e2d4:	687b      	ldr	r3, [r7, #4]
2400e2d6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
2400e2d8:	687b      	ldr	r3, [r7, #4]
2400e2da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400e2dc:	2b02      	cmp	r3, #2
2400e2de:	d13b      	bne.n	2400e358 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2400e2e0:	687b      	ldr	r3, [r7, #4]
2400e2e2:	2200      	movs	r2, #0
2400e2e4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400e2e6:	687b      	ldr	r3, [r7, #4]
2400e2e8:	681b      	ldr	r3, [r3, #0]
2400e2ea:	2208      	movs	r2, #8
2400e2ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2400e2ee:	687b      	ldr	r3, [r7, #4]
2400e2f0:	2200      	movs	r2, #0
2400e2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400e2f6:	89ba      	ldrh	r2, [r7, #12]
2400e2f8:	7bfb      	ldrb	r3, [r7, #15]
2400e2fa:	4619      	mov	r1, r3
2400e2fc:	6878      	ldr	r0, [r7, #4]
2400e2fe:	f7ff f99a 	bl	2400d636 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2400e302:	e029      	b.n	2400e358 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2400e304:	893b      	ldrh	r3, [r7, #8]
2400e306:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400e308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400e30c:	6878      	ldr	r0, [r7, #4]
2400e30e:	f001 fa6f 	bl	2400f7f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2400e312:	687b      	ldr	r3, [r7, #4]
2400e314:	2200      	movs	r2, #0
2400e316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400e31a:	89ba      	ldrh	r2, [r7, #12]
2400e31c:	7bfb      	ldrb	r3, [r7, #15]
2400e31e:	4619      	mov	r1, r3
2400e320:	6878      	ldr	r0, [r7, #4]
2400e322:	f7ff f988 	bl	2400d636 <HAL_I2C_AddrCallback>
}
2400e326:	e017      	b.n	2400e358 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400e328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400e32c:	6878      	ldr	r0, [r7, #4]
2400e32e:	f001 fa5f 	bl	2400f7f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2400e332:	687b      	ldr	r3, [r7, #4]
2400e334:	2200      	movs	r2, #0
2400e336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400e33a:	89ba      	ldrh	r2, [r7, #12]
2400e33c:	7bfb      	ldrb	r3, [r7, #15]
2400e33e:	4619      	mov	r1, r3
2400e340:	6878      	ldr	r0, [r7, #4]
2400e342:	f7ff f978 	bl	2400d636 <HAL_I2C_AddrCallback>
}
2400e346:	e007      	b.n	2400e358 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400e348:	687b      	ldr	r3, [r7, #4]
2400e34a:	681b      	ldr	r3, [r3, #0]
2400e34c:	2208      	movs	r2, #8
2400e34e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400e350:	687b      	ldr	r3, [r7, #4]
2400e352:	2200      	movs	r2, #0
2400e354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
2400e358:	bf00      	nop
2400e35a:	3710      	adds	r7, #16
2400e35c:	46bd      	mov	sp, r7
2400e35e:	bd80      	pop	{r7, pc}

2400e360 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400e360:	b580      	push	{r7, lr}
2400e362:	b082      	sub	sp, #8
2400e364:	af00      	add	r7, sp, #0
2400e366:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e368:	687b      	ldr	r3, [r7, #4]
2400e36a:	2200      	movs	r2, #0
2400e36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400e370:	687b      	ldr	r3, [r7, #4]
2400e372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e376:	b2db      	uxtb	r3, r3
2400e378:	2b21      	cmp	r3, #33	; 0x21
2400e37a:	d115      	bne.n	2400e3a8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2400e37c:	687b      	ldr	r3, [r7, #4]
2400e37e:	2220      	movs	r2, #32
2400e380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400e384:	687b      	ldr	r3, [r7, #4]
2400e386:	2211      	movs	r2, #17
2400e388:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400e38a:	687b      	ldr	r3, [r7, #4]
2400e38c:	2200      	movs	r2, #0
2400e38e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e390:	2101      	movs	r1, #1
2400e392:	6878      	ldr	r0, [r7, #4]
2400e394:	f001 fa2c 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e398:	687b      	ldr	r3, [r7, #4]
2400e39a:	2200      	movs	r2, #0
2400e39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400e3a0:	6878      	ldr	r0, [r7, #4]
2400e3a2:	f7ff f920 	bl	2400d5e6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e3a6:	e014      	b.n	2400e3d2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2400e3a8:	687b      	ldr	r3, [r7, #4]
2400e3aa:	2220      	movs	r2, #32
2400e3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400e3b0:	687b      	ldr	r3, [r7, #4]
2400e3b2:	2212      	movs	r2, #18
2400e3b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400e3b6:	687b      	ldr	r3, [r7, #4]
2400e3b8:	2200      	movs	r2, #0
2400e3ba:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400e3bc:	2102      	movs	r1, #2
2400e3be:	6878      	ldr	r0, [r7, #4]
2400e3c0:	f001 fa16 	bl	2400f7f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400e3c4:	687b      	ldr	r3, [r7, #4]
2400e3c6:	2200      	movs	r2, #0
2400e3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2400e3cc:	6878      	ldr	r0, [r7, #4]
2400e3ce:	f7ff f914 	bl	2400d5fa <HAL_I2C_MasterRxCpltCallback>
}
2400e3d2:	bf00      	nop
2400e3d4:	3708      	adds	r7, #8
2400e3d6:	46bd      	mov	sp, r7
2400e3d8:	bd80      	pop	{r7, pc}

2400e3da <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400e3da:	b580      	push	{r7, lr}
2400e3dc:	b084      	sub	sp, #16
2400e3de:	af00      	add	r7, sp, #0
2400e3e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400e3e2:	687b      	ldr	r3, [r7, #4]
2400e3e4:	681b      	ldr	r3, [r3, #0]
2400e3e6:	681b      	ldr	r3, [r3, #0]
2400e3e8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e3ea:	687b      	ldr	r3, [r7, #4]
2400e3ec:	2200      	movs	r2, #0
2400e3ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400e3f2:	68fb      	ldr	r3, [r7, #12]
2400e3f4:	0b9b      	lsrs	r3, r3, #14
2400e3f6:	f003 0301 	and.w	r3, r3, #1
2400e3fa:	2b00      	cmp	r3, #0
2400e3fc:	d008      	beq.n	2400e410 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e3fe:	687b      	ldr	r3, [r7, #4]
2400e400:	681b      	ldr	r3, [r3, #0]
2400e402:	681a      	ldr	r2, [r3, #0]
2400e404:	687b      	ldr	r3, [r7, #4]
2400e406:	681b      	ldr	r3, [r3, #0]
2400e408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e40c:	601a      	str	r2, [r3, #0]
2400e40e:	e00d      	b.n	2400e42c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400e410:	68fb      	ldr	r3, [r7, #12]
2400e412:	0bdb      	lsrs	r3, r3, #15
2400e414:	f003 0301 	and.w	r3, r3, #1
2400e418:	2b00      	cmp	r3, #0
2400e41a:	d007      	beq.n	2400e42c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e41c:	687b      	ldr	r3, [r7, #4]
2400e41e:	681b      	ldr	r3, [r3, #0]
2400e420:	681a      	ldr	r2, [r3, #0]
2400e422:	687b      	ldr	r3, [r7, #4]
2400e424:	681b      	ldr	r3, [r3, #0]
2400e426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e42a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400e42c:	687b      	ldr	r3, [r7, #4]
2400e42e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e432:	b2db      	uxtb	r3, r3
2400e434:	2b29      	cmp	r3, #41	; 0x29
2400e436:	d112      	bne.n	2400e45e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400e438:	687b      	ldr	r3, [r7, #4]
2400e43a:	2228      	movs	r2, #40	; 0x28
2400e43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400e440:	687b      	ldr	r3, [r7, #4]
2400e442:	2221      	movs	r2, #33	; 0x21
2400e444:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e446:	2101      	movs	r1, #1
2400e448:	6878      	ldr	r0, [r7, #4]
2400e44a:	f001 f9d1 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e44e:	687b      	ldr	r3, [r7, #4]
2400e450:	2200      	movs	r2, #0
2400e452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400e456:	6878      	ldr	r0, [r7, #4]
2400e458:	f7ff f8d9 	bl	2400d60e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2400e45c:	e017      	b.n	2400e48e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400e45e:	687b      	ldr	r3, [r7, #4]
2400e460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e464:	b2db      	uxtb	r3, r3
2400e466:	2b2a      	cmp	r3, #42	; 0x2a
2400e468:	d111      	bne.n	2400e48e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400e46a:	687b      	ldr	r3, [r7, #4]
2400e46c:	2228      	movs	r2, #40	; 0x28
2400e46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400e472:	687b      	ldr	r3, [r7, #4]
2400e474:	2222      	movs	r2, #34	; 0x22
2400e476:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400e478:	2102      	movs	r1, #2
2400e47a:	6878      	ldr	r0, [r7, #4]
2400e47c:	f001 f9b8 	bl	2400f7f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400e480:	687b      	ldr	r3, [r7, #4]
2400e482:	2200      	movs	r2, #0
2400e484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400e488:	6878      	ldr	r0, [r7, #4]
2400e48a:	f7ff f8ca 	bl	2400d622 <HAL_I2C_SlaveRxCpltCallback>
}
2400e48e:	bf00      	nop
2400e490:	3710      	adds	r7, #16
2400e492:	46bd      	mov	sp, r7
2400e494:	bd80      	pop	{r7, pc}
	...

2400e498 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400e498:	b580      	push	{r7, lr}
2400e49a:	b086      	sub	sp, #24
2400e49c:	af00      	add	r7, sp, #0
2400e49e:	6078      	str	r0, [r7, #4]
2400e4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2400e4a2:	683b      	ldr	r3, [r7, #0]
2400e4a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400e4a6:	687b      	ldr	r3, [r7, #4]
2400e4a8:	681b      	ldr	r3, [r3, #0]
2400e4aa:	2220      	movs	r2, #32
2400e4ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400e4ae:	687b      	ldr	r3, [r7, #4]
2400e4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e4b4:	b2db      	uxtb	r3, r3
2400e4b6:	2b21      	cmp	r3, #33	; 0x21
2400e4b8:	d107      	bne.n	2400e4ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e4ba:	2101      	movs	r1, #1
2400e4bc:	6878      	ldr	r0, [r7, #4]
2400e4be:	f001 f997 	bl	2400f7f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400e4c2:	687b      	ldr	r3, [r7, #4]
2400e4c4:	2211      	movs	r2, #17
2400e4c6:	631a      	str	r2, [r3, #48]	; 0x30
2400e4c8:	e00c      	b.n	2400e4e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e4ca:	687b      	ldr	r3, [r7, #4]
2400e4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e4d0:	b2db      	uxtb	r3, r3
2400e4d2:	2b22      	cmp	r3, #34	; 0x22
2400e4d4:	d106      	bne.n	2400e4e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400e4d6:	2102      	movs	r1, #2
2400e4d8:	6878      	ldr	r0, [r7, #4]
2400e4da:	f001 f989 	bl	2400f7f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400e4de:	687b      	ldr	r3, [r7, #4]
2400e4e0:	2212      	movs	r2, #18
2400e4e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400e4e4:	687b      	ldr	r3, [r7, #4]
2400e4e6:	681b      	ldr	r3, [r3, #0]
2400e4e8:	6859      	ldr	r1, [r3, #4]
2400e4ea:	687b      	ldr	r3, [r7, #4]
2400e4ec:	681a      	ldr	r2, [r3, #0]
2400e4ee:	4b4d      	ldr	r3, [pc, #308]	; (2400e624 <I2C_ITMasterCplt+0x18c>)
2400e4f0:	400b      	ands	r3, r1
2400e4f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2400e4f4:	687b      	ldr	r3, [r7, #4]
2400e4f6:	2200      	movs	r2, #0
2400e4f8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400e4fa:	687b      	ldr	r3, [r7, #4]
2400e4fc:	4a4a      	ldr	r2, [pc, #296]	; (2400e628 <I2C_ITMasterCplt+0x190>)
2400e4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2400e500:	697b      	ldr	r3, [r7, #20]
2400e502:	091b      	lsrs	r3, r3, #4
2400e504:	f003 0301 	and.w	r3, r3, #1
2400e508:	2b00      	cmp	r3, #0
2400e50a:	d009      	beq.n	2400e520 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e50c:	687b      	ldr	r3, [r7, #4]
2400e50e:	681b      	ldr	r3, [r3, #0]
2400e510:	2210      	movs	r2, #16
2400e512:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e514:	687b      	ldr	r3, [r7, #4]
2400e516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e518:	f043 0204 	orr.w	r2, r3, #4
2400e51c:	687b      	ldr	r3, [r7, #4]
2400e51e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400e520:	687b      	ldr	r3, [r7, #4]
2400e522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e526:	b2db      	uxtb	r3, r3
2400e528:	2b60      	cmp	r3, #96	; 0x60
2400e52a:	d10b      	bne.n	2400e544 <I2C_ITMasterCplt+0xac>
2400e52c:	697b      	ldr	r3, [r7, #20]
2400e52e:	089b      	lsrs	r3, r3, #2
2400e530:	f003 0301 	and.w	r3, r3, #1
2400e534:	2b00      	cmp	r3, #0
2400e536:	d005      	beq.n	2400e544 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400e538:	687b      	ldr	r3, [r7, #4]
2400e53a:	681b      	ldr	r3, [r3, #0]
2400e53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e53e:	b2db      	uxtb	r3, r3
2400e540:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2400e542:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400e544:	6878      	ldr	r0, [r7, #4]
2400e546:	f000 fbb6 	bl	2400ecb6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400e54a:	687b      	ldr	r3, [r7, #4]
2400e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e54e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2400e550:	687b      	ldr	r3, [r7, #4]
2400e552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e556:	b2db      	uxtb	r3, r3
2400e558:	2b60      	cmp	r3, #96	; 0x60
2400e55a:	d002      	beq.n	2400e562 <I2C_ITMasterCplt+0xca>
2400e55c:	693b      	ldr	r3, [r7, #16]
2400e55e:	2b00      	cmp	r3, #0
2400e560:	d006      	beq.n	2400e570 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400e562:	687b      	ldr	r3, [r7, #4]
2400e564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e566:	4619      	mov	r1, r3
2400e568:	6878      	ldr	r0, [r7, #4]
2400e56a:	f000 faad 	bl	2400eac8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2400e56e:	e054      	b.n	2400e61a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400e570:	687b      	ldr	r3, [r7, #4]
2400e572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e576:	b2db      	uxtb	r3, r3
2400e578:	2b21      	cmp	r3, #33	; 0x21
2400e57a:	d124      	bne.n	2400e5c6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
2400e57c:	687b      	ldr	r3, [r7, #4]
2400e57e:	2220      	movs	r2, #32
2400e580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e584:	687b      	ldr	r3, [r7, #4]
2400e586:	2200      	movs	r2, #0
2400e588:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400e58a:	687b      	ldr	r3, [r7, #4]
2400e58c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400e590:	b2db      	uxtb	r3, r3
2400e592:	2b40      	cmp	r3, #64	; 0x40
2400e594:	d10b      	bne.n	2400e5ae <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400e596:	687b      	ldr	r3, [r7, #4]
2400e598:	2200      	movs	r2, #0
2400e59a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400e59e:	687b      	ldr	r3, [r7, #4]
2400e5a0:	2200      	movs	r2, #0
2400e5a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2400e5a6:	6878      	ldr	r0, [r7, #4]
2400e5a8:	f7ff f85d 	bl	2400d666 <HAL_I2C_MemTxCpltCallback>
}
2400e5ac:	e035      	b.n	2400e61a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400e5ae:	687b      	ldr	r3, [r7, #4]
2400e5b0:	2200      	movs	r2, #0
2400e5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400e5b6:	687b      	ldr	r3, [r7, #4]
2400e5b8:	2200      	movs	r2, #0
2400e5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2400e5be:	6878      	ldr	r0, [r7, #4]
2400e5c0:	f7ff f811 	bl	2400d5e6 <HAL_I2C_MasterTxCpltCallback>
}
2400e5c4:	e029      	b.n	2400e61a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e5c6:	687b      	ldr	r3, [r7, #4]
2400e5c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e5cc:	b2db      	uxtb	r3, r3
2400e5ce:	2b22      	cmp	r3, #34	; 0x22
2400e5d0:	d123      	bne.n	2400e61a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
2400e5d2:	687b      	ldr	r3, [r7, #4]
2400e5d4:	2220      	movs	r2, #32
2400e5d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e5da:	687b      	ldr	r3, [r7, #4]
2400e5dc:	2200      	movs	r2, #0
2400e5de:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400e5e0:	687b      	ldr	r3, [r7, #4]
2400e5e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400e5e6:	b2db      	uxtb	r3, r3
2400e5e8:	2b40      	cmp	r3, #64	; 0x40
2400e5ea:	d10b      	bne.n	2400e604 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400e5ec:	687b      	ldr	r3, [r7, #4]
2400e5ee:	2200      	movs	r2, #0
2400e5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400e5f4:	687b      	ldr	r3, [r7, #4]
2400e5f6:	2200      	movs	r2, #0
2400e5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2400e5fc:	6878      	ldr	r0, [r7, #4]
2400e5fe:	f7ff f83c 	bl	2400d67a <HAL_I2C_MemRxCpltCallback>
}
2400e602:	e00a      	b.n	2400e61a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400e604:	687b      	ldr	r3, [r7, #4]
2400e606:	2200      	movs	r2, #0
2400e608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400e60c:	687b      	ldr	r3, [r7, #4]
2400e60e:	2200      	movs	r2, #0
2400e610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400e614:	6878      	ldr	r0, [r7, #4]
2400e616:	f7fe fff0 	bl	2400d5fa <HAL_I2C_MasterRxCpltCallback>
}
2400e61a:	bf00      	nop
2400e61c:	3718      	adds	r7, #24
2400e61e:	46bd      	mov	sp, r7
2400e620:	bd80      	pop	{r7, pc}
2400e622:	bf00      	nop
2400e624:	fe00e800 	.word	0xfe00e800
2400e628:	ffff0000 	.word	0xffff0000

2400e62c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400e62c:	b580      	push	{r7, lr}
2400e62e:	b086      	sub	sp, #24
2400e630:	af00      	add	r7, sp, #0
2400e632:	6078      	str	r0, [r7, #4]
2400e634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400e636:	687b      	ldr	r3, [r7, #4]
2400e638:	681b      	ldr	r3, [r3, #0]
2400e63a:	681b      	ldr	r3, [r3, #0]
2400e63c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2400e63e:	683b      	ldr	r3, [r7, #0]
2400e640:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400e642:	687b      	ldr	r3, [r7, #4]
2400e644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e648:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400e64a:	687b      	ldr	r3, [r7, #4]
2400e64c:	681b      	ldr	r3, [r3, #0]
2400e64e:	2220      	movs	r2, #32
2400e650:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400e652:	7bfb      	ldrb	r3, [r7, #15]
2400e654:	2b21      	cmp	r3, #33	; 0x21
2400e656:	d002      	beq.n	2400e65e <I2C_ITSlaveCplt+0x32>
2400e658:	7bfb      	ldrb	r3, [r7, #15]
2400e65a:	2b29      	cmp	r3, #41	; 0x29
2400e65c:	d108      	bne.n	2400e670 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400e65e:	f248 0101 	movw	r1, #32769	; 0x8001
2400e662:	6878      	ldr	r0, [r7, #4]
2400e664:	f001 f8c4 	bl	2400f7f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400e668:	687b      	ldr	r3, [r7, #4]
2400e66a:	2221      	movs	r2, #33	; 0x21
2400e66c:	631a      	str	r2, [r3, #48]	; 0x30
2400e66e:	e00d      	b.n	2400e68c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400e670:	7bfb      	ldrb	r3, [r7, #15]
2400e672:	2b22      	cmp	r3, #34	; 0x22
2400e674:	d002      	beq.n	2400e67c <I2C_ITSlaveCplt+0x50>
2400e676:	7bfb      	ldrb	r3, [r7, #15]
2400e678:	2b2a      	cmp	r3, #42	; 0x2a
2400e67a:	d107      	bne.n	2400e68c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400e67c:	f248 0102 	movw	r1, #32770	; 0x8002
2400e680:	6878      	ldr	r0, [r7, #4]
2400e682:	f001 f8b5 	bl	2400f7f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400e686:	687b      	ldr	r3, [r7, #4]
2400e688:	2222      	movs	r2, #34	; 0x22
2400e68a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400e68c:	687b      	ldr	r3, [r7, #4]
2400e68e:	681b      	ldr	r3, [r3, #0]
2400e690:	685a      	ldr	r2, [r3, #4]
2400e692:	687b      	ldr	r3, [r7, #4]
2400e694:	681b      	ldr	r3, [r3, #0]
2400e696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400e69a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400e69c:	687b      	ldr	r3, [r7, #4]
2400e69e:	681b      	ldr	r3, [r3, #0]
2400e6a0:	6859      	ldr	r1, [r3, #4]
2400e6a2:	687b      	ldr	r3, [r7, #4]
2400e6a4:	681a      	ldr	r2, [r3, #0]
2400e6a6:	4b80      	ldr	r3, [pc, #512]	; (2400e8a8 <I2C_ITSlaveCplt+0x27c>)
2400e6a8:	400b      	ands	r3, r1
2400e6aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400e6ac:	6878      	ldr	r0, [r7, #4]
2400e6ae:	f000 fb02 	bl	2400ecb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400e6b2:	693b      	ldr	r3, [r7, #16]
2400e6b4:	0b9b      	lsrs	r3, r3, #14
2400e6b6:	f003 0301 	and.w	r3, r3, #1
2400e6ba:	2b00      	cmp	r3, #0
2400e6bc:	d07a      	beq.n	2400e7b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e6be:	687b      	ldr	r3, [r7, #4]
2400e6c0:	681b      	ldr	r3, [r3, #0]
2400e6c2:	681a      	ldr	r2, [r3, #0]
2400e6c4:	687b      	ldr	r3, [r7, #4]
2400e6c6:	681b      	ldr	r3, [r3, #0]
2400e6c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e6cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2400e6ce:	687b      	ldr	r3, [r7, #4]
2400e6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e6d2:	2b00      	cmp	r3, #0
2400e6d4:	f000 8111 	beq.w	2400e8fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2400e6d8:	687b      	ldr	r3, [r7, #4]
2400e6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e6dc:	681b      	ldr	r3, [r3, #0]
2400e6de:	4a73      	ldr	r2, [pc, #460]	; (2400e8ac <I2C_ITSlaveCplt+0x280>)
2400e6e0:	4293      	cmp	r3, r2
2400e6e2:	d059      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e6e4:	687b      	ldr	r3, [r7, #4]
2400e6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e6e8:	681b      	ldr	r3, [r3, #0]
2400e6ea:	4a71      	ldr	r2, [pc, #452]	; (2400e8b0 <I2C_ITSlaveCplt+0x284>)
2400e6ec:	4293      	cmp	r3, r2
2400e6ee:	d053      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e6f0:	687b      	ldr	r3, [r7, #4]
2400e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e6f4:	681b      	ldr	r3, [r3, #0]
2400e6f6:	4a6f      	ldr	r2, [pc, #444]	; (2400e8b4 <I2C_ITSlaveCplt+0x288>)
2400e6f8:	4293      	cmp	r3, r2
2400e6fa:	d04d      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e6fc:	687b      	ldr	r3, [r7, #4]
2400e6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e700:	681b      	ldr	r3, [r3, #0]
2400e702:	4a6d      	ldr	r2, [pc, #436]	; (2400e8b8 <I2C_ITSlaveCplt+0x28c>)
2400e704:	4293      	cmp	r3, r2
2400e706:	d047      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e708:	687b      	ldr	r3, [r7, #4]
2400e70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e70c:	681b      	ldr	r3, [r3, #0]
2400e70e:	4a6b      	ldr	r2, [pc, #428]	; (2400e8bc <I2C_ITSlaveCplt+0x290>)
2400e710:	4293      	cmp	r3, r2
2400e712:	d041      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e714:	687b      	ldr	r3, [r7, #4]
2400e716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e718:	681b      	ldr	r3, [r3, #0]
2400e71a:	4a69      	ldr	r2, [pc, #420]	; (2400e8c0 <I2C_ITSlaveCplt+0x294>)
2400e71c:	4293      	cmp	r3, r2
2400e71e:	d03b      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e720:	687b      	ldr	r3, [r7, #4]
2400e722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e724:	681b      	ldr	r3, [r3, #0]
2400e726:	4a67      	ldr	r2, [pc, #412]	; (2400e8c4 <I2C_ITSlaveCplt+0x298>)
2400e728:	4293      	cmp	r3, r2
2400e72a:	d035      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e72c:	687b      	ldr	r3, [r7, #4]
2400e72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e730:	681b      	ldr	r3, [r3, #0]
2400e732:	4a65      	ldr	r2, [pc, #404]	; (2400e8c8 <I2C_ITSlaveCplt+0x29c>)
2400e734:	4293      	cmp	r3, r2
2400e736:	d02f      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e738:	687b      	ldr	r3, [r7, #4]
2400e73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e73c:	681b      	ldr	r3, [r3, #0]
2400e73e:	4a63      	ldr	r2, [pc, #396]	; (2400e8cc <I2C_ITSlaveCplt+0x2a0>)
2400e740:	4293      	cmp	r3, r2
2400e742:	d029      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e744:	687b      	ldr	r3, [r7, #4]
2400e746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e748:	681b      	ldr	r3, [r3, #0]
2400e74a:	4a61      	ldr	r2, [pc, #388]	; (2400e8d0 <I2C_ITSlaveCplt+0x2a4>)
2400e74c:	4293      	cmp	r3, r2
2400e74e:	d023      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e750:	687b      	ldr	r3, [r7, #4]
2400e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e754:	681b      	ldr	r3, [r3, #0]
2400e756:	4a5f      	ldr	r2, [pc, #380]	; (2400e8d4 <I2C_ITSlaveCplt+0x2a8>)
2400e758:	4293      	cmp	r3, r2
2400e75a:	d01d      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e75c:	687b      	ldr	r3, [r7, #4]
2400e75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e760:	681b      	ldr	r3, [r3, #0]
2400e762:	4a5d      	ldr	r2, [pc, #372]	; (2400e8d8 <I2C_ITSlaveCplt+0x2ac>)
2400e764:	4293      	cmp	r3, r2
2400e766:	d017      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e768:	687b      	ldr	r3, [r7, #4]
2400e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e76c:	681b      	ldr	r3, [r3, #0]
2400e76e:	4a5b      	ldr	r2, [pc, #364]	; (2400e8dc <I2C_ITSlaveCplt+0x2b0>)
2400e770:	4293      	cmp	r3, r2
2400e772:	d011      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e774:	687b      	ldr	r3, [r7, #4]
2400e776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e778:	681b      	ldr	r3, [r3, #0]
2400e77a:	4a59      	ldr	r2, [pc, #356]	; (2400e8e0 <I2C_ITSlaveCplt+0x2b4>)
2400e77c:	4293      	cmp	r3, r2
2400e77e:	d00b      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e780:	687b      	ldr	r3, [r7, #4]
2400e782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e784:	681b      	ldr	r3, [r3, #0]
2400e786:	4a57      	ldr	r2, [pc, #348]	; (2400e8e4 <I2C_ITSlaveCplt+0x2b8>)
2400e788:	4293      	cmp	r3, r2
2400e78a:	d005      	beq.n	2400e798 <I2C_ITSlaveCplt+0x16c>
2400e78c:	687b      	ldr	r3, [r7, #4]
2400e78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e790:	681b      	ldr	r3, [r3, #0]
2400e792:	4a55      	ldr	r2, [pc, #340]	; (2400e8e8 <I2C_ITSlaveCplt+0x2bc>)
2400e794:	4293      	cmp	r3, r2
2400e796:	d105      	bne.n	2400e7a4 <I2C_ITSlaveCplt+0x178>
2400e798:	687b      	ldr	r3, [r7, #4]
2400e79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e79c:	681b      	ldr	r3, [r3, #0]
2400e79e:	685b      	ldr	r3, [r3, #4]
2400e7a0:	b29b      	uxth	r3, r3
2400e7a2:	e004      	b.n	2400e7ae <I2C_ITSlaveCplt+0x182>
2400e7a4:	687b      	ldr	r3, [r7, #4]
2400e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7a8:	681b      	ldr	r3, [r3, #0]
2400e7aa:	685b      	ldr	r3, [r3, #4]
2400e7ac:	b29b      	uxth	r3, r3
2400e7ae:	687a      	ldr	r2, [r7, #4]
2400e7b0:	8553      	strh	r3, [r2, #42]	; 0x2a
2400e7b2:	e0a2      	b.n	2400e8fa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400e7b4:	693b      	ldr	r3, [r7, #16]
2400e7b6:	0bdb      	lsrs	r3, r3, #15
2400e7b8:	f003 0301 	and.w	r3, r3, #1
2400e7bc:	2b00      	cmp	r3, #0
2400e7be:	f000 809c 	beq.w	2400e8fa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e7c2:	687b      	ldr	r3, [r7, #4]
2400e7c4:	681b      	ldr	r3, [r3, #0]
2400e7c6:	681a      	ldr	r2, [r3, #0]
2400e7c8:	687b      	ldr	r3, [r7, #4]
2400e7ca:	681b      	ldr	r3, [r3, #0]
2400e7cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e7d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2400e7d2:	687b      	ldr	r3, [r7, #4]
2400e7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7d6:	2b00      	cmp	r3, #0
2400e7d8:	f000 808f 	beq.w	2400e8fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400e7dc:	687b      	ldr	r3, [r7, #4]
2400e7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7e0:	681b      	ldr	r3, [r3, #0]
2400e7e2:	4a32      	ldr	r2, [pc, #200]	; (2400e8ac <I2C_ITSlaveCplt+0x280>)
2400e7e4:	4293      	cmp	r3, r2
2400e7e6:	d059      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e7e8:	687b      	ldr	r3, [r7, #4]
2400e7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7ec:	681b      	ldr	r3, [r3, #0]
2400e7ee:	4a30      	ldr	r2, [pc, #192]	; (2400e8b0 <I2C_ITSlaveCplt+0x284>)
2400e7f0:	4293      	cmp	r3, r2
2400e7f2:	d053      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e7f4:	687b      	ldr	r3, [r7, #4]
2400e7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7f8:	681b      	ldr	r3, [r3, #0]
2400e7fa:	4a2e      	ldr	r2, [pc, #184]	; (2400e8b4 <I2C_ITSlaveCplt+0x288>)
2400e7fc:	4293      	cmp	r3, r2
2400e7fe:	d04d      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e800:	687b      	ldr	r3, [r7, #4]
2400e802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e804:	681b      	ldr	r3, [r3, #0]
2400e806:	4a2c      	ldr	r2, [pc, #176]	; (2400e8b8 <I2C_ITSlaveCplt+0x28c>)
2400e808:	4293      	cmp	r3, r2
2400e80a:	d047      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e80c:	687b      	ldr	r3, [r7, #4]
2400e80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e810:	681b      	ldr	r3, [r3, #0]
2400e812:	4a2a      	ldr	r2, [pc, #168]	; (2400e8bc <I2C_ITSlaveCplt+0x290>)
2400e814:	4293      	cmp	r3, r2
2400e816:	d041      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e818:	687b      	ldr	r3, [r7, #4]
2400e81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e81c:	681b      	ldr	r3, [r3, #0]
2400e81e:	4a28      	ldr	r2, [pc, #160]	; (2400e8c0 <I2C_ITSlaveCplt+0x294>)
2400e820:	4293      	cmp	r3, r2
2400e822:	d03b      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e824:	687b      	ldr	r3, [r7, #4]
2400e826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e828:	681b      	ldr	r3, [r3, #0]
2400e82a:	4a26      	ldr	r2, [pc, #152]	; (2400e8c4 <I2C_ITSlaveCplt+0x298>)
2400e82c:	4293      	cmp	r3, r2
2400e82e:	d035      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e830:	687b      	ldr	r3, [r7, #4]
2400e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e834:	681b      	ldr	r3, [r3, #0]
2400e836:	4a24      	ldr	r2, [pc, #144]	; (2400e8c8 <I2C_ITSlaveCplt+0x29c>)
2400e838:	4293      	cmp	r3, r2
2400e83a:	d02f      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e83c:	687b      	ldr	r3, [r7, #4]
2400e83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e840:	681b      	ldr	r3, [r3, #0]
2400e842:	4a22      	ldr	r2, [pc, #136]	; (2400e8cc <I2C_ITSlaveCplt+0x2a0>)
2400e844:	4293      	cmp	r3, r2
2400e846:	d029      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e848:	687b      	ldr	r3, [r7, #4]
2400e84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e84c:	681b      	ldr	r3, [r3, #0]
2400e84e:	4a20      	ldr	r2, [pc, #128]	; (2400e8d0 <I2C_ITSlaveCplt+0x2a4>)
2400e850:	4293      	cmp	r3, r2
2400e852:	d023      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e854:	687b      	ldr	r3, [r7, #4]
2400e856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e858:	681b      	ldr	r3, [r3, #0]
2400e85a:	4a1e      	ldr	r2, [pc, #120]	; (2400e8d4 <I2C_ITSlaveCplt+0x2a8>)
2400e85c:	4293      	cmp	r3, r2
2400e85e:	d01d      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e860:	687b      	ldr	r3, [r7, #4]
2400e862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e864:	681b      	ldr	r3, [r3, #0]
2400e866:	4a1c      	ldr	r2, [pc, #112]	; (2400e8d8 <I2C_ITSlaveCplt+0x2ac>)
2400e868:	4293      	cmp	r3, r2
2400e86a:	d017      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e86c:	687b      	ldr	r3, [r7, #4]
2400e86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e870:	681b      	ldr	r3, [r3, #0]
2400e872:	4a1a      	ldr	r2, [pc, #104]	; (2400e8dc <I2C_ITSlaveCplt+0x2b0>)
2400e874:	4293      	cmp	r3, r2
2400e876:	d011      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e878:	687b      	ldr	r3, [r7, #4]
2400e87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e87c:	681b      	ldr	r3, [r3, #0]
2400e87e:	4a18      	ldr	r2, [pc, #96]	; (2400e8e0 <I2C_ITSlaveCplt+0x2b4>)
2400e880:	4293      	cmp	r3, r2
2400e882:	d00b      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e884:	687b      	ldr	r3, [r7, #4]
2400e886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e888:	681b      	ldr	r3, [r3, #0]
2400e88a:	4a16      	ldr	r2, [pc, #88]	; (2400e8e4 <I2C_ITSlaveCplt+0x2b8>)
2400e88c:	4293      	cmp	r3, r2
2400e88e:	d005      	beq.n	2400e89c <I2C_ITSlaveCplt+0x270>
2400e890:	687b      	ldr	r3, [r7, #4]
2400e892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e894:	681b      	ldr	r3, [r3, #0]
2400e896:	4a14      	ldr	r2, [pc, #80]	; (2400e8e8 <I2C_ITSlaveCplt+0x2bc>)
2400e898:	4293      	cmp	r3, r2
2400e89a:	d127      	bne.n	2400e8ec <I2C_ITSlaveCplt+0x2c0>
2400e89c:	687b      	ldr	r3, [r7, #4]
2400e89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8a0:	681b      	ldr	r3, [r3, #0]
2400e8a2:	685b      	ldr	r3, [r3, #4]
2400e8a4:	b29b      	uxth	r3, r3
2400e8a6:	e026      	b.n	2400e8f6 <I2C_ITSlaveCplt+0x2ca>
2400e8a8:	fe00e800 	.word	0xfe00e800
2400e8ac:	40020010 	.word	0x40020010
2400e8b0:	40020028 	.word	0x40020028
2400e8b4:	40020040 	.word	0x40020040
2400e8b8:	40020058 	.word	0x40020058
2400e8bc:	40020070 	.word	0x40020070
2400e8c0:	40020088 	.word	0x40020088
2400e8c4:	400200a0 	.word	0x400200a0
2400e8c8:	400200b8 	.word	0x400200b8
2400e8cc:	40020410 	.word	0x40020410
2400e8d0:	40020428 	.word	0x40020428
2400e8d4:	40020440 	.word	0x40020440
2400e8d8:	40020458 	.word	0x40020458
2400e8dc:	40020470 	.word	0x40020470
2400e8e0:	40020488 	.word	0x40020488
2400e8e4:	400204a0 	.word	0x400204a0
2400e8e8:	400204b8 	.word	0x400204b8
2400e8ec:	687b      	ldr	r3, [r7, #4]
2400e8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8f0:	681b      	ldr	r3, [r3, #0]
2400e8f2:	685b      	ldr	r3, [r3, #4]
2400e8f4:	b29b      	uxth	r3, r3
2400e8f6:	687a      	ldr	r2, [r7, #4]
2400e8f8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2400e8fa:	697b      	ldr	r3, [r7, #20]
2400e8fc:	089b      	lsrs	r3, r3, #2
2400e8fe:	f003 0301 	and.w	r3, r3, #1
2400e902:	2b00      	cmp	r3, #0
2400e904:	d020      	beq.n	2400e948 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e906:	697b      	ldr	r3, [r7, #20]
2400e908:	f023 0304 	bic.w	r3, r3, #4
2400e90c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e90e:	687b      	ldr	r3, [r7, #4]
2400e910:	681b      	ldr	r3, [r3, #0]
2400e912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e914:	687b      	ldr	r3, [r7, #4]
2400e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e918:	b2d2      	uxtb	r2, r2
2400e91a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e91c:	687b      	ldr	r3, [r7, #4]
2400e91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e920:	1c5a      	adds	r2, r3, #1
2400e922:	687b      	ldr	r3, [r7, #4]
2400e924:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400e926:	687b      	ldr	r3, [r7, #4]
2400e928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e92a:	2b00      	cmp	r3, #0
2400e92c:	d00c      	beq.n	2400e948 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
2400e92e:	687b      	ldr	r3, [r7, #4]
2400e930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e932:	3b01      	subs	r3, #1
2400e934:	b29a      	uxth	r2, r3
2400e936:	687b      	ldr	r3, [r7, #4]
2400e938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e93a:	687b      	ldr	r3, [r7, #4]
2400e93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e93e:	b29b      	uxth	r3, r3
2400e940:	3b01      	subs	r3, #1
2400e942:	b29a      	uxth	r2, r3
2400e944:	687b      	ldr	r3, [r7, #4]
2400e946:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2400e948:	687b      	ldr	r3, [r7, #4]
2400e94a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e94c:	b29b      	uxth	r3, r3
2400e94e:	2b00      	cmp	r3, #0
2400e950:	d005      	beq.n	2400e95e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e952:	687b      	ldr	r3, [r7, #4]
2400e954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e956:	f043 0204 	orr.w	r2, r3, #4
2400e95a:	687b      	ldr	r3, [r7, #4]
2400e95c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e95e:	687b      	ldr	r3, [r7, #4]
2400e960:	2200      	movs	r2, #0
2400e962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400e966:	687b      	ldr	r3, [r7, #4]
2400e968:	2200      	movs	r2, #0
2400e96a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400e96c:	687b      	ldr	r3, [r7, #4]
2400e96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e970:	2b00      	cmp	r3, #0
2400e972:	d010      	beq.n	2400e996 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400e974:	687b      	ldr	r3, [r7, #4]
2400e976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e978:	4619      	mov	r1, r3
2400e97a:	6878      	ldr	r0, [r7, #4]
2400e97c:	f000 f8a4 	bl	2400eac8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400e980:	687b      	ldr	r3, [r7, #4]
2400e982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e986:	b2db      	uxtb	r3, r3
2400e988:	2b28      	cmp	r3, #40	; 0x28
2400e98a:	d141      	bne.n	2400ea10 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2400e98c:	6979      	ldr	r1, [r7, #20]
2400e98e:	6878      	ldr	r0, [r7, #4]
2400e990:	f000 f844 	bl	2400ea1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e994:	e03c      	b.n	2400ea10 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e996:	687b      	ldr	r3, [r7, #4]
2400e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e99a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e99e:	d014      	beq.n	2400e9ca <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
2400e9a0:	6878      	ldr	r0, [r7, #4]
2400e9a2:	f7ff fd1a 	bl	2400e3da <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400e9a6:	687b      	ldr	r3, [r7, #4]
2400e9a8:	4a1b      	ldr	r2, [pc, #108]	; (2400ea18 <I2C_ITSlaveCplt+0x3ec>)
2400e9aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2400e9ac:	687b      	ldr	r3, [r7, #4]
2400e9ae:	2220      	movs	r2, #32
2400e9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e9b4:	687b      	ldr	r3, [r7, #4]
2400e9b6:	2200      	movs	r2, #0
2400e9b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e9ba:	687b      	ldr	r3, [r7, #4]
2400e9bc:	2200      	movs	r2, #0
2400e9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2400e9c2:	6878      	ldr	r0, [r7, #4]
2400e9c4:	f7fe fe45 	bl	2400d652 <HAL_I2C_ListenCpltCallback>
}
2400e9c8:	e022      	b.n	2400ea10 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e9ca:	687b      	ldr	r3, [r7, #4]
2400e9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e9d0:	b2db      	uxtb	r3, r3
2400e9d2:	2b22      	cmp	r3, #34	; 0x22
2400e9d4:	d10e      	bne.n	2400e9f4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
2400e9d6:	687b      	ldr	r3, [r7, #4]
2400e9d8:	2220      	movs	r2, #32
2400e9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e9de:	687b      	ldr	r3, [r7, #4]
2400e9e0:	2200      	movs	r2, #0
2400e9e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e9e4:	687b      	ldr	r3, [r7, #4]
2400e9e6:	2200      	movs	r2, #0
2400e9e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400e9ec:	6878      	ldr	r0, [r7, #4]
2400e9ee:	f7fe fe18 	bl	2400d622 <HAL_I2C_SlaveRxCpltCallback>
}
2400e9f2:	e00d      	b.n	2400ea10 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
2400e9f4:	687b      	ldr	r3, [r7, #4]
2400e9f6:	2220      	movs	r2, #32
2400e9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e9fc:	687b      	ldr	r3, [r7, #4]
2400e9fe:	2200      	movs	r2, #0
2400ea00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400ea02:	687b      	ldr	r3, [r7, #4]
2400ea04:	2200      	movs	r2, #0
2400ea06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400ea0a:	6878      	ldr	r0, [r7, #4]
2400ea0c:	f7fe fdff 	bl	2400d60e <HAL_I2C_SlaveTxCpltCallback>
}
2400ea10:	bf00      	nop
2400ea12:	3718      	adds	r7, #24
2400ea14:	46bd      	mov	sp, r7
2400ea16:	bd80      	pop	{r7, pc}
2400ea18:	ffff0000 	.word	0xffff0000

2400ea1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400ea1c:	b580      	push	{r7, lr}
2400ea1e:	b082      	sub	sp, #8
2400ea20:	af00      	add	r7, sp, #0
2400ea22:	6078      	str	r0, [r7, #4]
2400ea24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ea26:	687b      	ldr	r3, [r7, #4]
2400ea28:	4a26      	ldr	r2, [pc, #152]	; (2400eac4 <I2C_ITListenCplt+0xa8>)
2400ea2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2400ea2c:	687b      	ldr	r3, [r7, #4]
2400ea2e:	2200      	movs	r2, #0
2400ea30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400ea32:	687b      	ldr	r3, [r7, #4]
2400ea34:	2220      	movs	r2, #32
2400ea36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400ea3a:	687b      	ldr	r3, [r7, #4]
2400ea3c:	2200      	movs	r2, #0
2400ea3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400ea42:	687b      	ldr	r3, [r7, #4]
2400ea44:	2200      	movs	r2, #0
2400ea46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400ea48:	683b      	ldr	r3, [r7, #0]
2400ea4a:	089b      	lsrs	r3, r3, #2
2400ea4c:	f003 0301 	and.w	r3, r3, #1
2400ea50:	2b00      	cmp	r3, #0
2400ea52:	d022      	beq.n	2400ea9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400ea54:	687b      	ldr	r3, [r7, #4]
2400ea56:	681b      	ldr	r3, [r3, #0]
2400ea58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400ea5a:	687b      	ldr	r3, [r7, #4]
2400ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ea5e:	b2d2      	uxtb	r2, r2
2400ea60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400ea62:	687b      	ldr	r3, [r7, #4]
2400ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ea66:	1c5a      	adds	r2, r3, #1
2400ea68:	687b      	ldr	r3, [r7, #4]
2400ea6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400ea6c:	687b      	ldr	r3, [r7, #4]
2400ea6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ea70:	2b00      	cmp	r3, #0
2400ea72:	d012      	beq.n	2400ea9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
2400ea74:	687b      	ldr	r3, [r7, #4]
2400ea76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ea78:	3b01      	subs	r3, #1
2400ea7a:	b29a      	uxth	r2, r3
2400ea7c:	687b      	ldr	r3, [r7, #4]
2400ea7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400ea80:	687b      	ldr	r3, [r7, #4]
2400ea82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ea84:	b29b      	uxth	r3, r3
2400ea86:	3b01      	subs	r3, #1
2400ea88:	b29a      	uxth	r2, r3
2400ea8a:	687b      	ldr	r3, [r7, #4]
2400ea8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400ea8e:	687b      	ldr	r3, [r7, #4]
2400ea90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ea92:	f043 0204 	orr.w	r2, r3, #4
2400ea96:	687b      	ldr	r3, [r7, #4]
2400ea98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400ea9a:	f248 0103 	movw	r1, #32771	; 0x8003
2400ea9e:	6878      	ldr	r0, [r7, #4]
2400eaa0:	f000 fea6 	bl	2400f7f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400eaa4:	687b      	ldr	r3, [r7, #4]
2400eaa6:	681b      	ldr	r3, [r3, #0]
2400eaa8:	2210      	movs	r2, #16
2400eaaa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400eaac:	687b      	ldr	r3, [r7, #4]
2400eaae:	2200      	movs	r2, #0
2400eab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2400eab4:	6878      	ldr	r0, [r7, #4]
2400eab6:	f7fe fdcc 	bl	2400d652 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2400eaba:	bf00      	nop
2400eabc:	3708      	adds	r7, #8
2400eabe:	46bd      	mov	sp, r7
2400eac0:	bd80      	pop	{r7, pc}
2400eac2:	bf00      	nop
2400eac4:	ffff0000 	.word	0xffff0000

2400eac8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2400eac8:	b580      	push	{r7, lr}
2400eaca:	b084      	sub	sp, #16
2400eacc:	af00      	add	r7, sp, #0
2400eace:	6078      	str	r0, [r7, #4]
2400ead0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400ead2:	687b      	ldr	r3, [r7, #4]
2400ead4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ead8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400eada:	687b      	ldr	r3, [r7, #4]
2400eadc:	2200      	movs	r2, #0
2400eade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400eae2:	687b      	ldr	r3, [r7, #4]
2400eae4:	4a5d      	ldr	r2, [pc, #372]	; (2400ec5c <I2C_ITError+0x194>)
2400eae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
2400eae8:	687b      	ldr	r3, [r7, #4]
2400eaea:	2200      	movs	r2, #0
2400eaec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2400eaee:	687b      	ldr	r3, [r7, #4]
2400eaf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400eaf2:	683b      	ldr	r3, [r7, #0]
2400eaf4:	431a      	orrs	r2, r3
2400eaf6:	687b      	ldr	r3, [r7, #4]
2400eaf8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400eafa:	7bfb      	ldrb	r3, [r7, #15]
2400eafc:	2b28      	cmp	r3, #40	; 0x28
2400eafe:	d005      	beq.n	2400eb0c <I2C_ITError+0x44>
2400eb00:	7bfb      	ldrb	r3, [r7, #15]
2400eb02:	2b29      	cmp	r3, #41	; 0x29
2400eb04:	d002      	beq.n	2400eb0c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2400eb06:	7bfb      	ldrb	r3, [r7, #15]
2400eb08:	2b2a      	cmp	r3, #42	; 0x2a
2400eb0a:	d10b      	bne.n	2400eb24 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400eb0c:	2103      	movs	r1, #3
2400eb0e:	6878      	ldr	r0, [r7, #4]
2400eb10:	f000 fe6e 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400eb14:	687b      	ldr	r3, [r7, #4]
2400eb16:	2228      	movs	r2, #40	; 0x28
2400eb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2400eb1c:	687b      	ldr	r3, [r7, #4]
2400eb1e:	4a50      	ldr	r2, [pc, #320]	; (2400ec60 <I2C_ITError+0x198>)
2400eb20:	635a      	str	r2, [r3, #52]	; 0x34
2400eb22:	e011      	b.n	2400eb48 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400eb24:	f248 0103 	movw	r1, #32771	; 0x8003
2400eb28:	6878      	ldr	r0, [r7, #4]
2400eb2a:	f000 fe61 	bl	2400f7f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2400eb2e:	687b      	ldr	r3, [r7, #4]
2400eb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400eb34:	b2db      	uxtb	r3, r3
2400eb36:	2b60      	cmp	r3, #96	; 0x60
2400eb38:	d003      	beq.n	2400eb42 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2400eb3a:	687b      	ldr	r3, [r7, #4]
2400eb3c:	2220      	movs	r2, #32
2400eb3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
2400eb42:	687b      	ldr	r3, [r7, #4]
2400eb44:	2200      	movs	r2, #0
2400eb46:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2400eb48:	687b      	ldr	r3, [r7, #4]
2400eb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400eb4c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2400eb4e:	687b      	ldr	r3, [r7, #4]
2400eb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eb52:	2b00      	cmp	r3, #0
2400eb54:	d039      	beq.n	2400ebca <I2C_ITError+0x102>
2400eb56:	68bb      	ldr	r3, [r7, #8]
2400eb58:	2b11      	cmp	r3, #17
2400eb5a:	d002      	beq.n	2400eb62 <I2C_ITError+0x9a>
2400eb5c:	68bb      	ldr	r3, [r7, #8]
2400eb5e:	2b21      	cmp	r3, #33	; 0x21
2400eb60:	d133      	bne.n	2400ebca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400eb62:	687b      	ldr	r3, [r7, #4]
2400eb64:	681b      	ldr	r3, [r3, #0]
2400eb66:	681b      	ldr	r3, [r3, #0]
2400eb68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400eb6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400eb70:	d107      	bne.n	2400eb82 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400eb72:	687b      	ldr	r3, [r7, #4]
2400eb74:	681b      	ldr	r3, [r3, #0]
2400eb76:	681a      	ldr	r2, [r3, #0]
2400eb78:	687b      	ldr	r3, [r7, #4]
2400eb7a:	681b      	ldr	r3, [r3, #0]
2400eb7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400eb80:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400eb82:	687b      	ldr	r3, [r7, #4]
2400eb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eb86:	4618      	mov	r0, r3
2400eb88:	f7f7 fc50 	bl	2400642c <HAL_DMA_GetState>
2400eb8c:	4603      	mov	r3, r0
2400eb8e:	2b01      	cmp	r3, #1
2400eb90:	d017      	beq.n	2400ebc2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400eb92:	687b      	ldr	r3, [r7, #4]
2400eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eb96:	4a33      	ldr	r2, [pc, #204]	; (2400ec64 <I2C_ITError+0x19c>)
2400eb98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400eb9a:	687b      	ldr	r3, [r7, #4]
2400eb9c:	2200      	movs	r2, #0
2400eb9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400eba2:	687b      	ldr	r3, [r7, #4]
2400eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eba6:	4618      	mov	r0, r3
2400eba8:	f7f5 fe5e 	bl	24004868 <HAL_DMA_Abort_IT>
2400ebac:	4603      	mov	r3, r0
2400ebae:	2b00      	cmp	r3, #0
2400ebb0:	d04d      	beq.n	2400ec4e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400ebb2:	687b      	ldr	r3, [r7, #4]
2400ebb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ebb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ebb8:	687a      	ldr	r2, [r7, #4]
2400ebba:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400ebbc:	4610      	mov	r0, r2
2400ebbe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ebc0:	e045      	b.n	2400ec4e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400ebc2:	6878      	ldr	r0, [r7, #4]
2400ebc4:	f000 f850 	bl	2400ec68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ebc8:	e041      	b.n	2400ec4e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2400ebca:	687b      	ldr	r3, [r7, #4]
2400ebcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ebce:	2b00      	cmp	r3, #0
2400ebd0:	d039      	beq.n	2400ec46 <I2C_ITError+0x17e>
2400ebd2:	68bb      	ldr	r3, [r7, #8]
2400ebd4:	2b12      	cmp	r3, #18
2400ebd6:	d002      	beq.n	2400ebde <I2C_ITError+0x116>
2400ebd8:	68bb      	ldr	r3, [r7, #8]
2400ebda:	2b22      	cmp	r3, #34	; 0x22
2400ebdc:	d133      	bne.n	2400ec46 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400ebde:	687b      	ldr	r3, [r7, #4]
2400ebe0:	681b      	ldr	r3, [r3, #0]
2400ebe2:	681b      	ldr	r3, [r3, #0]
2400ebe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ebe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ebec:	d107      	bne.n	2400ebfe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ebee:	687b      	ldr	r3, [r7, #4]
2400ebf0:	681b      	ldr	r3, [r3, #0]
2400ebf2:	681a      	ldr	r2, [r3, #0]
2400ebf4:	687b      	ldr	r3, [r7, #4]
2400ebf6:	681b      	ldr	r3, [r3, #0]
2400ebf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ebfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ebfe:	687b      	ldr	r3, [r7, #4]
2400ec00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ec02:	4618      	mov	r0, r3
2400ec04:	f7f7 fc12 	bl	2400642c <HAL_DMA_GetState>
2400ec08:	4603      	mov	r3, r0
2400ec0a:	2b01      	cmp	r3, #1
2400ec0c:	d017      	beq.n	2400ec3e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400ec0e:	687b      	ldr	r3, [r7, #4]
2400ec10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ec12:	4a14      	ldr	r2, [pc, #80]	; (2400ec64 <I2C_ITError+0x19c>)
2400ec14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ec16:	687b      	ldr	r3, [r7, #4]
2400ec18:	2200      	movs	r2, #0
2400ec1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400ec1e:	687b      	ldr	r3, [r7, #4]
2400ec20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ec22:	4618      	mov	r0, r3
2400ec24:	f7f5 fe20 	bl	24004868 <HAL_DMA_Abort_IT>
2400ec28:	4603      	mov	r3, r0
2400ec2a:	2b00      	cmp	r3, #0
2400ec2c:	d011      	beq.n	2400ec52 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400ec2e:	687b      	ldr	r3, [r7, #4]
2400ec30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ec32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ec34:	687a      	ldr	r2, [r7, #4]
2400ec36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400ec38:	4610      	mov	r0, r2
2400ec3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ec3c:	e009      	b.n	2400ec52 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400ec3e:	6878      	ldr	r0, [r7, #4]
2400ec40:	f000 f812 	bl	2400ec68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ec44:	e005      	b.n	2400ec52 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2400ec46:	6878      	ldr	r0, [r7, #4]
2400ec48:	f000 f80e 	bl	2400ec68 <I2C_TreatErrorCallback>
  }
}
2400ec4c:	e002      	b.n	2400ec54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400ec4e:	bf00      	nop
2400ec50:	e000      	b.n	2400ec54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400ec52:	bf00      	nop
}
2400ec54:	bf00      	nop
2400ec56:	3710      	adds	r7, #16
2400ec58:	46bd      	mov	sp, r7
2400ec5a:	bd80      	pop	{r7, pc}
2400ec5c:	ffff0000 	.word	0xffff0000
2400ec60:	2400d957 	.word	0x2400d957
2400ec64:	2400f245 	.word	0x2400f245

2400ec68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400ec68:	b580      	push	{r7, lr}
2400ec6a:	b082      	sub	sp, #8
2400ec6c:	af00      	add	r7, sp, #0
2400ec6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400ec70:	687b      	ldr	r3, [r7, #4]
2400ec72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ec76:	b2db      	uxtb	r3, r3
2400ec78:	2b60      	cmp	r3, #96	; 0x60
2400ec7a:	d10e      	bne.n	2400ec9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2400ec7c:	687b      	ldr	r3, [r7, #4]
2400ec7e:	2220      	movs	r2, #32
2400ec80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400ec84:	687b      	ldr	r3, [r7, #4]
2400ec86:	2200      	movs	r2, #0
2400ec88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ec8a:	687b      	ldr	r3, [r7, #4]
2400ec8c:	2200      	movs	r2, #0
2400ec8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2400ec92:	6878      	ldr	r0, [r7, #4]
2400ec94:	f7fe fd05 	bl	2400d6a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400ec98:	e009      	b.n	2400ecae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2400ec9a:	687b      	ldr	r3, [r7, #4]
2400ec9c:	2200      	movs	r2, #0
2400ec9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400eca0:	687b      	ldr	r3, [r7, #4]
2400eca2:	2200      	movs	r2, #0
2400eca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400eca8:	6878      	ldr	r0, [r7, #4]
2400ecaa:	f7fe fcf0 	bl	2400d68e <HAL_I2C_ErrorCallback>
}
2400ecae:	bf00      	nop
2400ecb0:	3708      	adds	r7, #8
2400ecb2:	46bd      	mov	sp, r7
2400ecb4:	bd80      	pop	{r7, pc}

2400ecb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2400ecb6:	b480      	push	{r7}
2400ecb8:	b083      	sub	sp, #12
2400ecba:	af00      	add	r7, sp, #0
2400ecbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400ecbe:	687b      	ldr	r3, [r7, #4]
2400ecc0:	681b      	ldr	r3, [r3, #0]
2400ecc2:	699b      	ldr	r3, [r3, #24]
2400ecc4:	f003 0302 	and.w	r3, r3, #2
2400ecc8:	2b02      	cmp	r3, #2
2400ecca:	d103      	bne.n	2400ecd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2400eccc:	687b      	ldr	r3, [r7, #4]
2400ecce:	681b      	ldr	r3, [r3, #0]
2400ecd0:	2200      	movs	r2, #0
2400ecd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400ecd4:	687b      	ldr	r3, [r7, #4]
2400ecd6:	681b      	ldr	r3, [r3, #0]
2400ecd8:	699b      	ldr	r3, [r3, #24]
2400ecda:	f003 0301 	and.w	r3, r3, #1
2400ecde:	2b01      	cmp	r3, #1
2400ece0:	d007      	beq.n	2400ecf2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400ece2:	687b      	ldr	r3, [r7, #4]
2400ece4:	681b      	ldr	r3, [r3, #0]
2400ece6:	699a      	ldr	r2, [r3, #24]
2400ece8:	687b      	ldr	r3, [r7, #4]
2400ecea:	681b      	ldr	r3, [r3, #0]
2400ecec:	f042 0201 	orr.w	r2, r2, #1
2400ecf0:	619a      	str	r2, [r3, #24]
  }
}
2400ecf2:	bf00      	nop
2400ecf4:	370c      	adds	r7, #12
2400ecf6:	46bd      	mov	sp, r7
2400ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ecfc:	4770      	bx	lr

2400ecfe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400ecfe:	b580      	push	{r7, lr}
2400ed00:	b084      	sub	sp, #16
2400ed02:	af00      	add	r7, sp, #0
2400ed04:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400ed06:	687b      	ldr	r3, [r7, #4]
2400ed08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ed0a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400ed0c:	68fb      	ldr	r3, [r7, #12]
2400ed0e:	681b      	ldr	r3, [r3, #0]
2400ed10:	681a      	ldr	r2, [r3, #0]
2400ed12:	68fb      	ldr	r3, [r7, #12]
2400ed14:	681b      	ldr	r3, [r3, #0]
2400ed16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400ed1a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400ed1c:	68fb      	ldr	r3, [r7, #12]
2400ed1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed20:	b29b      	uxth	r3, r3
2400ed22:	2b00      	cmp	r3, #0
2400ed24:	d104      	bne.n	2400ed30 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400ed26:	2120      	movs	r1, #32
2400ed28:	68f8      	ldr	r0, [r7, #12]
2400ed2a:	f000 fcfd 	bl	2400f728 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400ed2e:	e02d      	b.n	2400ed8c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400ed30:	68fb      	ldr	r3, [r7, #12]
2400ed32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ed34:	68fa      	ldr	r2, [r7, #12]
2400ed36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400ed38:	441a      	add	r2, r3
2400ed3a:	68fb      	ldr	r3, [r7, #12]
2400ed3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ed3e:	68fb      	ldr	r3, [r7, #12]
2400ed40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed42:	b29b      	uxth	r3, r3
2400ed44:	2bff      	cmp	r3, #255	; 0xff
2400ed46:	d903      	bls.n	2400ed50 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ed48:	68fb      	ldr	r3, [r7, #12]
2400ed4a:	22ff      	movs	r2, #255	; 0xff
2400ed4c:	851a      	strh	r2, [r3, #40]	; 0x28
2400ed4e:	e004      	b.n	2400ed5a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400ed50:	68fb      	ldr	r3, [r7, #12]
2400ed52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ed54:	b29a      	uxth	r2, r3
2400ed56:	68fb      	ldr	r3, [r7, #12]
2400ed58:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400ed5a:	68fb      	ldr	r3, [r7, #12]
2400ed5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400ed5e:	68fb      	ldr	r3, [r7, #12]
2400ed60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ed62:	4619      	mov	r1, r3
2400ed64:	68fb      	ldr	r3, [r7, #12]
2400ed66:	681b      	ldr	r3, [r3, #0]
2400ed68:	3328      	adds	r3, #40	; 0x28
2400ed6a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400ed6c:	68fb      	ldr	r3, [r7, #12]
2400ed6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400ed70:	f7f4 fff2 	bl	24003d58 <HAL_DMA_Start_IT>
2400ed74:	4603      	mov	r3, r0
2400ed76:	2b00      	cmp	r3, #0
2400ed78:	d004      	beq.n	2400ed84 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400ed7a:	2110      	movs	r1, #16
2400ed7c:	68f8      	ldr	r0, [r7, #12]
2400ed7e:	f7ff fea3 	bl	2400eac8 <I2C_ITError>
}
2400ed82:	e003      	b.n	2400ed8c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400ed84:	2140      	movs	r1, #64	; 0x40
2400ed86:	68f8      	ldr	r0, [r7, #12]
2400ed88:	f000 fcce 	bl	2400f728 <I2C_Enable_IRQ>
}
2400ed8c:	bf00      	nop
2400ed8e:	3710      	adds	r7, #16
2400ed90:	46bd      	mov	sp, r7
2400ed92:	bd80      	pop	{r7, pc}

2400ed94 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400ed94:	b580      	push	{r7, lr}
2400ed96:	b084      	sub	sp, #16
2400ed98:	af00      	add	r7, sp, #0
2400ed9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400ed9c:	687b      	ldr	r3, [r7, #4]
2400ed9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eda0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400eda2:	68fb      	ldr	r3, [r7, #12]
2400eda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400eda6:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400eda8:	68bb      	ldr	r3, [r7, #8]
2400edaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400edae:	d002      	beq.n	2400edb6 <I2C_DMASlaveTransmitCplt+0x22>
2400edb0:	68bb      	ldr	r3, [r7, #8]
2400edb2:	2b00      	cmp	r3, #0
2400edb4:	d10a      	bne.n	2400edcc <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400edb6:	68fb      	ldr	r3, [r7, #12]
2400edb8:	681b      	ldr	r3, [r3, #0]
2400edba:	681a      	ldr	r2, [r3, #0]
2400edbc:	68fb      	ldr	r3, [r7, #12]
2400edbe:	681b      	ldr	r3, [r3, #0]
2400edc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400edc4:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400edc6:	68f8      	ldr	r0, [r7, #12]
2400edc8:	f7ff fb07 	bl	2400e3da <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400edcc:	bf00      	nop
2400edce:	3710      	adds	r7, #16
2400edd0:	46bd      	mov	sp, r7
2400edd2:	bd80      	pop	{r7, pc}

2400edd4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400edd4:	b580      	push	{r7, lr}
2400edd6:	b084      	sub	sp, #16
2400edd8:	af00      	add	r7, sp, #0
2400edda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400eddc:	687b      	ldr	r3, [r7, #4]
2400edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ede0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ede2:	68fb      	ldr	r3, [r7, #12]
2400ede4:	681b      	ldr	r3, [r3, #0]
2400ede6:	681a      	ldr	r2, [r3, #0]
2400ede8:	68fb      	ldr	r3, [r7, #12]
2400edea:	681b      	ldr	r3, [r3, #0]
2400edec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400edf0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400edf2:	68fb      	ldr	r3, [r7, #12]
2400edf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400edf6:	b29b      	uxth	r3, r3
2400edf8:	2b00      	cmp	r3, #0
2400edfa:	d104      	bne.n	2400ee06 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400edfc:	2120      	movs	r1, #32
2400edfe:	68f8      	ldr	r0, [r7, #12]
2400ee00:	f000 fc92 	bl	2400f728 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400ee04:	e02d      	b.n	2400ee62 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400ee06:	68fb      	ldr	r3, [r7, #12]
2400ee08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ee0a:	68fa      	ldr	r2, [r7, #12]
2400ee0c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400ee0e:	441a      	add	r2, r3
2400ee10:	68fb      	ldr	r3, [r7, #12]
2400ee12:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ee14:	68fb      	ldr	r3, [r7, #12]
2400ee16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ee18:	b29b      	uxth	r3, r3
2400ee1a:	2bff      	cmp	r3, #255	; 0xff
2400ee1c:	d903      	bls.n	2400ee26 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ee1e:	68fb      	ldr	r3, [r7, #12]
2400ee20:	22ff      	movs	r2, #255	; 0xff
2400ee22:	851a      	strh	r2, [r3, #40]	; 0x28
2400ee24:	e004      	b.n	2400ee30 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400ee26:	68fb      	ldr	r3, [r7, #12]
2400ee28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ee2a:	b29a      	uxth	r2, r3
2400ee2c:	68fb      	ldr	r3, [r7, #12]
2400ee2e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400ee30:	68fb      	ldr	r3, [r7, #12]
2400ee32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400ee34:	68fb      	ldr	r3, [r7, #12]
2400ee36:	681b      	ldr	r3, [r3, #0]
2400ee38:	3324      	adds	r3, #36	; 0x24
2400ee3a:	4619      	mov	r1, r3
2400ee3c:	68fb      	ldr	r3, [r7, #12]
2400ee3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ee40:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400ee42:	68fb      	ldr	r3, [r7, #12]
2400ee44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400ee46:	f7f4 ff87 	bl	24003d58 <HAL_DMA_Start_IT>
2400ee4a:	4603      	mov	r3, r0
2400ee4c:	2b00      	cmp	r3, #0
2400ee4e:	d004      	beq.n	2400ee5a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400ee50:	2110      	movs	r1, #16
2400ee52:	68f8      	ldr	r0, [r7, #12]
2400ee54:	f7ff fe38 	bl	2400eac8 <I2C_ITError>
}
2400ee58:	e003      	b.n	2400ee62 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400ee5a:	2140      	movs	r1, #64	; 0x40
2400ee5c:	68f8      	ldr	r0, [r7, #12]
2400ee5e:	f000 fc63 	bl	2400f728 <I2C_Enable_IRQ>
}
2400ee62:	bf00      	nop
2400ee64:	3710      	adds	r7, #16
2400ee66:	46bd      	mov	sp, r7
2400ee68:	bd80      	pop	{r7, pc}
	...

2400ee6c <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400ee6c:	b580      	push	{r7, lr}
2400ee6e:	b084      	sub	sp, #16
2400ee70:	af00      	add	r7, sp, #0
2400ee72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400ee74:	687b      	ldr	r3, [r7, #4]
2400ee76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ee78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400ee7a:	68fb      	ldr	r3, [r7, #12]
2400ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400ee7e:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2400ee80:	68fb      	ldr	r3, [r7, #12]
2400ee82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ee84:	681b      	ldr	r3, [r3, #0]
2400ee86:	4a42      	ldr	r2, [pc, #264]	; (2400ef90 <I2C_DMASlaveReceiveCplt+0x124>)
2400ee88:	4293      	cmp	r3, r2
2400ee8a:	d059      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ee8c:	68fb      	ldr	r3, [r7, #12]
2400ee8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ee90:	681b      	ldr	r3, [r3, #0]
2400ee92:	4a40      	ldr	r2, [pc, #256]	; (2400ef94 <I2C_DMASlaveReceiveCplt+0x128>)
2400ee94:	4293      	cmp	r3, r2
2400ee96:	d053      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ee98:	68fb      	ldr	r3, [r7, #12]
2400ee9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ee9c:	681b      	ldr	r3, [r3, #0]
2400ee9e:	4a3e      	ldr	r2, [pc, #248]	; (2400ef98 <I2C_DMASlaveReceiveCplt+0x12c>)
2400eea0:	4293      	cmp	r3, r2
2400eea2:	d04d      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eea4:	68fb      	ldr	r3, [r7, #12]
2400eea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eea8:	681b      	ldr	r3, [r3, #0]
2400eeaa:	4a3c      	ldr	r2, [pc, #240]	; (2400ef9c <I2C_DMASlaveReceiveCplt+0x130>)
2400eeac:	4293      	cmp	r3, r2
2400eeae:	d047      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eeb0:	68fb      	ldr	r3, [r7, #12]
2400eeb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eeb4:	681b      	ldr	r3, [r3, #0]
2400eeb6:	4a3a      	ldr	r2, [pc, #232]	; (2400efa0 <I2C_DMASlaveReceiveCplt+0x134>)
2400eeb8:	4293      	cmp	r3, r2
2400eeba:	d041      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eebc:	68fb      	ldr	r3, [r7, #12]
2400eebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eec0:	681b      	ldr	r3, [r3, #0]
2400eec2:	4a38      	ldr	r2, [pc, #224]	; (2400efa4 <I2C_DMASlaveReceiveCplt+0x138>)
2400eec4:	4293      	cmp	r3, r2
2400eec6:	d03b      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eec8:	68fb      	ldr	r3, [r7, #12]
2400eeca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eecc:	681b      	ldr	r3, [r3, #0]
2400eece:	4a36      	ldr	r2, [pc, #216]	; (2400efa8 <I2C_DMASlaveReceiveCplt+0x13c>)
2400eed0:	4293      	cmp	r3, r2
2400eed2:	d035      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eed4:	68fb      	ldr	r3, [r7, #12]
2400eed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eed8:	681b      	ldr	r3, [r3, #0]
2400eeda:	4a34      	ldr	r2, [pc, #208]	; (2400efac <I2C_DMASlaveReceiveCplt+0x140>)
2400eedc:	4293      	cmp	r3, r2
2400eede:	d02f      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eee0:	68fb      	ldr	r3, [r7, #12]
2400eee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eee4:	681b      	ldr	r3, [r3, #0]
2400eee6:	4a32      	ldr	r2, [pc, #200]	; (2400efb0 <I2C_DMASlaveReceiveCplt+0x144>)
2400eee8:	4293      	cmp	r3, r2
2400eeea:	d029      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eeec:	68fb      	ldr	r3, [r7, #12]
2400eeee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eef0:	681b      	ldr	r3, [r3, #0]
2400eef2:	4a30      	ldr	r2, [pc, #192]	; (2400efb4 <I2C_DMASlaveReceiveCplt+0x148>)
2400eef4:	4293      	cmp	r3, r2
2400eef6:	d023      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400eef8:	68fb      	ldr	r3, [r7, #12]
2400eefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eefc:	681b      	ldr	r3, [r3, #0]
2400eefe:	4a2e      	ldr	r2, [pc, #184]	; (2400efb8 <I2C_DMASlaveReceiveCplt+0x14c>)
2400ef00:	4293      	cmp	r3, r2
2400ef02:	d01d      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ef04:	68fb      	ldr	r3, [r7, #12]
2400ef06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef08:	681b      	ldr	r3, [r3, #0]
2400ef0a:	4a2c      	ldr	r2, [pc, #176]	; (2400efbc <I2C_DMASlaveReceiveCplt+0x150>)
2400ef0c:	4293      	cmp	r3, r2
2400ef0e:	d017      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ef10:	68fb      	ldr	r3, [r7, #12]
2400ef12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef14:	681b      	ldr	r3, [r3, #0]
2400ef16:	4a2a      	ldr	r2, [pc, #168]	; (2400efc0 <I2C_DMASlaveReceiveCplt+0x154>)
2400ef18:	4293      	cmp	r3, r2
2400ef1a:	d011      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ef1c:	68fb      	ldr	r3, [r7, #12]
2400ef1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef20:	681b      	ldr	r3, [r3, #0]
2400ef22:	4a28      	ldr	r2, [pc, #160]	; (2400efc4 <I2C_DMASlaveReceiveCplt+0x158>)
2400ef24:	4293      	cmp	r3, r2
2400ef26:	d00b      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ef28:	68fb      	ldr	r3, [r7, #12]
2400ef2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef2c:	681b      	ldr	r3, [r3, #0]
2400ef2e:	4a26      	ldr	r2, [pc, #152]	; (2400efc8 <I2C_DMASlaveReceiveCplt+0x15c>)
2400ef30:	4293      	cmp	r3, r2
2400ef32:	d005      	beq.n	2400ef40 <I2C_DMASlaveReceiveCplt+0xd4>
2400ef34:	68fb      	ldr	r3, [r7, #12]
2400ef36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef38:	681b      	ldr	r3, [r3, #0]
2400ef3a:	4a24      	ldr	r2, [pc, #144]	; (2400efcc <I2C_DMASlaveReceiveCplt+0x160>)
2400ef3c:	4293      	cmp	r3, r2
2400ef3e:	d109      	bne.n	2400ef54 <I2C_DMASlaveReceiveCplt+0xe8>
2400ef40:	68fb      	ldr	r3, [r7, #12]
2400ef42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef44:	681b      	ldr	r3, [r3, #0]
2400ef46:	685b      	ldr	r3, [r3, #4]
2400ef48:	2b00      	cmp	r3, #0
2400ef4a:	bf0c      	ite	eq
2400ef4c:	2301      	moveq	r3, #1
2400ef4e:	2300      	movne	r3, #0
2400ef50:	b2db      	uxtb	r3, r3
2400ef52:	e008      	b.n	2400ef66 <I2C_DMASlaveReceiveCplt+0xfa>
2400ef54:	68fb      	ldr	r3, [r7, #12]
2400ef56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ef58:	681b      	ldr	r3, [r3, #0]
2400ef5a:	685b      	ldr	r3, [r3, #4]
2400ef5c:	2b00      	cmp	r3, #0
2400ef5e:	bf0c      	ite	eq
2400ef60:	2301      	moveq	r3, #1
2400ef62:	2300      	movne	r3, #0
2400ef64:	b2db      	uxtb	r3, r3
2400ef66:	2b00      	cmp	r3, #0
2400ef68:	d00e      	beq.n	2400ef88 <I2C_DMASlaveReceiveCplt+0x11c>
2400ef6a:	68bb      	ldr	r3, [r7, #8]
2400ef6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400ef70:	d00a      	beq.n	2400ef88 <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ef72:	68fb      	ldr	r3, [r7, #12]
2400ef74:	681b      	ldr	r3, [r3, #0]
2400ef76:	681a      	ldr	r2, [r3, #0]
2400ef78:	68fb      	ldr	r3, [r7, #12]
2400ef7a:	681b      	ldr	r3, [r3, #0]
2400ef7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ef80:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400ef82:	68f8      	ldr	r0, [r7, #12]
2400ef84:	f7ff fa29 	bl	2400e3da <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400ef88:	bf00      	nop
2400ef8a:	3710      	adds	r7, #16
2400ef8c:	46bd      	mov	sp, r7
2400ef8e:	bd80      	pop	{r7, pc}
2400ef90:	40020010 	.word	0x40020010
2400ef94:	40020028 	.word	0x40020028
2400ef98:	40020040 	.word	0x40020040
2400ef9c:	40020058 	.word	0x40020058
2400efa0:	40020070 	.word	0x40020070
2400efa4:	40020088 	.word	0x40020088
2400efa8:	400200a0 	.word	0x400200a0
2400efac:	400200b8 	.word	0x400200b8
2400efb0:	40020410 	.word	0x40020410
2400efb4:	40020428 	.word	0x40020428
2400efb8:	40020440 	.word	0x40020440
2400efbc:	40020458 	.word	0x40020458
2400efc0:	40020470 	.word	0x40020470
2400efc4:	40020488 	.word	0x40020488
2400efc8:	400204a0 	.word	0x400204a0
2400efcc:	400204b8 	.word	0x400204b8

2400efd0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2400efd0:	b580      	push	{r7, lr}
2400efd2:	b084      	sub	sp, #16
2400efd4:	af00      	add	r7, sp, #0
2400efd6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2400efd8:	2300      	movs	r3, #0
2400efda:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400efdc:	687b      	ldr	r3, [r7, #4]
2400efde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400efe0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2400efe2:	68bb      	ldr	r3, [r7, #8]
2400efe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400efe6:	2b00      	cmp	r3, #0
2400efe8:	d076      	beq.n	2400f0d8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400efea:	68bb      	ldr	r3, [r7, #8]
2400efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400efee:	681b      	ldr	r3, [r3, #0]
2400eff0:	4a71      	ldr	r2, [pc, #452]	; (2400f1b8 <I2C_DMAError+0x1e8>)
2400eff2:	4293      	cmp	r3, r2
2400eff4:	d059      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400eff6:	68bb      	ldr	r3, [r7, #8]
2400eff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400effa:	681b      	ldr	r3, [r3, #0]
2400effc:	4a6f      	ldr	r2, [pc, #444]	; (2400f1bc <I2C_DMAError+0x1ec>)
2400effe:	4293      	cmp	r3, r2
2400f000:	d053      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f002:	68bb      	ldr	r3, [r7, #8]
2400f004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f006:	681b      	ldr	r3, [r3, #0]
2400f008:	4a6d      	ldr	r2, [pc, #436]	; (2400f1c0 <I2C_DMAError+0x1f0>)
2400f00a:	4293      	cmp	r3, r2
2400f00c:	d04d      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f00e:	68bb      	ldr	r3, [r7, #8]
2400f010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f012:	681b      	ldr	r3, [r3, #0]
2400f014:	4a6b      	ldr	r2, [pc, #428]	; (2400f1c4 <I2C_DMAError+0x1f4>)
2400f016:	4293      	cmp	r3, r2
2400f018:	d047      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f01a:	68bb      	ldr	r3, [r7, #8]
2400f01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f01e:	681b      	ldr	r3, [r3, #0]
2400f020:	4a69      	ldr	r2, [pc, #420]	; (2400f1c8 <I2C_DMAError+0x1f8>)
2400f022:	4293      	cmp	r3, r2
2400f024:	d041      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f026:	68bb      	ldr	r3, [r7, #8]
2400f028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f02a:	681b      	ldr	r3, [r3, #0]
2400f02c:	4a67      	ldr	r2, [pc, #412]	; (2400f1cc <I2C_DMAError+0x1fc>)
2400f02e:	4293      	cmp	r3, r2
2400f030:	d03b      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f032:	68bb      	ldr	r3, [r7, #8]
2400f034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f036:	681b      	ldr	r3, [r3, #0]
2400f038:	4a65      	ldr	r2, [pc, #404]	; (2400f1d0 <I2C_DMAError+0x200>)
2400f03a:	4293      	cmp	r3, r2
2400f03c:	d035      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f03e:	68bb      	ldr	r3, [r7, #8]
2400f040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f042:	681b      	ldr	r3, [r3, #0]
2400f044:	4a63      	ldr	r2, [pc, #396]	; (2400f1d4 <I2C_DMAError+0x204>)
2400f046:	4293      	cmp	r3, r2
2400f048:	d02f      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f04a:	68bb      	ldr	r3, [r7, #8]
2400f04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f04e:	681b      	ldr	r3, [r3, #0]
2400f050:	4a61      	ldr	r2, [pc, #388]	; (2400f1d8 <I2C_DMAError+0x208>)
2400f052:	4293      	cmp	r3, r2
2400f054:	d029      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f056:	68bb      	ldr	r3, [r7, #8]
2400f058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f05a:	681b      	ldr	r3, [r3, #0]
2400f05c:	4a5f      	ldr	r2, [pc, #380]	; (2400f1dc <I2C_DMAError+0x20c>)
2400f05e:	4293      	cmp	r3, r2
2400f060:	d023      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f062:	68bb      	ldr	r3, [r7, #8]
2400f064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f066:	681b      	ldr	r3, [r3, #0]
2400f068:	4a5d      	ldr	r2, [pc, #372]	; (2400f1e0 <I2C_DMAError+0x210>)
2400f06a:	4293      	cmp	r3, r2
2400f06c:	d01d      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f06e:	68bb      	ldr	r3, [r7, #8]
2400f070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f072:	681b      	ldr	r3, [r3, #0]
2400f074:	4a5b      	ldr	r2, [pc, #364]	; (2400f1e4 <I2C_DMAError+0x214>)
2400f076:	4293      	cmp	r3, r2
2400f078:	d017      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f07a:	68bb      	ldr	r3, [r7, #8]
2400f07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f07e:	681b      	ldr	r3, [r3, #0]
2400f080:	4a59      	ldr	r2, [pc, #356]	; (2400f1e8 <I2C_DMAError+0x218>)
2400f082:	4293      	cmp	r3, r2
2400f084:	d011      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f086:	68bb      	ldr	r3, [r7, #8]
2400f088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f08a:	681b      	ldr	r3, [r3, #0]
2400f08c:	4a57      	ldr	r2, [pc, #348]	; (2400f1ec <I2C_DMAError+0x21c>)
2400f08e:	4293      	cmp	r3, r2
2400f090:	d00b      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f092:	68bb      	ldr	r3, [r7, #8]
2400f094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f096:	681b      	ldr	r3, [r3, #0]
2400f098:	4a55      	ldr	r2, [pc, #340]	; (2400f1f0 <I2C_DMAError+0x220>)
2400f09a:	4293      	cmp	r3, r2
2400f09c:	d005      	beq.n	2400f0aa <I2C_DMAError+0xda>
2400f09e:	68bb      	ldr	r3, [r7, #8]
2400f0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f0a2:	681b      	ldr	r3, [r3, #0]
2400f0a4:	4a53      	ldr	r2, [pc, #332]	; (2400f1f4 <I2C_DMAError+0x224>)
2400f0a6:	4293      	cmp	r3, r2
2400f0a8:	d109      	bne.n	2400f0be <I2C_DMAError+0xee>
2400f0aa:	68bb      	ldr	r3, [r7, #8]
2400f0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f0ae:	681b      	ldr	r3, [r3, #0]
2400f0b0:	685b      	ldr	r3, [r3, #4]
2400f0b2:	2b00      	cmp	r3, #0
2400f0b4:	bf0c      	ite	eq
2400f0b6:	2301      	moveq	r3, #1
2400f0b8:	2300      	movne	r3, #0
2400f0ba:	b2db      	uxtb	r3, r3
2400f0bc:	e008      	b.n	2400f0d0 <I2C_DMAError+0x100>
2400f0be:	68bb      	ldr	r3, [r7, #8]
2400f0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f0c2:	681b      	ldr	r3, [r3, #0]
2400f0c4:	685b      	ldr	r3, [r3, #4]
2400f0c6:	2b00      	cmp	r3, #0
2400f0c8:	bf0c      	ite	eq
2400f0ca:	2301      	moveq	r3, #1
2400f0cc:	2300      	movne	r3, #0
2400f0ce:	b2db      	uxtb	r3, r3
2400f0d0:	2b00      	cmp	r3, #0
2400f0d2:	d001      	beq.n	2400f0d8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
2400f0d4:	2301      	movs	r3, #1
2400f0d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2400f0d8:	68bb      	ldr	r3, [r7, #8]
2400f0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f0dc:	2b00      	cmp	r3, #0
2400f0de:	f000 8098 	beq.w	2400f212 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400f0e2:	68bb      	ldr	r3, [r7, #8]
2400f0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f0e6:	681b      	ldr	r3, [r3, #0]
2400f0e8:	4a33      	ldr	r2, [pc, #204]	; (2400f1b8 <I2C_DMAError+0x1e8>)
2400f0ea:	4293      	cmp	r3, r2
2400f0ec:	d059      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f0ee:	68bb      	ldr	r3, [r7, #8]
2400f0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f0f2:	681b      	ldr	r3, [r3, #0]
2400f0f4:	4a31      	ldr	r2, [pc, #196]	; (2400f1bc <I2C_DMAError+0x1ec>)
2400f0f6:	4293      	cmp	r3, r2
2400f0f8:	d053      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f0fa:	68bb      	ldr	r3, [r7, #8]
2400f0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f0fe:	681b      	ldr	r3, [r3, #0]
2400f100:	4a2f      	ldr	r2, [pc, #188]	; (2400f1c0 <I2C_DMAError+0x1f0>)
2400f102:	4293      	cmp	r3, r2
2400f104:	d04d      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f106:	68bb      	ldr	r3, [r7, #8]
2400f108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f10a:	681b      	ldr	r3, [r3, #0]
2400f10c:	4a2d      	ldr	r2, [pc, #180]	; (2400f1c4 <I2C_DMAError+0x1f4>)
2400f10e:	4293      	cmp	r3, r2
2400f110:	d047      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f112:	68bb      	ldr	r3, [r7, #8]
2400f114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f116:	681b      	ldr	r3, [r3, #0]
2400f118:	4a2b      	ldr	r2, [pc, #172]	; (2400f1c8 <I2C_DMAError+0x1f8>)
2400f11a:	4293      	cmp	r3, r2
2400f11c:	d041      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f11e:	68bb      	ldr	r3, [r7, #8]
2400f120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f122:	681b      	ldr	r3, [r3, #0]
2400f124:	4a29      	ldr	r2, [pc, #164]	; (2400f1cc <I2C_DMAError+0x1fc>)
2400f126:	4293      	cmp	r3, r2
2400f128:	d03b      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f12a:	68bb      	ldr	r3, [r7, #8]
2400f12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f12e:	681b      	ldr	r3, [r3, #0]
2400f130:	4a27      	ldr	r2, [pc, #156]	; (2400f1d0 <I2C_DMAError+0x200>)
2400f132:	4293      	cmp	r3, r2
2400f134:	d035      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f136:	68bb      	ldr	r3, [r7, #8]
2400f138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f13a:	681b      	ldr	r3, [r3, #0]
2400f13c:	4a25      	ldr	r2, [pc, #148]	; (2400f1d4 <I2C_DMAError+0x204>)
2400f13e:	4293      	cmp	r3, r2
2400f140:	d02f      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f142:	68bb      	ldr	r3, [r7, #8]
2400f144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f146:	681b      	ldr	r3, [r3, #0]
2400f148:	4a23      	ldr	r2, [pc, #140]	; (2400f1d8 <I2C_DMAError+0x208>)
2400f14a:	4293      	cmp	r3, r2
2400f14c:	d029      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f14e:	68bb      	ldr	r3, [r7, #8]
2400f150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f152:	681b      	ldr	r3, [r3, #0]
2400f154:	4a21      	ldr	r2, [pc, #132]	; (2400f1dc <I2C_DMAError+0x20c>)
2400f156:	4293      	cmp	r3, r2
2400f158:	d023      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f15a:	68bb      	ldr	r3, [r7, #8]
2400f15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f15e:	681b      	ldr	r3, [r3, #0]
2400f160:	4a1f      	ldr	r2, [pc, #124]	; (2400f1e0 <I2C_DMAError+0x210>)
2400f162:	4293      	cmp	r3, r2
2400f164:	d01d      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f166:	68bb      	ldr	r3, [r7, #8]
2400f168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f16a:	681b      	ldr	r3, [r3, #0]
2400f16c:	4a1d      	ldr	r2, [pc, #116]	; (2400f1e4 <I2C_DMAError+0x214>)
2400f16e:	4293      	cmp	r3, r2
2400f170:	d017      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f172:	68bb      	ldr	r3, [r7, #8]
2400f174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f176:	681b      	ldr	r3, [r3, #0]
2400f178:	4a1b      	ldr	r2, [pc, #108]	; (2400f1e8 <I2C_DMAError+0x218>)
2400f17a:	4293      	cmp	r3, r2
2400f17c:	d011      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f17e:	68bb      	ldr	r3, [r7, #8]
2400f180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f182:	681b      	ldr	r3, [r3, #0]
2400f184:	4a19      	ldr	r2, [pc, #100]	; (2400f1ec <I2C_DMAError+0x21c>)
2400f186:	4293      	cmp	r3, r2
2400f188:	d00b      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f18a:	68bb      	ldr	r3, [r7, #8]
2400f18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f18e:	681b      	ldr	r3, [r3, #0]
2400f190:	4a17      	ldr	r2, [pc, #92]	; (2400f1f0 <I2C_DMAError+0x220>)
2400f192:	4293      	cmp	r3, r2
2400f194:	d005      	beq.n	2400f1a2 <I2C_DMAError+0x1d2>
2400f196:	68bb      	ldr	r3, [r7, #8]
2400f198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f19a:	681b      	ldr	r3, [r3, #0]
2400f19c:	4a15      	ldr	r2, [pc, #84]	; (2400f1f4 <I2C_DMAError+0x224>)
2400f19e:	4293      	cmp	r3, r2
2400f1a0:	d12a      	bne.n	2400f1f8 <I2C_DMAError+0x228>
2400f1a2:	68bb      	ldr	r3, [r7, #8]
2400f1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1a6:	681b      	ldr	r3, [r3, #0]
2400f1a8:	685b      	ldr	r3, [r3, #4]
2400f1aa:	2b00      	cmp	r3, #0
2400f1ac:	bf0c      	ite	eq
2400f1ae:	2301      	moveq	r3, #1
2400f1b0:	2300      	movne	r3, #0
2400f1b2:	b2db      	uxtb	r3, r3
2400f1b4:	e029      	b.n	2400f20a <I2C_DMAError+0x23a>
2400f1b6:	bf00      	nop
2400f1b8:	40020010 	.word	0x40020010
2400f1bc:	40020028 	.word	0x40020028
2400f1c0:	40020040 	.word	0x40020040
2400f1c4:	40020058 	.word	0x40020058
2400f1c8:	40020070 	.word	0x40020070
2400f1cc:	40020088 	.word	0x40020088
2400f1d0:	400200a0 	.word	0x400200a0
2400f1d4:	400200b8 	.word	0x400200b8
2400f1d8:	40020410 	.word	0x40020410
2400f1dc:	40020428 	.word	0x40020428
2400f1e0:	40020440 	.word	0x40020440
2400f1e4:	40020458 	.word	0x40020458
2400f1e8:	40020470 	.word	0x40020470
2400f1ec:	40020488 	.word	0x40020488
2400f1f0:	400204a0 	.word	0x400204a0
2400f1f4:	400204b8 	.word	0x400204b8
2400f1f8:	68bb      	ldr	r3, [r7, #8]
2400f1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f1fc:	681b      	ldr	r3, [r3, #0]
2400f1fe:	685b      	ldr	r3, [r3, #4]
2400f200:	2b00      	cmp	r3, #0
2400f202:	bf0c      	ite	eq
2400f204:	2301      	moveq	r3, #1
2400f206:	2300      	movne	r3, #0
2400f208:	b2db      	uxtb	r3, r3
2400f20a:	2b00      	cmp	r3, #0
2400f20c:	d001      	beq.n	2400f212 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
2400f20e:	2301      	movs	r3, #1
2400f210:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2400f212:	6878      	ldr	r0, [r7, #4]
2400f214:	f7f7 f918 	bl	24006448 <HAL_DMA_GetError>
2400f218:	4603      	mov	r3, r0
2400f21a:	2b02      	cmp	r3, #2
2400f21c:	d00e      	beq.n	2400f23c <I2C_DMAError+0x26c>
2400f21e:	68fb      	ldr	r3, [r7, #12]
2400f220:	2b00      	cmp	r3, #0
2400f222:	d00b      	beq.n	2400f23c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400f224:	68bb      	ldr	r3, [r7, #8]
2400f226:	681b      	ldr	r3, [r3, #0]
2400f228:	685a      	ldr	r2, [r3, #4]
2400f22a:	68bb      	ldr	r3, [r7, #8]
2400f22c:	681b      	ldr	r3, [r3, #0]
2400f22e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400f232:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400f234:	2110      	movs	r1, #16
2400f236:	68b8      	ldr	r0, [r7, #8]
2400f238:	f7ff fc46 	bl	2400eac8 <I2C_ITError>
  }
}
2400f23c:	bf00      	nop
2400f23e:	3710      	adds	r7, #16
2400f240:	46bd      	mov	sp, r7
2400f242:	bd80      	pop	{r7, pc}

2400f244 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2400f244:	b580      	push	{r7, lr}
2400f246:	b084      	sub	sp, #16
2400f248:	af00      	add	r7, sp, #0
2400f24a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400f24c:	687b      	ldr	r3, [r7, #4]
2400f24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f250:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2400f252:	68fb      	ldr	r3, [r7, #12]
2400f254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f256:	2b00      	cmp	r3, #0
2400f258:	d003      	beq.n	2400f262 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2400f25a:	68fb      	ldr	r3, [r7, #12]
2400f25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f25e:	2200      	movs	r2, #0
2400f260:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
2400f262:	68fb      	ldr	r3, [r7, #12]
2400f264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f266:	2b00      	cmp	r3, #0
2400f268:	d003      	beq.n	2400f272 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2400f26a:	68fb      	ldr	r3, [r7, #12]
2400f26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f26e:	2200      	movs	r2, #0
2400f270:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2400f272:	68f8      	ldr	r0, [r7, #12]
2400f274:	f7ff fcf8 	bl	2400ec68 <I2C_TreatErrorCallback>
}
2400f278:	bf00      	nop
2400f27a:	3710      	adds	r7, #16
2400f27c:	46bd      	mov	sp, r7
2400f27e:	bd80      	pop	{r7, pc}

2400f280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2400f280:	b580      	push	{r7, lr}
2400f282:	b084      	sub	sp, #16
2400f284:	af00      	add	r7, sp, #0
2400f286:	60f8      	str	r0, [r7, #12]
2400f288:	60b9      	str	r1, [r7, #8]
2400f28a:	603b      	str	r3, [r7, #0]
2400f28c:	4613      	mov	r3, r2
2400f28e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400f290:	e022      	b.n	2400f2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400f292:	683b      	ldr	r3, [r7, #0]
2400f294:	f1b3 3fff 	cmp.w	r3, #4294967295
2400f298:	d01e      	beq.n	2400f2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400f29a:	f7f2 ffc3 	bl	24002224 <HAL_GetTick>
2400f29e:	4602      	mov	r2, r0
2400f2a0:	69bb      	ldr	r3, [r7, #24]
2400f2a2:	1ad3      	subs	r3, r2, r3
2400f2a4:	683a      	ldr	r2, [r7, #0]
2400f2a6:	429a      	cmp	r2, r3
2400f2a8:	d302      	bcc.n	2400f2b0 <I2C_WaitOnFlagUntilTimeout+0x30>
2400f2aa:	683b      	ldr	r3, [r7, #0]
2400f2ac:	2b00      	cmp	r3, #0
2400f2ae:	d113      	bne.n	2400f2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400f2b0:	68fb      	ldr	r3, [r7, #12]
2400f2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f2b4:	f043 0220 	orr.w	r2, r3, #32
2400f2b8:	68fb      	ldr	r3, [r7, #12]
2400f2ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400f2bc:	68fb      	ldr	r3, [r7, #12]
2400f2be:	2220      	movs	r2, #32
2400f2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400f2c4:	68fb      	ldr	r3, [r7, #12]
2400f2c6:	2200      	movs	r2, #0
2400f2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400f2cc:	68fb      	ldr	r3, [r7, #12]
2400f2ce:	2200      	movs	r2, #0
2400f2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400f2d4:	2301      	movs	r3, #1
2400f2d6:	e00f      	b.n	2400f2f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400f2d8:	68fb      	ldr	r3, [r7, #12]
2400f2da:	681b      	ldr	r3, [r3, #0]
2400f2dc:	699a      	ldr	r2, [r3, #24]
2400f2de:	68bb      	ldr	r3, [r7, #8]
2400f2e0:	4013      	ands	r3, r2
2400f2e2:	68ba      	ldr	r2, [r7, #8]
2400f2e4:	429a      	cmp	r2, r3
2400f2e6:	bf0c      	ite	eq
2400f2e8:	2301      	moveq	r3, #1
2400f2ea:	2300      	movne	r3, #0
2400f2ec:	b2db      	uxtb	r3, r3
2400f2ee:	461a      	mov	r2, r3
2400f2f0:	79fb      	ldrb	r3, [r7, #7]
2400f2f2:	429a      	cmp	r2, r3
2400f2f4:	d0cd      	beq.n	2400f292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2400f2f6:	2300      	movs	r3, #0
}
2400f2f8:	4618      	mov	r0, r3
2400f2fa:	3710      	adds	r7, #16
2400f2fc:	46bd      	mov	sp, r7
2400f2fe:	bd80      	pop	{r7, pc}

2400f300 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400f300:	b580      	push	{r7, lr}
2400f302:	b084      	sub	sp, #16
2400f304:	af00      	add	r7, sp, #0
2400f306:	60f8      	str	r0, [r7, #12]
2400f308:	60b9      	str	r1, [r7, #8]
2400f30a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400f30c:	e02c      	b.n	2400f368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400f30e:	687a      	ldr	r2, [r7, #4]
2400f310:	68b9      	ldr	r1, [r7, #8]
2400f312:	68f8      	ldr	r0, [r7, #12]
2400f314:	f000 f8ea 	bl	2400f4ec <I2C_IsErrorOccurred>
2400f318:	4603      	mov	r3, r0
2400f31a:	2b00      	cmp	r3, #0
2400f31c:	d001      	beq.n	2400f322 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400f31e:	2301      	movs	r3, #1
2400f320:	e02a      	b.n	2400f378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400f322:	68bb      	ldr	r3, [r7, #8]
2400f324:	f1b3 3fff 	cmp.w	r3, #4294967295
2400f328:	d01e      	beq.n	2400f368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400f32a:	f7f2 ff7b 	bl	24002224 <HAL_GetTick>
2400f32e:	4602      	mov	r2, r0
2400f330:	687b      	ldr	r3, [r7, #4]
2400f332:	1ad3      	subs	r3, r2, r3
2400f334:	68ba      	ldr	r2, [r7, #8]
2400f336:	429a      	cmp	r2, r3
2400f338:	d302      	bcc.n	2400f340 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
2400f33a:	68bb      	ldr	r3, [r7, #8]
2400f33c:	2b00      	cmp	r3, #0
2400f33e:	d113      	bne.n	2400f368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400f340:	68fb      	ldr	r3, [r7, #12]
2400f342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f344:	f043 0220 	orr.w	r2, r3, #32
2400f348:	68fb      	ldr	r3, [r7, #12]
2400f34a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400f34c:	68fb      	ldr	r3, [r7, #12]
2400f34e:	2220      	movs	r2, #32
2400f350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400f354:	68fb      	ldr	r3, [r7, #12]
2400f356:	2200      	movs	r2, #0
2400f358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400f35c:	68fb      	ldr	r3, [r7, #12]
2400f35e:	2200      	movs	r2, #0
2400f360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400f364:	2301      	movs	r3, #1
2400f366:	e007      	b.n	2400f378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400f368:	68fb      	ldr	r3, [r7, #12]
2400f36a:	681b      	ldr	r3, [r3, #0]
2400f36c:	699b      	ldr	r3, [r3, #24]
2400f36e:	f003 0302 	and.w	r3, r3, #2
2400f372:	2b02      	cmp	r3, #2
2400f374:	d1cb      	bne.n	2400f30e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
2400f376:	2300      	movs	r3, #0
}
2400f378:	4618      	mov	r0, r3
2400f37a:	3710      	adds	r7, #16
2400f37c:	46bd      	mov	sp, r7
2400f37e:	bd80      	pop	{r7, pc}

2400f380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400f380:	b580      	push	{r7, lr}
2400f382:	b084      	sub	sp, #16
2400f384:	af00      	add	r7, sp, #0
2400f386:	60f8      	str	r0, [r7, #12]
2400f388:	60b9      	str	r1, [r7, #8]
2400f38a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400f38c:	e028      	b.n	2400f3e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400f38e:	687a      	ldr	r2, [r7, #4]
2400f390:	68b9      	ldr	r1, [r7, #8]
2400f392:	68f8      	ldr	r0, [r7, #12]
2400f394:	f000 f8aa 	bl	2400f4ec <I2C_IsErrorOccurred>
2400f398:	4603      	mov	r3, r0
2400f39a:	2b00      	cmp	r3, #0
2400f39c:	d001      	beq.n	2400f3a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400f39e:	2301      	movs	r3, #1
2400f3a0:	e026      	b.n	2400f3f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400f3a2:	f7f2 ff3f 	bl	24002224 <HAL_GetTick>
2400f3a6:	4602      	mov	r2, r0
2400f3a8:	687b      	ldr	r3, [r7, #4]
2400f3aa:	1ad3      	subs	r3, r2, r3
2400f3ac:	68ba      	ldr	r2, [r7, #8]
2400f3ae:	429a      	cmp	r2, r3
2400f3b0:	d302      	bcc.n	2400f3b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2400f3b2:	68bb      	ldr	r3, [r7, #8]
2400f3b4:	2b00      	cmp	r3, #0
2400f3b6:	d113      	bne.n	2400f3e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400f3b8:	68fb      	ldr	r3, [r7, #12]
2400f3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f3bc:	f043 0220 	orr.w	r2, r3, #32
2400f3c0:	68fb      	ldr	r3, [r7, #12]
2400f3c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400f3c4:	68fb      	ldr	r3, [r7, #12]
2400f3c6:	2220      	movs	r2, #32
2400f3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f3cc:	68fb      	ldr	r3, [r7, #12]
2400f3ce:	2200      	movs	r2, #0
2400f3d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400f3d4:	68fb      	ldr	r3, [r7, #12]
2400f3d6:	2200      	movs	r2, #0
2400f3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400f3dc:	2301      	movs	r3, #1
2400f3de:	e007      	b.n	2400f3f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400f3e0:	68fb      	ldr	r3, [r7, #12]
2400f3e2:	681b      	ldr	r3, [r3, #0]
2400f3e4:	699b      	ldr	r3, [r3, #24]
2400f3e6:	f003 0320 	and.w	r3, r3, #32
2400f3ea:	2b20      	cmp	r3, #32
2400f3ec:	d1cf      	bne.n	2400f38e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400f3ee:	2300      	movs	r3, #0
}
2400f3f0:	4618      	mov	r0, r3
2400f3f2:	3710      	adds	r7, #16
2400f3f4:	46bd      	mov	sp, r7
2400f3f6:	bd80      	pop	{r7, pc}

2400f3f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400f3f8:	b580      	push	{r7, lr}
2400f3fa:	b084      	sub	sp, #16
2400f3fc:	af00      	add	r7, sp, #0
2400f3fe:	60f8      	str	r0, [r7, #12]
2400f400:	60b9      	str	r1, [r7, #8]
2400f402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400f404:	e064      	b.n	2400f4d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400f406:	687a      	ldr	r2, [r7, #4]
2400f408:	68b9      	ldr	r1, [r7, #8]
2400f40a:	68f8      	ldr	r0, [r7, #12]
2400f40c:	f000 f86e 	bl	2400f4ec <I2C_IsErrorOccurred>
2400f410:	4603      	mov	r3, r0
2400f412:	2b00      	cmp	r3, #0
2400f414:	d001      	beq.n	2400f41a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400f416:	2301      	movs	r3, #1
2400f418:	e062      	b.n	2400f4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400f41a:	68fb      	ldr	r3, [r7, #12]
2400f41c:	681b      	ldr	r3, [r3, #0]
2400f41e:	699b      	ldr	r3, [r3, #24]
2400f420:	f003 0320 	and.w	r3, r3, #32
2400f424:	2b20      	cmp	r3, #32
2400f426:	d138      	bne.n	2400f49a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
2400f428:	68fb      	ldr	r3, [r7, #12]
2400f42a:	681b      	ldr	r3, [r3, #0]
2400f42c:	699b      	ldr	r3, [r3, #24]
2400f42e:	f003 0304 	and.w	r3, r3, #4
2400f432:	2b04      	cmp	r3, #4
2400f434:	d105      	bne.n	2400f442 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
2400f436:	68fb      	ldr	r3, [r7, #12]
2400f438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400f43a:	2b00      	cmp	r3, #0
2400f43c:	d001      	beq.n	2400f442 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
2400f43e:	2300      	movs	r3, #0
2400f440:	e04e      	b.n	2400f4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2400f442:	68fb      	ldr	r3, [r7, #12]
2400f444:	681b      	ldr	r3, [r3, #0]
2400f446:	699b      	ldr	r3, [r3, #24]
2400f448:	f003 0310 	and.w	r3, r3, #16
2400f44c:	2b10      	cmp	r3, #16
2400f44e:	d107      	bne.n	2400f460 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f450:	68fb      	ldr	r3, [r7, #12]
2400f452:	681b      	ldr	r3, [r3, #0]
2400f454:	2210      	movs	r2, #16
2400f456:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2400f458:	68fb      	ldr	r3, [r7, #12]
2400f45a:	2204      	movs	r2, #4
2400f45c:	645a      	str	r2, [r3, #68]	; 0x44
2400f45e:	e002      	b.n	2400f466 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400f460:	68fb      	ldr	r3, [r7, #12]
2400f462:	2200      	movs	r2, #0
2400f464:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f466:	68fb      	ldr	r3, [r7, #12]
2400f468:	681b      	ldr	r3, [r3, #0]
2400f46a:	2220      	movs	r2, #32
2400f46c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2400f46e:	68fb      	ldr	r3, [r7, #12]
2400f470:	681b      	ldr	r3, [r3, #0]
2400f472:	6859      	ldr	r1, [r3, #4]
2400f474:	68fb      	ldr	r3, [r7, #12]
2400f476:	681a      	ldr	r2, [r3, #0]
2400f478:	4b1b      	ldr	r3, [pc, #108]	; (2400f4e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
2400f47a:	400b      	ands	r3, r1
2400f47c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2400f47e:	68fb      	ldr	r3, [r7, #12]
2400f480:	2220      	movs	r2, #32
2400f482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400f486:	68fb      	ldr	r3, [r7, #12]
2400f488:	2200      	movs	r2, #0
2400f48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400f48e:	68fb      	ldr	r3, [r7, #12]
2400f490:	2200      	movs	r2, #0
2400f492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400f496:	2301      	movs	r3, #1
2400f498:	e022      	b.n	2400f4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400f49a:	f7f2 fec3 	bl	24002224 <HAL_GetTick>
2400f49e:	4602      	mov	r2, r0
2400f4a0:	687b      	ldr	r3, [r7, #4]
2400f4a2:	1ad3      	subs	r3, r2, r3
2400f4a4:	68ba      	ldr	r2, [r7, #8]
2400f4a6:	429a      	cmp	r2, r3
2400f4a8:	d302      	bcc.n	2400f4b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
2400f4aa:	68bb      	ldr	r3, [r7, #8]
2400f4ac:	2b00      	cmp	r3, #0
2400f4ae:	d10f      	bne.n	2400f4d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400f4b0:	68fb      	ldr	r3, [r7, #12]
2400f4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f4b4:	f043 0220 	orr.w	r2, r3, #32
2400f4b8:	68fb      	ldr	r3, [r7, #12]
2400f4ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400f4bc:	68fb      	ldr	r3, [r7, #12]
2400f4be:	2220      	movs	r2, #32
2400f4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400f4c4:	68fb      	ldr	r3, [r7, #12]
2400f4c6:	2200      	movs	r2, #0
2400f4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400f4cc:	2301      	movs	r3, #1
2400f4ce:	e007      	b.n	2400f4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400f4d0:	68fb      	ldr	r3, [r7, #12]
2400f4d2:	681b      	ldr	r3, [r3, #0]
2400f4d4:	699b      	ldr	r3, [r3, #24]
2400f4d6:	f003 0304 	and.w	r3, r3, #4
2400f4da:	2b04      	cmp	r3, #4
2400f4dc:	d193      	bne.n	2400f406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400f4de:	2300      	movs	r3, #0
}
2400f4e0:	4618      	mov	r0, r3
2400f4e2:	3710      	adds	r7, #16
2400f4e4:	46bd      	mov	sp, r7
2400f4e6:	bd80      	pop	{r7, pc}
2400f4e8:	fe00e800 	.word	0xfe00e800

2400f4ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
2400f4ec:	b580      	push	{r7, lr}
2400f4ee:	b08a      	sub	sp, #40	; 0x28
2400f4f0:	af00      	add	r7, sp, #0
2400f4f2:	60f8      	str	r0, [r7, #12]
2400f4f4:	60b9      	str	r1, [r7, #8]
2400f4f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2400f4f8:	2300      	movs	r3, #0
2400f4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
2400f4fe:	68fb      	ldr	r3, [r7, #12]
2400f500:	681b      	ldr	r3, [r3, #0]
2400f502:	699b      	ldr	r3, [r3, #24]
2400f504:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
2400f506:	2300      	movs	r3, #0
2400f508:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
2400f50a:	687b      	ldr	r3, [r7, #4]
2400f50c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2400f50e:	69bb      	ldr	r3, [r7, #24]
2400f510:	f003 0310 	and.w	r3, r3, #16
2400f514:	2b00      	cmp	r3, #0
2400f516:	d075      	beq.n	2400f604 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f518:	68fb      	ldr	r3, [r7, #12]
2400f51a:	681b      	ldr	r3, [r3, #0]
2400f51c:	2210      	movs	r2, #16
2400f51e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400f520:	e056      	b.n	2400f5d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2400f522:	68bb      	ldr	r3, [r7, #8]
2400f524:	f1b3 3fff 	cmp.w	r3, #4294967295
2400f528:	d052      	beq.n	2400f5d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400f52a:	f7f2 fe7b 	bl	24002224 <HAL_GetTick>
2400f52e:	4602      	mov	r2, r0
2400f530:	69fb      	ldr	r3, [r7, #28]
2400f532:	1ad3      	subs	r3, r2, r3
2400f534:	68ba      	ldr	r2, [r7, #8]
2400f536:	429a      	cmp	r2, r3
2400f538:	d302      	bcc.n	2400f540 <I2C_IsErrorOccurred+0x54>
2400f53a:	68bb      	ldr	r3, [r7, #8]
2400f53c:	2b00      	cmp	r3, #0
2400f53e:	d147      	bne.n	2400f5d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400f540:	68fb      	ldr	r3, [r7, #12]
2400f542:	681b      	ldr	r3, [r3, #0]
2400f544:	685b      	ldr	r3, [r3, #4]
2400f546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400f54a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2400f54c:	68fb      	ldr	r3, [r7, #12]
2400f54e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400f552:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400f554:	68fb      	ldr	r3, [r7, #12]
2400f556:	681b      	ldr	r3, [r3, #0]
2400f558:	699b      	ldr	r3, [r3, #24]
2400f55a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400f55e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400f562:	d12e      	bne.n	2400f5c2 <I2C_IsErrorOccurred+0xd6>
2400f564:	697b      	ldr	r3, [r7, #20]
2400f566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400f56a:	d02a      	beq.n	2400f5c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
2400f56c:	7cfb      	ldrb	r3, [r7, #19]
2400f56e:	2b20      	cmp	r3, #32
2400f570:	d027      	beq.n	2400f5c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400f572:	68fb      	ldr	r3, [r7, #12]
2400f574:	681b      	ldr	r3, [r3, #0]
2400f576:	685a      	ldr	r2, [r3, #4]
2400f578:	68fb      	ldr	r3, [r7, #12]
2400f57a:	681b      	ldr	r3, [r3, #0]
2400f57c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400f580:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2400f582:	f7f2 fe4f 	bl	24002224 <HAL_GetTick>
2400f586:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400f588:	e01b      	b.n	2400f5c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400f58a:	f7f2 fe4b 	bl	24002224 <HAL_GetTick>
2400f58e:	4602      	mov	r2, r0
2400f590:	69fb      	ldr	r3, [r7, #28]
2400f592:	1ad3      	subs	r3, r2, r3
2400f594:	2b19      	cmp	r3, #25
2400f596:	d914      	bls.n	2400f5c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400f598:	68fb      	ldr	r3, [r7, #12]
2400f59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f59c:	f043 0220 	orr.w	r2, r3, #32
2400f5a0:	68fb      	ldr	r3, [r7, #12]
2400f5a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
2400f5a4:	68fb      	ldr	r3, [r7, #12]
2400f5a6:	2220      	movs	r2, #32
2400f5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
2400f5ac:	68fb      	ldr	r3, [r7, #12]
2400f5ae:	2200      	movs	r2, #0
2400f5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
2400f5b4:	68fb      	ldr	r3, [r7, #12]
2400f5b6:	2200      	movs	r2, #0
2400f5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
2400f5bc:	2301      	movs	r3, #1
2400f5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400f5c2:	68fb      	ldr	r3, [r7, #12]
2400f5c4:	681b      	ldr	r3, [r3, #0]
2400f5c6:	699b      	ldr	r3, [r3, #24]
2400f5c8:	f003 0320 	and.w	r3, r3, #32
2400f5cc:	2b20      	cmp	r3, #32
2400f5ce:	d1dc      	bne.n	2400f58a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400f5d0:	68fb      	ldr	r3, [r7, #12]
2400f5d2:	681b      	ldr	r3, [r3, #0]
2400f5d4:	699b      	ldr	r3, [r3, #24]
2400f5d6:	f003 0320 	and.w	r3, r3, #32
2400f5da:	2b20      	cmp	r3, #32
2400f5dc:	d003      	beq.n	2400f5e6 <I2C_IsErrorOccurred+0xfa>
2400f5de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400f5e2:	2b00      	cmp	r3, #0
2400f5e4:	d09d      	beq.n	2400f522 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2400f5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400f5ea:	2b00      	cmp	r3, #0
2400f5ec:	d103      	bne.n	2400f5f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f5ee:	68fb      	ldr	r3, [r7, #12]
2400f5f0:	681b      	ldr	r3, [r3, #0]
2400f5f2:	2220      	movs	r2, #32
2400f5f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2400f5f6:	6a3b      	ldr	r3, [r7, #32]
2400f5f8:	f043 0304 	orr.w	r3, r3, #4
2400f5fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
2400f5fe:	2301      	movs	r3, #1
2400f600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2400f604:	68fb      	ldr	r3, [r7, #12]
2400f606:	681b      	ldr	r3, [r3, #0]
2400f608:	699b      	ldr	r3, [r3, #24]
2400f60a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2400f60c:	69bb      	ldr	r3, [r7, #24]
2400f60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400f612:	2b00      	cmp	r3, #0
2400f614:	d00b      	beq.n	2400f62e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
2400f616:	6a3b      	ldr	r3, [r7, #32]
2400f618:	f043 0301 	orr.w	r3, r3, #1
2400f61c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400f61e:	68fb      	ldr	r3, [r7, #12]
2400f620:	681b      	ldr	r3, [r3, #0]
2400f622:	f44f 7280 	mov.w	r2, #256	; 0x100
2400f626:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400f628:	2301      	movs	r3, #1
2400f62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400f62e:	69bb      	ldr	r3, [r7, #24]
2400f630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400f634:	2b00      	cmp	r3, #0
2400f636:	d00b      	beq.n	2400f650 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2400f638:	6a3b      	ldr	r3, [r7, #32]
2400f63a:	f043 0308 	orr.w	r3, r3, #8
2400f63e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400f640:	68fb      	ldr	r3, [r7, #12]
2400f642:	681b      	ldr	r3, [r3, #0]
2400f644:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400f648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400f64a:	2301      	movs	r3, #1
2400f64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400f650:	69bb      	ldr	r3, [r7, #24]
2400f652:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400f656:	2b00      	cmp	r3, #0
2400f658:	d00b      	beq.n	2400f672 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2400f65a:	6a3b      	ldr	r3, [r7, #32]
2400f65c:	f043 0302 	orr.w	r3, r3, #2
2400f660:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400f662:	68fb      	ldr	r3, [r7, #12]
2400f664:	681b      	ldr	r3, [r3, #0]
2400f666:	f44f 7200 	mov.w	r2, #512	; 0x200
2400f66a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400f66c:	2301      	movs	r3, #1
2400f66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
2400f672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400f676:	2b00      	cmp	r3, #0
2400f678:	d01c      	beq.n	2400f6b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400f67a:	68f8      	ldr	r0, [r7, #12]
2400f67c:	f7ff fb1b 	bl	2400ecb6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400f680:	68fb      	ldr	r3, [r7, #12]
2400f682:	681b      	ldr	r3, [r3, #0]
2400f684:	6859      	ldr	r1, [r3, #4]
2400f686:	68fb      	ldr	r3, [r7, #12]
2400f688:	681a      	ldr	r2, [r3, #0]
2400f68a:	4b0d      	ldr	r3, [pc, #52]	; (2400f6c0 <I2C_IsErrorOccurred+0x1d4>)
2400f68c:	400b      	ands	r3, r1
2400f68e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
2400f690:	68fb      	ldr	r3, [r7, #12]
2400f692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400f694:	6a3b      	ldr	r3, [r7, #32]
2400f696:	431a      	orrs	r2, r3
2400f698:	68fb      	ldr	r3, [r7, #12]
2400f69a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2400f69c:	68fb      	ldr	r3, [r7, #12]
2400f69e:	2220      	movs	r2, #32
2400f6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400f6a4:	68fb      	ldr	r3, [r7, #12]
2400f6a6:	2200      	movs	r2, #0
2400f6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f6ac:	68fb      	ldr	r3, [r7, #12]
2400f6ae:	2200      	movs	r2, #0
2400f6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400f6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2400f6b8:	4618      	mov	r0, r3
2400f6ba:	3728      	adds	r7, #40	; 0x28
2400f6bc:	46bd      	mov	sp, r7
2400f6be:	bd80      	pop	{r7, pc}
2400f6c0:	fe00e800 	.word	0xfe00e800

2400f6c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
2400f6c4:	b480      	push	{r7}
2400f6c6:	b087      	sub	sp, #28
2400f6c8:	af00      	add	r7, sp, #0
2400f6ca:	60f8      	str	r0, [r7, #12]
2400f6cc:	607b      	str	r3, [r7, #4]
2400f6ce:	460b      	mov	r3, r1
2400f6d0:	817b      	strh	r3, [r7, #10]
2400f6d2:	4613      	mov	r3, r2
2400f6d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400f6d6:	897b      	ldrh	r3, [r7, #10]
2400f6d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400f6dc:	7a7b      	ldrb	r3, [r7, #9]
2400f6de:	041b      	lsls	r3, r3, #16
2400f6e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400f6e4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400f6e6:	687b      	ldr	r3, [r7, #4]
2400f6e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400f6ea:	6a3b      	ldr	r3, [r7, #32]
2400f6ec:	4313      	orrs	r3, r2
2400f6ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400f6f2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2400f6f4:	68fb      	ldr	r3, [r7, #12]
2400f6f6:	681b      	ldr	r3, [r3, #0]
2400f6f8:	685a      	ldr	r2, [r3, #4]
2400f6fa:	6a3b      	ldr	r3, [r7, #32]
2400f6fc:	0d5b      	lsrs	r3, r3, #21
2400f6fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
2400f702:	4b08      	ldr	r3, [pc, #32]	; (2400f724 <I2C_TransferConfig+0x60>)
2400f704:	430b      	orrs	r3, r1
2400f706:	43db      	mvns	r3, r3
2400f708:	ea02 0103 	and.w	r1, r2, r3
2400f70c:	68fb      	ldr	r3, [r7, #12]
2400f70e:	681b      	ldr	r3, [r3, #0]
2400f710:	697a      	ldr	r2, [r7, #20]
2400f712:	430a      	orrs	r2, r1
2400f714:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400f716:	bf00      	nop
2400f718:	371c      	adds	r7, #28
2400f71a:	46bd      	mov	sp, r7
2400f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f720:	4770      	bx	lr
2400f722:	bf00      	nop
2400f724:	03ff63ff 	.word	0x03ff63ff

2400f728 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400f728:	b480      	push	{r7}
2400f72a:	b085      	sub	sp, #20
2400f72c:	af00      	add	r7, sp, #0
2400f72e:	6078      	str	r0, [r7, #4]
2400f730:	460b      	mov	r3, r1
2400f732:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400f734:	2300      	movs	r3, #0
2400f736:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400f738:	687b      	ldr	r3, [r7, #4]
2400f73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f73c:	4a2a      	ldr	r2, [pc, #168]	; (2400f7e8 <I2C_Enable_IRQ+0xc0>)
2400f73e:	4293      	cmp	r3, r2
2400f740:	d004      	beq.n	2400f74c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
2400f742:	687b      	ldr	r3, [r7, #4]
2400f744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400f746:	4a29      	ldr	r2, [pc, #164]	; (2400f7ec <I2C_Enable_IRQ+0xc4>)
2400f748:	4293      	cmp	r3, r2
2400f74a:	d11d      	bne.n	2400f788 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400f74c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400f750:	2b00      	cmp	r3, #0
2400f752:	da03      	bge.n	2400f75c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f754:	68fb      	ldr	r3, [r7, #12]
2400f756:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f75a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2400f75c:	887b      	ldrh	r3, [r7, #2]
2400f75e:	2b10      	cmp	r3, #16
2400f760:	d103      	bne.n	2400f76a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400f762:	68fb      	ldr	r3, [r7, #12]
2400f764:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400f768:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f76a:	887b      	ldrh	r3, [r7, #2]
2400f76c:	2b20      	cmp	r3, #32
2400f76e:	d103      	bne.n	2400f778 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
2400f770:	68fb      	ldr	r3, [r7, #12]
2400f772:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2400f776:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400f778:	887b      	ldrh	r3, [r7, #2]
2400f77a:	2b40      	cmp	r3, #64	; 0x40
2400f77c:	d125      	bne.n	2400f7ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
2400f77e:	68fb      	ldr	r3, [r7, #12]
2400f780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400f784:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400f786:	e020      	b.n	2400f7ca <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400f788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400f78c:	2b00      	cmp	r3, #0
2400f78e:	da03      	bge.n	2400f798 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f790:	68fb      	ldr	r3, [r7, #12]
2400f792:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f796:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400f798:	887b      	ldrh	r3, [r7, #2]
2400f79a:	f003 0301 	and.w	r3, r3, #1
2400f79e:	2b00      	cmp	r3, #0
2400f7a0:	d003      	beq.n	2400f7aa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2400f7a2:	68fb      	ldr	r3, [r7, #12]
2400f7a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
2400f7a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400f7aa:	887b      	ldrh	r3, [r7, #2]
2400f7ac:	f003 0302 	and.w	r3, r3, #2
2400f7b0:	2b00      	cmp	r3, #0
2400f7b2:	d003      	beq.n	2400f7bc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2400f7b4:	68fb      	ldr	r3, [r7, #12]
2400f7b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
2400f7ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f7bc:	887b      	ldrh	r3, [r7, #2]
2400f7be:	2b20      	cmp	r3, #32
2400f7c0:	d103      	bne.n	2400f7ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
2400f7c2:	68fb      	ldr	r3, [r7, #12]
2400f7c4:	f043 0320 	orr.w	r3, r3, #32
2400f7c8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400f7ca:	687b      	ldr	r3, [r7, #4]
2400f7cc:	681b      	ldr	r3, [r3, #0]
2400f7ce:	6819      	ldr	r1, [r3, #0]
2400f7d0:	687b      	ldr	r3, [r7, #4]
2400f7d2:	681b      	ldr	r3, [r3, #0]
2400f7d4:	68fa      	ldr	r2, [r7, #12]
2400f7d6:	430a      	orrs	r2, r1
2400f7d8:	601a      	str	r2, [r3, #0]
}
2400f7da:	bf00      	nop
2400f7dc:	3714      	adds	r7, #20
2400f7de:	46bd      	mov	sp, r7
2400f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f7e4:	4770      	bx	lr
2400f7e6:	bf00      	nop
2400f7e8:	2400db5d 	.word	0x2400db5d
2400f7ec:	2400dd45 	.word	0x2400dd45

2400f7f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400f7f0:	b480      	push	{r7}
2400f7f2:	b085      	sub	sp, #20
2400f7f4:	af00      	add	r7, sp, #0
2400f7f6:	6078      	str	r0, [r7, #4]
2400f7f8:	460b      	mov	r3, r1
2400f7fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400f7fc:	2300      	movs	r3, #0
2400f7fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400f800:	887b      	ldrh	r3, [r7, #2]
2400f802:	f003 0301 	and.w	r3, r3, #1
2400f806:	2b00      	cmp	r3, #0
2400f808:	d00f      	beq.n	2400f82a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2400f80a:	68fb      	ldr	r3, [r7, #12]
2400f80c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
2400f810:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400f812:	687b      	ldr	r3, [r7, #4]
2400f814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f818:	b2db      	uxtb	r3, r3
2400f81a:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f81e:	2b28      	cmp	r3, #40	; 0x28
2400f820:	d003      	beq.n	2400f82a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f822:	68fb      	ldr	r3, [r7, #12]
2400f824:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400f828:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400f82a:	887b      	ldrh	r3, [r7, #2]
2400f82c:	f003 0302 	and.w	r3, r3, #2
2400f830:	2b00      	cmp	r3, #0
2400f832:	d00f      	beq.n	2400f854 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
2400f834:	68fb      	ldr	r3, [r7, #12]
2400f836:	f043 0344 	orr.w	r3, r3, #68	; 0x44
2400f83a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400f83c:	687b      	ldr	r3, [r7, #4]
2400f83e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f842:	b2db      	uxtb	r3, r3
2400f844:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f848:	2b28      	cmp	r3, #40	; 0x28
2400f84a:	d003      	beq.n	2400f854 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f84c:	68fb      	ldr	r3, [r7, #12]
2400f84e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400f852:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400f854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400f858:	2b00      	cmp	r3, #0
2400f85a:	da03      	bge.n	2400f864 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f85c:	68fb      	ldr	r3, [r7, #12]
2400f85e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f862:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2400f864:	887b      	ldrh	r3, [r7, #2]
2400f866:	2b10      	cmp	r3, #16
2400f868:	d103      	bne.n	2400f872 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400f86a:	68fb      	ldr	r3, [r7, #12]
2400f86c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400f870:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f872:	887b      	ldrh	r3, [r7, #2]
2400f874:	2b20      	cmp	r3, #32
2400f876:	d103      	bne.n	2400f880 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2400f878:	68fb      	ldr	r3, [r7, #12]
2400f87a:	f043 0320 	orr.w	r3, r3, #32
2400f87e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400f880:	887b      	ldrh	r3, [r7, #2]
2400f882:	2b40      	cmp	r3, #64	; 0x40
2400f884:	d103      	bne.n	2400f88e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2400f886:	68fb      	ldr	r3, [r7, #12]
2400f888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400f88c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400f88e:	687b      	ldr	r3, [r7, #4]
2400f890:	681b      	ldr	r3, [r3, #0]
2400f892:	6819      	ldr	r1, [r3, #0]
2400f894:	68fb      	ldr	r3, [r7, #12]
2400f896:	43da      	mvns	r2, r3
2400f898:	687b      	ldr	r3, [r7, #4]
2400f89a:	681b      	ldr	r3, [r3, #0]
2400f89c:	400a      	ands	r2, r1
2400f89e:	601a      	str	r2, [r3, #0]
}
2400f8a0:	bf00      	nop
2400f8a2:	3714      	adds	r7, #20
2400f8a4:	46bd      	mov	sp, r7
2400f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f8aa:	4770      	bx	lr

2400f8ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
2400f8ac:	b480      	push	{r7}
2400f8ae:	b083      	sub	sp, #12
2400f8b0:	af00      	add	r7, sp, #0
2400f8b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
2400f8b4:	687b      	ldr	r3, [r7, #4]
2400f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f8b8:	2baa      	cmp	r3, #170	; 0xaa
2400f8ba:	d103      	bne.n	2400f8c4 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
2400f8bc:	687b      	ldr	r3, [r7, #4]
2400f8be:	2200      	movs	r2, #0
2400f8c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
2400f8c2:	e008      	b.n	2400f8d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
2400f8c4:	687b      	ldr	r3, [r7, #4]
2400f8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f8c8:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400f8cc:	d103      	bne.n	2400f8d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
2400f8ce:	687b      	ldr	r3, [r7, #4]
2400f8d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
2400f8d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
2400f8d6:	bf00      	nop
2400f8d8:	370c      	adds	r7, #12
2400f8da:	46bd      	mov	sp, r7
2400f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f8e0:	4770      	bx	lr

2400f8e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
2400f8e2:	b480      	push	{r7}
2400f8e4:	b083      	sub	sp, #12
2400f8e6:	af00      	add	r7, sp, #0
2400f8e8:	6078      	str	r0, [r7, #4]
2400f8ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f8ec:	687b      	ldr	r3, [r7, #4]
2400f8ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f8f2:	b2db      	uxtb	r3, r3
2400f8f4:	2b20      	cmp	r3, #32
2400f8f6:	d138      	bne.n	2400f96a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f8f8:	687b      	ldr	r3, [r7, #4]
2400f8fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f8fe:	2b01      	cmp	r3, #1
2400f900:	d101      	bne.n	2400f906 <HAL_I2CEx_ConfigAnalogFilter+0x24>
2400f902:	2302      	movs	r3, #2
2400f904:	e032      	b.n	2400f96c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2400f906:	687b      	ldr	r3, [r7, #4]
2400f908:	2201      	movs	r2, #1
2400f90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f90e:	687b      	ldr	r3, [r7, #4]
2400f910:	2224      	movs	r2, #36	; 0x24
2400f912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f916:	687b      	ldr	r3, [r7, #4]
2400f918:	681b      	ldr	r3, [r3, #0]
2400f91a:	681a      	ldr	r2, [r3, #0]
2400f91c:	687b      	ldr	r3, [r7, #4]
2400f91e:	681b      	ldr	r3, [r3, #0]
2400f920:	f022 0201 	bic.w	r2, r2, #1
2400f924:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2400f926:	687b      	ldr	r3, [r7, #4]
2400f928:	681b      	ldr	r3, [r3, #0]
2400f92a:	681a      	ldr	r2, [r3, #0]
2400f92c:	687b      	ldr	r3, [r7, #4]
2400f92e:	681b      	ldr	r3, [r3, #0]
2400f930:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2400f934:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2400f936:	687b      	ldr	r3, [r7, #4]
2400f938:	681b      	ldr	r3, [r3, #0]
2400f93a:	6819      	ldr	r1, [r3, #0]
2400f93c:	687b      	ldr	r3, [r7, #4]
2400f93e:	681b      	ldr	r3, [r3, #0]
2400f940:	683a      	ldr	r2, [r7, #0]
2400f942:	430a      	orrs	r2, r1
2400f944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f946:	687b      	ldr	r3, [r7, #4]
2400f948:	681b      	ldr	r3, [r3, #0]
2400f94a:	681a      	ldr	r2, [r3, #0]
2400f94c:	687b      	ldr	r3, [r7, #4]
2400f94e:	681b      	ldr	r3, [r3, #0]
2400f950:	f042 0201 	orr.w	r2, r2, #1
2400f954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f956:	687b      	ldr	r3, [r7, #4]
2400f958:	2220      	movs	r2, #32
2400f95a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f95e:	687b      	ldr	r3, [r7, #4]
2400f960:	2200      	movs	r2, #0
2400f962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f966:	2300      	movs	r3, #0
2400f968:	e000      	b.n	2400f96c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2400f96a:	2302      	movs	r3, #2
  }
}
2400f96c:	4618      	mov	r0, r3
2400f96e:	370c      	adds	r7, #12
2400f970:	46bd      	mov	sp, r7
2400f972:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f976:	4770      	bx	lr

2400f978 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2400f978:	b480      	push	{r7}
2400f97a:	b085      	sub	sp, #20
2400f97c:	af00      	add	r7, sp, #0
2400f97e:	6078      	str	r0, [r7, #4]
2400f980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f982:	687b      	ldr	r3, [r7, #4]
2400f984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f988:	b2db      	uxtb	r3, r3
2400f98a:	2b20      	cmp	r3, #32
2400f98c:	d139      	bne.n	2400fa02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f98e:	687b      	ldr	r3, [r7, #4]
2400f990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f994:	2b01      	cmp	r3, #1
2400f996:	d101      	bne.n	2400f99c <HAL_I2CEx_ConfigDigitalFilter+0x24>
2400f998:	2302      	movs	r3, #2
2400f99a:	e033      	b.n	2400fa04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
2400f99c:	687b      	ldr	r3, [r7, #4]
2400f99e:	2201      	movs	r2, #1
2400f9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f9a4:	687b      	ldr	r3, [r7, #4]
2400f9a6:	2224      	movs	r2, #36	; 0x24
2400f9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f9ac:	687b      	ldr	r3, [r7, #4]
2400f9ae:	681b      	ldr	r3, [r3, #0]
2400f9b0:	681a      	ldr	r2, [r3, #0]
2400f9b2:	687b      	ldr	r3, [r7, #4]
2400f9b4:	681b      	ldr	r3, [r3, #0]
2400f9b6:	f022 0201 	bic.w	r2, r2, #1
2400f9ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2400f9bc:	687b      	ldr	r3, [r7, #4]
2400f9be:	681b      	ldr	r3, [r3, #0]
2400f9c0:	681b      	ldr	r3, [r3, #0]
2400f9c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2400f9c4:	68fb      	ldr	r3, [r7, #12]
2400f9c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2400f9ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2400f9cc:	683b      	ldr	r3, [r7, #0]
2400f9ce:	021b      	lsls	r3, r3, #8
2400f9d0:	68fa      	ldr	r2, [r7, #12]
2400f9d2:	4313      	orrs	r3, r2
2400f9d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
2400f9d6:	687b      	ldr	r3, [r7, #4]
2400f9d8:	681b      	ldr	r3, [r3, #0]
2400f9da:	68fa      	ldr	r2, [r7, #12]
2400f9dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f9de:	687b      	ldr	r3, [r7, #4]
2400f9e0:	681b      	ldr	r3, [r3, #0]
2400f9e2:	681a      	ldr	r2, [r3, #0]
2400f9e4:	687b      	ldr	r3, [r7, #4]
2400f9e6:	681b      	ldr	r3, [r3, #0]
2400f9e8:	f042 0201 	orr.w	r2, r2, #1
2400f9ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f9ee:	687b      	ldr	r3, [r7, #4]
2400f9f0:	2220      	movs	r2, #32
2400f9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f9f6:	687b      	ldr	r3, [r7, #4]
2400f9f8:	2200      	movs	r2, #0
2400f9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f9fe:	2300      	movs	r3, #0
2400fa00:	e000      	b.n	2400fa04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2400fa02:	2302      	movs	r3, #2
  }
}
2400fa04:	4618      	mov	r0, r3
2400fa06:	3714      	adds	r7, #20
2400fa08:	46bd      	mov	sp, r7
2400fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fa0e:	4770      	bx	lr

2400fa10 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400fa10:	b480      	push	{r7}
2400fa12:	b083      	sub	sp, #12
2400fa14:	af00      	add	r7, sp, #0
2400fa16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400fa18:	687b      	ldr	r3, [r7, #4]
2400fa1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400fa1e:	b2db      	uxtb	r3, r3
2400fa20:	2b20      	cmp	r3, #32
2400fa22:	d130      	bne.n	2400fa86 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400fa24:	687b      	ldr	r3, [r7, #4]
2400fa26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400fa2a:	2b01      	cmp	r3, #1
2400fa2c:	d101      	bne.n	2400fa32 <HAL_I2CEx_EnableWakeUp+0x22>
2400fa2e:	2302      	movs	r3, #2
2400fa30:	e02a      	b.n	2400fa88 <HAL_I2CEx_EnableWakeUp+0x78>
2400fa32:	687b      	ldr	r3, [r7, #4]
2400fa34:	2201      	movs	r2, #1
2400fa36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400fa3a:	687b      	ldr	r3, [r7, #4]
2400fa3c:	2224      	movs	r2, #36	; 0x24
2400fa3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400fa42:	687b      	ldr	r3, [r7, #4]
2400fa44:	681b      	ldr	r3, [r3, #0]
2400fa46:	681a      	ldr	r2, [r3, #0]
2400fa48:	687b      	ldr	r3, [r7, #4]
2400fa4a:	681b      	ldr	r3, [r3, #0]
2400fa4c:	f022 0201 	bic.w	r2, r2, #1
2400fa50:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
2400fa52:	687b      	ldr	r3, [r7, #4]
2400fa54:	681b      	ldr	r3, [r3, #0]
2400fa56:	681a      	ldr	r2, [r3, #0]
2400fa58:	687b      	ldr	r3, [r7, #4]
2400fa5a:	681b      	ldr	r3, [r3, #0]
2400fa5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400fa60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400fa62:	687b      	ldr	r3, [r7, #4]
2400fa64:	681b      	ldr	r3, [r3, #0]
2400fa66:	681a      	ldr	r2, [r3, #0]
2400fa68:	687b      	ldr	r3, [r7, #4]
2400fa6a:	681b      	ldr	r3, [r3, #0]
2400fa6c:	f042 0201 	orr.w	r2, r2, #1
2400fa70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400fa72:	687b      	ldr	r3, [r7, #4]
2400fa74:	2220      	movs	r2, #32
2400fa76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400fa7a:	687b      	ldr	r3, [r7, #4]
2400fa7c:	2200      	movs	r2, #0
2400fa7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400fa82:	2300      	movs	r3, #0
2400fa84:	e000      	b.n	2400fa88 <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400fa86:	2302      	movs	r3, #2
  }
}
2400fa88:	4618      	mov	r0, r3
2400fa8a:	370c      	adds	r7, #12
2400fa8c:	46bd      	mov	sp, r7
2400fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fa92:	4770      	bx	lr

2400fa94 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400fa94:	b480      	push	{r7}
2400fa96:	b083      	sub	sp, #12
2400fa98:	af00      	add	r7, sp, #0
2400fa9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400fa9c:	687b      	ldr	r3, [r7, #4]
2400fa9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400faa2:	b2db      	uxtb	r3, r3
2400faa4:	2b20      	cmp	r3, #32
2400faa6:	d130      	bne.n	2400fb0a <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400faa8:	687b      	ldr	r3, [r7, #4]
2400faaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400faae:	2b01      	cmp	r3, #1
2400fab0:	d101      	bne.n	2400fab6 <HAL_I2CEx_DisableWakeUp+0x22>
2400fab2:	2302      	movs	r3, #2
2400fab4:	e02a      	b.n	2400fb0c <HAL_I2CEx_DisableWakeUp+0x78>
2400fab6:	687b      	ldr	r3, [r7, #4]
2400fab8:	2201      	movs	r2, #1
2400faba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400fabe:	687b      	ldr	r3, [r7, #4]
2400fac0:	2224      	movs	r2, #36	; 0x24
2400fac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400fac6:	687b      	ldr	r3, [r7, #4]
2400fac8:	681b      	ldr	r3, [r3, #0]
2400faca:	681a      	ldr	r2, [r3, #0]
2400facc:	687b      	ldr	r3, [r7, #4]
2400face:	681b      	ldr	r3, [r3, #0]
2400fad0:	f022 0201 	bic.w	r2, r2, #1
2400fad4:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
2400fad6:	687b      	ldr	r3, [r7, #4]
2400fad8:	681b      	ldr	r3, [r3, #0]
2400fada:	681a      	ldr	r2, [r3, #0]
2400fadc:	687b      	ldr	r3, [r7, #4]
2400fade:	681b      	ldr	r3, [r3, #0]
2400fae0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400fae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400fae6:	687b      	ldr	r3, [r7, #4]
2400fae8:	681b      	ldr	r3, [r3, #0]
2400faea:	681a      	ldr	r2, [r3, #0]
2400faec:	687b      	ldr	r3, [r7, #4]
2400faee:	681b      	ldr	r3, [r3, #0]
2400faf0:	f042 0201 	orr.w	r2, r2, #1
2400faf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400faf6:	687b      	ldr	r3, [r7, #4]
2400faf8:	2220      	movs	r2, #32
2400fafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400fafe:	687b      	ldr	r3, [r7, #4]
2400fb00:	2200      	movs	r2, #0
2400fb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400fb06:	2300      	movs	r3, #0
2400fb08:	e000      	b.n	2400fb0c <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400fb0a:	2302      	movs	r3, #2
  }
}
2400fb0c:	4618      	mov	r0, r3
2400fb0e:	370c      	adds	r7, #12
2400fb10:	46bd      	mov	sp, r7
2400fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fb16:	4770      	bx	lr

2400fb18 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2400fb18:	b480      	push	{r7}
2400fb1a:	b085      	sub	sp, #20
2400fb1c:	af00      	add	r7, sp, #0
2400fb1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400fb20:	4b0d      	ldr	r3, [pc, #52]	; (2400fb58 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400fb22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400fb26:	4a0c      	ldr	r2, [pc, #48]	; (2400fb58 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400fb28:	f043 0302 	orr.w	r3, r3, #2
2400fb2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400fb30:	4b09      	ldr	r3, [pc, #36]	; (2400fb58 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400fb32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400fb36:	f003 0302 	and.w	r3, r3, #2
2400fb3a:	60fb      	str	r3, [r7, #12]
2400fb3c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400fb3e:	4b07      	ldr	r3, [pc, #28]	; (2400fb5c <HAL_I2CEx_EnableFastModePlus+0x44>)
2400fb40:	685a      	ldr	r2, [r3, #4]
2400fb42:	4906      	ldr	r1, [pc, #24]	; (2400fb5c <HAL_I2CEx_EnableFastModePlus+0x44>)
2400fb44:	687b      	ldr	r3, [r7, #4]
2400fb46:	4313      	orrs	r3, r2
2400fb48:	604b      	str	r3, [r1, #4]
}
2400fb4a:	bf00      	nop
2400fb4c:	3714      	adds	r7, #20
2400fb4e:	46bd      	mov	sp, r7
2400fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fb54:	4770      	bx	lr
2400fb56:	bf00      	nop
2400fb58:	58024400 	.word	0x58024400
2400fb5c:	58000400 	.word	0x58000400

2400fb60 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
2400fb60:	b480      	push	{r7}
2400fb62:	b085      	sub	sp, #20
2400fb64:	af00      	add	r7, sp, #0
2400fb66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400fb68:	4b0d      	ldr	r3, [pc, #52]	; (2400fba0 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400fb6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400fb6e:	4a0c      	ldr	r2, [pc, #48]	; (2400fba0 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400fb70:	f043 0302 	orr.w	r3, r3, #2
2400fb74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400fb78:	4b09      	ldr	r3, [pc, #36]	; (2400fba0 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400fb7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400fb7e:	f003 0302 	and.w	r3, r3, #2
2400fb82:	60fb      	str	r3, [r7, #12]
2400fb84:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400fb86:	4b07      	ldr	r3, [pc, #28]	; (2400fba4 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400fb88:	685a      	ldr	r2, [r3, #4]
2400fb8a:	687b      	ldr	r3, [r7, #4]
2400fb8c:	43db      	mvns	r3, r3
2400fb8e:	4905      	ldr	r1, [pc, #20]	; (2400fba4 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400fb90:	4013      	ands	r3, r2
2400fb92:	604b      	str	r3, [r1, #4]
}
2400fb94:	bf00      	nop
2400fb96:	3714      	adds	r7, #20
2400fb98:	46bd      	mov	sp, r7
2400fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fb9e:	4770      	bx	lr
2400fba0:	58024400 	.word	0x58024400
2400fba4:	58000400 	.word	0x58000400

2400fba8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
2400fba8:	b580      	push	{r7, lr}
2400fbaa:	b084      	sub	sp, #16
2400fbac:	af00      	add	r7, sp, #0
2400fbae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2400fbb0:	f7f2 fb38 	bl	24002224 <HAL_GetTick>
2400fbb4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fbb6:	687b      	ldr	r3, [r7, #4]
2400fbb8:	2b00      	cmp	r3, #0
2400fbba:	d101      	bne.n	2400fbc0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
2400fbbc:	2301      	movs	r3, #1
2400fbbe:	e03b      	b.n	2400fc38 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
2400fbc0:	687b      	ldr	r3, [r7, #4]
2400fbc2:	2200      	movs	r2, #0
2400fbc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
2400fbc8:	687b      	ldr	r3, [r7, #4]
2400fbca:	2202      	movs	r2, #2
2400fbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
2400fbd0:	687b      	ldr	r3, [r7, #4]
2400fbd2:	681b      	ldr	r3, [r3, #0]
2400fbd4:	68da      	ldr	r2, [r3, #12]
2400fbd6:	687b      	ldr	r3, [r7, #4]
2400fbd8:	681b      	ldr	r3, [r3, #0]
2400fbda:	f022 0201 	bic.w	r2, r2, #1
2400fbde:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400fbe0:	e00f      	b.n	2400fc02 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2400fbe2:	f7f2 fb1f 	bl	24002224 <HAL_GetTick>
2400fbe6:	4602      	mov	r2, r0
2400fbe8:	68fb      	ldr	r3, [r7, #12]
2400fbea:	1ad3      	subs	r3, r2, r3
2400fbec:	2b05      	cmp	r3, #5
2400fbee:	d908      	bls.n	2400fc02 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
2400fbf0:	687b      	ldr	r3, [r7, #4]
2400fbf2:	2240      	movs	r2, #64	; 0x40
2400fbf4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
2400fbf6:	687b      	ldr	r3, [r7, #4]
2400fbf8:	2203      	movs	r2, #3
2400fbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
2400fbfe:	2301      	movs	r3, #1
2400fc00:	e01a      	b.n	2400fc38 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400fc02:	687b      	ldr	r3, [r7, #4]
2400fc04:	681b      	ldr	r3, [r3, #0]
2400fc06:	68db      	ldr	r3, [r3, #12]
2400fc08:	f003 0301 	and.w	r3, r3, #1
2400fc0c:	2b00      	cmp	r3, #0
2400fc0e:	d1e8      	bne.n	2400fbe2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
2400fc10:	6878      	ldr	r0, [r7, #4]
2400fc12:	f001 f899 	bl	24010d48 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400fc16:	687b      	ldr	r3, [r7, #4]
2400fc18:	2200      	movs	r2, #0
2400fc1a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400fc1c:	687b      	ldr	r3, [r7, #4]
2400fc1e:	2200      	movs	r2, #0
2400fc20:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400fc22:	687b      	ldr	r3, [r7, #4]
2400fc24:	2200      	movs	r2, #0
2400fc26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fc28:	687b      	ldr	r3, [r7, #4]
2400fc2a:	2200      	movs	r2, #0
2400fc2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
2400fc2e:	687b      	ldr	r3, [r7, #4]
2400fc30:	2201      	movs	r2, #1
2400fc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
2400fc36:	2300      	movs	r3, #0
}
2400fc38:	4618      	mov	r0, r3
2400fc3a:	3710      	adds	r7, #16
2400fc3c:	46bd      	mov	sp, r7
2400fc3e:	bd80      	pop	{r7, pc}

2400fc40 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
2400fc40:	b480      	push	{r7}
2400fc42:	b083      	sub	sp, #12
2400fc44:	af00      	add	r7, sp, #0
2400fc46:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fc48:	687b      	ldr	r3, [r7, #4]
2400fc4a:	2b00      	cmp	r3, #0
2400fc4c:	d101      	bne.n	2400fc52 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
2400fc4e:	2301      	movs	r3, #1
2400fc50:	e048      	b.n	2400fce4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
2400fc52:	687b      	ldr	r3, [r7, #4]
2400fc54:	681b      	ldr	r3, [r3, #0]
2400fc56:	68da      	ldr	r2, [r3, #12]
2400fc58:	687b      	ldr	r3, [r7, #4]
2400fc5a:	681b      	ldr	r3, [r3, #0]
2400fc5c:	f022 0201 	bic.w	r2, r2, #1
2400fc60:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
2400fc62:	687b      	ldr	r3, [r7, #4]
2400fc64:	681b      	ldr	r3, [r3, #0]
2400fc66:	2200      	movs	r2, #0
2400fc68:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
2400fc6a:	687b      	ldr	r3, [r7, #4]
2400fc6c:	681b      	ldr	r3, [r3, #0]
2400fc6e:	2200      	movs	r2, #0
2400fc70:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
2400fc72:	687b      	ldr	r3, [r7, #4]
2400fc74:	681b      	ldr	r3, [r3, #0]
2400fc76:	2200      	movs	r2, #0
2400fc78:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
2400fc7a:	687b      	ldr	r3, [r7, #4]
2400fc7c:	681b      	ldr	r3, [r3, #0]
2400fc7e:	2200      	movs	r2, #0
2400fc80:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
2400fc82:	687b      	ldr	r3, [r7, #4]
2400fc84:	681b      	ldr	r3, [r3, #0]
2400fc86:	2200      	movs	r2, #0
2400fc88:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
2400fc8a:	687b      	ldr	r3, [r7, #4]
2400fc8c:	681b      	ldr	r3, [r3, #0]
2400fc8e:	2200      	movs	r2, #0
2400fc90:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
2400fc92:	687b      	ldr	r3, [r7, #4]
2400fc94:	681b      	ldr	r3, [r3, #0]
2400fc96:	2200      	movs	r2, #0
2400fc98:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
2400fc9a:	687b      	ldr	r3, [r7, #4]
2400fc9c:	681b      	ldr	r3, [r3, #0]
2400fc9e:	2200      	movs	r2, #0
2400fca0:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
2400fca2:	687b      	ldr	r3, [r7, #4]
2400fca4:	681b      	ldr	r3, [r3, #0]
2400fca6:	2200      	movs	r2, #0
2400fca8:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
2400fcaa:	687b      	ldr	r3, [r7, #4]
2400fcac:	681b      	ldr	r3, [r3, #0]
2400fcae:	2200      	movs	r2, #0
2400fcb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
2400fcb2:	687b      	ldr	r3, [r7, #4]
2400fcb4:	681b      	ldr	r3, [r3, #0]
2400fcb6:	221f      	movs	r2, #31
2400fcb8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400fcba:	687b      	ldr	r3, [r7, #4]
2400fcbc:	2200      	movs	r2, #0
2400fcbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400fcc0:	687b      	ldr	r3, [r7, #4]
2400fcc2:	2200      	movs	r2, #0
2400fcc4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400fcc6:	687b      	ldr	r3, [r7, #4]
2400fcc8:	2200      	movs	r2, #0
2400fcca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fccc:	687b      	ldr	r3, [r7, #4]
2400fcce:	2200      	movs	r2, #0
2400fcd0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
2400fcd2:	687b      	ldr	r3, [r7, #4]
2400fcd4:	2200      	movs	r2, #0
2400fcd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400fcda:	687b      	ldr	r3, [r7, #4]
2400fcdc:	2200      	movs	r2, #0
2400fcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
2400fce2:	2300      	movs	r3, #0
}
2400fce4:	4618      	mov	r0, r3
2400fce6:	370c      	adds	r7, #12
2400fce8:	46bd      	mov	sp, r7
2400fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fcee:	4770      	bx	lr

2400fcf0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
2400fcf0:	b480      	push	{r7}
2400fcf2:	b087      	sub	sp, #28
2400fcf4:	af00      	add	r7, sp, #0
2400fcf6:	60f8      	str	r0, [r7, #12]
2400fcf8:	60b9      	str	r1, [r7, #8]
2400fcfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
2400fcfc:	2300      	movs	r3, #0
2400fcfe:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fd00:	68fb      	ldr	r3, [r7, #12]
2400fd02:	2b00      	cmp	r3, #0
2400fd04:	d101      	bne.n	2400fd0a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
2400fd06:	2301      	movs	r3, #1
2400fd08:	e03e      	b.n	2400fd88 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fd0a:	68fb      	ldr	r3, [r7, #12]
2400fd0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fd10:	2b01      	cmp	r3, #1
2400fd12:	d101      	bne.n	2400fd18 <HAL_MDMA_ConfigPostRequestMask+0x28>
2400fd14:	2302      	movs	r3, #2
2400fd16:	e037      	b.n	2400fd88 <HAL_MDMA_ConfigPostRequestMask+0x98>
2400fd18:	68fb      	ldr	r3, [r7, #12]
2400fd1a:	2201      	movs	r2, #1
2400fd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fd20:	68fb      	ldr	r3, [r7, #12]
2400fd22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fd26:	b2db      	uxtb	r3, r3
2400fd28:	2b01      	cmp	r3, #1
2400fd2a:	d126      	bne.n	2400fd7a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
2400fd2c:	68fb      	ldr	r3, [r7, #12]
2400fd2e:	681b      	ldr	r3, [r3, #0]
2400fd30:	691b      	ldr	r3, [r3, #16]
2400fd32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2400fd36:	2b00      	cmp	r3, #0
2400fd38:	d11c      	bne.n	2400fd74 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
2400fd3a:	68fb      	ldr	r3, [r7, #12]
2400fd3c:	681b      	ldr	r3, [r3, #0]
2400fd3e:	68ba      	ldr	r2, [r7, #8]
2400fd40:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
2400fd42:	68fb      	ldr	r3, [r7, #12]
2400fd44:	681b      	ldr	r3, [r3, #0]
2400fd46:	687a      	ldr	r2, [r7, #4]
2400fd48:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
2400fd4a:	68bb      	ldr	r3, [r7, #8]
2400fd4c:	2b00      	cmp	r3, #0
2400fd4e:	d108      	bne.n	2400fd62 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
2400fd50:	68fb      	ldr	r3, [r7, #12]
2400fd52:	681b      	ldr	r3, [r3, #0]
2400fd54:	691a      	ldr	r2, [r3, #16]
2400fd56:	68fb      	ldr	r3, [r7, #12]
2400fd58:	681b      	ldr	r3, [r3, #0]
2400fd5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2400fd5e:	611a      	str	r2, [r3, #16]
2400fd60:	e00d      	b.n	2400fd7e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
2400fd62:	68fb      	ldr	r3, [r7, #12]
2400fd64:	681b      	ldr	r3, [r3, #0]
2400fd66:	691a      	ldr	r2, [r3, #16]
2400fd68:	68fb      	ldr	r3, [r7, #12]
2400fd6a:	681b      	ldr	r3, [r3, #0]
2400fd6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
2400fd70:	611a      	str	r2, [r3, #16]
2400fd72:	e004      	b.n	2400fd7e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
2400fd74:	2301      	movs	r3, #1
2400fd76:	75fb      	strb	r3, [r7, #23]
2400fd78:	e001      	b.n	2400fd7e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400fd7a:	2301      	movs	r3, #1
2400fd7c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400fd7e:	68fb      	ldr	r3, [r7, #12]
2400fd80:	2200      	movs	r2, #0
2400fd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400fd86:	7dfb      	ldrb	r3, [r7, #23]
}
2400fd88:	4618      	mov	r0, r3
2400fd8a:	371c      	adds	r7, #28
2400fd8c:	46bd      	mov	sp, r7
2400fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fd92:	4770      	bx	lr

2400fd94 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
2400fd94:	b480      	push	{r7}
2400fd96:	b087      	sub	sp, #28
2400fd98:	af00      	add	r7, sp, #0
2400fd9a:	60f8      	str	r0, [r7, #12]
2400fd9c:	460b      	mov	r3, r1
2400fd9e:	607a      	str	r2, [r7, #4]
2400fda0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2400fda2:	2300      	movs	r3, #0
2400fda4:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fda6:	68fb      	ldr	r3, [r7, #12]
2400fda8:	2b00      	cmp	r3, #0
2400fdaa:	d101      	bne.n	2400fdb0 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2400fdac:	2301      	movs	r3, #1
2400fdae:	e044      	b.n	2400fe3a <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fdb0:	68fb      	ldr	r3, [r7, #12]
2400fdb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fdb6:	2b01      	cmp	r3, #1
2400fdb8:	d101      	bne.n	2400fdbe <HAL_MDMA_RegisterCallback+0x2a>
2400fdba:	2302      	movs	r3, #2
2400fdbc:	e03d      	b.n	2400fe3a <HAL_MDMA_RegisterCallback+0xa6>
2400fdbe:	68fb      	ldr	r3, [r7, #12]
2400fdc0:	2201      	movs	r2, #1
2400fdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fdc6:	68fb      	ldr	r3, [r7, #12]
2400fdc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fdcc:	b2db      	uxtb	r3, r3
2400fdce:	2b01      	cmp	r3, #1
2400fdd0:	d12a      	bne.n	2400fe28 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
2400fdd2:	7afb      	ldrb	r3, [r7, #11]
2400fdd4:	2b05      	cmp	r3, #5
2400fdd6:	d82a      	bhi.n	2400fe2e <HAL_MDMA_RegisterCallback+0x9a>
2400fdd8:	a201      	add	r2, pc, #4	; (adr r2, 2400fde0 <HAL_MDMA_RegisterCallback+0x4c>)
2400fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400fdde:	bf00      	nop
2400fde0:	2400fdf9 	.word	0x2400fdf9
2400fde4:	2400fe01 	.word	0x2400fe01
2400fde8:	2400fe09 	.word	0x2400fe09
2400fdec:	2400fe11 	.word	0x2400fe11
2400fdf0:	2400fe19 	.word	0x2400fe19
2400fdf4:	2400fe21 	.word	0x2400fe21
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
2400fdf8:	68fb      	ldr	r3, [r7, #12]
2400fdfa:	687a      	ldr	r2, [r7, #4]
2400fdfc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400fdfe:	e017      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
2400fe00:	68fb      	ldr	r3, [r7, #12]
2400fe02:	687a      	ldr	r2, [r7, #4]
2400fe04:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400fe06:	e013      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
2400fe08:	68fb      	ldr	r3, [r7, #12]
2400fe0a:	687a      	ldr	r2, [r7, #4]
2400fe0c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400fe0e:	e00f      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
2400fe10:	68fb      	ldr	r3, [r7, #12]
2400fe12:	687a      	ldr	r2, [r7, #4]
2400fe14:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400fe16:	e00b      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
2400fe18:	68fb      	ldr	r3, [r7, #12]
2400fe1a:	687a      	ldr	r2, [r7, #4]
2400fe1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400fe1e:	e007      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
2400fe20:	68fb      	ldr	r3, [r7, #12]
2400fe22:	687a      	ldr	r2, [r7, #4]
2400fe24:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400fe26:	e003      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400fe28:	2301      	movs	r3, #1
2400fe2a:	75fb      	strb	r3, [r7, #23]
2400fe2c:	e000      	b.n	2400fe30 <HAL_MDMA_RegisterCallback+0x9c>
      break;
2400fe2e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400fe30:	68fb      	ldr	r3, [r7, #12]
2400fe32:	2200      	movs	r2, #0
2400fe34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400fe38:	7dfb      	ldrb	r3, [r7, #23]
}
2400fe3a:	4618      	mov	r0, r3
2400fe3c:	371c      	adds	r7, #28
2400fe3e:	46bd      	mov	sp, r7
2400fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fe44:	4770      	bx	lr
2400fe46:	bf00      	nop

2400fe48 <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
2400fe48:	b480      	push	{r7}
2400fe4a:	b085      	sub	sp, #20
2400fe4c:	af00      	add	r7, sp, #0
2400fe4e:	6078      	str	r0, [r7, #4]
2400fe50:	460b      	mov	r3, r1
2400fe52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
2400fe54:	2300      	movs	r3, #0
2400fe56:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fe58:	687b      	ldr	r3, [r7, #4]
2400fe5a:	2b00      	cmp	r3, #0
2400fe5c:	d101      	bne.n	2400fe62 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2400fe5e:	2301      	movs	r3, #1
2400fe60:	e059      	b.n	2400ff16 <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fe62:	687b      	ldr	r3, [r7, #4]
2400fe64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fe68:	2b01      	cmp	r3, #1
2400fe6a:	d101      	bne.n	2400fe70 <HAL_MDMA_UnRegisterCallback+0x28>
2400fe6c:	2302      	movs	r3, #2
2400fe6e:	e052      	b.n	2400ff16 <HAL_MDMA_UnRegisterCallback+0xce>
2400fe70:	687b      	ldr	r3, [r7, #4]
2400fe72:	2201      	movs	r2, #1
2400fe74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fe78:	687b      	ldr	r3, [r7, #4]
2400fe7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fe7e:	b2db      	uxtb	r3, r3
2400fe80:	2b01      	cmp	r3, #1
2400fe82:	d141      	bne.n	2400ff08 <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
2400fe84:	78fb      	ldrb	r3, [r7, #3]
2400fe86:	2b06      	cmp	r3, #6
2400fe88:	d83b      	bhi.n	2400ff02 <HAL_MDMA_UnRegisterCallback+0xba>
2400fe8a:	a201      	add	r2, pc, #4	; (adr r2, 2400fe90 <HAL_MDMA_UnRegisterCallback+0x48>)
2400fe8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400fe90:	2400fead 	.word	0x2400fead
2400fe94:	2400feb5 	.word	0x2400feb5
2400fe98:	2400febd 	.word	0x2400febd
2400fe9c:	2400fec5 	.word	0x2400fec5
2400fea0:	2400fecd 	.word	0x2400fecd
2400fea4:	2400fed5 	.word	0x2400fed5
2400fea8:	2400fedd 	.word	0x2400fedd
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400feac:	687b      	ldr	r3, [r7, #4]
2400feae:	2200      	movs	r2, #0
2400feb0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400feb2:	e02b      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
2400feb4:	687b      	ldr	r3, [r7, #4]
2400feb6:	2200      	movs	r2, #0
2400feb8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400feba:	e027      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
2400febc:	687b      	ldr	r3, [r7, #4]
2400febe:	2200      	movs	r2, #0
2400fec0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400fec2:	e023      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400fec4:	687b      	ldr	r3, [r7, #4]
2400fec6:	2200      	movs	r2, #0
2400fec8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400feca:	e01f      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
2400fecc:	687b      	ldr	r3, [r7, #4]
2400fece:	2200      	movs	r2, #0
2400fed0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400fed2:	e01b      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
2400fed4:	687b      	ldr	r3, [r7, #4]
2400fed6:	2200      	movs	r2, #0
2400fed8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400feda:	e017      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400fedc:	687b      	ldr	r3, [r7, #4]
2400fede:	2200      	movs	r2, #0
2400fee0:	645a      	str	r2, [r3, #68]	; 0x44
      hmdma->XferBufferCpltCallback = NULL;
2400fee2:	687b      	ldr	r3, [r7, #4]
2400fee4:	2200      	movs	r2, #0
2400fee6:	649a      	str	r2, [r3, #72]	; 0x48
      hmdma->XferBlockCpltCallback = NULL;
2400fee8:	687b      	ldr	r3, [r7, #4]
2400feea:	2200      	movs	r2, #0
2400feec:	64da      	str	r2, [r3, #76]	; 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400feee:	687b      	ldr	r3, [r7, #4]
2400fef0:	2200      	movs	r2, #0
2400fef2:	651a      	str	r2, [r3, #80]	; 0x50
      hmdma->XferErrorCallback = NULL;
2400fef4:	687b      	ldr	r3, [r7, #4]
2400fef6:	2200      	movs	r2, #0
2400fef8:	655a      	str	r2, [r3, #84]	; 0x54
      hmdma->XferAbortCallback = NULL;
2400fefa:	687b      	ldr	r3, [r7, #4]
2400fefc:	2200      	movs	r2, #0
2400fefe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400ff00:	e004      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2400ff02:	2301      	movs	r3, #1
2400ff04:	73fb      	strb	r3, [r7, #15]
      break;
2400ff06:	e001      	b.n	2400ff0c <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
2400ff08:	2301      	movs	r3, #1
2400ff0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400ff0c:	687b      	ldr	r3, [r7, #4]
2400ff0e:	2200      	movs	r2, #0
2400ff10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400ff14:	7bfb      	ldrb	r3, [r7, #15]
}
2400ff16:	4618      	mov	r0, r3
2400ff18:	3714      	adds	r7, #20
2400ff1a:	46bd      	mov	sp, r7
2400ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ff20:	4770      	bx	lr
2400ff22:	bf00      	nop

2400ff24 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
2400ff24:	b480      	push	{r7}
2400ff26:	b085      	sub	sp, #20
2400ff28:	af00      	add	r7, sp, #0
2400ff2a:	6078      	str	r0, [r7, #4]
2400ff2c:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
2400ff2e:	687b      	ldr	r3, [r7, #4]
2400ff30:	2b00      	cmp	r3, #0
2400ff32:	d002      	beq.n	2400ff3a <HAL_MDMA_LinkedList_CreateNode+0x16>
2400ff34:	683b      	ldr	r3, [r7, #0]
2400ff36:	2b00      	cmp	r3, #0
2400ff38:	d101      	bne.n	2400ff3e <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
2400ff3a:	2301      	movs	r3, #1
2400ff3c:	e0c8      	b.n	240100d0 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
2400ff3e:	687b      	ldr	r3, [r7, #4]
2400ff40:	2200      	movs	r2, #0
2400ff42:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
2400ff44:	687b      	ldr	r3, [r7, #4]
2400ff46:	2200      	movs	r2, #0
2400ff48:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
2400ff4a:	687b      	ldr	r3, [r7, #4]
2400ff4c:	2200      	movs	r2, #0
2400ff4e:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
2400ff50:	687b      	ldr	r3, [r7, #4]
2400ff52:	2200      	movs	r2, #0
2400ff54:	625a      	str	r2, [r3, #36]	; 0x24
  pNode->Reserved = 0;
2400ff56:	687b      	ldr	r3, [r7, #4]
2400ff58:	2200      	movs	r2, #0
2400ff5a:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400ff5c:	683b      	ldr	r3, [r7, #0]
2400ff5e:	691a      	ldr	r2, [r3, #16]
2400ff60:	683b      	ldr	r3, [r7, #0]
2400ff62:	695b      	ldr	r3, [r3, #20]
2400ff64:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400ff66:	683b      	ldr	r3, [r7, #0]
2400ff68:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400ff6a:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400ff6c:	683b      	ldr	r3, [r7, #0]
2400ff6e:	69db      	ldr	r3, [r3, #28]
2400ff70:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400ff72:	683b      	ldr	r3, [r7, #0]
2400ff74:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400ff76:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400ff78:	683b      	ldr	r3, [r7, #0]
2400ff7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400ff7c:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
2400ff7e:	683b      	ldr	r3, [r7, #0]
2400ff80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400ff82:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400ff84:	683b      	ldr	r3, [r7, #0]
2400ff86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ff88:	3b01      	subs	r3, #1
2400ff8a:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
2400ff8c:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
2400ff8e:	683b      	ldr	r3, [r7, #0]
2400ff90:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400ff92:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400ff94:	687b      	ldr	r3, [r7, #4]
2400ff96:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
2400ff98:	683b      	ldr	r3, [r7, #0]
2400ff9a:	681b      	ldr	r3, [r3, #0]
2400ff9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400ffa0:	d105      	bne.n	2400ffae <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
2400ffa2:	687b      	ldr	r3, [r7, #4]
2400ffa4:	681b      	ldr	r3, [r3, #0]
2400ffa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
2400ffaa:	687b      	ldr	r3, [r7, #4]
2400ffac:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
2400ffae:	683b      	ldr	r3, [r7, #0]
2400ffb0:	681b      	ldr	r3, [r3, #0]
2400ffb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400ffb6:	d003      	beq.n	2400ffc0 <HAL_MDMA_LinkedList_CreateNode+0x9c>
2400ffb8:	683b      	ldr	r3, [r7, #0]
2400ffba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400ffbc:	2b00      	cmp	r3, #0
2400ffbe:	d005      	beq.n	2400ffcc <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
2400ffc0:	687b      	ldr	r3, [r7, #4]
2400ffc2:	681b      	ldr	r3, [r3, #0]
2400ffc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2400ffc8:	687b      	ldr	r3, [r7, #4]
2400ffca:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
2400ffcc:	683b      	ldr	r3, [r7, #0]
2400ffce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ffd0:	3b01      	subs	r3, #1
2400ffd2:	051a      	lsls	r2, r3, #20
2400ffd4:	687b      	ldr	r3, [r7, #4]
2400ffd6:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
2400ffd8:	683b      	ldr	r3, [r7, #0]
2400ffda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400ffdc:	2b00      	cmp	r3, #0
2400ffde:	da0e      	bge.n	2400fffe <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
2400ffe0:	687b      	ldr	r3, [r7, #4]
2400ffe2:	685b      	ldr	r3, [r3, #4]
2400ffe4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
2400ffe8:	687b      	ldr	r3, [r7, #4]
2400ffea:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
2400ffec:	683b      	ldr	r3, [r7, #0]
2400ffee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400fff0:	425b      	negs	r3, r3
2400fff2:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
2400fff4:	68fb      	ldr	r3, [r7, #12]
2400fff6:	b29a      	uxth	r2, r3
2400fff8:	687b      	ldr	r3, [r7, #4]
2400fffa:	611a      	str	r2, [r3, #16]
2400fffc:	e004      	b.n	24010008 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2400fffe:	683b      	ldr	r3, [r7, #0]
24010000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24010002:	b29a      	uxth	r2, r3
24010004:	687b      	ldr	r3, [r7, #4]
24010006:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
24010008:	683b      	ldr	r3, [r7, #0]
2401000a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401000c:	2b00      	cmp	r3, #0
2401000e:	da11      	bge.n	24010034 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
24010010:	687b      	ldr	r3, [r7, #4]
24010012:	685b      	ldr	r3, [r3, #4]
24010014:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
24010018:	687b      	ldr	r3, [r7, #4]
2401001a:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
2401001c:	683b      	ldr	r3, [r7, #0]
2401001e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010020:	425b      	negs	r3, r3
24010022:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010024:	687b      	ldr	r3, [r7, #4]
24010026:	691a      	ldr	r2, [r3, #16]
24010028:	68fb      	ldr	r3, [r7, #12]
2401002a:	041b      	lsls	r3, r3, #16
2401002c:	431a      	orrs	r2, r3
2401002e:	687b      	ldr	r3, [r7, #4]
24010030:	611a      	str	r2, [r3, #16]
24010032:	e007      	b.n	24010044 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010034:	687b      	ldr	r3, [r7, #4]
24010036:	691a      	ldr	r2, [r3, #16]
24010038:	683b      	ldr	r3, [r7, #0]
2401003a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401003c:	041b      	lsls	r3, r3, #16
2401003e:	431a      	orrs	r2, r3
24010040:	687b      	ldr	r3, [r7, #4]
24010042:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
24010044:	687b      	ldr	r3, [r7, #4]
24010046:	685a      	ldr	r2, [r3, #4]
24010048:	683b      	ldr	r3, [r7, #0]
2401004a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401004c:	431a      	orrs	r2, r3
2401004e:	687b      	ldr	r3, [r7, #4]
24010050:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
24010052:	683b      	ldr	r3, [r7, #0]
24010054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010056:	687b      	ldr	r3, [r7, #4]
24010058:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
2401005a:	683b      	ldr	r3, [r7, #0]
2401005c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2401005e:	687b      	ldr	r3, [r7, #4]
24010060:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
24010062:	683b      	ldr	r3, [r7, #0]
24010064:	681b      	ldr	r3, [r3, #0]
24010066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401006a:	d00c      	beq.n	24010086 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
2401006c:	683b      	ldr	r3, [r7, #0]
2401006e:	681b      	ldr	r3, [r3, #0]
24010070:	b2da      	uxtb	r2, r3
24010072:	687b      	ldr	r3, [r7, #4]
24010074:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
24010076:	683b      	ldr	r3, [r7, #0]
24010078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2401007a:	687b      	ldr	r3, [r7, #4]
2401007c:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
2401007e:	683b      	ldr	r3, [r7, #0]
24010080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24010082:	687b      	ldr	r3, [r7, #4]
24010084:	625a      	str	r2, [r3, #36]	; 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
24010086:	683b      	ldr	r3, [r7, #0]
24010088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401008a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2401008e:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010090:	68bb      	ldr	r3, [r7, #8]
24010092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24010096:	d002      	beq.n	2401009e <HAL_MDMA_LinkedList_CreateNode+0x17a>
24010098:	68bb      	ldr	r3, [r7, #8]
2401009a:	2b00      	cmp	r3, #0
2401009c:	d105      	bne.n	240100aa <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
2401009e:	687b      	ldr	r3, [r7, #4]
240100a0:	699b      	ldr	r3, [r3, #24]
240100a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
240100a6:	687b      	ldr	r3, [r7, #4]
240100a8:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
240100aa:	683b      	ldr	r3, [r7, #0]
240100ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240100ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
240100b2:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
240100b4:	68bb      	ldr	r3, [r7, #8]
240100b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240100ba:	d002      	beq.n	240100c2 <HAL_MDMA_LinkedList_CreateNode+0x19e>
240100bc:	68bb      	ldr	r3, [r7, #8]
240100be:	2b00      	cmp	r3, #0
240100c0:	d105      	bne.n	240100ce <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
240100c2:	687b      	ldr	r3, [r7, #4]
240100c4:	699b      	ldr	r3, [r3, #24]
240100c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
240100ca:	687b      	ldr	r3, [r7, #4]
240100cc:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
240100ce:	2300      	movs	r3, #0
}
240100d0:	4618      	mov	r0, r3
240100d2:	3714      	adds	r7, #20
240100d4:	46bd      	mov	sp, r7
240100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240100da:	4770      	bx	lr

240100dc <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
240100dc:	b480      	push	{r7}
240100de:	b089      	sub	sp, #36	; 0x24
240100e0:	af00      	add	r7, sp, #0
240100e2:	60f8      	str	r0, [r7, #12]
240100e4:	60b9      	str	r1, [r7, #8]
240100e6:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
240100e8:	2300      	movs	r3, #0
240100ea:	61bb      	str	r3, [r7, #24]
240100ec:	2300      	movs	r3, #0
240100ee:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
240100f0:	2300      	movs	r3, #0
240100f2:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
240100f4:	68fb      	ldr	r3, [r7, #12]
240100f6:	2b00      	cmp	r3, #0
240100f8:	d002      	beq.n	24010100 <HAL_MDMA_LinkedList_AddNode+0x24>
240100fa:	68bb      	ldr	r3, [r7, #8]
240100fc:	2b00      	cmp	r3, #0
240100fe:	d101      	bne.n	24010104 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
24010100:	2301      	movs	r3, #1
24010102:	e0a9      	b.n	24010258 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010104:	68fb      	ldr	r3, [r7, #12]
24010106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2401010a:	2b01      	cmp	r3, #1
2401010c:	d101      	bne.n	24010112 <HAL_MDMA_LinkedList_AddNode+0x36>
2401010e:	2302      	movs	r3, #2
24010110:	e0a2      	b.n	24010258 <HAL_MDMA_LinkedList_AddNode+0x17c>
24010112:	68fb      	ldr	r3, [r7, #12]
24010114:	2201      	movs	r2, #1
24010116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2401011a:	68fb      	ldr	r3, [r7, #12]
2401011c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010120:	b2db      	uxtb	r3, r3
24010122:	2b01      	cmp	r3, #1
24010124:	f040 8093 	bne.w	2401024e <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24010128:	68fb      	ldr	r3, [r7, #12]
2401012a:	2202      	movs	r2, #2
2401012c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
24010130:	68fb      	ldr	r3, [r7, #12]
24010132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24010134:	2b00      	cmp	r3, #0
24010136:	d116      	bne.n	24010166 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
24010138:	687b      	ldr	r3, [r7, #4]
2401013a:	2b00      	cmp	r3, #0
2401013c:	d110      	bne.n	24010160 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
2401013e:	68fb      	ldr	r3, [r7, #12]
24010140:	681b      	ldr	r3, [r3, #0]
24010142:	68ba      	ldr	r2, [r7, #8]
24010144:	625a      	str	r2, [r3, #36]	; 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
24010146:	68fb      	ldr	r3, [r7, #12]
24010148:	68ba      	ldr	r2, [r7, #8]
2401014a:	65da      	str	r2, [r3, #92]	; 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
2401014c:	68bb      	ldr	r3, [r7, #8]
2401014e:	2200      	movs	r2, #0
24010150:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
24010152:	68fb      	ldr	r3, [r7, #12]
24010154:	68ba      	ldr	r2, [r7, #8]
24010156:	661a      	str	r2, [r3, #96]	; 0x60

        hmdma->LinkedListNodeCounter = 1;
24010158:	68fb      	ldr	r3, [r7, #12]
2401015a:	2201      	movs	r2, #1
2401015c:	665a      	str	r2, [r3, #100]	; 0x64
2401015e:	e06c      	b.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
24010160:	2301      	movs	r3, #1
24010162:	74fb      	strb	r3, [r7, #19]
24010164:	e069      	b.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
24010166:	68fb      	ldr	r3, [r7, #12]
24010168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401016a:	68ba      	ldr	r2, [r7, #8]
2401016c:	429a      	cmp	r2, r3
2401016e:	d062      	beq.n	24010236 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
24010170:	68fb      	ldr	r3, [r7, #12]
24010172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24010174:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24010176:	e00c      	b.n	24010192 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
24010178:	69fb      	ldr	r3, [r7, #28]
2401017a:	695a      	ldr	r2, [r3, #20]
2401017c:	68bb      	ldr	r3, [r7, #8]
2401017e:	429a      	cmp	r2, r3
24010180:	d101      	bne.n	24010186 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
24010182:	2301      	movs	r3, #1
24010184:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24010186:	69fb      	ldr	r3, [r7, #28]
24010188:	695b      	ldr	r3, [r3, #20]
2401018a:	61fb      	str	r3, [r7, #28]
        counter++;
2401018c:	69bb      	ldr	r3, [r7, #24]
2401018e:	3301      	adds	r3, #1
24010190:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24010192:	68fb      	ldr	r3, [r7, #12]
24010194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24010196:	69ba      	ldr	r2, [r7, #24]
24010198:	429a      	cmp	r2, r3
2401019a:	d202      	bcs.n	240101a2 <HAL_MDMA_LinkedList_AddNode+0xc6>
2401019c:	7cfb      	ldrb	r3, [r7, #19]
2401019e:	2b00      	cmp	r3, #0
240101a0:	d0ea      	beq.n	24010178 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
240101a2:	7cfb      	ldrb	r3, [r7, #19]
240101a4:	2b00      	cmp	r3, #0
240101a6:	d148      	bne.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
240101a8:	68fb      	ldr	r3, [r7, #12]
240101aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240101ac:	687a      	ldr	r2, [r7, #4]
240101ae:	429a      	cmp	r2, r3
240101b0:	d002      	beq.n	240101b8 <HAL_MDMA_LinkedList_AddNode+0xdc>
240101b2:	687b      	ldr	r3, [r7, #4]
240101b4:	2b00      	cmp	r3, #0
240101b6:	d111      	bne.n	240101dc <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
240101b8:	68fb      	ldr	r3, [r7, #12]
240101ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240101bc:	695a      	ldr	r2, [r3, #20]
240101be:	68bb      	ldr	r3, [r7, #8]
240101c0:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
240101c2:	68fb      	ldr	r3, [r7, #12]
240101c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240101c6:	68ba      	ldr	r2, [r7, #8]
240101c8:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
240101ca:	68fb      	ldr	r3, [r7, #12]
240101cc:	68ba      	ldr	r2, [r7, #8]
240101ce:	661a      	str	r2, [r3, #96]	; 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
240101d0:	68fb      	ldr	r3, [r7, #12]
240101d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240101d4:	1c5a      	adds	r2, r3, #1
240101d6:	68fb      	ldr	r3, [r7, #12]
240101d8:	665a      	str	r2, [r3, #100]	; 0x64
240101da:	e02e      	b.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
240101dc:	68fb      	ldr	r3, [r7, #12]
240101de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240101e0:	61fb      	str	r3, [r7, #28]
          counter = 0;
240101e2:	2300      	movs	r3, #0
240101e4:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
240101e6:	e018      	b.n	2401021a <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
240101e8:	69bb      	ldr	r3, [r7, #24]
240101ea:	3301      	adds	r3, #1
240101ec:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
240101ee:	69fa      	ldr	r2, [r7, #28]
240101f0:	687b      	ldr	r3, [r7, #4]
240101f2:	429a      	cmp	r2, r3
240101f4:	d10e      	bne.n	24010214 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
240101f6:	69fb      	ldr	r3, [r7, #28]
240101f8:	695a      	ldr	r2, [r3, #20]
240101fa:	68bb      	ldr	r3, [r7, #8]
240101fc:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
240101fe:	68ba      	ldr	r2, [r7, #8]
24010200:	69fb      	ldr	r3, [r7, #28]
24010202:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
24010204:	68fb      	ldr	r3, [r7, #12]
24010206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24010208:	1c5a      	adds	r2, r3, #1
2401020a:	68fb      	ldr	r3, [r7, #12]
2401020c:	665a      	str	r2, [r3, #100]	; 0x64
              nodeInserted = 1;
2401020e:	2301      	movs	r3, #1
24010210:	617b      	str	r3, [r7, #20]
24010212:	e002      	b.n	2401021a <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24010214:	69fb      	ldr	r3, [r7, #28]
24010216:	695b      	ldr	r3, [r3, #20]
24010218:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2401021a:	68fb      	ldr	r3, [r7, #12]
2401021c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401021e:	69ba      	ldr	r2, [r7, #24]
24010220:	429a      	cmp	r2, r3
24010222:	d202      	bcs.n	2401022a <HAL_MDMA_LinkedList_AddNode+0x14e>
24010224:	697b      	ldr	r3, [r7, #20]
24010226:	2b00      	cmp	r3, #0
24010228:	d0de      	beq.n	240101e8 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
2401022a:	697b      	ldr	r3, [r7, #20]
2401022c:	2b00      	cmp	r3, #0
2401022e:	d104      	bne.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
24010230:	2301      	movs	r3, #1
24010232:	74fb      	strb	r3, [r7, #19]
24010234:	e001      	b.n	2401023a <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
24010236:	2301      	movs	r3, #1
24010238:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401023a:	68fb      	ldr	r3, [r7, #12]
2401023c:	2200      	movs	r2, #0
2401023e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24010242:	68fb      	ldr	r3, [r7, #12]
24010244:	2201      	movs	r2, #1
24010246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2401024a:	7cfb      	ldrb	r3, [r7, #19]
2401024c:	e004      	b.n	24010258 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401024e:	68fb      	ldr	r3, [r7, #12]
24010250:	2200      	movs	r2, #0
24010252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24010256:	2302      	movs	r3, #2
  }
}
24010258:	4618      	mov	r0, r3
2401025a:	3724      	adds	r7, #36	; 0x24
2401025c:	46bd      	mov	sp, r7
2401025e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010262:	4770      	bx	lr

24010264 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
24010264:	b480      	push	{r7}
24010266:	b087      	sub	sp, #28
24010268:	af00      	add	r7, sp, #0
2401026a:	6078      	str	r0, [r7, #4]
2401026c:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
2401026e:	2300      	movs	r3, #0
24010270:	613b      	str	r3, [r7, #16]
24010272:	2300      	movs	r3, #0
24010274:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
24010276:	2300      	movs	r3, #0
24010278:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
2401027a:	687b      	ldr	r3, [r7, #4]
2401027c:	2b00      	cmp	r3, #0
2401027e:	d002      	beq.n	24010286 <HAL_MDMA_LinkedList_RemoveNode+0x22>
24010280:	683b      	ldr	r3, [r7, #0]
24010282:	2b00      	cmp	r3, #0
24010284:	d101      	bne.n	2401028a <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
24010286:	2301      	movs	r3, #1
24010288:	e099      	b.n	240103be <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401028a:	687b      	ldr	r3, [r7, #4]
2401028c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24010290:	2b01      	cmp	r3, #1
24010292:	d101      	bne.n	24010298 <HAL_MDMA_LinkedList_RemoveNode+0x34>
24010294:	2302      	movs	r3, #2
24010296:	e092      	b.n	240103be <HAL_MDMA_LinkedList_RemoveNode+0x15a>
24010298:	687b      	ldr	r3, [r7, #4]
2401029a:	2201      	movs	r2, #1
2401029c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240102a0:	687b      	ldr	r3, [r7, #4]
240102a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240102a6:	b2db      	uxtb	r3, r3
240102a8:	2b01      	cmp	r3, #1
240102aa:	f040 8083 	bne.w	240103b4 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240102ae:	687b      	ldr	r3, [r7, #4]
240102b0:	2202      	movs	r2, #2
240102b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
240102b6:	687b      	ldr	r3, [r7, #4]
240102b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240102ba:	2b00      	cmp	r3, #0
240102bc:	d007      	beq.n	240102ce <HAL_MDMA_LinkedList_RemoveNode+0x6a>
240102be:	687b      	ldr	r3, [r7, #4]
240102c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240102c2:	2b00      	cmp	r3, #0
240102c4:	d003      	beq.n	240102ce <HAL_MDMA_LinkedList_RemoveNode+0x6a>
240102c6:	687b      	ldr	r3, [r7, #4]
240102c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240102ca:	2b00      	cmp	r3, #0
240102cc:	d102      	bne.n	240102d4 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
240102ce:	2301      	movs	r3, #1
240102d0:	72fb      	strb	r3, [r7, #11]
240102d2:	e065      	b.n	240103a0 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
240102d4:	687b      	ldr	r3, [r7, #4]
240102d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240102d8:	683a      	ldr	r2, [r7, #0]
240102da:	429a      	cmp	r2, r3
240102dc:	d130      	bne.n	24010340 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
240102de:	687b      	ldr	r3, [r7, #4]
240102e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240102e2:	683a      	ldr	r2, [r7, #0]
240102e4:	429a      	cmp	r2, r3
240102e6:	d10d      	bne.n	24010304 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
240102e8:	687b      	ldr	r3, [r7, #4]
240102ea:	2200      	movs	r2, #0
240102ec:	65da      	str	r2, [r3, #92]	; 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
240102ee:	687b      	ldr	r3, [r7, #4]
240102f0:	2200      	movs	r2, #0
240102f2:	661a      	str	r2, [r3, #96]	; 0x60
        hmdma->LinkedListNodeCounter = 0;
240102f4:	687b      	ldr	r3, [r7, #4]
240102f6:	2200      	movs	r2, #0
240102f8:	665a      	str	r2, [r3, #100]	; 0x64

        hmdma->Instance->CLAR = 0;
240102fa:	687b      	ldr	r3, [r7, #4]
240102fc:	681b      	ldr	r3, [r3, #0]
240102fe:	2200      	movs	r2, #0
24010300:	625a      	str	r2, [r3, #36]	; 0x24
24010302:	e04d      	b.n	240103a0 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
24010304:	687b      	ldr	r3, [r7, #4]
24010306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24010308:	461a      	mov	r2, r3
2401030a:	687b      	ldr	r3, [r7, #4]
2401030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2401030e:	695b      	ldr	r3, [r3, #20]
24010310:	429a      	cmp	r2, r3
24010312:	d104      	bne.n	2401031e <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
24010314:	687b      	ldr	r3, [r7, #4]
24010316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24010318:	683a      	ldr	r2, [r7, #0]
2401031a:	6952      	ldr	r2, [r2, #20]
2401031c:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
2401031e:	687b      	ldr	r3, [r7, #4]
24010320:	681b      	ldr	r3, [r3, #0]
24010322:	683a      	ldr	r2, [r7, #0]
24010324:	6952      	ldr	r2, [r2, #20]
24010326:	625a      	str	r2, [r3, #36]	; 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
24010328:	687b      	ldr	r3, [r7, #4]
2401032a:	681b      	ldr	r3, [r3, #0]
2401032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401032e:	461a      	mov	r2, r3
24010330:	687b      	ldr	r3, [r7, #4]
24010332:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
24010334:	687b      	ldr	r3, [r7, #4]
24010336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24010338:	1e5a      	subs	r2, r3, #1
2401033a:	687b      	ldr	r3, [r7, #4]
2401033c:	665a      	str	r2, [r3, #100]	; 0x64
2401033e:	e02f      	b.n	240103a0 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
24010340:	687b      	ldr	r3, [r7, #4]
24010342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24010344:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
24010346:	e01e      	b.n	24010386 <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
24010348:	693b      	ldr	r3, [r7, #16]
2401034a:	3301      	adds	r3, #1
2401034c:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
2401034e:	697b      	ldr	r3, [r7, #20]
24010350:	695a      	ldr	r2, [r3, #20]
24010352:	683b      	ldr	r3, [r7, #0]
24010354:	429a      	cmp	r2, r3
24010356:	d113      	bne.n	24010380 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
24010358:	687b      	ldr	r3, [r7, #4]
2401035a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2401035c:	683a      	ldr	r2, [r7, #0]
2401035e:	429a      	cmp	r2, r3
24010360:	d102      	bne.n	24010368 <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
24010362:	687b      	ldr	r3, [r7, #4]
24010364:	697a      	ldr	r2, [r7, #20]
24010366:	661a      	str	r2, [r3, #96]	; 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
24010368:	683b      	ldr	r3, [r7, #0]
2401036a:	695a      	ldr	r2, [r3, #20]
2401036c:	697b      	ldr	r3, [r7, #20]
2401036e:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
24010370:	2301      	movs	r3, #1
24010372:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
24010374:	687b      	ldr	r3, [r7, #4]
24010376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24010378:	1e5a      	subs	r2, r3, #1
2401037a:	687b      	ldr	r3, [r7, #4]
2401037c:	665a      	str	r2, [r3, #100]	; 0x64
2401037e:	e002      	b.n	24010386 <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
24010380:	697b      	ldr	r3, [r7, #20]
24010382:	695b      	ldr	r3, [r3, #20]
24010384:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
24010386:	687b      	ldr	r3, [r7, #4]
24010388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401038a:	693a      	ldr	r2, [r7, #16]
2401038c:	429a      	cmp	r2, r3
2401038e:	d202      	bcs.n	24010396 <HAL_MDMA_LinkedList_RemoveNode+0x132>
24010390:	68fb      	ldr	r3, [r7, #12]
24010392:	2b00      	cmp	r3, #0
24010394:	d0d8      	beq.n	24010348 <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
24010396:	68fb      	ldr	r3, [r7, #12]
24010398:	2b00      	cmp	r3, #0
2401039a:	d101      	bne.n	240103a0 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
2401039c:	2301      	movs	r3, #1
2401039e:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240103a0:	687b      	ldr	r3, [r7, #4]
240103a2:	2200      	movs	r2, #0
240103a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
240103a8:	687b      	ldr	r3, [r7, #4]
240103aa:	2201      	movs	r2, #1
240103ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
240103b0:	7afb      	ldrb	r3, [r7, #11]
240103b2:	e004      	b.n	240103be <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240103b4:	687b      	ldr	r3, [r7, #4]
240103b6:	2200      	movs	r2, #0
240103b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
240103bc:	2302      	movs	r3, #2
  }
}
240103be:	4618      	mov	r0, r3
240103c0:	371c      	adds	r7, #28
240103c2:	46bd      	mov	sp, r7
240103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240103c8:	4770      	bx	lr

240103ca <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
240103ca:	b480      	push	{r7}
240103cc:	b085      	sub	sp, #20
240103ce:	af00      	add	r7, sp, #0
240103d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
240103d2:	2300      	movs	r3, #0
240103d4:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240103d6:	687b      	ldr	r3, [r7, #4]
240103d8:	2b00      	cmp	r3, #0
240103da:	d101      	bne.n	240103e0 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
240103dc:	2301      	movs	r3, #1
240103de:	e031      	b.n	24010444 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240103e0:	687b      	ldr	r3, [r7, #4]
240103e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240103e6:	2b01      	cmp	r3, #1
240103e8:	d101      	bne.n	240103ee <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
240103ea:	2302      	movs	r3, #2
240103ec:	e02a      	b.n	24010444 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
240103ee:	687b      	ldr	r3, [r7, #4]
240103f0:	2201      	movs	r2, #1
240103f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240103f6:	687b      	ldr	r3, [r7, #4]
240103f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240103fc:	b2db      	uxtb	r3, r3
240103fe:	2b01      	cmp	r3, #1
24010400:	d117      	bne.n	24010432 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24010402:	687b      	ldr	r3, [r7, #4]
24010404:	2202      	movs	r2, #2
24010406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2401040a:	687b      	ldr	r3, [r7, #4]
2401040c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401040e:	2b00      	cmp	r3, #0
24010410:	d007      	beq.n	24010422 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
24010412:	687b      	ldr	r3, [r7, #4]
24010414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24010416:	2b00      	cmp	r3, #0
24010418:	d003      	beq.n	24010422 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2401041a:	687b      	ldr	r3, [r7, #4]
2401041c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401041e:	2b00      	cmp	r3, #0
24010420:	d102      	bne.n	24010428 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
24010422:	2301      	movs	r3, #1
24010424:	73fb      	strb	r3, [r7, #15]
24010426:	e004      	b.n	24010432 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
24010428:	687b      	ldr	r3, [r7, #4]
2401042a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2401042c:	687b      	ldr	r3, [r7, #4]
2401042e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24010430:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
24010432:	687b      	ldr	r3, [r7, #4]
24010434:	2200      	movs	r2, #0
24010436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2401043a:	687b      	ldr	r3, [r7, #4]
2401043c:	2201      	movs	r2, #1
2401043e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
24010442:	7bfb      	ldrb	r3, [r7, #15]
}
24010444:	4618      	mov	r0, r3
24010446:	3714      	adds	r7, #20
24010448:	46bd      	mov	sp, r7
2401044a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401044e:	4770      	bx	lr

24010450 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
24010450:	b480      	push	{r7}
24010452:	b085      	sub	sp, #20
24010454:	af00      	add	r7, sp, #0
24010456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
24010458:	2300      	movs	r3, #0
2401045a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401045c:	687b      	ldr	r3, [r7, #4]
2401045e:	2b00      	cmp	r3, #0
24010460:	d101      	bne.n	24010466 <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
24010462:	2301      	movs	r3, #1
24010464:	e030      	b.n	240104c8 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010466:	687b      	ldr	r3, [r7, #4]
24010468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2401046c:	2b01      	cmp	r3, #1
2401046e:	d101      	bne.n	24010474 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
24010470:	2302      	movs	r3, #2
24010472:	e029      	b.n	240104c8 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
24010474:	687b      	ldr	r3, [r7, #4]
24010476:	2201      	movs	r2, #1
24010478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2401047c:	687b      	ldr	r3, [r7, #4]
2401047e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010482:	b2db      	uxtb	r3, r3
24010484:	2b01      	cmp	r3, #1
24010486:	d116      	bne.n	240104b6 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24010488:	687b      	ldr	r3, [r7, #4]
2401048a:	2202      	movs	r2, #2
2401048c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
24010490:	687b      	ldr	r3, [r7, #4]
24010492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24010494:	2b00      	cmp	r3, #0
24010496:	d007      	beq.n	240104a8 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
24010498:	687b      	ldr	r3, [r7, #4]
2401049a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2401049c:	2b00      	cmp	r3, #0
2401049e:	d003      	beq.n	240104a8 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
240104a0:	687b      	ldr	r3, [r7, #4]
240104a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240104a4:	2b00      	cmp	r3, #0
240104a6:	d102      	bne.n	240104ae <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
240104a8:	2301      	movs	r3, #1
240104aa:	73fb      	strb	r3, [r7, #15]
240104ac:	e003      	b.n	240104b6 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
240104ae:	687b      	ldr	r3, [r7, #4]
240104b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240104b2:	2200      	movs	r2, #0
240104b4:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
240104b6:	687b      	ldr	r3, [r7, #4]
240104b8:	2200      	movs	r2, #0
240104ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
240104be:	687b      	ldr	r3, [r7, #4]
240104c0:	2201      	movs	r2, #1
240104c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
240104c6:	7bfb      	ldrb	r3, [r7, #15]
}
240104c8:	4618      	mov	r0, r3
240104ca:	3714      	adds	r7, #20
240104cc:	46bd      	mov	sp, r7
240104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240104d2:	4770      	bx	lr

240104d4 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
240104d4:	b580      	push	{r7, lr}
240104d6:	b086      	sub	sp, #24
240104d8:	af02      	add	r7, sp, #8
240104da:	60f8      	str	r0, [r7, #12]
240104dc:	60b9      	str	r1, [r7, #8]
240104de:	607a      	str	r2, [r7, #4]
240104e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240104e2:	68fb      	ldr	r3, [r7, #12]
240104e4:	2b00      	cmp	r3, #0
240104e6:	d101      	bne.n	240104ec <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
240104e8:	2301      	movs	r3, #1
240104ea:	e044      	b.n	24010576 <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240104ec:	68fb      	ldr	r3, [r7, #12]
240104ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240104f2:	2b01      	cmp	r3, #1
240104f4:	d101      	bne.n	240104fa <HAL_MDMA_Start+0x26>
240104f6:	2302      	movs	r3, #2
240104f8:	e03d      	b.n	24010576 <HAL_MDMA_Start+0xa2>
240104fa:	68fb      	ldr	r3, [r7, #12]
240104fc:	2201      	movs	r2, #1
240104fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24010502:	68fb      	ldr	r3, [r7, #12]
24010504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010508:	b2db      	uxtb	r3, r3
2401050a:	2b01      	cmp	r3, #1
2401050c:	d12c      	bne.n	24010568 <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2401050e:	68fb      	ldr	r3, [r7, #12]
24010510:	2202      	movs	r2, #2
24010512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24010516:	68fb      	ldr	r3, [r7, #12]
24010518:	2200      	movs	r2, #0
2401051a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2401051c:	68fb      	ldr	r3, [r7, #12]
2401051e:	681b      	ldr	r3, [r3, #0]
24010520:	68da      	ldr	r2, [r3, #12]
24010522:	68fb      	ldr	r3, [r7, #12]
24010524:	681b      	ldr	r3, [r3, #0]
24010526:	f022 0201 	bic.w	r2, r2, #1
2401052a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2401052c:	69bb      	ldr	r3, [r7, #24]
2401052e:	9300      	str	r3, [sp, #0]
24010530:	683b      	ldr	r3, [r7, #0]
24010532:	687a      	ldr	r2, [r7, #4]
24010534:	68b9      	ldr	r1, [r7, #8]
24010536:	68f8      	ldr	r0, [r7, #12]
24010538:	f000 fb96 	bl	24010c68 <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2401053c:	68fb      	ldr	r3, [r7, #12]
2401053e:	681b      	ldr	r3, [r3, #0]
24010540:	68da      	ldr	r2, [r3, #12]
24010542:	68fb      	ldr	r3, [r7, #12]
24010544:	681b      	ldr	r3, [r3, #0]
24010546:	f042 0201 	orr.w	r2, r2, #1
2401054a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2401054c:	68fb      	ldr	r3, [r7, #12]
2401054e:	685b      	ldr	r3, [r3, #4]
24010550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010554:	d10e      	bne.n	24010574 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
24010556:	68fb      	ldr	r3, [r7, #12]
24010558:	681b      	ldr	r3, [r3, #0]
2401055a:	68da      	ldr	r2, [r3, #12]
2401055c:	68fb      	ldr	r3, [r7, #12]
2401055e:	681b      	ldr	r3, [r3, #0]
24010560:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24010564:	60da      	str	r2, [r3, #12]
24010566:	e005      	b.n	24010574 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24010568:	68fb      	ldr	r3, [r7, #12]
2401056a:	2200      	movs	r2, #0
2401056c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24010570:	2302      	movs	r3, #2
24010572:	e000      	b.n	24010576 <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
24010574:	2300      	movs	r3, #0
}
24010576:	4618      	mov	r0, r3
24010578:	3710      	adds	r7, #16
2401057a:	46bd      	mov	sp, r7
2401057c:	bd80      	pop	{r7, pc}

2401057e <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2401057e:	b580      	push	{r7, lr}
24010580:	b086      	sub	sp, #24
24010582:	af02      	add	r7, sp, #8
24010584:	60f8      	str	r0, [r7, #12]
24010586:	60b9      	str	r1, [r7, #8]
24010588:	607a      	str	r2, [r7, #4]
2401058a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401058c:	68fb      	ldr	r3, [r7, #12]
2401058e:	2b00      	cmp	r3, #0
24010590:	d101      	bne.n	24010596 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
24010592:	2301      	movs	r3, #1
24010594:	e070      	b.n	24010678 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010596:	68fb      	ldr	r3, [r7, #12]
24010598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2401059c:	2b01      	cmp	r3, #1
2401059e:	d101      	bne.n	240105a4 <HAL_MDMA_Start_IT+0x26>
240105a0:	2302      	movs	r3, #2
240105a2:	e069      	b.n	24010678 <HAL_MDMA_Start_IT+0xfa>
240105a4:	68fb      	ldr	r3, [r7, #12]
240105a6:	2201      	movs	r2, #1
240105a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240105ac:	68fb      	ldr	r3, [r7, #12]
240105ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240105b2:	b2db      	uxtb	r3, r3
240105b4:	2b01      	cmp	r3, #1
240105b6:	d158      	bne.n	2401066a <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240105b8:	68fb      	ldr	r3, [r7, #12]
240105ba:	2202      	movs	r2, #2
240105bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
240105c0:	68fb      	ldr	r3, [r7, #12]
240105c2:	2200      	movs	r2, #0
240105c4:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
240105c6:	68fb      	ldr	r3, [r7, #12]
240105c8:	681b      	ldr	r3, [r3, #0]
240105ca:	68da      	ldr	r2, [r3, #12]
240105cc:	68fb      	ldr	r3, [r7, #12]
240105ce:	681b      	ldr	r3, [r3, #0]
240105d0:	f022 0201 	bic.w	r2, r2, #1
240105d4:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
240105d6:	69bb      	ldr	r3, [r7, #24]
240105d8:	9300      	str	r3, [sp, #0]
240105da:	683b      	ldr	r3, [r7, #0]
240105dc:	687a      	ldr	r2, [r7, #4]
240105de:	68b9      	ldr	r1, [r7, #8]
240105e0:	68f8      	ldr	r0, [r7, #12]
240105e2:	f000 fb41 	bl	24010c68 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
240105e6:	68fb      	ldr	r3, [r7, #12]
240105e8:	681b      	ldr	r3, [r3, #0]
240105ea:	68da      	ldr	r2, [r3, #12]
240105ec:	68fb      	ldr	r3, [r7, #12]
240105ee:	681b      	ldr	r3, [r3, #0]
240105f0:	f042 0206 	orr.w	r2, r2, #6
240105f4:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
240105f6:	68fb      	ldr	r3, [r7, #12]
240105f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240105fa:	2b00      	cmp	r3, #0
240105fc:	d007      	beq.n	2401060e <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
240105fe:	68fb      	ldr	r3, [r7, #12]
24010600:	681b      	ldr	r3, [r3, #0]
24010602:	68da      	ldr	r2, [r3, #12]
24010604:	68fb      	ldr	r3, [r7, #12]
24010606:	681b      	ldr	r3, [r3, #0]
24010608:	f042 0210 	orr.w	r2, r2, #16
2401060c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
2401060e:	68fb      	ldr	r3, [r7, #12]
24010610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24010612:	2b00      	cmp	r3, #0
24010614:	d007      	beq.n	24010626 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
24010616:	68fb      	ldr	r3, [r7, #12]
24010618:	681b      	ldr	r3, [r3, #0]
2401061a:	68da      	ldr	r2, [r3, #12]
2401061c:	68fb      	ldr	r3, [r7, #12]
2401061e:	681b      	ldr	r3, [r3, #0]
24010620:	f042 0208 	orr.w	r2, r2, #8
24010624:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
24010626:	68fb      	ldr	r3, [r7, #12]
24010628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401062a:	2b00      	cmp	r3, #0
2401062c:	d007      	beq.n	2401063e <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
2401062e:	68fb      	ldr	r3, [r7, #12]
24010630:	681b      	ldr	r3, [r3, #0]
24010632:	68da      	ldr	r2, [r3, #12]
24010634:	68fb      	ldr	r3, [r7, #12]
24010636:	681b      	ldr	r3, [r3, #0]
24010638:	f042 0220 	orr.w	r2, r2, #32
2401063c:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2401063e:	68fb      	ldr	r3, [r7, #12]
24010640:	681b      	ldr	r3, [r3, #0]
24010642:	68da      	ldr	r2, [r3, #12]
24010644:	68fb      	ldr	r3, [r7, #12]
24010646:	681b      	ldr	r3, [r3, #0]
24010648:	f042 0201 	orr.w	r2, r2, #1
2401064c:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2401064e:	68fb      	ldr	r3, [r7, #12]
24010650:	685b      	ldr	r3, [r3, #4]
24010652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010656:	d10e      	bne.n	24010676 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
24010658:	68fb      	ldr	r3, [r7, #12]
2401065a:	681b      	ldr	r3, [r3, #0]
2401065c:	68da      	ldr	r2, [r3, #12]
2401065e:	68fb      	ldr	r3, [r7, #12]
24010660:	681b      	ldr	r3, [r3, #0]
24010662:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24010666:	60da      	str	r2, [r3, #12]
24010668:	e005      	b.n	24010676 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401066a:	68fb      	ldr	r3, [r7, #12]
2401066c:	2200      	movs	r2, #0
2401066e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24010672:	2302      	movs	r3, #2
24010674:	e000      	b.n	24010678 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
24010676:	2300      	movs	r3, #0
}
24010678:	4618      	mov	r0, r3
2401067a:	3710      	adds	r7, #16
2401067c:	46bd      	mov	sp, r7
2401067e:	bd80      	pop	{r7, pc}

24010680 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
24010680:	b580      	push	{r7, lr}
24010682:	b084      	sub	sp, #16
24010684:	af00      	add	r7, sp, #0
24010686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
24010688:	f7f1 fdcc 	bl	24002224 <HAL_GetTick>
2401068c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401068e:	687b      	ldr	r3, [r7, #4]
24010690:	2b00      	cmp	r3, #0
24010692:	d101      	bne.n	24010698 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
24010694:	2301      	movs	r3, #1
24010696:	e04a      	b.n	2401072e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24010698:	687b      	ldr	r3, [r7, #4]
2401069a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2401069e:	b2db      	uxtb	r3, r3
240106a0:	2b02      	cmp	r3, #2
240106a2:	d008      	beq.n	240106b6 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240106a4:	687b      	ldr	r3, [r7, #4]
240106a6:	2280      	movs	r2, #128	; 0x80
240106a8:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
240106aa:	687b      	ldr	r3, [r7, #4]
240106ac:	2200      	movs	r2, #0
240106ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
240106b2:	2301      	movs	r3, #1
240106b4:	e03b      	b.n	2401072e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
240106b6:	687b      	ldr	r3, [r7, #4]
240106b8:	681b      	ldr	r3, [r3, #0]
240106ba:	68da      	ldr	r2, [r3, #12]
240106bc:	687b      	ldr	r3, [r7, #4]
240106be:	681b      	ldr	r3, [r3, #0]
240106c0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
240106c4:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
240106c6:	687b      	ldr	r3, [r7, #4]
240106c8:	681b      	ldr	r3, [r3, #0]
240106ca:	68da      	ldr	r2, [r3, #12]
240106cc:	687b      	ldr	r3, [r7, #4]
240106ce:	681b      	ldr	r3, [r3, #0]
240106d0:	f022 0201 	bic.w	r2, r2, #1
240106d4:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240106d6:	e016      	b.n	24010706 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
240106d8:	f7f1 fda4 	bl	24002224 <HAL_GetTick>
240106dc:	4602      	mov	r2, r0
240106de:	68fb      	ldr	r3, [r7, #12]
240106e0:	1ad3      	subs	r3, r2, r3
240106e2:	2b05      	cmp	r3, #5
240106e4:	d90f      	bls.n	24010706 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
240106e6:	687b      	ldr	r3, [r7, #4]
240106e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240106ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
240106ee:	687b      	ldr	r3, [r7, #4]
240106f0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
240106f2:	687b      	ldr	r3, [r7, #4]
240106f4:	2200      	movs	r2, #0
240106f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
240106fa:	687b      	ldr	r3, [r7, #4]
240106fc:	2203      	movs	r2, #3
240106fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
24010702:	2301      	movs	r3, #1
24010704:	e013      	b.n	2401072e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010706:	687b      	ldr	r3, [r7, #4]
24010708:	681b      	ldr	r3, [r3, #0]
2401070a:	68db      	ldr	r3, [r3, #12]
2401070c:	f003 0301 	and.w	r3, r3, #1
24010710:	2b00      	cmp	r3, #0
24010712:	d1e1      	bne.n	240106d8 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
24010714:	687b      	ldr	r3, [r7, #4]
24010716:	681b      	ldr	r3, [r3, #0]
24010718:	221f      	movs	r2, #31
2401071a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2401071c:	687b      	ldr	r3, [r7, #4]
2401071e:	2200      	movs	r2, #0
24010720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
24010724:	687b      	ldr	r3, [r7, #4]
24010726:	2201      	movs	r2, #1
24010728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
2401072c:	2300      	movs	r3, #0
}
2401072e:	4618      	mov	r0, r3
24010730:	3710      	adds	r7, #16
24010732:	46bd      	mov	sp, r7
24010734:	bd80      	pop	{r7, pc}

24010736 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
24010736:	b480      	push	{r7}
24010738:	b083      	sub	sp, #12
2401073a:	af00      	add	r7, sp, #0
2401073c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2401073e:	687b      	ldr	r3, [r7, #4]
24010740:	2b00      	cmp	r3, #0
24010742:	d101      	bne.n	24010748 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24010744:	2301      	movs	r3, #1
24010746:	e017      	b.n	24010778 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24010748:	687b      	ldr	r3, [r7, #4]
2401074a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2401074e:	b2db      	uxtb	r3, r3
24010750:	2b02      	cmp	r3, #2
24010752:	d004      	beq.n	2401075e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24010754:	687b      	ldr	r3, [r7, #4]
24010756:	2280      	movs	r2, #128	; 0x80
24010758:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401075a:	2301      	movs	r3, #1
2401075c:	e00c      	b.n	24010778 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
2401075e:	687b      	ldr	r3, [r7, #4]
24010760:	2204      	movs	r2, #4
24010762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24010766:	687b      	ldr	r3, [r7, #4]
24010768:	681b      	ldr	r3, [r3, #0]
2401076a:	68da      	ldr	r2, [r3, #12]
2401076c:	687b      	ldr	r3, [r7, #4]
2401076e:	681b      	ldr	r3, [r3, #0]
24010770:	f022 0201 	bic.w	r2, r2, #1
24010774:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24010776:	2300      	movs	r3, #0
}
24010778:	4618      	mov	r0, r3
2401077a:	370c      	adds	r7, #12
2401077c:	46bd      	mov	sp, r7
2401077e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010782:	4770      	bx	lr

24010784 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24010784:	b580      	push	{r7, lr}
24010786:	b088      	sub	sp, #32
24010788:	af00      	add	r7, sp, #0
2401078a:	60f8      	str	r0, [r7, #12]
2401078c:	460b      	mov	r3, r1
2401078e:	607a      	str	r2, [r7, #4]
24010790:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010792:	68fb      	ldr	r3, [r7, #12]
24010794:	2b00      	cmp	r3, #0
24010796:	d101      	bne.n	2401079c <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
24010798:	2301      	movs	r3, #1
2401079a:	e0b9      	b.n	24010910 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2401079c:	68fb      	ldr	r3, [r7, #12]
2401079e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240107a2:	b2db      	uxtb	r3, r3
240107a4:	2b02      	cmp	r3, #2
240107a6:	d004      	beq.n	240107b2 <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240107a8:	68fb      	ldr	r3, [r7, #12]
240107aa:	2280      	movs	r2, #128	; 0x80
240107ac:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
240107ae:	2301      	movs	r3, #1
240107b0:	e0ae      	b.n	24010910 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240107b2:	7afb      	ldrb	r3, [r7, #11]
240107b4:	2b00      	cmp	r3, #0
240107b6:	d00b      	beq.n	240107d0 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240107b8:	7afb      	ldrb	r3, [r7, #11]
240107ba:	2b01      	cmp	r3, #1
240107bc:	d006      	beq.n	240107cc <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
240107be:	7afb      	ldrb	r3, [r7, #11]
240107c0:	2b02      	cmp	r3, #2
240107c2:	d101      	bne.n	240107c8 <HAL_MDMA_PollForTransfer+0x44>
240107c4:	2308      	movs	r3, #8
240107c6:	e004      	b.n	240107d2 <HAL_MDMA_PollForTransfer+0x4e>
240107c8:	2304      	movs	r3, #4
240107ca:	e002      	b.n	240107d2 <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240107cc:	2310      	movs	r3, #16
240107ce:	e000      	b.n	240107d2 <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240107d0:	2302      	movs	r3, #2
240107d2:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
240107d4:	f7f1 fd26 	bl	24002224 <HAL_GetTick>
240107d8:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240107da:	e067      	b.n	240108ac <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240107dc:	68fb      	ldr	r3, [r7, #12]
240107de:	681b      	ldr	r3, [r3, #0]
240107e0:	681b      	ldr	r3, [r3, #0]
240107e2:	f003 0301 	and.w	r3, r3, #1
240107e6:	2b00      	cmp	r3, #0
240107e8:	d046      	beq.n	24010878 <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240107ea:	68fb      	ldr	r3, [r7, #12]
240107ec:	681b      	ldr	r3, [r3, #0]
240107ee:	689b      	ldr	r3, [r3, #8]
240107f0:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
240107f2:	697b      	ldr	r3, [r7, #20]
240107f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
240107f8:	2b00      	cmp	r3, #0
240107fa:	d106      	bne.n	2401080a <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
240107fc:	68fb      	ldr	r3, [r7, #12]
240107fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010800:	f043 0201 	orr.w	r2, r3, #1
24010804:	68fb      	ldr	r3, [r7, #12]
24010806:	669a      	str	r2, [r3, #104]	; 0x68
24010808:	e005      	b.n	24010816 <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2401080a:	68fb      	ldr	r3, [r7, #12]
2401080c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401080e:	f043 0202 	orr.w	r2, r3, #2
24010812:	68fb      	ldr	r3, [r7, #12]
24010814:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24010816:	697b      	ldr	r3, [r7, #20]
24010818:	f403 7300 	and.w	r3, r3, #512	; 0x200
2401081c:	2b00      	cmp	r3, #0
2401081e:	d005      	beq.n	2401082c <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24010820:	68fb      	ldr	r3, [r7, #12]
24010822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010824:	f043 0204 	orr.w	r2, r3, #4
24010828:	68fb      	ldr	r3, [r7, #12]
2401082a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
2401082c:	697b      	ldr	r3, [r7, #20]
2401082e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24010832:	2b00      	cmp	r3, #0
24010834:	d005      	beq.n	24010842 <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
24010836:	68fb      	ldr	r3, [r7, #12]
24010838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401083a:	f043 0208 	orr.w	r2, r3, #8
2401083e:	68fb      	ldr	r3, [r7, #12]
24010840:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24010842:	697b      	ldr	r3, [r7, #20]
24010844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24010848:	2b00      	cmp	r3, #0
2401084a:	d005      	beq.n	24010858 <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
2401084c:	68fb      	ldr	r3, [r7, #12]
2401084e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010850:	f043 0210 	orr.w	r2, r3, #16
24010854:	68fb      	ldr	r3, [r7, #12]
24010856:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24010858:	697b      	ldr	r3, [r7, #20]
2401085a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2401085e:	2b00      	cmp	r3, #0
24010860:	d005      	beq.n	2401086e <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24010862:	68fb      	ldr	r3, [r7, #12]
24010864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010866:	f043 0220 	orr.w	r2, r3, #32
2401086a:	68fb      	ldr	r3, [r7, #12]
2401086c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
2401086e:	68f8      	ldr	r0, [r7, #12]
24010870:	f7ff ff06 	bl	24010680 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
24010874:	2301      	movs	r3, #1
24010876:	e04b      	b.n	24010910 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
24010878:	687b      	ldr	r3, [r7, #4]
2401087a:	f1b3 3fff 	cmp.w	r3, #4294967295
2401087e:	d015      	beq.n	240108ac <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
24010880:	f7f1 fcd0 	bl	24002224 <HAL_GetTick>
24010884:	4602      	mov	r2, r0
24010886:	69bb      	ldr	r3, [r7, #24]
24010888:	1ad3      	subs	r3, r2, r3
2401088a:	687a      	ldr	r2, [r7, #4]
2401088c:	429a      	cmp	r2, r3
2401088e:	d302      	bcc.n	24010896 <HAL_MDMA_PollForTransfer+0x112>
24010890:	687b      	ldr	r3, [r7, #4]
24010892:	2b00      	cmp	r3, #0
24010894:	d10a      	bne.n	240108ac <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
24010896:	68fb      	ldr	r3, [r7, #12]
24010898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401089a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2401089e:	68fb      	ldr	r3, [r7, #12]
240108a0:	669a      	str	r2, [r3, #104]	; 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
240108a2:	68f8      	ldr	r0, [r7, #12]
240108a4:	f7ff feec 	bl	24010680 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
240108a8:	2301      	movs	r3, #1
240108aa:	e031      	b.n	24010910 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240108ac:	68fb      	ldr	r3, [r7, #12]
240108ae:	681b      	ldr	r3, [r3, #0]
240108b0:	681a      	ldr	r2, [r3, #0]
240108b2:	69fb      	ldr	r3, [r7, #28]
240108b4:	4013      	ands	r3, r2
240108b6:	2b00      	cmp	r3, #0
240108b8:	d090      	beq.n	240107dc <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
240108ba:	7afb      	ldrb	r3, [r7, #11]
240108bc:	2b01      	cmp	r3, #1
240108be:	d104      	bne.n	240108ca <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
240108c0:	68fb      	ldr	r3, [r7, #12]
240108c2:	681b      	ldr	r3, [r3, #0]
240108c4:	2210      	movs	r2, #16
240108c6:	605a      	str	r2, [r3, #4]
240108c8:	e021      	b.n	2401090e <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
240108ca:	7afb      	ldrb	r3, [r7, #11]
240108cc:	2b02      	cmp	r3, #2
240108ce:	d104      	bne.n	240108da <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
240108d0:	68fb      	ldr	r3, [r7, #12]
240108d2:	681b      	ldr	r3, [r3, #0]
240108d4:	2218      	movs	r2, #24
240108d6:	605a      	str	r2, [r3, #4]
240108d8:	e019      	b.n	2401090e <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
240108da:	7afb      	ldrb	r3, [r7, #11]
240108dc:	2b03      	cmp	r3, #3
240108de:	d104      	bne.n	240108ea <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
240108e0:	68fb      	ldr	r3, [r7, #12]
240108e2:	681b      	ldr	r3, [r3, #0]
240108e4:	221c      	movs	r2, #28
240108e6:	605a      	str	r2, [r3, #4]
240108e8:	e011      	b.n	2401090e <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
240108ea:	7afb      	ldrb	r3, [r7, #11]
240108ec:	2b00      	cmp	r3, #0
240108ee:	d10c      	bne.n	2401090a <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
240108f0:	68fb      	ldr	r3, [r7, #12]
240108f2:	681b      	ldr	r3, [r3, #0]
240108f4:	221e      	movs	r2, #30
240108f6:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240108f8:	68fb      	ldr	r3, [r7, #12]
240108fa:	2200      	movs	r2, #0
240108fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24010900:	68fb      	ldr	r3, [r7, #12]
24010902:	2201      	movs	r2, #1
24010904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24010908:	e001      	b.n	2401090e <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
2401090a:	2301      	movs	r3, #1
2401090c:	e000      	b.n	24010910 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
2401090e:	2300      	movs	r3, #0
}
24010910:	4618      	mov	r0, r3
24010912:	3720      	adds	r7, #32
24010914:	46bd      	mov	sp, r7
24010916:	bd80      	pop	{r7, pc}

24010918 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
24010918:	b480      	push	{r7}
2401091a:	b085      	sub	sp, #20
2401091c:	af00      	add	r7, sp, #0
2401091e:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010920:	687b      	ldr	r3, [r7, #4]
24010922:	2b00      	cmp	r3, #0
24010924:	d101      	bne.n	2401092a <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
24010926:	2301      	movs	r3, #1
24010928:	e02a      	b.n	24010980 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
2401092a:	687b      	ldr	r3, [r7, #4]
2401092c:	681b      	ldr	r3, [r3, #0]
2401092e:	691b      	ldr	r3, [r3, #16]
24010930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24010934:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
24010936:	687b      	ldr	r3, [r7, #4]
24010938:	681b      	ldr	r3, [r3, #0]
2401093a:	68db      	ldr	r3, [r3, #12]
2401093c:	f003 0301 	and.w	r3, r3, #1
24010940:	2b00      	cmp	r3, #0
24010942:	d104      	bne.n	2401094e <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24010944:	687b      	ldr	r3, [r7, #4]
24010946:	2280      	movs	r2, #128	; 0x80
24010948:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401094a:	2301      	movs	r3, #1
2401094c:	e018      	b.n	24010980 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
2401094e:	687b      	ldr	r3, [r7, #4]
24010950:	681b      	ldr	r3, [r3, #0]
24010952:	681b      	ldr	r3, [r3, #0]
24010954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24010958:	2b00      	cmp	r3, #0
2401095a:	d102      	bne.n	24010962 <HAL_MDMA_GenerateSWRequest+0x4a>
2401095c:	68fb      	ldr	r3, [r7, #12]
2401095e:	2b00      	cmp	r3, #0
24010960:	d105      	bne.n	2401096e <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
24010962:	687b      	ldr	r3, [r7, #4]
24010964:	f44f 7280 	mov.w	r2, #256	; 0x100
24010968:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401096a:	2301      	movs	r3, #1
2401096c:	e008      	b.n	24010980 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
2401096e:	687b      	ldr	r3, [r7, #4]
24010970:	681b      	ldr	r3, [r3, #0]
24010972:	68da      	ldr	r2, [r3, #12]
24010974:	687b      	ldr	r3, [r7, #4]
24010976:	681b      	ldr	r3, [r3, #0]
24010978:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2401097c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
2401097e:	2300      	movs	r3, #0
  }
}
24010980:	4618      	mov	r0, r3
24010982:	3714      	adds	r7, #20
24010984:	46bd      	mov	sp, r7
24010986:	f85d 7b04 	ldr.w	r7, [sp], #4
2401098a:	4770      	bx	lr

2401098c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
2401098c:	b580      	push	{r7, lr}
2401098e:	b086      	sub	sp, #24
24010990:	af00      	add	r7, sp, #0
24010992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
24010994:	2300      	movs	r3, #0
24010996:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
24010998:	4b91      	ldr	r3, [pc, #580]	; (24010be0 <HAL_MDMA_IRQHandler+0x254>)
2401099a:	681b      	ldr	r3, [r3, #0]
2401099c:	4a91      	ldr	r2, [pc, #580]	; (24010be4 <HAL_MDMA_IRQHandler+0x258>)
2401099e:	fba2 2303 	umull	r2, r3, r2, r3
240109a2:	0a9b      	lsrs	r3, r3, #10
240109a4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
240109a6:	687b      	ldr	r3, [r7, #4]
240109a8:	681b      	ldr	r3, [r3, #0]
240109aa:	461a      	mov	r2, r3
240109ac:	4b8e      	ldr	r3, [pc, #568]	; (24010be8 <HAL_MDMA_IRQHandler+0x25c>)
240109ae:	4413      	add	r3, r2
240109b0:	099b      	lsrs	r3, r3, #6
240109b2:	f003 031f 	and.w	r3, r3, #31
240109b6:	2201      	movs	r2, #1
240109b8:	fa02 f303 	lsl.w	r3, r2, r3
240109bc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
240109be:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
240109c2:	681a      	ldr	r2, [r3, #0]
240109c4:	693b      	ldr	r3, [r7, #16]
240109c6:	4013      	ands	r3, r2
240109c8:	2b00      	cmp	r3, #0
240109ca:	f000 812d 	beq.w	24010c28 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240109ce:	687b      	ldr	r3, [r7, #4]
240109d0:	681b      	ldr	r3, [r3, #0]
240109d2:	681b      	ldr	r3, [r3, #0]
240109d4:	f003 0301 	and.w	r3, r3, #1
240109d8:	2b00      	cmp	r3, #0
240109da:	d054      	beq.n	24010a86 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
240109dc:	687b      	ldr	r3, [r7, #4]
240109de:	681b      	ldr	r3, [r3, #0]
240109e0:	68db      	ldr	r3, [r3, #12]
240109e2:	f003 0302 	and.w	r3, r3, #2
240109e6:	2b00      	cmp	r3, #0
240109e8:	d04d      	beq.n	24010a86 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
240109ea:	687b      	ldr	r3, [r7, #4]
240109ec:	681b      	ldr	r3, [r3, #0]
240109ee:	68da      	ldr	r2, [r3, #12]
240109f0:	687b      	ldr	r3, [r7, #4]
240109f2:	681b      	ldr	r3, [r3, #0]
240109f4:	f022 0202 	bic.w	r2, r2, #2
240109f8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240109fa:	687b      	ldr	r3, [r7, #4]
240109fc:	681b      	ldr	r3, [r3, #0]
240109fe:	689b      	ldr	r3, [r3, #8]
24010a00:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24010a02:	68fb      	ldr	r3, [r7, #12]
24010a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
24010a08:	2b00      	cmp	r3, #0
24010a0a:	d106      	bne.n	24010a1a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24010a0c:	687b      	ldr	r3, [r7, #4]
24010a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a10:	f043 0201 	orr.w	r2, r3, #1
24010a14:	687b      	ldr	r3, [r7, #4]
24010a16:	669a      	str	r2, [r3, #104]	; 0x68
24010a18:	e005      	b.n	24010a26 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
24010a1a:	687b      	ldr	r3, [r7, #4]
24010a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a1e:	f043 0202 	orr.w	r2, r3, #2
24010a22:	687b      	ldr	r3, [r7, #4]
24010a24:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24010a26:	68fb      	ldr	r3, [r7, #12]
24010a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
24010a2c:	2b00      	cmp	r3, #0
24010a2e:	d005      	beq.n	24010a3c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24010a30:	687b      	ldr	r3, [r7, #4]
24010a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a34:	f043 0204 	orr.w	r2, r3, #4
24010a38:	687b      	ldr	r3, [r7, #4]
24010a3a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24010a3c:	68fb      	ldr	r3, [r7, #12]
24010a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24010a42:	2b00      	cmp	r3, #0
24010a44:	d005      	beq.n	24010a52 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
24010a46:	687b      	ldr	r3, [r7, #4]
24010a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a4a:	f043 0208 	orr.w	r2, r3, #8
24010a4e:	687b      	ldr	r3, [r7, #4]
24010a50:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24010a52:	68fb      	ldr	r3, [r7, #12]
24010a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24010a58:	2b00      	cmp	r3, #0
24010a5a:	d005      	beq.n	24010a68 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24010a5c:	687b      	ldr	r3, [r7, #4]
24010a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a60:	f043 0210 	orr.w	r2, r3, #16
24010a64:	687b      	ldr	r3, [r7, #4]
24010a66:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24010a68:	68fb      	ldr	r3, [r7, #12]
24010a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24010a6e:	2b00      	cmp	r3, #0
24010a70:	d005      	beq.n	24010a7e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24010a72:	687b      	ldr	r3, [r7, #4]
24010a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010a76:	f043 0220 	orr.w	r2, r3, #32
24010a7a:	687b      	ldr	r3, [r7, #4]
24010a7c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
24010a7e:	687b      	ldr	r3, [r7, #4]
24010a80:	681b      	ldr	r3, [r3, #0]
24010a82:	2201      	movs	r2, #1
24010a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
24010a86:	687b      	ldr	r3, [r7, #4]
24010a88:	681b      	ldr	r3, [r3, #0]
24010a8a:	681b      	ldr	r3, [r3, #0]
24010a8c:	f003 0310 	and.w	r3, r3, #16
24010a90:	2b00      	cmp	r3, #0
24010a92:	d012      	beq.n	24010aba <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
24010a94:	687b      	ldr	r3, [r7, #4]
24010a96:	681b      	ldr	r3, [r3, #0]
24010a98:	68db      	ldr	r3, [r3, #12]
24010a9a:	f003 0320 	and.w	r3, r3, #32
24010a9e:	2b00      	cmp	r3, #0
24010aa0:	d00b      	beq.n	24010aba <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24010aa2:	687b      	ldr	r3, [r7, #4]
24010aa4:	681b      	ldr	r3, [r3, #0]
24010aa6:	2210      	movs	r2, #16
24010aa8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
24010aaa:	687b      	ldr	r3, [r7, #4]
24010aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24010aae:	2b00      	cmp	r3, #0
24010ab0:	d003      	beq.n	24010aba <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
24010ab2:	687b      	ldr	r3, [r7, #4]
24010ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24010ab6:	6878      	ldr	r0, [r7, #4]
24010ab8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
24010aba:	687b      	ldr	r3, [r7, #4]
24010abc:	681b      	ldr	r3, [r3, #0]
24010abe:	681b      	ldr	r3, [r3, #0]
24010ac0:	f003 0308 	and.w	r3, r3, #8
24010ac4:	2b00      	cmp	r3, #0
24010ac6:	d012      	beq.n	24010aee <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
24010ac8:	687b      	ldr	r3, [r7, #4]
24010aca:	681b      	ldr	r3, [r3, #0]
24010acc:	68db      	ldr	r3, [r3, #12]
24010ace:	f003 0310 	and.w	r3, r3, #16
24010ad2:	2b00      	cmp	r3, #0
24010ad4:	d00b      	beq.n	24010aee <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
24010ad6:	687b      	ldr	r3, [r7, #4]
24010ad8:	681b      	ldr	r3, [r3, #0]
24010ada:	2208      	movs	r2, #8
24010adc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
24010ade:	687b      	ldr	r3, [r7, #4]
24010ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24010ae2:	2b00      	cmp	r3, #0
24010ae4:	d003      	beq.n	24010aee <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
24010ae6:	687b      	ldr	r3, [r7, #4]
24010ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24010aea:	6878      	ldr	r0, [r7, #4]
24010aec:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
24010aee:	687b      	ldr	r3, [r7, #4]
24010af0:	681b      	ldr	r3, [r3, #0]
24010af2:	681b      	ldr	r3, [r3, #0]
24010af4:	f003 0304 	and.w	r3, r3, #4
24010af8:	2b00      	cmp	r3, #0
24010afa:	d012      	beq.n	24010b22 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
24010afc:	687b      	ldr	r3, [r7, #4]
24010afe:	681b      	ldr	r3, [r3, #0]
24010b00:	68db      	ldr	r3, [r3, #12]
24010b02:	f003 0308 	and.w	r3, r3, #8
24010b06:	2b00      	cmp	r3, #0
24010b08:	d00b      	beq.n	24010b22 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
24010b0a:	687b      	ldr	r3, [r7, #4]
24010b0c:	681b      	ldr	r3, [r3, #0]
24010b0e:	2204      	movs	r2, #4
24010b10:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
24010b12:	687b      	ldr	r3, [r7, #4]
24010b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24010b16:	2b00      	cmp	r3, #0
24010b18:	d003      	beq.n	24010b22 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
24010b1a:	687b      	ldr	r3, [r7, #4]
24010b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24010b1e:	6878      	ldr	r0, [r7, #4]
24010b20:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
24010b22:	687b      	ldr	r3, [r7, #4]
24010b24:	681b      	ldr	r3, [r3, #0]
24010b26:	681b      	ldr	r3, [r3, #0]
24010b28:	f003 0302 	and.w	r3, r3, #2
24010b2c:	2b00      	cmp	r3, #0
24010b2e:	d039      	beq.n	24010ba4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
24010b30:	687b      	ldr	r3, [r7, #4]
24010b32:	681b      	ldr	r3, [r3, #0]
24010b34:	68db      	ldr	r3, [r3, #12]
24010b36:	f003 0304 	and.w	r3, r3, #4
24010b3a:	2b00      	cmp	r3, #0
24010b3c:	d032      	beq.n	24010ba4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
24010b3e:	687b      	ldr	r3, [r7, #4]
24010b40:	681b      	ldr	r3, [r3, #0]
24010b42:	68da      	ldr	r2, [r3, #12]
24010b44:	687b      	ldr	r3, [r7, #4]
24010b46:	681b      	ldr	r3, [r3, #0]
24010b48:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
24010b4c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
24010b4e:	687b      	ldr	r3, [r7, #4]
24010b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010b54:	b2db      	uxtb	r3, r3
24010b56:	2b04      	cmp	r3, #4
24010b58:	d110      	bne.n	24010b7c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
24010b5a:	687b      	ldr	r3, [r7, #4]
24010b5c:	2200      	movs	r2, #0
24010b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
24010b62:	687b      	ldr	r3, [r7, #4]
24010b64:	2201      	movs	r2, #1
24010b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
24010b6a:	687b      	ldr	r3, [r7, #4]
24010b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24010b6e:	2b00      	cmp	r3, #0
24010b70:	d05c      	beq.n	24010c2c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
24010b72:	687b      	ldr	r3, [r7, #4]
24010b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24010b76:	6878      	ldr	r0, [r7, #4]
24010b78:	4798      	blx	r3
        }
        return;
24010b7a:	e057      	b.n	24010c2c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
24010b7c:	687b      	ldr	r3, [r7, #4]
24010b7e:	681b      	ldr	r3, [r3, #0]
24010b80:	2202      	movs	r2, #2
24010b82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
24010b84:	687b      	ldr	r3, [r7, #4]
24010b86:	2200      	movs	r2, #0
24010b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
24010b8c:	687b      	ldr	r3, [r7, #4]
24010b8e:	2201      	movs	r2, #1
24010b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
24010b94:	687b      	ldr	r3, [r7, #4]
24010b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010b98:	2b00      	cmp	r3, #0
24010b9a:	d003      	beq.n	24010ba4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
24010b9c:	687b      	ldr	r3, [r7, #4]
24010b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010ba0:	6878      	ldr	r0, [r7, #4]
24010ba2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
24010ba4:	687b      	ldr	r3, [r7, #4]
24010ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010ba8:	2b00      	cmp	r3, #0
24010baa:	d040      	beq.n	24010c2e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
24010bac:	687b      	ldr	r3, [r7, #4]
24010bae:	2204      	movs	r2, #4
24010bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
24010bb4:	687b      	ldr	r3, [r7, #4]
24010bb6:	681b      	ldr	r3, [r3, #0]
24010bb8:	68da      	ldr	r2, [r3, #12]
24010bba:	687b      	ldr	r3, [r7, #4]
24010bbc:	681b      	ldr	r3, [r3, #0]
24010bbe:	f022 0201 	bic.w	r2, r2, #1
24010bc2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
24010bc4:	68bb      	ldr	r3, [r7, #8]
24010bc6:	3301      	adds	r3, #1
24010bc8:	60bb      	str	r3, [r7, #8]
24010bca:	697a      	ldr	r2, [r7, #20]
24010bcc:	429a      	cmp	r2, r3
24010bce:	d30d      	bcc.n	24010bec <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
24010bd0:	687b      	ldr	r3, [r7, #4]
24010bd2:	681b      	ldr	r3, [r3, #0]
24010bd4:	68db      	ldr	r3, [r3, #12]
24010bd6:	f003 0301 	and.w	r3, r3, #1
24010bda:	2b00      	cmp	r3, #0
24010bdc:	d1f2      	bne.n	24010bc4 <HAL_MDMA_IRQHandler+0x238>
24010bde:	e006      	b.n	24010bee <HAL_MDMA_IRQHandler+0x262>
24010be0:	240004c8 	.word	0x240004c8
24010be4:	1b4e81b5 	.word	0x1b4e81b5
24010be8:	adffffc0 	.word	0xadffffc0
        break;
24010bec:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24010bee:	687b      	ldr	r3, [r7, #4]
24010bf0:	2200      	movs	r2, #0
24010bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010bf6:	687b      	ldr	r3, [r7, #4]
24010bf8:	681b      	ldr	r3, [r3, #0]
24010bfa:	68db      	ldr	r3, [r3, #12]
24010bfc:	f003 0301 	and.w	r3, r3, #1
24010c00:	2b00      	cmp	r3, #0
24010c02:	d004      	beq.n	24010c0e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24010c04:	687b      	ldr	r3, [r7, #4]
24010c06:	2203      	movs	r2, #3
24010c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24010c0c:	e003      	b.n	24010c16 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
24010c0e:	687b      	ldr	r3, [r7, #4]
24010c10:	2201      	movs	r2, #1
24010c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
24010c16:	687b      	ldr	r3, [r7, #4]
24010c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24010c1a:	2b00      	cmp	r3, #0
24010c1c:	d007      	beq.n	24010c2e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
24010c1e:	687b      	ldr	r3, [r7, #4]
24010c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24010c22:	6878      	ldr	r0, [r7, #4]
24010c24:	4798      	blx	r3
24010c26:	e002      	b.n	24010c2e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
24010c28:	bf00      	nop
24010c2a:	e000      	b.n	24010c2e <HAL_MDMA_IRQHandler+0x2a2>
        return;
24010c2c:	bf00      	nop
    }
  }
}
24010c2e:	3718      	adds	r7, #24
24010c30:	46bd      	mov	sp, r7
24010c32:	bd80      	pop	{r7, pc}

24010c34 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
24010c34:	b480      	push	{r7}
24010c36:	b083      	sub	sp, #12
24010c38:	af00      	add	r7, sp, #0
24010c3a:	6078      	str	r0, [r7, #4]
  return hmdma->State;
24010c3c:	687b      	ldr	r3, [r7, #4]
24010c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010c42:	b2db      	uxtb	r3, r3
}
24010c44:	4618      	mov	r0, r3
24010c46:	370c      	adds	r7, #12
24010c48:	46bd      	mov	sp, r7
24010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c4e:	4770      	bx	lr

24010c50 <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
24010c50:	b480      	push	{r7}
24010c52:	b083      	sub	sp, #12
24010c54:	af00      	add	r7, sp, #0
24010c56:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
24010c58:	687b      	ldr	r3, [r7, #4]
24010c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
24010c5c:	4618      	mov	r0, r3
24010c5e:	370c      	adds	r7, #12
24010c60:	46bd      	mov	sp, r7
24010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c66:	4770      	bx	lr

24010c68 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24010c68:	b480      	push	{r7}
24010c6a:	b087      	sub	sp, #28
24010c6c:	af00      	add	r7, sp, #0
24010c6e:	60f8      	str	r0, [r7, #12]
24010c70:	60b9      	str	r1, [r7, #8]
24010c72:	607a      	str	r2, [r7, #4]
24010c74:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
24010c76:	68fb      	ldr	r3, [r7, #12]
24010c78:	681b      	ldr	r3, [r3, #0]
24010c7a:	695a      	ldr	r2, [r3, #20]
24010c7c:	4b31      	ldr	r3, [pc, #196]	; (24010d44 <MDMA_SetConfig+0xdc>)
24010c7e:	4013      	ands	r3, r2
24010c80:	683a      	ldr	r2, [r7, #0]
24010c82:	f3c2 0110 	ubfx	r1, r2, #0, #17
24010c86:	68fa      	ldr	r2, [r7, #12]
24010c88:	6812      	ldr	r2, [r2, #0]
24010c8a:	430b      	orrs	r3, r1
24010c8c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
24010c8e:	68fb      	ldr	r3, [r7, #12]
24010c90:	681b      	ldr	r3, [r3, #0]
24010c92:	695b      	ldr	r3, [r3, #20]
24010c94:	f3c3 0113 	ubfx	r1, r3, #0, #20
24010c98:	6a3b      	ldr	r3, [r7, #32]
24010c9a:	3b01      	subs	r3, #1
24010c9c:	051a      	lsls	r2, r3, #20
24010c9e:	68fb      	ldr	r3, [r7, #12]
24010ca0:	681b      	ldr	r3, [r3, #0]
24010ca2:	430a      	orrs	r2, r1
24010ca4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
24010ca6:	68fb      	ldr	r3, [r7, #12]
24010ca8:	681b      	ldr	r3, [r3, #0]
24010caa:	221f      	movs	r2, #31
24010cac:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
24010cae:	68fb      	ldr	r3, [r7, #12]
24010cb0:	681b      	ldr	r3, [r3, #0]
24010cb2:	687a      	ldr	r2, [r7, #4]
24010cb4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
24010cb6:	68fb      	ldr	r3, [r7, #12]
24010cb8:	681b      	ldr	r3, [r3, #0]
24010cba:	68ba      	ldr	r2, [r7, #8]
24010cbc:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
24010cbe:	68bb      	ldr	r3, [r7, #8]
24010cc0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24010cc4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010cc6:	697b      	ldr	r3, [r7, #20]
24010cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24010ccc:	d002      	beq.n	24010cd4 <MDMA_SetConfig+0x6c>
24010cce:	697b      	ldr	r3, [r7, #20]
24010cd0:	2b00      	cmp	r3, #0
24010cd2:	d108      	bne.n	24010ce6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
24010cd4:	68fb      	ldr	r3, [r7, #12]
24010cd6:	681b      	ldr	r3, [r3, #0]
24010cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010cda:	68fb      	ldr	r3, [r7, #12]
24010cdc:	681b      	ldr	r3, [r3, #0]
24010cde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24010ce2:	629a      	str	r2, [r3, #40]	; 0x28
24010ce4:	e007      	b.n	24010cf6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
24010ce6:	68fb      	ldr	r3, [r7, #12]
24010ce8:	681b      	ldr	r3, [r3, #0]
24010cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010cec:	68fb      	ldr	r3, [r7, #12]
24010cee:	681b      	ldr	r3, [r3, #0]
24010cf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24010cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
24010cf6:	687b      	ldr	r3, [r7, #4]
24010cf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24010cfc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010cfe:	697b      	ldr	r3, [r7, #20]
24010d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24010d04:	d002      	beq.n	24010d0c <MDMA_SetConfig+0xa4>
24010d06:	697b      	ldr	r3, [r7, #20]
24010d08:	2b00      	cmp	r3, #0
24010d0a:	d108      	bne.n	24010d1e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
24010d0c:	68fb      	ldr	r3, [r7, #12]
24010d0e:	681b      	ldr	r3, [r3, #0]
24010d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010d12:	68fb      	ldr	r3, [r7, #12]
24010d14:	681b      	ldr	r3, [r3, #0]
24010d16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24010d1a:	629a      	str	r2, [r3, #40]	; 0x28
24010d1c:	e007      	b.n	24010d2e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
24010d1e:	68fb      	ldr	r3, [r7, #12]
24010d20:	681b      	ldr	r3, [r3, #0]
24010d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010d24:	68fb      	ldr	r3, [r7, #12]
24010d26:	681b      	ldr	r3, [r3, #0]
24010d28:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24010d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
24010d2e:	68fb      	ldr	r3, [r7, #12]
24010d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24010d32:	68fb      	ldr	r3, [r7, #12]
24010d34:	681b      	ldr	r3, [r3, #0]
24010d36:	625a      	str	r2, [r3, #36]	; 0x24
}
24010d38:	bf00      	nop
24010d3a:	371c      	adds	r7, #28
24010d3c:	46bd      	mov	sp, r7
24010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d42:	4770      	bx	lr
24010d44:	fffe0000 	.word	0xfffe0000

24010d48 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
24010d48:	b480      	push	{r7}
24010d4a:	b085      	sub	sp, #20
24010d4c:	af00      	add	r7, sp, #0
24010d4e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
24010d50:	687b      	ldr	r3, [r7, #4]
24010d52:	68d9      	ldr	r1, [r3, #12]
24010d54:	687b      	ldr	r3, [r7, #4]
24010d56:	691a      	ldr	r2, [r3, #16]
24010d58:	687b      	ldr	r3, [r7, #4]
24010d5a:	681b      	ldr	r3, [r3, #0]
24010d5c:	430a      	orrs	r2, r1
24010d5e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010d60:	687b      	ldr	r3, [r7, #4]
24010d62:	695a      	ldr	r2, [r3, #20]
24010d64:	687b      	ldr	r3, [r7, #4]
24010d66:	699b      	ldr	r3, [r3, #24]
24010d68:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24010d6a:	687b      	ldr	r3, [r7, #4]
24010d6c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010d6e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24010d70:	687b      	ldr	r3, [r7, #4]
24010d72:	6a1b      	ldr	r3, [r3, #32]
24010d74:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24010d76:	687b      	ldr	r3, [r7, #4]
24010d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24010d7a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24010d7c:	687b      	ldr	r3, [r7, #4]
24010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010d80:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
24010d82:	687b      	ldr	r3, [r7, #4]
24010d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24010d86:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24010d88:	687b      	ldr	r3, [r7, #4]
24010d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24010d8c:	3b01      	subs	r3, #1
24010d8e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
24010d90:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24010d94:	687b      	ldr	r3, [r7, #4]
24010d96:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010d98:	687b      	ldr	r3, [r7, #4]
24010d9a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24010d9c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010d9e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
24010da0:	687b      	ldr	r3, [r7, #4]
24010da2:	685b      	ldr	r3, [r3, #4]
24010da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010da8:	d107      	bne.n	24010dba <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
24010daa:	687b      	ldr	r3, [r7, #4]
24010dac:	681b      	ldr	r3, [r3, #0]
24010dae:	691a      	ldr	r2, [r3, #16]
24010db0:	687b      	ldr	r3, [r7, #4]
24010db2:	681b      	ldr	r3, [r3, #0]
24010db4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
24010db8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
24010dba:	687b      	ldr	r3, [r7, #4]
24010dbc:	681b      	ldr	r3, [r3, #0]
24010dbe:	2200      	movs	r2, #0
24010dc0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
24010dc2:	687b      	ldr	r3, [r7, #4]
24010dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010dc6:	2b00      	cmp	r3, #0
24010dc8:	da11      	bge.n	24010dee <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
24010dca:	687b      	ldr	r3, [r7, #4]
24010dcc:	681b      	ldr	r3, [r3, #0]
24010dce:	695a      	ldr	r2, [r3, #20]
24010dd0:	687b      	ldr	r3, [r7, #4]
24010dd2:	681b      	ldr	r3, [r3, #0]
24010dd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24010dd8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
24010dda:	687b      	ldr	r3, [r7, #4]
24010ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010dde:	425b      	negs	r3, r3
24010de0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
24010de2:	687b      	ldr	r3, [r7, #4]
24010de4:	681b      	ldr	r3, [r3, #0]
24010de6:	68fa      	ldr	r2, [r7, #12]
24010de8:	b292      	uxth	r2, r2
24010dea:	621a      	str	r2, [r3, #32]
24010dec:	e006      	b.n	24010dfc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
24010dee:	687b      	ldr	r3, [r7, #4]
24010df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010df2:	461a      	mov	r2, r3
24010df4:	687b      	ldr	r3, [r7, #4]
24010df6:	681b      	ldr	r3, [r3, #0]
24010df8:	b292      	uxth	r2, r2
24010dfa:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
24010dfc:	687b      	ldr	r3, [r7, #4]
24010dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010e00:	2b00      	cmp	r3, #0
24010e02:	da15      	bge.n	24010e30 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
24010e04:	687b      	ldr	r3, [r7, #4]
24010e06:	681b      	ldr	r3, [r3, #0]
24010e08:	695a      	ldr	r2, [r3, #20]
24010e0a:	687b      	ldr	r3, [r7, #4]
24010e0c:	681b      	ldr	r3, [r3, #0]
24010e0e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
24010e12:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
24010e14:	687b      	ldr	r3, [r7, #4]
24010e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010e18:	425b      	negs	r3, r3
24010e1a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010e1c:	687b      	ldr	r3, [r7, #4]
24010e1e:	681b      	ldr	r3, [r3, #0]
24010e20:	6a19      	ldr	r1, [r3, #32]
24010e22:	68fb      	ldr	r3, [r7, #12]
24010e24:	041a      	lsls	r2, r3, #16
24010e26:	687b      	ldr	r3, [r7, #4]
24010e28:	681b      	ldr	r3, [r3, #0]
24010e2a:	430a      	orrs	r2, r1
24010e2c:	621a      	str	r2, [r3, #32]
24010e2e:	e009      	b.n	24010e44 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010e30:	687b      	ldr	r3, [r7, #4]
24010e32:	681b      	ldr	r3, [r3, #0]
24010e34:	6a19      	ldr	r1, [r3, #32]
24010e36:	687b      	ldr	r3, [r7, #4]
24010e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010e3a:	041a      	lsls	r2, r3, #16
24010e3c:	687b      	ldr	r3, [r7, #4]
24010e3e:	681b      	ldr	r3, [r3, #0]
24010e40:	430a      	orrs	r2, r1
24010e42:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
24010e44:	687b      	ldr	r3, [r7, #4]
24010e46:	685b      	ldr	r3, [r3, #4]
24010e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010e4c:	d006      	beq.n	24010e5c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
24010e4e:	687b      	ldr	r3, [r7, #4]
24010e50:	685a      	ldr	r2, [r3, #4]
24010e52:	687b      	ldr	r3, [r7, #4]
24010e54:	681b      	ldr	r3, [r3, #0]
24010e56:	b2d2      	uxtb	r2, r2
24010e58:	629a      	str	r2, [r3, #40]	; 0x28
24010e5a:	e003      	b.n	24010e64 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
24010e5c:	687b      	ldr	r3, [r7, #4]
24010e5e:	681b      	ldr	r3, [r3, #0]
24010e60:	2200      	movs	r2, #0
24010e62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
24010e64:	687b      	ldr	r3, [r7, #4]
24010e66:	681b      	ldr	r3, [r3, #0]
24010e68:	2200      	movs	r2, #0
24010e6a:	625a      	str	r2, [r3, #36]	; 0x24
}
24010e6c:	bf00      	nop
24010e6e:	3714      	adds	r7, #20
24010e70:	46bd      	mov	sp, r7
24010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
24010e76:	4770      	bx	lr

24010e78 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
24010e78:	b480      	push	{r7}
24010e7a:	af00      	add	r7, sp, #0
}
24010e7c:	bf00      	nop
24010e7e:	46bd      	mov	sp, r7
24010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
24010e84:	4770      	bx	lr
	...

24010e88 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24010e88:	b480      	push	{r7}
24010e8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24010e8c:	4b05      	ldr	r3, [pc, #20]	; (24010ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
24010e8e:	681b      	ldr	r3, [r3, #0]
24010e90:	4a04      	ldr	r2, [pc, #16]	; (24010ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
24010e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24010e96:	6013      	str	r3, [r2, #0]
}
24010e98:	bf00      	nop
24010e9a:	46bd      	mov	sp, r7
24010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ea0:	4770      	bx	lr
24010ea2:	bf00      	nop
24010ea4:	58024800 	.word	0x58024800

24010ea8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
24010ea8:	b480      	push	{r7}
24010eaa:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
24010eac:	4b05      	ldr	r3, [pc, #20]	; (24010ec4 <HAL_PWR_DisableBkUpAccess+0x1c>)
24010eae:	681b      	ldr	r3, [r3, #0]
24010eb0:	4a04      	ldr	r2, [pc, #16]	; (24010ec4 <HAL_PWR_DisableBkUpAccess+0x1c>)
24010eb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24010eb6:	6013      	str	r3, [r2, #0]
}
24010eb8:	bf00      	nop
24010eba:	46bd      	mov	sp, r7
24010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ec0:	4770      	bx	lr
24010ec2:	bf00      	nop
24010ec4:	58024800 	.word	0x58024800

24010ec8 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
24010ec8:	b480      	push	{r7}
24010eca:	b083      	sub	sp, #12
24010ecc:	af00      	add	r7, sp, #0
24010ece:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
24010ed0:	687b      	ldr	r3, [r7, #4]
24010ed2:	2b00      	cmp	r3, #0
24010ed4:	d069      	beq.n	24010faa <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
24010ed6:	4b38      	ldr	r3, [pc, #224]	; (24010fb8 <HAL_PWR_ConfigPVD+0xf0>)
24010ed8:	681b      	ldr	r3, [r3, #0]
24010eda:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
24010ede:	687b      	ldr	r3, [r7, #4]
24010ee0:	681b      	ldr	r3, [r3, #0]
24010ee2:	4935      	ldr	r1, [pc, #212]	; (24010fb8 <HAL_PWR_ConfigPVD+0xf0>)
24010ee4:	4313      	orrs	r3, r2
24010ee6:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
24010ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24010ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24010ef8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
24010efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24010f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24010f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
24010f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f14:	681b      	ldr	r3, [r3, #0]
24010f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24010f1e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
24010f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f24:	685b      	ldr	r3, [r3, #4]
24010f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24010f2e:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
24010f30:	687b      	ldr	r3, [r7, #4]
24010f32:	685b      	ldr	r3, [r3, #4]
24010f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24010f38:	2b00      	cmp	r3, #0
24010f3a:	d009      	beq.n	24010f50 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
24010f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24010f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010f4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
24010f50:	687b      	ldr	r3, [r7, #4]
24010f52:	685b      	ldr	r3, [r3, #4]
24010f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24010f58:	2b00      	cmp	r3, #0
24010f5a:	d009      	beq.n	24010f70 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
24010f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24010f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010f6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
24010f70:	687b      	ldr	r3, [r7, #4]
24010f72:	685b      	ldr	r3, [r3, #4]
24010f74:	f003 0301 	and.w	r3, r3, #1
24010f78:	2b00      	cmp	r3, #0
24010f7a:	d007      	beq.n	24010f8c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
24010f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f80:	681b      	ldr	r3, [r3, #0]
24010f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010f8a:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
24010f8c:	687b      	ldr	r3, [r7, #4]
24010f8e:	685b      	ldr	r3, [r3, #4]
24010f90:	f003 0302 	and.w	r3, r3, #2
24010f94:	2b00      	cmp	r3, #0
24010f96:	d009      	beq.n	24010fac <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
24010f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010f9c:	685b      	ldr	r3, [r3, #4]
24010f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010fa6:	6053      	str	r3, [r2, #4]
24010fa8:	e000      	b.n	24010fac <HAL_PWR_ConfigPVD+0xe4>
    return;
24010faa:	bf00      	nop
  }
}
24010fac:	370c      	adds	r7, #12
24010fae:	46bd      	mov	sp, r7
24010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fb4:	4770      	bx	lr
24010fb6:	bf00      	nop
24010fb8:	58024800 	.word	0x58024800

24010fbc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
24010fbc:	b480      	push	{r7}
24010fbe:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
24010fc0:	4b05      	ldr	r3, [pc, #20]	; (24010fd8 <HAL_PWR_EnablePVD+0x1c>)
24010fc2:	681b      	ldr	r3, [r3, #0]
24010fc4:	4a04      	ldr	r2, [pc, #16]	; (24010fd8 <HAL_PWR_EnablePVD+0x1c>)
24010fc6:	f043 0310 	orr.w	r3, r3, #16
24010fca:	6013      	str	r3, [r2, #0]
}
24010fcc:	bf00      	nop
24010fce:	46bd      	mov	sp, r7
24010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fd4:	4770      	bx	lr
24010fd6:	bf00      	nop
24010fd8:	58024800 	.word	0x58024800

24010fdc <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
24010fdc:	b480      	push	{r7}
24010fde:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
24010fe0:	4b05      	ldr	r3, [pc, #20]	; (24010ff8 <HAL_PWR_DisablePVD+0x1c>)
24010fe2:	681b      	ldr	r3, [r3, #0]
24010fe4:	4a04      	ldr	r2, [pc, #16]	; (24010ff8 <HAL_PWR_DisablePVD+0x1c>)
24010fe6:	f023 0310 	bic.w	r3, r3, #16
24010fea:	6013      	str	r3, [r2, #0]
}
24010fec:	bf00      	nop
24010fee:	46bd      	mov	sp, r7
24010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ff4:	4770      	bx	lr
24010ff6:	bf00      	nop
24010ff8:	58024800 	.word	0x58024800

24010ffc <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
24010ffc:	b480      	push	{r7}
24010ffe:	b083      	sub	sp, #12
24011000:	af00      	add	r7, sp, #0
24011002:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
24011004:	4b06      	ldr	r3, [pc, #24]	; (24011020 <HAL_PWR_EnableWakeUpPin+0x24>)
24011006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24011008:	4b06      	ldr	r3, [pc, #24]	; (24011024 <HAL_PWR_EnableWakeUpPin+0x28>)
2401100a:	4013      	ands	r3, r2
2401100c:	4904      	ldr	r1, [pc, #16]	; (24011020 <HAL_PWR_EnableWakeUpPin+0x24>)
2401100e:	687a      	ldr	r2, [r7, #4]
24011010:	4313      	orrs	r3, r2
24011012:	628b      	str	r3, [r1, #40]	; 0x28
}
24011014:	bf00      	nop
24011016:	370c      	adds	r7, #12
24011018:	46bd      	mov	sp, r7
2401101a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401101e:	4770      	bx	lr
24011020:	58024800 	.word	0x58024800
24011024:	f000c0c0 	.word	0xf000c0c0

24011028 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
24011028:	b480      	push	{r7}
2401102a:	b083      	sub	sp, #12
2401102c:	af00      	add	r7, sp, #0
2401102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
24011030:	4b07      	ldr	r3, [pc, #28]	; (24011050 <HAL_PWR_DisableWakeUpPin+0x28>)
24011032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24011034:	687b      	ldr	r3, [r7, #4]
24011036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401103a:	43db      	mvns	r3, r3
2401103c:	4904      	ldr	r1, [pc, #16]	; (24011050 <HAL_PWR_DisableWakeUpPin+0x28>)
2401103e:	4013      	ands	r3, r2
24011040:	628b      	str	r3, [r1, #40]	; 0x28
}
24011042:	bf00      	nop
24011044:	370c      	adds	r7, #12
24011046:	46bd      	mov	sp, r7
24011048:	f85d 7b04 	ldr.w	r7, [sp], #4
2401104c:	4770      	bx	lr
2401104e:	bf00      	nop
24011050:	58024800 	.word	0x58024800

24011054 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
24011054:	b480      	push	{r7}
24011056:	b083      	sub	sp, #12
24011058:	af00      	add	r7, sp, #0
2401105a:	6078      	str	r0, [r7, #4]
2401105c:	460b      	mov	r3, r1
2401105e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24011060:	4b08      	ldr	r3, [pc, #32]	; (24011084 <HAL_PWR_EnterSLEEPMode+0x30>)
24011062:	691b      	ldr	r3, [r3, #16]
24011064:	4a07      	ldr	r2, [pc, #28]	; (24011084 <HAL_PWR_EnterSLEEPMode+0x30>)
24011066:	f023 0304 	bic.w	r3, r3, #4
2401106a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
2401106c:	78fb      	ldrb	r3, [r7, #3]
2401106e:	2b01      	cmp	r3, #1
24011070:	d101      	bne.n	24011076 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24011072:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
24011074:	e000      	b.n	24011078 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
24011076:	bf20      	wfe
}
24011078:	bf00      	nop
2401107a:	370c      	adds	r7, #12
2401107c:	46bd      	mov	sp, r7
2401107e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011082:	4770      	bx	lr
24011084:	e000ed00 	.word	0xe000ed00

24011088 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
24011088:	b480      	push	{r7}
2401108a:	b083      	sub	sp, #12
2401108c:	af00      	add	r7, sp, #0
2401108e:	6078      	str	r0, [r7, #4]
24011090:	460b      	mov	r3, r1
24011092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24011094:	4b18      	ldr	r3, [pc, #96]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
24011096:	681b      	ldr	r3, [r3, #0]
24011098:	f023 0201 	bic.w	r2, r3, #1
2401109c:	4916      	ldr	r1, [pc, #88]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
2401109e:	687b      	ldr	r3, [r7, #4]
240110a0:	4313      	orrs	r3, r2
240110a2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
240110a4:	4b14      	ldr	r3, [pc, #80]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
240110a6:	691b      	ldr	r3, [r3, #16]
240110a8:	4a13      	ldr	r2, [pc, #76]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
240110aa:	f023 0305 	bic.w	r3, r3, #5
240110ae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
240110b0:	4b11      	ldr	r3, [pc, #68]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
240110b2:	691b      	ldr	r3, [r3, #16]
240110b4:	4a10      	ldr	r2, [pc, #64]	; (240110f8 <HAL_PWR_EnterSTOPMode+0x70>)
240110b6:	f023 0302 	bic.w	r3, r3, #2
240110ba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240110bc:	4b0f      	ldr	r3, [pc, #60]	; (240110fc <HAL_PWR_EnterSTOPMode+0x74>)
240110be:	691b      	ldr	r3, [r3, #16]
240110c0:	4a0e      	ldr	r2, [pc, #56]	; (240110fc <HAL_PWR_EnterSTOPMode+0x74>)
240110c2:	f043 0304 	orr.w	r3, r3, #4
240110c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
240110c8:	f3bf 8f4f 	dsb	sy
}
240110cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240110ce:	f3bf 8f6f 	isb	sy
}
240110d2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
240110d4:	78fb      	ldrb	r3, [r7, #3]
240110d6:	2b01      	cmp	r3, #1
240110d8:	d101      	bne.n	240110de <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
240110da:	bf30      	wfi
240110dc:	e000      	b.n	240110e0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
240110de:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240110e0:	4b06      	ldr	r3, [pc, #24]	; (240110fc <HAL_PWR_EnterSTOPMode+0x74>)
240110e2:	691b      	ldr	r3, [r3, #16]
240110e4:	4a05      	ldr	r2, [pc, #20]	; (240110fc <HAL_PWR_EnterSTOPMode+0x74>)
240110e6:	f023 0304 	bic.w	r3, r3, #4
240110ea:	6113      	str	r3, [r2, #16]
}
240110ec:	bf00      	nop
240110ee:	370c      	adds	r7, #12
240110f0:	46bd      	mov	sp, r7
240110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240110f6:	4770      	bx	lr
240110f8:	58024800 	.word	0x58024800
240110fc:	e000ed00 	.word	0xe000ed00

24011100 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
24011100:	b480      	push	{r7}
24011102:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24011104:	4b0e      	ldr	r3, [pc, #56]	; (24011140 <HAL_PWR_EnterSTANDBYMode+0x40>)
24011106:	691b      	ldr	r3, [r3, #16]
24011108:	4a0d      	ldr	r2, [pc, #52]	; (24011140 <HAL_PWR_EnterSTANDBYMode+0x40>)
2401110a:	f043 0305 	orr.w	r3, r3, #5
2401110e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24011110:	4b0b      	ldr	r3, [pc, #44]	; (24011140 <HAL_PWR_EnterSTANDBYMode+0x40>)
24011112:	691b      	ldr	r3, [r3, #16]
24011114:	4a0a      	ldr	r2, [pc, #40]	; (24011140 <HAL_PWR_EnterSTANDBYMode+0x40>)
24011116:	f043 0302 	orr.w	r3, r3, #2
2401111a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401111c:	4b09      	ldr	r3, [pc, #36]	; (24011144 <HAL_PWR_EnterSTANDBYMode+0x44>)
2401111e:	691b      	ldr	r3, [r3, #16]
24011120:	4a08      	ldr	r2, [pc, #32]	; (24011144 <HAL_PWR_EnterSTANDBYMode+0x44>)
24011122:	f043 0304 	orr.w	r3, r3, #4
24011126:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24011128:	f3bf 8f4f 	dsb	sy
}
2401112c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401112e:	f3bf 8f6f 	isb	sy
}
24011132:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
24011134:	bf30      	wfi
}
24011136:	bf00      	nop
24011138:	46bd      	mov	sp, r7
2401113a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401113e:	4770      	bx	lr
24011140:	58024800 	.word	0x58024800
24011144:	e000ed00 	.word	0xe000ed00

24011148 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
24011148:	b480      	push	{r7}
2401114a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
2401114c:	4b05      	ldr	r3, [pc, #20]	; (24011164 <HAL_PWR_EnableSleepOnExit+0x1c>)
2401114e:	691b      	ldr	r3, [r3, #16]
24011150:	4a04      	ldr	r2, [pc, #16]	; (24011164 <HAL_PWR_EnableSleepOnExit+0x1c>)
24011152:	f043 0302 	orr.w	r3, r3, #2
24011156:	6113      	str	r3, [r2, #16]
}
24011158:	bf00      	nop
2401115a:	46bd      	mov	sp, r7
2401115c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011160:	4770      	bx	lr
24011162:	bf00      	nop
24011164:	e000ed00 	.word	0xe000ed00

24011168 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
24011168:	b480      	push	{r7}
2401116a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
2401116c:	4b05      	ldr	r3, [pc, #20]	; (24011184 <HAL_PWR_DisableSleepOnExit+0x1c>)
2401116e:	691b      	ldr	r3, [r3, #16]
24011170:	4a04      	ldr	r2, [pc, #16]	; (24011184 <HAL_PWR_DisableSleepOnExit+0x1c>)
24011172:	f023 0302 	bic.w	r3, r3, #2
24011176:	6113      	str	r3, [r2, #16]
}
24011178:	bf00      	nop
2401117a:	46bd      	mov	sp, r7
2401117c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011180:	4770      	bx	lr
24011182:	bf00      	nop
24011184:	e000ed00 	.word	0xe000ed00

24011188 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
24011188:	b480      	push	{r7}
2401118a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
2401118c:	4b05      	ldr	r3, [pc, #20]	; (240111a4 <HAL_PWR_EnableSEVOnPend+0x1c>)
2401118e:	691b      	ldr	r3, [r3, #16]
24011190:	4a04      	ldr	r2, [pc, #16]	; (240111a4 <HAL_PWR_EnableSEVOnPend+0x1c>)
24011192:	f043 0310 	orr.w	r3, r3, #16
24011196:	6113      	str	r3, [r2, #16]
}
24011198:	bf00      	nop
2401119a:	46bd      	mov	sp, r7
2401119c:	f85d 7b04 	ldr.w	r7, [sp], #4
240111a0:	4770      	bx	lr
240111a2:	bf00      	nop
240111a4:	e000ed00 	.word	0xe000ed00

240111a8 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
240111a8:	b480      	push	{r7}
240111aa:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
240111ac:	4b05      	ldr	r3, [pc, #20]	; (240111c4 <HAL_PWR_DisableSEVOnPend+0x1c>)
240111ae:	691b      	ldr	r3, [r3, #16]
240111b0:	4a04      	ldr	r2, [pc, #16]	; (240111c4 <HAL_PWR_DisableSEVOnPend+0x1c>)
240111b2:	f023 0310 	bic.w	r3, r3, #16
240111b6:	6113      	str	r3, [r2, #16]
}
240111b8:	bf00      	nop
240111ba:	46bd      	mov	sp, r7
240111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240111c0:	4770      	bx	lr
240111c2:	bf00      	nop
240111c4:	e000ed00 	.word	0xe000ed00

240111c8 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
240111c8:	b580      	push	{r7, lr}
240111ca:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
240111cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240111d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240111d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240111d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240111dc:	d10b      	bne.n	240111f6 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
240111de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240111e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240111e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240111ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240111ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
240111f2:	f000 f802 	bl	240111fa <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
240111f6:	bf00      	nop
240111f8:	bd80      	pop	{r7, pc}

240111fa <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
240111fa:	b480      	push	{r7}
240111fc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
240111fe:	bf00      	nop
24011200:	46bd      	mov	sp, r7
24011202:	f85d 7b04 	ldr.w	r7, [sp], #4
24011206:	4770      	bx	lr

24011208 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24011208:	b580      	push	{r7, lr}
2401120a:	b084      	sub	sp, #16
2401120c:	af00      	add	r7, sp, #0
2401120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24011210:	4b19      	ldr	r3, [pc, #100]	; (24011278 <HAL_PWREx_ConfigSupply+0x70>)
24011212:	68db      	ldr	r3, [r3, #12]
24011214:	f003 0304 	and.w	r3, r3, #4
24011218:	2b04      	cmp	r3, #4
2401121a:	d00a      	beq.n	24011232 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2401121c:	4b16      	ldr	r3, [pc, #88]	; (24011278 <HAL_PWREx_ConfigSupply+0x70>)
2401121e:	68db      	ldr	r3, [r3, #12]
24011220:	f003 0307 	and.w	r3, r3, #7
24011224:	687a      	ldr	r2, [r7, #4]
24011226:	429a      	cmp	r2, r3
24011228:	d001      	beq.n	2401122e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2401122a:	2301      	movs	r3, #1
2401122c:	e01f      	b.n	2401126e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
2401122e:	2300      	movs	r3, #0
24011230:	e01d      	b.n	2401126e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24011232:	4b11      	ldr	r3, [pc, #68]	; (24011278 <HAL_PWREx_ConfigSupply+0x70>)
24011234:	68db      	ldr	r3, [r3, #12]
24011236:	f023 0207 	bic.w	r2, r3, #7
2401123a:	490f      	ldr	r1, [pc, #60]	; (24011278 <HAL_PWREx_ConfigSupply+0x70>)
2401123c:	687b      	ldr	r3, [r7, #4]
2401123e:	4313      	orrs	r3, r2
24011240:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24011242:	f7f0 ffef 	bl	24002224 <HAL_GetTick>
24011246:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24011248:	e009      	b.n	2401125e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2401124a:	f7f0 ffeb 	bl	24002224 <HAL_GetTick>
2401124e:	4602      	mov	r2, r0
24011250:	68fb      	ldr	r3, [r7, #12]
24011252:	1ad3      	subs	r3, r2, r3
24011254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011258:	d901      	bls.n	2401125e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2401125a:	2301      	movs	r3, #1
2401125c:	e007      	b.n	2401126e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401125e:	4b06      	ldr	r3, [pc, #24]	; (24011278 <HAL_PWREx_ConfigSupply+0x70>)
24011260:	685b      	ldr	r3, [r3, #4]
24011262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24011266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401126a:	d1ee      	bne.n	2401124a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
2401126c:	2300      	movs	r3, #0
}
2401126e:	4618      	mov	r0, r3
24011270:	3710      	adds	r7, #16
24011272:	46bd      	mov	sp, r7
24011274:	bd80      	pop	{r7, pc}
24011276:	bf00      	nop
24011278:	58024800 	.word	0x58024800

2401127c <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
2401127c:	b480      	push	{r7}
2401127e:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
24011280:	4b04      	ldr	r3, [pc, #16]	; (24011294 <HAL_PWREx_GetSupplyConfig+0x18>)
24011282:	68db      	ldr	r3, [r3, #12]
24011284:	f003 0307 	and.w	r3, r3, #7
}
24011288:	4618      	mov	r0, r3
2401128a:	46bd      	mov	sp, r7
2401128c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011290:	4770      	bx	lr
24011292:	bf00      	nop
24011294:	58024800 	.word	0x58024800

24011298 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
24011298:	b580      	push	{r7, lr}
2401129a:	b084      	sub	sp, #16
2401129c:	af00      	add	r7, sp, #0
2401129e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
240112a0:	4b3f      	ldr	r3, [pc, #252]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
240112a2:	685b      	ldr	r3, [r3, #4]
240112a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240112a8:	687a      	ldr	r2, [r7, #4]
240112aa:	429a      	cmp	r2, r3
240112ac:	d101      	bne.n	240112b2 <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
240112ae:	2300      	movs	r3, #0
240112b0:	e072      	b.n	24011398 <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
240112b2:	687b      	ldr	r3, [r7, #4]
240112b4:	2b00      	cmp	r3, #0
240112b6:	d129      	bne.n	2401130c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
240112b8:	4b39      	ldr	r3, [pc, #228]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
240112ba:	68db      	ldr	r3, [r3, #12]
240112bc:	f003 0302 	and.w	r3, r3, #2
240112c0:	2b02      	cmp	r3, #2
240112c2:	d121      	bne.n	24011308 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
240112c4:	4b36      	ldr	r3, [pc, #216]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
240112c6:	699b      	ldr	r3, [r3, #24]
240112c8:	4a35      	ldr	r2, [pc, #212]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
240112ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240112ce:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
240112d0:	f7f0 ffa8 	bl	24002224 <HAL_GetTick>
240112d4:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240112d6:	e009      	b.n	240112ec <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240112d8:	f7f0 ffa4 	bl	24002224 <HAL_GetTick>
240112dc:	4602      	mov	r2, r0
240112de:	68fb      	ldr	r3, [r7, #12]
240112e0:	1ad3      	subs	r3, r2, r3
240112e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240112e6:	d901      	bls.n	240112ec <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
240112e8:	2301      	movs	r3, #1
240112ea:	e055      	b.n	24011398 <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240112ec:	4b2c      	ldr	r3, [pc, #176]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
240112ee:	685b      	ldr	r3, [r3, #4]
240112f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240112f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240112f8:	d1ee      	bne.n	240112d8 <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
240112fa:	4b2a      	ldr	r3, [pc, #168]	; (240113a4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
240112fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240112fe:	4a29      	ldr	r2, [pc, #164]	; (240113a4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24011300:	f043 0301 	orr.w	r3, r3, #1
24011304:	62d3      	str	r3, [r2, #44]	; 0x2c
24011306:	e031      	b.n	2401136c <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
24011308:	2301      	movs	r3, #1
2401130a:	e045      	b.n	24011398 <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
2401130c:	4b24      	ldr	r3, [pc, #144]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401130e:	685b      	ldr	r3, [r3, #4]
24011310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24011314:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
24011318:	d120      	bne.n	2401135c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
2401131a:	4b22      	ldr	r3, [pc, #136]	; (240113a4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
2401131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401131e:	f003 0301 	and.w	r3, r3, #1
24011322:	2b00      	cmp	r3, #0
24011324:	d01a      	beq.n	2401135c <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24011326:	4b1f      	ldr	r3, [pc, #124]	; (240113a4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401132a:	4a1e      	ldr	r2, [pc, #120]	; (240113a4 <HAL_PWREx_ControlVoltageScaling+0x10c>)
2401132c:	f023 0301 	bic.w	r3, r3, #1
24011330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
24011332:	f7f0 ff77 	bl	24002224 <HAL_GetTick>
24011336:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24011338:	e009      	b.n	2401134e <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2401133a:	f7f0 ff73 	bl	24002224 <HAL_GetTick>
2401133e:	4602      	mov	r2, r0
24011340:	68fb      	ldr	r3, [r7, #12]
24011342:	1ad3      	subs	r3, r2, r3
24011344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011348:	d901      	bls.n	2401134e <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
2401134a:	2301      	movs	r3, #1
2401134c:	e024      	b.n	24011398 <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401134e:	4b14      	ldr	r3, [pc, #80]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
24011350:	685b      	ldr	r3, [r3, #4]
24011352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24011356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401135a:	d1ee      	bne.n	2401133a <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
2401135c:	4b10      	ldr	r3, [pc, #64]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401135e:	699b      	ldr	r3, [r3, #24]
24011360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24011364:	490e      	ldr	r1, [pc, #56]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
24011366:	687b      	ldr	r3, [r7, #4]
24011368:	4313      	orrs	r3, r2
2401136a:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
2401136c:	f7f0 ff5a 	bl	24002224 <HAL_GetTick>
24011370:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24011372:	e009      	b.n	24011388 <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24011374:	f7f0 ff56 	bl	24002224 <HAL_GetTick>
24011378:	4602      	mov	r2, r0
2401137a:	68fb      	ldr	r3, [r7, #12]
2401137c:	1ad3      	subs	r3, r2, r3
2401137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011382:	d901      	bls.n	24011388 <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
24011384:	2301      	movs	r3, #1
24011386:	e007      	b.n	24011398 <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24011388:	4b05      	ldr	r3, [pc, #20]	; (240113a0 <HAL_PWREx_ControlVoltageScaling+0x108>)
2401138a:	685b      	ldr	r3, [r3, #4]
2401138c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24011390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24011394:	d1ee      	bne.n	24011374 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
24011396:	2300      	movs	r3, #0
}
24011398:	4618      	mov	r0, r3
2401139a:	3710      	adds	r7, #16
2401139c:	46bd      	mov	sp, r7
2401139e:	bd80      	pop	{r7, pc}
240113a0:	58024800 	.word	0x58024800
240113a4:	58000400 	.word	0x58000400

240113a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
240113a8:	b480      	push	{r7}
240113aa:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
240113ac:	4b04      	ldr	r3, [pc, #16]	; (240113c0 <HAL_PWREx_GetVoltageRange+0x18>)
240113ae:	685b      	ldr	r3, [r3, #4]
240113b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
240113b4:	4618      	mov	r0, r3
240113b6:	46bd      	mov	sp, r7
240113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240113bc:	4770      	bx	lr
240113be:	bf00      	nop
240113c0:	58024800 	.word	0x58024800

240113c4 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
240113c4:	b480      	push	{r7}
240113c6:	b083      	sub	sp, #12
240113c8:	af00      	add	r7, sp, #0
240113ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
240113cc:	4b07      	ldr	r3, [pc, #28]	; (240113ec <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
240113ce:	681b      	ldr	r3, [r3, #0]
240113d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
240113d4:	4905      	ldr	r1, [pc, #20]	; (240113ec <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
240113d6:	687b      	ldr	r3, [r7, #4]
240113d8:	4313      	orrs	r3, r2
240113da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
240113dc:	2300      	movs	r3, #0
}
240113de:	4618      	mov	r0, r3
240113e0:	370c      	adds	r7, #12
240113e2:	46bd      	mov	sp, r7
240113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240113e8:	4770      	bx	lr
240113ea:	bf00      	nop
240113ec:	58024800 	.word	0x58024800

240113f0 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
240113f0:	b480      	push	{r7}
240113f2:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
240113f4:	4b04      	ldr	r3, [pc, #16]	; (24011408 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
240113f6:	681b      	ldr	r3, [r3, #0]
240113f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
240113fc:	4618      	mov	r0, r3
240113fe:	46bd      	mov	sp, r7
24011400:	f85d 7b04 	ldr.w	r7, [sp], #4
24011404:	4770      	bx	lr
24011406:	bf00      	nop
24011408:	58024800 	.word	0x58024800

2401140c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
2401140c:	b480      	push	{r7}
2401140e:	b085      	sub	sp, #20
24011410:	af00      	add	r7, sp, #0
24011412:	60f8      	str	r0, [r7, #12]
24011414:	460b      	mov	r3, r1
24011416:	607a      	str	r2, [r7, #4]
24011418:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
2401141a:	4b20      	ldr	r3, [pc, #128]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
2401141c:	681b      	ldr	r3, [r3, #0]
2401141e:	f023 0201 	bic.w	r2, r3, #1
24011422:	491e      	ldr	r1, [pc, #120]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011424:	68fb      	ldr	r3, [r7, #12]
24011426:	4313      	orrs	r3, r2
24011428:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
2401142a:	687b      	ldr	r3, [r7, #4]
2401142c:	2b00      	cmp	r3, #0
2401142e:	d11e      	bne.n	2401146e <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
24011430:	4b1a      	ldr	r3, [pc, #104]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011432:	691b      	ldr	r3, [r3, #16]
24011434:	4a19      	ldr	r2, [pc, #100]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011436:	f023 0301 	bic.w	r3, r3, #1
2401143a:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401143c:	4b18      	ldr	r3, [pc, #96]	; (240114a0 <HAL_PWREx_EnterSTOPMode+0x94>)
2401143e:	691b      	ldr	r3, [r3, #16]
24011440:	4a17      	ldr	r2, [pc, #92]	; (240114a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24011442:	f043 0304 	orr.w	r3, r3, #4
24011446:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24011448:	f3bf 8f4f 	dsb	sy
}
2401144c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401144e:	f3bf 8f6f 	isb	sy
}
24011452:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24011454:	7afb      	ldrb	r3, [r7, #11]
24011456:	2b01      	cmp	r3, #1
24011458:	d101      	bne.n	2401145e <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
2401145a:	bf30      	wfi
2401145c:	e000      	b.n	24011460 <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
2401145e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24011460:	4b0f      	ldr	r3, [pc, #60]	; (240114a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24011462:	691b      	ldr	r3, [r3, #16]
24011464:	4a0e      	ldr	r2, [pc, #56]	; (240114a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24011466:	f023 0304 	bic.w	r3, r3, #4
2401146a:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
2401146c:	e00f      	b.n	2401148e <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
2401146e:	687b      	ldr	r3, [r7, #4]
24011470:	2b01      	cmp	r3, #1
24011472:	d106      	bne.n	24011482 <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24011474:	4b09      	ldr	r3, [pc, #36]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011476:	691b      	ldr	r3, [r3, #16]
24011478:	4a08      	ldr	r2, [pc, #32]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
2401147a:	f023 0302 	bic.w	r3, r3, #2
2401147e:	6113      	str	r3, [r2, #16]
}
24011480:	e005      	b.n	2401148e <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24011482:	4b06      	ldr	r3, [pc, #24]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011484:	691b      	ldr	r3, [r3, #16]
24011486:	4a05      	ldr	r2, [pc, #20]	; (2401149c <HAL_PWREx_EnterSTOPMode+0x90>)
24011488:	f023 0304 	bic.w	r3, r3, #4
2401148c:	6113      	str	r3, [r2, #16]
}
2401148e:	bf00      	nop
24011490:	3714      	adds	r7, #20
24011492:	46bd      	mov	sp, r7
24011494:	f85d 7b04 	ldr.w	r7, [sp], #4
24011498:	4770      	bx	lr
2401149a:	bf00      	nop
2401149c:	58024800 	.word	0x58024800
240114a0:	e000ed00 	.word	0xe000ed00

240114a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
240114a4:	b480      	push	{r7}
240114a6:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
240114a8:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
240114aa:	bf00      	nop
240114ac:	46bd      	mov	sp, r7
240114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240114b2:	4770      	bx	lr

240114b4 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
240114b4:	b480      	push	{r7}
240114b6:	b083      	sub	sp, #12
240114b8:	af00      	add	r7, sp, #0
240114ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
240114bc:	687b      	ldr	r3, [r7, #4]
240114be:	2b00      	cmp	r3, #0
240114c0:	d10d      	bne.n	240114de <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
240114c2:	4b12      	ldr	r3, [pc, #72]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114c4:	691b      	ldr	r3, [r3, #16]
240114c6:	4a11      	ldr	r2, [pc, #68]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114c8:	f043 0301 	orr.w	r3, r3, #1
240114cc:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240114ce:	4b10      	ldr	r3, [pc, #64]	; (24011510 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240114d0:	691b      	ldr	r3, [r3, #16]
240114d2:	4a0f      	ldr	r2, [pc, #60]	; (24011510 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240114d4:	f043 0304 	orr.w	r3, r3, #4
240114d8:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
240114da:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
240114dc:	e00f      	b.n	240114fe <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
240114de:	687b      	ldr	r3, [r7, #4]
240114e0:	2b01      	cmp	r3, #1
240114e2:	d106      	bne.n	240114f2 <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
240114e4:	4b09      	ldr	r3, [pc, #36]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114e6:	691b      	ldr	r3, [r3, #16]
240114e8:	4a08      	ldr	r2, [pc, #32]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114ea:	f043 0302 	orr.w	r3, r3, #2
240114ee:	6113      	str	r3, [r2, #16]
}
240114f0:	e005      	b.n	240114fe <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
240114f2:	4b06      	ldr	r3, [pc, #24]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114f4:	691b      	ldr	r3, [r3, #16]
240114f6:	4a05      	ldr	r2, [pc, #20]	; (2401150c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240114f8:	f043 0304 	orr.w	r3, r3, #4
240114fc:	6113      	str	r3, [r2, #16]
}
240114fe:	bf00      	nop
24011500:	370c      	adds	r7, #12
24011502:	46bd      	mov	sp, r7
24011504:	f85d 7b04 	ldr.w	r7, [sp], #4
24011508:	4770      	bx	lr
2401150a:	bf00      	nop
2401150c:	58024800 	.word	0x58024800
24011510:	e000ed00 	.word	0xe000ed00

24011514 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
24011514:	b480      	push	{r7}
24011516:	b083      	sub	sp, #12
24011518:	af00      	add	r7, sp, #0
2401151a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
2401151c:	4b06      	ldr	r3, [pc, #24]	; (24011538 <HAL_PWREx_ConfigD3Domain+0x24>)
2401151e:	691b      	ldr	r3, [r3, #16]
24011520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
24011524:	4904      	ldr	r1, [pc, #16]	; (24011538 <HAL_PWREx_ConfigD3Domain+0x24>)
24011526:	687b      	ldr	r3, [r7, #4]
24011528:	4313      	orrs	r3, r2
2401152a:	610b      	str	r3, [r1, #16]
}
2401152c:	bf00      	nop
2401152e:	370c      	adds	r7, #12
24011530:	46bd      	mov	sp, r7
24011532:	f85d 7b04 	ldr.w	r7, [sp], #4
24011536:	4770      	bx	lr
24011538:	58024800 	.word	0x58024800

2401153c <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
2401153c:	b480      	push	{r7}
2401153e:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
24011540:	4b05      	ldr	r3, [pc, #20]	; (24011558 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24011542:	681b      	ldr	r3, [r3, #0]
24011544:	4a04      	ldr	r2, [pc, #16]	; (24011558 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24011546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2401154a:	6013      	str	r3, [r2, #0]
}
2401154c:	bf00      	nop
2401154e:	46bd      	mov	sp, r7
24011550:	f85d 7b04 	ldr.w	r7, [sp], #4
24011554:	4770      	bx	lr
24011556:	bf00      	nop
24011558:	58024800 	.word	0x58024800

2401155c <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
2401155c:	b480      	push	{r7}
2401155e:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
24011560:	4b05      	ldr	r3, [pc, #20]	; (24011578 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24011562:	681b      	ldr	r3, [r3, #0]
24011564:	4a04      	ldr	r2, [pc, #16]	; (24011578 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24011566:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2401156a:	6013      	str	r3, [r2, #0]
}
2401156c:	bf00      	nop
2401156e:	46bd      	mov	sp, r7
24011570:	f85d 7b04 	ldr.w	r7, [sp], #4
24011574:	4770      	bx	lr
24011576:	bf00      	nop
24011578:	58024800 	.word	0x58024800

2401157c <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
2401157c:	b480      	push	{r7}
2401157e:	b093      	sub	sp, #76	; 0x4c
24011580:	af00      	add	r7, sp, #0
24011582:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24011584:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24011588:	647b      	str	r3, [r7, #68]	; 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
2401158a:	687b      	ldr	r3, [r7, #4]
2401158c:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
2401158e:	687b      	ldr	r3, [r7, #4]
24011590:	6859      	ldr	r1, [r3, #4]
24011592:	687b      	ldr	r3, [r7, #4]
24011594:	681b      	ldr	r3, [r3, #0]
24011596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24011598:	693b      	ldr	r3, [r7, #16]
2401159a:	fa93 f3a3 	rbit	r3, r3
2401159e:	60fb      	str	r3, [r7, #12]
  return result;
240115a0:	68fb      	ldr	r3, [r7, #12]
240115a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
240115a4:	697b      	ldr	r3, [r7, #20]
240115a6:	2b00      	cmp	r3, #0
240115a8:	d101      	bne.n	240115ae <HAL_PWREx_EnableWakeUpPin+0x32>
    return 32U;
240115aa:	2320      	movs	r3, #32
240115ac:	e003      	b.n	240115b6 <HAL_PWREx_EnableWakeUpPin+0x3a>
  return __builtin_clz(value);
240115ae:	697b      	ldr	r3, [r7, #20]
240115b0:	fab3 f383 	clz	r3, r3
240115b4:	b2db      	uxtb	r3, r3
240115b6:	3308      	adds	r3, #8
240115b8:	f003 031f 	and.w	r3, r3, #31
240115bc:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240115c0:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
240115c2:	687b      	ldr	r3, [r7, #4]
240115c4:	6899      	ldr	r1, [r3, #8]
240115c6:	687b      	ldr	r3, [r7, #4]
240115c8:	681b      	ldr	r3, [r3, #0]
240115ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240115cc:	69fb      	ldr	r3, [r7, #28]
240115ce:	fa93 f3a3 	rbit	r3, r3
240115d2:	61bb      	str	r3, [r7, #24]
  return result;
240115d4:	69bb      	ldr	r3, [r7, #24]
240115d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
240115d8:	6a3b      	ldr	r3, [r7, #32]
240115da:	2b00      	cmp	r3, #0
240115dc:	d101      	bne.n	240115e2 <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
240115de:	2320      	movs	r3, #32
240115e0:	e003      	b.n	240115ea <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
240115e2:	6a3b      	ldr	r3, [r7, #32]
240115e4:	fab3 f383 	clz	r3, r3
240115e8:	b2db      	uxtb	r3, r3
240115ea:	3308      	adds	r3, #8
240115ec:	005b      	lsls	r3, r3, #1
240115ee:	f003 031e 	and.w	r3, r3, #30
240115f2:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240115f6:	4313      	orrs	r3, r2
240115f8:	643b      	str	r3, [r7, #64]	; 0x40

  regMask   = sPinParams->WakeUpPin | \
240115fa:	687b      	ldr	r3, [r7, #4]
240115fc:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
240115fe:	687b      	ldr	r3, [r7, #4]
24011600:	681b      	ldr	r3, [r3, #0]
24011602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
24011606:	fa93 f3a3 	rbit	r3, r3
2401160a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
2401160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
24011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24011612:	2b00      	cmp	r3, #0
24011614:	d101      	bne.n	2401161a <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
24011616:	2320      	movs	r3, #32
24011618:	e003      	b.n	24011622 <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
2401161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2401161c:	fab3 f383 	clz	r3, r3
24011620:	b2db      	uxtb	r3, r3
24011622:	f003 031f 	and.w	r3, r3, #31
24011626:	f44f 7180 	mov.w	r1, #256	; 0x100
2401162a:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
2401162e:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
24011630:	687b      	ldr	r3, [r7, #4]
24011632:	681b      	ldr	r3, [r3, #0]
24011634:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24011636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24011638:	fa93 f3a3 	rbit	r3, r3
2401163c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
2401163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24011640:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24011642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24011644:	2b00      	cmp	r3, #0
24011646:	d101      	bne.n	2401164c <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
24011648:	2320      	movs	r3, #32
2401164a:	e003      	b.n	24011654 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
2401164c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401164e:	fab3 f383 	clz	r3, r3
24011652:	b2db      	uxtb	r3, r3
24011654:	005b      	lsls	r3, r3, #1
24011656:	f003 031e 	and.w	r3, r3, #30
2401165a:	6c79      	ldr	r1, [r7, #68]	; 0x44
2401165c:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24011660:	4313      	orrs	r3, r2
24011662:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24011664:	4b0e      	ldr	r3, [pc, #56]	; (240116a0 <HAL_PWREx_EnableWakeUpPin+0x124>)
24011666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24011668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2401166a:	43db      	mvns	r3, r3
2401166c:	401a      	ands	r2, r3
2401166e:	490c      	ldr	r1, [pc, #48]	; (240116a0 <HAL_PWREx_EnableWakeUpPin+0x124>)
24011670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24011672:	4313      	orrs	r3, r2
24011674:	628b      	str	r3, [r1, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
24011676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2401167e:	f023 52fc 	bic.w	r2, r3, #528482304	; 0x1f800000
24011682:	687b      	ldr	r3, [r7, #4]
24011684:	681b      	ldr	r3, [r3, #0]
24011686:	05db      	lsls	r3, r3, #23
24011688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2401168c:	4313      	orrs	r3, r2
2401168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
#endif /* !DUAL_CORE */
}
24011692:	bf00      	nop
24011694:	374c      	adds	r7, #76	; 0x4c
24011696:	46bd      	mov	sp, r7
24011698:	f85d 7b04 	ldr.w	r7, [sp], #4
2401169c:	4770      	bx	lr
2401169e:	bf00      	nop
240116a0:	58024800 	.word	0x58024800

240116a4 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
240116a4:	b480      	push	{r7}
240116a6:	b083      	sub	sp, #12
240116a8:	af00      	add	r7, sp, #0
240116aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
240116ac:	4b06      	ldr	r3, [pc, #24]	; (240116c8 <HAL_PWREx_DisableWakeUpPin+0x24>)
240116ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240116b0:	687b      	ldr	r3, [r7, #4]
240116b2:	43db      	mvns	r3, r3
240116b4:	4904      	ldr	r1, [pc, #16]	; (240116c8 <HAL_PWREx_DisableWakeUpPin+0x24>)
240116b6:	4013      	ands	r3, r2
240116b8:	628b      	str	r3, [r1, #40]	; 0x28
}
240116ba:	bf00      	nop
240116bc:	370c      	adds	r7, #12
240116be:	46bd      	mov	sp, r7
240116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240116c4:	4770      	bx	lr
240116c6:	bf00      	nop
240116c8:	58024800 	.word	0x58024800

240116cc <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
240116cc:	b480      	push	{r7}
240116ce:	b083      	sub	sp, #12
240116d0:	af00      	add	r7, sp, #0
240116d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
240116d4:	4b04      	ldr	r3, [pc, #16]	; (240116e8 <HAL_PWREx_GetWakeupFlag+0x1c>)
240116d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240116d8:	687b      	ldr	r3, [r7, #4]
240116da:	4013      	ands	r3, r2
}
240116dc:	4618      	mov	r0, r3
240116de:	370c      	adds	r7, #12
240116e0:	46bd      	mov	sp, r7
240116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240116e6:	4770      	bx	lr
240116e8:	58024800 	.word	0x58024800

240116ec <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
240116ec:	b480      	push	{r7}
240116ee:	b083      	sub	sp, #12
240116f0:	af00      	add	r7, sp, #0
240116f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
240116f4:	4b0a      	ldr	r3, [pc, #40]	; (24011720 <HAL_PWREx_ClearWakeupFlag+0x34>)
240116f6:	6a1a      	ldr	r2, [r3, #32]
240116f8:	4909      	ldr	r1, [pc, #36]	; (24011720 <HAL_PWREx_ClearWakeupFlag+0x34>)
240116fa:	687b      	ldr	r3, [r7, #4]
240116fc:	4313      	orrs	r3, r2
240116fe:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
24011700:	4b07      	ldr	r3, [pc, #28]	; (24011720 <HAL_PWREx_ClearWakeupFlag+0x34>)
24011702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24011704:	687b      	ldr	r3, [r7, #4]
24011706:	4013      	ands	r3, r2
24011708:	2b00      	cmp	r3, #0
2401170a:	d001      	beq.n	24011710 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
2401170c:	2301      	movs	r3, #1
2401170e:	e000      	b.n	24011712 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
24011710:	2300      	movs	r3, #0
}
24011712:	4618      	mov	r0, r3
24011714:	370c      	adds	r7, #12
24011716:	46bd      	mov	sp, r7
24011718:	f85d 7b04 	ldr.w	r7, [sp], #4
2401171c:	4770      	bx	lr
2401171e:	bf00      	nop
24011720:	58024800 	.word	0x58024800

24011724 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
24011724:	b580      	push	{r7, lr}
24011726:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
24011728:	4b2a      	ldr	r3, [pc, #168]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2401172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401172c:	f003 0301 	and.w	r3, r3, #1
24011730:	2b00      	cmp	r3, #0
24011732:	d008      	beq.n	24011746 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
24011734:	4b27      	ldr	r3, [pc, #156]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011736:	6a1b      	ldr	r3, [r3, #32]
24011738:	4a26      	ldr	r2, [pc, #152]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2401173a:	f043 0301 	orr.w	r3, r3, #1
2401173e:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
24011740:	f000 f84a 	bl	240117d8 <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
24011744:	e043      	b.n	240117ce <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
24011746:	4b23      	ldr	r3, [pc, #140]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401174a:	f003 0302 	and.w	r3, r3, #2
2401174e:	2b00      	cmp	r3, #0
24011750:	d008      	beq.n	24011764 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24011752:	4b20      	ldr	r3, [pc, #128]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011754:	6a1b      	ldr	r3, [r3, #32]
24011756:	4a1f      	ldr	r2, [pc, #124]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011758:	f043 0302 	orr.w	r3, r3, #2
2401175c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
2401175e:	f000 f842 	bl	240117e6 <HAL_PWREx_WKUP2_Callback>
}
24011762:	e034      	b.n	240117ce <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
24011764:	4b1b      	ldr	r3, [pc, #108]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011768:	f003 0304 	and.w	r3, r3, #4
2401176c:	2b00      	cmp	r3, #0
2401176e:	d008      	beq.n	24011782 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
24011770:	4b18      	ldr	r3, [pc, #96]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011772:	6a1b      	ldr	r3, [r3, #32]
24011774:	4a17      	ldr	r2, [pc, #92]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011776:	f043 0304 	orr.w	r3, r3, #4
2401177a:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
2401177c:	f000 f83a 	bl	240117f4 <HAL_PWREx_WKUP3_Callback>
}
24011780:	e025      	b.n	240117ce <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24011782:	4b14      	ldr	r3, [pc, #80]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011786:	f003 0308 	and.w	r3, r3, #8
2401178a:	2b00      	cmp	r3, #0
2401178c:	d008      	beq.n	240117a0 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
2401178e:	4b11      	ldr	r3, [pc, #68]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011790:	6a1b      	ldr	r3, [r3, #32]
24011792:	4a10      	ldr	r2, [pc, #64]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011794:	f043 0308 	orr.w	r3, r3, #8
24011798:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
2401179a:	f000 f832 	bl	24011802 <HAL_PWREx_WKUP4_Callback>
}
2401179e:	e016      	b.n	240117ce <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
240117a0:	4b0c      	ldr	r3, [pc, #48]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240117a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240117a4:	f003 0310 	and.w	r3, r3, #16
240117a8:	2b00      	cmp	r3, #0
240117aa:	d008      	beq.n	240117be <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
240117ac:	4b09      	ldr	r3, [pc, #36]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240117ae:	6a1b      	ldr	r3, [r3, #32]
240117b0:	4a08      	ldr	r2, [pc, #32]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240117b2:	f043 0310 	orr.w	r3, r3, #16
240117b6:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
240117b8:	f000 f82a 	bl	24011810 <HAL_PWREx_WKUP5_Callback>
}
240117bc:	e007      	b.n	240117ce <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
240117be:	4b05      	ldr	r3, [pc, #20]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240117c0:	6a1b      	ldr	r3, [r3, #32]
240117c2:	4a04      	ldr	r2, [pc, #16]	; (240117d4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240117c4:	f043 0320 	orr.w	r3, r3, #32
240117c8:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
240117ca:	f000 f828 	bl	2401181e <HAL_PWREx_WKUP6_Callback>
}
240117ce:	bf00      	nop
240117d0:	bd80      	pop	{r7, pc}
240117d2:	bf00      	nop
240117d4:	58024800 	.word	0x58024800

240117d8 <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
240117d8:	b480      	push	{r7}
240117da:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
240117dc:	bf00      	nop
240117de:	46bd      	mov	sp, r7
240117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240117e4:	4770      	bx	lr

240117e6 <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
240117e6:	b480      	push	{r7}
240117e8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
240117ea:	bf00      	nop
240117ec:	46bd      	mov	sp, r7
240117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240117f2:	4770      	bx	lr

240117f4 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
240117f4:	b480      	push	{r7}
240117f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
240117f8:	bf00      	nop
240117fa:	46bd      	mov	sp, r7
240117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24011800:	4770      	bx	lr

24011802 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
24011802:	b480      	push	{r7}
24011804:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
24011806:	bf00      	nop
24011808:	46bd      	mov	sp, r7
2401180a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401180e:	4770      	bx	lr

24011810 <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
24011810:	b480      	push	{r7}
24011812:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
24011814:	bf00      	nop
24011816:	46bd      	mov	sp, r7
24011818:	f85d 7b04 	ldr.w	r7, [sp], #4
2401181c:	4770      	bx	lr

2401181e <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
2401181e:	b480      	push	{r7}
24011820:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
24011822:	bf00      	nop
24011824:	46bd      	mov	sp, r7
24011826:	f85d 7b04 	ldr.w	r7, [sp], #4
2401182a:	4770      	bx	lr

2401182c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
2401182c:	b580      	push	{r7, lr}
2401182e:	b082      	sub	sp, #8
24011830:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
24011832:	4b10      	ldr	r3, [pc, #64]	; (24011874 <HAL_PWREx_EnableBkUpReg+0x48>)
24011834:	689b      	ldr	r3, [r3, #8]
24011836:	4a0f      	ldr	r2, [pc, #60]	; (24011874 <HAL_PWREx_EnableBkUpReg+0x48>)
24011838:	f043 0301 	orr.w	r3, r3, #1
2401183c:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
2401183e:	f7f0 fcf1 	bl	24002224 <HAL_GetTick>
24011842:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
24011844:	e009      	b.n	2401185a <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24011846:	f7f0 fced 	bl	24002224 <HAL_GetTick>
2401184a:	4602      	mov	r2, r0
2401184c:	687b      	ldr	r3, [r7, #4]
2401184e:	1ad3      	subs	r3, r2, r3
24011850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011854:	d901      	bls.n	2401185a <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24011856:	2301      	movs	r3, #1
24011858:	e007      	b.n	2401186a <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
2401185a:	4b06      	ldr	r3, [pc, #24]	; (24011874 <HAL_PWREx_EnableBkUpReg+0x48>)
2401185c:	689b      	ldr	r3, [r3, #8]
2401185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011866:	d1ee      	bne.n	24011846 <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24011868:	2300      	movs	r3, #0
}
2401186a:	4618      	mov	r0, r3
2401186c:	3708      	adds	r7, #8
2401186e:	46bd      	mov	sp, r7
24011870:	bd80      	pop	{r7, pc}
24011872:	bf00      	nop
24011874:	58024800 	.word	0x58024800

24011878 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
24011878:	b580      	push	{r7, lr}
2401187a:	b082      	sub	sp, #8
2401187c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
2401187e:	4b10      	ldr	r3, [pc, #64]	; (240118c0 <HAL_PWREx_DisableBkUpReg+0x48>)
24011880:	689b      	ldr	r3, [r3, #8]
24011882:	4a0f      	ldr	r2, [pc, #60]	; (240118c0 <HAL_PWREx_DisableBkUpReg+0x48>)
24011884:	f023 0301 	bic.w	r3, r3, #1
24011888:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
2401188a:	f7f0 fccb 	bl	24002224 <HAL_GetTick>
2401188e:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24011890:	e009      	b.n	240118a6 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24011892:	f7f0 fcc7 	bl	24002224 <HAL_GetTick>
24011896:	4602      	mov	r2, r0
24011898:	687b      	ldr	r3, [r7, #4]
2401189a:	1ad3      	subs	r3, r2, r3
2401189c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240118a0:	d901      	bls.n	240118a6 <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
240118a2:	2301      	movs	r3, #1
240118a4:	e007      	b.n	240118b6 <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
240118a6:	4b06      	ldr	r3, [pc, #24]	; (240118c0 <HAL_PWREx_DisableBkUpReg+0x48>)
240118a8:	689b      	ldr	r3, [r3, #8]
240118aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240118ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240118b2:	d0ee      	beq.n	24011892 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
240118b4:	2300      	movs	r3, #0
}
240118b6:	4618      	mov	r0, r3
240118b8:	3708      	adds	r7, #8
240118ba:	46bd      	mov	sp, r7
240118bc:	bd80      	pop	{r7, pc}
240118be:	bf00      	nop
240118c0:	58024800 	.word	0x58024800

240118c4 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
240118c4:	b580      	push	{r7, lr}
240118c6:	b082      	sub	sp, #8
240118c8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
240118ca:	4b10      	ldr	r3, [pc, #64]	; (2401190c <HAL_PWREx_EnableUSBReg+0x48>)
240118cc:	68db      	ldr	r3, [r3, #12]
240118ce:	4a0f      	ldr	r2, [pc, #60]	; (2401190c <HAL_PWREx_EnableUSBReg+0x48>)
240118d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240118d4:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
240118d6:	f7f0 fca5 	bl	24002224 <HAL_GetTick>
240118da:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
240118dc:	e009      	b.n	240118f2 <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240118de:	f7f0 fca1 	bl	24002224 <HAL_GetTick>
240118e2:	4602      	mov	r2, r0
240118e4:	687b      	ldr	r3, [r7, #4]
240118e6:	1ad3      	subs	r3, r2, r3
240118e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240118ec:	d901      	bls.n	240118f2 <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
240118ee:	2301      	movs	r3, #1
240118f0:	e007      	b.n	24011902 <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
240118f2:	4b06      	ldr	r3, [pc, #24]	; (2401190c <HAL_PWREx_EnableUSBReg+0x48>)
240118f4:	68db      	ldr	r3, [r3, #12]
240118f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
240118fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240118fe:	d1ee      	bne.n	240118de <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24011900:	2300      	movs	r3, #0
}
24011902:	4618      	mov	r0, r3
24011904:	3708      	adds	r7, #8
24011906:	46bd      	mov	sp, r7
24011908:	bd80      	pop	{r7, pc}
2401190a:	bf00      	nop
2401190c:	58024800 	.word	0x58024800

24011910 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
24011910:	b580      	push	{r7, lr}
24011912:	b082      	sub	sp, #8
24011914:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24011916:	4b10      	ldr	r3, [pc, #64]	; (24011958 <HAL_PWREx_DisableUSBReg+0x48>)
24011918:	68db      	ldr	r3, [r3, #12]
2401191a:	4a0f      	ldr	r2, [pc, #60]	; (24011958 <HAL_PWREx_DisableUSBReg+0x48>)
2401191c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
24011920:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24011922:	f7f0 fc7f 	bl	24002224 <HAL_GetTick>
24011926:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24011928:	e009      	b.n	2401193e <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
2401192a:	f7f0 fc7b 	bl	24002224 <HAL_GetTick>
2401192e:	4602      	mov	r2, r0
24011930:	687b      	ldr	r3, [r7, #4]
24011932:	1ad3      	subs	r3, r2, r3
24011934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011938:	d901      	bls.n	2401193e <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
2401193a:	2301      	movs	r3, #1
2401193c:	e007      	b.n	2401194e <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
2401193e:	4b06      	ldr	r3, [pc, #24]	; (24011958 <HAL_PWREx_DisableUSBReg+0x48>)
24011940:	68db      	ldr	r3, [r3, #12]
24011942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24011946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2401194a:	d0ee      	beq.n	2401192a <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
2401194c:	2300      	movs	r3, #0
}
2401194e:	4618      	mov	r0, r3
24011950:	3708      	adds	r7, #8
24011952:	46bd      	mov	sp, r7
24011954:	bd80      	pop	{r7, pc}
24011956:	bf00      	nop
24011958:	58024800 	.word	0x58024800

2401195c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
2401195c:	b480      	push	{r7}
2401195e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24011960:	4b05      	ldr	r3, [pc, #20]	; (24011978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24011962:	68db      	ldr	r3, [r3, #12]
24011964:	4a04      	ldr	r2, [pc, #16]	; (24011978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24011966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2401196a:	60d3      	str	r3, [r2, #12]
}
2401196c:	bf00      	nop
2401196e:	46bd      	mov	sp, r7
24011970:	f85d 7b04 	ldr.w	r7, [sp], #4
24011974:	4770      	bx	lr
24011976:	bf00      	nop
24011978:	58024800 	.word	0x58024800

2401197c <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
2401197c:	b480      	push	{r7}
2401197e:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24011980:	4b05      	ldr	r3, [pc, #20]	; (24011998 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24011982:	68db      	ldr	r3, [r3, #12]
24011984:	4a04      	ldr	r2, [pc, #16]	; (24011998 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24011986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2401198a:	60d3      	str	r3, [r2, #12]
}
2401198c:	bf00      	nop
2401198e:	46bd      	mov	sp, r7
24011990:	f85d 7b04 	ldr.w	r7, [sp], #4
24011994:	4770      	bx	lr
24011996:	bf00      	nop
24011998:	58024800 	.word	0x58024800

2401199c <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
2401199c:	b480      	push	{r7}
2401199e:	b083      	sub	sp, #12
240119a0:	af00      	add	r7, sp, #0
240119a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
240119a4:	4b09      	ldr	r3, [pc, #36]	; (240119cc <HAL_PWREx_EnableBatteryCharging+0x30>)
240119a6:	68db      	ldr	r3, [r3, #12]
240119a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
240119ac:	4907      	ldr	r1, [pc, #28]	; (240119cc <HAL_PWREx_EnableBatteryCharging+0x30>)
240119ae:	687b      	ldr	r3, [r7, #4]
240119b0:	4313      	orrs	r3, r2
240119b2:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
240119b4:	4b05      	ldr	r3, [pc, #20]	; (240119cc <HAL_PWREx_EnableBatteryCharging+0x30>)
240119b6:	68db      	ldr	r3, [r3, #12]
240119b8:	4a04      	ldr	r2, [pc, #16]	; (240119cc <HAL_PWREx_EnableBatteryCharging+0x30>)
240119ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240119be:	60d3      	str	r3, [r2, #12]
}
240119c0:	bf00      	nop
240119c2:	370c      	adds	r7, #12
240119c4:	46bd      	mov	sp, r7
240119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240119ca:	4770      	bx	lr
240119cc:	58024800 	.word	0x58024800

240119d0 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
240119d0:	b480      	push	{r7}
240119d2:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
240119d4:	4b05      	ldr	r3, [pc, #20]	; (240119ec <HAL_PWREx_DisableBatteryCharging+0x1c>)
240119d6:	68db      	ldr	r3, [r3, #12]
240119d8:	4a04      	ldr	r2, [pc, #16]	; (240119ec <HAL_PWREx_DisableBatteryCharging+0x1c>)
240119da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240119de:	60d3      	str	r3, [r2, #12]
}
240119e0:	bf00      	nop
240119e2:	46bd      	mov	sp, r7
240119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240119e8:	4770      	bx	lr
240119ea:	bf00      	nop
240119ec:	58024800 	.word	0x58024800

240119f0 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
240119f0:	b480      	push	{r7}
240119f2:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
240119f4:	4b05      	ldr	r3, [pc, #20]	; (24011a0c <HAL_PWREx_EnableMonitoring+0x1c>)
240119f6:	689b      	ldr	r3, [r3, #8]
240119f8:	4a04      	ldr	r2, [pc, #16]	; (24011a0c <HAL_PWREx_EnableMonitoring+0x1c>)
240119fa:	f043 0310 	orr.w	r3, r3, #16
240119fe:	6093      	str	r3, [r2, #8]
}
24011a00:	bf00      	nop
24011a02:	46bd      	mov	sp, r7
24011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
24011a08:	4770      	bx	lr
24011a0a:	bf00      	nop
24011a0c:	58024800 	.word	0x58024800

24011a10 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
24011a10:	b480      	push	{r7}
24011a12:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
24011a14:	4b05      	ldr	r3, [pc, #20]	; (24011a2c <HAL_PWREx_DisableMonitoring+0x1c>)
24011a16:	689b      	ldr	r3, [r3, #8]
24011a18:	4a04      	ldr	r2, [pc, #16]	; (24011a2c <HAL_PWREx_DisableMonitoring+0x1c>)
24011a1a:	f023 0310 	bic.w	r3, r3, #16
24011a1e:	6093      	str	r3, [r2, #8]
}
24011a20:	bf00      	nop
24011a22:	46bd      	mov	sp, r7
24011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
24011a28:	4770      	bx	lr
24011a2a:	bf00      	nop
24011a2c:	58024800 	.word	0x58024800

24011a30 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
24011a30:	b480      	push	{r7}
24011a32:	b083      	sub	sp, #12
24011a34:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
24011a36:	4b0f      	ldr	r3, [pc, #60]	; (24011a74 <HAL_PWREx_GetTemperatureLevel+0x44>)
24011a38:	689b      	ldr	r3, [r3, #8]
24011a3a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
24011a3e:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
24011a40:	683b      	ldr	r3, [r7, #0]
24011a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24011a46:	d103      	bne.n	24011a50 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
24011a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24011a4c:	607b      	str	r3, [r7, #4]
24011a4e:	e009      	b.n	24011a64 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
24011a50:	683b      	ldr	r3, [r7, #0]
24011a52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24011a56:	d103      	bne.n	24011a60 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
24011a58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
24011a5c:	607b      	str	r3, [r7, #4]
24011a5e:	e001      	b.n	24011a64 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
24011a60:	2300      	movs	r3, #0
24011a62:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
24011a64:	687b      	ldr	r3, [r7, #4]
}
24011a66:	4618      	mov	r0, r3
24011a68:	370c      	adds	r7, #12
24011a6a:	46bd      	mov	sp, r7
24011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011a70:	4770      	bx	lr
24011a72:	bf00      	nop
24011a74:	58024800 	.word	0x58024800

24011a78 <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
24011a78:	b480      	push	{r7}
24011a7a:	b083      	sub	sp, #12
24011a7c:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
24011a7e:	4b0f      	ldr	r3, [pc, #60]	; (24011abc <HAL_PWREx_GetVBATLevel+0x44>)
24011a80:	689b      	ldr	r3, [r3, #8]
24011a82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24011a86:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
24011a88:	683b      	ldr	r3, [r7, #0]
24011a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24011a8e:	d103      	bne.n	24011a98 <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24011a90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24011a94:	607b      	str	r3, [r7, #4]
24011a96:	e009      	b.n	24011aac <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
24011a98:	683b      	ldr	r3, [r7, #0]
24011a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24011a9e:	d103      	bne.n	24011aa8 <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24011aa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24011aa4:	607b      	str	r3, [r7, #4]
24011aa6:	e001      	b.n	24011aac <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
24011aa8:	2300      	movs	r3, #0
24011aaa:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
24011aac:	687b      	ldr	r3, [r7, #4]
}
24011aae:	4618      	mov	r0, r3
24011ab0:	370c      	adds	r7, #12
24011ab2:	46bd      	mov	sp, r7
24011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
24011ab8:	4770      	bx	lr
24011aba:	bf00      	nop
24011abc:	58024800 	.word	0x58024800

24011ac0 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24011ac0:	b480      	push	{r7}
24011ac2:	b083      	sub	sp, #12
24011ac4:	af00      	add	r7, sp, #0
24011ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
24011ac8:	4b37      	ldr	r3, [pc, #220]	; (24011ba8 <HAL_PWREx_ConfigAVD+0xe8>)
24011aca:	681b      	ldr	r3, [r3, #0]
24011acc:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24011ad0:	687b      	ldr	r3, [r7, #4]
24011ad2:	681b      	ldr	r3, [r3, #0]
24011ad4:	4934      	ldr	r1, [pc, #208]	; (24011ba8 <HAL_PWREx_ConfigAVD+0xe8>)
24011ad6:	4313      	orrs	r3, r2
24011ad8:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
24011ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24011ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011aea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
24011aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24011af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011afe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
24011b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b06:	681b      	ldr	r3, [r3, #0]
24011b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011b10:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
24011b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b16:	685b      	ldr	r3, [r3, #4]
24011b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011b20:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
24011b22:	687b      	ldr	r3, [r7, #4]
24011b24:	685b      	ldr	r3, [r3, #4]
24011b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011b2a:	2b00      	cmp	r3, #0
24011b2c:	d009      	beq.n	24011b42 <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
24011b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24011b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011b3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
24011b42:	687b      	ldr	r3, [r7, #4]
24011b44:	685b      	ldr	r3, [r3, #4]
24011b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24011b4a:	2b00      	cmp	r3, #0
24011b4c:	d009      	beq.n	24011b62 <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
24011b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24011b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011b5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
24011b62:	687b      	ldr	r3, [r7, #4]
24011b64:	685b      	ldr	r3, [r3, #4]
24011b66:	f003 0301 	and.w	r3, r3, #1
24011b6a:	2b00      	cmp	r3, #0
24011b6c:	d007      	beq.n	24011b7e <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
24011b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b72:	681b      	ldr	r3, [r3, #0]
24011b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011b7c:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
24011b7e:	687b      	ldr	r3, [r7, #4]
24011b80:	685b      	ldr	r3, [r3, #4]
24011b82:	f003 0302 	and.w	r3, r3, #2
24011b86:	2b00      	cmp	r3, #0
24011b88:	d007      	beq.n	24011b9a <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
24011b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011b8e:	685b      	ldr	r3, [r3, #4]
24011b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011b98:	6053      	str	r3, [r2, #4]
  }
}
24011b9a:	bf00      	nop
24011b9c:	370c      	adds	r7, #12
24011b9e:	46bd      	mov	sp, r7
24011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
24011ba4:	4770      	bx	lr
24011ba6:	bf00      	nop
24011ba8:	58024800 	.word	0x58024800

24011bac <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
24011bac:	b480      	push	{r7}
24011bae:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011bb0:	4b05      	ldr	r3, [pc, #20]	; (24011bc8 <HAL_PWREx_EnableAVD+0x1c>)
24011bb2:	681b      	ldr	r3, [r3, #0]
24011bb4:	4a04      	ldr	r2, [pc, #16]	; (24011bc8 <HAL_PWREx_EnableAVD+0x1c>)
24011bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011bba:	6013      	str	r3, [r2, #0]
}
24011bbc:	bf00      	nop
24011bbe:	46bd      	mov	sp, r7
24011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24011bc4:	4770      	bx	lr
24011bc6:	bf00      	nop
24011bc8:	58024800 	.word	0x58024800

24011bcc <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
24011bcc:	b480      	push	{r7}
24011bce:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011bd0:	4b05      	ldr	r3, [pc, #20]	; (24011be8 <HAL_PWREx_DisableAVD+0x1c>)
24011bd2:	681b      	ldr	r3, [r3, #0]
24011bd4:	4a04      	ldr	r2, [pc, #16]	; (24011be8 <HAL_PWREx_DisableAVD+0x1c>)
24011bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011bda:	6013      	str	r3, [r2, #0]
}
24011bdc:	bf00      	nop
24011bde:	46bd      	mov	sp, r7
24011be0:	f85d 7b04 	ldr.w	r7, [sp], #4
24011be4:	4770      	bx	lr
24011be6:	bf00      	nop
24011be8:	58024800 	.word	0x58024800

24011bec <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
24011bec:	b580      	push	{r7, lr}
24011bee:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
24011bf0:	4b1b      	ldr	r3, [pc, #108]	; (24011c60 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24011bf2:	681b      	ldr	r3, [r3, #0]
24011bf4:	f003 0310 	and.w	r3, r3, #16
24011bf8:	2b00      	cmp	r3, #0
24011bfa:	d014      	beq.n	24011c26 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24011bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011c0c:	d10b      	bne.n	24011c26 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
24011c0e:	f7ff faf4 	bl	240111fa <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24011c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011c22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
24011c26:	4b0e      	ldr	r3, [pc, #56]	; (24011c60 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24011c28:	681b      	ldr	r3, [r3, #0]
24011c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011c2e:	2b00      	cmp	r3, #0
24011c30:	d014      	beq.n	24011c5c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
24011c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011c42:	d10b      	bne.n	24011c5c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
24011c44:	f000 f80e 	bl	24011c64 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
24011c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
24011c5c:	bf00      	nop
24011c5e:	bd80      	pop	{r7, pc}
24011c60:	58024800 	.word	0x58024800

24011c64 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
24011c64:	b480      	push	{r7}
24011c66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
24011c68:	bf00      	nop
24011c6a:	46bd      	mov	sp, r7
24011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011c70:	4770      	bx	lr
	...

24011c74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24011c74:	b580      	push	{r7, lr}
24011c76:	b086      	sub	sp, #24
24011c78:	af02      	add	r7, sp, #8
24011c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24011c7c:	f7f0 fad2 	bl	24002224 <HAL_GetTick>
24011c80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24011c82:	687b      	ldr	r3, [r7, #4]
24011c84:	2b00      	cmp	r3, #0
24011c86:	d101      	bne.n	24011c8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
24011c88:	2301      	movs	r3, #1
24011c8a:	e05f      	b.n	24011d4c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
24011c8c:	687b      	ldr	r3, [r7, #4]
24011c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011c92:	b2db      	uxtb	r3, r3
24011c94:	2b00      	cmp	r3, #0
24011c96:	d107      	bne.n	24011ca8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
24011c98:	6878      	ldr	r0, [r7, #4]
24011c9a:	f7ef f977 	bl	24000f8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
24011c9e:	f241 3188 	movw	r1, #5000	; 0x1388
24011ca2:	6878      	ldr	r0, [r7, #4]
24011ca4:	f001 f98e 	bl	24012fc4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24011ca8:	687b      	ldr	r3, [r7, #4]
24011caa:	681b      	ldr	r3, [r3, #0]
24011cac:	681b      	ldr	r3, [r3, #0]
24011cae:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24011cb2:	687b      	ldr	r3, [r7, #4]
24011cb4:	689b      	ldr	r3, [r3, #8]
24011cb6:	3b01      	subs	r3, #1
24011cb8:	021a      	lsls	r2, r3, #8
24011cba:	687b      	ldr	r3, [r7, #4]
24011cbc:	681b      	ldr	r3, [r3, #0]
24011cbe:	430a      	orrs	r2, r1
24011cc0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24011cc2:	687b      	ldr	r3, [r7, #4]
24011cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011cc6:	9300      	str	r3, [sp, #0]
24011cc8:	68fb      	ldr	r3, [r7, #12]
24011cca:	2200      	movs	r2, #0
24011ccc:	2120      	movs	r1, #32
24011cce:	6878      	ldr	r0, [r7, #4]
24011cd0:	f001 fa87 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24011cd4:	4603      	mov	r3, r0
24011cd6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
24011cd8:	7afb      	ldrb	r3, [r7, #11]
24011cda:	2b00      	cmp	r3, #0
24011cdc:	d135      	bne.n	24011d4a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24011cde:	687b      	ldr	r3, [r7, #4]
24011ce0:	681b      	ldr	r3, [r3, #0]
24011ce2:	681a      	ldr	r2, [r3, #0]
24011ce4:	4b1b      	ldr	r3, [pc, #108]	; (24011d54 <HAL_QSPI_Init+0xe0>)
24011ce6:	4013      	ands	r3, r2
24011ce8:	687a      	ldr	r2, [r7, #4]
24011cea:	6852      	ldr	r2, [r2, #4]
24011cec:	0611      	lsls	r1, r2, #24
24011cee:	687a      	ldr	r2, [r7, #4]
24011cf0:	68d2      	ldr	r2, [r2, #12]
24011cf2:	4311      	orrs	r1, r2
24011cf4:	687a      	ldr	r2, [r7, #4]
24011cf6:	69d2      	ldr	r2, [r2, #28]
24011cf8:	4311      	orrs	r1, r2
24011cfa:	687a      	ldr	r2, [r7, #4]
24011cfc:	6a12      	ldr	r2, [r2, #32]
24011cfe:	4311      	orrs	r1, r2
24011d00:	687a      	ldr	r2, [r7, #4]
24011d02:	6812      	ldr	r2, [r2, #0]
24011d04:	430b      	orrs	r3, r1
24011d06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24011d08:	687b      	ldr	r3, [r7, #4]
24011d0a:	681b      	ldr	r3, [r3, #0]
24011d0c:	685a      	ldr	r2, [r3, #4]
24011d0e:	4b12      	ldr	r3, [pc, #72]	; (24011d58 <HAL_QSPI_Init+0xe4>)
24011d10:	4013      	ands	r3, r2
24011d12:	687a      	ldr	r2, [r7, #4]
24011d14:	6912      	ldr	r2, [r2, #16]
24011d16:	0411      	lsls	r1, r2, #16
24011d18:	687a      	ldr	r2, [r7, #4]
24011d1a:	6952      	ldr	r2, [r2, #20]
24011d1c:	4311      	orrs	r1, r2
24011d1e:	687a      	ldr	r2, [r7, #4]
24011d20:	6992      	ldr	r2, [r2, #24]
24011d22:	4311      	orrs	r1, r2
24011d24:	687a      	ldr	r2, [r7, #4]
24011d26:	6812      	ldr	r2, [r2, #0]
24011d28:	430b      	orrs	r3, r1
24011d2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
24011d2c:	687b      	ldr	r3, [r7, #4]
24011d2e:	681b      	ldr	r3, [r3, #0]
24011d30:	681a      	ldr	r2, [r3, #0]
24011d32:	687b      	ldr	r3, [r7, #4]
24011d34:	681b      	ldr	r3, [r3, #0]
24011d36:	f042 0201 	orr.w	r2, r2, #1
24011d3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011d3c:	687b      	ldr	r3, [r7, #4]
24011d3e:	2200      	movs	r2, #0
24011d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
24011d42:	687b      	ldr	r3, [r7, #4]
24011d44:	2201      	movs	r2, #1
24011d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
24011d4a:	7afb      	ldrb	r3, [r7, #11]
}
24011d4c:	4618      	mov	r0, r3
24011d4e:	3710      	adds	r7, #16
24011d50:	46bd      	mov	sp, r7
24011d52:	bd80      	pop	{r7, pc}
24011d54:	00ffff2f 	.word	0x00ffff2f
24011d58:	ffe0f8fe 	.word	0xffe0f8fe

24011d5c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
24011d5c:	b580      	push	{r7, lr}
24011d5e:	b082      	sub	sp, #8
24011d60:	af00      	add	r7, sp, #0
24011d62:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24011d64:	687b      	ldr	r3, [r7, #4]
24011d66:	2b00      	cmp	r3, #0
24011d68:	d101      	bne.n	24011d6e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
24011d6a:	2301      	movs	r3, #1
24011d6c:	e012      	b.n	24011d94 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
24011d6e:	687b      	ldr	r3, [r7, #4]
24011d70:	681b      	ldr	r3, [r3, #0]
24011d72:	681a      	ldr	r2, [r3, #0]
24011d74:	687b      	ldr	r3, [r7, #4]
24011d76:	681b      	ldr	r3, [r3, #0]
24011d78:	f022 0201 	bic.w	r2, r2, #1
24011d7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
24011d7e:	6878      	ldr	r0, [r7, #4]
24011d80:	f7ef fa02 	bl	24001188 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011d84:	687b      	ldr	r3, [r7, #4]
24011d86:	2200      	movs	r2, #0
24011d88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
24011d8a:	687b      	ldr	r3, [r7, #4]
24011d8c:	2200      	movs	r2, #0
24011d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
24011d92:	2300      	movs	r3, #0
}
24011d94:	4618      	mov	r0, r3
24011d96:	3708      	adds	r7, #8
24011d98:	46bd      	mov	sp, r7
24011d9a:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
24011d9c:	b480      	push	{r7}
24011d9e:	b083      	sub	sp, #12
24011da0:	af00      	add	r7, sp, #0
24011da2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
24011da4:	bf00      	nop
24011da6:	370c      	adds	r7, #12
24011da8:	46bd      	mov	sp, r7
24011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
24011dae:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
24011db0:	b480      	push	{r7}
24011db2:	b083      	sub	sp, #12
24011db4:	af00      	add	r7, sp, #0
24011db6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
24011db8:	bf00      	nop
24011dba:	370c      	adds	r7, #12
24011dbc:	46bd      	mov	sp, r7
24011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
24011dc2:	4770      	bx	lr

24011dc4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
24011dc4:	b580      	push	{r7, lr}
24011dc6:	b086      	sub	sp, #24
24011dc8:	af00      	add	r7, sp, #0
24011dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
24011dcc:	687b      	ldr	r3, [r7, #4]
24011dce:	681b      	ldr	r3, [r3, #0]
24011dd0:	689b      	ldr	r3, [r3, #8]
24011dd2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
24011dd4:	687b      	ldr	r3, [r7, #4]
24011dd6:	681b      	ldr	r3, [r3, #0]
24011dd8:	681b      	ldr	r3, [r3, #0]
24011dda:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
24011ddc:	697b      	ldr	r3, [r7, #20]
24011dde:	f003 0304 	and.w	r3, r3, #4
24011de2:	2b00      	cmp	r3, #0
24011de4:	d064      	beq.n	24011eb0 <HAL_QSPI_IRQHandler+0xec>
24011de6:	693b      	ldr	r3, [r7, #16]
24011de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24011dec:	2b00      	cmp	r3, #0
24011dee:	d05f      	beq.n	24011eb0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
24011df0:	687b      	ldr	r3, [r7, #4]
24011df2:	681b      	ldr	r3, [r3, #0]
24011df4:	3320      	adds	r3, #32
24011df6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011df8:	687b      	ldr	r3, [r7, #4]
24011dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011dfe:	b2db      	uxtb	r3, r3
24011e00:	2b12      	cmp	r3, #18
24011e02:	d125      	bne.n	24011e50 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011e04:	e01c      	b.n	24011e40 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
24011e06:	687b      	ldr	r3, [r7, #4]
24011e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011e0a:	2b00      	cmp	r3, #0
24011e0c:	d00f      	beq.n	24011e2e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24011e0e:	687b      	ldr	r3, [r7, #4]
24011e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011e12:	781a      	ldrb	r2, [r3, #0]
24011e14:	68fb      	ldr	r3, [r7, #12]
24011e16:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
24011e18:	687b      	ldr	r3, [r7, #4]
24011e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011e1c:	1c5a      	adds	r2, r3, #1
24011e1e:	687b      	ldr	r3, [r7, #4]
24011e20:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
24011e22:	687b      	ldr	r3, [r7, #4]
24011e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011e26:	1e5a      	subs	r2, r3, #1
24011e28:	687b      	ldr	r3, [r7, #4]
24011e2a:	62da      	str	r2, [r3, #44]	; 0x2c
24011e2c:	e008      	b.n	24011e40 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
24011e2e:	687b      	ldr	r3, [r7, #4]
24011e30:	681b      	ldr	r3, [r3, #0]
24011e32:	681a      	ldr	r2, [r3, #0]
24011e34:	687b      	ldr	r3, [r7, #4]
24011e36:	681b      	ldr	r3, [r3, #0]
24011e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24011e3c:	601a      	str	r2, [r3, #0]
          break;
24011e3e:	e033      	b.n	24011ea8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011e40:	687b      	ldr	r3, [r7, #4]
24011e42:	681b      	ldr	r3, [r3, #0]
24011e44:	689b      	ldr	r3, [r3, #8]
24011e46:	f003 0304 	and.w	r3, r3, #4
24011e4a:	2b00      	cmp	r3, #0
24011e4c:	d1db      	bne.n	24011e06 <HAL_QSPI_IRQHandler+0x42>
24011e4e:	e02b      	b.n	24011ea8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24011e50:	687b      	ldr	r3, [r7, #4]
24011e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011e56:	b2db      	uxtb	r3, r3
24011e58:	2b22      	cmp	r3, #34	; 0x22
24011e5a:	d125      	bne.n	24011ea8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011e5c:	e01d      	b.n	24011e9a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
24011e5e:	687b      	ldr	r3, [r7, #4]
24011e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011e62:	2b00      	cmp	r3, #0
24011e64:	d010      	beq.n	24011e88 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011e66:	687b      	ldr	r3, [r7, #4]
24011e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011e6a:	68fa      	ldr	r2, [r7, #12]
24011e6c:	7812      	ldrb	r2, [r2, #0]
24011e6e:	b2d2      	uxtb	r2, r2
24011e70:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
24011e72:	687b      	ldr	r3, [r7, #4]
24011e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011e76:	1c5a      	adds	r2, r3, #1
24011e78:	687b      	ldr	r3, [r7, #4]
24011e7a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
24011e7c:	687b      	ldr	r3, [r7, #4]
24011e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011e80:	1e5a      	subs	r2, r3, #1
24011e82:	687b      	ldr	r3, [r7, #4]
24011e84:	639a      	str	r2, [r3, #56]	; 0x38
24011e86:	e008      	b.n	24011e9a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
24011e88:	687b      	ldr	r3, [r7, #4]
24011e8a:	681b      	ldr	r3, [r3, #0]
24011e8c:	681a      	ldr	r2, [r3, #0]
24011e8e:	687b      	ldr	r3, [r7, #4]
24011e90:	681b      	ldr	r3, [r3, #0]
24011e92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24011e96:	601a      	str	r2, [r3, #0]
          break;
24011e98:	e006      	b.n	24011ea8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011e9a:	687b      	ldr	r3, [r7, #4]
24011e9c:	681b      	ldr	r3, [r3, #0]
24011e9e:	689b      	ldr	r3, [r3, #8]
24011ea0:	f003 0304 	and.w	r3, r3, #4
24011ea4:	2b00      	cmp	r3, #0
24011ea6:	d1da      	bne.n	24011e5e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
24011ea8:	6878      	ldr	r0, [r7, #4]
24011eaa:	f000 ff72 	bl	24012d92 <HAL_QSPI_FifoThresholdCallback>
24011eae:	e13c      	b.n	2401212a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
24011eb0:	697b      	ldr	r3, [r7, #20]
24011eb2:	f003 0302 	and.w	r3, r3, #2
24011eb6:	2b00      	cmp	r3, #0
24011eb8:	f000 80b0 	beq.w	2401201c <HAL_QSPI_IRQHandler+0x258>
24011ebc:	693b      	ldr	r3, [r7, #16]
24011ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24011ec2:	2b00      	cmp	r3, #0
24011ec4:	f000 80aa 	beq.w	2401201c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
24011ec8:	687b      	ldr	r3, [r7, #4]
24011eca:	681b      	ldr	r3, [r3, #0]
24011ecc:	2202      	movs	r2, #2
24011ece:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24011ed0:	687b      	ldr	r3, [r7, #4]
24011ed2:	681b      	ldr	r3, [r3, #0]
24011ed4:	681a      	ldr	r2, [r3, #0]
24011ed6:	687b      	ldr	r3, [r7, #4]
24011ed8:	681b      	ldr	r3, [r3, #0]
24011eda:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
24011ede:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011ee0:	687b      	ldr	r3, [r7, #4]
24011ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011ee6:	b2db      	uxtb	r3, r3
24011ee8:	2b12      	cmp	r3, #18
24011eea:	d120      	bne.n	24011f2e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24011eec:	687b      	ldr	r3, [r7, #4]
24011eee:	681b      	ldr	r3, [r3, #0]
24011ef0:	681b      	ldr	r3, [r3, #0]
24011ef2:	f003 0304 	and.w	r3, r3, #4
24011ef6:	2b00      	cmp	r3, #0
24011ef8:	d011      	beq.n	24011f1e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24011efa:	687b      	ldr	r3, [r7, #4]
24011efc:	681b      	ldr	r3, [r3, #0]
24011efe:	681a      	ldr	r2, [r3, #0]
24011f00:	687b      	ldr	r3, [r7, #4]
24011f02:	681b      	ldr	r3, [r3, #0]
24011f04:	f022 0204 	bic.w	r2, r2, #4
24011f08:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
24011f0a:	687b      	ldr	r3, [r7, #4]
24011f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f0e:	681b      	ldr	r3, [r3, #0]
24011f10:	68da      	ldr	r2, [r3, #12]
24011f12:	687b      	ldr	r3, [r7, #4]
24011f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f16:	681b      	ldr	r3, [r3, #0]
24011f18:	f022 0201 	bic.w	r2, r2, #1
24011f1c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011f1e:	687b      	ldr	r3, [r7, #4]
24011f20:	2201      	movs	r2, #1
24011f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
24011f26:	6878      	ldr	r0, [r7, #4]
24011f28:	f000 ff29 	bl	24012d7e <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011f2c:	e0fa      	b.n	24012124 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24011f2e:	687b      	ldr	r3, [r7, #4]
24011f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011f34:	b2db      	uxtb	r3, r3
24011f36:	2b22      	cmp	r3, #34	; 0x22
24011f38:	d143      	bne.n	24011fc2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24011f3a:	687b      	ldr	r3, [r7, #4]
24011f3c:	681b      	ldr	r3, [r3, #0]
24011f3e:	681b      	ldr	r3, [r3, #0]
24011f40:	f003 0304 	and.w	r3, r3, #4
24011f44:	2b00      	cmp	r3, #0
24011f46:	d012      	beq.n	24011f6e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24011f48:	687b      	ldr	r3, [r7, #4]
24011f4a:	681b      	ldr	r3, [r3, #0]
24011f4c:	681a      	ldr	r2, [r3, #0]
24011f4e:	687b      	ldr	r3, [r7, #4]
24011f50:	681b      	ldr	r3, [r3, #0]
24011f52:	f022 0204 	bic.w	r2, r2, #4
24011f56:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
24011f58:	687b      	ldr	r3, [r7, #4]
24011f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f5c:	681b      	ldr	r3, [r3, #0]
24011f5e:	68da      	ldr	r2, [r3, #12]
24011f60:	687b      	ldr	r3, [r7, #4]
24011f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f64:	681b      	ldr	r3, [r3, #0]
24011f66:	f022 0201 	bic.w	r2, r2, #1
24011f6a:	60da      	str	r2, [r3, #12]
24011f6c:	e021      	b.n	24011fb2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
24011f6e:	687b      	ldr	r3, [r7, #4]
24011f70:	681b      	ldr	r3, [r3, #0]
24011f72:	3320      	adds	r3, #32
24011f74:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24011f76:	e013      	b.n	24011fa0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
24011f78:	687b      	ldr	r3, [r7, #4]
24011f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011f7c:	2b00      	cmp	r3, #0
24011f7e:	d017      	beq.n	24011fb0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011f80:	687b      	ldr	r3, [r7, #4]
24011f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011f84:	68fa      	ldr	r2, [r7, #12]
24011f86:	7812      	ldrb	r2, [r2, #0]
24011f88:	b2d2      	uxtb	r2, r2
24011f8a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
24011f8c:	687b      	ldr	r3, [r7, #4]
24011f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011f90:	1c5a      	adds	r2, r3, #1
24011f92:	687b      	ldr	r3, [r7, #4]
24011f94:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
24011f96:	687b      	ldr	r3, [r7, #4]
24011f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011f9a:	1e5a      	subs	r2, r3, #1
24011f9c:	687b      	ldr	r3, [r7, #4]
24011f9e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24011fa0:	687b      	ldr	r3, [r7, #4]
24011fa2:	681b      	ldr	r3, [r3, #0]
24011fa4:	689b      	ldr	r3, [r3, #8]
24011fa6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
24011faa:	2b00      	cmp	r3, #0
24011fac:	d1e4      	bne.n	24011f78 <HAL_QSPI_IRQHandler+0x1b4>
24011fae:	e000      	b.n	24011fb2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
24011fb0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011fb2:	687b      	ldr	r3, [r7, #4]
24011fb4:	2201      	movs	r2, #1
24011fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
24011fba:	6878      	ldr	r0, [r7, #4]
24011fbc:	f000 fed5 	bl	24012d6a <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011fc0:	e0b0      	b.n	24012124 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
24011fc2:	687b      	ldr	r3, [r7, #4]
24011fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011fc8:	b2db      	uxtb	r3, r3
24011fca:	2b02      	cmp	r3, #2
24011fcc:	d107      	bne.n	24011fde <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011fce:	687b      	ldr	r3, [r7, #4]
24011fd0:	2201      	movs	r2, #1
24011fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
24011fd6:	6878      	ldr	r0, [r7, #4]
24011fd8:	f000 febd 	bl	24012d56 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011fdc:	e0a2      	b.n	24012124 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
24011fde:	687b      	ldr	r3, [r7, #4]
24011fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011fe4:	b2db      	uxtb	r3, r3
24011fe6:	2b08      	cmp	r3, #8
24011fe8:	f040 809c 	bne.w	24012124 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24011fec:	687b      	ldr	r3, [r7, #4]
24011fee:	681b      	ldr	r3, [r3, #0]
24011ff0:	695a      	ldr	r2, [r3, #20]
24011ff2:	687b      	ldr	r3, [r7, #4]
24011ff4:	681b      	ldr	r3, [r3, #0]
24011ff6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011ffa:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011ffc:	687b      	ldr	r3, [r7, #4]
24011ffe:	2201      	movs	r2, #1
24012000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
24012004:	687b      	ldr	r3, [r7, #4]
24012006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012008:	2b00      	cmp	r3, #0
2401200a:	d103      	bne.n	24012014 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
2401200c:	6878      	ldr	r0, [r7, #4]
2401200e:	f000 fe98 	bl	24012d42 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24012012:	e087      	b.n	24012124 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
24012014:	6878      	ldr	r0, [r7, #4]
24012016:	f000 fe8a 	bl	24012d2e <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2401201a:	e083      	b.n	24012124 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
2401201c:	697b      	ldr	r3, [r7, #20]
2401201e:	f003 0308 	and.w	r3, r3, #8
24012022:	2b00      	cmp	r3, #0
24012024:	d01f      	beq.n	24012066 <HAL_QSPI_IRQHandler+0x2a2>
24012026:	693b      	ldr	r3, [r7, #16]
24012028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2401202c:	2b00      	cmp	r3, #0
2401202e:	d01a      	beq.n	24012066 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
24012030:	687b      	ldr	r3, [r7, #4]
24012032:	681b      	ldr	r3, [r3, #0]
24012034:	2208      	movs	r2, #8
24012036:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
24012038:	687b      	ldr	r3, [r7, #4]
2401203a:	681b      	ldr	r3, [r3, #0]
2401203c:	681b      	ldr	r3, [r3, #0]
2401203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24012042:	2b00      	cmp	r3, #0
24012044:	d00b      	beq.n	2401205e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
24012046:	687b      	ldr	r3, [r7, #4]
24012048:	681b      	ldr	r3, [r3, #0]
2401204a:	681a      	ldr	r2, [r3, #0]
2401204c:	687b      	ldr	r3, [r7, #4]
2401204e:	681b      	ldr	r3, [r3, #0]
24012050:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
24012054:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24012056:	687b      	ldr	r3, [r7, #4]
24012058:	2201      	movs	r2, #1
2401205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
2401205e:	6878      	ldr	r0, [r7, #4]
24012060:	f000 fea1 	bl	24012da6 <HAL_QSPI_StatusMatchCallback>
24012064:	e061      	b.n	2401212a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
24012066:	697b      	ldr	r3, [r7, #20]
24012068:	f003 0301 	and.w	r3, r3, #1
2401206c:	2b00      	cmp	r3, #0
2401206e:	d047      	beq.n	24012100 <HAL_QSPI_IRQHandler+0x33c>
24012070:	693b      	ldr	r3, [r7, #16]
24012072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24012076:	2b00      	cmp	r3, #0
24012078:	d042      	beq.n	24012100 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
2401207a:	687b      	ldr	r3, [r7, #4]
2401207c:	681b      	ldr	r3, [r3, #0]
2401207e:	2201      	movs	r2, #1
24012080:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24012082:	687b      	ldr	r3, [r7, #4]
24012084:	681b      	ldr	r3, [r3, #0]
24012086:	681a      	ldr	r2, [r3, #0]
24012088:	687b      	ldr	r3, [r7, #4]
2401208a:	681b      	ldr	r3, [r3, #0]
2401208c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
24012090:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
24012092:	687b      	ldr	r3, [r7, #4]
24012094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012096:	f043 0202 	orr.w	r2, r3, #2
2401209a:	687b      	ldr	r3, [r7, #4]
2401209c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401209e:	687b      	ldr	r3, [r7, #4]
240120a0:	681b      	ldr	r3, [r3, #0]
240120a2:	681b      	ldr	r3, [r3, #0]
240120a4:	f003 0304 	and.w	r3, r3, #4
240120a8:	2b00      	cmp	r3, #0
240120aa:	d021      	beq.n	240120f0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240120ac:	687b      	ldr	r3, [r7, #4]
240120ae:	681b      	ldr	r3, [r3, #0]
240120b0:	681a      	ldr	r2, [r3, #0]
240120b2:	687b      	ldr	r3, [r7, #4]
240120b4:	681b      	ldr	r3, [r3, #0]
240120b6:	f022 0204 	bic.w	r2, r2, #4
240120ba:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
240120bc:	687b      	ldr	r3, [r7, #4]
240120be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120c0:	4a1c      	ldr	r2, [pc, #112]	; (24012134 <HAL_QSPI_IRQHandler+0x370>)
240120c2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
240120c4:	687b      	ldr	r3, [r7, #4]
240120c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120c8:	4618      	mov	r0, r3
240120ca:	f7fe fb34 	bl	24010736 <HAL_MDMA_Abort_IT>
240120ce:	4603      	mov	r3, r0
240120d0:	2b00      	cmp	r3, #0
240120d2:	d029      	beq.n	24012128 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240120d4:	687b      	ldr	r3, [r7, #4]
240120d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240120d8:	f043 0204 	orr.w	r2, r3, #4
240120dc:	687b      	ldr	r3, [r7, #4]
240120de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
240120e0:	687b      	ldr	r3, [r7, #4]
240120e2:	2201      	movs	r2, #1
240120e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
240120e8:	6878      	ldr	r0, [r7, #4]
240120ea:	f000 fe20 	bl	24012d2e <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240120ee:	e01b      	b.n	24012128 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240120f0:	687b      	ldr	r3, [r7, #4]
240120f2:	2201      	movs	r2, #1
240120f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
240120f8:	6878      	ldr	r0, [r7, #4]
240120fa:	f000 fe18 	bl	24012d2e <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240120fe:	e013      	b.n	24012128 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
24012100:	697b      	ldr	r3, [r7, #20]
24012102:	f003 0310 	and.w	r3, r3, #16
24012106:	2b00      	cmp	r3, #0
24012108:	d00f      	beq.n	2401212a <HAL_QSPI_IRQHandler+0x366>
2401210a:	693b      	ldr	r3, [r7, #16]
2401210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24012110:	2b00      	cmp	r3, #0
24012112:	d00a      	beq.n	2401212a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
24012114:	687b      	ldr	r3, [r7, #4]
24012116:	681b      	ldr	r3, [r3, #0]
24012118:	2210      	movs	r2, #16
2401211a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
2401211c:	6878      	ldr	r0, [r7, #4]
2401211e:	f000 fe4c 	bl	24012dba <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
24012122:	e002      	b.n	2401212a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24012124:	bf00      	nop
24012126:	e000      	b.n	2401212a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24012128:	bf00      	nop
}
2401212a:	bf00      	nop
2401212c:	3718      	adds	r7, #24
2401212e:	46bd      	mov	sp, r7
24012130:	bd80      	pop	{r7, pc}
24012132:	bf00      	nop
24012134:	2401317d 	.word	0x2401317d

24012138 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
24012138:	b580      	push	{r7, lr}
2401213a:	b088      	sub	sp, #32
2401213c:	af02      	add	r7, sp, #8
2401213e:	60f8      	str	r0, [r7, #12]
24012140:	60b9      	str	r1, [r7, #8]
24012142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012144:	f7f0 f86e 	bl	24002224 <HAL_GetTick>
24012148:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401214a:	68fb      	ldr	r3, [r7, #12]
2401214c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012150:	b2db      	uxtb	r3, r3
24012152:	2b01      	cmp	r3, #1
24012154:	d101      	bne.n	2401215a <HAL_QSPI_Command+0x22>
24012156:	2302      	movs	r3, #2
24012158:	e048      	b.n	240121ec <HAL_QSPI_Command+0xb4>
2401215a:	68fb      	ldr	r3, [r7, #12]
2401215c:	2201      	movs	r2, #1
2401215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012162:	68fb      	ldr	r3, [r7, #12]
24012164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012168:	b2db      	uxtb	r3, r3
2401216a:	2b01      	cmp	r3, #1
2401216c:	d137      	bne.n	240121de <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2401216e:	68fb      	ldr	r3, [r7, #12]
24012170:	2200      	movs	r2, #0
24012172:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24012174:	68fb      	ldr	r3, [r7, #12]
24012176:	2202      	movs	r2, #2
24012178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2401217c:	687b      	ldr	r3, [r7, #4]
2401217e:	9300      	str	r3, [sp, #0]
24012180:	693b      	ldr	r3, [r7, #16]
24012182:	2200      	movs	r2, #0
24012184:	2120      	movs	r1, #32
24012186:	68f8      	ldr	r0, [r7, #12]
24012188:	f001 f82b 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
2401218c:	4603      	mov	r3, r0
2401218e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012190:	7dfb      	ldrb	r3, [r7, #23]
24012192:	2b00      	cmp	r3, #0
24012194:	d125      	bne.n	240121e2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012196:	2200      	movs	r2, #0
24012198:	68b9      	ldr	r1, [r7, #8]
2401219a:	68f8      	ldr	r0, [r7, #12]
2401219c:	f001 f858 	bl	24013250 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
240121a0:	68bb      	ldr	r3, [r7, #8]
240121a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240121a4:	2b00      	cmp	r3, #0
240121a6:	d115      	bne.n	240121d4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
240121a8:	687b      	ldr	r3, [r7, #4]
240121aa:	9300      	str	r3, [sp, #0]
240121ac:	693b      	ldr	r3, [r7, #16]
240121ae:	2201      	movs	r2, #1
240121b0:	2102      	movs	r1, #2
240121b2:	68f8      	ldr	r0, [r7, #12]
240121b4:	f001 f815 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
240121b8:	4603      	mov	r3, r0
240121ba:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
240121bc:	7dfb      	ldrb	r3, [r7, #23]
240121be:	2b00      	cmp	r3, #0
240121c0:	d10f      	bne.n	240121e2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240121c2:	68fb      	ldr	r3, [r7, #12]
240121c4:	681b      	ldr	r3, [r3, #0]
240121c6:	2202      	movs	r2, #2
240121c8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
240121ca:	68fb      	ldr	r3, [r7, #12]
240121cc:	2201      	movs	r2, #1
240121ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240121d2:	e006      	b.n	240121e2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
240121d4:	68fb      	ldr	r3, [r7, #12]
240121d6:	2201      	movs	r2, #1
240121d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240121dc:	e001      	b.n	240121e2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
240121de:	2302      	movs	r3, #2
240121e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240121e2:	68fb      	ldr	r3, [r7, #12]
240121e4:	2200      	movs	r2, #0
240121e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240121ea:	7dfb      	ldrb	r3, [r7, #23]
}
240121ec:	4618      	mov	r0, r3
240121ee:	3718      	adds	r7, #24
240121f0:	46bd      	mov	sp, r7
240121f2:	bd80      	pop	{r7, pc}

240121f4 <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
240121f4:	b580      	push	{r7, lr}
240121f6:	b086      	sub	sp, #24
240121f8:	af02      	add	r7, sp, #8
240121fa:	6078      	str	r0, [r7, #4]
240121fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240121fe:	f7f0 f811 	bl	24002224 <HAL_GetTick>
24012202:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012204:	687b      	ldr	r3, [r7, #4]
24012206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2401220a:	b2db      	uxtb	r3, r3
2401220c:	2b01      	cmp	r3, #1
2401220e:	d101      	bne.n	24012214 <HAL_QSPI_Command_IT+0x20>
24012210:	2302      	movs	r3, #2
24012212:	e051      	b.n	240122b8 <HAL_QSPI_Command_IT+0xc4>
24012214:	687b      	ldr	r3, [r7, #4]
24012216:	2201      	movs	r2, #1
24012218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2401221c:	687b      	ldr	r3, [r7, #4]
2401221e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012222:	b2db      	uxtb	r3, r3
24012224:	2b01      	cmp	r3, #1
24012226:	d140      	bne.n	240122aa <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012228:	687b      	ldr	r3, [r7, #4]
2401222a:	2200      	movs	r2, #0
2401222c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
2401222e:	687b      	ldr	r3, [r7, #4]
24012230:	2202      	movs	r2, #2
24012232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24012236:	687b      	ldr	r3, [r7, #4]
24012238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401223a:	9300      	str	r3, [sp, #0]
2401223c:	68bb      	ldr	r3, [r7, #8]
2401223e:	2200      	movs	r2, #0
24012240:	2120      	movs	r1, #32
24012242:	6878      	ldr	r0, [r7, #4]
24012244:	f000 ffcd 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012248:	4603      	mov	r3, r0
2401224a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2401224c:	7bfb      	ldrb	r3, [r7, #15]
2401224e:	2b00      	cmp	r3, #0
24012250:	d126      	bne.n	240122a0 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
24012252:	683b      	ldr	r3, [r7, #0]
24012254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012256:	2b00      	cmp	r3, #0
24012258:	d103      	bne.n	24012262 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2401225a:	687b      	ldr	r3, [r7, #4]
2401225c:	681b      	ldr	r3, [r3, #0]
2401225e:	2203      	movs	r2, #3
24012260:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012262:	2200      	movs	r2, #0
24012264:	6839      	ldr	r1, [r7, #0]
24012266:	6878      	ldr	r0, [r7, #4]
24012268:	f000 fff2 	bl	24013250 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
2401226c:	683b      	ldr	r3, [r7, #0]
2401226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012270:	2b00      	cmp	r3, #0
24012272:	d10c      	bne.n	2401228e <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24012274:	687b      	ldr	r3, [r7, #4]
24012276:	2200      	movs	r2, #0
24012278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
2401227c:	687b      	ldr	r3, [r7, #4]
2401227e:	681b      	ldr	r3, [r3, #0]
24012280:	681a      	ldr	r2, [r3, #0]
24012282:	687b      	ldr	r3, [r7, #4]
24012284:	681b      	ldr	r3, [r3, #0]
24012286:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2401228a:	601a      	str	r2, [r3, #0]
2401228c:	e013      	b.n	240122b6 <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
2401228e:	687b      	ldr	r3, [r7, #4]
24012290:	2201      	movs	r2, #1
24012292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24012296:	687b      	ldr	r3, [r7, #4]
24012298:	2200      	movs	r2, #0
2401229a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2401229e:	e00a      	b.n	240122b6 <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240122a0:	687b      	ldr	r3, [r7, #4]
240122a2:	2200      	movs	r2, #0
240122a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240122a8:	e005      	b.n	240122b6 <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
240122aa:	2302      	movs	r3, #2
240122ac:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240122ae:	687b      	ldr	r3, [r7, #4]
240122b0:	2200      	movs	r2, #0
240122b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
240122b6:	7bfb      	ldrb	r3, [r7, #15]
}
240122b8:	4618      	mov	r0, r3
240122ba:	3710      	adds	r7, #16
240122bc:	46bd      	mov	sp, r7
240122be:	bd80      	pop	{r7, pc}

240122c0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
240122c0:	b580      	push	{r7, lr}
240122c2:	b08a      	sub	sp, #40	; 0x28
240122c4:	af02      	add	r7, sp, #8
240122c6:	60f8      	str	r0, [r7, #12]
240122c8:	60b9      	str	r1, [r7, #8]
240122ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240122cc:	2300      	movs	r3, #0
240122ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
240122d0:	f7ef ffa8 	bl	24002224 <HAL_GetTick>
240122d4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
240122d6:	68fb      	ldr	r3, [r7, #12]
240122d8:	681b      	ldr	r3, [r3, #0]
240122da:	3320      	adds	r3, #32
240122dc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
240122de:	68fb      	ldr	r3, [r7, #12]
240122e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240122e4:	b2db      	uxtb	r3, r3
240122e6:	2b01      	cmp	r3, #1
240122e8:	d101      	bne.n	240122ee <HAL_QSPI_Transmit+0x2e>
240122ea:	2302      	movs	r3, #2
240122ec:	e076      	b.n	240123dc <HAL_QSPI_Transmit+0x11c>
240122ee:	68fb      	ldr	r3, [r7, #12]
240122f0:	2201      	movs	r2, #1
240122f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240122f6:	68fb      	ldr	r3, [r7, #12]
240122f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240122fc:	b2db      	uxtb	r3, r3
240122fe:	2b01      	cmp	r3, #1
24012300:	d165      	bne.n	240123ce <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012302:	68fb      	ldr	r3, [r7, #12]
24012304:	2200      	movs	r2, #0
24012306:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24012308:	68bb      	ldr	r3, [r7, #8]
2401230a:	2b00      	cmp	r3, #0
2401230c:	d056      	beq.n	240123bc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2401230e:	68fb      	ldr	r3, [r7, #12]
24012310:	2212      	movs	r2, #18
24012312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24012316:	68fb      	ldr	r3, [r7, #12]
24012318:	681b      	ldr	r3, [r3, #0]
2401231a:	691b      	ldr	r3, [r3, #16]
2401231c:	1c5a      	adds	r2, r3, #1
2401231e:	68fb      	ldr	r3, [r7, #12]
24012320:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24012322:	68fb      	ldr	r3, [r7, #12]
24012324:	681b      	ldr	r3, [r3, #0]
24012326:	691b      	ldr	r3, [r3, #16]
24012328:	1c5a      	adds	r2, r3, #1
2401232a:	68fb      	ldr	r3, [r7, #12]
2401232c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
2401232e:	68fb      	ldr	r3, [r7, #12]
24012330:	68ba      	ldr	r2, [r7, #8]
24012332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012334:	68fb      	ldr	r3, [r7, #12]
24012336:	681b      	ldr	r3, [r3, #0]
24012338:	695a      	ldr	r2, [r3, #20]
2401233a:	68fb      	ldr	r3, [r7, #12]
2401233c:	681b      	ldr	r3, [r3, #0]
2401233e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012342:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24012344:	e01b      	b.n	2401237e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
24012346:	687b      	ldr	r3, [r7, #4]
24012348:	9300      	str	r3, [sp, #0]
2401234a:	69bb      	ldr	r3, [r7, #24]
2401234c:	2201      	movs	r2, #1
2401234e:	2104      	movs	r1, #4
24012350:	68f8      	ldr	r0, [r7, #12]
24012352:	f000 ff46 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012356:	4603      	mov	r3, r0
24012358:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2401235a:	7ffb      	ldrb	r3, [r7, #31]
2401235c:	2b00      	cmp	r3, #0
2401235e:	d113      	bne.n	24012388 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24012360:	68fb      	ldr	r3, [r7, #12]
24012362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012364:	781a      	ldrb	r2, [r3, #0]
24012366:	697b      	ldr	r3, [r7, #20]
24012368:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
2401236a:	68fb      	ldr	r3, [r7, #12]
2401236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401236e:	1c5a      	adds	r2, r3, #1
24012370:	68fb      	ldr	r3, [r7, #12]
24012372:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24012374:	68fb      	ldr	r3, [r7, #12]
24012376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24012378:	1e5a      	subs	r2, r3, #1
2401237a:	68fb      	ldr	r3, [r7, #12]
2401237c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
2401237e:	68fb      	ldr	r3, [r7, #12]
24012380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24012382:	2b00      	cmp	r3, #0
24012384:	d1df      	bne.n	24012346 <HAL_QSPI_Transmit+0x86>
24012386:	e000      	b.n	2401238a <HAL_QSPI_Transmit+0xca>
          break;
24012388:	bf00      	nop
      }

      if (status == HAL_OK)
2401238a:	7ffb      	ldrb	r3, [r7, #31]
2401238c:	2b00      	cmp	r3, #0
2401238e:	d110      	bne.n	240123b2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24012390:	687b      	ldr	r3, [r7, #4]
24012392:	9300      	str	r3, [sp, #0]
24012394:	69bb      	ldr	r3, [r7, #24]
24012396:	2201      	movs	r2, #1
24012398:	2102      	movs	r1, #2
2401239a:	68f8      	ldr	r0, [r7, #12]
2401239c:	f000 ff21 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
240123a0:	4603      	mov	r3, r0
240123a2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
240123a4:	7ffb      	ldrb	r3, [r7, #31]
240123a6:	2b00      	cmp	r3, #0
240123a8:	d103      	bne.n	240123b2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240123aa:	68fb      	ldr	r3, [r7, #12]
240123ac:	681b      	ldr	r3, [r3, #0]
240123ae:	2202      	movs	r2, #2
240123b0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
240123b2:	68fb      	ldr	r3, [r7, #12]
240123b4:	2201      	movs	r2, #1
240123b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240123ba:	e00a      	b.n	240123d2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240123bc:	68fb      	ldr	r3, [r7, #12]
240123be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240123c0:	f043 0208 	orr.w	r2, r3, #8
240123c4:	68fb      	ldr	r3, [r7, #12]
240123c6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240123c8:	2301      	movs	r3, #1
240123ca:	77fb      	strb	r3, [r7, #31]
240123cc:	e001      	b.n	240123d2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
240123ce:	2302      	movs	r3, #2
240123d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240123d2:	68fb      	ldr	r3, [r7, #12]
240123d4:	2200      	movs	r2, #0
240123d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
240123da:	7ffb      	ldrb	r3, [r7, #31]
}
240123dc:	4618      	mov	r0, r3
240123de:	3720      	adds	r7, #32
240123e0:	46bd      	mov	sp, r7
240123e2:	bd80      	pop	{r7, pc}

240123e4 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
240123e4:	b580      	push	{r7, lr}
240123e6:	b08a      	sub	sp, #40	; 0x28
240123e8:	af02      	add	r7, sp, #8
240123ea:	60f8      	str	r0, [r7, #12]
240123ec:	60b9      	str	r1, [r7, #8]
240123ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240123f0:	2300      	movs	r3, #0
240123f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
240123f4:	f7ef ff16 	bl	24002224 <HAL_GetTick>
240123f8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240123fa:	68fb      	ldr	r3, [r7, #12]
240123fc:	681b      	ldr	r3, [r3, #0]
240123fe:	699b      	ldr	r3, [r3, #24]
24012400:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24012402:	68fb      	ldr	r3, [r7, #12]
24012404:	681b      	ldr	r3, [r3, #0]
24012406:	3320      	adds	r3, #32
24012408:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
2401240a:	68fb      	ldr	r3, [r7, #12]
2401240c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012410:	b2db      	uxtb	r3, r3
24012412:	2b01      	cmp	r3, #1
24012414:	d101      	bne.n	2401241a <HAL_QSPI_Receive+0x36>
24012416:	2302      	movs	r3, #2
24012418:	e07d      	b.n	24012516 <HAL_QSPI_Receive+0x132>
2401241a:	68fb      	ldr	r3, [r7, #12]
2401241c:	2201      	movs	r2, #1
2401241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012422:	68fb      	ldr	r3, [r7, #12]
24012424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012428:	b2db      	uxtb	r3, r3
2401242a:	2b01      	cmp	r3, #1
2401242c:	d16c      	bne.n	24012508 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2401242e:	68fb      	ldr	r3, [r7, #12]
24012430:	2200      	movs	r2, #0
24012432:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24012434:	68bb      	ldr	r3, [r7, #8]
24012436:	2b00      	cmp	r3, #0
24012438:	d05d      	beq.n	240124f6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2401243a:	68fb      	ldr	r3, [r7, #12]
2401243c:	2222      	movs	r2, #34	; 0x22
2401243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24012442:	68fb      	ldr	r3, [r7, #12]
24012444:	681b      	ldr	r3, [r3, #0]
24012446:	691b      	ldr	r3, [r3, #16]
24012448:	1c5a      	adds	r2, r3, #1
2401244a:	68fb      	ldr	r3, [r7, #12]
2401244c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2401244e:	68fb      	ldr	r3, [r7, #12]
24012450:	681b      	ldr	r3, [r3, #0]
24012452:	691b      	ldr	r3, [r3, #16]
24012454:	1c5a      	adds	r2, r3, #1
24012456:	68fb      	ldr	r3, [r7, #12]
24012458:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2401245a:	68fb      	ldr	r3, [r7, #12]
2401245c:	68ba      	ldr	r2, [r7, #8]
2401245e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24012460:	68fb      	ldr	r3, [r7, #12]
24012462:	681b      	ldr	r3, [r3, #0]
24012464:	695b      	ldr	r3, [r3, #20]
24012466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2401246a:	68fb      	ldr	r3, [r7, #12]
2401246c:	681b      	ldr	r3, [r3, #0]
2401246e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24012472:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24012474:	68fb      	ldr	r3, [r7, #12]
24012476:	681b      	ldr	r3, [r3, #0]
24012478:	697a      	ldr	r2, [r7, #20]
2401247a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
2401247c:	e01c      	b.n	240124b8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
2401247e:	687b      	ldr	r3, [r7, #4]
24012480:	9300      	str	r3, [sp, #0]
24012482:	69bb      	ldr	r3, [r7, #24]
24012484:	2201      	movs	r2, #1
24012486:	2106      	movs	r1, #6
24012488:	68f8      	ldr	r0, [r7, #12]
2401248a:	f000 feaa 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
2401248e:	4603      	mov	r3, r0
24012490:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
24012492:	7ffb      	ldrb	r3, [r7, #31]
24012494:	2b00      	cmp	r3, #0
24012496:	d114      	bne.n	240124c2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24012498:	68fb      	ldr	r3, [r7, #12]
2401249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401249c:	693a      	ldr	r2, [r7, #16]
2401249e:	7812      	ldrb	r2, [r2, #0]
240124a0:	b2d2      	uxtb	r2, r2
240124a2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
240124a4:	68fb      	ldr	r3, [r7, #12]
240124a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240124a8:	1c5a      	adds	r2, r3, #1
240124aa:	68fb      	ldr	r3, [r7, #12]
240124ac:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
240124ae:	68fb      	ldr	r3, [r7, #12]
240124b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240124b2:	1e5a      	subs	r2, r3, #1
240124b4:	68fb      	ldr	r3, [r7, #12]
240124b6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
240124b8:	68fb      	ldr	r3, [r7, #12]
240124ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240124bc:	2b00      	cmp	r3, #0
240124be:	d1de      	bne.n	2401247e <HAL_QSPI_Receive+0x9a>
240124c0:	e000      	b.n	240124c4 <HAL_QSPI_Receive+0xe0>
          break;
240124c2:	bf00      	nop
      }

      if (status == HAL_OK)
240124c4:	7ffb      	ldrb	r3, [r7, #31]
240124c6:	2b00      	cmp	r3, #0
240124c8:	d110      	bne.n	240124ec <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
240124ca:	687b      	ldr	r3, [r7, #4]
240124cc:	9300      	str	r3, [sp, #0]
240124ce:	69bb      	ldr	r3, [r7, #24]
240124d0:	2201      	movs	r2, #1
240124d2:	2102      	movs	r1, #2
240124d4:	68f8      	ldr	r0, [r7, #12]
240124d6:	f000 fe84 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
240124da:	4603      	mov	r3, r0
240124dc:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
240124de:	7ffb      	ldrb	r3, [r7, #31]
240124e0:	2b00      	cmp	r3, #0
240124e2:	d103      	bne.n	240124ec <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240124e4:	68fb      	ldr	r3, [r7, #12]
240124e6:	681b      	ldr	r3, [r3, #0]
240124e8:	2202      	movs	r2, #2
240124ea:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
240124ec:	68fb      	ldr	r3, [r7, #12]
240124ee:	2201      	movs	r2, #1
240124f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240124f4:	e00a      	b.n	2401250c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240124f6:	68fb      	ldr	r3, [r7, #12]
240124f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240124fa:	f043 0208 	orr.w	r2, r3, #8
240124fe:	68fb      	ldr	r3, [r7, #12]
24012500:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24012502:	2301      	movs	r3, #1
24012504:	77fb      	strb	r3, [r7, #31]
24012506:	e001      	b.n	2401250c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
24012508:	2302      	movs	r3, #2
2401250a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2401250c:	68fb      	ldr	r3, [r7, #12]
2401250e:	2200      	movs	r2, #0
24012510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24012514:	7ffb      	ldrb	r3, [r7, #31]
}
24012516:	4618      	mov	r0, r3
24012518:	3720      	adds	r7, #32
2401251a:	46bd      	mov	sp, r7
2401251c:	bd80      	pop	{r7, pc}

2401251e <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2401251e:	b480      	push	{r7}
24012520:	b085      	sub	sp, #20
24012522:	af00      	add	r7, sp, #0
24012524:	6078      	str	r0, [r7, #4]
24012526:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24012528:	2300      	movs	r3, #0
2401252a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
2401252c:	687b      	ldr	r3, [r7, #4]
2401252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012532:	b2db      	uxtb	r3, r3
24012534:	2b01      	cmp	r3, #1
24012536:	d101      	bne.n	2401253c <HAL_QSPI_Transmit_IT+0x1e>
24012538:	2302      	movs	r3, #2
2401253a:	e04f      	b.n	240125dc <HAL_QSPI_Transmit_IT+0xbe>
2401253c:	687b      	ldr	r3, [r7, #4]
2401253e:	2201      	movs	r2, #1
24012540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012544:	687b      	ldr	r3, [r7, #4]
24012546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401254a:	b2db      	uxtb	r3, r3
2401254c:	2b01      	cmp	r3, #1
2401254e:	d13e      	bne.n	240125ce <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012550:	687b      	ldr	r3, [r7, #4]
24012552:	2200      	movs	r2, #0
24012554:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24012556:	683b      	ldr	r3, [r7, #0]
24012558:	2b00      	cmp	r3, #0
2401255a:	d02b      	beq.n	240125b4 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2401255c:	687b      	ldr	r3, [r7, #4]
2401255e:	2212      	movs	r2, #18
24012560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24012564:	687b      	ldr	r3, [r7, #4]
24012566:	681b      	ldr	r3, [r3, #0]
24012568:	691b      	ldr	r3, [r3, #16]
2401256a:	1c5a      	adds	r2, r3, #1
2401256c:	687b      	ldr	r3, [r7, #4]
2401256e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24012570:	687b      	ldr	r3, [r7, #4]
24012572:	681b      	ldr	r3, [r3, #0]
24012574:	691b      	ldr	r3, [r3, #16]
24012576:	1c5a      	adds	r2, r3, #1
24012578:	687b      	ldr	r3, [r7, #4]
2401257a:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
2401257c:	687b      	ldr	r3, [r7, #4]
2401257e:	683a      	ldr	r2, [r7, #0]
24012580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24012582:	687b      	ldr	r3, [r7, #4]
24012584:	681b      	ldr	r3, [r3, #0]
24012586:	2203      	movs	r2, #3
24012588:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2401258a:	687b      	ldr	r3, [r7, #4]
2401258c:	681b      	ldr	r3, [r3, #0]
2401258e:	695a      	ldr	r2, [r3, #20]
24012590:	687b      	ldr	r3, [r7, #4]
24012592:	681b      	ldr	r3, [r3, #0]
24012594:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012598:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2401259a:	687b      	ldr	r3, [r7, #4]
2401259c:	2200      	movs	r2, #0
2401259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
240125a2:	687b      	ldr	r3, [r7, #4]
240125a4:	681b      	ldr	r3, [r3, #0]
240125a6:	681a      	ldr	r2, [r3, #0]
240125a8:	687b      	ldr	r3, [r7, #4]
240125aa:	681b      	ldr	r3, [r3, #0]
240125ac:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
240125b0:	601a      	str	r2, [r3, #0]
240125b2:	e012      	b.n	240125da <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240125b4:	687b      	ldr	r3, [r7, #4]
240125b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240125b8:	f043 0208 	orr.w	r2, r3, #8
240125bc:	687b      	ldr	r3, [r7, #4]
240125be:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240125c0:	2301      	movs	r3, #1
240125c2:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240125c4:	687b      	ldr	r3, [r7, #4]
240125c6:	2200      	movs	r2, #0
240125c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240125cc:	e005      	b.n	240125da <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
240125ce:	2302      	movs	r3, #2
240125d0:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240125d2:	687b      	ldr	r3, [r7, #4]
240125d4:	2200      	movs	r2, #0
240125d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
240125da:	7bfb      	ldrb	r3, [r7, #15]
}
240125dc:	4618      	mov	r0, r3
240125de:	3714      	adds	r7, #20
240125e0:	46bd      	mov	sp, r7
240125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240125e6:	4770      	bx	lr

240125e8 <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240125e8:	b480      	push	{r7}
240125ea:	b085      	sub	sp, #20
240125ec:	af00      	add	r7, sp, #0
240125ee:	6078      	str	r0, [r7, #4]
240125f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240125f2:	2300      	movs	r3, #0
240125f4:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240125f6:	687b      	ldr	r3, [r7, #4]
240125f8:	681b      	ldr	r3, [r3, #0]
240125fa:	699b      	ldr	r3, [r3, #24]
240125fc:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
240125fe:	687b      	ldr	r3, [r7, #4]
24012600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012604:	b2db      	uxtb	r3, r3
24012606:	2b01      	cmp	r3, #1
24012608:	d101      	bne.n	2401260e <HAL_QSPI_Receive_IT+0x26>
2401260a:	2302      	movs	r3, #2
2401260c:	e055      	b.n	240126ba <HAL_QSPI_Receive_IT+0xd2>
2401260e:	687b      	ldr	r3, [r7, #4]
24012610:	2201      	movs	r2, #1
24012612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012616:	687b      	ldr	r3, [r7, #4]
24012618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401261c:	b2db      	uxtb	r3, r3
2401261e:	2b01      	cmp	r3, #1
24012620:	d144      	bne.n	240126ac <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012622:	687b      	ldr	r3, [r7, #4]
24012624:	2200      	movs	r2, #0
24012626:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24012628:	683b      	ldr	r3, [r7, #0]
2401262a:	2b00      	cmp	r3, #0
2401262c:	d031      	beq.n	24012692 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2401262e:	687b      	ldr	r3, [r7, #4]
24012630:	2222      	movs	r2, #34	; 0x22
24012632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24012636:	687b      	ldr	r3, [r7, #4]
24012638:	681b      	ldr	r3, [r3, #0]
2401263a:	691b      	ldr	r3, [r3, #16]
2401263c:	1c5a      	adds	r2, r3, #1
2401263e:	687b      	ldr	r3, [r7, #4]
24012640:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24012642:	687b      	ldr	r3, [r7, #4]
24012644:	681b      	ldr	r3, [r3, #0]
24012646:	691b      	ldr	r3, [r3, #16]
24012648:	1c5a      	adds	r2, r3, #1
2401264a:	687b      	ldr	r3, [r7, #4]
2401264c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2401264e:	687b      	ldr	r3, [r7, #4]
24012650:	683a      	ldr	r2, [r7, #0]
24012652:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24012654:	687b      	ldr	r3, [r7, #4]
24012656:	681b      	ldr	r3, [r3, #0]
24012658:	2203      	movs	r2, #3
2401265a:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2401265c:	687b      	ldr	r3, [r7, #4]
2401265e:	681b      	ldr	r3, [r3, #0]
24012660:	695b      	ldr	r3, [r3, #20]
24012662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24012666:	687b      	ldr	r3, [r7, #4]
24012668:	681b      	ldr	r3, [r3, #0]
2401266a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
2401266e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24012670:	687b      	ldr	r3, [r7, #4]
24012672:	681b      	ldr	r3, [r3, #0]
24012674:	68ba      	ldr	r2, [r7, #8]
24012676:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012678:	687b      	ldr	r3, [r7, #4]
2401267a:	2200      	movs	r2, #0
2401267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24012680:	687b      	ldr	r3, [r7, #4]
24012682:	681b      	ldr	r3, [r3, #0]
24012684:	681a      	ldr	r2, [r3, #0]
24012686:	687b      	ldr	r3, [r7, #4]
24012688:	681b      	ldr	r3, [r3, #0]
2401268a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
2401268e:	601a      	str	r2, [r3, #0]
24012690:	e012      	b.n	240126b8 <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24012692:	687b      	ldr	r3, [r7, #4]
24012694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012696:	f043 0208 	orr.w	r2, r3, #8
2401269a:	687b      	ldr	r3, [r7, #4]
2401269c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2401269e:	2301      	movs	r3, #1
240126a0:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240126a2:	687b      	ldr	r3, [r7, #4]
240126a4:	2200      	movs	r2, #0
240126a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240126aa:	e005      	b.n	240126b8 <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
240126ac:	2302      	movs	r3, #2
240126ae:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240126b0:	687b      	ldr	r3, [r7, #4]
240126b2:	2200      	movs	r2, #0
240126b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
240126b8:	7bfb      	ldrb	r3, [r7, #15]
}
240126ba:	4618      	mov	r0, r3
240126bc:	3714      	adds	r7, #20
240126be:	46bd      	mov	sp, r7
240126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240126c4:	4770      	bx	lr
	...

240126c8 <HAL_QSPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240126c8:	b590      	push	{r4, r7, lr}
240126ca:	b087      	sub	sp, #28
240126cc:	af02      	add	r7, sp, #8
240126ce:	6078      	str	r0, [r7, #4]
240126d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240126d2:	2300      	movs	r3, #0
240126d4:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
240126d6:	687b      	ldr	r3, [r7, #4]
240126d8:	681b      	ldr	r3, [r3, #0]
240126da:	691b      	ldr	r3, [r3, #16]
240126dc:	3301      	adds	r3, #1
240126de:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
240126e0:	687b      	ldr	r3, [r7, #4]
240126e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240126e6:	b2db      	uxtb	r3, r3
240126e8:	2b01      	cmp	r3, #1
240126ea:	d101      	bne.n	240126f0 <HAL_QSPI_Transmit_DMA+0x28>
240126ec:	2302      	movs	r3, #2
240126ee:	e0cb      	b.n	24012888 <HAL_QSPI_Transmit_DMA+0x1c0>
240126f0:	687b      	ldr	r3, [r7, #4]
240126f2:	2201      	movs	r2, #1
240126f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240126f8:	687b      	ldr	r3, [r7, #4]
240126fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240126fe:	b2db      	uxtb	r3, r3
24012700:	2b01      	cmp	r3, #1
24012702:	f040 80ba 	bne.w	2401287a <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012706:	687b      	ldr	r3, [r7, #4]
24012708:	2200      	movs	r2, #0
2401270a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2401270c:	683b      	ldr	r3, [r7, #0]
2401270e:	2b00      	cmp	r3, #0
24012710:	f000 80a6 	beq.w	24012860 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
24012714:	687b      	ldr	r3, [r7, #4]
24012716:	68ba      	ldr	r2, [r7, #8]
24012718:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2401271a:	687b      	ldr	r3, [r7, #4]
2401271c:	2212      	movs	r2, #18
2401271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24012722:	687b      	ldr	r3, [r7, #4]
24012724:	681b      	ldr	r3, [r3, #0]
24012726:	2203      	movs	r2, #3
24012728:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
2401272a:	687b      	ldr	r3, [r7, #4]
2401272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2401272e:	687b      	ldr	r3, [r7, #4]
24012730:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
24012732:	687b      	ldr	r3, [r7, #4]
24012734:	683a      	ldr	r2, [r7, #0]
24012736:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012738:	687b      	ldr	r3, [r7, #4]
2401273a:	681b      	ldr	r3, [r3, #0]
2401273c:	695a      	ldr	r2, [r3, #20]
2401273e:	687b      	ldr	r3, [r7, #4]
24012740:	681b      	ldr	r3, [r3, #0]
24012742:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012746:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
24012748:	687b      	ldr	r3, [r7, #4]
2401274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401274c:	4a50      	ldr	r2, [pc, #320]	; (24012890 <HAL_QSPI_Transmit_DMA+0x1c8>)
2401274e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24012750:	687b      	ldr	r3, [r7, #4]
24012752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012754:	4a4f      	ldr	r2, [pc, #316]	; (24012894 <HAL_QSPI_Transmit_DMA+0x1cc>)
24012756:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24012758:	687b      	ldr	r3, [r7, #4]
2401275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401275c:	2200      	movs	r2, #0
2401275e:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
24012760:	687b      	ldr	r3, [r7, #4]
24012762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012764:	681b      	ldr	r3, [r3, #0]
24012766:	6919      	ldr	r1, [r3, #16]
24012768:	687b      	ldr	r3, [r7, #4]
2401276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401276c:	681a      	ldr	r2, [r3, #0]
2401276e:	4b4a      	ldr	r3, [pc, #296]	; (24012898 <HAL_QSPI_Transmit_DMA+0x1d0>)
24012770:	400b      	ands	r3, r1
24012772:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
24012774:	687b      	ldr	r3, [r7, #4]
24012776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012778:	69db      	ldr	r3, [r3, #28]
2401277a:	2b00      	cmp	r3, #0
2401277c:	d10c      	bne.n	24012798 <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
2401277e:	687b      	ldr	r3, [r7, #4]
24012780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012782:	681b      	ldr	r3, [r3, #0]
24012784:	691a      	ldr	r2, [r3, #16]
24012786:	4b45      	ldr	r3, [pc, #276]	; (2401289c <HAL_QSPI_Transmit_DMA+0x1d4>)
24012788:	4013      	ands	r3, r2
2401278a:	687a      	ldr	r2, [r7, #4]
2401278c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2401278e:	6812      	ldr	r2, [r2, #0]
24012790:	f043 0302 	orr.w	r3, r3, #2
24012794:	6113      	str	r3, [r2, #16]
24012796:	e02c      	b.n	240127f2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
24012798:	687b      	ldr	r3, [r7, #4]
2401279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401279c:	69db      	ldr	r3, [r3, #28]
2401279e:	2b10      	cmp	r3, #16
240127a0:	d10c      	bne.n	240127bc <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
240127a2:	687b      	ldr	r3, [r7, #4]
240127a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127a6:	681b      	ldr	r3, [r3, #0]
240127a8:	691a      	ldr	r2, [r3, #16]
240127aa:	4b3c      	ldr	r3, [pc, #240]	; (2401289c <HAL_QSPI_Transmit_DMA+0x1d4>)
240127ac:	4013      	ands	r3, r2
240127ae:	687a      	ldr	r2, [r7, #4]
240127b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
240127b2:	6812      	ldr	r2, [r2, #0]
240127b4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
240127b8:	6113      	str	r3, [r2, #16]
240127ba:	e01a      	b.n	240127f2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
240127bc:	687b      	ldr	r3, [r7, #4]
240127be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127c0:	69db      	ldr	r3, [r3, #28]
240127c2:	2b20      	cmp	r3, #32
240127c4:	d10d      	bne.n	240127e2 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
240127c6:	687b      	ldr	r3, [r7, #4]
240127c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127ca:	681b      	ldr	r3, [r3, #0]
240127cc:	691b      	ldr	r3, [r3, #16]
240127ce:	4a33      	ldr	r2, [pc, #204]	; (2401289c <HAL_QSPI_Transmit_DMA+0x1d4>)
240127d0:	401a      	ands	r2, r3
240127d2:	687b      	ldr	r3, [r7, #4]
240127d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127d6:	6819      	ldr	r1, [r3, #0]
240127d8:	f240 2302 	movw	r3, #514	; 0x202
240127dc:	4313      	orrs	r3, r2
240127de:	610b      	str	r3, [r1, #16]
240127e0:	e007      	b.n	240127f2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240127e2:	687b      	ldr	r3, [r7, #4]
240127e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240127e6:	f043 0204 	orr.w	r2, r3, #4
240127ea:	687b      	ldr	r3, [r7, #4]
240127ec:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
240127ee:	2301      	movs	r3, #1
240127f0:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
240127f2:	687b      	ldr	r3, [r7, #4]
240127f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
240127f6:	6839      	ldr	r1, [r7, #0]
240127f8:	687b      	ldr	r3, [r7, #4]
240127fa:	681b      	ldr	r3, [r3, #0]
240127fc:	3320      	adds	r3, #32
240127fe:	461c      	mov	r4, r3
24012800:	687b      	ldr	r3, [r7, #4]
24012802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24012804:	2201      	movs	r2, #1
24012806:	9200      	str	r2, [sp, #0]
24012808:	4622      	mov	r2, r4
2401280a:	f7fd feb8 	bl	2401057e <HAL_MDMA_Start_IT>
2401280e:	4603      	mov	r3, r0
24012810:	2b00      	cmp	r3, #0
24012812:	d114      	bne.n	2401283e <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012814:	687b      	ldr	r3, [r7, #4]
24012816:	2200      	movs	r2, #0
24012818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
2401281c:	687b      	ldr	r3, [r7, #4]
2401281e:	681b      	ldr	r3, [r3, #0]
24012820:	681a      	ldr	r2, [r3, #0]
24012822:	687b      	ldr	r3, [r7, #4]
24012824:	681b      	ldr	r3, [r3, #0]
24012826:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2401282a:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401282c:	687b      	ldr	r3, [r7, #4]
2401282e:	681b      	ldr	r3, [r3, #0]
24012830:	681a      	ldr	r2, [r3, #0]
24012832:	687b      	ldr	r3, [r7, #4]
24012834:	681b      	ldr	r3, [r3, #0]
24012836:	f042 0204 	orr.w	r2, r2, #4
2401283a:	601a      	str	r2, [r3, #0]
2401283c:	e023      	b.n	24012886 <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
2401283e:	2301      	movs	r3, #1
24012840:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012842:	687b      	ldr	r3, [r7, #4]
24012844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012846:	f043 0204 	orr.w	r2, r3, #4
2401284a:	687b      	ldr	r3, [r7, #4]
2401284c:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
2401284e:	687b      	ldr	r3, [r7, #4]
24012850:	2201      	movs	r2, #1
24012852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012856:	687b      	ldr	r3, [r7, #4]
24012858:	2200      	movs	r2, #0
2401285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2401285e:	e012      	b.n	24012886 <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24012860:	687b      	ldr	r3, [r7, #4]
24012862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012864:	f043 0208 	orr.w	r2, r3, #8
24012868:	687b      	ldr	r3, [r7, #4]
2401286a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2401286c:	2301      	movs	r3, #1
2401286e:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012870:	687b      	ldr	r3, [r7, #4]
24012872:	2200      	movs	r2, #0
24012874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012878:	e005      	b.n	24012886 <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
2401287a:	2302      	movs	r3, #2
2401287c:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2401287e:	687b      	ldr	r3, [r7, #4]
24012880:	2200      	movs	r2, #0
24012882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24012886:	7bfb      	ldrb	r3, [r7, #15]
}
24012888:	4618      	mov	r0, r3
2401288a:	3714      	adds	r7, #20
2401288c:	46bd      	mov	sp, r7
2401288e:	bd90      	pop	{r4, r7, pc}
24012890:	24013109 	.word	0x24013109
24012894:	24013139 	.word	0x24013139
24012898:	fffff3f3 	.word	0xfffff3f3
2401289c:	fffffcfc 	.word	0xfffffcfc

240128a0 <HAL_QSPI_Receive_DMA>:
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240128a0:	b590      	push	{r4, r7, lr}
240128a2:	b089      	sub	sp, #36	; 0x24
240128a4:	af02      	add	r7, sp, #8
240128a6:	6078      	str	r0, [r7, #4]
240128a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240128aa:	2300      	movs	r3, #0
240128ac:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240128ae:	687b      	ldr	r3, [r7, #4]
240128b0:	681b      	ldr	r3, [r3, #0]
240128b2:	699b      	ldr	r3, [r3, #24]
240128b4:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
240128b6:	687b      	ldr	r3, [r7, #4]
240128b8:	681b      	ldr	r3, [r3, #0]
240128ba:	691b      	ldr	r3, [r3, #16]
240128bc:	3301      	adds	r3, #1
240128be:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
240128c0:	687b      	ldr	r3, [r7, #4]
240128c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240128c6:	b2db      	uxtb	r3, r3
240128c8:	2b01      	cmp	r3, #1
240128ca:	d101      	bne.n	240128d0 <HAL_QSPI_Receive_DMA+0x30>
240128cc:	2302      	movs	r3, #2
240128ce:	e0d1      	b.n	24012a74 <HAL_QSPI_Receive_DMA+0x1d4>
240128d0:	687b      	ldr	r3, [r7, #4]
240128d2:	2201      	movs	r2, #1
240128d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240128d8:	687b      	ldr	r3, [r7, #4]
240128da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240128de:	b2db      	uxtb	r3, r3
240128e0:	2b01      	cmp	r3, #1
240128e2:	f040 80c0 	bne.w	24012a66 <HAL_QSPI_Receive_DMA+0x1c6>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240128e6:	687b      	ldr	r3, [r7, #4]
240128e8:	2200      	movs	r2, #0
240128ea:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240128ec:	683b      	ldr	r3, [r7, #0]
240128ee:	2b00      	cmp	r3, #0
240128f0:	f000 80ac 	beq.w	24012a4c <HAL_QSPI_Receive_DMA+0x1ac>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
240128f4:	687b      	ldr	r3, [r7, #4]
240128f6:	68fa      	ldr	r2, [r7, #12]
240128f8:	639a      	str	r2, [r3, #56]	; 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240128fa:	687b      	ldr	r3, [r7, #4]
240128fc:	2222      	movs	r2, #34	; 0x22
240128fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24012902:	687b      	ldr	r3, [r7, #4]
24012904:	681b      	ldr	r3, [r3, #0]
24012906:	2203      	movs	r2, #3
24012908:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
2401290a:	687b      	ldr	r3, [r7, #4]
2401290c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2401290e:	687b      	ldr	r3, [r7, #4]
24012910:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
24012912:	687b      	ldr	r3, [r7, #4]
24012914:	683a      	ldr	r2, [r7, #0]
24012916:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
24012918:	687b      	ldr	r3, [r7, #4]
2401291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401291c:	4a57      	ldr	r2, [pc, #348]	; (24012a7c <HAL_QSPI_Receive_DMA+0x1dc>)
2401291e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24012920:	687b      	ldr	r3, [r7, #4]
24012922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012924:	4a56      	ldr	r2, [pc, #344]	; (24012a80 <HAL_QSPI_Receive_DMA+0x1e0>)
24012926:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24012928:	687b      	ldr	r3, [r7, #4]
2401292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401292c:	2200      	movs	r2, #0
2401292e:	659a      	str	r2, [r3, #88]	; 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
24012930:	687b      	ldr	r3, [r7, #4]
24012932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012934:	681b      	ldr	r3, [r3, #0]
24012936:	6919      	ldr	r1, [r3, #16]
24012938:	687b      	ldr	r3, [r7, #4]
2401293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401293c:	681a      	ldr	r2, [r3, #0]
2401293e:	4b51      	ldr	r3, [pc, #324]	; (24012a84 <HAL_QSPI_Receive_DMA+0x1e4>)
24012940:	400b      	ands	r3, r1
24012942:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
24012944:	687b      	ldr	r3, [r7, #4]
24012946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012948:	6a1b      	ldr	r3, [r3, #32]
2401294a:	2b00      	cmp	r3, #0
2401294c:	d10c      	bne.n	24012968 <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
2401294e:	687b      	ldr	r3, [r7, #4]
24012950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012952:	681b      	ldr	r3, [r3, #0]
24012954:	691a      	ldr	r2, [r3, #16]
24012956:	4b4c      	ldr	r3, [pc, #304]	; (24012a88 <HAL_QSPI_Receive_DMA+0x1e8>)
24012958:	4013      	ands	r3, r2
2401295a:	687a      	ldr	r2, [r7, #4]
2401295c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2401295e:	6812      	ldr	r2, [r2, #0]
24012960:	f043 0308 	orr.w	r3, r3, #8
24012964:	6113      	str	r3, [r2, #16]
24012966:	e02c      	b.n	240129c2 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
24012968:	687b      	ldr	r3, [r7, #4]
2401296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401296c:	6a1b      	ldr	r3, [r3, #32]
2401296e:	2b40      	cmp	r3, #64	; 0x40
24012970:	d10c      	bne.n	2401298c <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
24012972:	687b      	ldr	r3, [r7, #4]
24012974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012976:	681b      	ldr	r3, [r3, #0]
24012978:	691a      	ldr	r2, [r3, #16]
2401297a:	4b43      	ldr	r3, [pc, #268]	; (24012a88 <HAL_QSPI_Receive_DMA+0x1e8>)
2401297c:	4013      	ands	r3, r2
2401297e:	687a      	ldr	r2, [r7, #4]
24012980:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24012982:	6812      	ldr	r2, [r2, #0]
24012984:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
24012988:	6113      	str	r3, [r2, #16]
2401298a:	e01a      	b.n	240129c2 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
2401298c:	687b      	ldr	r3, [r7, #4]
2401298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012990:	6a1b      	ldr	r3, [r3, #32]
24012992:	2b80      	cmp	r3, #128	; 0x80
24012994:	d10d      	bne.n	240129b2 <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
24012996:	687b      	ldr	r3, [r7, #4]
24012998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401299a:	681b      	ldr	r3, [r3, #0]
2401299c:	691b      	ldr	r3, [r3, #16]
2401299e:	4a3a      	ldr	r2, [pc, #232]	; (24012a88 <HAL_QSPI_Receive_DMA+0x1e8>)
240129a0:	401a      	ands	r2, r3
240129a2:	687b      	ldr	r3, [r7, #4]
240129a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240129a6:	6819      	ldr	r1, [r3, #0]
240129a8:	f640 0308 	movw	r3, #2056	; 0x808
240129ac:	4313      	orrs	r3, r2
240129ae:	610b      	str	r3, [r1, #16]
240129b0:	e007      	b.n	240129c2 <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240129b2:	687b      	ldr	r3, [r7, #4]
240129b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240129b6:	f043 0204 	orr.w	r2, r3, #4
240129ba:	687b      	ldr	r3, [r7, #4]
240129bc:	645a      	str	r2, [r3, #68]	; 0x44
        status = HAL_ERROR;
240129be:	2301      	movs	r3, #1
240129c0:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
240129c2:	687b      	ldr	r3, [r7, #4]
240129c4:	681b      	ldr	r3, [r3, #0]
240129c6:	695b      	ldr	r3, [r3, #20]
240129c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
240129cc:	687b      	ldr	r3, [r7, #4]
240129ce:	681b      	ldr	r3, [r3, #0]
240129d0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
240129d4:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
240129d6:	687b      	ldr	r3, [r7, #4]
240129d8:	681b      	ldr	r3, [r3, #0]
240129da:	693a      	ldr	r2, [r7, #16]
240129dc:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
240129de:	687b      	ldr	r3, [r7, #4]
240129e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
240129e2:	687b      	ldr	r3, [r7, #4]
240129e4:	681b      	ldr	r3, [r3, #0]
240129e6:	3320      	adds	r3, #32
240129e8:	461c      	mov	r4, r3
240129ea:	683a      	ldr	r2, [r7, #0]
240129ec:	687b      	ldr	r3, [r7, #4]
240129ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240129f0:	2101      	movs	r1, #1
240129f2:	9100      	str	r1, [sp, #0]
240129f4:	4621      	mov	r1, r4
240129f6:	f7fd fdc2 	bl	2401057e <HAL_MDMA_Start_IT>
240129fa:	4603      	mov	r3, r0
240129fc:	2b00      	cmp	r3, #0
240129fe:	d114      	bne.n	24012a2a <HAL_QSPI_Receive_DMA+0x18a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012a00:	687b      	ldr	r3, [r7, #4]
24012a02:	2200      	movs	r2, #0
24012a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
24012a08:	687b      	ldr	r3, [r7, #4]
24012a0a:	681b      	ldr	r3, [r3, #0]
24012a0c:	681a      	ldr	r2, [r3, #0]
24012a0e:	687b      	ldr	r3, [r7, #4]
24012a10:	681b      	ldr	r3, [r3, #0]
24012a12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24012a16:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24012a18:	687b      	ldr	r3, [r7, #4]
24012a1a:	681b      	ldr	r3, [r3, #0]
24012a1c:	681a      	ldr	r2, [r3, #0]
24012a1e:	687b      	ldr	r3, [r7, #4]
24012a20:	681b      	ldr	r3, [r3, #0]
24012a22:	f042 0204 	orr.w	r2, r2, #4
24012a26:	601a      	str	r2, [r3, #0]
24012a28:	e023      	b.n	24012a72 <HAL_QSPI_Receive_DMA+0x1d2>
        }
        else
        {
          status = HAL_ERROR;
24012a2a:	2301      	movs	r3, #1
24012a2c:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012a2e:	687b      	ldr	r3, [r7, #4]
24012a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012a32:	f043 0204 	orr.w	r2, r3, #4
24012a36:	687b      	ldr	r3, [r7, #4]
24012a38:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
24012a3a:	687b      	ldr	r3, [r7, #4]
24012a3c:	2201      	movs	r2, #1
24012a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012a42:	687b      	ldr	r3, [r7, #4]
24012a44:	2200      	movs	r2, #0
24012a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012a4a:	e012      	b.n	24012a72 <HAL_QSPI_Receive_DMA+0x1d2>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24012a4c:	687b      	ldr	r3, [r7, #4]
24012a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012a50:	f043 0208 	orr.w	r2, r3, #8
24012a54:	687b      	ldr	r3, [r7, #4]
24012a56:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24012a58:	2301      	movs	r3, #1
24012a5a:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012a5c:	687b      	ldr	r3, [r7, #4]
24012a5e:	2200      	movs	r2, #0
24012a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012a64:	e005      	b.n	24012a72 <HAL_QSPI_Receive_DMA+0x1d2>
    }
  }
  else
  {
    status = HAL_BUSY;
24012a66:	2302      	movs	r3, #2
24012a68:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012a6a:	687b      	ldr	r3, [r7, #4]
24012a6c:	2200      	movs	r2, #0
24012a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24012a72:	7dfb      	ldrb	r3, [r7, #23]
}
24012a74:	4618      	mov	r0, r3
24012a76:	371c      	adds	r7, #28
24012a78:	46bd      	mov	sp, r7
24012a7a:	bd90      	pop	{r4, r7, pc}
24012a7c:	240130d9 	.word	0x240130d9
24012a80:	24013139 	.word	0x24013139
24012a84:	fffffcfc 	.word	0xfffffcfc
24012a88:	fffff3f3 	.word	0xfffff3f3

24012a8c <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
24012a8c:	b580      	push	{r7, lr}
24012a8e:	b088      	sub	sp, #32
24012a90:	af02      	add	r7, sp, #8
24012a92:	60f8      	str	r0, [r7, #12]
24012a94:	60b9      	str	r1, [r7, #8]
24012a96:	607a      	str	r2, [r7, #4]
24012a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012a9a:	f7ef fbc3 	bl	24002224 <HAL_GetTick>
24012a9e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012aa0:	68fb      	ldr	r3, [r7, #12]
24012aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012aa6:	b2db      	uxtb	r3, r3
24012aa8:	2b01      	cmp	r3, #1
24012aaa:	d101      	bne.n	24012ab0 <HAL_QSPI_AutoPolling+0x24>
24012aac:	2302      	movs	r3, #2
24012aae:	e060      	b.n	24012b72 <HAL_QSPI_AutoPolling+0xe6>
24012ab0:	68fb      	ldr	r3, [r7, #12]
24012ab2:	2201      	movs	r2, #1
24012ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012ab8:	68fb      	ldr	r3, [r7, #12]
24012aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012abe:	b2db      	uxtb	r3, r3
24012ac0:	2b01      	cmp	r3, #1
24012ac2:	d14f      	bne.n	24012b64 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012ac4:	68fb      	ldr	r3, [r7, #12]
24012ac6:	2200      	movs	r2, #0
24012ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24012aca:	68fb      	ldr	r3, [r7, #12]
24012acc:	2242      	movs	r2, #66	; 0x42
24012ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24012ad2:	683b      	ldr	r3, [r7, #0]
24012ad4:	9300      	str	r3, [sp, #0]
24012ad6:	693b      	ldr	r3, [r7, #16]
24012ad8:	2200      	movs	r2, #0
24012ada:	2120      	movs	r1, #32
24012adc:	68f8      	ldr	r0, [r7, #12]
24012ade:	f000 fb80 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012ae2:	4603      	mov	r3, r0
24012ae4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012ae6:	7dfb      	ldrb	r3, [r7, #23]
24012ae8:	2b00      	cmp	r3, #0
24012aea:	d13d      	bne.n	24012b68 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
24012aec:	68fb      	ldr	r3, [r7, #12]
24012aee:	681b      	ldr	r3, [r3, #0]
24012af0:	687a      	ldr	r2, [r7, #4]
24012af2:	6812      	ldr	r2, [r2, #0]
24012af4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24012af6:	68fb      	ldr	r3, [r7, #12]
24012af8:	681b      	ldr	r3, [r3, #0]
24012afa:	687a      	ldr	r2, [r7, #4]
24012afc:	6852      	ldr	r2, [r2, #4]
24012afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
24012b00:	68fb      	ldr	r3, [r7, #12]
24012b02:	681b      	ldr	r3, [r3, #0]
24012b04:	687a      	ldr	r2, [r7, #4]
24012b06:	6892      	ldr	r2, [r2, #8]
24012b08:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
24012b0a:	68fb      	ldr	r3, [r7, #12]
24012b0c:	681b      	ldr	r3, [r3, #0]
24012b0e:	681b      	ldr	r3, [r3, #0]
24012b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
24012b14:	687b      	ldr	r3, [r7, #4]
24012b16:	691b      	ldr	r3, [r3, #16]
24012b18:	431a      	orrs	r2, r3
24012b1a:	68fb      	ldr	r3, [r7, #12]
24012b1c:	681b      	ldr	r3, [r3, #0]
24012b1e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
24012b22:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
24012b24:	687b      	ldr	r3, [r7, #4]
24012b26:	68da      	ldr	r2, [r3, #12]
24012b28:	68bb      	ldr	r3, [r7, #8]
24012b2a:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
24012b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24012b30:	68b9      	ldr	r1, [r7, #8]
24012b32:	68f8      	ldr	r0, [r7, #12]
24012b34:	f000 fb8c 	bl	24013250 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
24012b38:	683b      	ldr	r3, [r7, #0]
24012b3a:	9300      	str	r3, [sp, #0]
24012b3c:	693b      	ldr	r3, [r7, #16]
24012b3e:	2201      	movs	r2, #1
24012b40:	2108      	movs	r1, #8
24012b42:	68f8      	ldr	r0, [r7, #12]
24012b44:	f000 fb4d 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012b48:	4603      	mov	r3, r0
24012b4a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
24012b4c:	7dfb      	ldrb	r3, [r7, #23]
24012b4e:	2b00      	cmp	r3, #0
24012b50:	d10a      	bne.n	24012b68 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
24012b52:	68fb      	ldr	r3, [r7, #12]
24012b54:	681b      	ldr	r3, [r3, #0]
24012b56:	2208      	movs	r2, #8
24012b58:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24012b5a:	68fb      	ldr	r3, [r7, #12]
24012b5c:	2201      	movs	r2, #1
24012b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24012b62:	e001      	b.n	24012b68 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24012b64:	2302      	movs	r3, #2
24012b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24012b68:	68fb      	ldr	r3, [r7, #12]
24012b6a:	2200      	movs	r2, #0
24012b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24012b70:	7dfb      	ldrb	r3, [r7, #23]
}
24012b72:	4618      	mov	r0, r3
24012b74:	3718      	adds	r7, #24
24012b76:	46bd      	mov	sp, r7
24012b78:	bd80      	pop	{r7, pc}

24012b7a <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
24012b7a:	b580      	push	{r7, lr}
24012b7c:	b088      	sub	sp, #32
24012b7e:	af02      	add	r7, sp, #8
24012b80:	60f8      	str	r0, [r7, #12]
24012b82:	60b9      	str	r1, [r7, #8]
24012b84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012b86:	f7ef fb4d 	bl	24002224 <HAL_GetTick>
24012b8a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012b8c:	68fb      	ldr	r3, [r7, #12]
24012b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012b92:	b2db      	uxtb	r3, r3
24012b94:	2b01      	cmp	r3, #1
24012b96:	d101      	bne.n	24012b9c <HAL_QSPI_AutoPolling_IT+0x22>
24012b98:	2302      	movs	r3, #2
24012b9a:	e062      	b.n	24012c62 <HAL_QSPI_AutoPolling_IT+0xe8>
24012b9c:	68fb      	ldr	r3, [r7, #12]
24012b9e:	2201      	movs	r2, #1
24012ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012ba4:	68fb      	ldr	r3, [r7, #12]
24012ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012baa:	b2db      	uxtb	r3, r3
24012bac:	2b01      	cmp	r3, #1
24012bae:	d151      	bne.n	24012c54 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012bb0:	68fb      	ldr	r3, [r7, #12]
24012bb2:	2200      	movs	r2, #0
24012bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24012bb6:	68fb      	ldr	r3, [r7, #12]
24012bb8:	2242      	movs	r2, #66	; 0x42
24012bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24012bbe:	68fb      	ldr	r3, [r7, #12]
24012bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012bc2:	9300      	str	r3, [sp, #0]
24012bc4:	693b      	ldr	r3, [r7, #16]
24012bc6:	2200      	movs	r2, #0
24012bc8:	2120      	movs	r1, #32
24012bca:	68f8      	ldr	r0, [r7, #12]
24012bcc:	f000 fb09 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012bd0:	4603      	mov	r3, r0
24012bd2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012bd4:	7dfb      	ldrb	r3, [r7, #23]
24012bd6:	2b00      	cmp	r3, #0
24012bd8:	d137      	bne.n	24012c4a <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
24012bda:	68fb      	ldr	r3, [r7, #12]
24012bdc:	681b      	ldr	r3, [r3, #0]
24012bde:	687a      	ldr	r2, [r7, #4]
24012be0:	6812      	ldr	r2, [r2, #0]
24012be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24012be4:	68fb      	ldr	r3, [r7, #12]
24012be6:	681b      	ldr	r3, [r3, #0]
24012be8:	687a      	ldr	r2, [r7, #4]
24012bea:	6852      	ldr	r2, [r2, #4]
24012bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
24012bee:	68fb      	ldr	r3, [r7, #12]
24012bf0:	681b      	ldr	r3, [r3, #0]
24012bf2:	687a      	ldr	r2, [r7, #4]
24012bf4:	6892      	ldr	r2, [r2, #8]
24012bf6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
24012bf8:	68fb      	ldr	r3, [r7, #12]
24012bfa:	681b      	ldr	r3, [r3, #0]
24012bfc:	681b      	ldr	r3, [r3, #0]
24012bfe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
24012c02:	687b      	ldr	r3, [r7, #4]
24012c04:	691a      	ldr	r2, [r3, #16]
24012c06:	687b      	ldr	r3, [r7, #4]
24012c08:	695b      	ldr	r3, [r3, #20]
24012c0a:	431a      	orrs	r2, r3
24012c0c:	68fb      	ldr	r3, [r7, #12]
24012c0e:	681b      	ldr	r3, [r3, #0]
24012c10:	430a      	orrs	r2, r1
24012c12:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
24012c14:	68fb      	ldr	r3, [r7, #12]
24012c16:	681b      	ldr	r3, [r3, #0]
24012c18:	2209      	movs	r2, #9
24012c1a:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
24012c1c:	687b      	ldr	r3, [r7, #4]
24012c1e:	68da      	ldr	r2, [r3, #12]
24012c20:	68bb      	ldr	r3, [r7, #8]
24012c22:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
24012c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24012c28:	68b9      	ldr	r1, [r7, #8]
24012c2a:	68f8      	ldr	r0, [r7, #12]
24012c2c:	f000 fb10 	bl	24013250 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012c30:	68fb      	ldr	r3, [r7, #12]
24012c32:	2200      	movs	r2, #0
24012c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
24012c38:	68fb      	ldr	r3, [r7, #12]
24012c3a:	681b      	ldr	r3, [r3, #0]
24012c3c:	681a      	ldr	r2, [r3, #0]
24012c3e:	68fb      	ldr	r3, [r7, #12]
24012c40:	681b      	ldr	r3, [r3, #0]
24012c42:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
24012c46:	601a      	str	r2, [r3, #0]
24012c48:	e00a      	b.n	24012c60 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012c4a:	68fb      	ldr	r3, [r7, #12]
24012c4c:	2200      	movs	r2, #0
24012c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012c52:	e005      	b.n	24012c60 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
24012c54:	2302      	movs	r3, #2
24012c56:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012c58:	68fb      	ldr	r3, [r7, #12]
24012c5a:	2200      	movs	r2, #0
24012c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24012c60:	7dfb      	ldrb	r3, [r7, #23]
}
24012c62:	4618      	mov	r0, r3
24012c64:	3718      	adds	r7, #24
24012c66:	46bd      	mov	sp, r7
24012c68:	bd80      	pop	{r7, pc}

24012c6a <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
24012c6a:	b580      	push	{r7, lr}
24012c6c:	b088      	sub	sp, #32
24012c6e:	af02      	add	r7, sp, #8
24012c70:	60f8      	str	r0, [r7, #12]
24012c72:	60b9      	str	r1, [r7, #8]
24012c74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012c76:	f7ef fad5 	bl	24002224 <HAL_GetTick>
24012c7a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012c7c:	68fb      	ldr	r3, [r7, #12]
24012c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012c82:	b2db      	uxtb	r3, r3
24012c84:	2b01      	cmp	r3, #1
24012c86:	d101      	bne.n	24012c8c <HAL_QSPI_MemoryMapped+0x22>
24012c88:	2302      	movs	r3, #2
24012c8a:	e04c      	b.n	24012d26 <HAL_QSPI_MemoryMapped+0xbc>
24012c8c:	68fb      	ldr	r3, [r7, #12]
24012c8e:	2201      	movs	r2, #1
24012c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012c94:	68fb      	ldr	r3, [r7, #12]
24012c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012c9a:	b2db      	uxtb	r3, r3
24012c9c:	2b01      	cmp	r3, #1
24012c9e:	d13b      	bne.n	24012d18 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012ca0:	68fb      	ldr	r3, [r7, #12]
24012ca2:	2200      	movs	r2, #0
24012ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
24012ca6:	68fb      	ldr	r3, [r7, #12]
24012ca8:	2282      	movs	r2, #130	; 0x82
24012caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24012cae:	68fb      	ldr	r3, [r7, #12]
24012cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012cb2:	9300      	str	r3, [sp, #0]
24012cb4:	693b      	ldr	r3, [r7, #16]
24012cb6:	2200      	movs	r2, #0
24012cb8:	2120      	movs	r1, #32
24012cba:	68f8      	ldr	r0, [r7, #12]
24012cbc:	f000 fa91 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012cc0:	4603      	mov	r3, r0
24012cc2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012cc4:	7dfb      	ldrb	r3, [r7, #23]
24012cc6:	2b00      	cmp	r3, #0
24012cc8:	d128      	bne.n	24012d1c <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
24012cca:	68fb      	ldr	r3, [r7, #12]
24012ccc:	681b      	ldr	r3, [r3, #0]
24012cce:	681b      	ldr	r3, [r3, #0]
24012cd0:	f023 0108 	bic.w	r1, r3, #8
24012cd4:	687b      	ldr	r3, [r7, #4]
24012cd6:	685a      	ldr	r2, [r3, #4]
24012cd8:	68fb      	ldr	r3, [r7, #12]
24012cda:	681b      	ldr	r3, [r3, #0]
24012cdc:	430a      	orrs	r2, r1
24012cde:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
24012ce0:	687b      	ldr	r3, [r7, #4]
24012ce2:	685b      	ldr	r3, [r3, #4]
24012ce4:	2b08      	cmp	r3, #8
24012ce6:	d110      	bne.n	24012d0a <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
24012ce8:	68fb      	ldr	r3, [r7, #12]
24012cea:	681b      	ldr	r3, [r3, #0]
24012cec:	687a      	ldr	r2, [r7, #4]
24012cee:	6812      	ldr	r2, [r2, #0]
24012cf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
24012cf2:	68fb      	ldr	r3, [r7, #12]
24012cf4:	681b      	ldr	r3, [r3, #0]
24012cf6:	2210      	movs	r2, #16
24012cf8:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
24012cfa:	68fb      	ldr	r3, [r7, #12]
24012cfc:	681b      	ldr	r3, [r3, #0]
24012cfe:	681a      	ldr	r2, [r3, #0]
24012d00:	68fb      	ldr	r3, [r7, #12]
24012d02:	681b      	ldr	r3, [r3, #0]
24012d04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
24012d08:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
24012d0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
24012d0e:	68b9      	ldr	r1, [r7, #8]
24012d10:	68f8      	ldr	r0, [r7, #12]
24012d12:	f000 fa9d 	bl	24013250 <QSPI_Config>
24012d16:	e001      	b.n	24012d1c <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
24012d18:	2302      	movs	r3, #2
24012d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24012d1c:	68fb      	ldr	r3, [r7, #12]
24012d1e:	2200      	movs	r2, #0
24012d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24012d24:	7dfb      	ldrb	r3, [r7, #23]
}
24012d26:	4618      	mov	r0, r3
24012d28:	3718      	adds	r7, #24
24012d2a:	46bd      	mov	sp, r7
24012d2c:	bd80      	pop	{r7, pc}

24012d2e <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
24012d2e:	b480      	push	{r7}
24012d30:	b083      	sub	sp, #12
24012d32:	af00      	add	r7, sp, #0
24012d34:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
24012d36:	bf00      	nop
24012d38:	370c      	adds	r7, #12
24012d3a:	46bd      	mov	sp, r7
24012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d40:	4770      	bx	lr

24012d42 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012d42:	b480      	push	{r7}
24012d44:	b083      	sub	sp, #12
24012d46:	af00      	add	r7, sp, #0
24012d48:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
24012d4a:	bf00      	nop
24012d4c:	370c      	adds	r7, #12
24012d4e:	46bd      	mov	sp, r7
24012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d54:	4770      	bx	lr

24012d56 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012d56:	b480      	push	{r7}
24012d58:	b083      	sub	sp, #12
24012d5a:	af00      	add	r7, sp, #0
24012d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
24012d5e:	bf00      	nop
24012d60:	370c      	adds	r7, #12
24012d62:	46bd      	mov	sp, r7
24012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d68:	4770      	bx	lr

24012d6a <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012d6a:	b480      	push	{r7}
24012d6c:	b083      	sub	sp, #12
24012d6e:	af00      	add	r7, sp, #0
24012d70:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
24012d72:	bf00      	nop
24012d74:	370c      	adds	r7, #12
24012d76:	46bd      	mov	sp, r7
24012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d7c:	4770      	bx	lr

24012d7e <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012d7e:	b480      	push	{r7}
24012d80:	b083      	sub	sp, #12
24012d82:	af00      	add	r7, sp, #0
24012d84:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
24012d86:	bf00      	nop
24012d88:	370c      	adds	r7, #12
24012d8a:	46bd      	mov	sp, r7
24012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d90:	4770      	bx	lr

24012d92 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
24012d92:	b480      	push	{r7}
24012d94:	b083      	sub	sp, #12
24012d96:	af00      	add	r7, sp, #0
24012d98:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
24012d9a:	bf00      	nop
24012d9c:	370c      	adds	r7, #12
24012d9e:	46bd      	mov	sp, r7
24012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
24012da4:	4770      	bx	lr

24012da6 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
24012da6:	b480      	push	{r7}
24012da8:	b083      	sub	sp, #12
24012daa:	af00      	add	r7, sp, #0
24012dac:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
24012dae:	bf00      	nop
24012db0:	370c      	adds	r7, #12
24012db2:	46bd      	mov	sp, r7
24012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
24012db8:	4770      	bx	lr

24012dba <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
24012dba:	b480      	push	{r7}
24012dbc:	b083      	sub	sp, #12
24012dbe:	af00      	add	r7, sp, #0
24012dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
24012dc2:	bf00      	nop
24012dc4:	370c      	adds	r7, #12
24012dc6:	46bd      	mov	sp, r7
24012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dcc:	4770      	bx	lr

24012dce <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
24012dce:	b480      	push	{r7}
24012dd0:	b083      	sub	sp, #12
24012dd2:	af00      	add	r7, sp, #0
24012dd4:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
24012dd6:	687b      	ldr	r3, [r7, #4]
24012dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012ddc:	b2db      	uxtb	r3, r3
}
24012dde:	4618      	mov	r0, r3
24012de0:	370c      	adds	r7, #12
24012de2:	46bd      	mov	sp, r7
24012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
24012de8:	4770      	bx	lr

24012dea <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
24012dea:	b480      	push	{r7}
24012dec:	b083      	sub	sp, #12
24012dee:	af00      	add	r7, sp, #0
24012df0:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
24012df2:	687b      	ldr	r3, [r7, #4]
24012df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
24012df6:	4618      	mov	r0, r3
24012df8:	370c      	adds	r7, #12
24012dfa:	46bd      	mov	sp, r7
24012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e00:	4770      	bx	lr

24012e02 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
24012e02:	b580      	push	{r7, lr}
24012e04:	b086      	sub	sp, #24
24012e06:	af02      	add	r7, sp, #8
24012e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24012e0a:	2300      	movs	r3, #0
24012e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24012e0e:	f7ef fa09 	bl	24002224 <HAL_GetTick>
24012e12:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
24012e14:	687b      	ldr	r3, [r7, #4]
24012e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012e1a:	b2db      	uxtb	r3, r3
24012e1c:	f003 0302 	and.w	r3, r3, #2
24012e20:	2b00      	cmp	r3, #0
24012e22:	d062      	beq.n	24012eea <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012e24:	687b      	ldr	r3, [r7, #4]
24012e26:	2200      	movs	r2, #0
24012e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24012e2c:	687b      	ldr	r3, [r7, #4]
24012e2e:	681b      	ldr	r3, [r3, #0]
24012e30:	681b      	ldr	r3, [r3, #0]
24012e32:	f003 0304 	and.w	r3, r3, #4
24012e36:	2b00      	cmp	r3, #0
24012e38:	d017      	beq.n	24012e6a <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24012e3a:	687b      	ldr	r3, [r7, #4]
24012e3c:	681b      	ldr	r3, [r3, #0]
24012e3e:	681a      	ldr	r2, [r3, #0]
24012e40:	687b      	ldr	r3, [r7, #4]
24012e42:	681b      	ldr	r3, [r3, #0]
24012e44:	f022 0204 	bic.w	r2, r2, #4
24012e48:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
24012e4a:	687b      	ldr	r3, [r7, #4]
24012e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012e4e:	4618      	mov	r0, r3
24012e50:	f7fd fc16 	bl	24010680 <HAL_MDMA_Abort>
24012e54:	4603      	mov	r3, r0
24012e56:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
24012e58:	7bfb      	ldrb	r3, [r7, #15]
24012e5a:	2b00      	cmp	r3, #0
24012e5c:	d005      	beq.n	24012e6a <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012e5e:	687b      	ldr	r3, [r7, #4]
24012e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012e62:	f043 0204 	orr.w	r2, r3, #4
24012e66:	687b      	ldr	r3, [r7, #4]
24012e68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
24012e6a:	687b      	ldr	r3, [r7, #4]
24012e6c:	681b      	ldr	r3, [r3, #0]
24012e6e:	689b      	ldr	r3, [r3, #8]
24012e70:	f003 0320 	and.w	r3, r3, #32
24012e74:	2b00      	cmp	r3, #0
24012e76:	d034      	beq.n	24012ee2 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24012e78:	687b      	ldr	r3, [r7, #4]
24012e7a:	681b      	ldr	r3, [r3, #0]
24012e7c:	681a      	ldr	r2, [r3, #0]
24012e7e:	687b      	ldr	r3, [r7, #4]
24012e80:	681b      	ldr	r3, [r3, #0]
24012e82:	f042 0202 	orr.w	r2, r2, #2
24012e86:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
24012e88:	687b      	ldr	r3, [r7, #4]
24012e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012e8c:	9300      	str	r3, [sp, #0]
24012e8e:	68bb      	ldr	r3, [r7, #8]
24012e90:	2201      	movs	r2, #1
24012e92:	2102      	movs	r1, #2
24012e94:	6878      	ldr	r0, [r7, #4]
24012e96:	f000 f9a4 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012e9a:	4603      	mov	r3, r0
24012e9c:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
24012e9e:	7bfb      	ldrb	r3, [r7, #15]
24012ea0:	2b00      	cmp	r3, #0
24012ea2:	d10e      	bne.n	24012ec2 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012ea4:	687b      	ldr	r3, [r7, #4]
24012ea6:	681b      	ldr	r3, [r3, #0]
24012ea8:	2202      	movs	r2, #2
24012eaa:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24012eac:	687b      	ldr	r3, [r7, #4]
24012eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012eb0:	9300      	str	r3, [sp, #0]
24012eb2:	68bb      	ldr	r3, [r7, #8]
24012eb4:	2200      	movs	r2, #0
24012eb6:	2120      	movs	r1, #32
24012eb8:	6878      	ldr	r0, [r7, #4]
24012eba:	f000 f992 	bl	240131e2 <QSPI_WaitFlagStateUntilTimeout>
24012ebe:	4603      	mov	r3, r0
24012ec0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
24012ec2:	7bfb      	ldrb	r3, [r7, #15]
24012ec4:	2b00      	cmp	r3, #0
24012ec6:	d110      	bne.n	24012eea <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24012ec8:	687b      	ldr	r3, [r7, #4]
24012eca:	681b      	ldr	r3, [r3, #0]
24012ecc:	695a      	ldr	r2, [r3, #20]
24012ece:	687b      	ldr	r3, [r7, #4]
24012ed0:	681b      	ldr	r3, [r3, #0]
24012ed2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012ed6:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24012ed8:	687b      	ldr	r3, [r7, #4]
24012eda:	2201      	movs	r2, #1
24012edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24012ee0:	e003      	b.n	24012eea <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
24012ee2:	687b      	ldr	r3, [r7, #4]
24012ee4:	2201      	movs	r2, #1
24012ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
24012eea:	7bfb      	ldrb	r3, [r7, #15]
}
24012eec:	4618      	mov	r0, r3
24012eee:	3710      	adds	r7, #16
24012ef0:	46bd      	mov	sp, r7
24012ef2:	bd80      	pop	{r7, pc}

24012ef4 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
24012ef4:	b580      	push	{r7, lr}
24012ef6:	b084      	sub	sp, #16
24012ef8:	af00      	add	r7, sp, #0
24012efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24012efc:	2300      	movs	r3, #0
24012efe:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
24012f00:	687b      	ldr	r3, [r7, #4]
24012f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012f06:	b2db      	uxtb	r3, r3
24012f08:	f003 0302 	and.w	r3, r3, #2
24012f0c:	2b00      	cmp	r3, #0
24012f0e:	d052      	beq.n	24012fb6 <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012f10:	687b      	ldr	r3, [r7, #4]
24012f12:	2200      	movs	r2, #0
24012f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
24012f18:	687b      	ldr	r3, [r7, #4]
24012f1a:	2208      	movs	r2, #8
24012f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
24012f20:	687b      	ldr	r3, [r7, #4]
24012f22:	681b      	ldr	r3, [r3, #0]
24012f24:	681a      	ldr	r2, [r3, #0]
24012f26:	687b      	ldr	r3, [r7, #4]
24012f28:	681b      	ldr	r3, [r3, #0]
24012f2a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
24012f2e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24012f30:	687b      	ldr	r3, [r7, #4]
24012f32:	681b      	ldr	r3, [r3, #0]
24012f34:	681b      	ldr	r3, [r3, #0]
24012f36:	f003 0304 	and.w	r3, r3, #4
24012f3a:	2b00      	cmp	r3, #0
24012f3c:	d01b      	beq.n	24012f76 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24012f3e:	687b      	ldr	r3, [r7, #4]
24012f40:	681b      	ldr	r3, [r3, #0]
24012f42:	681a      	ldr	r2, [r3, #0]
24012f44:	687b      	ldr	r3, [r7, #4]
24012f46:	681b      	ldr	r3, [r3, #0]
24012f48:	f022 0204 	bic.w	r2, r2, #4
24012f4c:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
24012f4e:	687b      	ldr	r3, [r7, #4]
24012f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012f52:	4a1b      	ldr	r2, [pc, #108]	; (24012fc0 <HAL_QSPI_Abort_IT+0xcc>)
24012f54:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24012f56:	687b      	ldr	r3, [r7, #4]
24012f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012f5a:	4618      	mov	r0, r3
24012f5c:	f7fd fbeb 	bl	24010736 <HAL_MDMA_Abort_IT>
24012f60:	4603      	mov	r3, r0
24012f62:	2b00      	cmp	r3, #0
24012f64:	d027      	beq.n	24012fb6 <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24012f66:	687b      	ldr	r3, [r7, #4]
24012f68:	2201      	movs	r2, #1
24012f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
24012f6e:	6878      	ldr	r0, [r7, #4]
24012f70:	f7ff fee7 	bl	24012d42 <HAL_QSPI_AbortCpltCallback>
24012f74:	e01f      	b.n	24012fb6 <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
24012f76:	687b      	ldr	r3, [r7, #4]
24012f78:	681b      	ldr	r3, [r3, #0]
24012f7a:	689b      	ldr	r3, [r3, #8]
24012f7c:	f003 0320 	and.w	r3, r3, #32
24012f80:	2b00      	cmp	r3, #0
24012f82:	d014      	beq.n	24012fae <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012f84:	687b      	ldr	r3, [r7, #4]
24012f86:	681b      	ldr	r3, [r3, #0]
24012f88:	2202      	movs	r2, #2
24012f8a:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24012f8c:	687b      	ldr	r3, [r7, #4]
24012f8e:	681b      	ldr	r3, [r3, #0]
24012f90:	681a      	ldr	r2, [r3, #0]
24012f92:	687b      	ldr	r3, [r7, #4]
24012f94:	681b      	ldr	r3, [r3, #0]
24012f96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24012f9a:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24012f9c:	687b      	ldr	r3, [r7, #4]
24012f9e:	681b      	ldr	r3, [r3, #0]
24012fa0:	681a      	ldr	r2, [r3, #0]
24012fa2:	687b      	ldr	r3, [r7, #4]
24012fa4:	681b      	ldr	r3, [r3, #0]
24012fa6:	f042 0202 	orr.w	r2, r2, #2
24012faa:	601a      	str	r2, [r3, #0]
24012fac:	e003      	b.n	24012fb6 <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24012fae:	687b      	ldr	r3, [r7, #4]
24012fb0:	2201      	movs	r2, #1
24012fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
24012fb6:	7bfb      	ldrb	r3, [r7, #15]
}
24012fb8:	4618      	mov	r0, r3
24012fba:	3710      	adds	r7, #16
24012fbc:	46bd      	mov	sp, r7
24012fbe:	bd80      	pop	{r7, pc}
24012fc0:	2401317d 	.word	0x2401317d

24012fc4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
24012fc4:	b480      	push	{r7}
24012fc6:	b083      	sub	sp, #12
24012fc8:	af00      	add	r7, sp, #0
24012fca:	6078      	str	r0, [r7, #4]
24012fcc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
24012fce:	687b      	ldr	r3, [r7, #4]
24012fd0:	683a      	ldr	r2, [r7, #0]
24012fd2:	649a      	str	r2, [r3, #72]	; 0x48
}
24012fd4:	bf00      	nop
24012fd6:	370c      	adds	r7, #12
24012fd8:	46bd      	mov	sp, r7
24012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
24012fde:	4770      	bx	lr

24012fe0 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
24012fe0:	b480      	push	{r7}
24012fe2:	b085      	sub	sp, #20
24012fe4:	af00      	add	r7, sp, #0
24012fe6:	6078      	str	r0, [r7, #4]
24012fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24012fea:	2300      	movs	r3, #0
24012fec:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
24012fee:	687b      	ldr	r3, [r7, #4]
24012ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012ff4:	b2db      	uxtb	r3, r3
24012ff6:	2b01      	cmp	r3, #1
24012ff8:	d101      	bne.n	24012ffe <HAL_QSPI_SetFifoThreshold+0x1e>
24012ffa:	2302      	movs	r3, #2
24012ffc:	e021      	b.n	24013042 <HAL_QSPI_SetFifoThreshold+0x62>
24012ffe:	687b      	ldr	r3, [r7, #4]
24013000:	2201      	movs	r2, #1
24013002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013006:	687b      	ldr	r3, [r7, #4]
24013008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401300c:	b2db      	uxtb	r3, r3
2401300e:	2b01      	cmp	r3, #1
24013010:	d110      	bne.n	24013034 <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
24013012:	687b      	ldr	r3, [r7, #4]
24013014:	683a      	ldr	r2, [r7, #0]
24013016:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24013018:	687b      	ldr	r3, [r7, #4]
2401301a:	681b      	ldr	r3, [r3, #0]
2401301c:	681b      	ldr	r3, [r3, #0]
2401301e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24013022:	687b      	ldr	r3, [r7, #4]
24013024:	689b      	ldr	r3, [r3, #8]
24013026:	3b01      	subs	r3, #1
24013028:	021a      	lsls	r2, r3, #8
2401302a:	687b      	ldr	r3, [r7, #4]
2401302c:	681b      	ldr	r3, [r3, #0]
2401302e:	430a      	orrs	r2, r1
24013030:	601a      	str	r2, [r3, #0]
24013032:	e001      	b.n	24013038 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
24013034:	2302      	movs	r3, #2
24013036:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24013038:	687b      	ldr	r3, [r7, #4]
2401303a:	2200      	movs	r2, #0
2401303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24013040:	7bfb      	ldrb	r3, [r7, #15]
}
24013042:	4618      	mov	r0, r3
24013044:	3714      	adds	r7, #20
24013046:	46bd      	mov	sp, r7
24013048:	f85d 7b04 	ldr.w	r7, [sp], #4
2401304c:	4770      	bx	lr

2401304e <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
2401304e:	b480      	push	{r7}
24013050:	b083      	sub	sp, #12
24013052:	af00      	add	r7, sp, #0
24013054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
24013056:	687b      	ldr	r3, [r7, #4]
24013058:	681b      	ldr	r3, [r3, #0]
2401305a:	681b      	ldr	r3, [r3, #0]
2401305c:	0a1b      	lsrs	r3, r3, #8
2401305e:	f003 030f 	and.w	r3, r3, #15
24013062:	3301      	adds	r3, #1
}
24013064:	4618      	mov	r0, r3
24013066:	370c      	adds	r7, #12
24013068:	46bd      	mov	sp, r7
2401306a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401306e:	4770      	bx	lr

24013070 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
24013070:	b480      	push	{r7}
24013072:	b085      	sub	sp, #20
24013074:	af00      	add	r7, sp, #0
24013076:	6078      	str	r0, [r7, #4]
24013078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401307a:	2300      	movs	r3, #0
2401307c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401307e:	687b      	ldr	r3, [r7, #4]
24013080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24013084:	b2db      	uxtb	r3, r3
24013086:	2b01      	cmp	r3, #1
24013088:	d101      	bne.n	2401308e <HAL_QSPI_SetFlashID+0x1e>
2401308a:	2302      	movs	r3, #2
2401308c:	e01e      	b.n	240130cc <HAL_QSPI_SetFlashID+0x5c>
2401308e:	687b      	ldr	r3, [r7, #4]
24013090:	2201      	movs	r2, #1
24013092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24013096:	687b      	ldr	r3, [r7, #4]
24013098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401309c:	b2db      	uxtb	r3, r3
2401309e:	2b01      	cmp	r3, #1
240130a0:	d10d      	bne.n	240130be <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
240130a2:	687b      	ldr	r3, [r7, #4]
240130a4:	683a      	ldr	r2, [r7, #0]
240130a6:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
240130a8:	687b      	ldr	r3, [r7, #4]
240130aa:	681b      	ldr	r3, [r3, #0]
240130ac:	681b      	ldr	r3, [r3, #0]
240130ae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
240130b2:	687b      	ldr	r3, [r7, #4]
240130b4:	681b      	ldr	r3, [r3, #0]
240130b6:	683a      	ldr	r2, [r7, #0]
240130b8:	430a      	orrs	r2, r1
240130ba:	601a      	str	r2, [r3, #0]
240130bc:	e001      	b.n	240130c2 <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
240130be:	2302      	movs	r3, #2
240130c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240130c2:	687b      	ldr	r3, [r7, #4]
240130c4:	2200      	movs	r2, #0
240130c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240130ca:	7bfb      	ldrb	r3, [r7, #15]
}
240130cc:	4618      	mov	r0, r3
240130ce:	3714      	adds	r7, #20
240130d0:	46bd      	mov	sp, r7
240130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240130d6:	4770      	bx	lr

240130d8 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
240130d8:	b480      	push	{r7}
240130da:	b085      	sub	sp, #20
240130dc:	af00      	add	r7, sp, #0
240130de:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
240130e0:	687b      	ldr	r3, [r7, #4]
240130e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240130e4:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
240130e6:	68fb      	ldr	r3, [r7, #12]
240130e8:	2200      	movs	r2, #0
240130ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240130ec:	68fb      	ldr	r3, [r7, #12]
240130ee:	681b      	ldr	r3, [r3, #0]
240130f0:	681a      	ldr	r2, [r3, #0]
240130f2:	68fb      	ldr	r3, [r7, #12]
240130f4:	681b      	ldr	r3, [r3, #0]
240130f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240130fa:	601a      	str	r2, [r3, #0]
}
240130fc:	bf00      	nop
240130fe:	3714      	adds	r7, #20
24013100:	46bd      	mov	sp, r7
24013102:	f85d 7b04 	ldr.w	r7, [sp], #4
24013106:	4770      	bx	lr

24013108 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
24013108:	b480      	push	{r7}
2401310a:	b085      	sub	sp, #20
2401310c:	af00      	add	r7, sp, #0
2401310e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
24013110:	687b      	ldr	r3, [r7, #4]
24013112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24013114:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
24013116:	68fb      	ldr	r3, [r7, #12]
24013118:	2200      	movs	r2, #0
2401311a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401311c:	68fb      	ldr	r3, [r7, #12]
2401311e:	681b      	ldr	r3, [r3, #0]
24013120:	681a      	ldr	r2, [r3, #0]
24013122:	68fb      	ldr	r3, [r7, #12]
24013124:	681b      	ldr	r3, [r3, #0]
24013126:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401312a:	601a      	str	r2, [r3, #0]
}
2401312c:	bf00      	nop
2401312e:	3714      	adds	r7, #20
24013130:	46bd      	mov	sp, r7
24013132:	f85d 7b04 	ldr.w	r7, [sp], #4
24013136:	4770      	bx	lr

24013138 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
24013138:	b580      	push	{r7, lr}
2401313a:	b084      	sub	sp, #16
2401313c:	af00      	add	r7, sp, #0
2401313e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24013140:	687b      	ldr	r3, [r7, #4]
24013142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24013144:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
24013146:	68fb      	ldr	r3, [r7, #12]
24013148:	2200      	movs	r2, #0
2401314a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
2401314c:	68fb      	ldr	r3, [r7, #12]
2401314e:	2200      	movs	r2, #0
24013150:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
24013152:	68fb      	ldr	r3, [r7, #12]
24013154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013156:	f043 0204 	orr.w	r2, r3, #4
2401315a:	68fb      	ldr	r3, [r7, #12]
2401315c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401315e:	68fb      	ldr	r3, [r7, #12]
24013160:	681b      	ldr	r3, [r3, #0]
24013162:	681a      	ldr	r2, [r3, #0]
24013164:	68fb      	ldr	r3, [r7, #12]
24013166:	681b      	ldr	r3, [r3, #0]
24013168:	f022 0204 	bic.w	r2, r2, #4
2401316c:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
2401316e:	68f8      	ldr	r0, [r7, #12]
24013170:	f7ff fec0 	bl	24012ef4 <HAL_QSPI_Abort_IT>

}
24013174:	bf00      	nop
24013176:	3710      	adds	r7, #16
24013178:	46bd      	mov	sp, r7
2401317a:	bd80      	pop	{r7, pc}

2401317c <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2401317c:	b580      	push	{r7, lr}
2401317e:	b084      	sub	sp, #16
24013180:	af00      	add	r7, sp, #0
24013182:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24013184:	687b      	ldr	r3, [r7, #4]
24013186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24013188:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2401318a:	68fb      	ldr	r3, [r7, #12]
2401318c:	2200      	movs	r2, #0
2401318e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24013190:	68fb      	ldr	r3, [r7, #12]
24013192:	2200      	movs	r2, #0
24013194:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
24013196:	68fb      	ldr	r3, [r7, #12]
24013198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401319c:	b2db      	uxtb	r3, r3
2401319e:	2b08      	cmp	r3, #8
240131a0:	d114      	bne.n	240131cc <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240131a2:	68fb      	ldr	r3, [r7, #12]
240131a4:	681b      	ldr	r3, [r3, #0]
240131a6:	2202      	movs	r2, #2
240131a8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240131aa:	68fb      	ldr	r3, [r7, #12]
240131ac:	681b      	ldr	r3, [r3, #0]
240131ae:	681a      	ldr	r2, [r3, #0]
240131b0:	68fb      	ldr	r3, [r7, #12]
240131b2:	681b      	ldr	r3, [r3, #0]
240131b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240131b8:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
240131ba:	68fb      	ldr	r3, [r7, #12]
240131bc:	681b      	ldr	r3, [r3, #0]
240131be:	681a      	ldr	r2, [r3, #0]
240131c0:	68fb      	ldr	r3, [r7, #12]
240131c2:	681b      	ldr	r3, [r3, #0]
240131c4:	f042 0202 	orr.w	r2, r2, #2
240131c8:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
240131ca:	e006      	b.n	240131da <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
240131cc:	68fb      	ldr	r3, [r7, #12]
240131ce:	2201      	movs	r2, #1
240131d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
240131d4:	68f8      	ldr	r0, [r7, #12]
240131d6:	f7ff fdaa 	bl	24012d2e <HAL_QSPI_ErrorCallback>
}
240131da:	bf00      	nop
240131dc:	3710      	adds	r7, #16
240131de:	46bd      	mov	sp, r7
240131e0:	bd80      	pop	{r7, pc}

240131e2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
240131e2:	b580      	push	{r7, lr}
240131e4:	b084      	sub	sp, #16
240131e6:	af00      	add	r7, sp, #0
240131e8:	60f8      	str	r0, [r7, #12]
240131ea:	60b9      	str	r1, [r7, #8]
240131ec:	603b      	str	r3, [r7, #0]
240131ee:	4613      	mov	r3, r2
240131f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240131f2:	e01a      	b.n	2401322a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
240131f4:	69bb      	ldr	r3, [r7, #24]
240131f6:	f1b3 3fff 	cmp.w	r3, #4294967295
240131fa:	d016      	beq.n	2401322a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240131fc:	f7ef f812 	bl	24002224 <HAL_GetTick>
24013200:	4602      	mov	r2, r0
24013202:	683b      	ldr	r3, [r7, #0]
24013204:	1ad3      	subs	r3, r2, r3
24013206:	69ba      	ldr	r2, [r7, #24]
24013208:	429a      	cmp	r2, r3
2401320a:	d302      	bcc.n	24013212 <QSPI_WaitFlagStateUntilTimeout+0x30>
2401320c:	69bb      	ldr	r3, [r7, #24]
2401320e:	2b00      	cmp	r3, #0
24013210:	d10b      	bne.n	2401322a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24013212:	68fb      	ldr	r3, [r7, #12]
24013214:	2204      	movs	r2, #4
24013216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2401321a:	68fb      	ldr	r3, [r7, #12]
2401321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401321e:	f043 0201 	orr.w	r2, r3, #1
24013222:	68fb      	ldr	r3, [r7, #12]
24013224:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
24013226:	2301      	movs	r3, #1
24013228:	e00e      	b.n	24013248 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2401322a:	68fb      	ldr	r3, [r7, #12]
2401322c:	681b      	ldr	r3, [r3, #0]
2401322e:	689a      	ldr	r2, [r3, #8]
24013230:	68bb      	ldr	r3, [r7, #8]
24013232:	4013      	ands	r3, r2
24013234:	2b00      	cmp	r3, #0
24013236:	bf14      	ite	ne
24013238:	2301      	movne	r3, #1
2401323a:	2300      	moveq	r3, #0
2401323c:	b2db      	uxtb	r3, r3
2401323e:	461a      	mov	r2, r3
24013240:	79fb      	ldrb	r3, [r7, #7]
24013242:	429a      	cmp	r2, r3
24013244:	d1d6      	bne.n	240131f4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24013246:	2300      	movs	r3, #0
}
24013248:	4618      	mov	r0, r3
2401324a:	3710      	adds	r7, #16
2401324c:	46bd      	mov	sp, r7
2401324e:	bd80      	pop	{r7, pc}

24013250 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24013250:	b480      	push	{r7}
24013252:	b085      	sub	sp, #20
24013254:	af00      	add	r7, sp, #0
24013256:	60f8      	str	r0, [r7, #12]
24013258:	60b9      	str	r1, [r7, #8]
2401325a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
2401325c:	68bb      	ldr	r3, [r7, #8]
2401325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013260:	2b00      	cmp	r3, #0
24013262:	d009      	beq.n	24013278 <QSPI_Config+0x28>
24013264:	687b      	ldr	r3, [r7, #4]
24013266:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2401326a:	d005      	beq.n	24013278 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
2401326c:	68bb      	ldr	r3, [r7, #8]
2401326e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24013270:	68fb      	ldr	r3, [r7, #12]
24013272:	681b      	ldr	r3, [r3, #0]
24013274:	3a01      	subs	r2, #1
24013276:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24013278:	68bb      	ldr	r3, [r7, #8]
2401327a:	699b      	ldr	r3, [r3, #24]
2401327c:	2b00      	cmp	r3, #0
2401327e:	f000 80b9 	beq.w	240133f4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24013282:	68bb      	ldr	r3, [r7, #8]
24013284:	6a1b      	ldr	r3, [r3, #32]
24013286:	2b00      	cmp	r3, #0
24013288:	d05f      	beq.n	2401334a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
2401328a:	68fb      	ldr	r3, [r7, #12]
2401328c:	681b      	ldr	r3, [r3, #0]
2401328e:	68ba      	ldr	r2, [r7, #8]
24013290:	6892      	ldr	r2, [r2, #8]
24013292:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24013294:	68bb      	ldr	r3, [r7, #8]
24013296:	69db      	ldr	r3, [r3, #28]
24013298:	2b00      	cmp	r3, #0
2401329a:	d031      	beq.n	24013300 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2401329c:	68bb      	ldr	r3, [r7, #8]
2401329e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240132a0:	68bb      	ldr	r3, [r7, #8]
240132a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240132a4:	431a      	orrs	r2, r3
240132a6:	68bb      	ldr	r3, [r7, #8]
240132a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240132aa:	431a      	orrs	r2, r3
240132ac:	68bb      	ldr	r3, [r7, #8]
240132ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240132b0:	431a      	orrs	r2, r3
240132b2:	68bb      	ldr	r3, [r7, #8]
240132b4:	695b      	ldr	r3, [r3, #20]
240132b6:	049b      	lsls	r3, r3, #18
240132b8:	431a      	orrs	r2, r3
240132ba:	68bb      	ldr	r3, [r7, #8]
240132bc:	691b      	ldr	r3, [r3, #16]
240132be:	431a      	orrs	r2, r3
240132c0:	68bb      	ldr	r3, [r7, #8]
240132c2:	6a1b      	ldr	r3, [r3, #32]
240132c4:	431a      	orrs	r2, r3
240132c6:	68bb      	ldr	r3, [r7, #8]
240132c8:	68db      	ldr	r3, [r3, #12]
240132ca:	431a      	orrs	r2, r3
240132cc:	68bb      	ldr	r3, [r7, #8]
240132ce:	69db      	ldr	r3, [r3, #28]
240132d0:	431a      	orrs	r2, r3
240132d2:	68bb      	ldr	r3, [r7, #8]
240132d4:	699b      	ldr	r3, [r3, #24]
240132d6:	431a      	orrs	r2, r3
240132d8:	68bb      	ldr	r3, [r7, #8]
240132da:	681b      	ldr	r3, [r3, #0]
240132dc:	ea42 0103 	orr.w	r1, r2, r3
240132e0:	68fb      	ldr	r3, [r7, #12]
240132e2:	681b      	ldr	r3, [r3, #0]
240132e4:	687a      	ldr	r2, [r7, #4]
240132e6:	430a      	orrs	r2, r1
240132e8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240132ea:	687b      	ldr	r3, [r7, #4]
240132ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240132f0:	f000 812e 	beq.w	24013550 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
240132f4:	68fb      	ldr	r3, [r7, #12]
240132f6:	681b      	ldr	r3, [r3, #0]
240132f8:	68ba      	ldr	r2, [r7, #8]
240132fa:	6852      	ldr	r2, [r2, #4]
240132fc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
240132fe:	e127      	b.n	24013550 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24013300:	68bb      	ldr	r3, [r7, #8]
24013302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24013304:	68bb      	ldr	r3, [r7, #8]
24013306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013308:	431a      	orrs	r2, r3
2401330a:	68bb      	ldr	r3, [r7, #8]
2401330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401330e:	431a      	orrs	r2, r3
24013310:	68bb      	ldr	r3, [r7, #8]
24013312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013314:	431a      	orrs	r2, r3
24013316:	68bb      	ldr	r3, [r7, #8]
24013318:	695b      	ldr	r3, [r3, #20]
2401331a:	049b      	lsls	r3, r3, #18
2401331c:	431a      	orrs	r2, r3
2401331e:	68bb      	ldr	r3, [r7, #8]
24013320:	691b      	ldr	r3, [r3, #16]
24013322:	431a      	orrs	r2, r3
24013324:	68bb      	ldr	r3, [r7, #8]
24013326:	6a1b      	ldr	r3, [r3, #32]
24013328:	431a      	orrs	r2, r3
2401332a:	68bb      	ldr	r3, [r7, #8]
2401332c:	69db      	ldr	r3, [r3, #28]
2401332e:	431a      	orrs	r2, r3
24013330:	68bb      	ldr	r3, [r7, #8]
24013332:	699b      	ldr	r3, [r3, #24]
24013334:	431a      	orrs	r2, r3
24013336:	68bb      	ldr	r3, [r7, #8]
24013338:	681b      	ldr	r3, [r3, #0]
2401333a:	ea42 0103 	orr.w	r1, r2, r3
2401333e:	68fb      	ldr	r3, [r7, #12]
24013340:	681b      	ldr	r3, [r3, #0]
24013342:	687a      	ldr	r2, [r7, #4]
24013344:	430a      	orrs	r2, r1
24013346:	615a      	str	r2, [r3, #20]
}
24013348:	e102      	b.n	24013550 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2401334a:	68bb      	ldr	r3, [r7, #8]
2401334c:	69db      	ldr	r3, [r3, #28]
2401334e:	2b00      	cmp	r3, #0
24013350:	d02e      	beq.n	240133b0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24013352:	68bb      	ldr	r3, [r7, #8]
24013354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24013356:	68bb      	ldr	r3, [r7, #8]
24013358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401335a:	431a      	orrs	r2, r3
2401335c:	68bb      	ldr	r3, [r7, #8]
2401335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013360:	431a      	orrs	r2, r3
24013362:	68bb      	ldr	r3, [r7, #8]
24013364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013366:	431a      	orrs	r2, r3
24013368:	68bb      	ldr	r3, [r7, #8]
2401336a:	695b      	ldr	r3, [r3, #20]
2401336c:	049b      	lsls	r3, r3, #18
2401336e:	431a      	orrs	r2, r3
24013370:	68bb      	ldr	r3, [r7, #8]
24013372:	6a1b      	ldr	r3, [r3, #32]
24013374:	431a      	orrs	r2, r3
24013376:	68bb      	ldr	r3, [r7, #8]
24013378:	68db      	ldr	r3, [r3, #12]
2401337a:	431a      	orrs	r2, r3
2401337c:	68bb      	ldr	r3, [r7, #8]
2401337e:	69db      	ldr	r3, [r3, #28]
24013380:	431a      	orrs	r2, r3
24013382:	68bb      	ldr	r3, [r7, #8]
24013384:	699b      	ldr	r3, [r3, #24]
24013386:	431a      	orrs	r2, r3
24013388:	68bb      	ldr	r3, [r7, #8]
2401338a:	681b      	ldr	r3, [r3, #0]
2401338c:	ea42 0103 	orr.w	r1, r2, r3
24013390:	68fb      	ldr	r3, [r7, #12]
24013392:	681b      	ldr	r3, [r3, #0]
24013394:	687a      	ldr	r2, [r7, #4]
24013396:	430a      	orrs	r2, r1
24013398:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2401339a:	687b      	ldr	r3, [r7, #4]
2401339c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240133a0:	f000 80d6 	beq.w	24013550 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
240133a4:	68fb      	ldr	r3, [r7, #12]
240133a6:	681b      	ldr	r3, [r3, #0]
240133a8:	68ba      	ldr	r2, [r7, #8]
240133aa:	6852      	ldr	r2, [r2, #4]
240133ac:	619a      	str	r2, [r3, #24]
}
240133ae:	e0cf      	b.n	24013550 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240133b0:	68bb      	ldr	r3, [r7, #8]
240133b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240133b4:	68bb      	ldr	r3, [r7, #8]
240133b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240133b8:	431a      	orrs	r2, r3
240133ba:	68bb      	ldr	r3, [r7, #8]
240133bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240133be:	431a      	orrs	r2, r3
240133c0:	68bb      	ldr	r3, [r7, #8]
240133c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240133c4:	431a      	orrs	r2, r3
240133c6:	68bb      	ldr	r3, [r7, #8]
240133c8:	695b      	ldr	r3, [r3, #20]
240133ca:	049b      	lsls	r3, r3, #18
240133cc:	431a      	orrs	r2, r3
240133ce:	68bb      	ldr	r3, [r7, #8]
240133d0:	6a1b      	ldr	r3, [r3, #32]
240133d2:	431a      	orrs	r2, r3
240133d4:	68bb      	ldr	r3, [r7, #8]
240133d6:	69db      	ldr	r3, [r3, #28]
240133d8:	431a      	orrs	r2, r3
240133da:	68bb      	ldr	r3, [r7, #8]
240133dc:	699b      	ldr	r3, [r3, #24]
240133de:	431a      	orrs	r2, r3
240133e0:	68bb      	ldr	r3, [r7, #8]
240133e2:	681b      	ldr	r3, [r3, #0]
240133e4:	ea42 0103 	orr.w	r1, r2, r3
240133e8:	68fb      	ldr	r3, [r7, #12]
240133ea:	681b      	ldr	r3, [r3, #0]
240133ec:	687a      	ldr	r2, [r7, #4]
240133ee:	430a      	orrs	r2, r1
240133f0:	615a      	str	r2, [r3, #20]
}
240133f2:	e0ad      	b.n	24013550 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
240133f4:	68bb      	ldr	r3, [r7, #8]
240133f6:	6a1b      	ldr	r3, [r3, #32]
240133f8:	2b00      	cmp	r3, #0
240133fa:	d058      	beq.n	240134ae <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
240133fc:	68fb      	ldr	r3, [r7, #12]
240133fe:	681b      	ldr	r3, [r3, #0]
24013400:	68ba      	ldr	r2, [r7, #8]
24013402:	6892      	ldr	r2, [r2, #8]
24013404:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24013406:	68bb      	ldr	r3, [r7, #8]
24013408:	69db      	ldr	r3, [r3, #28]
2401340a:	2b00      	cmp	r3, #0
2401340c:	d02d      	beq.n	2401346a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2401340e:	68bb      	ldr	r3, [r7, #8]
24013410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24013412:	68bb      	ldr	r3, [r7, #8]
24013414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013416:	431a      	orrs	r2, r3
24013418:	68bb      	ldr	r3, [r7, #8]
2401341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401341c:	431a      	orrs	r2, r3
2401341e:	68bb      	ldr	r3, [r7, #8]
24013420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013422:	431a      	orrs	r2, r3
24013424:	68bb      	ldr	r3, [r7, #8]
24013426:	695b      	ldr	r3, [r3, #20]
24013428:	049b      	lsls	r3, r3, #18
2401342a:	431a      	orrs	r2, r3
2401342c:	68bb      	ldr	r3, [r7, #8]
2401342e:	691b      	ldr	r3, [r3, #16]
24013430:	431a      	orrs	r2, r3
24013432:	68bb      	ldr	r3, [r7, #8]
24013434:	6a1b      	ldr	r3, [r3, #32]
24013436:	431a      	orrs	r2, r3
24013438:	68bb      	ldr	r3, [r7, #8]
2401343a:	68db      	ldr	r3, [r3, #12]
2401343c:	431a      	orrs	r2, r3
2401343e:	68bb      	ldr	r3, [r7, #8]
24013440:	69db      	ldr	r3, [r3, #28]
24013442:	431a      	orrs	r2, r3
24013444:	68bb      	ldr	r3, [r7, #8]
24013446:	699b      	ldr	r3, [r3, #24]
24013448:	ea42 0103 	orr.w	r1, r2, r3
2401344c:	68fb      	ldr	r3, [r7, #12]
2401344e:	681b      	ldr	r3, [r3, #0]
24013450:	687a      	ldr	r2, [r7, #4]
24013452:	430a      	orrs	r2, r1
24013454:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24013456:	687b      	ldr	r3, [r7, #4]
24013458:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2401345c:	d078      	beq.n	24013550 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2401345e:	68fb      	ldr	r3, [r7, #12]
24013460:	681b      	ldr	r3, [r3, #0]
24013462:	68ba      	ldr	r2, [r7, #8]
24013464:	6852      	ldr	r2, [r2, #4]
24013466:	619a      	str	r2, [r3, #24]
}
24013468:	e072      	b.n	24013550 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2401346a:	68bb      	ldr	r3, [r7, #8]
2401346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2401346e:	68bb      	ldr	r3, [r7, #8]
24013470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013472:	431a      	orrs	r2, r3
24013474:	68bb      	ldr	r3, [r7, #8]
24013476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013478:	431a      	orrs	r2, r3
2401347a:	68bb      	ldr	r3, [r7, #8]
2401347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401347e:	431a      	orrs	r2, r3
24013480:	68bb      	ldr	r3, [r7, #8]
24013482:	695b      	ldr	r3, [r3, #20]
24013484:	049b      	lsls	r3, r3, #18
24013486:	431a      	orrs	r2, r3
24013488:	68bb      	ldr	r3, [r7, #8]
2401348a:	691b      	ldr	r3, [r3, #16]
2401348c:	431a      	orrs	r2, r3
2401348e:	68bb      	ldr	r3, [r7, #8]
24013490:	6a1b      	ldr	r3, [r3, #32]
24013492:	431a      	orrs	r2, r3
24013494:	68bb      	ldr	r3, [r7, #8]
24013496:	69db      	ldr	r3, [r3, #28]
24013498:	431a      	orrs	r2, r3
2401349a:	68bb      	ldr	r3, [r7, #8]
2401349c:	699b      	ldr	r3, [r3, #24]
2401349e:	ea42 0103 	orr.w	r1, r2, r3
240134a2:	68fb      	ldr	r3, [r7, #12]
240134a4:	681b      	ldr	r3, [r3, #0]
240134a6:	687a      	ldr	r2, [r7, #4]
240134a8:	430a      	orrs	r2, r1
240134aa:	615a      	str	r2, [r3, #20]
}
240134ac:	e050      	b.n	24013550 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
240134ae:	68bb      	ldr	r3, [r7, #8]
240134b0:	69db      	ldr	r3, [r3, #28]
240134b2:	2b00      	cmp	r3, #0
240134b4:	d02a      	beq.n	2401350c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
240134b6:	68bb      	ldr	r3, [r7, #8]
240134b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240134ba:	68bb      	ldr	r3, [r7, #8]
240134bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240134be:	431a      	orrs	r2, r3
240134c0:	68bb      	ldr	r3, [r7, #8]
240134c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240134c4:	431a      	orrs	r2, r3
240134c6:	68bb      	ldr	r3, [r7, #8]
240134c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240134ca:	431a      	orrs	r2, r3
240134cc:	68bb      	ldr	r3, [r7, #8]
240134ce:	695b      	ldr	r3, [r3, #20]
240134d0:	049b      	lsls	r3, r3, #18
240134d2:	431a      	orrs	r2, r3
240134d4:	68bb      	ldr	r3, [r7, #8]
240134d6:	6a1b      	ldr	r3, [r3, #32]
240134d8:	431a      	orrs	r2, r3
240134da:	68bb      	ldr	r3, [r7, #8]
240134dc:	68db      	ldr	r3, [r3, #12]
240134de:	431a      	orrs	r2, r3
240134e0:	68bb      	ldr	r3, [r7, #8]
240134e2:	69db      	ldr	r3, [r3, #28]
240134e4:	431a      	orrs	r2, r3
240134e6:	68bb      	ldr	r3, [r7, #8]
240134e8:	699b      	ldr	r3, [r3, #24]
240134ea:	ea42 0103 	orr.w	r1, r2, r3
240134ee:	68fb      	ldr	r3, [r7, #12]
240134f0:	681b      	ldr	r3, [r3, #0]
240134f2:	687a      	ldr	r2, [r7, #4]
240134f4:	430a      	orrs	r2, r1
240134f6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
240134f8:	687b      	ldr	r3, [r7, #4]
240134fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
240134fe:	d027      	beq.n	24013550 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24013500:	68fb      	ldr	r3, [r7, #12]
24013502:	681b      	ldr	r3, [r3, #0]
24013504:	68ba      	ldr	r2, [r7, #8]
24013506:	6852      	ldr	r2, [r2, #4]
24013508:	619a      	str	r2, [r3, #24]
}
2401350a:	e021      	b.n	24013550 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
2401350c:	68bb      	ldr	r3, [r7, #8]
2401350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013510:	2b00      	cmp	r3, #0
24013512:	d01d      	beq.n	24013550 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24013514:	68bb      	ldr	r3, [r7, #8]
24013516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24013518:	68bb      	ldr	r3, [r7, #8]
2401351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401351c:	431a      	orrs	r2, r3
2401351e:	68bb      	ldr	r3, [r7, #8]
24013520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013522:	431a      	orrs	r2, r3
24013524:	68bb      	ldr	r3, [r7, #8]
24013526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013528:	431a      	orrs	r2, r3
2401352a:	68bb      	ldr	r3, [r7, #8]
2401352c:	695b      	ldr	r3, [r3, #20]
2401352e:	049b      	lsls	r3, r3, #18
24013530:	431a      	orrs	r2, r3
24013532:	68bb      	ldr	r3, [r7, #8]
24013534:	6a1b      	ldr	r3, [r3, #32]
24013536:	431a      	orrs	r2, r3
24013538:	68bb      	ldr	r3, [r7, #8]
2401353a:	69db      	ldr	r3, [r3, #28]
2401353c:	431a      	orrs	r2, r3
2401353e:	68bb      	ldr	r3, [r7, #8]
24013540:	699b      	ldr	r3, [r3, #24]
24013542:	ea42 0103 	orr.w	r1, r2, r3
24013546:	68fb      	ldr	r3, [r7, #12]
24013548:	681b      	ldr	r3, [r3, #0]
2401354a:	687a      	ldr	r2, [r7, #4]
2401354c:	430a      	orrs	r2, r1
2401354e:	615a      	str	r2, [r3, #20]
}
24013550:	bf00      	nop
24013552:	3714      	adds	r7, #20
24013554:	46bd      	mov	sp, r7
24013556:	f85d 7b04 	ldr.w	r7, [sp], #4
2401355a:	4770      	bx	lr

2401355c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
2401355c:	b580      	push	{r7, lr}
2401355e:	b082      	sub	sp, #8
24013560:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
24013562:	4b89      	ldr	r3, [pc, #548]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013564:	681b      	ldr	r3, [r3, #0]
24013566:	f003 030f 	and.w	r3, r3, #15
2401356a:	2b06      	cmp	r3, #6
2401356c:	d80f      	bhi.n	2401358e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
2401356e:	4b86      	ldr	r3, [pc, #536]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013570:	681b      	ldr	r3, [r3, #0]
24013572:	f023 030f 	bic.w	r3, r3, #15
24013576:	4a84      	ldr	r2, [pc, #528]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013578:	f043 0307 	orr.w	r3, r3, #7
2401357c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
2401357e:	4b82      	ldr	r3, [pc, #520]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013580:	681b      	ldr	r3, [r3, #0]
24013582:	f003 030f 	and.w	r3, r3, #15
24013586:	2b07      	cmp	r3, #7
24013588:	d001      	beq.n	2401358e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
2401358a:	2301      	movs	r3, #1
2401358c:	e0f7      	b.n	2401377e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
2401358e:	f7ee fe49 	bl	24002224 <HAL_GetTick>
24013592:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
24013594:	4b7d      	ldr	r3, [pc, #500]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013596:	681b      	ldr	r3, [r3, #0]
24013598:	4a7c      	ldr	r2, [pc, #496]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401359a:	f043 0301 	orr.w	r3, r3, #1
2401359e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
240135a0:	e008      	b.n	240135b4 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240135a2:	f7ee fe3f 	bl	24002224 <HAL_GetTick>
240135a6:	4602      	mov	r2, r0
240135a8:	687b      	ldr	r3, [r7, #4]
240135aa:	1ad3      	subs	r3, r2, r3
240135ac:	2b02      	cmp	r3, #2
240135ae:	d901      	bls.n	240135b4 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
240135b0:	2303      	movs	r3, #3
240135b2:	e0e4      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
240135b4:	4b75      	ldr	r3, [pc, #468]	; (2401378c <HAL_RCC_DeInit+0x230>)
240135b6:	681b      	ldr	r3, [r3, #0]
240135b8:	f003 0304 	and.w	r3, r3, #4
240135bc:	2b00      	cmp	r3, #0
240135be:	d0f0      	beq.n	240135a2 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
240135c0:	4b72      	ldr	r3, [pc, #456]	; (2401378c <HAL_RCC_DeInit+0x230>)
240135c2:	685b      	ldr	r3, [r3, #4]
240135c4:	4a71      	ldr	r2, [pc, #452]	; (2401378c <HAL_RCC_DeInit+0x230>)
240135c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240135ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
240135cc:	4b6f      	ldr	r3, [pc, #444]	; (2401378c <HAL_RCC_DeInit+0x230>)
240135ce:	2200      	movs	r2, #0
240135d0:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
240135d2:	4b6f      	ldr	r3, [pc, #444]	; (24013790 <HAL_RCC_DeInit+0x234>)
240135d4:	4a6f      	ldr	r2, [pc, #444]	; (24013794 <HAL_RCC_DeInit+0x238>)
240135d6:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
240135d8:	4b6f      	ldr	r3, [pc, #444]	; (24013798 <HAL_RCC_DeInit+0x23c>)
240135da:	4a6e      	ldr	r2, [pc, #440]	; (24013794 <HAL_RCC_DeInit+0x238>)
240135dc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
240135de:	4b6f      	ldr	r3, [pc, #444]	; (2401379c <HAL_RCC_DeInit+0x240>)
240135e0:	681b      	ldr	r3, [r3, #0]
240135e2:	4618      	mov	r0, r3
240135e4:	f7ee fdd4 	bl	24002190 <HAL_InitTick>
240135e8:	4603      	mov	r3, r0
240135ea:	2b00      	cmp	r3, #0
240135ec:	d001      	beq.n	240135f2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
240135ee:	2301      	movs	r3, #1
240135f0:	e0c5      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240135f2:	f7ee fe17 	bl	24002224 <HAL_GetTick>
240135f6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
240135f8:	e00a      	b.n	24013610 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240135fa:	f7ee fe13 	bl	24002224 <HAL_GetTick>
240135fe:	4602      	mov	r2, r0
24013600:	687b      	ldr	r3, [r7, #4]
24013602:	1ad3      	subs	r3, r2, r3
24013604:	f241 3288 	movw	r2, #5000	; 0x1388
24013608:	4293      	cmp	r3, r2
2401360a:	d901      	bls.n	24013610 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
2401360c:	2303      	movs	r3, #3
2401360e:	e0b6      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24013610:	4b5e      	ldr	r3, [pc, #376]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013612:	691b      	ldr	r3, [r3, #16]
24013614:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013618:	2b00      	cmp	r3, #0
2401361a:	d1ee      	bne.n	240135fa <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2401361c:	f7ee fe02 	bl	24002224 <HAL_GetTick>
24013620:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
24013622:	4b5a      	ldr	r3, [pc, #360]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013624:	681a      	ldr	r2, [r3, #0]
24013626:	4959      	ldr	r1, [pc, #356]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013628:	4b5d      	ldr	r3, [pc, #372]	; (240137a0 <HAL_RCC_DeInit+0x244>)
2401362a:	4013      	ands	r3, r2
2401362c:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
2401362e:	e008      	b.n	24013642 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24013630:	f7ee fdf8 	bl	24002224 <HAL_GetTick>
24013634:	4602      	mov	r2, r0
24013636:	687b      	ldr	r3, [r7, #4]
24013638:	1ad3      	subs	r3, r2, r3
2401363a:	2b64      	cmp	r3, #100	; 0x64
2401363c:	d901      	bls.n	24013642 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
2401363e:	2303      	movs	r3, #3
24013640:	e09d      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24013642:	4b52      	ldr	r3, [pc, #328]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013644:	681b      	ldr	r3, [r3, #0]
24013646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2401364a:	2b00      	cmp	r3, #0
2401364c:	d1f0      	bne.n	24013630 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2401364e:	f7ee fde9 	bl	24002224 <HAL_GetTick>
24013652:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
24013654:	4b4d      	ldr	r3, [pc, #308]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013656:	681b      	ldr	r3, [r3, #0]
24013658:	4a4c      	ldr	r2, [pc, #304]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401365a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2401365e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24013660:	e008      	b.n	24013674 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24013662:	f7ee fddf 	bl	24002224 <HAL_GetTick>
24013666:	4602      	mov	r2, r0
24013668:	687b      	ldr	r3, [r7, #4]
2401366a:	1ad3      	subs	r3, r2, r3
2401366c:	2b02      	cmp	r3, #2
2401366e:	d901      	bls.n	24013674 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
24013670:	2303      	movs	r3, #3
24013672:	e084      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24013674:	4b45      	ldr	r3, [pc, #276]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013676:	681b      	ldr	r3, [r3, #0]
24013678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401367c:	2b00      	cmp	r3, #0
2401367e:	d1f0      	bne.n	24013662 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24013680:	f7ee fdd0 	bl	24002224 <HAL_GetTick>
24013684:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
24013686:	4b41      	ldr	r3, [pc, #260]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013688:	681b      	ldr	r3, [r3, #0]
2401368a:	4a40      	ldr	r2, [pc, #256]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401368c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24013690:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24013692:	e008      	b.n	240136a6 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24013694:	f7ee fdc6 	bl	24002224 <HAL_GetTick>
24013698:	4602      	mov	r2, r0
2401369a:	687b      	ldr	r3, [r7, #4]
2401369c:	1ad3      	subs	r3, r2, r3
2401369e:	2b02      	cmp	r3, #2
240136a0:	d901      	bls.n	240136a6 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
240136a2:	2303      	movs	r3, #3
240136a4:	e06b      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
240136a6:	4b39      	ldr	r3, [pc, #228]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136a8:	681b      	ldr	r3, [r3, #0]
240136aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240136ae:	2b00      	cmp	r3, #0
240136b0:	d1f0      	bne.n	24013694 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240136b2:	f7ee fdb7 	bl	24002224 <HAL_GetTick>
240136b6:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
240136b8:	4b34      	ldr	r3, [pc, #208]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136ba:	681b      	ldr	r3, [r3, #0]
240136bc:	4a33      	ldr	r2, [pc, #204]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
240136c2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
240136c4:	e008      	b.n	240136d8 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240136c6:	f7ee fdad 	bl	24002224 <HAL_GetTick>
240136ca:	4602      	mov	r2, r0
240136cc:	687b      	ldr	r3, [r7, #4]
240136ce:	1ad3      	subs	r3, r2, r3
240136d0:	2b02      	cmp	r3, #2
240136d2:	d901      	bls.n	240136d8 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
240136d4:	2303      	movs	r3, #3
240136d6:	e052      	b.n	2401377e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
240136d8:	4b2c      	ldr	r3, [pc, #176]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136da:	681b      	ldr	r3, [r3, #0]
240136dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240136e0:	2b00      	cmp	r3, #0
240136e2:	d1f0      	bne.n	240136c6 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
240136e4:	4b29      	ldr	r3, [pc, #164]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136e6:	2200      	movs	r2, #0
240136e8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
240136ea:	4b28      	ldr	r3, [pc, #160]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136ec:	2200      	movs	r2, #0
240136ee:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
240136f0:	4b26      	ldr	r3, [pc, #152]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136f2:	2200      	movs	r2, #0
240136f4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
240136f6:	4b25      	ldr	r3, [pc, #148]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136f8:	4a2a      	ldr	r2, [pc, #168]	; (240137a4 <HAL_RCC_DeInit+0x248>)
240136fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
240136fc:	4b23      	ldr	r3, [pc, #140]	; (2401378c <HAL_RCC_DeInit+0x230>)
240136fe:	4a2a      	ldr	r2, [pc, #168]	; (240137a8 <HAL_RCC_DeInit+0x24c>)
24013700:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
24013702:	4b22      	ldr	r3, [pc, #136]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013704:	4a29      	ldr	r2, [pc, #164]	; (240137ac <HAL_RCC_DeInit+0x250>)
24013706:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24013708:	4b20      	ldr	r3, [pc, #128]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401370a:	2200      	movs	r2, #0
2401370c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
2401370e:	4b1f      	ldr	r3, [pc, #124]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013710:	4a26      	ldr	r2, [pc, #152]	; (240137ac <HAL_RCC_DeInit+0x250>)
24013712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
24013714:	4b1d      	ldr	r3, [pc, #116]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013716:	2200      	movs	r2, #0
24013718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
2401371a:	4b1c      	ldr	r3, [pc, #112]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401371c:	4a23      	ldr	r2, [pc, #140]	; (240137ac <HAL_RCC_DeInit+0x250>)
2401371e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
24013720:	4b1a      	ldr	r3, [pc, #104]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013722:	2200      	movs	r2, #0
24013724:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
24013726:	4b19      	ldr	r3, [pc, #100]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013728:	681b      	ldr	r3, [r3, #0]
2401372a:	4a18      	ldr	r2, [pc, #96]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401372c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24013730:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
24013732:	4b16      	ldr	r3, [pc, #88]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013734:	2200      	movs	r2, #0
24013736:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
24013738:	4b14      	ldr	r3, [pc, #80]	; (2401378c <HAL_RCC_DeInit+0x230>)
2401373a:	f04f 32ff 	mov.w	r2, #4294967295
2401373e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
24013740:	4b12      	ldr	r3, [pc, #72]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013742:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
24013746:	4a11      	ldr	r2, [pc, #68]	; (2401378c <HAL_RCC_DeInit+0x230>)
24013748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401374c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
24013750:	4b0d      	ldr	r3, [pc, #52]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013752:	681b      	ldr	r3, [r3, #0]
24013754:	f003 0308 	and.w	r3, r3, #8
24013758:	2b00      	cmp	r3, #0
2401375a:	d00f      	beq.n	2401377c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
2401375c:	4b0a      	ldr	r3, [pc, #40]	; (24013788 <HAL_RCC_DeInit+0x22c>)
2401375e:	681b      	ldr	r3, [r3, #0]
24013760:	f023 030f 	bic.w	r3, r3, #15
24013764:	4a08      	ldr	r2, [pc, #32]	; (24013788 <HAL_RCC_DeInit+0x22c>)
24013766:	f043 0307 	orr.w	r3, r3, #7
2401376a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
2401376c:	4b06      	ldr	r3, [pc, #24]	; (24013788 <HAL_RCC_DeInit+0x22c>)
2401376e:	681b      	ldr	r3, [r3, #0]
24013770:	f003 030f 	and.w	r3, r3, #15
24013774:	2b07      	cmp	r3, #7
24013776:	d001      	beq.n	2401377c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24013778:	2301      	movs	r3, #1
2401377a:	e000      	b.n	2401377e <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
2401377c:	2300      	movs	r3, #0
}
2401377e:	4618      	mov	r0, r3
24013780:	3708      	adds	r7, #8
24013782:	46bd      	mov	sp, r7
24013784:	bd80      	pop	{r7, pc}
24013786:	bf00      	nop
24013788:	52002000 	.word	0x52002000
2401378c:	58024400 	.word	0x58024400
24013790:	240004c8 	.word	0x240004c8
24013794:	03d09000 	.word	0x03d09000
24013798:	240004cc 	.word	0x240004cc
2401379c:	240004d0 	.word	0x240004d0
240137a0:	fff6ed45 	.word	0xfff6ed45
240137a4:	02020200 	.word	0x02020200
240137a8:	01ff0000 	.word	0x01ff0000
240137ac:	01010280 	.word	0x01010280

240137b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
240137b0:	b580      	push	{r7, lr}
240137b2:	b08c      	sub	sp, #48	; 0x30
240137b4:	af00      	add	r7, sp, #0
240137b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
240137b8:	687b      	ldr	r3, [r7, #4]
240137ba:	2b00      	cmp	r3, #0
240137bc:	d102      	bne.n	240137c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
240137be:	2301      	movs	r3, #1
240137c0:	f000 bc1d 	b.w	24013ffe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240137c4:	687b      	ldr	r3, [r7, #4]
240137c6:	681b      	ldr	r3, [r3, #0]
240137c8:	f003 0301 	and.w	r3, r3, #1
240137cc:	2b00      	cmp	r3, #0
240137ce:	f000 8087 	beq.w	240138e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240137d2:	4b99      	ldr	r3, [pc, #612]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240137d4:	691b      	ldr	r3, [r3, #16]
240137d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
240137da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240137dc:	4b96      	ldr	r3, [pc, #600]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240137de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240137e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240137e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240137e4:	2b10      	cmp	r3, #16
240137e6:	d007      	beq.n	240137f8 <HAL_RCC_OscConfig+0x48>
240137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240137ea:	2b18      	cmp	r3, #24
240137ec:	d110      	bne.n	24013810 <HAL_RCC_OscConfig+0x60>
240137ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
240137f0:	f003 0303 	and.w	r3, r3, #3
240137f4:	2b02      	cmp	r3, #2
240137f6:	d10b      	bne.n	24013810 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240137f8:	4b8f      	ldr	r3, [pc, #572]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240137fa:	681b      	ldr	r3, [r3, #0]
240137fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013800:	2b00      	cmp	r3, #0
24013802:	d06c      	beq.n	240138de <HAL_RCC_OscConfig+0x12e>
24013804:	687b      	ldr	r3, [r7, #4]
24013806:	685b      	ldr	r3, [r3, #4]
24013808:	2b00      	cmp	r3, #0
2401380a:	d168      	bne.n	240138de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
2401380c:	2301      	movs	r3, #1
2401380e:	e3f6      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24013810:	687b      	ldr	r3, [r7, #4]
24013812:	685b      	ldr	r3, [r3, #4]
24013814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24013818:	d106      	bne.n	24013828 <HAL_RCC_OscConfig+0x78>
2401381a:	4b87      	ldr	r3, [pc, #540]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401381c:	681b      	ldr	r3, [r3, #0]
2401381e:	4a86      	ldr	r2, [pc, #536]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24013824:	6013      	str	r3, [r2, #0]
24013826:	e02e      	b.n	24013886 <HAL_RCC_OscConfig+0xd6>
24013828:	687b      	ldr	r3, [r7, #4]
2401382a:	685b      	ldr	r3, [r3, #4]
2401382c:	2b00      	cmp	r3, #0
2401382e:	d10c      	bne.n	2401384a <HAL_RCC_OscConfig+0x9a>
24013830:	4b81      	ldr	r3, [pc, #516]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013832:	681b      	ldr	r3, [r3, #0]
24013834:	4a80      	ldr	r2, [pc, #512]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401383a:	6013      	str	r3, [r2, #0]
2401383c:	4b7e      	ldr	r3, [pc, #504]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401383e:	681b      	ldr	r3, [r3, #0]
24013840:	4a7d      	ldr	r2, [pc, #500]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24013846:	6013      	str	r3, [r2, #0]
24013848:	e01d      	b.n	24013886 <HAL_RCC_OscConfig+0xd6>
2401384a:	687b      	ldr	r3, [r7, #4]
2401384c:	685b      	ldr	r3, [r3, #4]
2401384e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24013852:	d10c      	bne.n	2401386e <HAL_RCC_OscConfig+0xbe>
24013854:	4b78      	ldr	r3, [pc, #480]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013856:	681b      	ldr	r3, [r3, #0]
24013858:	4a77      	ldr	r2, [pc, #476]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401385a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2401385e:	6013      	str	r3, [r2, #0]
24013860:	4b75      	ldr	r3, [pc, #468]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013862:	681b      	ldr	r3, [r3, #0]
24013864:	4a74      	ldr	r2, [pc, #464]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401386a:	6013      	str	r3, [r2, #0]
2401386c:	e00b      	b.n	24013886 <HAL_RCC_OscConfig+0xd6>
2401386e:	4b72      	ldr	r3, [pc, #456]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013870:	681b      	ldr	r3, [r3, #0]
24013872:	4a71      	ldr	r2, [pc, #452]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24013878:	6013      	str	r3, [r2, #0]
2401387a:	4b6f      	ldr	r3, [pc, #444]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401387c:	681b      	ldr	r3, [r3, #0]
2401387e:	4a6e      	ldr	r2, [pc, #440]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24013884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24013886:	687b      	ldr	r3, [r7, #4]
24013888:	685b      	ldr	r3, [r3, #4]
2401388a:	2b00      	cmp	r3, #0
2401388c:	d013      	beq.n	240138b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401388e:	f7ee fcc9 	bl	24002224 <HAL_GetTick>
24013892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24013894:	e008      	b.n	240138a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24013896:	f7ee fcc5 	bl	24002224 <HAL_GetTick>
2401389a:	4602      	mov	r2, r0
2401389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401389e:	1ad3      	subs	r3, r2, r3
240138a0:	2b64      	cmp	r3, #100	; 0x64
240138a2:	d901      	bls.n	240138a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
240138a4:	2303      	movs	r3, #3
240138a6:	e3aa      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240138a8:	4b63      	ldr	r3, [pc, #396]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240138aa:	681b      	ldr	r3, [r3, #0]
240138ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240138b0:	2b00      	cmp	r3, #0
240138b2:	d0f0      	beq.n	24013896 <HAL_RCC_OscConfig+0xe6>
240138b4:	e014      	b.n	240138e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240138b6:	f7ee fcb5 	bl	24002224 <HAL_GetTick>
240138ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240138bc:	e008      	b.n	240138d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
240138be:	f7ee fcb1 	bl	24002224 <HAL_GetTick>
240138c2:	4602      	mov	r2, r0
240138c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240138c6:	1ad3      	subs	r3, r2, r3
240138c8:	2b64      	cmp	r3, #100	; 0x64
240138ca:	d901      	bls.n	240138d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
240138cc:	2303      	movs	r3, #3
240138ce:	e396      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240138d0:	4b59      	ldr	r3, [pc, #356]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240138d2:	681b      	ldr	r3, [r3, #0]
240138d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240138d8:	2b00      	cmp	r3, #0
240138da:	d1f0      	bne.n	240138be <HAL_RCC_OscConfig+0x10e>
240138dc:	e000      	b.n	240138e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240138de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240138e0:	687b      	ldr	r3, [r7, #4]
240138e2:	681b      	ldr	r3, [r3, #0]
240138e4:	f003 0302 	and.w	r3, r3, #2
240138e8:	2b00      	cmp	r3, #0
240138ea:	f000 80cb 	beq.w	24013a84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240138ee:	4b52      	ldr	r3, [pc, #328]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240138f0:	691b      	ldr	r3, [r3, #16]
240138f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
240138f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240138f8:	4b4f      	ldr	r3, [pc, #316]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240138fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240138fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240138fe:	6a3b      	ldr	r3, [r7, #32]
24013900:	2b00      	cmp	r3, #0
24013902:	d007      	beq.n	24013914 <HAL_RCC_OscConfig+0x164>
24013904:	6a3b      	ldr	r3, [r7, #32]
24013906:	2b18      	cmp	r3, #24
24013908:	d156      	bne.n	240139b8 <HAL_RCC_OscConfig+0x208>
2401390a:	69fb      	ldr	r3, [r7, #28]
2401390c:	f003 0303 	and.w	r3, r3, #3
24013910:	2b00      	cmp	r3, #0
24013912:	d151      	bne.n	240139b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013914:	4b48      	ldr	r3, [pc, #288]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013916:	681b      	ldr	r3, [r3, #0]
24013918:	f003 0304 	and.w	r3, r3, #4
2401391c:	2b00      	cmp	r3, #0
2401391e:	d005      	beq.n	2401392c <HAL_RCC_OscConfig+0x17c>
24013920:	687b      	ldr	r3, [r7, #4]
24013922:	68db      	ldr	r3, [r3, #12]
24013924:	2b00      	cmp	r3, #0
24013926:	d101      	bne.n	2401392c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
24013928:	2301      	movs	r3, #1
2401392a:	e368      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2401392c:	4b42      	ldr	r3, [pc, #264]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401392e:	681b      	ldr	r3, [r3, #0]
24013930:	f023 0219 	bic.w	r2, r3, #25
24013934:	687b      	ldr	r3, [r7, #4]
24013936:	68db      	ldr	r3, [r3, #12]
24013938:	493f      	ldr	r1, [pc, #252]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401393a:	4313      	orrs	r3, r2
2401393c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2401393e:	f7ee fc71 	bl	24002224 <HAL_GetTick>
24013942:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013944:	e008      	b.n	24013958 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24013946:	f7ee fc6d 	bl	24002224 <HAL_GetTick>
2401394a:	4602      	mov	r2, r0
2401394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401394e:	1ad3      	subs	r3, r2, r3
24013950:	2b02      	cmp	r3, #2
24013952:	d901      	bls.n	24013958 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
24013954:	2303      	movs	r3, #3
24013956:	e352      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013958:	4b37      	ldr	r3, [pc, #220]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401395a:	681b      	ldr	r3, [r3, #0]
2401395c:	f003 0304 	and.w	r3, r3, #4
24013960:	2b00      	cmp	r3, #0
24013962:	d0f0      	beq.n	24013946 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24013964:	f7ee fcf8 	bl	24002358 <HAL_GetREVID>
24013968:	4603      	mov	r3, r0
2401396a:	f241 0203 	movw	r2, #4099	; 0x1003
2401396e:	4293      	cmp	r3, r2
24013970:	d817      	bhi.n	240139a2 <HAL_RCC_OscConfig+0x1f2>
24013972:	687b      	ldr	r3, [r7, #4]
24013974:	691b      	ldr	r3, [r3, #16]
24013976:	2b40      	cmp	r3, #64	; 0x40
24013978:	d108      	bne.n	2401398c <HAL_RCC_OscConfig+0x1dc>
2401397a:	4b2f      	ldr	r3, [pc, #188]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401397c:	685b      	ldr	r3, [r3, #4]
2401397e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24013982:	4a2d      	ldr	r2, [pc, #180]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24013988:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2401398a:	e07b      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2401398c:	4b2a      	ldr	r3, [pc, #168]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401398e:	685b      	ldr	r3, [r3, #4]
24013990:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24013994:	687b      	ldr	r3, [r7, #4]
24013996:	691b      	ldr	r3, [r3, #16]
24013998:	031b      	lsls	r3, r3, #12
2401399a:	4927      	ldr	r1, [pc, #156]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
2401399c:	4313      	orrs	r3, r2
2401399e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240139a0:	e070      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240139a2:	4b25      	ldr	r3, [pc, #148]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240139a4:	685b      	ldr	r3, [r3, #4]
240139a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
240139aa:	687b      	ldr	r3, [r7, #4]
240139ac:	691b      	ldr	r3, [r3, #16]
240139ae:	061b      	lsls	r3, r3, #24
240139b0:	4921      	ldr	r1, [pc, #132]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240139b2:	4313      	orrs	r3, r2
240139b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240139b6:	e065      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
240139b8:	687b      	ldr	r3, [r7, #4]
240139ba:	68db      	ldr	r3, [r3, #12]
240139bc:	2b00      	cmp	r3, #0
240139be:	d048      	beq.n	24013a52 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240139c0:	4b1d      	ldr	r3, [pc, #116]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240139c2:	681b      	ldr	r3, [r3, #0]
240139c4:	f023 0219 	bic.w	r2, r3, #25
240139c8:	687b      	ldr	r3, [r7, #4]
240139ca:	68db      	ldr	r3, [r3, #12]
240139cc:	491a      	ldr	r1, [pc, #104]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240139ce:	4313      	orrs	r3, r2
240139d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240139d2:	f7ee fc27 	bl	24002224 <HAL_GetTick>
240139d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240139d8:	e008      	b.n	240139ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
240139da:	f7ee fc23 	bl	24002224 <HAL_GetTick>
240139de:	4602      	mov	r2, r0
240139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240139e2:	1ad3      	subs	r3, r2, r3
240139e4:	2b02      	cmp	r3, #2
240139e6:	d901      	bls.n	240139ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
240139e8:	2303      	movs	r3, #3
240139ea:	e308      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240139ec:	4b12      	ldr	r3, [pc, #72]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
240139ee:	681b      	ldr	r3, [r3, #0]
240139f0:	f003 0304 	and.w	r3, r3, #4
240139f4:	2b00      	cmp	r3, #0
240139f6:	d0f0      	beq.n	240139da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240139f8:	f7ee fcae 	bl	24002358 <HAL_GetREVID>
240139fc:	4603      	mov	r3, r0
240139fe:	f241 0203 	movw	r2, #4099	; 0x1003
24013a02:	4293      	cmp	r3, r2
24013a04:	d81a      	bhi.n	24013a3c <HAL_RCC_OscConfig+0x28c>
24013a06:	687b      	ldr	r3, [r7, #4]
24013a08:	691b      	ldr	r3, [r3, #16]
24013a0a:	2b40      	cmp	r3, #64	; 0x40
24013a0c:	d108      	bne.n	24013a20 <HAL_RCC_OscConfig+0x270>
24013a0e:	4b0a      	ldr	r3, [pc, #40]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013a10:	685b      	ldr	r3, [r3, #4]
24013a12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24013a16:	4a08      	ldr	r2, [pc, #32]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24013a1c:	6053      	str	r3, [r2, #4]
24013a1e:	e031      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
24013a20:	4b05      	ldr	r3, [pc, #20]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013a22:	685b      	ldr	r3, [r3, #4]
24013a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24013a28:	687b      	ldr	r3, [r7, #4]
24013a2a:	691b      	ldr	r3, [r3, #16]
24013a2c:	031b      	lsls	r3, r3, #12
24013a2e:	4902      	ldr	r1, [pc, #8]	; (24013a38 <HAL_RCC_OscConfig+0x288>)
24013a30:	4313      	orrs	r3, r2
24013a32:	604b      	str	r3, [r1, #4]
24013a34:	e026      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
24013a36:	bf00      	nop
24013a38:	58024400 	.word	0x58024400
24013a3c:	4b9a      	ldr	r3, [pc, #616]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a3e:	685b      	ldr	r3, [r3, #4]
24013a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24013a44:	687b      	ldr	r3, [r7, #4]
24013a46:	691b      	ldr	r3, [r3, #16]
24013a48:	061b      	lsls	r3, r3, #24
24013a4a:	4997      	ldr	r1, [pc, #604]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a4c:	4313      	orrs	r3, r2
24013a4e:	604b      	str	r3, [r1, #4]
24013a50:	e018      	b.n	24013a84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24013a52:	4b95      	ldr	r3, [pc, #596]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a54:	681b      	ldr	r3, [r3, #0]
24013a56:	4a94      	ldr	r2, [pc, #592]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a58:	f023 0301 	bic.w	r3, r3, #1
24013a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013a5e:	f7ee fbe1 	bl	24002224 <HAL_GetTick>
24013a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24013a64:	e008      	b.n	24013a78 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24013a66:	f7ee fbdd 	bl	24002224 <HAL_GetTick>
24013a6a:	4602      	mov	r2, r0
24013a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013a6e:	1ad3      	subs	r3, r2, r3
24013a70:	2b02      	cmp	r3, #2
24013a72:	d901      	bls.n	24013a78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
24013a74:	2303      	movs	r3, #3
24013a76:	e2c2      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24013a78:	4b8b      	ldr	r3, [pc, #556]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a7a:	681b      	ldr	r3, [r3, #0]
24013a7c:	f003 0304 	and.w	r3, r3, #4
24013a80:	2b00      	cmp	r3, #0
24013a82:	d1f0      	bne.n	24013a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24013a84:	687b      	ldr	r3, [r7, #4]
24013a86:	681b      	ldr	r3, [r3, #0]
24013a88:	f003 0310 	and.w	r3, r3, #16
24013a8c:	2b00      	cmp	r3, #0
24013a8e:	f000 80a9 	beq.w	24013be4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24013a92:	4b85      	ldr	r3, [pc, #532]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a94:	691b      	ldr	r3, [r3, #16]
24013a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013a9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24013a9c:	4b82      	ldr	r3, [pc, #520]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013aa0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24013aa2:	69bb      	ldr	r3, [r7, #24]
24013aa4:	2b08      	cmp	r3, #8
24013aa6:	d007      	beq.n	24013ab8 <HAL_RCC_OscConfig+0x308>
24013aa8:	69bb      	ldr	r3, [r7, #24]
24013aaa:	2b18      	cmp	r3, #24
24013aac:	d13a      	bne.n	24013b24 <HAL_RCC_OscConfig+0x374>
24013aae:	697b      	ldr	r3, [r7, #20]
24013ab0:	f003 0303 	and.w	r3, r3, #3
24013ab4:	2b01      	cmp	r3, #1
24013ab6:	d135      	bne.n	24013b24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013ab8:	4b7b      	ldr	r3, [pc, #492]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013aba:	681b      	ldr	r3, [r3, #0]
24013abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013ac0:	2b00      	cmp	r3, #0
24013ac2:	d005      	beq.n	24013ad0 <HAL_RCC_OscConfig+0x320>
24013ac4:	687b      	ldr	r3, [r7, #4]
24013ac6:	69db      	ldr	r3, [r3, #28]
24013ac8:	2b80      	cmp	r3, #128	; 0x80
24013aca:	d001      	beq.n	24013ad0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
24013acc:	2301      	movs	r3, #1
24013ace:	e296      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013ad0:	f7ee fc42 	bl	24002358 <HAL_GetREVID>
24013ad4:	4603      	mov	r3, r0
24013ad6:	f241 0203 	movw	r2, #4099	; 0x1003
24013ada:	4293      	cmp	r3, r2
24013adc:	d817      	bhi.n	24013b0e <HAL_RCC_OscConfig+0x35e>
24013ade:	687b      	ldr	r3, [r7, #4]
24013ae0:	6a1b      	ldr	r3, [r3, #32]
24013ae2:	2b20      	cmp	r3, #32
24013ae4:	d108      	bne.n	24013af8 <HAL_RCC_OscConfig+0x348>
24013ae6:	4b70      	ldr	r3, [pc, #448]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013ae8:	685b      	ldr	r3, [r3, #4]
24013aea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24013aee:	4a6e      	ldr	r2, [pc, #440]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24013af4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013af6:	e075      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013af8:	4b6b      	ldr	r3, [pc, #428]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013afa:	685b      	ldr	r3, [r3, #4]
24013afc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24013b00:	687b      	ldr	r3, [r7, #4]
24013b02:	6a1b      	ldr	r3, [r3, #32]
24013b04:	069b      	lsls	r3, r3, #26
24013b06:	4968      	ldr	r1, [pc, #416]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b08:	4313      	orrs	r3, r2
24013b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013b0c:	e06a      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013b0e:	4b66      	ldr	r3, [pc, #408]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b10:	68db      	ldr	r3, [r3, #12]
24013b12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24013b16:	687b      	ldr	r3, [r7, #4]
24013b18:	6a1b      	ldr	r3, [r3, #32]
24013b1a:	061b      	lsls	r3, r3, #24
24013b1c:	4962      	ldr	r1, [pc, #392]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b1e:	4313      	orrs	r3, r2
24013b20:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013b22:	e05f      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
24013b24:	687b      	ldr	r3, [r7, #4]
24013b26:	69db      	ldr	r3, [r3, #28]
24013b28:	2b00      	cmp	r3, #0
24013b2a:	d042      	beq.n	24013bb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24013b2c:	4b5e      	ldr	r3, [pc, #376]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b2e:	681b      	ldr	r3, [r3, #0]
24013b30:	4a5d      	ldr	r2, [pc, #372]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24013b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013b38:	f7ee fb74 	bl	24002224 <HAL_GetTick>
24013b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24013b3e:	e008      	b.n	24013b52 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24013b40:	f7ee fb70 	bl	24002224 <HAL_GetTick>
24013b44:	4602      	mov	r2, r0
24013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013b48:	1ad3      	subs	r3, r2, r3
24013b4a:	2b02      	cmp	r3, #2
24013b4c:	d901      	bls.n	24013b52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
24013b4e:	2303      	movs	r3, #3
24013b50:	e255      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24013b52:	4b55      	ldr	r3, [pc, #340]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b54:	681b      	ldr	r3, [r3, #0]
24013b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013b5a:	2b00      	cmp	r3, #0
24013b5c:	d0f0      	beq.n	24013b40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013b5e:	f7ee fbfb 	bl	24002358 <HAL_GetREVID>
24013b62:	4603      	mov	r3, r0
24013b64:	f241 0203 	movw	r2, #4099	; 0x1003
24013b68:	4293      	cmp	r3, r2
24013b6a:	d817      	bhi.n	24013b9c <HAL_RCC_OscConfig+0x3ec>
24013b6c:	687b      	ldr	r3, [r7, #4]
24013b6e:	6a1b      	ldr	r3, [r3, #32]
24013b70:	2b20      	cmp	r3, #32
24013b72:	d108      	bne.n	24013b86 <HAL_RCC_OscConfig+0x3d6>
24013b74:	4b4c      	ldr	r3, [pc, #304]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b76:	685b      	ldr	r3, [r3, #4]
24013b78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24013b7c:	4a4a      	ldr	r2, [pc, #296]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24013b82:	6053      	str	r3, [r2, #4]
24013b84:	e02e      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
24013b86:	4b48      	ldr	r3, [pc, #288]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b88:	685b      	ldr	r3, [r3, #4]
24013b8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24013b8e:	687b      	ldr	r3, [r7, #4]
24013b90:	6a1b      	ldr	r3, [r3, #32]
24013b92:	069b      	lsls	r3, r3, #26
24013b94:	4944      	ldr	r1, [pc, #272]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b96:	4313      	orrs	r3, r2
24013b98:	604b      	str	r3, [r1, #4]
24013b9a:	e023      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
24013b9c:	4b42      	ldr	r3, [pc, #264]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013b9e:	68db      	ldr	r3, [r3, #12]
24013ba0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24013ba4:	687b      	ldr	r3, [r7, #4]
24013ba6:	6a1b      	ldr	r3, [r3, #32]
24013ba8:	061b      	lsls	r3, r3, #24
24013baa:	493f      	ldr	r1, [pc, #252]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bac:	4313      	orrs	r3, r2
24013bae:	60cb      	str	r3, [r1, #12]
24013bb0:	e018      	b.n	24013be4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24013bb2:	4b3d      	ldr	r3, [pc, #244]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bb4:	681b      	ldr	r3, [r3, #0]
24013bb6:	4a3c      	ldr	r2, [pc, #240]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24013bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013bbe:	f7ee fb31 	bl	24002224 <HAL_GetTick>
24013bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013bc4:	e008      	b.n	24013bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24013bc6:	f7ee fb2d 	bl	24002224 <HAL_GetTick>
24013bca:	4602      	mov	r2, r0
24013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013bce:	1ad3      	subs	r3, r2, r3
24013bd0:	2b02      	cmp	r3, #2
24013bd2:	d901      	bls.n	24013bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
24013bd4:	2303      	movs	r3, #3
24013bd6:	e212      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013bd8:	4b33      	ldr	r3, [pc, #204]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bda:	681b      	ldr	r3, [r3, #0]
24013bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013be0:	2b00      	cmp	r3, #0
24013be2:	d1f0      	bne.n	24013bc6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24013be4:	687b      	ldr	r3, [r7, #4]
24013be6:	681b      	ldr	r3, [r3, #0]
24013be8:	f003 0308 	and.w	r3, r3, #8
24013bec:	2b00      	cmp	r3, #0
24013bee:	d036      	beq.n	24013c5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
24013bf0:	687b      	ldr	r3, [r7, #4]
24013bf2:	695b      	ldr	r3, [r3, #20]
24013bf4:	2b00      	cmp	r3, #0
24013bf6:	d019      	beq.n	24013c2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
24013bf8:	4b2b      	ldr	r3, [pc, #172]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013bfc:	4a2a      	ldr	r2, [pc, #168]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013bfe:	f043 0301 	orr.w	r3, r3, #1
24013c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013c04:	f7ee fb0e 	bl	24002224 <HAL_GetTick>
24013c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24013c0a:	e008      	b.n	24013c1e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
24013c0c:	f7ee fb0a 	bl	24002224 <HAL_GetTick>
24013c10:	4602      	mov	r2, r0
24013c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013c14:	1ad3      	subs	r3, r2, r3
24013c16:	2b02      	cmp	r3, #2
24013c18:	d901      	bls.n	24013c1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
24013c1a:	2303      	movs	r3, #3
24013c1c:	e1ef      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24013c1e:	4b22      	ldr	r3, [pc, #136]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013c22:	f003 0302 	and.w	r3, r3, #2
24013c26:	2b00      	cmp	r3, #0
24013c28:	d0f0      	beq.n	24013c0c <HAL_RCC_OscConfig+0x45c>
24013c2a:	e018      	b.n	24013c5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
24013c2c:	4b1e      	ldr	r3, [pc, #120]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013c30:	4a1d      	ldr	r2, [pc, #116]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c32:	f023 0301 	bic.w	r3, r3, #1
24013c36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013c38:	f7ee faf4 	bl	24002224 <HAL_GetTick>
24013c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24013c3e:	e008      	b.n	24013c52 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
24013c40:	f7ee faf0 	bl	24002224 <HAL_GetTick>
24013c44:	4602      	mov	r2, r0
24013c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013c48:	1ad3      	subs	r3, r2, r3
24013c4a:	2b02      	cmp	r3, #2
24013c4c:	d901      	bls.n	24013c52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
24013c4e:	2303      	movs	r3, #3
24013c50:	e1d5      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24013c52:	4b15      	ldr	r3, [pc, #84]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013c56:	f003 0302 	and.w	r3, r3, #2
24013c5a:	2b00      	cmp	r3, #0
24013c5c:	d1f0      	bne.n	24013c40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24013c5e:	687b      	ldr	r3, [r7, #4]
24013c60:	681b      	ldr	r3, [r3, #0]
24013c62:	f003 0320 	and.w	r3, r3, #32
24013c66:	2b00      	cmp	r3, #0
24013c68:	d039      	beq.n	24013cde <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
24013c6a:	687b      	ldr	r3, [r7, #4]
24013c6c:	699b      	ldr	r3, [r3, #24]
24013c6e:	2b00      	cmp	r3, #0
24013c70:	d01c      	beq.n	24013cac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
24013c72:	4b0d      	ldr	r3, [pc, #52]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c74:	681b      	ldr	r3, [r3, #0]
24013c76:	4a0c      	ldr	r2, [pc, #48]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24013c7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24013c7e:	f7ee fad1 	bl	24002224 <HAL_GetTick>
24013c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24013c84:	e008      	b.n	24013c98 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24013c86:	f7ee facd 	bl	24002224 <HAL_GetTick>
24013c8a:	4602      	mov	r2, r0
24013c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013c8e:	1ad3      	subs	r3, r2, r3
24013c90:	2b02      	cmp	r3, #2
24013c92:	d901      	bls.n	24013c98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
24013c94:	2303      	movs	r3, #3
24013c96:	e1b2      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24013c98:	4b03      	ldr	r3, [pc, #12]	; (24013ca8 <HAL_RCC_OscConfig+0x4f8>)
24013c9a:	681b      	ldr	r3, [r3, #0]
24013c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24013ca0:	2b00      	cmp	r3, #0
24013ca2:	d0f0      	beq.n	24013c86 <HAL_RCC_OscConfig+0x4d6>
24013ca4:	e01b      	b.n	24013cde <HAL_RCC_OscConfig+0x52e>
24013ca6:	bf00      	nop
24013ca8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
24013cac:	4b9b      	ldr	r3, [pc, #620]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013cae:	681b      	ldr	r3, [r3, #0]
24013cb0:	4a9a      	ldr	r2, [pc, #616]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24013cb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24013cb8:	f7ee fab4 	bl	24002224 <HAL_GetTick>
24013cbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24013cbe:	e008      	b.n	24013cd2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24013cc0:	f7ee fab0 	bl	24002224 <HAL_GetTick>
24013cc4:	4602      	mov	r2, r0
24013cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013cc8:	1ad3      	subs	r3, r2, r3
24013cca:	2b02      	cmp	r3, #2
24013ccc:	d901      	bls.n	24013cd2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
24013cce:	2303      	movs	r3, #3
24013cd0:	e195      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24013cd2:	4b92      	ldr	r3, [pc, #584]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013cd4:	681b      	ldr	r3, [r3, #0]
24013cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24013cda:	2b00      	cmp	r3, #0
24013cdc:	d1f0      	bne.n	24013cc0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24013cde:	687b      	ldr	r3, [r7, #4]
24013ce0:	681b      	ldr	r3, [r3, #0]
24013ce2:	f003 0304 	and.w	r3, r3, #4
24013ce6:	2b00      	cmp	r3, #0
24013ce8:	f000 8081 	beq.w	24013dee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
24013cec:	4b8c      	ldr	r3, [pc, #560]	; (24013f20 <HAL_RCC_OscConfig+0x770>)
24013cee:	681b      	ldr	r3, [r3, #0]
24013cf0:	4a8b      	ldr	r2, [pc, #556]	; (24013f20 <HAL_RCC_OscConfig+0x770>)
24013cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24013cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24013cf8:	f7ee fa94 	bl	24002224 <HAL_GetTick>
24013cfc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24013cfe:	e008      	b.n	24013d12 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
24013d00:	f7ee fa90 	bl	24002224 <HAL_GetTick>
24013d04:	4602      	mov	r2, r0
24013d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013d08:	1ad3      	subs	r3, r2, r3
24013d0a:	2b64      	cmp	r3, #100	; 0x64
24013d0c:	d901      	bls.n	24013d12 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
24013d0e:	2303      	movs	r3, #3
24013d10:	e175      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24013d12:	4b83      	ldr	r3, [pc, #524]	; (24013f20 <HAL_RCC_OscConfig+0x770>)
24013d14:	681b      	ldr	r3, [r3, #0]
24013d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013d1a:	2b00      	cmp	r3, #0
24013d1c:	d0f0      	beq.n	24013d00 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24013d1e:	687b      	ldr	r3, [r7, #4]
24013d20:	689b      	ldr	r3, [r3, #8]
24013d22:	2b01      	cmp	r3, #1
24013d24:	d106      	bne.n	24013d34 <HAL_RCC_OscConfig+0x584>
24013d26:	4b7d      	ldr	r3, [pc, #500]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d2a:	4a7c      	ldr	r2, [pc, #496]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d2c:	f043 0301 	orr.w	r3, r3, #1
24013d30:	6713      	str	r3, [r2, #112]	; 0x70
24013d32:	e02d      	b.n	24013d90 <HAL_RCC_OscConfig+0x5e0>
24013d34:	687b      	ldr	r3, [r7, #4]
24013d36:	689b      	ldr	r3, [r3, #8]
24013d38:	2b00      	cmp	r3, #0
24013d3a:	d10c      	bne.n	24013d56 <HAL_RCC_OscConfig+0x5a6>
24013d3c:	4b77      	ldr	r3, [pc, #476]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d40:	4a76      	ldr	r2, [pc, #472]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d42:	f023 0301 	bic.w	r3, r3, #1
24013d46:	6713      	str	r3, [r2, #112]	; 0x70
24013d48:	4b74      	ldr	r3, [pc, #464]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d4c:	4a73      	ldr	r2, [pc, #460]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d4e:	f023 0304 	bic.w	r3, r3, #4
24013d52:	6713      	str	r3, [r2, #112]	; 0x70
24013d54:	e01c      	b.n	24013d90 <HAL_RCC_OscConfig+0x5e0>
24013d56:	687b      	ldr	r3, [r7, #4]
24013d58:	689b      	ldr	r3, [r3, #8]
24013d5a:	2b05      	cmp	r3, #5
24013d5c:	d10c      	bne.n	24013d78 <HAL_RCC_OscConfig+0x5c8>
24013d5e:	4b6f      	ldr	r3, [pc, #444]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d62:	4a6e      	ldr	r2, [pc, #440]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d64:	f043 0304 	orr.w	r3, r3, #4
24013d68:	6713      	str	r3, [r2, #112]	; 0x70
24013d6a:	4b6c      	ldr	r3, [pc, #432]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d6e:	4a6b      	ldr	r2, [pc, #428]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d70:	f043 0301 	orr.w	r3, r3, #1
24013d74:	6713      	str	r3, [r2, #112]	; 0x70
24013d76:	e00b      	b.n	24013d90 <HAL_RCC_OscConfig+0x5e0>
24013d78:	4b68      	ldr	r3, [pc, #416]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d7c:	4a67      	ldr	r2, [pc, #412]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d7e:	f023 0301 	bic.w	r3, r3, #1
24013d82:	6713      	str	r3, [r2, #112]	; 0x70
24013d84:	4b65      	ldr	r3, [pc, #404]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013d88:	4a64      	ldr	r2, [pc, #400]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013d8a:	f023 0304 	bic.w	r3, r3, #4
24013d8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24013d90:	687b      	ldr	r3, [r7, #4]
24013d92:	689b      	ldr	r3, [r3, #8]
24013d94:	2b00      	cmp	r3, #0
24013d96:	d015      	beq.n	24013dc4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013d98:	f7ee fa44 	bl	24002224 <HAL_GetTick>
24013d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24013d9e:	e00a      	b.n	24013db6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
24013da0:	f7ee fa40 	bl	24002224 <HAL_GetTick>
24013da4:	4602      	mov	r2, r0
24013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013da8:	1ad3      	subs	r3, r2, r3
24013daa:	f241 3288 	movw	r2, #5000	; 0x1388
24013dae:	4293      	cmp	r3, r2
24013db0:	d901      	bls.n	24013db6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
24013db2:	2303      	movs	r3, #3
24013db4:	e123      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24013db6:	4b59      	ldr	r3, [pc, #356]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013dba:	f003 0302 	and.w	r3, r3, #2
24013dbe:	2b00      	cmp	r3, #0
24013dc0:	d0ee      	beq.n	24013da0 <HAL_RCC_OscConfig+0x5f0>
24013dc2:	e014      	b.n	24013dee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013dc4:	f7ee fa2e 	bl	24002224 <HAL_GetTick>
24013dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24013dca:	e00a      	b.n	24013de2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
24013dcc:	f7ee fa2a 	bl	24002224 <HAL_GetTick>
24013dd0:	4602      	mov	r2, r0
24013dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013dd4:	1ad3      	subs	r3, r2, r3
24013dd6:	f241 3288 	movw	r2, #5000	; 0x1388
24013dda:	4293      	cmp	r3, r2
24013ddc:	d901      	bls.n	24013de2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
24013dde:	2303      	movs	r3, #3
24013de0:	e10d      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24013de2:	4b4e      	ldr	r3, [pc, #312]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013de6:	f003 0302 	and.w	r3, r3, #2
24013dea:	2b00      	cmp	r3, #0
24013dec:	d1ee      	bne.n	24013dcc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24013dee:	687b      	ldr	r3, [r7, #4]
24013df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013df2:	2b00      	cmp	r3, #0
24013df4:	f000 8102 	beq.w	24013ffc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24013df8:	4b48      	ldr	r3, [pc, #288]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013dfa:	691b      	ldr	r3, [r3, #16]
24013dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013e00:	2b18      	cmp	r3, #24
24013e02:	f000 80bd 	beq.w	24013f80 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24013e06:	687b      	ldr	r3, [r7, #4]
24013e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013e0a:	2b02      	cmp	r3, #2
24013e0c:	f040 809e 	bne.w	24013f4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24013e10:	4b42      	ldr	r3, [pc, #264]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e12:	681b      	ldr	r3, [r3, #0]
24013e14:	4a41      	ldr	r2, [pc, #260]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24013e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013e1c:	f7ee fa02 	bl	24002224 <HAL_GetTick>
24013e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013e22:	e008      	b.n	24013e36 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24013e24:	f7ee f9fe 	bl	24002224 <HAL_GetTick>
24013e28:	4602      	mov	r2, r0
24013e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013e2c:	1ad3      	subs	r3, r2, r3
24013e2e:	2b02      	cmp	r3, #2
24013e30:	d901      	bls.n	24013e36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
24013e32:	2303      	movs	r3, #3
24013e34:	e0e3      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013e36:	4b39      	ldr	r3, [pc, #228]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e38:	681b      	ldr	r3, [r3, #0]
24013e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24013e3e:	2b00      	cmp	r3, #0
24013e40:	d1f0      	bne.n	24013e24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24013e42:	4b36      	ldr	r3, [pc, #216]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24013e46:	4b37      	ldr	r3, [pc, #220]	; (24013f24 <HAL_RCC_OscConfig+0x774>)
24013e48:	4013      	ands	r3, r2
24013e4a:	687a      	ldr	r2, [r7, #4]
24013e4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
24013e4e:	687a      	ldr	r2, [r7, #4]
24013e50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
24013e52:	0112      	lsls	r2, r2, #4
24013e54:	430a      	orrs	r2, r1
24013e56:	4931      	ldr	r1, [pc, #196]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e58:	4313      	orrs	r3, r2
24013e5a:	628b      	str	r3, [r1, #40]	; 0x28
24013e5c:	687b      	ldr	r3, [r7, #4]
24013e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013e60:	3b01      	subs	r3, #1
24013e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
24013e66:	687b      	ldr	r3, [r7, #4]
24013e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013e6a:	3b01      	subs	r3, #1
24013e6c:	025b      	lsls	r3, r3, #9
24013e6e:	b29b      	uxth	r3, r3
24013e70:	431a      	orrs	r2, r3
24013e72:	687b      	ldr	r3, [r7, #4]
24013e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013e76:	3b01      	subs	r3, #1
24013e78:	041b      	lsls	r3, r3, #16
24013e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24013e7e:	431a      	orrs	r2, r3
24013e80:	687b      	ldr	r3, [r7, #4]
24013e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013e84:	3b01      	subs	r3, #1
24013e86:	061b      	lsls	r3, r3, #24
24013e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24013e8c:	4923      	ldr	r1, [pc, #140]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e8e:	4313      	orrs	r3, r2
24013e90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
24013e92:	4b22      	ldr	r3, [pc, #136]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013e96:	4a21      	ldr	r2, [pc, #132]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013e98:	f023 0301 	bic.w	r3, r3, #1
24013e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24013e9e:	4b1f      	ldr	r3, [pc, #124]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24013ea2:	4b21      	ldr	r3, [pc, #132]	; (24013f28 <HAL_RCC_OscConfig+0x778>)
24013ea4:	4013      	ands	r3, r2
24013ea6:	687a      	ldr	r2, [r7, #4]
24013ea8:	6c92      	ldr	r2, [r2, #72]	; 0x48
24013eaa:	00d2      	lsls	r2, r2, #3
24013eac:	491b      	ldr	r1, [pc, #108]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013eae:	4313      	orrs	r3, r2
24013eb0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24013eb2:	4b1a      	ldr	r3, [pc, #104]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013eb6:	f023 020c 	bic.w	r2, r3, #12
24013eba:	687b      	ldr	r3, [r7, #4]
24013ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24013ebe:	4917      	ldr	r1, [pc, #92]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ec0:	4313      	orrs	r3, r2
24013ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24013ec4:	4b15      	ldr	r3, [pc, #84]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013ec8:	f023 0202 	bic.w	r2, r3, #2
24013ecc:	687b      	ldr	r3, [r7, #4]
24013ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013ed0:	4912      	ldr	r1, [pc, #72]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ed2:	4313      	orrs	r3, r2
24013ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24013ed6:	4b11      	ldr	r3, [pc, #68]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013eda:	4a10      	ldr	r2, [pc, #64]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24013ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24013ee2:	4b0e      	ldr	r3, [pc, #56]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013ee6:	4a0d      	ldr	r2, [pc, #52]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24013eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24013eee:	4b0b      	ldr	r3, [pc, #44]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013ef2:	4a0a      	ldr	r2, [pc, #40]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24013ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
24013efa:	4b08      	ldr	r3, [pc, #32]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013efe:	4a07      	ldr	r2, [pc, #28]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013f00:	f043 0301 	orr.w	r3, r3, #1
24013f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
24013f06:	4b05      	ldr	r3, [pc, #20]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013f08:	681b      	ldr	r3, [r3, #0]
24013f0a:	4a04      	ldr	r2, [pc, #16]	; (24013f1c <HAL_RCC_OscConfig+0x76c>)
24013f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24013f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013f12:	f7ee f987 	bl	24002224 <HAL_GetTick>
24013f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24013f18:	e011      	b.n	24013f3e <HAL_RCC_OscConfig+0x78e>
24013f1a:	bf00      	nop
24013f1c:	58024400 	.word	0x58024400
24013f20:	58024800 	.word	0x58024800
24013f24:	fffffc0c 	.word	0xfffffc0c
24013f28:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24013f2c:	f7ee f97a 	bl	24002224 <HAL_GetTick>
24013f30:	4602      	mov	r2, r0
24013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013f34:	1ad3      	subs	r3, r2, r3
24013f36:	2b02      	cmp	r3, #2
24013f38:	d901      	bls.n	24013f3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
24013f3a:	2303      	movs	r3, #3
24013f3c:	e05f      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24013f3e:	4b32      	ldr	r3, [pc, #200]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f40:	681b      	ldr	r3, [r3, #0]
24013f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24013f46:	2b00      	cmp	r3, #0
24013f48:	d0f0      	beq.n	24013f2c <HAL_RCC_OscConfig+0x77c>
24013f4a:	e057      	b.n	24013ffc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24013f4c:	4b2e      	ldr	r3, [pc, #184]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f4e:	681b      	ldr	r3, [r3, #0]
24013f50:	4a2d      	ldr	r2, [pc, #180]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24013f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013f58:	f7ee f964 	bl	24002224 <HAL_GetTick>
24013f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013f5e:	e008      	b.n	24013f72 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24013f60:	f7ee f960 	bl	24002224 <HAL_GetTick>
24013f64:	4602      	mov	r2, r0
24013f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013f68:	1ad3      	subs	r3, r2, r3
24013f6a:	2b02      	cmp	r3, #2
24013f6c:	d901      	bls.n	24013f72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
24013f6e:	2303      	movs	r3, #3
24013f70:	e045      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013f72:	4b25      	ldr	r3, [pc, #148]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f74:	681b      	ldr	r3, [r3, #0]
24013f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24013f7a:	2b00      	cmp	r3, #0
24013f7c:	d1f0      	bne.n	24013f60 <HAL_RCC_OscConfig+0x7b0>
24013f7e:	e03d      	b.n	24013ffc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
24013f80:	4b21      	ldr	r3, [pc, #132]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013f84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
24013f86:	4b20      	ldr	r3, [pc, #128]	; (24014008 <HAL_RCC_OscConfig+0x858>)
24013f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013f8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24013f8c:	687b      	ldr	r3, [r7, #4]
24013f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013f90:	2b01      	cmp	r3, #1
24013f92:	d031      	beq.n	24013ff8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24013f94:	693b      	ldr	r3, [r7, #16]
24013f96:	f003 0203 	and.w	r2, r3, #3
24013f9a:	687b      	ldr	r3, [r7, #4]
24013f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24013f9e:	429a      	cmp	r2, r3
24013fa0:	d12a      	bne.n	24013ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24013fa2:	693b      	ldr	r3, [r7, #16]
24013fa4:	091b      	lsrs	r3, r3, #4
24013fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24013faa:	687b      	ldr	r3, [r7, #4]
24013fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24013fae:	429a      	cmp	r2, r3
24013fb0:	d122      	bne.n	24013ff8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013fb2:	68fb      	ldr	r3, [r7, #12]
24013fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
24013fb8:	687b      	ldr	r3, [r7, #4]
24013fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013fbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24013fbe:	429a      	cmp	r2, r3
24013fc0:	d11a      	bne.n	24013ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24013fc2:	68fb      	ldr	r3, [r7, #12]
24013fc4:	0a5b      	lsrs	r3, r3, #9
24013fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24013fca:	687b      	ldr	r3, [r7, #4]
24013fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013fce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013fd0:	429a      	cmp	r2, r3
24013fd2:	d111      	bne.n	24013ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24013fd4:	68fb      	ldr	r3, [r7, #12]
24013fd6:	0c1b      	lsrs	r3, r3, #16
24013fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24013fdc:	687b      	ldr	r3, [r7, #4]
24013fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013fe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24013fe2:	429a      	cmp	r2, r3
24013fe4:	d108      	bne.n	24013ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24013fe6:	68fb      	ldr	r3, [r7, #12]
24013fe8:	0e1b      	lsrs	r3, r3, #24
24013fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24013fee:	687b      	ldr	r3, [r7, #4]
24013ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013ff2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24013ff4:	429a      	cmp	r2, r3
24013ff6:	d001      	beq.n	24013ffc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
24013ff8:	2301      	movs	r3, #1
24013ffa:	e000      	b.n	24013ffe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
24013ffc:	2300      	movs	r3, #0
}
24013ffe:	4618      	mov	r0, r3
24014000:	3730      	adds	r7, #48	; 0x30
24014002:	46bd      	mov	sp, r7
24014004:	bd80      	pop	{r7, pc}
24014006:	bf00      	nop
24014008:	58024400 	.word	0x58024400

2401400c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2401400c:	b580      	push	{r7, lr}
2401400e:	b086      	sub	sp, #24
24014010:	af00      	add	r7, sp, #0
24014012:	6078      	str	r0, [r7, #4]
24014014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
24014016:	687b      	ldr	r3, [r7, #4]
24014018:	2b00      	cmp	r3, #0
2401401a:	d101      	bne.n	24014020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2401401c:	2301      	movs	r3, #1
2401401e:	e19c      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
24014020:	4b8a      	ldr	r3, [pc, #552]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
24014022:	681b      	ldr	r3, [r3, #0]
24014024:	f003 030f 	and.w	r3, r3, #15
24014028:	683a      	ldr	r2, [r7, #0]
2401402a:	429a      	cmp	r2, r3
2401402c:	d910      	bls.n	24014050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2401402e:	4b87      	ldr	r3, [pc, #540]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
24014030:	681b      	ldr	r3, [r3, #0]
24014032:	f023 020f 	bic.w	r2, r3, #15
24014036:	4985      	ldr	r1, [pc, #532]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
24014038:	683b      	ldr	r3, [r7, #0]
2401403a:	4313      	orrs	r3, r2
2401403c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2401403e:	4b83      	ldr	r3, [pc, #524]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
24014040:	681b      	ldr	r3, [r3, #0]
24014042:	f003 030f 	and.w	r3, r3, #15
24014046:	683a      	ldr	r2, [r7, #0]
24014048:	429a      	cmp	r2, r3
2401404a:	d001      	beq.n	24014050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2401404c:	2301      	movs	r3, #1
2401404e:	e184      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24014050:	687b      	ldr	r3, [r7, #4]
24014052:	681b      	ldr	r3, [r3, #0]
24014054:	f003 0304 	and.w	r3, r3, #4
24014058:	2b00      	cmp	r3, #0
2401405a:	d010      	beq.n	2401407e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2401405c:	687b      	ldr	r3, [r7, #4]
2401405e:	691a      	ldr	r2, [r3, #16]
24014060:	4b7b      	ldr	r3, [pc, #492]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014062:	699b      	ldr	r3, [r3, #24]
24014064:	f003 0370 	and.w	r3, r3, #112	; 0x70
24014068:	429a      	cmp	r2, r3
2401406a:	d908      	bls.n	2401407e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2401406c:	4b78      	ldr	r3, [pc, #480]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401406e:	699b      	ldr	r3, [r3, #24]
24014070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24014074:	687b      	ldr	r3, [r7, #4]
24014076:	691b      	ldr	r3, [r3, #16]
24014078:	4975      	ldr	r1, [pc, #468]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401407a:	4313      	orrs	r3, r2
2401407c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2401407e:	687b      	ldr	r3, [r7, #4]
24014080:	681b      	ldr	r3, [r3, #0]
24014082:	f003 0308 	and.w	r3, r3, #8
24014086:	2b00      	cmp	r3, #0
24014088:	d010      	beq.n	240140ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2401408a:	687b      	ldr	r3, [r7, #4]
2401408c:	695a      	ldr	r2, [r3, #20]
2401408e:	4b70      	ldr	r3, [pc, #448]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014090:	69db      	ldr	r3, [r3, #28]
24014092:	f003 0370 	and.w	r3, r3, #112	; 0x70
24014096:	429a      	cmp	r2, r3
24014098:	d908      	bls.n	240140ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2401409a:	4b6d      	ldr	r3, [pc, #436]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401409c:	69db      	ldr	r3, [r3, #28]
2401409e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240140a2:	687b      	ldr	r3, [r7, #4]
240140a4:	695b      	ldr	r3, [r3, #20]
240140a6:	496a      	ldr	r1, [pc, #424]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140a8:	4313      	orrs	r3, r2
240140aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240140ac:	687b      	ldr	r3, [r7, #4]
240140ae:	681b      	ldr	r3, [r3, #0]
240140b0:	f003 0310 	and.w	r3, r3, #16
240140b4:	2b00      	cmp	r3, #0
240140b6:	d010      	beq.n	240140da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240140b8:	687b      	ldr	r3, [r7, #4]
240140ba:	699a      	ldr	r2, [r3, #24]
240140bc:	4b64      	ldr	r3, [pc, #400]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140be:	69db      	ldr	r3, [r3, #28]
240140c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
240140c4:	429a      	cmp	r2, r3
240140c6:	d908      	bls.n	240140da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240140c8:	4b61      	ldr	r3, [pc, #388]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140ca:	69db      	ldr	r3, [r3, #28]
240140cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240140d0:	687b      	ldr	r3, [r7, #4]
240140d2:	699b      	ldr	r3, [r3, #24]
240140d4:	495e      	ldr	r1, [pc, #376]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140d6:	4313      	orrs	r3, r2
240140d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240140da:	687b      	ldr	r3, [r7, #4]
240140dc:	681b      	ldr	r3, [r3, #0]
240140de:	f003 0320 	and.w	r3, r3, #32
240140e2:	2b00      	cmp	r3, #0
240140e4:	d010      	beq.n	24014108 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240140e6:	687b      	ldr	r3, [r7, #4]
240140e8:	69da      	ldr	r2, [r3, #28]
240140ea:	4b59      	ldr	r3, [pc, #356]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140ec:	6a1b      	ldr	r3, [r3, #32]
240140ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
240140f2:	429a      	cmp	r2, r3
240140f4:	d908      	bls.n	24014108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
240140f6:	4b56      	ldr	r3, [pc, #344]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240140f8:	6a1b      	ldr	r3, [r3, #32]
240140fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240140fe:	687b      	ldr	r3, [r7, #4]
24014100:	69db      	ldr	r3, [r3, #28]
24014102:	4953      	ldr	r1, [pc, #332]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014104:	4313      	orrs	r3, r2
24014106:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24014108:	687b      	ldr	r3, [r7, #4]
2401410a:	681b      	ldr	r3, [r3, #0]
2401410c:	f003 0302 	and.w	r3, r3, #2
24014110:	2b00      	cmp	r3, #0
24014112:	d010      	beq.n	24014136 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24014114:	687b      	ldr	r3, [r7, #4]
24014116:	68da      	ldr	r2, [r3, #12]
24014118:	4b4d      	ldr	r3, [pc, #308]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401411a:	699b      	ldr	r3, [r3, #24]
2401411c:	f003 030f 	and.w	r3, r3, #15
24014120:	429a      	cmp	r2, r3
24014122:	d908      	bls.n	24014136 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24014124:	4b4a      	ldr	r3, [pc, #296]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014126:	699b      	ldr	r3, [r3, #24]
24014128:	f023 020f 	bic.w	r2, r3, #15
2401412c:	687b      	ldr	r3, [r7, #4]
2401412e:	68db      	ldr	r3, [r3, #12]
24014130:	4947      	ldr	r1, [pc, #284]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014132:	4313      	orrs	r3, r2
24014134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24014136:	687b      	ldr	r3, [r7, #4]
24014138:	681b      	ldr	r3, [r3, #0]
2401413a:	f003 0301 	and.w	r3, r3, #1
2401413e:	2b00      	cmp	r3, #0
24014140:	d055      	beq.n	240141ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24014142:	4b43      	ldr	r3, [pc, #268]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014144:	699b      	ldr	r3, [r3, #24]
24014146:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2401414a:	687b      	ldr	r3, [r7, #4]
2401414c:	689b      	ldr	r3, [r3, #8]
2401414e:	4940      	ldr	r1, [pc, #256]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014150:	4313      	orrs	r3, r2
24014152:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24014154:	687b      	ldr	r3, [r7, #4]
24014156:	685b      	ldr	r3, [r3, #4]
24014158:	2b02      	cmp	r3, #2
2401415a:	d107      	bne.n	2401416c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2401415c:	4b3c      	ldr	r3, [pc, #240]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401415e:	681b      	ldr	r3, [r3, #0]
24014160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014164:	2b00      	cmp	r3, #0
24014166:	d121      	bne.n	240141ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24014168:	2301      	movs	r3, #1
2401416a:	e0f6      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2401416c:	687b      	ldr	r3, [r7, #4]
2401416e:	685b      	ldr	r3, [r3, #4]
24014170:	2b03      	cmp	r3, #3
24014172:	d107      	bne.n	24014184 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24014174:	4b36      	ldr	r3, [pc, #216]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014176:	681b      	ldr	r3, [r3, #0]
24014178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401417c:	2b00      	cmp	r3, #0
2401417e:	d115      	bne.n	240141ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24014180:	2301      	movs	r3, #1
24014182:	e0ea      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24014184:	687b      	ldr	r3, [r7, #4]
24014186:	685b      	ldr	r3, [r3, #4]
24014188:	2b01      	cmp	r3, #1
2401418a:	d107      	bne.n	2401419c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2401418c:	4b30      	ldr	r3, [pc, #192]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401418e:	681b      	ldr	r3, [r3, #0]
24014190:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014194:	2b00      	cmp	r3, #0
24014196:	d109      	bne.n	240141ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24014198:	2301      	movs	r3, #1
2401419a:	e0de      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2401419c:	4b2c      	ldr	r3, [pc, #176]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401419e:	681b      	ldr	r3, [r3, #0]
240141a0:	f003 0304 	and.w	r3, r3, #4
240141a4:	2b00      	cmp	r3, #0
240141a6:	d101      	bne.n	240141ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
240141a8:	2301      	movs	r3, #1
240141aa:	e0d6      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240141ac:	4b28      	ldr	r3, [pc, #160]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240141ae:	691b      	ldr	r3, [r3, #16]
240141b0:	f023 0207 	bic.w	r2, r3, #7
240141b4:	687b      	ldr	r3, [r7, #4]
240141b6:	685b      	ldr	r3, [r3, #4]
240141b8:	4925      	ldr	r1, [pc, #148]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240141ba:	4313      	orrs	r3, r2
240141bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240141be:	f7ee f831 	bl	24002224 <HAL_GetTick>
240141c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240141c4:	e00a      	b.n	240141dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
240141c6:	f7ee f82d 	bl	24002224 <HAL_GetTick>
240141ca:	4602      	mov	r2, r0
240141cc:	697b      	ldr	r3, [r7, #20]
240141ce:	1ad3      	subs	r3, r2, r3
240141d0:	f241 3288 	movw	r2, #5000	; 0x1388
240141d4:	4293      	cmp	r3, r2
240141d6:	d901      	bls.n	240141dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
240141d8:	2303      	movs	r3, #3
240141da:	e0be      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240141dc:	4b1c      	ldr	r3, [pc, #112]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
240141de:	691b      	ldr	r3, [r3, #16]
240141e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
240141e4:	687b      	ldr	r3, [r7, #4]
240141e6:	685b      	ldr	r3, [r3, #4]
240141e8:	00db      	lsls	r3, r3, #3
240141ea:	429a      	cmp	r2, r3
240141ec:	d1eb      	bne.n	240141c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240141ee:	687b      	ldr	r3, [r7, #4]
240141f0:	681b      	ldr	r3, [r3, #0]
240141f2:	f003 0302 	and.w	r3, r3, #2
240141f6:	2b00      	cmp	r3, #0
240141f8:	d010      	beq.n	2401421c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240141fa:	687b      	ldr	r3, [r7, #4]
240141fc:	68da      	ldr	r2, [r3, #12]
240141fe:	4b14      	ldr	r3, [pc, #80]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014200:	699b      	ldr	r3, [r3, #24]
24014202:	f003 030f 	and.w	r3, r3, #15
24014206:	429a      	cmp	r2, r3
24014208:	d208      	bcs.n	2401421c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2401420a:	4b11      	ldr	r3, [pc, #68]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
2401420c:	699b      	ldr	r3, [r3, #24]
2401420e:	f023 020f 	bic.w	r2, r3, #15
24014212:	687b      	ldr	r3, [r7, #4]
24014214:	68db      	ldr	r3, [r3, #12]
24014216:	490e      	ldr	r1, [pc, #56]	; (24014250 <HAL_RCC_ClockConfig+0x244>)
24014218:	4313      	orrs	r3, r2
2401421a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2401421c:	4b0b      	ldr	r3, [pc, #44]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
2401421e:	681b      	ldr	r3, [r3, #0]
24014220:	f003 030f 	and.w	r3, r3, #15
24014224:	683a      	ldr	r2, [r7, #0]
24014226:	429a      	cmp	r2, r3
24014228:	d214      	bcs.n	24014254 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2401422a:	4b08      	ldr	r3, [pc, #32]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
2401422c:	681b      	ldr	r3, [r3, #0]
2401422e:	f023 020f 	bic.w	r2, r3, #15
24014232:	4906      	ldr	r1, [pc, #24]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
24014234:	683b      	ldr	r3, [r7, #0]
24014236:	4313      	orrs	r3, r2
24014238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2401423a:	4b04      	ldr	r3, [pc, #16]	; (2401424c <HAL_RCC_ClockConfig+0x240>)
2401423c:	681b      	ldr	r3, [r3, #0]
2401423e:	f003 030f 	and.w	r3, r3, #15
24014242:	683a      	ldr	r2, [r7, #0]
24014244:	429a      	cmp	r2, r3
24014246:	d005      	beq.n	24014254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24014248:	2301      	movs	r3, #1
2401424a:	e086      	b.n	2401435a <HAL_RCC_ClockConfig+0x34e>
2401424c:	52002000 	.word	0x52002000
24014250:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24014254:	687b      	ldr	r3, [r7, #4]
24014256:	681b      	ldr	r3, [r3, #0]
24014258:	f003 0304 	and.w	r3, r3, #4
2401425c:	2b00      	cmp	r3, #0
2401425e:	d010      	beq.n	24014282 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24014260:	687b      	ldr	r3, [r7, #4]
24014262:	691a      	ldr	r2, [r3, #16]
24014264:	4b3f      	ldr	r3, [pc, #252]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
24014266:	699b      	ldr	r3, [r3, #24]
24014268:	f003 0370 	and.w	r3, r3, #112	; 0x70
2401426c:	429a      	cmp	r2, r3
2401426e:	d208      	bcs.n	24014282 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24014270:	4b3c      	ldr	r3, [pc, #240]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
24014272:	699b      	ldr	r3, [r3, #24]
24014274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24014278:	687b      	ldr	r3, [r7, #4]
2401427a:	691b      	ldr	r3, [r3, #16]
2401427c:	4939      	ldr	r1, [pc, #228]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
2401427e:	4313      	orrs	r3, r2
24014280:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24014282:	687b      	ldr	r3, [r7, #4]
24014284:	681b      	ldr	r3, [r3, #0]
24014286:	f003 0308 	and.w	r3, r3, #8
2401428a:	2b00      	cmp	r3, #0
2401428c:	d010      	beq.n	240142b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2401428e:	687b      	ldr	r3, [r7, #4]
24014290:	695a      	ldr	r2, [r3, #20]
24014292:	4b34      	ldr	r3, [pc, #208]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
24014294:	69db      	ldr	r3, [r3, #28]
24014296:	f003 0370 	and.w	r3, r3, #112	; 0x70
2401429a:	429a      	cmp	r2, r3
2401429c:	d208      	bcs.n	240142b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2401429e:	4b31      	ldr	r3, [pc, #196]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142a0:	69db      	ldr	r3, [r3, #28]
240142a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240142a6:	687b      	ldr	r3, [r7, #4]
240142a8:	695b      	ldr	r3, [r3, #20]
240142aa:	492e      	ldr	r1, [pc, #184]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142ac:	4313      	orrs	r3, r2
240142ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240142b0:	687b      	ldr	r3, [r7, #4]
240142b2:	681b      	ldr	r3, [r3, #0]
240142b4:	f003 0310 	and.w	r3, r3, #16
240142b8:	2b00      	cmp	r3, #0
240142ba:	d010      	beq.n	240142de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240142bc:	687b      	ldr	r3, [r7, #4]
240142be:	699a      	ldr	r2, [r3, #24]
240142c0:	4b28      	ldr	r3, [pc, #160]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142c2:	69db      	ldr	r3, [r3, #28]
240142c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
240142c8:	429a      	cmp	r2, r3
240142ca:	d208      	bcs.n	240142de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240142cc:	4b25      	ldr	r3, [pc, #148]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142ce:	69db      	ldr	r3, [r3, #28]
240142d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240142d4:	687b      	ldr	r3, [r7, #4]
240142d6:	699b      	ldr	r3, [r3, #24]
240142d8:	4922      	ldr	r1, [pc, #136]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142da:	4313      	orrs	r3, r2
240142dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
240142de:	687b      	ldr	r3, [r7, #4]
240142e0:	681b      	ldr	r3, [r3, #0]
240142e2:	f003 0320 	and.w	r3, r3, #32
240142e6:	2b00      	cmp	r3, #0
240142e8:	d010      	beq.n	2401430c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240142ea:	687b      	ldr	r3, [r7, #4]
240142ec:	69da      	ldr	r2, [r3, #28]
240142ee:	4b1d      	ldr	r3, [pc, #116]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142f0:	6a1b      	ldr	r3, [r3, #32]
240142f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
240142f6:	429a      	cmp	r2, r3
240142f8:	d208      	bcs.n	2401430c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
240142fa:	4b1a      	ldr	r3, [pc, #104]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
240142fc:	6a1b      	ldr	r3, [r3, #32]
240142fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24014302:	687b      	ldr	r3, [r7, #4]
24014304:	69db      	ldr	r3, [r3, #28]
24014306:	4917      	ldr	r1, [pc, #92]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
24014308:	4313      	orrs	r3, r2
2401430a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2401430c:	f000 f8be 	bl	2401448c <HAL_RCC_GetSysClockFreq>
24014310:	4602      	mov	r2, r0
24014312:	4b14      	ldr	r3, [pc, #80]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
24014314:	699b      	ldr	r3, [r3, #24]
24014316:	0a1b      	lsrs	r3, r3, #8
24014318:	f003 030f 	and.w	r3, r3, #15
2401431c:	4912      	ldr	r1, [pc, #72]	; (24014368 <HAL_RCC_ClockConfig+0x35c>)
2401431e:	5ccb      	ldrb	r3, [r1, r3]
24014320:	f003 031f 	and.w	r3, r3, #31
24014324:	fa22 f303 	lsr.w	r3, r2, r3
24014328:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2401432a:	4b0e      	ldr	r3, [pc, #56]	; (24014364 <HAL_RCC_ClockConfig+0x358>)
2401432c:	699b      	ldr	r3, [r3, #24]
2401432e:	f003 030f 	and.w	r3, r3, #15
24014332:	4a0d      	ldr	r2, [pc, #52]	; (24014368 <HAL_RCC_ClockConfig+0x35c>)
24014334:	5cd3      	ldrb	r3, [r2, r3]
24014336:	f003 031f 	and.w	r3, r3, #31
2401433a:	693a      	ldr	r2, [r7, #16]
2401433c:	fa22 f303 	lsr.w	r3, r2, r3
24014340:	4a0a      	ldr	r2, [pc, #40]	; (2401436c <HAL_RCC_ClockConfig+0x360>)
24014342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24014344:	4a0a      	ldr	r2, [pc, #40]	; (24014370 <HAL_RCC_ClockConfig+0x364>)
24014346:	693b      	ldr	r3, [r7, #16]
24014348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
2401434a:	4b0a      	ldr	r3, [pc, #40]	; (24014374 <HAL_RCC_ClockConfig+0x368>)
2401434c:	681b      	ldr	r3, [r3, #0]
2401434e:	4618      	mov	r0, r3
24014350:	f7ed ff1e 	bl	24002190 <HAL_InitTick>
24014354:	4603      	mov	r3, r0
24014356:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24014358:	7bfb      	ldrb	r3, [r7, #15]
}
2401435a:	4618      	mov	r0, r3
2401435c:	3718      	adds	r7, #24
2401435e:	46bd      	mov	sp, r7
24014360:	bd80      	pop	{r7, pc}
24014362:	bf00      	nop
24014364:	58024400 	.word	0x58024400
24014368:	24017764 	.word	0x24017764
2401436c:	240004cc 	.word	0x240004cc
24014370:	240004c8 	.word	0x240004c8
24014374:	240004d0 	.word	0x240004d0

24014378 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24014378:	b580      	push	{r7, lr}
2401437a:	b08c      	sub	sp, #48	; 0x30
2401437c:	af00      	add	r7, sp, #0
2401437e:	60f8      	str	r0, [r7, #12]
24014380:	60b9      	str	r1, [r7, #8]
24014382:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
24014384:	68fb      	ldr	r3, [r7, #12]
24014386:	2b00      	cmp	r3, #0
24014388:	d12a      	bne.n	240143e0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
2401438a:	4b2d      	ldr	r3, [pc, #180]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
2401438c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24014390:	4a2b      	ldr	r2, [pc, #172]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
24014392:	f043 0301 	orr.w	r3, r3, #1
24014396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
2401439a:	4b29      	ldr	r3, [pc, #164]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
2401439c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240143a0:	f003 0301 	and.w	r3, r3, #1
240143a4:	61bb      	str	r3, [r7, #24]
240143a6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
240143a8:	f44f 7380 	mov.w	r3, #256	; 0x100
240143ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240143ae:	2302      	movs	r3, #2
240143b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240143b2:	2303      	movs	r3, #3
240143b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240143b6:	2300      	movs	r3, #0
240143b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
240143ba:	2300      	movs	r3, #0
240143bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
240143be:	f107 031c 	add.w	r3, r7, #28
240143c2:	4619      	mov	r1, r3
240143c4:	481f      	ldr	r0, [pc, #124]	; (24014444 <HAL_RCC_MCOConfig+0xcc>)
240143c6:	f7f5 fce7 	bl	24009d98 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
240143ca:	4b1d      	ldr	r3, [pc, #116]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
240143cc:	691b      	ldr	r3, [r3, #16]
240143ce:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
240143d2:	68b9      	ldr	r1, [r7, #8]
240143d4:	687b      	ldr	r3, [r7, #4]
240143d6:	430b      	orrs	r3, r1
240143d8:	4919      	ldr	r1, [pc, #100]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
240143da:	4313      	orrs	r3, r2
240143dc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
240143de:	e02a      	b.n	24014436 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
240143e0:	4b17      	ldr	r3, [pc, #92]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
240143e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240143e6:	4a16      	ldr	r2, [pc, #88]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
240143e8:	f043 0304 	orr.w	r3, r3, #4
240143ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240143f0:	4b13      	ldr	r3, [pc, #76]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
240143f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240143f6:	f003 0304 	and.w	r3, r3, #4
240143fa:	617b      	str	r3, [r7, #20]
240143fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
240143fe:	f44f 7300 	mov.w	r3, #512	; 0x200
24014402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24014404:	2302      	movs	r3, #2
24014406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24014408:	2303      	movs	r3, #3
2401440a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2401440c:	2300      	movs	r3, #0
2401440e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24014410:	2300      	movs	r3, #0
24014412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24014414:	f107 031c 	add.w	r3, r7, #28
24014418:	4619      	mov	r1, r3
2401441a:	480b      	ldr	r0, [pc, #44]	; (24014448 <HAL_RCC_MCOConfig+0xd0>)
2401441c:	f7f5 fcbc 	bl	24009d98 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
24014420:	4b07      	ldr	r3, [pc, #28]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
24014422:	691b      	ldr	r3, [r3, #16]
24014424:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
24014428:	687b      	ldr	r3, [r7, #4]
2401442a:	01d9      	lsls	r1, r3, #7
2401442c:	68bb      	ldr	r3, [r7, #8]
2401442e:	430b      	orrs	r3, r1
24014430:	4903      	ldr	r1, [pc, #12]	; (24014440 <HAL_RCC_MCOConfig+0xc8>)
24014432:	4313      	orrs	r3, r2
24014434:	610b      	str	r3, [r1, #16]
}
24014436:	bf00      	nop
24014438:	3730      	adds	r7, #48	; 0x30
2401443a:	46bd      	mov	sp, r7
2401443c:	bd80      	pop	{r7, pc}
2401443e:	bf00      	nop
24014440:	58024400 	.word	0x58024400
24014444:	58020000 	.word	0x58020000
24014448:	58020800 	.word	0x58020800

2401444c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
2401444c:	b480      	push	{r7}
2401444e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
24014450:	4b05      	ldr	r3, [pc, #20]	; (24014468 <HAL_RCC_EnableCSS+0x1c>)
24014452:	681b      	ldr	r3, [r3, #0]
24014454:	4a04      	ldr	r2, [pc, #16]	; (24014468 <HAL_RCC_EnableCSS+0x1c>)
24014456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2401445a:	6013      	str	r3, [r2, #0]
}
2401445c:	bf00      	nop
2401445e:	46bd      	mov	sp, r7
24014460:	f85d 7b04 	ldr.w	r7, [sp], #4
24014464:	4770      	bx	lr
24014466:	bf00      	nop
24014468:	58024400 	.word	0x58024400

2401446c <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
2401446c:	b480      	push	{r7}
2401446e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
24014470:	4b05      	ldr	r3, [pc, #20]	; (24014488 <HAL_RCC_DisableCSS+0x1c>)
24014472:	681b      	ldr	r3, [r3, #0]
24014474:	4a04      	ldr	r2, [pc, #16]	; (24014488 <HAL_RCC_DisableCSS+0x1c>)
24014476:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
2401447a:	6013      	str	r3, [r2, #0]
}
2401447c:	bf00      	nop
2401447e:	46bd      	mov	sp, r7
24014480:	f85d 7b04 	ldr.w	r7, [sp], #4
24014484:	4770      	bx	lr
24014486:	bf00      	nop
24014488:	58024400 	.word	0x58024400

2401448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2401448c:	b480      	push	{r7}
2401448e:	b089      	sub	sp, #36	; 0x24
24014490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24014492:	4bb3      	ldr	r3, [pc, #716]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
24014494:	691b      	ldr	r3, [r3, #16]
24014496:	f003 0338 	and.w	r3, r3, #56	; 0x38
2401449a:	2b18      	cmp	r3, #24
2401449c:	f200 8155 	bhi.w	2401474a <HAL_RCC_GetSysClockFreq+0x2be>
240144a0:	a201      	add	r2, pc, #4	; (adr r2, 240144a8 <HAL_RCC_GetSysClockFreq+0x1c>)
240144a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240144a6:	bf00      	nop
240144a8:	2401450d 	.word	0x2401450d
240144ac:	2401474b 	.word	0x2401474b
240144b0:	2401474b 	.word	0x2401474b
240144b4:	2401474b 	.word	0x2401474b
240144b8:	2401474b 	.word	0x2401474b
240144bc:	2401474b 	.word	0x2401474b
240144c0:	2401474b 	.word	0x2401474b
240144c4:	2401474b 	.word	0x2401474b
240144c8:	24014533 	.word	0x24014533
240144cc:	2401474b 	.word	0x2401474b
240144d0:	2401474b 	.word	0x2401474b
240144d4:	2401474b 	.word	0x2401474b
240144d8:	2401474b 	.word	0x2401474b
240144dc:	2401474b 	.word	0x2401474b
240144e0:	2401474b 	.word	0x2401474b
240144e4:	2401474b 	.word	0x2401474b
240144e8:	24014539 	.word	0x24014539
240144ec:	2401474b 	.word	0x2401474b
240144f0:	2401474b 	.word	0x2401474b
240144f4:	2401474b 	.word	0x2401474b
240144f8:	2401474b 	.word	0x2401474b
240144fc:	2401474b 	.word	0x2401474b
24014500:	2401474b 	.word	0x2401474b
24014504:	2401474b 	.word	0x2401474b
24014508:	2401453f 	.word	0x2401453f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2401450c:	4b94      	ldr	r3, [pc, #592]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
2401450e:	681b      	ldr	r3, [r3, #0]
24014510:	f003 0320 	and.w	r3, r3, #32
24014514:	2b00      	cmp	r3, #0
24014516:	d009      	beq.n	2401452c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24014518:	4b91      	ldr	r3, [pc, #580]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
2401451a:	681b      	ldr	r3, [r3, #0]
2401451c:	08db      	lsrs	r3, r3, #3
2401451e:	f003 0303 	and.w	r3, r3, #3
24014522:	4a90      	ldr	r2, [pc, #576]	; (24014764 <HAL_RCC_GetSysClockFreq+0x2d8>)
24014524:	fa22 f303 	lsr.w	r3, r2, r3
24014528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
2401452a:	e111      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2401452c:	4b8d      	ldr	r3, [pc, #564]	; (24014764 <HAL_RCC_GetSysClockFreq+0x2d8>)
2401452e:	61bb      	str	r3, [r7, #24]
    break;
24014530:	e10e      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
24014532:	4b8d      	ldr	r3, [pc, #564]	; (24014768 <HAL_RCC_GetSysClockFreq+0x2dc>)
24014534:	61bb      	str	r3, [r7, #24]
    break;
24014536:	e10b      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
24014538:	4b8c      	ldr	r3, [pc, #560]	; (2401476c <HAL_RCC_GetSysClockFreq+0x2e0>)
2401453a:	61bb      	str	r3, [r7, #24]
    break;
2401453c:	e108      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2401453e:	4b88      	ldr	r3, [pc, #544]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
24014540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014542:	f003 0303 	and.w	r3, r3, #3
24014546:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24014548:	4b85      	ldr	r3, [pc, #532]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
2401454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401454c:	091b      	lsrs	r3, r3, #4
2401454e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014552:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24014554:	4b82      	ldr	r3, [pc, #520]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
24014556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014558:	f003 0301 	and.w	r3, r3, #1
2401455c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
2401455e:	4b80      	ldr	r3, [pc, #512]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
24014560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014562:	08db      	lsrs	r3, r3, #3
24014564:	f3c3 030c 	ubfx	r3, r3, #0, #13
24014568:	68fa      	ldr	r2, [r7, #12]
2401456a:	fb02 f303 	mul.w	r3, r2, r3
2401456e:	ee07 3a90 	vmov	s15, r3
24014572:	eef8 7a67 	vcvt.f32.u32	s15, s15
24014576:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
2401457a:	693b      	ldr	r3, [r7, #16]
2401457c:	2b00      	cmp	r3, #0
2401457e:	f000 80e1 	beq.w	24014744 <HAL_RCC_GetSysClockFreq+0x2b8>
24014582:	697b      	ldr	r3, [r7, #20]
24014584:	2b02      	cmp	r3, #2
24014586:	f000 8083 	beq.w	24014690 <HAL_RCC_GetSysClockFreq+0x204>
2401458a:	697b      	ldr	r3, [r7, #20]
2401458c:	2b02      	cmp	r3, #2
2401458e:	f200 80a1 	bhi.w	240146d4 <HAL_RCC_GetSysClockFreq+0x248>
24014592:	697b      	ldr	r3, [r7, #20]
24014594:	2b00      	cmp	r3, #0
24014596:	d003      	beq.n	240145a0 <HAL_RCC_GetSysClockFreq+0x114>
24014598:	697b      	ldr	r3, [r7, #20]
2401459a:	2b01      	cmp	r3, #1
2401459c:	d056      	beq.n	2401464c <HAL_RCC_GetSysClockFreq+0x1c0>
2401459e:	e099      	b.n	240146d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240145a0:	4b6f      	ldr	r3, [pc, #444]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
240145a2:	681b      	ldr	r3, [r3, #0]
240145a4:	f003 0320 	and.w	r3, r3, #32
240145a8:	2b00      	cmp	r3, #0
240145aa:	d02d      	beq.n	24014608 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240145ac:	4b6c      	ldr	r3, [pc, #432]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
240145ae:	681b      	ldr	r3, [r3, #0]
240145b0:	08db      	lsrs	r3, r3, #3
240145b2:	f003 0303 	and.w	r3, r3, #3
240145b6:	4a6b      	ldr	r2, [pc, #428]	; (24014764 <HAL_RCC_GetSysClockFreq+0x2d8>)
240145b8:	fa22 f303 	lsr.w	r3, r2, r3
240145bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240145be:	687b      	ldr	r3, [r7, #4]
240145c0:	ee07 3a90 	vmov	s15, r3
240145c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
240145c8:	693b      	ldr	r3, [r7, #16]
240145ca:	ee07 3a90 	vmov	s15, r3
240145ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
240145d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240145d6:	4b62      	ldr	r3, [pc, #392]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
240145d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240145da:	f3c3 0308 	ubfx	r3, r3, #0, #9
240145de:	ee07 3a90 	vmov	s15, r3
240145e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240145e6:	ed97 6a02 	vldr	s12, [r7, #8]
240145ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 24014770 <HAL_RCC_GetSysClockFreq+0x2e4>
240145ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
240145f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240145f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240145fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
240145fe:	ee67 7a27 	vmul.f32	s15, s14, s15
24014602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
24014606:	e087      	b.n	24014718 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24014608:	693b      	ldr	r3, [r7, #16]
2401460a:	ee07 3a90 	vmov	s15, r3
2401460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24014612:	eddf 6a58 	vldr	s13, [pc, #352]	; 24014774 <HAL_RCC_GetSysClockFreq+0x2e8>
24014616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401461a:	4b51      	ldr	r3, [pc, #324]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
2401461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24014622:	ee07 3a90 	vmov	s15, r3
24014626:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401462a:	ed97 6a02 	vldr	s12, [r7, #8]
2401462e:	eddf 5a50 	vldr	s11, [pc, #320]	; 24014770 <HAL_RCC_GetSysClockFreq+0x2e4>
24014632:	eec6 7a25 	vdiv.f32	s15, s12, s11
24014636:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401463a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24014642:	ee67 7a27 	vmul.f32	s15, s14, s15
24014646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401464a:	e065      	b.n	24014718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401464c:	693b      	ldr	r3, [r7, #16]
2401464e:	ee07 3a90 	vmov	s15, r3
24014652:	eef8 7a67 	vcvt.f32.u32	s15, s15
24014656:	eddf 6a48 	vldr	s13, [pc, #288]	; 24014778 <HAL_RCC_GetSysClockFreq+0x2ec>
2401465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401465e:	4b40      	ldr	r3, [pc, #256]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
24014660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014662:	f3c3 0308 	ubfx	r3, r3, #0, #9
24014666:	ee07 3a90 	vmov	s15, r3
2401466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401466e:	ed97 6a02 	vldr	s12, [r7, #8]
24014672:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24014770 <HAL_RCC_GetSysClockFreq+0x2e4>
24014676:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401467e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24014682:	ee77 7aa6 	vadd.f32	s15, s15, s13
24014686:	ee67 7a27 	vmul.f32	s15, s14, s15
2401468a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401468e:	e043      	b.n	24014718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24014690:	693b      	ldr	r3, [r7, #16]
24014692:	ee07 3a90 	vmov	s15, r3
24014696:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401469a:	eddf 6a38 	vldr	s13, [pc, #224]	; 2401477c <HAL_RCC_GetSysClockFreq+0x2f0>
2401469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240146a2:	4b2f      	ldr	r3, [pc, #188]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
240146a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240146a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240146aa:	ee07 3a90 	vmov	s15, r3
240146ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
240146b2:	ed97 6a02 	vldr	s12, [r7, #8]
240146b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24014770 <HAL_RCC_GetSysClockFreq+0x2e4>
240146ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
240146be:	ee76 7aa7 	vadd.f32	s15, s13, s15
240146c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240146c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240146ca:	ee67 7a27 	vmul.f32	s15, s14, s15
240146ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240146d2:	e021      	b.n	24014718 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240146d4:	693b      	ldr	r3, [r7, #16]
240146d6:	ee07 3a90 	vmov	s15, r3
240146da:	eef8 7a67 	vcvt.f32.u32	s15, s15
240146de:	eddf 6a26 	vldr	s13, [pc, #152]	; 24014778 <HAL_RCC_GetSysClockFreq+0x2ec>
240146e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240146e6:	4b1e      	ldr	r3, [pc, #120]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
240146e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240146ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
240146ee:	ee07 3a90 	vmov	s15, r3
240146f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240146f6:	ed97 6a02 	vldr	s12, [r7, #8]
240146fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24014770 <HAL_RCC_GetSysClockFreq+0x2e4>
240146fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
24014702:	ee76 7aa7 	vadd.f32	s15, s13, s15
24014706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401470e:	ee67 7a27 	vmul.f32	s15, s14, s15
24014712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24014716:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24014718:	4b11      	ldr	r3, [pc, #68]	; (24014760 <HAL_RCC_GetSysClockFreq+0x2d4>)
2401471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401471c:	0a5b      	lsrs	r3, r3, #9
2401471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24014722:	3301      	adds	r3, #1
24014724:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24014726:	683b      	ldr	r3, [r7, #0]
24014728:	ee07 3a90 	vmov	s15, r3
2401472c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24014730:	edd7 6a07 	vldr	s13, [r7, #28]
24014734:	eec6 7a87 	vdiv.f32	s15, s13, s14
24014738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401473c:	ee17 3a90 	vmov	r3, s15
24014740:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
24014742:	e005      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
24014744:	2300      	movs	r3, #0
24014746:	61bb      	str	r3, [r7, #24]
    break;
24014748:	e002      	b.n	24014750 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
2401474a:	4b07      	ldr	r3, [pc, #28]	; (24014768 <HAL_RCC_GetSysClockFreq+0x2dc>)
2401474c:	61bb      	str	r3, [r7, #24]
    break;
2401474e:	bf00      	nop
  }

  return sysclockfreq;
24014750:	69bb      	ldr	r3, [r7, #24]
}
24014752:	4618      	mov	r0, r3
24014754:	3724      	adds	r7, #36	; 0x24
24014756:	46bd      	mov	sp, r7
24014758:	f85d 7b04 	ldr.w	r7, [sp], #4
2401475c:	4770      	bx	lr
2401475e:	bf00      	nop
24014760:	58024400 	.word	0x58024400
24014764:	03d09000 	.word	0x03d09000
24014768:	003d0900 	.word	0x003d0900
2401476c:	016e3600 	.word	0x016e3600
24014770:	46000000 	.word	0x46000000
24014774:	4c742400 	.word	0x4c742400
24014778:	4a742400 	.word	0x4a742400
2401477c:	4bb71b00 	.word	0x4bb71b00

24014780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24014780:	b580      	push	{r7, lr}
24014782:	b082      	sub	sp, #8
24014784:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24014786:	f7ff fe81 	bl	2401448c <HAL_RCC_GetSysClockFreq>
2401478a:	4602      	mov	r2, r0
2401478c:	4b10      	ldr	r3, [pc, #64]	; (240147d0 <HAL_RCC_GetHCLKFreq+0x50>)
2401478e:	699b      	ldr	r3, [r3, #24]
24014790:	0a1b      	lsrs	r3, r3, #8
24014792:	f003 030f 	and.w	r3, r3, #15
24014796:	490f      	ldr	r1, [pc, #60]	; (240147d4 <HAL_RCC_GetHCLKFreq+0x54>)
24014798:	5ccb      	ldrb	r3, [r1, r3]
2401479a:	f003 031f 	and.w	r3, r3, #31
2401479e:	fa22 f303 	lsr.w	r3, r2, r3
240147a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240147a4:	4b0a      	ldr	r3, [pc, #40]	; (240147d0 <HAL_RCC_GetHCLKFreq+0x50>)
240147a6:	699b      	ldr	r3, [r3, #24]
240147a8:	f003 030f 	and.w	r3, r3, #15
240147ac:	4a09      	ldr	r2, [pc, #36]	; (240147d4 <HAL_RCC_GetHCLKFreq+0x54>)
240147ae:	5cd3      	ldrb	r3, [r2, r3]
240147b0:	f003 031f 	and.w	r3, r3, #31
240147b4:	687a      	ldr	r2, [r7, #4]
240147b6:	fa22 f303 	lsr.w	r3, r2, r3
240147ba:	4a07      	ldr	r2, [pc, #28]	; (240147d8 <HAL_RCC_GetHCLKFreq+0x58>)
240147bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240147be:	4a07      	ldr	r2, [pc, #28]	; (240147dc <HAL_RCC_GetHCLKFreq+0x5c>)
240147c0:	687b      	ldr	r3, [r7, #4]
240147c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
240147c4:	4b04      	ldr	r3, [pc, #16]	; (240147d8 <HAL_RCC_GetHCLKFreq+0x58>)
240147c6:	681b      	ldr	r3, [r3, #0]
}
240147c8:	4618      	mov	r0, r3
240147ca:	3708      	adds	r7, #8
240147cc:	46bd      	mov	sp, r7
240147ce:	bd80      	pop	{r7, pc}
240147d0:	58024400 	.word	0x58024400
240147d4:	24017764 	.word	0x24017764
240147d8:	240004cc 	.word	0x240004cc
240147dc:	240004c8 	.word	0x240004c8

240147e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
240147e0:	b580      	push	{r7, lr}
240147e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
240147e4:	f7ff ffcc 	bl	24014780 <HAL_RCC_GetHCLKFreq>
240147e8:	4602      	mov	r2, r0
240147ea:	4b06      	ldr	r3, [pc, #24]	; (24014804 <HAL_RCC_GetPCLK1Freq+0x24>)
240147ec:	69db      	ldr	r3, [r3, #28]
240147ee:	091b      	lsrs	r3, r3, #4
240147f0:	f003 0307 	and.w	r3, r3, #7
240147f4:	4904      	ldr	r1, [pc, #16]	; (24014808 <HAL_RCC_GetPCLK1Freq+0x28>)
240147f6:	5ccb      	ldrb	r3, [r1, r3]
240147f8:	f003 031f 	and.w	r3, r3, #31
240147fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24014800:	4618      	mov	r0, r3
24014802:	bd80      	pop	{r7, pc}
24014804:	58024400 	.word	0x58024400
24014808:	24017764 	.word	0x24017764

2401480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2401480c:	b580      	push	{r7, lr}
2401480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
24014810:	f7ff ffb6 	bl	24014780 <HAL_RCC_GetHCLKFreq>
24014814:	4602      	mov	r2, r0
24014816:	4b06      	ldr	r3, [pc, #24]	; (24014830 <HAL_RCC_GetPCLK2Freq+0x24>)
24014818:	69db      	ldr	r3, [r3, #28]
2401481a:	0a1b      	lsrs	r3, r3, #8
2401481c:	f003 0307 	and.w	r3, r3, #7
24014820:	4904      	ldr	r1, [pc, #16]	; (24014834 <HAL_RCC_GetPCLK2Freq+0x28>)
24014822:	5ccb      	ldrb	r3, [r1, r3]
24014824:	f003 031f 	and.w	r3, r3, #31
24014828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
2401482c:	4618      	mov	r0, r3
2401482e:	bd80      	pop	{r7, pc}
24014830:	58024400 	.word	0x58024400
24014834:	24017764 	.word	0x24017764

24014838 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24014838:	b580      	push	{r7, lr}
2401483a:	b082      	sub	sp, #8
2401483c:	af00      	add	r7, sp, #0
2401483e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
24014840:	687b      	ldr	r3, [r7, #4]
24014842:	223f      	movs	r2, #63	; 0x3f
24014844:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
24014846:	4b72      	ldr	r3, [pc, #456]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
24014848:	681b      	ldr	r3, [r3, #0]
2401484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2401484e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24014852:	d104      	bne.n	2401485e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
24014854:	687b      	ldr	r3, [r7, #4]
24014856:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
2401485a:	605a      	str	r2, [r3, #4]
2401485c:	e00e      	b.n	2401487c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
2401485e:	4b6c      	ldr	r3, [pc, #432]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
24014860:	681b      	ldr	r3, [r3, #0]
24014862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24014866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2401486a:	d104      	bne.n	24014876 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
2401486c:	687b      	ldr	r3, [r7, #4]
2401486e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24014872:	605a      	str	r2, [r3, #4]
24014874:	e002      	b.n	2401487c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
24014876:	687b      	ldr	r3, [r7, #4]
24014878:	2200      	movs	r2, #0
2401487a:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

   /* Get the CSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_CSION) == RCC_CR_CSION)
2401487c:	4b64      	ldr	r3, [pc, #400]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
2401487e:	681b      	ldr	r3, [r3, #0]
24014880:	f003 0380 	and.w	r3, r3, #128	; 0x80
24014884:	2b80      	cmp	r3, #128	; 0x80
24014886:	d103      	bne.n	24014890 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
24014888:	687b      	ldr	r3, [r7, #4]
2401488a:	2280      	movs	r2, #128	; 0x80
2401488c:	61da      	str	r2, [r3, #28]
2401488e:	e002      	b.n	24014896 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
24014890:	687b      	ldr	r3, [r7, #4]
24014892:	2200      	movs	r2, #0
24014894:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
24014896:	f7ed fd5f 	bl	24002358 <HAL_GetREVID>
2401489a:	4603      	mov	r3, r0
2401489c:	f241 0203 	movw	r2, #4099	; 0x1003
240148a0:	4293      	cmp	r3, r2
240148a2:	d807      	bhi.n	240148b4 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
240148a4:	4b5a      	ldr	r3, [pc, #360]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240148a6:	685b      	ldr	r3, [r3, #4]
240148a8:	0e9b      	lsrs	r3, r3, #26
240148aa:	f003 021f 	and.w	r2, r3, #31
240148ae:	687b      	ldr	r3, [r7, #4]
240148b0:	621a      	str	r2, [r3, #32]
240148b2:	e006      	b.n	240148c2 <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
240148b4:	4b56      	ldr	r3, [pc, #344]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240148b6:	68db      	ldr	r3, [r3, #12]
240148b8:	0e1b      	lsrs	r3, r3, #24
240148ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240148be:	687b      	ldr	r3, [r7, #4]
240148c0:	621a      	str	r2, [r3, #32]
#else
 RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
240148c2:	4b53      	ldr	r3, [pc, #332]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240148c4:	681b      	ldr	r3, [r3, #0]
240148c6:	f003 0301 	and.w	r3, r3, #1
240148ca:	2b01      	cmp	r3, #1
240148cc:	d103      	bne.n	240148d6 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
240148ce:	687b      	ldr	r3, [r7, #4]
240148d0:	2201      	movs	r2, #1
240148d2:	60da      	str	r2, [r3, #12]
240148d4:	e002      	b.n	240148dc <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
240148d6:	687b      	ldr	r3, [r7, #4]
240148d8:	2200      	movs	r2, #0
240148da:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
240148dc:	f7ed fd3c 	bl	24002358 <HAL_GetREVID>
240148e0:	4603      	mov	r3, r0
240148e2:	f241 0203 	movw	r2, #4099	; 0x1003
240148e6:	4293      	cmp	r3, r2
240148e8:	d807      	bhi.n	240148fa <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
240148ea:	4b49      	ldr	r3, [pc, #292]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240148ec:	685b      	ldr	r3, [r3, #4]
240148ee:	0b1b      	lsrs	r3, r3, #12
240148f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240148f4:	687b      	ldr	r3, [r7, #4]
240148f6:	611a      	str	r2, [r3, #16]
240148f8:	e006      	b.n	24014908 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
240148fa:	4b45      	ldr	r3, [pc, #276]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240148fc:	685b      	ldr	r3, [r3, #4]
240148fe:	0e1b      	lsrs	r3, r3, #24
24014900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24014904:	687b      	ldr	r3, [r7, #4]
24014906:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
24014908:	4b41      	ldr	r3, [pc, #260]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
2401490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401490c:	f003 0304 	and.w	r3, r3, #4
24014910:	2b04      	cmp	r3, #4
24014912:	d103      	bne.n	2401491c <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
24014914:	687b      	ldr	r3, [r7, #4]
24014916:	2205      	movs	r2, #5
24014918:	609a      	str	r2, [r3, #8]
2401491a:	e00c      	b.n	24014936 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
2401491c:	4b3c      	ldr	r3, [pc, #240]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
2401491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014920:	f003 0301 	and.w	r3, r3, #1
24014924:	2b01      	cmp	r3, #1
24014926:	d103      	bne.n	24014930 <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
24014928:	687b      	ldr	r3, [r7, #4]
2401492a:	2201      	movs	r2, #1
2401492c:	609a      	str	r2, [r3, #8]
2401492e:	e002      	b.n	24014936 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
24014930:	687b      	ldr	r3, [r7, #4]
24014932:	2200      	movs	r2, #0
24014934:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
24014936:	4b36      	ldr	r3, [pc, #216]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
24014938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2401493a:	f003 0301 	and.w	r3, r3, #1
2401493e:	2b01      	cmp	r3, #1
24014940:	d103      	bne.n	2401494a <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
24014942:	687b      	ldr	r3, [r7, #4]
24014944:	2201      	movs	r2, #1
24014946:	615a      	str	r2, [r3, #20]
24014948:	e002      	b.n	24014950 <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
2401494a:	687b      	ldr	r3, [r7, #4]
2401494c:	2200      	movs	r2, #0
2401494e:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
24014950:	4b2f      	ldr	r3, [pc, #188]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
24014952:	681b      	ldr	r3, [r3, #0]
24014954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24014958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2401495c:	d103      	bne.n	24014966 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
2401495e:	687b      	ldr	r3, [r7, #4]
24014960:	2201      	movs	r2, #1
24014962:	619a      	str	r2, [r3, #24]
24014964:	e002      	b.n	2401496c <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
24014966:	687b      	ldr	r3, [r7, #4]
24014968:	2200      	movs	r2, #0
2401496a:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
2401496c:	4b28      	ldr	r3, [pc, #160]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
2401496e:	681b      	ldr	r3, [r3, #0]
24014970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24014974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24014978:	d103      	bne.n	24014982 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
2401497a:	687b      	ldr	r3, [r7, #4]
2401497c:	2202      	movs	r2, #2
2401497e:	625a      	str	r2, [r3, #36]	; 0x24
24014980:	e002      	b.n	24014988 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
24014982:	687b      	ldr	r3, [r7, #4]
24014984:	2201      	movs	r2, #1
24014986:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24014988:	4b21      	ldr	r3, [pc, #132]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
2401498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401498c:	f003 0203 	and.w	r2, r3, #3
24014990:	687b      	ldr	r3, [r7, #4]
24014992:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> RCC_PLLCKSELR_DIVM1_Pos);
24014994:	4b1e      	ldr	r3, [pc, #120]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
24014996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014998:	091b      	lsrs	r3, r3, #4
2401499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401499e:	687b      	ldr	r3, [r7, #4]
240149a0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos)+ 1U;
240149a2:	4b1b      	ldr	r3, [pc, #108]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240149a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240149aa:	1c5a      	adds	r2, r3, #1
240149ac:	687b      	ldr	r3, [r7, #4]
240149ae:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos)+ 1U;
240149b0:	4b17      	ldr	r3, [pc, #92]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240149b4:	0e1b      	lsrs	r3, r3, #24
240149b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240149ba:	1c5a      	adds	r2, r3, #1
240149bc:	687b      	ldr	r3, [r7, #4]
240149be:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos)+ 1U;
240149c0:	4b13      	ldr	r3, [pc, #76]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240149c4:	0a5b      	lsrs	r3, r3, #9
240149c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240149ca:	1c5a      	adds	r2, r3, #1
240149cc:	687b      	ldr	r3, [r7, #4]
240149ce:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos)+ 1U;
240149d0:	4b0f      	ldr	r3, [pc, #60]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240149d4:	0c1b      	lsrs	r3, r3, #16
240149d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240149da:	1c5a      	adds	r2, r3, #1
240149dc:	687b      	ldr	r3, [r7, #4]
240149de:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
240149e0:	4b0b      	ldr	r3, [pc, #44]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240149e4:	f003 020c 	and.w	r2, r3, #12
240149e8:	687b      	ldr	r3, [r7, #4]
240149ea:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
240149ec:	4b08      	ldr	r3, [pc, #32]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240149f0:	085b      	lsrs	r3, r3, #1
240149f2:	f003 0201 	and.w	r2, r3, #1
240149f6:	687b      	ldr	r3, [r7, #4]
240149f8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
240149fa:	4b05      	ldr	r3, [pc, #20]	; (24014a10 <HAL_RCC_GetOscConfig+0x1d8>)
240149fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240149fe:	08db      	lsrs	r3, r3, #3
24014a00:	f3c3 020c 	ubfx	r2, r3, #0, #13
24014a04:	687b      	ldr	r3, [r7, #4]
24014a06:	649a      	str	r2, [r3, #72]	; 0x48
}
24014a08:	bf00      	nop
24014a0a:	3708      	adds	r7, #8
24014a0c:	46bd      	mov	sp, r7
24014a0e:	bd80      	pop	{r7, pc}
24014a10:	58024400 	.word	0x58024400

24014a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
24014a14:	b480      	push	{r7}
24014a16:	b083      	sub	sp, #12
24014a18:	af00      	add	r7, sp, #0
24014a1a:	6078      	str	r0, [r7, #4]
24014a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
24014a1e:	687b      	ldr	r3, [r7, #4]
24014a20:	223f      	movs	r2, #63	; 0x3f
24014a22:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
24014a24:	4b1a      	ldr	r3, [pc, #104]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a26:	691b      	ldr	r3, [r3, #16]
24014a28:	f003 0207 	and.w	r2, r3, #7
24014a2c:	687b      	ldr	r3, [r7, #4]
24014a2e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
24014a30:	4b17      	ldr	r3, [pc, #92]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a32:	699b      	ldr	r3, [r3, #24]
24014a34:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
24014a38:	687b      	ldr	r3, [r7, #4]
24014a3a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
24014a3c:	4b14      	ldr	r3, [pc, #80]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a3e:	699b      	ldr	r3, [r3, #24]
24014a40:	f003 020f 	and.w	r2, r3, #15
24014a44:	687b      	ldr	r3, [r7, #4]
24014a46:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
24014a48:	4b11      	ldr	r3, [pc, #68]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a4a:	699b      	ldr	r3, [r3, #24]
24014a4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
24014a50:	687b      	ldr	r3, [r7, #4]
24014a52:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
24014a54:	4b0e      	ldr	r3, [pc, #56]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a56:	69db      	ldr	r3, [r3, #28]
24014a58:	f003 0270 	and.w	r2, r3, #112	; 0x70
24014a5c:	687b      	ldr	r3, [r7, #4]
24014a5e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
24014a60:	4b0b      	ldr	r3, [pc, #44]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a62:	69db      	ldr	r3, [r3, #28]
24014a64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
24014a68:	687b      	ldr	r3, [r7, #4]
24014a6a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
24014a6c:	4b08      	ldr	r3, [pc, #32]	; (24014a90 <HAL_RCC_GetClockConfig+0x7c>)
24014a6e:	6a1b      	ldr	r3, [r3, #32]
24014a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
24014a74:	687b      	ldr	r3, [r7, #4]
24014a76:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
24014a78:	4b06      	ldr	r3, [pc, #24]	; (24014a94 <HAL_RCC_GetClockConfig+0x80>)
24014a7a:	681b      	ldr	r3, [r3, #0]
24014a7c:	f003 020f 	and.w	r2, r3, #15
24014a80:	683b      	ldr	r3, [r7, #0]
24014a82:	601a      	str	r2, [r3, #0]
}
24014a84:	bf00      	nop
24014a86:	370c      	adds	r7, #12
24014a88:	46bd      	mov	sp, r7
24014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24014a8e:	4770      	bx	lr
24014a90:	58024400 	.word	0x58024400
24014a94:	52002000 	.word	0x52002000

24014a98 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
24014a98:	b580      	push	{r7, lr}
24014a9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
24014a9c:	4b07      	ldr	r3, [pc, #28]	; (24014abc <HAL_RCC_NMI_IRQHandler+0x24>)
24014a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24014aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24014aa8:	d105      	bne.n	24014ab6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
24014aaa:	f000 f809 	bl	24014ac0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
24014aae:	4b03      	ldr	r3, [pc, #12]	; (24014abc <HAL_RCC_NMI_IRQHandler+0x24>)
24014ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
24014ab4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
24014ab6:	bf00      	nop
24014ab8:	bd80      	pop	{r7, pc}
24014aba:	bf00      	nop
24014abc:	58024400 	.word	0x58024400

24014ac0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
24014ac0:	b480      	push	{r7}
24014ac2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
24014ac4:	bf00      	nop
24014ac6:	46bd      	mov	sp, r7
24014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
24014acc:	4770      	bx	lr
	...

24014ad0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24014ad0:	b580      	push	{r7, lr}
24014ad2:	b086      	sub	sp, #24
24014ad4:	af00      	add	r7, sp, #0
24014ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24014ad8:	2300      	movs	r3, #0
24014ada:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
24014adc:	2300      	movs	r3, #0
24014ade:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24014ae0:	687b      	ldr	r3, [r7, #4]
24014ae2:	681b      	ldr	r3, [r3, #0]
24014ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24014ae8:	2b00      	cmp	r3, #0
24014aea:	d03f      	beq.n	24014b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
24014aec:	687b      	ldr	r3, [r7, #4]
24014aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014af4:	d02a      	beq.n	24014b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
24014af6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014afa:	d824      	bhi.n	24014b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
24014afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014b00:	d018      	beq.n	24014b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
24014b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014b06:	d81e      	bhi.n	24014b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
24014b08:	2b00      	cmp	r3, #0
24014b0a:	d003      	beq.n	24014b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
24014b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24014b10:	d007      	beq.n	24014b22 <HAL_RCCEx_PeriphCLKConfig+0x52>
24014b12:	e018      	b.n	24014b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014b14:	4ba3      	ldr	r3, [pc, #652]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014b18:	4aa2      	ldr	r2, [pc, #648]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24014b20:	e015      	b.n	24014b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014b22:	687b      	ldr	r3, [r7, #4]
24014b24:	3304      	adds	r3, #4
24014b26:	2102      	movs	r1, #2
24014b28:	4618      	mov	r0, r3
24014b2a:	f002 fbbf 	bl	240172ac <RCCEx_PLL2_Config>
24014b2e:	4603      	mov	r3, r0
24014b30:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24014b32:	e00c      	b.n	24014b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014b34:	687b      	ldr	r3, [r7, #4]
24014b36:	3324      	adds	r3, #36	; 0x24
24014b38:	2102      	movs	r1, #2
24014b3a:	4618      	mov	r0, r3
24014b3c:	f002 fc68 	bl	24017410 <RCCEx_PLL3_Config>
24014b40:	4603      	mov	r3, r0
24014b42:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24014b44:	e003      	b.n	24014b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014b46:	2301      	movs	r3, #1
24014b48:	75fb      	strb	r3, [r7, #23]
      break;
24014b4a:	e000      	b.n	24014b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
24014b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
24014b4e:	7dfb      	ldrb	r3, [r7, #23]
24014b50:	2b00      	cmp	r3, #0
24014b52:	d109      	bne.n	24014b68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24014b54:	4b93      	ldr	r3, [pc, #588]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
24014b5c:	687b      	ldr	r3, [r7, #4]
24014b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014b60:	4990      	ldr	r1, [pc, #576]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014b62:	4313      	orrs	r3, r2
24014b64:	650b      	str	r3, [r1, #80]	; 0x50
24014b66:	e001      	b.n	24014b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014b68:	7dfb      	ldrb	r3, [r7, #23]
24014b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24014b6c:	687b      	ldr	r3, [r7, #4]
24014b6e:	681b      	ldr	r3, [r3, #0]
24014b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014b74:	2b00      	cmp	r3, #0
24014b76:	d03d      	beq.n	24014bf4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
24014b78:	687b      	ldr	r3, [r7, #4]
24014b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014b7c:	2b04      	cmp	r3, #4
24014b7e:	d826      	bhi.n	24014bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
24014b80:	a201      	add	r2, pc, #4	; (adr r2, 24014b88 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
24014b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014b86:	bf00      	nop
24014b88:	24014b9d 	.word	0x24014b9d
24014b8c:	24014bab 	.word	0x24014bab
24014b90:	24014bbd 	.word	0x24014bbd
24014b94:	24014bd5 	.word	0x24014bd5
24014b98:	24014bd5 	.word	0x24014bd5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014b9c:	4b81      	ldr	r3, [pc, #516]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014ba0:	4a80      	ldr	r2, [pc, #512]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014ba8:	e015      	b.n	24014bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014baa:	687b      	ldr	r3, [r7, #4]
24014bac:	3304      	adds	r3, #4
24014bae:	2100      	movs	r1, #0
24014bb0:	4618      	mov	r0, r3
24014bb2:	f002 fb7b 	bl	240172ac <RCCEx_PLL2_Config>
24014bb6:	4603      	mov	r3, r0
24014bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014bba:	e00c      	b.n	24014bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
24014bbc:	687b      	ldr	r3, [r7, #4]
24014bbe:	3324      	adds	r3, #36	; 0x24
24014bc0:	2100      	movs	r1, #0
24014bc2:	4618      	mov	r0, r3
24014bc4:	f002 fc24 	bl	24017410 <RCCEx_PLL3_Config>
24014bc8:	4603      	mov	r3, r0
24014bca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014bcc:	e003      	b.n	24014bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014bce:	2301      	movs	r3, #1
24014bd0:	75fb      	strb	r3, [r7, #23]
      break;
24014bd2:	e000      	b.n	24014bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
24014bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
24014bd6:	7dfb      	ldrb	r3, [r7, #23]
24014bd8:	2b00      	cmp	r3, #0
24014bda:	d109      	bne.n	24014bf0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24014bdc:	4b71      	ldr	r3, [pc, #452]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014be0:	f023 0207 	bic.w	r2, r3, #7
24014be4:	687b      	ldr	r3, [r7, #4]
24014be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014be8:	496e      	ldr	r1, [pc, #440]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014bea:	4313      	orrs	r3, r2
24014bec:	650b      	str	r3, [r1, #80]	; 0x50
24014bee:	e001      	b.n	24014bf4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014bf0:	7dfb      	ldrb	r3, [r7, #23]
24014bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24014bf4:	687b      	ldr	r3, [r7, #4]
24014bf6:	681b      	ldr	r3, [r3, #0]
24014bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
24014bfc:	2b00      	cmp	r3, #0
24014bfe:	d042      	beq.n	24014c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
24014c00:	687b      	ldr	r3, [r7, #4]
24014c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24014c08:	d02b      	beq.n	24014c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
24014c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24014c0e:	d825      	bhi.n	24014c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014c10:	2bc0      	cmp	r3, #192	; 0xc0
24014c12:	d028      	beq.n	24014c66 <HAL_RCCEx_PeriphCLKConfig+0x196>
24014c14:	2bc0      	cmp	r3, #192	; 0xc0
24014c16:	d821      	bhi.n	24014c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014c18:	2b80      	cmp	r3, #128	; 0x80
24014c1a:	d016      	beq.n	24014c4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
24014c1c:	2b80      	cmp	r3, #128	; 0x80
24014c1e:	d81d      	bhi.n	24014c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014c20:	2b00      	cmp	r3, #0
24014c22:	d002      	beq.n	24014c2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
24014c24:	2b40      	cmp	r3, #64	; 0x40
24014c26:	d007      	beq.n	24014c38 <HAL_RCCEx_PeriphCLKConfig+0x168>
24014c28:	e018      	b.n	24014c5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014c2a:	4b5e      	ldr	r3, [pc, #376]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014c2e:	4a5d      	ldr	r2, [pc, #372]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014c34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24014c36:	e017      	b.n	24014c68 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014c38:	687b      	ldr	r3, [r7, #4]
24014c3a:	3304      	adds	r3, #4
24014c3c:	2100      	movs	r1, #0
24014c3e:	4618      	mov	r0, r3
24014c40:	f002 fb34 	bl	240172ac <RCCEx_PLL2_Config>
24014c44:	4603      	mov	r3, r0
24014c46:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24014c48:	e00e      	b.n	24014c68 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
24014c4a:	687b      	ldr	r3, [r7, #4]
24014c4c:	3324      	adds	r3, #36	; 0x24
24014c4e:	2100      	movs	r1, #0
24014c50:	4618      	mov	r0, r3
24014c52:	f002 fbdd 	bl	24017410 <RCCEx_PLL3_Config>
24014c56:	4603      	mov	r3, r0
24014c58:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24014c5a:	e005      	b.n	24014c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014c5c:	2301      	movs	r3, #1
24014c5e:	75fb      	strb	r3, [r7, #23]
      break;
24014c60:	e002      	b.n	24014c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
24014c62:	bf00      	nop
24014c64:	e000      	b.n	24014c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
24014c66:	bf00      	nop
    }

    if(ret == HAL_OK)
24014c68:	7dfb      	ldrb	r3, [r7, #23]
24014c6a:	2b00      	cmp	r3, #0
24014c6c:	d109      	bne.n	24014c82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24014c6e:	4b4d      	ldr	r3, [pc, #308]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014c72:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
24014c76:	687b      	ldr	r3, [r7, #4]
24014c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014c7a:	494a      	ldr	r1, [pc, #296]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014c7c:	4313      	orrs	r3, r2
24014c7e:	650b      	str	r3, [r1, #80]	; 0x50
24014c80:	e001      	b.n	24014c86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014c82:	7dfb      	ldrb	r3, [r7, #23]
24014c84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24014c86:	687b      	ldr	r3, [r7, #4]
24014c88:	681b      	ldr	r3, [r3, #0]
24014c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24014c8e:	2b00      	cmp	r3, #0
24014c90:	d049      	beq.n	24014d26 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
24014c92:	687b      	ldr	r3, [r7, #4]
24014c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24014c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24014c9c:	d030      	beq.n	24014d00 <HAL_RCCEx_PeriphCLKConfig+0x230>
24014c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24014ca2:	d82a      	bhi.n	24014cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014ca4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24014ca8:	d02c      	beq.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
24014caa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24014cae:	d824      	bhi.n	24014cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24014cb4:	d018      	beq.n	24014ce8 <HAL_RCCEx_PeriphCLKConfig+0x218>
24014cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24014cba:	d81e      	bhi.n	24014cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014cbc:	2b00      	cmp	r3, #0
24014cbe:	d003      	beq.n	24014cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24014cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014cc4:	d007      	beq.n	24014cd6 <HAL_RCCEx_PeriphCLKConfig+0x206>
24014cc6:	e018      	b.n	24014cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014cc8:	4b36      	ldr	r3, [pc, #216]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014ccc:	4a35      	ldr	r2, [pc, #212]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014cd4:	e017      	b.n	24014d06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014cd6:	687b      	ldr	r3, [r7, #4]
24014cd8:	3304      	adds	r3, #4
24014cda:	2100      	movs	r1, #0
24014cdc:	4618      	mov	r0, r3
24014cde:	f002 fae5 	bl	240172ac <RCCEx_PLL2_Config>
24014ce2:	4603      	mov	r3, r0
24014ce4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
24014ce6:	e00e      	b.n	24014d06 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
24014ce8:	687b      	ldr	r3, [r7, #4]
24014cea:	3324      	adds	r3, #36	; 0x24
24014cec:	2100      	movs	r1, #0
24014cee:	4618      	mov	r0, r3
24014cf0:	f002 fb8e 	bl	24017410 <RCCEx_PLL3_Config>
24014cf4:	4603      	mov	r3, r0
24014cf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014cf8:	e005      	b.n	24014d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
24014cfa:	2301      	movs	r3, #1
24014cfc:	75fb      	strb	r3, [r7, #23]
      break;
24014cfe:	e002      	b.n	24014d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
24014d00:	bf00      	nop
24014d02:	e000      	b.n	24014d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
24014d04:	bf00      	nop
    }

    if(ret == HAL_OK)
24014d06:	7dfb      	ldrb	r3, [r7, #23]
24014d08:	2b00      	cmp	r3, #0
24014d0a:	d10a      	bne.n	24014d22 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24014d0c:	4b25      	ldr	r3, [pc, #148]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014d10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
24014d14:	687b      	ldr	r3, [r7, #4]
24014d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24014d1a:	4922      	ldr	r1, [pc, #136]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014d1c:	4313      	orrs	r3, r2
24014d1e:	658b      	str	r3, [r1, #88]	; 0x58
24014d20:	e001      	b.n	24014d26 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014d22:	7dfb      	ldrb	r3, [r7, #23]
24014d24:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24014d26:	687b      	ldr	r3, [r7, #4]
24014d28:	681b      	ldr	r3, [r3, #0]
24014d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24014d2e:	2b00      	cmp	r3, #0
24014d30:	d04b      	beq.n	24014dca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
24014d32:	687b      	ldr	r3, [r7, #4]
24014d34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
24014d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24014d3c:	d030      	beq.n	24014da0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
24014d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24014d42:	d82a      	bhi.n	24014d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
24014d44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24014d48:	d02e      	beq.n	24014da8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
24014d4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24014d4e:	d824      	bhi.n	24014d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
24014d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24014d54:	d018      	beq.n	24014d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
24014d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24014d5a:	d81e      	bhi.n	24014d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
24014d5c:	2b00      	cmp	r3, #0
24014d5e:	d003      	beq.n	24014d68 <HAL_RCCEx_PeriphCLKConfig+0x298>
24014d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24014d64:	d007      	beq.n	24014d76 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24014d66:	e018      	b.n	24014d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014d68:	4b0e      	ldr	r3, [pc, #56]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014d6c:	4a0d      	ldr	r2, [pc, #52]	; (24014da4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014d74:	e019      	b.n	24014daa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014d76:	687b      	ldr	r3, [r7, #4]
24014d78:	3304      	adds	r3, #4
24014d7a:	2100      	movs	r1, #0
24014d7c:	4618      	mov	r0, r3
24014d7e:	f002 fa95 	bl	240172ac <RCCEx_PLL2_Config>
24014d82:	4603      	mov	r3, r0
24014d84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
24014d86:	e010      	b.n	24014daa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24014d88:	687b      	ldr	r3, [r7, #4]
24014d8a:	3324      	adds	r3, #36	; 0x24
24014d8c:	2100      	movs	r1, #0
24014d8e:	4618      	mov	r0, r3
24014d90:	f002 fb3e 	bl	24017410 <RCCEx_PLL3_Config>
24014d94:	4603      	mov	r3, r0
24014d96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014d98:	e007      	b.n	24014daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
24014d9a:	2301      	movs	r3, #1
24014d9c:	75fb      	strb	r3, [r7, #23]
      break;
24014d9e:	e004      	b.n	24014daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
24014da0:	bf00      	nop
24014da2:	e002      	b.n	24014daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
24014da4:	58024400 	.word	0x58024400
      break;
24014da8:	bf00      	nop
    }

    if(ret == HAL_OK)
24014daa:	7dfb      	ldrb	r3, [r7, #23]
24014dac:	2b00      	cmp	r3, #0
24014dae:	d10a      	bne.n	24014dc6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24014db0:	4b99      	ldr	r3, [pc, #612]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014db4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24014db8:	687b      	ldr	r3, [r7, #4]
24014dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
24014dbe:	4996      	ldr	r1, [pc, #600]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014dc0:	4313      	orrs	r3, r2
24014dc2:	658b      	str	r3, [r1, #88]	; 0x58
24014dc4:	e001      	b.n	24014dca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014dc6:	7dfb      	ldrb	r3, [r7, #23]
24014dc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24014dca:	687b      	ldr	r3, [r7, #4]
24014dcc:	681b      	ldr	r3, [r3, #0]
24014dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24014dd2:	2b00      	cmp	r3, #0
24014dd4:	d032      	beq.n	24014e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
24014dd6:	687b      	ldr	r3, [r7, #4]
24014dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24014dda:	2b30      	cmp	r3, #48	; 0x30
24014ddc:	d01c      	beq.n	24014e18 <HAL_RCCEx_PeriphCLKConfig+0x348>
24014dde:	2b30      	cmp	r3, #48	; 0x30
24014de0:	d817      	bhi.n	24014e12 <HAL_RCCEx_PeriphCLKConfig+0x342>
24014de2:	2b20      	cmp	r3, #32
24014de4:	d00c      	beq.n	24014e00 <HAL_RCCEx_PeriphCLKConfig+0x330>
24014de6:	2b20      	cmp	r3, #32
24014de8:	d813      	bhi.n	24014e12 <HAL_RCCEx_PeriphCLKConfig+0x342>
24014dea:	2b00      	cmp	r3, #0
24014dec:	d016      	beq.n	24014e1c <HAL_RCCEx_PeriphCLKConfig+0x34c>
24014dee:	2b10      	cmp	r3, #16
24014df0:	d10f      	bne.n	24014e12 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014df2:	4b89      	ldr	r3, [pc, #548]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014df6:	4a88      	ldr	r2, [pc, #544]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
24014dfe:	e00e      	b.n	24014e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014e00:	687b      	ldr	r3, [r7, #4]
24014e02:	3304      	adds	r3, #4
24014e04:	2102      	movs	r1, #2
24014e06:	4618      	mov	r0, r3
24014e08:	f002 fa50 	bl	240172ac <RCCEx_PLL2_Config>
24014e0c:	4603      	mov	r3, r0
24014e0e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
24014e10:	e005      	b.n	24014e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24014e12:	2301      	movs	r3, #1
24014e14:	75fb      	strb	r3, [r7, #23]
      break;
24014e16:	e002      	b.n	24014e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
24014e18:	bf00      	nop
24014e1a:	e000      	b.n	24014e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
24014e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
24014e1e:	7dfb      	ldrb	r3, [r7, #23]
24014e20:	2b00      	cmp	r3, #0
24014e22:	d109      	bne.n	24014e38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24014e24:	4b7c      	ldr	r3, [pc, #496]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24014e28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
24014e2c:	687b      	ldr	r3, [r7, #4]
24014e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24014e30:	4979      	ldr	r1, [pc, #484]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014e32:	4313      	orrs	r3, r2
24014e34:	64cb      	str	r3, [r1, #76]	; 0x4c
24014e36:	e001      	b.n	24014e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014e38:	7dfb      	ldrb	r3, [r7, #23]
24014e3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24014e3c:	687b      	ldr	r3, [r7, #4]
24014e3e:	681b      	ldr	r3, [r3, #0]
24014e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24014e44:	2b00      	cmp	r3, #0
24014e46:	d047      	beq.n	24014ed8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
24014e48:	687b      	ldr	r3, [r7, #4]
24014e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24014e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014e50:	d030      	beq.n	24014eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
24014e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014e56:	d82a      	bhi.n	24014eae <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014e58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24014e5c:	d02c      	beq.n	24014eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
24014e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24014e62:	d824      	bhi.n	24014eae <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24014e68:	d018      	beq.n	24014e9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
24014e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24014e6e:	d81e      	bhi.n	24014eae <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014e70:	2b00      	cmp	r3, #0
24014e72:	d003      	beq.n	24014e7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
24014e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014e78:	d007      	beq.n	24014e8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
24014e7a:	e018      	b.n	24014eae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014e7c:	4b66      	ldr	r3, [pc, #408]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014e80:	4a65      	ldr	r2, [pc, #404]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
24014e88:	e017      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014e8a:	687b      	ldr	r3, [r7, #4]
24014e8c:	3304      	adds	r3, #4
24014e8e:	2100      	movs	r1, #0
24014e90:	4618      	mov	r0, r3
24014e92:	f002 fa0b 	bl	240172ac <RCCEx_PLL2_Config>
24014e96:	4603      	mov	r3, r0
24014e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
24014e9a:	e00e      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
24014e9c:	687b      	ldr	r3, [r7, #4]
24014e9e:	3324      	adds	r3, #36	; 0x24
24014ea0:	2100      	movs	r1, #0
24014ea2:	4618      	mov	r0, r3
24014ea4:	f002 fab4 	bl	24017410 <RCCEx_PLL3_Config>
24014ea8:	4603      	mov	r3, r0
24014eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
24014eac:	e005      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014eae:	2301      	movs	r3, #1
24014eb0:	75fb      	strb	r3, [r7, #23]
      break;
24014eb2:	e002      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014eb4:	bf00      	nop
24014eb6:	e000      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
24014eba:	7dfb      	ldrb	r3, [r7, #23]
24014ebc:	2b00      	cmp	r3, #0
24014ebe:	d109      	bne.n	24014ed4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24014ec0:	4b55      	ldr	r3, [pc, #340]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014ec4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
24014ec8:	687b      	ldr	r3, [r7, #4]
24014eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24014ecc:	4952      	ldr	r1, [pc, #328]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014ece:	4313      	orrs	r3, r2
24014ed0:	650b      	str	r3, [r1, #80]	; 0x50
24014ed2:	e001      	b.n	24014ed8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014ed4:	7dfb      	ldrb	r3, [r7, #23]
24014ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24014ed8:	687b      	ldr	r3, [r7, #4]
24014eda:	681b      	ldr	r3, [r3, #0]
24014edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24014ee0:	2b00      	cmp	r3, #0
24014ee2:	d049      	beq.n	24014f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
24014ee4:	687b      	ldr	r3, [r7, #4]
24014ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24014ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24014eec:	d02e      	beq.n	24014f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
24014eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24014ef2:	d828      	bhi.n	24014f46 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24014ef8:	d02a      	beq.n	24014f50 <HAL_RCCEx_PeriphCLKConfig+0x480>
24014efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24014efe:	d822      	bhi.n	24014f46 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24014f04:	d026      	beq.n	24014f54 <HAL_RCCEx_PeriphCLKConfig+0x484>
24014f06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24014f0a:	d81c      	bhi.n	24014f46 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014f10:	d010      	beq.n	24014f34 <HAL_RCCEx_PeriphCLKConfig+0x464>
24014f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014f16:	d816      	bhi.n	24014f46 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014f18:	2b00      	cmp	r3, #0
24014f1a:	d01d      	beq.n	24014f58 <HAL_RCCEx_PeriphCLKConfig+0x488>
24014f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014f20:	d111      	bne.n	24014f46 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014f22:	687b      	ldr	r3, [r7, #4]
24014f24:	3304      	adds	r3, #4
24014f26:	2101      	movs	r1, #1
24014f28:	4618      	mov	r0, r3
24014f2a:	f002 f9bf 	bl	240172ac <RCCEx_PLL2_Config>
24014f2e:	4603      	mov	r3, r0
24014f30:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
24014f32:	e012      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014f34:	687b      	ldr	r3, [r7, #4]
24014f36:	3324      	adds	r3, #36	; 0x24
24014f38:	2101      	movs	r1, #1
24014f3a:	4618      	mov	r0, r3
24014f3c:	f002 fa68 	bl	24017410 <RCCEx_PLL3_Config>
24014f40:	4603      	mov	r3, r0
24014f42:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
24014f44:	e009      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014f46:	2301      	movs	r3, #1
24014f48:	75fb      	strb	r3, [r7, #23]
      break;
24014f4a:	e006      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014f4c:	bf00      	nop
24014f4e:	e004      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014f50:	bf00      	nop
24014f52:	e002      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014f54:	bf00      	nop
24014f56:	e000      	b.n	24014f5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014f58:	bf00      	nop
    }

    if(ret == HAL_OK)
24014f5a:	7dfb      	ldrb	r3, [r7, #23]
24014f5c:	2b00      	cmp	r3, #0
24014f5e:	d109      	bne.n	24014f74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24014f60:	4b2d      	ldr	r3, [pc, #180]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014f64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24014f68:	687b      	ldr	r3, [r7, #4]
24014f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24014f6c:	492a      	ldr	r1, [pc, #168]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014f6e:	4313      	orrs	r3, r2
24014f70:	650b      	str	r3, [r1, #80]	; 0x50
24014f72:	e001      	b.n	24014f78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014f74:	7dfb      	ldrb	r3, [r7, #23]
24014f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24014f78:	687b      	ldr	r3, [r7, #4]
24014f7a:	681b      	ldr	r3, [r3, #0]
24014f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24014f80:	2b00      	cmp	r3, #0
24014f82:	d04d      	beq.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
24014f84:	687b      	ldr	r3, [r7, #4]
24014f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24014f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014f8e:	d02e      	beq.n	24014fee <HAL_RCCEx_PeriphCLKConfig+0x51e>
24014f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014f94:	d828      	bhi.n	24014fe8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014f9a:	d02a      	beq.n	24014ff2 <HAL_RCCEx_PeriphCLKConfig+0x522>
24014f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014fa0:	d822      	bhi.n	24014fe8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014fa6:	d026      	beq.n	24014ff6 <HAL_RCCEx_PeriphCLKConfig+0x526>
24014fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014fac:	d81c      	bhi.n	24014fe8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014fb2:	d010      	beq.n	24014fd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
24014fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014fb8:	d816      	bhi.n	24014fe8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014fba:	2b00      	cmp	r3, #0
24014fbc:	d01d      	beq.n	24014ffa <HAL_RCCEx_PeriphCLKConfig+0x52a>
24014fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014fc2:	d111      	bne.n	24014fe8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014fc4:	687b      	ldr	r3, [r7, #4]
24014fc6:	3304      	adds	r3, #4
24014fc8:	2101      	movs	r1, #1
24014fca:	4618      	mov	r0, r3
24014fcc:	f002 f96e 	bl	240172ac <RCCEx_PLL2_Config>
24014fd0:	4603      	mov	r3, r0
24014fd2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
24014fd4:	e012      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014fd6:	687b      	ldr	r3, [r7, #4]
24014fd8:	3324      	adds	r3, #36	; 0x24
24014fda:	2101      	movs	r1, #1
24014fdc:	4618      	mov	r0, r3
24014fde:	f002 fa17 	bl	24017410 <RCCEx_PLL3_Config>
24014fe2:	4603      	mov	r3, r0
24014fe4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
24014fe6:	e009      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
24014fe8:	2301      	movs	r3, #1
24014fea:	75fb      	strb	r3, [r7, #23]
      break;
24014fec:	e006      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014fee:	bf00      	nop
24014ff0:	e004      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014ff2:	bf00      	nop
24014ff4:	e002      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014ff6:	bf00      	nop
24014ff8:	e000      	b.n	24014ffc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
24014ffc:	7dfb      	ldrb	r3, [r7, #23]
24014ffe:	2b00      	cmp	r3, #0
24015000:	d10c      	bne.n	2401501c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24015002:	4b05      	ldr	r3, [pc, #20]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24015004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
2401500a:	687b      	ldr	r3, [r7, #4]
2401500c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24015010:	4901      	ldr	r1, [pc, #4]	; (24015018 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24015012:	4313      	orrs	r3, r2
24015014:	658b      	str	r3, [r1, #88]	; 0x58
24015016:	e003      	b.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0x550>
24015018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2401501c:	7dfb      	ldrb	r3, [r7, #23]
2401501e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24015020:	687b      	ldr	r3, [r7, #4]
24015022:	681b      	ldr	r3, [r3, #0]
24015024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24015028:	2b00      	cmp	r3, #0
2401502a:	d02f      	beq.n	2401508c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
2401502c:	687b      	ldr	r3, [r7, #4]
2401502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24015030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015034:	d00e      	beq.n	24015054 <HAL_RCCEx_PeriphCLKConfig+0x584>
24015036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401503a:	d814      	bhi.n	24015066 <HAL_RCCEx_PeriphCLKConfig+0x596>
2401503c:	2b00      	cmp	r3, #0
2401503e:	d015      	beq.n	2401506c <HAL_RCCEx_PeriphCLKConfig+0x59c>
24015040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015044:	d10f      	bne.n	24015066 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015046:	4baf      	ldr	r3, [pc, #700]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401504a:	4aae      	ldr	r2, [pc, #696]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401504c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24015050:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24015052:	e00c      	b.n	2401506e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24015054:	687b      	ldr	r3, [r7, #4]
24015056:	3304      	adds	r3, #4
24015058:	2101      	movs	r1, #1
2401505a:	4618      	mov	r0, r3
2401505c:	f002 f926 	bl	240172ac <RCCEx_PLL2_Config>
24015060:	4603      	mov	r3, r0
24015062:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24015064:	e003      	b.n	2401506e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015066:	2301      	movs	r3, #1
24015068:	75fb      	strb	r3, [r7, #23]
      break;
2401506a:	e000      	b.n	2401506e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
2401506c:	bf00      	nop
    }

    if(ret == HAL_OK)
2401506e:	7dfb      	ldrb	r3, [r7, #23]
24015070:	2b00      	cmp	r3, #0
24015072:	d109      	bne.n	24015088 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24015074:	4ba3      	ldr	r3, [pc, #652]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015078:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2401507c:	687b      	ldr	r3, [r7, #4]
2401507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24015080:	49a0      	ldr	r1, [pc, #640]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015082:	4313      	orrs	r3, r2
24015084:	650b      	str	r3, [r1, #80]	; 0x50
24015086:	e001      	b.n	2401508c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
24015088:	7dfb      	ldrb	r3, [r7, #23]
2401508a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2401508c:	687b      	ldr	r3, [r7, #4]
2401508e:	681b      	ldr	r3, [r3, #0]
24015090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24015094:	2b00      	cmp	r3, #0
24015096:	d032      	beq.n	240150fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
24015098:	687b      	ldr	r3, [r7, #4]
2401509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401509c:	2b03      	cmp	r3, #3
2401509e:	d81b      	bhi.n	240150d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
240150a0:	a201      	add	r2, pc, #4	; (adr r2, 240150a8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
240150a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240150a6:	bf00      	nop
240150a8:	240150df 	.word	0x240150df
240150ac:	240150b9 	.word	0x240150b9
240150b0:	240150c7 	.word	0x240150c7
240150b4:	240150df 	.word	0x240150df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240150b8:	4b92      	ldr	r3, [pc, #584]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240150ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240150bc:	4a91      	ldr	r2, [pc, #580]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240150be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240150c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
240150c4:	e00c      	b.n	240150e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
240150c6:	687b      	ldr	r3, [r7, #4]
240150c8:	3304      	adds	r3, #4
240150ca:	2102      	movs	r1, #2
240150cc:	4618      	mov	r0, r3
240150ce:	f002 f8ed 	bl	240172ac <RCCEx_PLL2_Config>
240150d2:	4603      	mov	r3, r0
240150d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
240150d6:	e003      	b.n	240150e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
240150d8:	2301      	movs	r3, #1
240150da:	75fb      	strb	r3, [r7, #23]
      break;
240150dc:	e000      	b.n	240150e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
240150de:	bf00      	nop
    }

    if(ret == HAL_OK)
240150e0:	7dfb      	ldrb	r3, [r7, #23]
240150e2:	2b00      	cmp	r3, #0
240150e4:	d109      	bne.n	240150fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240150e6:	4b87      	ldr	r3, [pc, #540]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240150e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240150ea:	f023 0203 	bic.w	r2, r3, #3
240150ee:	687b      	ldr	r3, [r7, #4]
240150f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240150f2:	4984      	ldr	r1, [pc, #528]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240150f4:	4313      	orrs	r3, r2
240150f6:	64cb      	str	r3, [r1, #76]	; 0x4c
240150f8:	e001      	b.n	240150fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
240150fa:	7dfb      	ldrb	r3, [r7, #23]
240150fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240150fe:	687b      	ldr	r3, [r7, #4]
24015100:	681b      	ldr	r3, [r3, #0]
24015102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24015106:	2b00      	cmp	r3, #0
24015108:	f000 8086 	beq.w	24015218 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2401510c:	4b7e      	ldr	r3, [pc, #504]	; (24015308 <HAL_RCCEx_PeriphCLKConfig+0x838>)
2401510e:	681b      	ldr	r3, [r3, #0]
24015110:	4a7d      	ldr	r2, [pc, #500]	; (24015308 <HAL_RCCEx_PeriphCLKConfig+0x838>)
24015112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24015116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24015118:	f7ed f884 	bl	24002224 <HAL_GetTick>
2401511c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2401511e:	e009      	b.n	24015134 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24015120:	f7ed f880 	bl	24002224 <HAL_GetTick>
24015124:	4602      	mov	r2, r0
24015126:	693b      	ldr	r3, [r7, #16]
24015128:	1ad3      	subs	r3, r2, r3
2401512a:	2b64      	cmp	r3, #100	; 0x64
2401512c:	d902      	bls.n	24015134 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
2401512e:	2303      	movs	r3, #3
24015130:	75fb      	strb	r3, [r7, #23]
        break;
24015132:	e005      	b.n	24015140 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24015134:	4b74      	ldr	r3, [pc, #464]	; (24015308 <HAL_RCCEx_PeriphCLKConfig+0x838>)
24015136:	681b      	ldr	r3, [r3, #0]
24015138:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401513c:	2b00      	cmp	r3, #0
2401513e:	d0ef      	beq.n	24015120 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
24015140:	7dfb      	ldrb	r3, [r7, #23]
24015142:	2b00      	cmp	r3, #0
24015144:	d166      	bne.n	24015214 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24015146:	4b6f      	ldr	r3, [pc, #444]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2401514a:	687b      	ldr	r3, [r7, #4]
2401514c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24015150:	4053      	eors	r3, r2
24015152:	f403 7340 	and.w	r3, r3, #768	; 0x300
24015156:	2b00      	cmp	r3, #0
24015158:	d013      	beq.n	24015182 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2401515a:	4b6a      	ldr	r3, [pc, #424]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24015162:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
24015164:	4b67      	ldr	r3, [pc, #412]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015168:	4a66      	ldr	r2, [pc, #408]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401516e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24015170:	4b64      	ldr	r3, [pc, #400]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015174:	4a63      	ldr	r2, [pc, #396]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401517a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2401517c:	4a61      	ldr	r2, [pc, #388]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401517e:	68fb      	ldr	r3, [r7, #12]
24015180:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24015182:	687b      	ldr	r3, [r7, #4]
24015184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24015188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401518c:	d115      	bne.n	240151ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401518e:	f7ed f849 	bl	24002224 <HAL_GetTick>
24015192:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24015194:	e00b      	b.n	240151ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24015196:	f7ed f845 	bl	24002224 <HAL_GetTick>
2401519a:	4602      	mov	r2, r0
2401519c:	693b      	ldr	r3, [r7, #16]
2401519e:	1ad3      	subs	r3, r2, r3
240151a0:	f241 3288 	movw	r2, #5000	; 0x1388
240151a4:	4293      	cmp	r3, r2
240151a6:	d902      	bls.n	240151ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
240151a8:	2303      	movs	r3, #3
240151aa:	75fb      	strb	r3, [r7, #23]
            break;
240151ac:	e005      	b.n	240151ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240151ae:	4b55      	ldr	r3, [pc, #340]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240151b2:	f003 0302 	and.w	r3, r3, #2
240151b6:	2b00      	cmp	r3, #0
240151b8:	d0ed      	beq.n	24015196 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
240151ba:	7dfb      	ldrb	r3, [r7, #23]
240151bc:	2b00      	cmp	r3, #0
240151be:	d126      	bne.n	2401520e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240151c0:	687b      	ldr	r3, [r7, #4]
240151c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240151c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
240151ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240151ce:	d10d      	bne.n	240151ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
240151d0:	4b4c      	ldr	r3, [pc, #304]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151d2:	691b      	ldr	r3, [r3, #16]
240151d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
240151d8:	687b      	ldr	r3, [r7, #4]
240151da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240151de:	0919      	lsrs	r1, r3, #4
240151e0:	4b4a      	ldr	r3, [pc, #296]	; (2401530c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
240151e2:	400b      	ands	r3, r1
240151e4:	4947      	ldr	r1, [pc, #284]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151e6:	4313      	orrs	r3, r2
240151e8:	610b      	str	r3, [r1, #16]
240151ea:	e005      	b.n	240151f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
240151ec:	4b45      	ldr	r3, [pc, #276]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151ee:	691b      	ldr	r3, [r3, #16]
240151f0:	4a44      	ldr	r2, [pc, #272]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240151f6:	6113      	str	r3, [r2, #16]
240151f8:	4b42      	ldr	r3, [pc, #264]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240151fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240151fc:	687b      	ldr	r3, [r7, #4]
240151fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24015202:	f3c3 030b 	ubfx	r3, r3, #0, #12
24015206:	493f      	ldr	r1, [pc, #252]	; (24015304 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24015208:	4313      	orrs	r3, r2
2401520a:	670b      	str	r3, [r1, #112]	; 0x70
2401520c:	e004      	b.n	24015218 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
2401520e:	7dfb      	ldrb	r3, [r7, #23]
24015210:	75bb      	strb	r3, [r7, #22]
24015212:	e001      	b.n	24015218 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24015214:	7dfb      	ldrb	r3, [r7, #23]
24015216:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24015218:	687b      	ldr	r3, [r7, #4]
2401521a:	681b      	ldr	r3, [r3, #0]
2401521c:	f003 0301 	and.w	r3, r3, #1
24015220:	2b00      	cmp	r3, #0
24015222:	f000 8085 	beq.w	24015330 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
24015226:	687b      	ldr	r3, [r7, #4]
24015228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2401522a:	2b28      	cmp	r3, #40	; 0x28
2401522c:	d866      	bhi.n	240152fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
2401522e:	a201      	add	r2, pc, #4	; (adr r2, 24015234 <HAL_RCCEx_PeriphCLKConfig+0x764>)
24015230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24015234:	24015311 	.word	0x24015311
24015238:	240152fd 	.word	0x240152fd
2401523c:	240152fd 	.word	0x240152fd
24015240:	240152fd 	.word	0x240152fd
24015244:	240152fd 	.word	0x240152fd
24015248:	240152fd 	.word	0x240152fd
2401524c:	240152fd 	.word	0x240152fd
24015250:	240152fd 	.word	0x240152fd
24015254:	240152d9 	.word	0x240152d9
24015258:	240152fd 	.word	0x240152fd
2401525c:	240152fd 	.word	0x240152fd
24015260:	240152fd 	.word	0x240152fd
24015264:	240152fd 	.word	0x240152fd
24015268:	240152fd 	.word	0x240152fd
2401526c:	240152fd 	.word	0x240152fd
24015270:	240152fd 	.word	0x240152fd
24015274:	240152eb 	.word	0x240152eb
24015278:	240152fd 	.word	0x240152fd
2401527c:	240152fd 	.word	0x240152fd
24015280:	240152fd 	.word	0x240152fd
24015284:	240152fd 	.word	0x240152fd
24015288:	240152fd 	.word	0x240152fd
2401528c:	240152fd 	.word	0x240152fd
24015290:	240152fd 	.word	0x240152fd
24015294:	24015311 	.word	0x24015311
24015298:	240152fd 	.word	0x240152fd
2401529c:	240152fd 	.word	0x240152fd
240152a0:	240152fd 	.word	0x240152fd
240152a4:	240152fd 	.word	0x240152fd
240152a8:	240152fd 	.word	0x240152fd
240152ac:	240152fd 	.word	0x240152fd
240152b0:	240152fd 	.word	0x240152fd
240152b4:	24015311 	.word	0x24015311
240152b8:	240152fd 	.word	0x240152fd
240152bc:	240152fd 	.word	0x240152fd
240152c0:	240152fd 	.word	0x240152fd
240152c4:	240152fd 	.word	0x240152fd
240152c8:	240152fd 	.word	0x240152fd
240152cc:	240152fd 	.word	0x240152fd
240152d0:	240152fd 	.word	0x240152fd
240152d4:	24015311 	.word	0x24015311
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
240152d8:	687b      	ldr	r3, [r7, #4]
240152da:	3304      	adds	r3, #4
240152dc:	2101      	movs	r1, #1
240152de:	4618      	mov	r0, r3
240152e0:	f001 ffe4 	bl	240172ac <RCCEx_PLL2_Config>
240152e4:	4603      	mov	r3, r0
240152e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
240152e8:	e013      	b.n	24015312 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
240152ea:	687b      	ldr	r3, [r7, #4]
240152ec:	3324      	adds	r3, #36	; 0x24
240152ee:	2101      	movs	r1, #1
240152f0:	4618      	mov	r0, r3
240152f2:	f002 f88d 	bl	24017410 <RCCEx_PLL3_Config>
240152f6:	4603      	mov	r3, r0
240152f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
240152fa:	e00a      	b.n	24015312 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240152fc:	2301      	movs	r3, #1
240152fe:	75fb      	strb	r3, [r7, #23]
      break;
24015300:	e007      	b.n	24015312 <HAL_RCCEx_PeriphCLKConfig+0x842>
24015302:	bf00      	nop
24015304:	58024400 	.word	0x58024400
24015308:	58024800 	.word	0x58024800
2401530c:	00ffffcf 	.word	0x00ffffcf
      break;
24015310:	bf00      	nop
    }

    if(ret == HAL_OK)
24015312:	7dfb      	ldrb	r3, [r7, #23]
24015314:	2b00      	cmp	r3, #0
24015316:	d109      	bne.n	2401532c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24015318:	4b96      	ldr	r3, [pc, #600]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
2401531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401531c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
24015320:	687b      	ldr	r3, [r7, #4]
24015322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24015324:	4993      	ldr	r1, [pc, #588]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24015326:	4313      	orrs	r3, r2
24015328:	654b      	str	r3, [r1, #84]	; 0x54
2401532a:	e001      	b.n	24015330 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401532c:	7dfb      	ldrb	r3, [r7, #23]
2401532e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24015330:	687b      	ldr	r3, [r7, #4]
24015332:	681b      	ldr	r3, [r3, #0]
24015334:	f003 0302 	and.w	r3, r3, #2
24015338:	2b00      	cmp	r3, #0
2401533a:	d038      	beq.n	240153ae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
2401533c:	687b      	ldr	r3, [r7, #4]
2401533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24015340:	2b05      	cmp	r3, #5
24015342:	d821      	bhi.n	24015388 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
24015344:	a201      	add	r2, pc, #4	; (adr r2, 2401534c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
24015346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2401534a:	bf00      	nop
2401534c:	2401538f 	.word	0x2401538f
24015350:	24015365 	.word	0x24015365
24015354:	24015377 	.word	0x24015377
24015358:	2401538f 	.word	0x2401538f
2401535c:	2401538f 	.word	0x2401538f
24015360:	2401538f 	.word	0x2401538f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24015364:	687b      	ldr	r3, [r7, #4]
24015366:	3304      	adds	r3, #4
24015368:	2101      	movs	r1, #1
2401536a:	4618      	mov	r0, r3
2401536c:	f001 ff9e 	bl	240172ac <RCCEx_PLL2_Config>
24015370:	4603      	mov	r3, r0
24015372:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24015374:	e00c      	b.n	24015390 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24015376:	687b      	ldr	r3, [r7, #4]
24015378:	3324      	adds	r3, #36	; 0x24
2401537a:	2101      	movs	r1, #1
2401537c:	4618      	mov	r0, r3
2401537e:	f002 f847 	bl	24017410 <RCCEx_PLL3_Config>
24015382:	4603      	mov	r3, r0
24015384:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24015386:	e003      	b.n	24015390 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015388:	2301      	movs	r3, #1
2401538a:	75fb      	strb	r3, [r7, #23]
      break;
2401538c:	e000      	b.n	24015390 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
2401538e:	bf00      	nop
    }

    if(ret == HAL_OK)
24015390:	7dfb      	ldrb	r3, [r7, #23]
24015392:	2b00      	cmp	r3, #0
24015394:	d109      	bne.n	240153aa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24015396:	4b77      	ldr	r3, [pc, #476]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24015398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401539a:	f023 0207 	bic.w	r2, r3, #7
2401539e:	687b      	ldr	r3, [r7, #4]
240153a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240153a2:	4974      	ldr	r1, [pc, #464]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
240153a4:	4313      	orrs	r3, r2
240153a6:	654b      	str	r3, [r1, #84]	; 0x54
240153a8:	e001      	b.n	240153ae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
240153aa:	7dfb      	ldrb	r3, [r7, #23]
240153ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240153ae:	687b      	ldr	r3, [r7, #4]
240153b0:	681b      	ldr	r3, [r3, #0]
240153b2:	f003 0304 	and.w	r3, r3, #4
240153b6:	2b00      	cmp	r3, #0
240153b8:	d03a      	beq.n	24015430 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
240153ba:	687b      	ldr	r3, [r7, #4]
240153bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
240153c0:	2b05      	cmp	r3, #5
240153c2:	d821      	bhi.n	24015408 <HAL_RCCEx_PeriphCLKConfig+0x938>
240153c4:	a201      	add	r2, pc, #4	; (adr r2, 240153cc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
240153c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240153ca:	bf00      	nop
240153cc:	2401540f 	.word	0x2401540f
240153d0:	240153e5 	.word	0x240153e5
240153d4:	240153f7 	.word	0x240153f7
240153d8:	2401540f 	.word	0x2401540f
240153dc:	2401540f 	.word	0x2401540f
240153e0:	2401540f 	.word	0x2401540f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
240153e4:	687b      	ldr	r3, [r7, #4]
240153e6:	3304      	adds	r3, #4
240153e8:	2101      	movs	r1, #1
240153ea:	4618      	mov	r0, r3
240153ec:	f001 ff5e 	bl	240172ac <RCCEx_PLL2_Config>
240153f0:	4603      	mov	r3, r0
240153f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
240153f4:	e00c      	b.n	24015410 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
240153f6:	687b      	ldr	r3, [r7, #4]
240153f8:	3324      	adds	r3, #36	; 0x24
240153fa:	2101      	movs	r1, #1
240153fc:	4618      	mov	r0, r3
240153fe:	f002 f807 	bl	24017410 <RCCEx_PLL3_Config>
24015402:	4603      	mov	r3, r0
24015404:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24015406:	e003      	b.n	24015410 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015408:	2301      	movs	r3, #1
2401540a:	75fb      	strb	r3, [r7, #23]
      break;
2401540c:	e000      	b.n	24015410 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
2401540e:	bf00      	nop
    }

    if(ret == HAL_OK)
24015410:	7dfb      	ldrb	r3, [r7, #23]
24015412:	2b00      	cmp	r3, #0
24015414:	d10a      	bne.n	2401542c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24015416:	4b57      	ldr	r3, [pc, #348]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24015418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401541a:	f023 0207 	bic.w	r2, r3, #7
2401541e:	687b      	ldr	r3, [r7, #4]
24015420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24015424:	4953      	ldr	r1, [pc, #332]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24015426:	4313      	orrs	r3, r2
24015428:	658b      	str	r3, [r1, #88]	; 0x58
2401542a:	e001      	b.n	24015430 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401542c:	7dfb      	ldrb	r3, [r7, #23]
2401542e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24015430:	687b      	ldr	r3, [r7, #4]
24015432:	681b      	ldr	r3, [r3, #0]
24015434:	f003 0320 	and.w	r3, r3, #32
24015438:	2b00      	cmp	r3, #0
2401543a:	d04b      	beq.n	240154d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
2401543c:	687b      	ldr	r3, [r7, #4]
2401543e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24015442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24015446:	d02e      	beq.n	240154a6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
24015448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2401544c:	d828      	bhi.n	240154a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
2401544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015452:	d02a      	beq.n	240154aa <HAL_RCCEx_PeriphCLKConfig+0x9da>
24015454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015458:	d822      	bhi.n	240154a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
2401545a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2401545e:	d026      	beq.n	240154ae <HAL_RCCEx_PeriphCLKConfig+0x9de>
24015460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24015464:	d81c      	bhi.n	240154a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24015466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401546a:	d010      	beq.n	2401548e <HAL_RCCEx_PeriphCLKConfig+0x9be>
2401546c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015470:	d816      	bhi.n	240154a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24015472:	2b00      	cmp	r3, #0
24015474:	d01d      	beq.n	240154b2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
24015476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2401547a:	d111      	bne.n	240154a0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2401547c:	687b      	ldr	r3, [r7, #4]
2401547e:	3304      	adds	r3, #4
24015480:	2100      	movs	r1, #0
24015482:	4618      	mov	r0, r3
24015484:	f001 ff12 	bl	240172ac <RCCEx_PLL2_Config>
24015488:	4603      	mov	r3, r0
2401548a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
2401548c:	e012      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2401548e:	687b      	ldr	r3, [r7, #4]
24015490:	3324      	adds	r3, #36	; 0x24
24015492:	2102      	movs	r1, #2
24015494:	4618      	mov	r0, r3
24015496:	f001 ffbb 	bl	24017410 <RCCEx_PLL3_Config>
2401549a:	4603      	mov	r3, r0
2401549c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
2401549e:	e009      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240154a0:	2301      	movs	r3, #1
240154a2:	75fb      	strb	r3, [r7, #23]
      break;
240154a4:	e006      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
240154a6:	bf00      	nop
240154a8:	e004      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
240154aa:	bf00      	nop
240154ac:	e002      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
240154ae:	bf00      	nop
240154b0:	e000      	b.n	240154b4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
240154b2:	bf00      	nop
    }

    if(ret == HAL_OK)
240154b4:	7dfb      	ldrb	r3, [r7, #23]
240154b6:	2b00      	cmp	r3, #0
240154b8:	d10a      	bne.n	240154d0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
240154ba:	4b2e      	ldr	r3, [pc, #184]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
240154bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240154be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
240154c2:	687b      	ldr	r3, [r7, #4]
240154c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
240154c8:	492a      	ldr	r1, [pc, #168]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
240154ca:	4313      	orrs	r3, r2
240154cc:	654b      	str	r3, [r1, #84]	; 0x54
240154ce:	e001      	b.n	240154d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
240154d0:	7dfb      	ldrb	r3, [r7, #23]
240154d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240154d4:	687b      	ldr	r3, [r7, #4]
240154d6:	681b      	ldr	r3, [r3, #0]
240154d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240154dc:	2b00      	cmp	r3, #0
240154de:	d04d      	beq.n	2401557c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
240154e0:	687b      	ldr	r3, [r7, #4]
240154e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
240154e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
240154ea:	d02e      	beq.n	2401554a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
240154ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
240154f0:	d828      	bhi.n	24015544 <HAL_RCCEx_PeriphCLKConfig+0xa74>
240154f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240154f6:	d02a      	beq.n	2401554e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
240154f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240154fc:	d822      	bhi.n	24015544 <HAL_RCCEx_PeriphCLKConfig+0xa74>
240154fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24015502:	d026      	beq.n	24015552 <HAL_RCCEx_PeriphCLKConfig+0xa82>
24015504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24015508:	d81c      	bhi.n	24015544 <HAL_RCCEx_PeriphCLKConfig+0xa74>
2401550a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2401550e:	d010      	beq.n	24015532 <HAL_RCCEx_PeriphCLKConfig+0xa62>
24015510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24015514:	d816      	bhi.n	24015544 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24015516:	2b00      	cmp	r3, #0
24015518:	d01d      	beq.n	24015556 <HAL_RCCEx_PeriphCLKConfig+0xa86>
2401551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401551e:	d111      	bne.n	24015544 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24015520:	687b      	ldr	r3, [r7, #4]
24015522:	3304      	adds	r3, #4
24015524:	2100      	movs	r1, #0
24015526:	4618      	mov	r0, r3
24015528:	f001 fec0 	bl	240172ac <RCCEx_PLL2_Config>
2401552c:	4603      	mov	r3, r0
2401552e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24015530:	e012      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24015532:	687b      	ldr	r3, [r7, #4]
24015534:	3324      	adds	r3, #36	; 0x24
24015536:	2102      	movs	r1, #2
24015538:	4618      	mov	r0, r3
2401553a:	f001 ff69 	bl	24017410 <RCCEx_PLL3_Config>
2401553e:	4603      	mov	r3, r0
24015540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24015542:	e009      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015544:	2301      	movs	r3, #1
24015546:	75fb      	strb	r3, [r7, #23]
      break;
24015548:	e006      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
2401554a:	bf00      	nop
2401554c:	e004      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
2401554e:	bf00      	nop
24015550:	e002      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24015552:	bf00      	nop
24015554:	e000      	b.n	24015558 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24015556:	bf00      	nop
    }

    if(ret == HAL_OK)
24015558:	7dfb      	ldrb	r3, [r7, #23]
2401555a:	2b00      	cmp	r3, #0
2401555c:	d10c      	bne.n	24015578 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2401555e:	4b05      	ldr	r3, [pc, #20]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24015560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015562:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
24015566:	687b      	ldr	r3, [r7, #4]
24015568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2401556c:	4901      	ldr	r1, [pc, #4]	; (24015574 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
2401556e:	4313      	orrs	r3, r2
24015570:	658b      	str	r3, [r1, #88]	; 0x58
24015572:	e003      	b.n	2401557c <HAL_RCCEx_PeriphCLKConfig+0xaac>
24015574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24015578:	7dfb      	ldrb	r3, [r7, #23]
2401557a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2401557c:	687b      	ldr	r3, [r7, #4]
2401557e:	681b      	ldr	r3, [r3, #0]
24015580:	f003 0380 	and.w	r3, r3, #128	; 0x80
24015584:	2b00      	cmp	r3, #0
24015586:	d04b      	beq.n	24015620 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
24015588:	687b      	ldr	r3, [r7, #4]
2401558a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2401558e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24015592:	d02e      	beq.n	240155f2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
24015594:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24015598:	d828      	bhi.n	240155ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
2401559a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2401559e:	d02a      	beq.n	240155f6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
240155a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
240155a4:	d822      	bhi.n	240155ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
240155a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
240155aa:	d026      	beq.n	240155fa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
240155ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
240155b0:	d81c      	bhi.n	240155ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
240155b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240155b6:	d010      	beq.n	240155da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
240155b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240155bc:	d816      	bhi.n	240155ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
240155be:	2b00      	cmp	r3, #0
240155c0:	d01d      	beq.n	240155fe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
240155c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240155c6:	d111      	bne.n	240155ec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240155c8:	687b      	ldr	r3, [r7, #4]
240155ca:	3304      	adds	r3, #4
240155cc:	2100      	movs	r1, #0
240155ce:	4618      	mov	r0, r3
240155d0:	f001 fe6c 	bl	240172ac <RCCEx_PLL2_Config>
240155d4:	4603      	mov	r3, r0
240155d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
240155d8:	e012      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
240155da:	687b      	ldr	r3, [r7, #4]
240155dc:	3324      	adds	r3, #36	; 0x24
240155de:	2102      	movs	r1, #2
240155e0:	4618      	mov	r0, r3
240155e2:	f001 ff15 	bl	24017410 <RCCEx_PLL3_Config>
240155e6:	4603      	mov	r3, r0
240155e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
240155ea:	e009      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240155ec:	2301      	movs	r3, #1
240155ee:	75fb      	strb	r3, [r7, #23]
      break;
240155f0:	e006      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
240155f2:	bf00      	nop
240155f4:	e004      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
240155f6:	bf00      	nop
240155f8:	e002      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
240155fa:	bf00      	nop
240155fc:	e000      	b.n	24015600 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
240155fe:	bf00      	nop
    }

    if(ret == HAL_OK)
24015600:	7dfb      	ldrb	r3, [r7, #23]
24015602:	2b00      	cmp	r3, #0
24015604:	d10a      	bne.n	2401561c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24015606:	4b9d      	ldr	r3, [pc, #628]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401560a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2401560e:	687b      	ldr	r3, [r7, #4]
24015610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24015614:	4999      	ldr	r1, [pc, #612]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015616:	4313      	orrs	r3, r2
24015618:	658b      	str	r3, [r1, #88]	; 0x58
2401561a:	e001      	b.n	24015620 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401561c:	7dfb      	ldrb	r3, [r7, #23]
2401561e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24015620:	687b      	ldr	r3, [r7, #4]
24015622:	681b      	ldr	r3, [r3, #0]
24015624:	f003 0308 	and.w	r3, r3, #8
24015628:	2b00      	cmp	r3, #0
2401562a:	d01a      	beq.n	24015662 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
2401562c:	687b      	ldr	r3, [r7, #4]
2401562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24015632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24015636:	d10a      	bne.n	2401564e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
24015638:	687b      	ldr	r3, [r7, #4]
2401563a:	3324      	adds	r3, #36	; 0x24
2401563c:	2102      	movs	r1, #2
2401563e:	4618      	mov	r0, r3
24015640:	f001 fee6 	bl	24017410 <RCCEx_PLL3_Config>
24015644:	4603      	mov	r3, r0
24015646:	2b00      	cmp	r3, #0
24015648:	d001      	beq.n	2401564e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
2401564a:	2301      	movs	r3, #1
2401564c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2401564e:	4b8b      	ldr	r3, [pc, #556]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
24015656:	687b      	ldr	r3, [r7, #4]
24015658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2401565c:	4987      	ldr	r1, [pc, #540]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
2401565e:	4313      	orrs	r3, r2
24015660:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24015662:	687b      	ldr	r3, [r7, #4]
24015664:	681b      	ldr	r3, [r3, #0]
24015666:	f003 0310 	and.w	r3, r3, #16
2401566a:	2b00      	cmp	r3, #0
2401566c:	d01a      	beq.n	240156a4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
2401566e:	687b      	ldr	r3, [r7, #4]
24015670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24015674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015678:	d10a      	bne.n	24015690 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
2401567a:	687b      	ldr	r3, [r7, #4]
2401567c:	3324      	adds	r3, #36	; 0x24
2401567e:	2102      	movs	r1, #2
24015680:	4618      	mov	r0, r3
24015682:	f001 fec5 	bl	24017410 <RCCEx_PLL3_Config>
24015686:	4603      	mov	r3, r0
24015688:	2b00      	cmp	r3, #0
2401568a:	d001      	beq.n	24015690 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
2401568c:	2301      	movs	r3, #1
2401568e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24015690:	4b7a      	ldr	r3, [pc, #488]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24015698:	687b      	ldr	r3, [r7, #4]
2401569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2401569e:	4977      	ldr	r1, [pc, #476]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240156a0:	4313      	orrs	r3, r2
240156a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240156a4:	687b      	ldr	r3, [r7, #4]
240156a6:	681b      	ldr	r3, [r3, #0]
240156a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240156ac:	2b00      	cmp	r3, #0
240156ae:	d034      	beq.n	2401571a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
240156b0:	687b      	ldr	r3, [r7, #4]
240156b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
240156b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240156ba:	d01d      	beq.n	240156f8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
240156bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240156c0:	d817      	bhi.n	240156f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
240156c2:	2b00      	cmp	r3, #0
240156c4:	d003      	beq.n	240156ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
240156c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240156ca:	d009      	beq.n	240156e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
240156cc:	e011      	b.n	240156f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240156ce:	687b      	ldr	r3, [r7, #4]
240156d0:	3304      	adds	r3, #4
240156d2:	2100      	movs	r1, #0
240156d4:	4618      	mov	r0, r3
240156d6:	f001 fde9 	bl	240172ac <RCCEx_PLL2_Config>
240156da:	4603      	mov	r3, r0
240156dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
240156de:	e00c      	b.n	240156fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
240156e0:	687b      	ldr	r3, [r7, #4]
240156e2:	3324      	adds	r3, #36	; 0x24
240156e4:	2102      	movs	r1, #2
240156e6:	4618      	mov	r0, r3
240156e8:	f001 fe92 	bl	24017410 <RCCEx_PLL3_Config>
240156ec:	4603      	mov	r3, r0
240156ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
240156f0:	e003      	b.n	240156fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240156f2:	2301      	movs	r3, #1
240156f4:	75fb      	strb	r3, [r7, #23]
      break;
240156f6:	e000      	b.n	240156fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
240156f8:	bf00      	nop
    }

    if(ret == HAL_OK)
240156fa:	7dfb      	ldrb	r3, [r7, #23]
240156fc:	2b00      	cmp	r3, #0
240156fe:	d10a      	bne.n	24015716 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24015700:	4b5e      	ldr	r3, [pc, #376]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
24015708:	687b      	ldr	r3, [r7, #4]
2401570a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2401570e:	495b      	ldr	r1, [pc, #364]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015710:	4313      	orrs	r3, r2
24015712:	658b      	str	r3, [r1, #88]	; 0x58
24015714:	e001      	b.n	2401571a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24015716:	7dfb      	ldrb	r3, [r7, #23]
24015718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2401571a:	687b      	ldr	r3, [r7, #4]
2401571c:	681b      	ldr	r3, [r3, #0]
2401571e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24015722:	2b00      	cmp	r3, #0
24015724:	d033      	beq.n	2401578e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
24015726:	687b      	ldr	r3, [r7, #4]
24015728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2401572c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24015730:	d01c      	beq.n	2401576c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
24015732:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24015736:	d816      	bhi.n	24015766 <HAL_RCCEx_PeriphCLKConfig+0xc96>
24015738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2401573c:	d003      	beq.n	24015746 <HAL_RCCEx_PeriphCLKConfig+0xc76>
2401573e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24015742:	d007      	beq.n	24015754 <HAL_RCCEx_PeriphCLKConfig+0xc84>
24015744:	e00f      	b.n	24015766 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015746:	4b4d      	ldr	r3, [pc, #308]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401574a:	4a4c      	ldr	r2, [pc, #304]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
2401574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24015750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
24015752:	e00c      	b.n	2401576e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24015754:	687b      	ldr	r3, [r7, #4]
24015756:	3324      	adds	r3, #36	; 0x24
24015758:	2101      	movs	r1, #1
2401575a:	4618      	mov	r0, r3
2401575c:	f001 fe58 	bl	24017410 <RCCEx_PLL3_Config>
24015760:	4603      	mov	r3, r0
24015762:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
24015764:	e003      	b.n	2401576e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015766:	2301      	movs	r3, #1
24015768:	75fb      	strb	r3, [r7, #23]
      break;
2401576a:	e000      	b.n	2401576e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
2401576c:	bf00      	nop
    }

    if(ret == HAL_OK)
2401576e:	7dfb      	ldrb	r3, [r7, #23]
24015770:	2b00      	cmp	r3, #0
24015772:	d10a      	bne.n	2401578a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24015774:	4b41      	ldr	r3, [pc, #260]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2401577c:	687b      	ldr	r3, [r7, #4]
2401577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24015782:	493e      	ldr	r1, [pc, #248]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015784:	4313      	orrs	r3, r2
24015786:	654b      	str	r3, [r1, #84]	; 0x54
24015788:	e001      	b.n	2401578e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401578a:	7dfb      	ldrb	r3, [r7, #23]
2401578c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2401578e:	687b      	ldr	r3, [r7, #4]
24015790:	681b      	ldr	r3, [r3, #0]
24015792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24015796:	2b00      	cmp	r3, #0
24015798:	d029      	beq.n	240157ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
2401579a:	687b      	ldr	r3, [r7, #4]
2401579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401579e:	2b00      	cmp	r3, #0
240157a0:	d003      	beq.n	240157aa <HAL_RCCEx_PeriphCLKConfig+0xcda>
240157a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240157a6:	d007      	beq.n	240157b8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
240157a8:	e00f      	b.n	240157ca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240157aa:	4b34      	ldr	r3, [pc, #208]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240157ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240157ae:	4a33      	ldr	r2, [pc, #204]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240157b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240157b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
240157b6:	e00b      	b.n	240157d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
240157b8:	687b      	ldr	r3, [r7, #4]
240157ba:	3304      	adds	r3, #4
240157bc:	2102      	movs	r1, #2
240157be:	4618      	mov	r0, r3
240157c0:	f001 fd74 	bl	240172ac <RCCEx_PLL2_Config>
240157c4:	4603      	mov	r3, r0
240157c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
240157c8:	e002      	b.n	240157d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
240157ca:	2301      	movs	r3, #1
240157cc:	75fb      	strb	r3, [r7, #23]
      break;
240157ce:	bf00      	nop
    }

    if(ret == HAL_OK)
240157d0:	7dfb      	ldrb	r3, [r7, #23]
240157d2:	2b00      	cmp	r3, #0
240157d4:	d109      	bne.n	240157ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
240157d6:	4b29      	ldr	r3, [pc, #164]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240157d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240157da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
240157de:	687b      	ldr	r3, [r7, #4]
240157e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240157e2:	4926      	ldr	r1, [pc, #152]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240157e4:	4313      	orrs	r3, r2
240157e6:	64cb      	str	r3, [r1, #76]	; 0x4c
240157e8:	e001      	b.n	240157ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
240157ea:	7dfb      	ldrb	r3, [r7, #23]
240157ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240157ee:	687b      	ldr	r3, [r7, #4]
240157f0:	681b      	ldr	r3, [r3, #0]
240157f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240157f6:	2b00      	cmp	r3, #0
240157f8:	d00a      	beq.n	24015810 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
240157fa:	687b      	ldr	r3, [r7, #4]
240157fc:	3324      	adds	r3, #36	; 0x24
240157fe:	2102      	movs	r1, #2
24015800:	4618      	mov	r0, r3
24015802:	f001 fe05 	bl	24017410 <RCCEx_PLL3_Config>
24015806:	4603      	mov	r3, r0
24015808:	2b00      	cmp	r3, #0
2401580a:	d001      	beq.n	24015810 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
2401580c:	2301      	movs	r3, #1
2401580e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24015810:	687b      	ldr	r3, [r7, #4]
24015812:	681b      	ldr	r3, [r3, #0]
24015814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015818:	2b00      	cmp	r3, #0
2401581a:	d033      	beq.n	24015884 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
2401581c:	687b      	ldr	r3, [r7, #4]
2401581e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24015820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24015824:	d017      	beq.n	24015856 <HAL_RCCEx_PeriphCLKConfig+0xd86>
24015826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2401582a:	d811      	bhi.n	24015850 <HAL_RCCEx_PeriphCLKConfig+0xd80>
2401582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24015830:	d013      	beq.n	2401585a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
24015832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24015836:	d80b      	bhi.n	24015850 <HAL_RCCEx_PeriphCLKConfig+0xd80>
24015838:	2b00      	cmp	r3, #0
2401583a:	d010      	beq.n	2401585e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
2401583c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015840:	d106      	bne.n	24015850 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015842:	4b0e      	ldr	r3, [pc, #56]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015846:	4a0d      	ldr	r2, [pc, #52]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401584c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
2401584e:	e007      	b.n	24015860 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015850:	2301      	movs	r3, #1
24015852:	75fb      	strb	r3, [r7, #23]
      break;
24015854:	e004      	b.n	24015860 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
24015856:	bf00      	nop
24015858:	e002      	b.n	24015860 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
2401585a:	bf00      	nop
2401585c:	e000      	b.n	24015860 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
2401585e:	bf00      	nop
    }

    if(ret == HAL_OK)
24015860:	7dfb      	ldrb	r3, [r7, #23]
24015862:	2b00      	cmp	r3, #0
24015864:	d10c      	bne.n	24015880 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24015866:	4b05      	ldr	r3, [pc, #20]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401586a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2401586e:	687b      	ldr	r3, [r7, #4]
24015870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24015872:	4902      	ldr	r1, [pc, #8]	; (2401587c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015874:	4313      	orrs	r3, r2
24015876:	654b      	str	r3, [r1, #84]	; 0x54
24015878:	e004      	b.n	24015884 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
2401587a:	bf00      	nop
2401587c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24015880:	7dfb      	ldrb	r3, [r7, #23]
24015882:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24015884:	687b      	ldr	r3, [r7, #4]
24015886:	681b      	ldr	r3, [r3, #0]
24015888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2401588c:	2b00      	cmp	r3, #0
2401588e:	d008      	beq.n	240158a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24015890:	4b31      	ldr	r3, [pc, #196]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24015898:	687b      	ldr	r3, [r7, #4]
2401589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401589c:	492e      	ldr	r1, [pc, #184]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401589e:	4313      	orrs	r3, r2
240158a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
240158a2:	687b      	ldr	r3, [r7, #4]
240158a4:	681b      	ldr	r3, [r3, #0]
240158a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
240158aa:	2b00      	cmp	r3, #0
240158ac:	d009      	beq.n	240158c2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
240158ae:	4b2a      	ldr	r3, [pc, #168]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158b0:	691b      	ldr	r3, [r3, #16]
240158b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
240158b6:	687b      	ldr	r3, [r7, #4]
240158b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
240158bc:	4926      	ldr	r1, [pc, #152]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158be:	4313      	orrs	r3, r2
240158c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240158c2:	687b      	ldr	r3, [r7, #4]
240158c4:	681b      	ldr	r3, [r3, #0]
240158c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240158ca:	2b00      	cmp	r3, #0
240158cc:	d008      	beq.n	240158e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240158ce:	4b22      	ldr	r3, [pc, #136]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240158d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
240158d6:	687b      	ldr	r3, [r7, #4]
240158d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240158da:	491f      	ldr	r1, [pc, #124]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158dc:	4313      	orrs	r3, r2
240158de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240158e0:	687b      	ldr	r3, [r7, #4]
240158e2:	681b      	ldr	r3, [r3, #0]
240158e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240158e8:	2b00      	cmp	r3, #0
240158ea:	d00d      	beq.n	24015908 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240158ec:	4b1a      	ldr	r3, [pc, #104]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158ee:	691b      	ldr	r3, [r3, #16]
240158f0:	4a19      	ldr	r2, [pc, #100]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240158f6:	6113      	str	r3, [r2, #16]
240158f8:	4b17      	ldr	r3, [pc, #92]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240158fa:	691a      	ldr	r2, [r3, #16]
240158fc:	687b      	ldr	r3, [r7, #4]
240158fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
24015902:	4915      	ldr	r1, [pc, #84]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015904:	4313      	orrs	r3, r2
24015906:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24015908:	687b      	ldr	r3, [r7, #4]
2401590a:	681b      	ldr	r3, [r3, #0]
2401590c:	2b00      	cmp	r3, #0
2401590e:	da08      	bge.n	24015922 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24015910:	4b11      	ldr	r3, [pc, #68]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015914:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
24015918:	687b      	ldr	r3, [r7, #4]
2401591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401591c:	490e      	ldr	r1, [pc, #56]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401591e:	4313      	orrs	r3, r2
24015920:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24015922:	687b      	ldr	r3, [r7, #4]
24015924:	681b      	ldr	r3, [r3, #0]
24015926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2401592a:	2b00      	cmp	r3, #0
2401592c:	d009      	beq.n	24015942 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2401592e:	4b0a      	ldr	r3, [pc, #40]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
24015936:	687b      	ldr	r3, [r7, #4]
24015938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2401593c:	4906      	ldr	r1, [pc, #24]	; (24015958 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401593e:	4313      	orrs	r3, r2
24015940:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
24015942:	7dbb      	ldrb	r3, [r7, #22]
24015944:	2b00      	cmp	r3, #0
24015946:	d101      	bne.n	2401594c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
24015948:	2300      	movs	r3, #0
2401594a:	e000      	b.n	2401594e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
2401594c:	2301      	movs	r3, #1
}
2401594e:	4618      	mov	r0, r3
24015950:	3718      	adds	r7, #24
24015952:	46bd      	mov	sp, r7
24015954:	bd80      	pop	{r7, pc}
24015956:	bf00      	nop
24015958:	58024400 	.word	0x58024400

2401595c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2401595c:	b480      	push	{r7}
2401595e:	b083      	sub	sp, #12
24015960:	af00      	add	r7, sp, #0
24015962:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
24015964:	687b      	ldr	r3, [r7, #4]
24015966:	4aa3      	ldr	r2, [pc, #652]	; (24015bf4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
24015968:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
2401596a:	687b      	ldr	r3, [r7, #4]
2401596c:	681b      	ldr	r3, [r3, #0]
2401596e:	f043 0208 	orr.w	r2, r3, #8
24015972:	687b      	ldr	r3, [r7, #4]
24015974:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
24015976:	687b      	ldr	r3, [r7, #4]
24015978:	681b      	ldr	r3, [r3, #0]
2401597a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
2401597e:	687b      	ldr	r3, [r7, #4]
24015980:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
24015982:	687b      	ldr	r3, [r7, #4]
24015984:	681b      	ldr	r3, [r3, #0]
24015986:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
2401598a:	687b      	ldr	r3, [r7, #4]
2401598c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
2401598e:	687b      	ldr	r3, [r7, #4]
24015990:	681b      	ldr	r3, [r3, #0]
24015992:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24015996:	687b      	ldr	r3, [r7, #4]
24015998:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
2401599a:	687b      	ldr	r3, [r7, #4]
2401599c:	681b      	ldr	r3, [r3, #0]
2401599e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
240159a2:	687b      	ldr	r3, [r7, #4]
240159a4:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
240159a6:	687b      	ldr	r3, [r7, #4]
240159a8:	681b      	ldr	r3, [r3, #0]
240159aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
240159ae:	687b      	ldr	r3, [r7, #4]
240159b0:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
240159b2:	687b      	ldr	r3, [r7, #4]
240159b4:	681b      	ldr	r3, [r3, #0]
240159b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
240159ba:	687b      	ldr	r3, [r7, #4]
240159bc:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
240159be:	4b8e      	ldr	r3, [pc, #568]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240159c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240159c2:	0d1b      	lsrs	r3, r3, #20
240159c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240159c8:	687b      	ldr	r3, [r7, #4]
240159ca:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
240159cc:	4b8a      	ldr	r3, [pc, #552]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240159ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240159d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
240159d4:	1c5a      	adds	r2, r3, #1
240159d6:	687b      	ldr	r3, [r7, #4]
240159d8:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
240159da:	4b87      	ldr	r3, [pc, #540]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240159dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240159de:	0e1b      	lsrs	r3, r3, #24
240159e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240159e4:	1c5a      	adds	r2, r3, #1
240159e6:	687b      	ldr	r3, [r7, #4]
240159e8:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
240159ea:	4b83      	ldr	r3, [pc, #524]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240159ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240159ee:	0a5b      	lsrs	r3, r3, #9
240159f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240159f4:	1c5a      	adds	r2, r3, #1
240159f6:	687b      	ldr	r3, [r7, #4]
240159f8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
240159fa:	4b7f      	ldr	r3, [pc, #508]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240159fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240159fe:	0c1b      	lsrs	r3, r3, #16
24015a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015a04:	1c5a      	adds	r2, r3, #1
24015a06:	687b      	ldr	r3, [r7, #4]
24015a08:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
24015a0a:	4b7b      	ldr	r3, [pc, #492]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015a0e:	0a9b      	lsrs	r3, r3, #10
24015a10:	f003 0203 	and.w	r2, r3, #3
24015a14:	687b      	ldr	r3, [r7, #4]
24015a16:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
24015a18:	4b77      	ldr	r3, [pc, #476]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015a1c:	0a5b      	lsrs	r3, r3, #9
24015a1e:	f003 0201 	and.w	r2, r3, #1
24015a22:	687b      	ldr	r3, [r7, #4]
24015a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
24015a26:	4b74      	ldr	r3, [pc, #464]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015a2a:	0b1b      	lsrs	r3, r3, #12
24015a2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015a30:	687b      	ldr	r3, [r7, #4]
24015a32:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
24015a34:	4b70      	ldr	r3, [pc, #448]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015a3c:	1c5a      	adds	r2, r3, #1
24015a3e:	687b      	ldr	r3, [r7, #4]
24015a40:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
24015a42:	4b6d      	ldr	r3, [pc, #436]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015a46:	0e1b      	lsrs	r3, r3, #24
24015a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015a4c:	1c5a      	adds	r2, r3, #1
24015a4e:	687b      	ldr	r3, [r7, #4]
24015a50:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
24015a52:	4b69      	ldr	r3, [pc, #420]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015a56:	0a5b      	lsrs	r3, r3, #9
24015a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015a5c:	1c5a      	adds	r2, r3, #1
24015a5e:	687b      	ldr	r3, [r7, #4]
24015a60:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
24015a62:	4b65      	ldr	r3, [pc, #404]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015a66:	0c1b      	lsrs	r3, r3, #16
24015a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015a6c:	1c5a      	adds	r2, r3, #1
24015a6e:	687b      	ldr	r3, [r7, #4]
24015a70:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
24015a72:	4b61      	ldr	r3, [pc, #388]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015a76:	099b      	lsrs	r3, r3, #6
24015a78:	f003 0203 	and.w	r2, r3, #3
24015a7c:	687b      	ldr	r3, [r7, #4]
24015a7e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
24015a80:	4b5d      	ldr	r3, [pc, #372]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015a84:	095b      	lsrs	r3, r3, #5
24015a86:	f003 0201 	and.w	r2, r3, #1
24015a8a:	687b      	ldr	r3, [r7, #4]
24015a8c:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
24015a8e:	4b5a      	ldr	r3, [pc, #360]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015a92:	f003 0238 	and.w	r2, r3, #56	; 0x38
24015a96:	687b      	ldr	r3, [r7, #4]
24015a98:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
24015a9a:	4b57      	ldr	r3, [pc, #348]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015a9e:	f003 0207 	and.w	r2, r3, #7
24015aa2:	687b      	ldr	r3, [r7, #4]
24015aa4:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
24015aa6:	4b54      	ldr	r3, [pc, #336]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015aaa:	f003 0207 	and.w	r2, r3, #7
24015aae:	687b      	ldr	r3, [r7, #4]
24015ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
24015ab4:	4b50      	ldr	r3, [pc, #320]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015ab8:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
24015abc:	687b      	ldr	r3, [r7, #4]
24015abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
24015ac2:	4b4d      	ldr	r3, [pc, #308]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015ac6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24015aca:	687b      	ldr	r3, [r7, #4]
24015acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
24015ad0:	4b49      	ldr	r3, [pc, #292]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015ad4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
24015ad8:	687b      	ldr	r3, [r7, #4]
24015ada:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
24015ade:	4b46      	ldr	r3, [pc, #280]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015ae2:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
24015ae6:	687b      	ldr	r3, [r7, #4]
24015ae8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
24015aec:	4b42      	ldr	r3, [pc, #264]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015af0:	f003 0207 	and.w	r2, r3, #7
24015af4:	687b      	ldr	r3, [r7, #4]
24015af6:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
24015af8:	4b3f      	ldr	r3, [pc, #252]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015afc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
24015b00:	687b      	ldr	r3, [r7, #4]
24015b02:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
24015b04:	4b3c      	ldr	r3, [pc, #240]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015b08:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
24015b0c:	687b      	ldr	r3, [r7, #4]
24015b0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
24015b12:	4b39      	ldr	r3, [pc, #228]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015b16:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
24015b1a:	687b      	ldr	r3, [r7, #4]
24015b1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
24015b20:	4b35      	ldr	r3, [pc, #212]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015b24:	f403 7240 	and.w	r2, r3, #768	; 0x300
24015b28:	687b      	ldr	r3, [r7, #4]
24015b2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
24015b2e:	4b32      	ldr	r3, [pc, #200]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015b32:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24015b36:	687b      	ldr	r3, [r7, #4]
24015b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
24015b3c:	4b2e      	ldr	r3, [pc, #184]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
24015b44:	687b      	ldr	r3, [r7, #4]
24015b46:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
24015b48:	4b2b      	ldr	r3, [pc, #172]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015b4c:	f403 7240 	and.w	r2, r3, #768	; 0x300
24015b50:	687b      	ldr	r3, [r7, #4]
24015b52:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
24015b54:	4b28      	ldr	r3, [pc, #160]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b56:	691b      	ldr	r3, [r3, #16]
24015b58:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
24015b5c:	687b      	ldr	r3, [r7, #4]
24015b5e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
24015b62:	4b25      	ldr	r3, [pc, #148]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
24015b6a:	687b      	ldr	r3, [r7, #4]
24015b6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
24015b70:	4b21      	ldr	r3, [pc, #132]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015b74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24015b78:	687b      	ldr	r3, [r7, #4]
24015b7a:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
24015b7c:	4b1e      	ldr	r3, [pc, #120]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015b80:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
24015b84:	687b      	ldr	r3, [r7, #4]
24015b86:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
24015b88:	4b1b      	ldr	r3, [pc, #108]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015b8c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24015b90:	687b      	ldr	r3, [r7, #4]
24015b92:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24015b94:	4b18      	ldr	r3, [pc, #96]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015b98:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
24015b9c:	687b      	ldr	r3, [r7, #4]
24015b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
24015ba0:	4b15      	ldr	r3, [pc, #84]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015ba4:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
24015ba8:	687b      	ldr	r3, [r7, #4]
24015baa:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
24015bac:	4b12      	ldr	r3, [pc, #72]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015bb0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24015bb4:	687b      	ldr	r3, [r7, #4]
24015bb6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
24015bba:	4b0f      	ldr	r3, [pc, #60]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015bbe:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
24015bc2:	687b      	ldr	r3, [r7, #4]
24015bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
24015bc6:	4b0c      	ldr	r3, [pc, #48]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015bca:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
24015bce:	687b      	ldr	r3, [r7, #4]
24015bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
24015bd4:	4b08      	ldr	r3, [pc, #32]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015bd8:	f003 0203 	and.w	r2, r3, #3
24015bdc:	687b      	ldr	r3, [r7, #4]
24015bde:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
24015be0:	4b05      	ldr	r3, [pc, #20]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015be4:	f003 0230 	and.w	r2, r3, #48	; 0x30
24015be8:	687b      	ldr	r3, [r7, #4]
24015bea:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
24015bec:	4b02      	ldr	r3, [pc, #8]	; (24015bf8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015bf0:	e004      	b.n	24015bfc <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
24015bf2:	bf00      	nop
24015bf4:	c9fff1f7 	.word	0xc9fff1f7
24015bf8:	58024400 	.word	0x58024400
24015bfc:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
24015c00:	687b      	ldr	r3, [r7, #4]
24015c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
24015c04:	4b0a      	ldr	r3, [pc, #40]	; (24015c30 <HAL_RCCEx_GetPeriphCLKConfig+0x2d4>)
24015c06:	691b      	ldr	r3, [r3, #16]
24015c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24015c0c:	2b00      	cmp	r3, #0
24015c0e:	d104      	bne.n	24015c1a <HAL_RCCEx_GetPeriphCLKConfig+0x2be>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
24015c10:	687b      	ldr	r3, [r7, #4]
24015c12:	2200      	movs	r2, #0
24015c14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
24015c18:	e004      	b.n	24015c24 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
24015c1a:	687b      	ldr	r3, [r7, #4]
24015c1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
24015c20:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
24015c24:	bf00      	nop
24015c26:	370c      	adds	r7, #12
24015c28:	46bd      	mov	sp, r7
24015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24015c2e:	4770      	bx	lr
24015c30:	58024400 	.word	0x58024400

24015c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
24015c34:	b580      	push	{r7, lr}
24015c36:	b090      	sub	sp, #64	; 0x40
24015c38:	af00      	add	r7, sp, #0
24015c3a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24015c3c:	687b      	ldr	r3, [r7, #4]
24015c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015c42:	f040 8095 	bne.w	24015d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
24015c46:	4b97      	ldr	r3, [pc, #604]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015c4a:	f003 0307 	and.w	r3, r3, #7
24015c4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24015c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015c52:	2b04      	cmp	r3, #4
24015c54:	f200 8088 	bhi.w	24015d68 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
24015c58:	a201      	add	r2, pc, #4	; (adr r2, 24015c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
24015c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24015c5e:	bf00      	nop
24015c60:	24015c75 	.word	0x24015c75
24015c64:	24015c9d 	.word	0x24015c9d
24015c68:	24015cc5 	.word	0x24015cc5
24015c6c:	24015d61 	.word	0x24015d61
24015c70:	24015ced 	.word	0x24015ced
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015c74:	4b8b      	ldr	r3, [pc, #556]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015c76:	681b      	ldr	r3, [r3, #0]
24015c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015c80:	d108      	bne.n	24015c94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015c86:	4618      	mov	r0, r3
24015c88:	f000 ff7a 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
24015c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015c90:	f000 bc94 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015c94:	2300      	movs	r3, #0
24015c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c98:	f000 bc90 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015c9c:	4b81      	ldr	r3, [pc, #516]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015c9e:	681b      	ldr	r3, [r3, #0]
24015ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015ca8:	d108      	bne.n	24015cbc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015caa:	f107 0318 	add.w	r3, r7, #24
24015cae:	4618      	mov	r0, r3
24015cb0:	f000 fcbe 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015cb4:	69bb      	ldr	r3, [r7, #24]
24015cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015cb8:	f000 bc80 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015cbc:	2300      	movs	r3, #0
24015cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015cc0:	f000 bc7c 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015cc4:	4b77      	ldr	r3, [pc, #476]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015cc6:	681b      	ldr	r3, [r3, #0]
24015cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015cd0:	d108      	bne.n	24015ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015cd2:	f107 030c 	add.w	r3, r7, #12
24015cd6:	4618      	mov	r0, r3
24015cd8:	f000 fdfe 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015cdc:	68fb      	ldr	r3, [r7, #12]
24015cde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015ce0:	f000 bc6c 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015ce4:	2300      	movs	r3, #0
24015ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015ce8:	f000 bc68 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015cec:	4b6d      	ldr	r3, [pc, #436]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015cf4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015cf6:	4b6b      	ldr	r3, [pc, #428]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015cf8:	681b      	ldr	r3, [r3, #0]
24015cfa:	f003 0304 	and.w	r3, r3, #4
24015cfe:	2b04      	cmp	r3, #4
24015d00:	d10c      	bne.n	24015d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
24015d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015d04:	2b00      	cmp	r3, #0
24015d06:	d109      	bne.n	24015d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015d08:	4b66      	ldr	r3, [pc, #408]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015d0a:	681b      	ldr	r3, [r3, #0]
24015d0c:	08db      	lsrs	r3, r3, #3
24015d0e:	f003 0303 	and.w	r3, r3, #3
24015d12:	4a65      	ldr	r2, [pc, #404]	; (24015ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
24015d14:	fa22 f303 	lsr.w	r3, r2, r3
24015d18:	63fb      	str	r3, [r7, #60]	; 0x3c
24015d1a:	e01f      	b.n	24015d5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015d1c:	4b61      	ldr	r3, [pc, #388]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015d1e:	681b      	ldr	r3, [r3, #0]
24015d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015d28:	d106      	bne.n	24015d38 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
24015d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015d30:	d102      	bne.n	24015d38 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015d32:	4b5e      	ldr	r3, [pc, #376]	; (24015eac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24015d34:	63fb      	str	r3, [r7, #60]	; 0x3c
24015d36:	e011      	b.n	24015d5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015d38:	4b5a      	ldr	r3, [pc, #360]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015d3a:	681b      	ldr	r3, [r3, #0]
24015d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015d44:	d106      	bne.n	24015d54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
24015d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015d4c:	d102      	bne.n	24015d54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015d4e:	4b58      	ldr	r3, [pc, #352]	; (24015eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
24015d50:	63fb      	str	r3, [r7, #60]	; 0x3c
24015d52:	e003      	b.n	24015d5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015d54:	2300      	movs	r3, #0
24015d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015d58:	f000 bc30 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015d5c:	f000 bc2e 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015d60:	4b54      	ldr	r3, [pc, #336]	; (24015eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24015d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d64:	f000 bc2a 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015d68:	2300      	movs	r3, #0
24015d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d6c:	f000 bc26 	b.w	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24015d70:	687b      	ldr	r3, [r7, #4]
24015d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24015d76:	f040 809f 	bne.w	24015eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
24015d7a:	4b4a      	ldr	r3, [pc, #296]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015d7e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
24015d82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015d8a:	d04d      	beq.n	24015e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
24015d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015d92:	f200 8084 	bhi.w	24015e9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015d98:	2bc0      	cmp	r3, #192	; 0xc0
24015d9a:	d07d      	beq.n	24015e98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
24015d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015d9e:	2bc0      	cmp	r3, #192	; 0xc0
24015da0:	d87d      	bhi.n	24015e9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015da4:	2b80      	cmp	r3, #128	; 0x80
24015da6:	d02d      	beq.n	24015e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
24015da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015daa:	2b80      	cmp	r3, #128	; 0x80
24015dac:	d877      	bhi.n	24015e9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015db0:	2b00      	cmp	r3, #0
24015db2:	d003      	beq.n	24015dbc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24015db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015db6:	2b40      	cmp	r3, #64	; 0x40
24015db8:	d012      	beq.n	24015de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
24015dba:	e070      	b.n	24015e9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015dbc:	4b39      	ldr	r3, [pc, #228]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015dbe:	681b      	ldr	r3, [r3, #0]
24015dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015dc8:	d107      	bne.n	24015dda <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015dce:	4618      	mov	r0, r3
24015dd0:	f000 fed6 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015dd8:	e3f0      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015dda:	2300      	movs	r3, #0
24015ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015dde:	e3ed      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015de0:	4b30      	ldr	r3, [pc, #192]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015de2:	681b      	ldr	r3, [r3, #0]
24015de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015dec:	d107      	bne.n	24015dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015dee:	f107 0318 	add.w	r3, r7, #24
24015df2:	4618      	mov	r0, r3
24015df4:	f000 fc1c 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015df8:	69bb      	ldr	r3, [r7, #24]
24015dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015dfc:	e3de      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015dfe:	2300      	movs	r3, #0
24015e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015e02:	e3db      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015e04:	4b27      	ldr	r3, [pc, #156]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e06:	681b      	ldr	r3, [r3, #0]
24015e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015e10:	d107      	bne.n	24015e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015e12:	f107 030c 	add.w	r3, r7, #12
24015e16:	4618      	mov	r0, r3
24015e18:	f000 fd5e 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015e1c:	68fb      	ldr	r3, [r7, #12]
24015e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015e20:	e3cc      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015e22:	2300      	movs	r3, #0
24015e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015e26:	e3c9      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015e28:	4b1e      	ldr	r3, [pc, #120]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015e30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015e32:	4b1c      	ldr	r3, [pc, #112]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e34:	681b      	ldr	r3, [r3, #0]
24015e36:	f003 0304 	and.w	r3, r3, #4
24015e3a:	2b04      	cmp	r3, #4
24015e3c:	d10c      	bne.n	24015e58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
24015e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015e40:	2b00      	cmp	r3, #0
24015e42:	d109      	bne.n	24015e58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015e44:	4b17      	ldr	r3, [pc, #92]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e46:	681b      	ldr	r3, [r3, #0]
24015e48:	08db      	lsrs	r3, r3, #3
24015e4a:	f003 0303 	and.w	r3, r3, #3
24015e4e:	4a16      	ldr	r2, [pc, #88]	; (24015ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
24015e50:	fa22 f303 	lsr.w	r3, r2, r3
24015e54:	63fb      	str	r3, [r7, #60]	; 0x3c
24015e56:	e01e      	b.n	24015e96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015e58:	4b12      	ldr	r3, [pc, #72]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e5a:	681b      	ldr	r3, [r3, #0]
24015e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015e64:	d106      	bne.n	24015e74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
24015e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015e6c:	d102      	bne.n	24015e74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015e6e:	4b0f      	ldr	r3, [pc, #60]	; (24015eac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24015e70:	63fb      	str	r3, [r7, #60]	; 0x3c
24015e72:	e010      	b.n	24015e96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015e74:	4b0b      	ldr	r3, [pc, #44]	; (24015ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015e76:	681b      	ldr	r3, [r3, #0]
24015e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015e80:	d106      	bne.n	24015e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
24015e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015e88:	d102      	bne.n	24015e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015e8a:	4b09      	ldr	r3, [pc, #36]	; (24015eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
24015e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
24015e8e:	e002      	b.n	24015e96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015e90:	2300      	movs	r3, #0
24015e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015e94:	e392      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015e96:	e391      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015e98:	4b06      	ldr	r3, [pc, #24]	; (24015eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24015e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015e9c:	e38e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015e9e:	2300      	movs	r3, #0
24015ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015ea2:	e38b      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015ea4:	58024400 	.word	0x58024400
24015ea8:	03d09000 	.word	0x03d09000
24015eac:	003d0900 	.word	0x003d0900
24015eb0:	016e3600 	.word	0x016e3600
24015eb4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24015eb8:	687b      	ldr	r3, [r7, #4]
24015eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24015ebe:	f040 809c 	bne.w	24015ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
24015ec2:	4b9d      	ldr	r3, [pc, #628]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015ec6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
24015eca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24015ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015ece:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24015ed2:	d054      	beq.n	24015f7e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
24015ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24015eda:	f200 808b 	bhi.w	24015ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
24015ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24015ee4:	f000 8083 	beq.w	24015fee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
24015ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015eea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24015eee:	f200 8081 	bhi.w	24015ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
24015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24015ef8:	d02f      	beq.n	24015f5a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
24015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24015f00:	d878      	bhi.n	24015ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
24015f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015f04:	2b00      	cmp	r3, #0
24015f06:	d004      	beq.n	24015f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
24015f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24015f0e:	d012      	beq.n	24015f36 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
24015f10:	e070      	b.n	24015ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015f12:	4b89      	ldr	r3, [pc, #548]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f14:	681b      	ldr	r3, [r3, #0]
24015f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015f1e:	d107      	bne.n	24015f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015f24:	4618      	mov	r0, r3
24015f26:	f000 fe2b 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015f2e:	e345      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015f30:	2300      	movs	r3, #0
24015f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015f34:	e342      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015f36:	4b80      	ldr	r3, [pc, #512]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f38:	681b      	ldr	r3, [r3, #0]
24015f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015f42:	d107      	bne.n	24015f54 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015f44:	f107 0318 	add.w	r3, r7, #24
24015f48:	4618      	mov	r0, r3
24015f4a:	f000 fb71 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015f4e:	69bb      	ldr	r3, [r7, #24]
24015f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015f52:	e333      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015f54:	2300      	movs	r3, #0
24015f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015f58:	e330      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015f5a:	4b77      	ldr	r3, [pc, #476]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f5c:	681b      	ldr	r3, [r3, #0]
24015f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015f66:	d107      	bne.n	24015f78 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015f68:	f107 030c 	add.w	r3, r7, #12
24015f6c:	4618      	mov	r0, r3
24015f6e:	f000 fcb3 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015f72:	68fb      	ldr	r3, [r7, #12]
24015f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015f76:	e321      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015f78:	2300      	movs	r3, #0
24015f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015f7c:	e31e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015f7e:	4b6e      	ldr	r3, [pc, #440]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015f86:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015f88:	4b6b      	ldr	r3, [pc, #428]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f8a:	681b      	ldr	r3, [r3, #0]
24015f8c:	f003 0304 	and.w	r3, r3, #4
24015f90:	2b04      	cmp	r3, #4
24015f92:	d10c      	bne.n	24015fae <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
24015f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015f96:	2b00      	cmp	r3, #0
24015f98:	d109      	bne.n	24015fae <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015f9a:	4b67      	ldr	r3, [pc, #412]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015f9c:	681b      	ldr	r3, [r3, #0]
24015f9e:	08db      	lsrs	r3, r3, #3
24015fa0:	f003 0303 	and.w	r3, r3, #3
24015fa4:	4a65      	ldr	r2, [pc, #404]	; (2401613c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
24015fa6:	fa22 f303 	lsr.w	r3, r2, r3
24015faa:	63fb      	str	r3, [r7, #60]	; 0x3c
24015fac:	e01e      	b.n	24015fec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015fae:	4b62      	ldr	r3, [pc, #392]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015fb0:	681b      	ldr	r3, [r3, #0]
24015fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015fba:	d106      	bne.n	24015fca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
24015fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015fc2:	d102      	bne.n	24015fca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015fc4:	4b5e      	ldr	r3, [pc, #376]	; (24016140 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
24015fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
24015fc8:	e010      	b.n	24015fec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015fca:	4b5b      	ldr	r3, [pc, #364]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015fcc:	681b      	ldr	r3, [r3, #0]
24015fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015fd6:	d106      	bne.n	24015fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
24015fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015fde:	d102      	bne.n	24015fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015fe0:	4b58      	ldr	r3, [pc, #352]	; (24016144 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
24015fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
24015fe4:	e002      	b.n	24015fec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015fe6:	2300      	movs	r3, #0
24015fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015fea:	e2e7      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015fec:	e2e6      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015fee:	4b56      	ldr	r3, [pc, #344]	; (24016148 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24015ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015ff2:	e2e3      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015ff4:	2300      	movs	r3, #0
24015ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015ff8:	e2e0      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24015ffa:	687b      	ldr	r3, [r7, #4]
24015ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24016000:	f040 80a7 	bne.w	24016152 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
24016004:	4b4c      	ldr	r3, [pc, #304]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24016006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016008:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
2401600c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2401600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24016010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24016014:	d055      	beq.n	240160c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
24016016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24016018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2401601c:	f200 8096 	bhi.w	2401614c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
24016020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24016022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24016026:	f000 8084 	beq.w	24016132 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
2401602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401602c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24016030:	f200 808c 	bhi.w	2401614c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
24016034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24016036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2401603a:	d030      	beq.n	2401609e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
2401603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401603e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24016042:	f200 8083 	bhi.w	2401614c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
24016046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24016048:	2b00      	cmp	r3, #0
2401604a:	d004      	beq.n	24016056 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
2401604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401604e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24016052:	d012      	beq.n	2401607a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
24016054:	e07a      	b.n	2401614c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24016056:	4b38      	ldr	r3, [pc, #224]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24016058:	681b      	ldr	r3, [r3, #0]
2401605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401605e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24016062:	d107      	bne.n	24016074 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24016064:	f107 0324 	add.w	r3, r7, #36	; 0x24
24016068:	4618      	mov	r0, r3
2401606a:	f000 fd89 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2401606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24016070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24016072:	e2a3      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24016074:	2300      	movs	r3, #0
24016076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016078:	e2a0      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401607a:	4b2f      	ldr	r3, [pc, #188]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401607c:	681b      	ldr	r3, [r3, #0]
2401607e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24016086:	d107      	bne.n	24016098 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24016088:	f107 0318 	add.w	r3, r7, #24
2401608c:	4618      	mov	r0, r3
2401608e:	f000 facf 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24016092:	69bb      	ldr	r3, [r7, #24]
24016094:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
24016096:	e291      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24016098:	2300      	movs	r3, #0
2401609a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401609c:	e28e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401609e:	4b26      	ldr	r3, [pc, #152]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240160a0:	681b      	ldr	r3, [r3, #0]
240160a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240160a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240160aa:	d107      	bne.n	240160bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240160ac:	f107 030c 	add.w	r3, r7, #12
240160b0:	4618      	mov	r0, r3
240160b2:	f000 fc11 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240160b6:	68fb      	ldr	r3, [r7, #12]
240160b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240160ba:	e27f      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240160bc:	2300      	movs	r3, #0
240160be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240160c0:	e27c      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240160c2:	4b1d      	ldr	r3, [pc, #116]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240160c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240160c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240160ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240160cc:	4b1a      	ldr	r3, [pc, #104]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240160ce:	681b      	ldr	r3, [r3, #0]
240160d0:	f003 0304 	and.w	r3, r3, #4
240160d4:	2b04      	cmp	r3, #4
240160d6:	d10c      	bne.n	240160f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
240160d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240160da:	2b00      	cmp	r3, #0
240160dc:	d109      	bne.n	240160f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240160de:	4b16      	ldr	r3, [pc, #88]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240160e0:	681b      	ldr	r3, [r3, #0]
240160e2:	08db      	lsrs	r3, r3, #3
240160e4:	f003 0303 	and.w	r3, r3, #3
240160e8:	4a14      	ldr	r2, [pc, #80]	; (2401613c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
240160ea:	fa22 f303 	lsr.w	r3, r2, r3
240160ee:	63fb      	str	r3, [r7, #60]	; 0x3c
240160f0:	e01e      	b.n	24016130 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240160f2:	4b11      	ldr	r3, [pc, #68]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240160f4:	681b      	ldr	r3, [r3, #0]
240160f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
240160fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240160fe:	d106      	bne.n	2401610e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
24016100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24016102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24016106:	d102      	bne.n	2401610e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24016108:	4b0d      	ldr	r3, [pc, #52]	; (24016140 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
2401610a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401610c:	e010      	b.n	24016130 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401610e:	4b0a      	ldr	r3, [pc, #40]	; (24016138 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24016110:	681b      	ldr	r3, [r3, #0]
24016112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24016116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401611a:	d106      	bne.n	2401612a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
2401611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401611e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016122:	d102      	bne.n	2401612a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24016124:	4b07      	ldr	r3, [pc, #28]	; (24016144 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
24016126:	63fb      	str	r3, [r7, #60]	; 0x3c
24016128:	e002      	b.n	24016130 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2401612a:	2300      	movs	r3, #0
2401612c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2401612e:	e245      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24016130:	e244      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24016132:	4b05      	ldr	r3, [pc, #20]	; (24016148 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24016134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016136:	e241      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24016138:	58024400 	.word	0x58024400
2401613c:	03d09000 	.word	0x03d09000
24016140:	003d0900 	.word	0x003d0900
24016144:	016e3600 	.word	0x016e3600
24016148:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
2401614c:	2300      	movs	r3, #0
2401614e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016150:	e234      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24016152:	687b      	ldr	r3, [r7, #4]
24016154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24016158:	f040 809c 	bne.w	24016294 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
2401615c:	4b9b      	ldr	r3, [pc, #620]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24016160:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
24016164:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24016166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2401616c:	d054      	beq.n	24016218 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
2401616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24016174:	f200 808b 	bhi.w	2401628e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
24016178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401617a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2401617e:	f000 8083 	beq.w	24016288 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
24016182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24016188:	f200 8081 	bhi.w	2401628e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
2401618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401618e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24016192:	d02f      	beq.n	240161f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
24016194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401619a:	d878      	bhi.n	2401628e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
2401619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401619e:	2b00      	cmp	r3, #0
240161a0:	d004      	beq.n	240161ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
240161a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240161a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240161a8:	d012      	beq.n	240161d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
240161aa:	e070      	b.n	2401628e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240161ac:	4b87      	ldr	r3, [pc, #540]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240161ae:	681b      	ldr	r3, [r3, #0]
240161b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240161b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240161b8:	d107      	bne.n	240161ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240161ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
240161be:	4618      	mov	r0, r3
240161c0:	f000 fcde 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240161c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
240161c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240161c8:	e1f8      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240161ca:	2300      	movs	r3, #0
240161cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240161ce:	e1f5      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240161d0:	4b7e      	ldr	r3, [pc, #504]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240161d2:	681b      	ldr	r3, [r3, #0]
240161d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240161d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240161dc:	d107      	bne.n	240161ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240161de:	f107 0318 	add.w	r3, r7, #24
240161e2:	4618      	mov	r0, r3
240161e4:	f000 fa24 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240161e8:	69bb      	ldr	r3, [r7, #24]
240161ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240161ec:	e1e6      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240161ee:	2300      	movs	r3, #0
240161f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240161f2:	e1e3      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240161f4:	4b75      	ldr	r3, [pc, #468]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240161f6:	681b      	ldr	r3, [r3, #0]
240161f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240161fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016200:	d107      	bne.n	24016212 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24016202:	f107 030c 	add.w	r3, r7, #12
24016206:	4618      	mov	r0, r3
24016208:	f000 fb66 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2401620c:	68fb      	ldr	r3, [r7, #12]
2401620e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24016210:	e1d4      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24016212:	2300      	movs	r3, #0
24016214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016216:	e1d1      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24016218:	4b6c      	ldr	r3, [pc, #432]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401621a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401621c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24016220:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24016222:	4b6a      	ldr	r3, [pc, #424]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24016224:	681b      	ldr	r3, [r3, #0]
24016226:	f003 0304 	and.w	r3, r3, #4
2401622a:	2b04      	cmp	r3, #4
2401622c:	d10c      	bne.n	24016248 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
2401622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24016230:	2b00      	cmp	r3, #0
24016232:	d109      	bne.n	24016248 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24016234:	4b65      	ldr	r3, [pc, #404]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24016236:	681b      	ldr	r3, [r3, #0]
24016238:	08db      	lsrs	r3, r3, #3
2401623a:	f003 0303 	and.w	r3, r3, #3
2401623e:	4a64      	ldr	r2, [pc, #400]	; (240163d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24016240:	fa22 f303 	lsr.w	r3, r2, r3
24016244:	63fb      	str	r3, [r7, #60]	; 0x3c
24016246:	e01e      	b.n	24016286 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24016248:	4b60      	ldr	r3, [pc, #384]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401624a:	681b      	ldr	r3, [r3, #0]
2401624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24016250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24016254:	d106      	bne.n	24016264 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
24016256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24016258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2401625c:	d102      	bne.n	24016264 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2401625e:	4b5d      	ldr	r3, [pc, #372]	; (240163d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24016260:	63fb      	str	r3, [r7, #60]	; 0x3c
24016262:	e010      	b.n	24016286 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24016264:	4b59      	ldr	r3, [pc, #356]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24016266:	681b      	ldr	r3, [r3, #0]
24016268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2401626c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016270:	d106      	bne.n	24016280 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
24016272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24016274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016278:	d102      	bne.n	24016280 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2401627a:	4b57      	ldr	r3, [pc, #348]	; (240163d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
2401627c:	63fb      	str	r3, [r7, #60]	; 0x3c
2401627e:	e002      	b.n	24016286 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24016280:	2300      	movs	r3, #0
24016282:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24016284:	e19a      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24016286:	e199      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24016288:	4b54      	ldr	r3, [pc, #336]	; (240163dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
2401628a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401628c:	e196      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
2401628e:	2300      	movs	r3, #0
24016290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016292:	e193      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24016294:	687b      	ldr	r3, [r7, #4]
24016296:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2401629a:	d173      	bne.n	24016384 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
2401629c:	4b4b      	ldr	r3, [pc, #300]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240162a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
240162a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
240162a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240162a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240162ac:	d02f      	beq.n	2401630e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
240162ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240162b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240162b4:	d863      	bhi.n	2401637e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
240162b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240162b8:	2b00      	cmp	r3, #0
240162ba:	d004      	beq.n	240162c6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
240162bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240162be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240162c2:	d012      	beq.n	240162ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
240162c4:	e05b      	b.n	2401637e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240162c6:	4b41      	ldr	r3, [pc, #260]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240162c8:	681b      	ldr	r3, [r3, #0]
240162ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240162ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240162d2:	d107      	bne.n	240162e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240162d4:	f107 0318 	add.w	r3, r7, #24
240162d8:	4618      	mov	r0, r3
240162da:	f000 f9a9 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240162de:	69bb      	ldr	r3, [r7, #24]
240162e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240162e2:	e16b      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240162e4:	2300      	movs	r3, #0
240162e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240162e8:	e168      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240162ea:	4b38      	ldr	r3, [pc, #224]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240162ec:	681b      	ldr	r3, [r3, #0]
240162ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240162f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240162f6:	d107      	bne.n	24016308 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240162f8:	f107 030c 	add.w	r3, r7, #12
240162fc:	4618      	mov	r0, r3
240162fe:	f000 faeb 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24016302:	697b      	ldr	r3, [r7, #20]
24016304:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24016306:	e159      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24016308:	2300      	movs	r3, #0
2401630a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401630c:	e156      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2401630e:	4b2f      	ldr	r3, [pc, #188]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24016310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24016312:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24016316:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24016318:	4b2c      	ldr	r3, [pc, #176]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401631a:	681b      	ldr	r3, [r3, #0]
2401631c:	f003 0304 	and.w	r3, r3, #4
24016320:	2b04      	cmp	r3, #4
24016322:	d10c      	bne.n	2401633e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
24016324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24016326:	2b00      	cmp	r3, #0
24016328:	d109      	bne.n	2401633e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2401632a:	4b28      	ldr	r3, [pc, #160]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401632c:	681b      	ldr	r3, [r3, #0]
2401632e:	08db      	lsrs	r3, r3, #3
24016330:	f003 0303 	and.w	r3, r3, #3
24016334:	4a26      	ldr	r2, [pc, #152]	; (240163d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24016336:	fa22 f303 	lsr.w	r3, r2, r3
2401633a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401633c:	e01e      	b.n	2401637c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2401633e:	4b23      	ldr	r3, [pc, #140]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24016340:	681b      	ldr	r3, [r3, #0]
24016342:	f403 7380 	and.w	r3, r3, #256	; 0x100
24016346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401634a:	d106      	bne.n	2401635a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
2401634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401634e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24016352:	d102      	bne.n	2401635a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24016354:	4b1f      	ldr	r3, [pc, #124]	; (240163d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24016356:	63fb      	str	r3, [r7, #60]	; 0x3c
24016358:	e010      	b.n	2401637c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401635a:	4b1c      	ldr	r3, [pc, #112]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401635c:	681b      	ldr	r3, [r3, #0]
2401635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24016362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24016366:	d106      	bne.n	24016376 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
24016368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401636e:	d102      	bne.n	24016376 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24016370:	4b19      	ldr	r3, [pc, #100]	; (240163d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
24016372:	63fb      	str	r3, [r7, #60]	; 0x3c
24016374:	e002      	b.n	2401637c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24016376:	2300      	movs	r3, #0
24016378:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2401637a:	e11f      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2401637c:	e11e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
2401637e:	2300      	movs	r3, #0
24016380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016382:	e11b      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24016384:	687b      	ldr	r3, [r7, #4]
24016386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2401638a:	d13e      	bne.n	2401640a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
2401638c:	4b0f      	ldr	r3, [pc, #60]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401638e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24016390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24016394:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24016396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016398:	2b00      	cmp	r3, #0
2401639a:	d004      	beq.n	240163a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
2401639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401639e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240163a2:	d01d      	beq.n	240163e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
240163a4:	e02e      	b.n	24016404 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240163a6:	4b09      	ldr	r3, [pc, #36]	; (240163cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240163a8:	681b      	ldr	r3, [r3, #0]
240163aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240163ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240163b2:	d107      	bne.n	240163c4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240163b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
240163b8:	4618      	mov	r0, r3
240163ba:	f000 fbe1 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240163be:	6abb      	ldr	r3, [r7, #40]	; 0x28
240163c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
240163c2:	e0fb      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
240163c4:	2300      	movs	r3, #0
240163c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240163c8:	e0f8      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240163ca:	bf00      	nop
240163cc:	58024400 	.word	0x58024400
240163d0:	03d09000 	.word	0x03d09000
240163d4:	003d0900 	.word	0x003d0900
240163d8:	016e3600 	.word	0x016e3600
240163dc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240163e0:	4b79      	ldr	r3, [pc, #484]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240163e2:	681b      	ldr	r3, [r3, #0]
240163e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240163e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240163ec:	d107      	bne.n	240163fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240163ee:	f107 0318 	add.w	r3, r7, #24
240163f2:	4618      	mov	r0, r3
240163f4:	f000 f91c 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
240163f8:	6a3b      	ldr	r3, [r7, #32]
240163fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
240163fc:	e0de      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
240163fe:	2300      	movs	r3, #0
24016400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016402:	e0db      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24016404:	2300      	movs	r3, #0
24016406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016408:	e0d8      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2401640a:	687b      	ldr	r3, [r7, #4]
2401640c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24016410:	f040 8085 	bne.w	2401651e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
24016414:	4b6c      	ldr	r3, [pc, #432]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24016418:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2401641c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2401641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24016424:	d06b      	beq.n	240164fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
24016426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2401642c:	d874      	bhi.n	24016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2401642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24016434:	d056      	beq.n	240164e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
24016436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401643c:	d86c      	bhi.n	24016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2401643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016444:	d03b      	beq.n	240164be <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
24016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2401644c:	d864      	bhi.n	24016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2401644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016454:	d021      	beq.n	2401649a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
24016456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401645c:	d85c      	bhi.n	24016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2401645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016460:	2b00      	cmp	r3, #0
24016462:	d004      	beq.n	2401646e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
24016464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2401646a:	d004      	beq.n	24016476 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
2401646c:	e054      	b.n	24016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
2401646e:	f000 f8c9 	bl	24016604 <HAL_RCCEx_GetD3PCLK1Freq>
24016472:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
24016474:	e0a2      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24016476:	4b54      	ldr	r3, [pc, #336]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016478:	681b      	ldr	r3, [r3, #0]
2401647a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2401647e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24016482:	d107      	bne.n	24016494 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24016484:	f107 0318 	add.w	r3, r7, #24
24016488:	4618      	mov	r0, r3
2401648a:	f000 f8d1 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2401648e:	69fb      	ldr	r3, [r7, #28]
24016490:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24016492:	e093      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24016494:	2300      	movs	r3, #0
24016496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016498:	e090      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401649a:	4b4b      	ldr	r3, [pc, #300]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
2401649c:	681b      	ldr	r3, [r3, #0]
2401649e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240164a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240164a6:	d107      	bne.n	240164b8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240164a8:	f107 030c 	add.w	r3, r7, #12
240164ac:	4618      	mov	r0, r3
240164ae:	f000 fa13 	bl	240168d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
240164b2:	693b      	ldr	r3, [r7, #16]
240164b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
240164b6:	e081      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
240164b8:	2300      	movs	r3, #0
240164ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240164bc:	e07e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240164be:	4b42      	ldr	r3, [pc, #264]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240164c0:	681b      	ldr	r3, [r3, #0]
240164c2:	f003 0304 	and.w	r3, r3, #4
240164c6:	2b04      	cmp	r3, #4
240164c8:	d109      	bne.n	240164de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240164ca:	4b3f      	ldr	r3, [pc, #252]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240164cc:	681b      	ldr	r3, [r3, #0]
240164ce:	08db      	lsrs	r3, r3, #3
240164d0:	f003 0303 	and.w	r3, r3, #3
240164d4:	4a3d      	ldr	r2, [pc, #244]	; (240165cc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
240164d6:	fa22 f303 	lsr.w	r3, r2, r3
240164da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
240164dc:	e06e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
240164de:	2300      	movs	r3, #0
240164e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240164e2:	e06b      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240164e4:	4b38      	ldr	r3, [pc, #224]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240164e6:	681b      	ldr	r3, [r3, #0]
240164e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
240164ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240164f0:	d102      	bne.n	240164f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
240164f2:	4b37      	ldr	r3, [pc, #220]	; (240165d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
240164f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240164f6:	e061      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240164f8:	2300      	movs	r3, #0
240164fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240164fc:	e05e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240164fe:	4b32      	ldr	r3, [pc, #200]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016500:	681b      	ldr	r3, [r3, #0]
24016502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24016506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401650a:	d102      	bne.n	24016512 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
2401650c:	4b31      	ldr	r3, [pc, #196]	; (240165d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
2401650e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24016510:	e054      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24016512:	2300      	movs	r3, #0
24016514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016516:	e051      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
24016518:	2300      	movs	r3, #0
2401651a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401651c:	e04e      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2401651e:	687b      	ldr	r3, [r7, #4]
24016520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24016524:	d148      	bne.n	240165b8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
24016526:	4b28      	ldr	r3, [pc, #160]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401652a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2401652e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24016530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24016536:	d02a      	beq.n	2401658e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
24016538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401653a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401653e:	d838      	bhi.n	240165b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
24016540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016542:	2b00      	cmp	r3, #0
24016544:	d004      	beq.n	24016550 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
24016546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24016548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2401654c:	d00d      	beq.n	2401656a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
2401654e:	e030      	b.n	240165b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24016550:	4b1d      	ldr	r3, [pc, #116]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016552:	681b      	ldr	r3, [r3, #0]
24016554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24016558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401655c:	d102      	bne.n	24016564 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
2401655e:	4b1d      	ldr	r3, [pc, #116]	; (240165d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24016560:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24016562:	e02b      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24016564:	2300      	movs	r3, #0
24016566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24016568:	e028      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401656a:	4b17      	ldr	r3, [pc, #92]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
2401656c:	681b      	ldr	r3, [r3, #0]
2401656e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24016572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24016576:	d107      	bne.n	24016588 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24016578:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401657c:	4618      	mov	r0, r3
2401657e:	f000 faff 	bl	24016b80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24016582:	6abb      	ldr	r3, [r7, #40]	; 0x28
24016584:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24016586:	e019      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24016588:	2300      	movs	r3, #0
2401658a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401658c:	e016      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401658e:	4b0e      	ldr	r3, [pc, #56]	; (240165c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24016590:	681b      	ldr	r3, [r3, #0]
24016592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2401659a:	d107      	bne.n	240165ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401659c:	f107 0318 	add.w	r3, r7, #24
240165a0:	4618      	mov	r0, r3
240165a2:	f000 f845 	bl	24016630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
240165a6:	69fb      	ldr	r3, [r7, #28]
240165a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
240165aa:	e007      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
240165ac:	2300      	movs	r3, #0
240165ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240165b0:	e004      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
240165b2:	2300      	movs	r3, #0
240165b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240165b6:	e001      	b.n	240165bc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
240165b8:	2300      	movs	r3, #0
240165ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
240165bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
240165be:	4618      	mov	r0, r3
240165c0:	3740      	adds	r7, #64	; 0x40
240165c2:	46bd      	mov	sp, r7
240165c4:	bd80      	pop	{r7, pc}
240165c6:	bf00      	nop
240165c8:	58024400 	.word	0x58024400
240165cc:	03d09000 	.word	0x03d09000
240165d0:	003d0900 	.word	0x003d0900
240165d4:	016e3600 	.word	0x016e3600

240165d8 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
240165d8:	b580      	push	{r7, lr}
240165da:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE)>> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
240165dc:	f7fe f8d0 	bl	24014780 <HAL_RCC_GetHCLKFreq>
240165e0:	4602      	mov	r2, r0
240165e2:	4b06      	ldr	r3, [pc, #24]	; (240165fc <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
240165e4:	699b      	ldr	r3, [r3, #24]
240165e6:	091b      	lsrs	r3, r3, #4
240165e8:	f003 0307 	and.w	r3, r3, #7
240165ec:	4904      	ldr	r1, [pc, #16]	; (24016600 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
240165ee:	5ccb      	ldrb	r3, [r1, r3]
240165f0:	f003 031f 	and.w	r3, r3, #31
240165f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
/* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE)>> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
240165f8:	4618      	mov	r0, r3
240165fa:	bd80      	pop	{r7, pc}
240165fc:	58024400 	.word	0x58024400
24016600:	24017764 	.word	0x24017764

24016604 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24016604:	b580      	push	{r7, lr}
24016606:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24016608:	f7fe f8ba 	bl	24014780 <HAL_RCC_GetHCLKFreq>
2401660c:	4602      	mov	r2, r0
2401660e:	4b06      	ldr	r3, [pc, #24]	; (24016628 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
24016610:	6a1b      	ldr	r3, [r3, #32]
24016612:	091b      	lsrs	r3, r3, #4
24016614:	f003 0307 	and.w	r3, r3, #7
24016618:	4904      	ldr	r1, [pc, #16]	; (2401662c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
2401661a:	5ccb      	ldrb	r3, [r1, r3]
2401661c:	f003 031f 	and.w	r3, r3, #31
24016620:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
24016624:	4618      	mov	r0, r3
24016626:	bd80      	pop	{r7, pc}
24016628:	58024400 	.word	0x58024400
2401662c:	24017764 	.word	0x24017764

24016630 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
24016630:	b480      	push	{r7}
24016632:	b089      	sub	sp, #36	; 0x24
24016634:	af00      	add	r7, sp, #0
24016636:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24016638:	4ba1      	ldr	r3, [pc, #644]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401663c:	f003 0303 	and.w	r3, r3, #3
24016640:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
24016642:	4b9f      	ldr	r3, [pc, #636]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016646:	0b1b      	lsrs	r3, r3, #12
24016648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401664c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2401664e:	4b9c      	ldr	r3, [pc, #624]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016652:	091b      	lsrs	r3, r3, #4
24016654:	f003 0301 	and.w	r3, r3, #1
24016658:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
2401665a:	4b99      	ldr	r3, [pc, #612]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401665e:	08db      	lsrs	r3, r3, #3
24016660:	f3c3 030c 	ubfx	r3, r3, #0, #13
24016664:	693a      	ldr	r2, [r7, #16]
24016666:	fb02 f303 	mul.w	r3, r2, r3
2401666a:	ee07 3a90 	vmov	s15, r3
2401666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016672:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
24016676:	697b      	ldr	r3, [r7, #20]
24016678:	2b00      	cmp	r3, #0
2401667a:	f000 8111 	beq.w	240168a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2401667e:	69bb      	ldr	r3, [r7, #24]
24016680:	2b02      	cmp	r3, #2
24016682:	f000 8083 	beq.w	2401678c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
24016686:	69bb      	ldr	r3, [r7, #24]
24016688:	2b02      	cmp	r3, #2
2401668a:	f200 80a1 	bhi.w	240167d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2401668e:	69bb      	ldr	r3, [r7, #24]
24016690:	2b00      	cmp	r3, #0
24016692:	d003      	beq.n	2401669c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
24016694:	69bb      	ldr	r3, [r7, #24]
24016696:	2b01      	cmp	r3, #1
24016698:	d056      	beq.n	24016748 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2401669a:	e099      	b.n	240167d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2401669c:	4b88      	ldr	r3, [pc, #544]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401669e:	681b      	ldr	r3, [r3, #0]
240166a0:	f003 0320 	and.w	r3, r3, #32
240166a4:	2b00      	cmp	r3, #0
240166a6:	d02d      	beq.n	24016704 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240166a8:	4b85      	ldr	r3, [pc, #532]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240166aa:	681b      	ldr	r3, [r3, #0]
240166ac:	08db      	lsrs	r3, r3, #3
240166ae:	f003 0303 	and.w	r3, r3, #3
240166b2:	4a84      	ldr	r2, [pc, #528]	; (240168c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
240166b4:	fa22 f303 	lsr.w	r3, r2, r3
240166b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
240166ba:	68bb      	ldr	r3, [r7, #8]
240166bc:	ee07 3a90 	vmov	s15, r3
240166c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240166c4:	697b      	ldr	r3, [r7, #20]
240166c6:	ee07 3a90 	vmov	s15, r3
240166ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
240166ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240166d2:	4b7b      	ldr	r3, [pc, #492]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240166d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240166d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240166da:	ee07 3a90 	vmov	s15, r3
240166de:	eef8 6a67 	vcvt.f32.u32	s13, s15
240166e2:	ed97 6a03 	vldr	s12, [r7, #12]
240166e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 240168c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240166ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
240166ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
240166f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240166f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240166fa:	ee67 7a27 	vmul.f32	s15, s14, s15
240166fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
24016702:	e087      	b.n	24016814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24016704:	697b      	ldr	r3, [r7, #20]
24016706:	ee07 3a90 	vmov	s15, r3
2401670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401670e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 240168cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
24016712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016716:	4b6a      	ldr	r3, [pc, #424]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401671a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401671e:	ee07 3a90 	vmov	s15, r3
24016722:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016726:	ed97 6a03 	vldr	s12, [r7, #12]
2401672a:	eddf 5a67 	vldr	s11, [pc, #412]	; 240168c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2401672e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016732:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401673a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401673e:	ee67 7a27 	vmul.f32	s15, s14, s15
24016742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016746:	e065      	b.n	24016814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24016748:	697b      	ldr	r3, [r7, #20]
2401674a:	ee07 3a90 	vmov	s15, r3
2401674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016752:	eddf 6a5f 	vldr	s13, [pc, #380]	; 240168d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24016756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401675a:	4b59      	ldr	r3, [pc, #356]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401675e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016762:	ee07 3a90 	vmov	s15, r3
24016766:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401676a:	ed97 6a03 	vldr	s12, [r7, #12]
2401676e:	eddf 5a56 	vldr	s11, [pc, #344]	; 240168c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24016772:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016776:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401677a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401677e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016782:	ee67 7a27 	vmul.f32	s15, s14, s15
24016786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401678a:	e043      	b.n	24016814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2401678c:	697b      	ldr	r3, [r7, #20]
2401678e:	ee07 3a90 	vmov	s15, r3
24016792:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016796:	eddf 6a4f 	vldr	s13, [pc, #316]	; 240168d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2401679a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401679e:	4b48      	ldr	r3, [pc, #288]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240167a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240167a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240167a6:	ee07 3a90 	vmov	s15, r3
240167aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
240167ae:	ed97 6a03 	vldr	s12, [r7, #12]
240167b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 240168c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240167b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
240167ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
240167be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240167c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240167c6:	ee67 7a27 	vmul.f32	s15, s14, s15
240167ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240167ce:	e021      	b.n	24016814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
240167d0:	697b      	ldr	r3, [r7, #20]
240167d2:	ee07 3a90 	vmov	s15, r3
240167d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240167da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 240168d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
240167de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240167e2:	4b37      	ldr	r3, [pc, #220]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240167e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240167e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240167ea:	ee07 3a90 	vmov	s15, r3
240167ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
240167f2:	ed97 6a03 	vldr	s12, [r7, #12]
240167f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 240168c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240167fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
240167fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016806:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401680a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401680e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016812:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
24016814:	4b2a      	ldr	r3, [pc, #168]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016818:	0a5b      	lsrs	r3, r3, #9
2401681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401681e:	ee07 3a90 	vmov	s15, r3
24016822:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401682a:	ee37 7a87 	vadd.f32	s14, s15, s14
2401682e:	edd7 6a07 	vldr	s13, [r7, #28]
24016832:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401683a:	ee17 2a90 	vmov	r2, s15
2401683e:	687b      	ldr	r3, [r7, #4]
24016840:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
24016842:	4b1f      	ldr	r3, [pc, #124]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016846:	0c1b      	lsrs	r3, r3, #16
24016848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401684c:	ee07 3a90 	vmov	s15, r3
24016850:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016858:	ee37 7a87 	vadd.f32	s14, s15, s14
2401685c:	edd7 6a07 	vldr	s13, [r7, #28]
24016860:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016868:	ee17 2a90 	vmov	r2, s15
2401686c:	687b      	ldr	r3, [r7, #4]
2401686e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
24016870:	4b13      	ldr	r3, [pc, #76]	; (240168c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016874:	0e1b      	lsrs	r3, r3, #24
24016876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401687a:	ee07 3a90 	vmov	s15, r3
2401687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016886:	ee37 7a87 	vadd.f32	s14, s15, s14
2401688a:	edd7 6a07 	vldr	s13, [r7, #28]
2401688e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016896:	ee17 2a90 	vmov	r2, s15
2401689a:	687b      	ldr	r3, [r7, #4]
2401689c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2401689e:	e008      	b.n	240168b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
240168a0:	687b      	ldr	r3, [r7, #4]
240168a2:	2200      	movs	r2, #0
240168a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
240168a6:	687b      	ldr	r3, [r7, #4]
240168a8:	2200      	movs	r2, #0
240168aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
240168ac:	687b      	ldr	r3, [r7, #4]
240168ae:	2200      	movs	r2, #0
240168b0:	609a      	str	r2, [r3, #8]
}
240168b2:	bf00      	nop
240168b4:	3724      	adds	r7, #36	; 0x24
240168b6:	46bd      	mov	sp, r7
240168b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240168bc:	4770      	bx	lr
240168be:	bf00      	nop
240168c0:	58024400 	.word	0x58024400
240168c4:	03d09000 	.word	0x03d09000
240168c8:	46000000 	.word	0x46000000
240168cc:	4c742400 	.word	0x4c742400
240168d0:	4a742400 	.word	0x4a742400
240168d4:	4bb71b00 	.word	0x4bb71b00

240168d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
240168d8:	b480      	push	{r7}
240168da:	b089      	sub	sp, #36	; 0x24
240168dc:	af00      	add	r7, sp, #0
240168de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240168e0:	4ba1      	ldr	r3, [pc, #644]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240168e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240168e4:	f003 0303 	and.w	r3, r3, #3
240168e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
240168ea:	4b9f      	ldr	r3, [pc, #636]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240168ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240168ee:	0d1b      	lsrs	r3, r3, #20
240168f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240168f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
240168f6:	4b9c      	ldr	r3, [pc, #624]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240168f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240168fa:	0a1b      	lsrs	r3, r3, #8
240168fc:	f003 0301 	and.w	r3, r3, #1
24016900:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
24016902:	4b99      	ldr	r3, [pc, #612]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24016906:	08db      	lsrs	r3, r3, #3
24016908:	f3c3 030c 	ubfx	r3, r3, #0, #13
2401690c:	693a      	ldr	r2, [r7, #16]
2401690e:	fb02 f303 	mul.w	r3, r2, r3
24016912:	ee07 3a90 	vmov	s15, r3
24016916:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401691a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2401691e:	697b      	ldr	r3, [r7, #20]
24016920:	2b00      	cmp	r3, #0
24016922:	f000 8111 	beq.w	24016b48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
24016926:	69bb      	ldr	r3, [r7, #24]
24016928:	2b02      	cmp	r3, #2
2401692a:	f000 8083 	beq.w	24016a34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2401692e:	69bb      	ldr	r3, [r7, #24]
24016930:	2b02      	cmp	r3, #2
24016932:	f200 80a1 	bhi.w	24016a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
24016936:	69bb      	ldr	r3, [r7, #24]
24016938:	2b00      	cmp	r3, #0
2401693a:	d003      	beq.n	24016944 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
2401693c:	69bb      	ldr	r3, [r7, #24]
2401693e:	2b01      	cmp	r3, #1
24016940:	d056      	beq.n	240169f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
24016942:	e099      	b.n	24016a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24016944:	4b88      	ldr	r3, [pc, #544]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016946:	681b      	ldr	r3, [r3, #0]
24016948:	f003 0320 	and.w	r3, r3, #32
2401694c:	2b00      	cmp	r3, #0
2401694e:	d02d      	beq.n	240169ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24016950:	4b85      	ldr	r3, [pc, #532]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016952:	681b      	ldr	r3, [r3, #0]
24016954:	08db      	lsrs	r3, r3, #3
24016956:	f003 0303 	and.w	r3, r3, #3
2401695a:	4a84      	ldr	r2, [pc, #528]	; (24016b6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2401695c:	fa22 f303 	lsr.w	r3, r2, r3
24016960:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016962:	68bb      	ldr	r3, [r7, #8]
24016964:	ee07 3a90 	vmov	s15, r3
24016968:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401696c:	697b      	ldr	r3, [r7, #20]
2401696e:	ee07 3a90 	vmov	s15, r3
24016972:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401697a:	4b7b      	ldr	r3, [pc, #492]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016982:	ee07 3a90 	vmov	s15, r3
24016986:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401698a:	ed97 6a03 	vldr	s12, [r7, #12]
2401698e:	eddf 5a78 	vldr	s11, [pc, #480]	; 24016b70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016992:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016996:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
240169a2:	ee67 7a27 	vmul.f32	s15, s14, s15
240169a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
240169aa:	e087      	b.n	24016abc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240169ac:	697b      	ldr	r3, [r7, #20]
240169ae:	ee07 3a90 	vmov	s15, r3
240169b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240169b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 24016b74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
240169ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240169be:	4b6a      	ldr	r3, [pc, #424]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240169c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240169c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240169c6:	ee07 3a90 	vmov	s15, r3
240169ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
240169ce:	ed97 6a03 	vldr	s12, [r7, #12]
240169d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 24016b70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240169d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
240169da:	ee76 7aa7 	vadd.f32	s15, s13, s15
240169de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240169e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240169e6:	ee67 7a27 	vmul.f32	s15, s14, s15
240169ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240169ee:	e065      	b.n	24016abc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240169f0:	697b      	ldr	r3, [r7, #20]
240169f2:	ee07 3a90 	vmov	s15, r3
240169f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240169fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 24016b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
240169fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016a02:	4b59      	ldr	r3, [pc, #356]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016a0a:	ee07 3a90 	vmov	s15, r3
24016a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016a12:	ed97 6a03 	vldr	s12, [r7, #12]
24016a16:	eddf 5a56 	vldr	s11, [pc, #344]	; 24016b70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
24016a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016a32:	e043      	b.n	24016abc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016a34:	697b      	ldr	r3, [r7, #20]
24016a36:	ee07 3a90 	vmov	s15, r3
24016a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016a3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 24016b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
24016a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016a46:	4b48      	ldr	r3, [pc, #288]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016a4e:	ee07 3a90 	vmov	s15, r3
24016a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016a56:	ed97 6a03 	vldr	s12, [r7, #12]
24016a5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 24016b70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
24016a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016a76:	e021      	b.n	24016abc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016a78:	697b      	ldr	r3, [r7, #20]
24016a7a:	ee07 3a90 	vmov	s15, r3
24016a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016a82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24016b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
24016a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016a8a:	4b37      	ldr	r3, [pc, #220]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016a92:	ee07 3a90 	vmov	s15, r3
24016a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016a9a:	ed97 6a03 	vldr	s12, [r7, #12]
24016a9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 24016b70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
24016ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016aba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
24016abc:	4b2a      	ldr	r3, [pc, #168]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016ac0:	0a5b      	lsrs	r3, r3, #9
24016ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016ac6:	ee07 3a90 	vmov	s15, r3
24016aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
24016ad6:	edd7 6a07 	vldr	s13, [r7, #28]
24016ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016ae2:	ee17 2a90 	vmov	r2, s15
24016ae6:	687b      	ldr	r3, [r7, #4]
24016ae8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
24016aea:	4b1f      	ldr	r3, [pc, #124]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016aee:	0c1b      	lsrs	r3, r3, #16
24016af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016af4:	ee07 3a90 	vmov	s15, r3
24016af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016b00:	ee37 7a87 	vadd.f32	s14, s15, s14
24016b04:	edd7 6a07 	vldr	s13, [r7, #28]
24016b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016b10:	ee17 2a90 	vmov	r2, s15
24016b14:	687b      	ldr	r3, [r7, #4]
24016b16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
24016b18:	4b13      	ldr	r3, [pc, #76]	; (24016b68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016b1c:	0e1b      	lsrs	r3, r3, #24
24016b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016b22:	ee07 3a90 	vmov	s15, r3
24016b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
24016b32:	edd7 6a07 	vldr	s13, [r7, #28]
24016b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016b3e:	ee17 2a90 	vmov	r2, s15
24016b42:	687b      	ldr	r3, [r7, #4]
24016b44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
24016b46:	e008      	b.n	24016b5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
24016b48:	687b      	ldr	r3, [r7, #4]
24016b4a:	2200      	movs	r2, #0
24016b4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24016b4e:	687b      	ldr	r3, [r7, #4]
24016b50:	2200      	movs	r2, #0
24016b52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
24016b54:	687b      	ldr	r3, [r7, #4]
24016b56:	2200      	movs	r2, #0
24016b58:	609a      	str	r2, [r3, #8]
}
24016b5a:	bf00      	nop
24016b5c:	3724      	adds	r7, #36	; 0x24
24016b5e:	46bd      	mov	sp, r7
24016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
24016b64:	4770      	bx	lr
24016b66:	bf00      	nop
24016b68:	58024400 	.word	0x58024400
24016b6c:	03d09000 	.word	0x03d09000
24016b70:	46000000 	.word	0x46000000
24016b74:	4c742400 	.word	0x4c742400
24016b78:	4a742400 	.word	0x4a742400
24016b7c:	4bb71b00 	.word	0x4bb71b00

24016b80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
24016b80:	b480      	push	{r7}
24016b82:	b089      	sub	sp, #36	; 0x24
24016b84:	af00      	add	r7, sp, #0
24016b86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24016b88:	4ba0      	ldr	r3, [pc, #640]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016b8c:	f003 0303 	and.w	r3, r3, #3
24016b90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
24016b92:	4b9e      	ldr	r3, [pc, #632]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016b96:	091b      	lsrs	r3, r3, #4
24016b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016b9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24016b9e:	4b9b      	ldr	r3, [pc, #620]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016ba2:	f003 0301 	and.w	r3, r3, #1
24016ba6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24016ba8:	4b98      	ldr	r3, [pc, #608]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24016bac:	08db      	lsrs	r3, r3, #3
24016bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
24016bb2:	693a      	ldr	r2, [r7, #16]
24016bb4:	fb02 f303 	mul.w	r3, r2, r3
24016bb8:	ee07 3a90 	vmov	s15, r3
24016bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016bc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
24016bc4:	697b      	ldr	r3, [r7, #20]
24016bc6:	2b00      	cmp	r3, #0
24016bc8:	f000 8111 	beq.w	24016dee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
24016bcc:	69bb      	ldr	r3, [r7, #24]
24016bce:	2b02      	cmp	r3, #2
24016bd0:	f000 8083 	beq.w	24016cda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
24016bd4:	69bb      	ldr	r3, [r7, #24]
24016bd6:	2b02      	cmp	r3, #2
24016bd8:	f200 80a1 	bhi.w	24016d1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
24016bdc:	69bb      	ldr	r3, [r7, #24]
24016bde:	2b00      	cmp	r3, #0
24016be0:	d003      	beq.n	24016bea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
24016be2:	69bb      	ldr	r3, [r7, #24]
24016be4:	2b01      	cmp	r3, #1
24016be6:	d056      	beq.n	24016c96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
24016be8:	e099      	b.n	24016d1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24016bea:	4b88      	ldr	r3, [pc, #544]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016bec:	681b      	ldr	r3, [r3, #0]
24016bee:	f003 0320 	and.w	r3, r3, #32
24016bf2:	2b00      	cmp	r3, #0
24016bf4:	d02d      	beq.n	24016c52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24016bf6:	4b85      	ldr	r3, [pc, #532]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016bf8:	681b      	ldr	r3, [r3, #0]
24016bfa:	08db      	lsrs	r3, r3, #3
24016bfc:	f003 0303 	and.w	r3, r3, #3
24016c00:	4a83      	ldr	r2, [pc, #524]	; (24016e10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
24016c02:	fa22 f303 	lsr.w	r3, r2, r3
24016c06:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016c08:	68bb      	ldr	r3, [r7, #8]
24016c0a:	ee07 3a90 	vmov	s15, r3
24016c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016c12:	697b      	ldr	r3, [r7, #20]
24016c14:	ee07 3a90 	vmov	s15, r3
24016c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016c20:	4b7a      	ldr	r3, [pc, #488]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016c28:	ee07 3a90 	vmov	s15, r3
24016c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016c30:	ed97 6a03 	vldr	s12, [r7, #12]
24016c34:	eddf 5a77 	vldr	s11, [pc, #476]	; 24016e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016c48:	ee67 7a27 	vmul.f32	s15, s14, s15
24016c4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
24016c50:	e087      	b.n	24016d62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016c52:	697b      	ldr	r3, [r7, #20]
24016c54:	ee07 3a90 	vmov	s15, r3
24016c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016c5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 24016e18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
24016c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016c64:	4b69      	ldr	r3, [pc, #420]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016c6c:	ee07 3a90 	vmov	s15, r3
24016c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016c74:	ed97 6a03 	vldr	s12, [r7, #12]
24016c78:	eddf 5a66 	vldr	s11, [pc, #408]	; 24016e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
24016c90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016c94:	e065      	b.n	24016d62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016c96:	697b      	ldr	r3, [r7, #20]
24016c98:	ee07 3a90 	vmov	s15, r3
24016c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016ca0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24016e1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
24016ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016ca8:	4b58      	ldr	r3, [pc, #352]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016cb0:	ee07 3a90 	vmov	s15, r3
24016cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016cb8:	ed97 6a03 	vldr	s12, [r7, #12]
24016cbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 24016e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
24016cd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016cd8:	e043      	b.n	24016d62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016cda:	697b      	ldr	r3, [r7, #20]
24016cdc:	ee07 3a90 	vmov	s15, r3
24016ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016ce4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24016e20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
24016ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016cec:	4b47      	ldr	r3, [pc, #284]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016cf4:	ee07 3a90 	vmov	s15, r3
24016cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016cfc:	ed97 6a03 	vldr	s12, [r7, #12]
24016d00:	eddf 5a44 	vldr	s11, [pc, #272]	; 24016e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016d14:	ee67 7a27 	vmul.f32	s15, s14, s15
24016d18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016d1c:	e021      	b.n	24016d62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016d1e:	697b      	ldr	r3, [r7, #20]
24016d20:	ee07 3a90 	vmov	s15, r3
24016d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016d28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 24016e18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
24016d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016d30:	4b36      	ldr	r3, [pc, #216]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016d38:	ee07 3a90 	vmov	s15, r3
24016d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016d40:	ed97 6a03 	vldr	s12, [r7, #12]
24016d44:	eddf 5a33 	vldr	s11, [pc, #204]	; 24016e14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016d58:	ee67 7a27 	vmul.f32	s15, s14, s15
24016d5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016d60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
24016d62:	4b2a      	ldr	r3, [pc, #168]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016d66:	0a5b      	lsrs	r3, r3, #9
24016d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016d6c:	ee07 3a90 	vmov	s15, r3
24016d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016d78:	ee37 7a87 	vadd.f32	s14, s15, s14
24016d7c:	edd7 6a07 	vldr	s13, [r7, #28]
24016d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016d88:	ee17 2a90 	vmov	r2, s15
24016d8c:	687b      	ldr	r3, [r7, #4]
24016d8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
24016d90:	4b1e      	ldr	r3, [pc, #120]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016d94:	0c1b      	lsrs	r3, r3, #16
24016d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016d9a:	ee07 3a90 	vmov	s15, r3
24016d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016da6:	ee37 7a87 	vadd.f32	s14, s15, s14
24016daa:	edd7 6a07 	vldr	s13, [r7, #28]
24016dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016db6:	ee17 2a90 	vmov	r2, s15
24016dba:	687b      	ldr	r3, [r7, #4]
24016dbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
24016dbe:	4b13      	ldr	r3, [pc, #76]	; (24016e0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016dc2:	0e1b      	lsrs	r3, r3, #24
24016dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016dc8:	ee07 3a90 	vmov	s15, r3
24016dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
24016dd8:	edd7 6a07 	vldr	s13, [r7, #28]
24016ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016de4:	ee17 2a90 	vmov	r2, s15
24016de8:	687b      	ldr	r3, [r7, #4]
24016dea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
24016dec:	e008      	b.n	24016e00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
24016dee:	687b      	ldr	r3, [r7, #4]
24016df0:	2200      	movs	r2, #0
24016df2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24016df4:	687b      	ldr	r3, [r7, #4]
24016df6:	2200      	movs	r2, #0
24016df8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24016dfa:	687b      	ldr	r3, [r7, #4]
24016dfc:	2200      	movs	r2, #0
24016dfe:	609a      	str	r2, [r3, #8]
}
24016e00:	bf00      	nop
24016e02:	3724      	adds	r7, #36	; 0x24
24016e04:	46bd      	mov	sp, r7
24016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
24016e0a:	4770      	bx	lr
24016e0c:	58024400 	.word	0x58024400
24016e10:	03d09000 	.word	0x03d09000
24016e14:	46000000 	.word	0x46000000
24016e18:	4c742400 	.word	0x4c742400
24016e1c:	4a742400 	.word	0x4a742400
24016e20:	4bb71b00 	.word	0x4bb71b00

24016e24 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
24016e24:	b580      	push	{r7, lr}
24016e26:	b082      	sub	sp, #8
24016e28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24016e2a:	f7fd fb2f 	bl	2401448c <HAL_RCC_GetSysClockFreq>
24016e2e:	4602      	mov	r2, r0
24016e30:	4b10      	ldr	r3, [pc, #64]	; (24016e74 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
24016e32:	699b      	ldr	r3, [r3, #24]
24016e34:	0a1b      	lsrs	r3, r3, #8
24016e36:	f003 030f 	and.w	r3, r3, #15
24016e3a:	490f      	ldr	r1, [pc, #60]	; (24016e78 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24016e3c:	5ccb      	ldrb	r3, [r1, r3]
24016e3e:	f003 031f 	and.w	r3, r3, #31
24016e42:	fa22 f303 	lsr.w	r3, r2, r3
24016e46:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24016e48:	4b0a      	ldr	r3, [pc, #40]	; (24016e74 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
24016e4a:	699b      	ldr	r3, [r3, #24]
24016e4c:	f003 030f 	and.w	r3, r3, #15
24016e50:	4a09      	ldr	r2, [pc, #36]	; (24016e78 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24016e52:	5cd3      	ldrb	r3, [r2, r3]
24016e54:	f003 031f 	and.w	r3, r3, #31
24016e58:	687a      	ldr	r2, [r7, #4]
24016e5a:	fa22 f303 	lsr.w	r3, r2, r3
24016e5e:	4a07      	ldr	r2, [pc, #28]	; (24016e7c <HAL_RCCEx_GetD1SysClockFreq+0x58>)
24016e60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24016e62:	4a07      	ldr	r2, [pc, #28]	; (24016e80 <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
24016e64:	687b      	ldr	r3, [r7, #4]
24016e66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
24016e68:	687b      	ldr	r3, [r7, #4]
}
24016e6a:	4618      	mov	r0, r3
24016e6c:	3708      	adds	r7, #8
24016e6e:	46bd      	mov	sp, r7
24016e70:	bd80      	pop	{r7, pc}
24016e72:	bf00      	nop
24016e74:	58024400 	.word	0x58024400
24016e78:	24017764 	.word	0x24017764
24016e7c:	240004cc 	.word	0x240004cc
24016e80:	240004c8 	.word	0x240004c8

24016e84 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
24016e84:	b480      	push	{r7}
24016e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016e88:	4b05      	ldr	r3, [pc, #20]	; (24016ea0 <HAL_RCCEx_EnableLSECSS+0x1c>)
24016e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016e8c:	4a04      	ldr	r2, [pc, #16]	; (24016ea0 <HAL_RCCEx_EnableLSECSS+0x1c>)
24016e8e:	f043 0320 	orr.w	r3, r3, #32
24016e92:	6713      	str	r3, [r2, #112]	; 0x70
}
24016e94:	bf00      	nop
24016e96:	46bd      	mov	sp, r7
24016e98:	f85d 7b04 	ldr.w	r7, [sp], #4
24016e9c:	4770      	bx	lr
24016e9e:	bf00      	nop
24016ea0:	58024400 	.word	0x58024400

24016ea4 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
24016ea4:	b480      	push	{r7}
24016ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016ea8:	4b08      	ldr	r3, [pc, #32]	; (24016ecc <HAL_RCCEx_DisableLSECSS+0x28>)
24016eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016eac:	4a07      	ldr	r2, [pc, #28]	; (24016ecc <HAL_RCCEx_DisableLSECSS+0x28>)
24016eae:	f023 0320 	bic.w	r3, r3, #32
24016eb2:	6713      	str	r3, [r2, #112]	; 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
24016eb4:	4b05      	ldr	r3, [pc, #20]	; (24016ecc <HAL_RCCEx_DisableLSECSS+0x28>)
24016eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016eb8:	4a04      	ldr	r2, [pc, #16]	; (24016ecc <HAL_RCCEx_DisableLSECSS+0x28>)
24016eba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24016ebe:	6613      	str	r3, [r2, #96]	; 0x60
}
24016ec0:	bf00      	nop
24016ec2:	46bd      	mov	sp, r7
24016ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
24016ec8:	4770      	bx	lr
24016eca:	bf00      	nop
24016ecc:	58024400 	.word	0x58024400

24016ed0 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
24016ed0:	b480      	push	{r7}
24016ed2:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016ed4:	4b11      	ldr	r3, [pc, #68]	; (24016f1c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016ed8:	4a10      	ldr	r2, [pc, #64]	; (24016f1c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016eda:	f043 0320 	orr.w	r3, r3, #32
24016ede:	6713      	str	r3, [r2, #112]	; 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
24016ee0:	4b0e      	ldr	r3, [pc, #56]	; (24016f1c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016ee4:	4a0d      	ldr	r2, [pc, #52]	; (24016f1c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24016eea:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
24016eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24016ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24016ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24016ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24016efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
24016f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24016f04:	681b      	ldr	r3, [r3, #0]
24016f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24016f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24016f0e:	6013      	str	r3, [r2, #0]
}
24016f10:	bf00      	nop
24016f12:	46bd      	mov	sp, r7
24016f14:	f85d 7b04 	ldr.w	r7, [sp], #4
24016f18:	4770      	bx	lr
24016f1a:	bf00      	nop
24016f1c:	58024400 	.word	0x58024400

24016f20 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24016f20:	b480      	push	{r7}
24016f22:	b083      	sub	sp, #12
24016f24:	af00      	add	r7, sp, #0
24016f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24016f28:	4b06      	ldr	r3, [pc, #24]	; (24016f44 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24016f2a:	691b      	ldr	r3, [r3, #16]
24016f2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
24016f30:	4904      	ldr	r1, [pc, #16]	; (24016f44 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24016f32:	687b      	ldr	r3, [r7, #4]
24016f34:	4313      	orrs	r3, r2
24016f36:	610b      	str	r3, [r1, #16]
}
24016f38:	bf00      	nop
24016f3a:	370c      	adds	r7, #12
24016f3c:	46bd      	mov	sp, r7
24016f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24016f42:	4770      	bx	lr
24016f44:	58024400 	.word	0x58024400

24016f48 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24016f48:	b480      	push	{r7}
24016f4a:	b083      	sub	sp, #12
24016f4c:	af00      	add	r7, sp, #0
24016f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24016f50:	4b06      	ldr	r3, [pc, #24]	; (24016f6c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24016f52:	691b      	ldr	r3, [r3, #16]
24016f54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
24016f58:	4904      	ldr	r1, [pc, #16]	; (24016f6c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24016f5a:	687b      	ldr	r3, [r7, #4]
24016f5c:	4313      	orrs	r3, r2
24016f5e:	610b      	str	r3, [r1, #16]
}
24016f60:	bf00      	nop
24016f62:	370c      	adds	r7, #12
24016f64:	46bd      	mov	sp, r7
24016f66:	f85d 7b04 	ldr.w	r7, [sp], #4
24016f6a:	4770      	bx	lr
24016f6c:	58024400 	.word	0x58024400

24016f70 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
24016f70:	b480      	push	{r7}
24016f72:	b083      	sub	sp, #12
24016f74:	af00      	add	r7, sp, #0
24016f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
24016f78:	4b06      	ldr	r3, [pc, #24]	; (24016f94 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24016f7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
24016f7e:	4905      	ldr	r1, [pc, #20]	; (24016f94 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24016f80:	687b      	ldr	r3, [r7, #4]
24016f82:	4313      	orrs	r3, r2
24016f84:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
24016f88:	bf00      	nop
24016f8a:	370c      	adds	r7, #12
24016f8c:	46bd      	mov	sp, r7
24016f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24016f92:	4770      	bx	lr
24016f94:	58024400 	.word	0x58024400

24016f98 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
24016f98:	b580      	push	{r7, lr}
24016f9a:	b084      	sub	sp, #16
24016f9c:	af00      	add	r7, sp, #0
24016f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
24016fa0:	4b26      	ldr	r3, [pc, #152]	; (2401703c <HAL_RCCEx_CRSConfig+0xa4>)
24016fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016fa6:	4a25      	ldr	r2, [pc, #148]	; (2401703c <HAL_RCCEx_CRSConfig+0xa4>)
24016fa8:	f043 0302 	orr.w	r3, r3, #2
24016fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
24016fb0:	4b22      	ldr	r3, [pc, #136]	; (2401703c <HAL_RCCEx_CRSConfig+0xa4>)
24016fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016fb6:	4a21      	ldr	r2, [pc, #132]	; (2401703c <HAL_RCCEx_CRSConfig+0xa4>)
24016fb8:	f023 0302 	bic.w	r3, r3, #2
24016fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
24016fc0:	f7eb f9ca 	bl	24002358 <HAL_GetREVID>
24016fc4:	4603      	mov	r3, r0
24016fc6:	f241 0203 	movw	r2, #4099	; 0x1003
24016fca:	4293      	cmp	r3, r2
24016fcc:	d80b      	bhi.n	24016fe6 <HAL_RCCEx_CRSConfig+0x4e>
24016fce:	687b      	ldr	r3, [r7, #4]
24016fd0:	685b      	ldr	r3, [r3, #4]
24016fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016fd6:	d106      	bne.n	24016fe6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
24016fd8:	687b      	ldr	r3, [r7, #4]
24016fda:	681a      	ldr	r2, [r3, #0]
24016fdc:	687b      	ldr	r3, [r7, #4]
24016fde:	689b      	ldr	r3, [r3, #8]
24016fe0:	4313      	orrs	r3, r2
24016fe2:	60fb      	str	r3, [r7, #12]
24016fe4:	e008      	b.n	24016ff8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
24016fe6:	687b      	ldr	r3, [r7, #4]
24016fe8:	681a      	ldr	r2, [r3, #0]
24016fea:	687b      	ldr	r3, [r7, #4]
24016fec:	685b      	ldr	r3, [r3, #4]
24016fee:	431a      	orrs	r2, r3
24016ff0:	687b      	ldr	r3, [r7, #4]
24016ff2:	689b      	ldr	r3, [r3, #8]
24016ff4:	4313      	orrs	r3, r2
24016ff6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
24016ff8:	687b      	ldr	r3, [r7, #4]
24016ffa:	68db      	ldr	r3, [r3, #12]
24016ffc:	68fa      	ldr	r2, [r7, #12]
24016ffe:	4313      	orrs	r3, r2
24017000:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
24017002:	687b      	ldr	r3, [r7, #4]
24017004:	691b      	ldr	r3, [r3, #16]
24017006:	041b      	lsls	r3, r3, #16
24017008:	68fa      	ldr	r2, [r7, #12]
2401700a:	4313      	orrs	r3, r2
2401700c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
2401700e:	4a0c      	ldr	r2, [pc, #48]	; (24017040 <HAL_RCCEx_CRSConfig+0xa8>)
24017010:	68fb      	ldr	r3, [r7, #12]
24017012:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
24017014:	4b0a      	ldr	r3, [pc, #40]	; (24017040 <HAL_RCCEx_CRSConfig+0xa8>)
24017016:	681b      	ldr	r3, [r3, #0]
24017018:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2401701c:	687b      	ldr	r3, [r7, #4]
2401701e:	695b      	ldr	r3, [r3, #20]
24017020:	021b      	lsls	r3, r3, #8
24017022:	4907      	ldr	r1, [pc, #28]	; (24017040 <HAL_RCCEx_CRSConfig+0xa8>)
24017024:	4313      	orrs	r3, r2
24017026:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
24017028:	4b05      	ldr	r3, [pc, #20]	; (24017040 <HAL_RCCEx_CRSConfig+0xa8>)
2401702a:	681b      	ldr	r3, [r3, #0]
2401702c:	4a04      	ldr	r2, [pc, #16]	; (24017040 <HAL_RCCEx_CRSConfig+0xa8>)
2401702e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
24017032:	6013      	str	r3, [r2, #0]
}
24017034:	bf00      	nop
24017036:	3710      	adds	r7, #16
24017038:	46bd      	mov	sp, r7
2401703a:	bd80      	pop	{r7, pc}
2401703c:	58024400 	.word	0x58024400
24017040:	40008400 	.word	0x40008400

24017044 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
24017044:	b480      	push	{r7}
24017046:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
24017048:	4b05      	ldr	r3, [pc, #20]	; (24017060 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2401704a:	681b      	ldr	r3, [r3, #0]
2401704c:	4a04      	ldr	r2, [pc, #16]	; (24017060 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2401704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24017052:	6013      	str	r3, [r2, #0]
}
24017054:	bf00      	nop
24017056:	46bd      	mov	sp, r7
24017058:	f85d 7b04 	ldr.w	r7, [sp], #4
2401705c:	4770      	bx	lr
2401705e:	bf00      	nop
24017060:	40008400 	.word	0x40008400

24017064 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
24017064:	b480      	push	{r7}
24017066:	b083      	sub	sp, #12
24017068:	af00      	add	r7, sp, #0
2401706a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
2401706c:	4b0e      	ldr	r3, [pc, #56]	; (240170a8 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2401706e:	685b      	ldr	r3, [r3, #4]
24017070:	b29a      	uxth	r2, r3
24017072:	687b      	ldr	r3, [r7, #4]
24017074:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
24017076:	4b0c      	ldr	r3, [pc, #48]	; (240170a8 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24017078:	681b      	ldr	r3, [r3, #0]
2401707a:	0a1b      	lsrs	r3, r3, #8
2401707c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24017080:	687b      	ldr	r3, [r7, #4]
24017082:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
24017084:	4b08      	ldr	r3, [pc, #32]	; (240170a8 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24017086:	689b      	ldr	r3, [r3, #8]
24017088:	0c1b      	lsrs	r3, r3, #16
2401708a:	b29a      	uxth	r2, r3
2401708c:	687b      	ldr	r3, [r7, #4]
2401708e:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
24017090:	4b05      	ldr	r3, [pc, #20]	; (240170a8 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24017092:	689b      	ldr	r3, [r3, #8]
24017094:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
24017098:	687b      	ldr	r3, [r7, #4]
2401709a:	60da      	str	r2, [r3, #12]
}
2401709c:	bf00      	nop
2401709e:	370c      	adds	r7, #12
240170a0:	46bd      	mov	sp, r7
240170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240170a6:	4770      	bx	lr
240170a8:	40008400 	.word	0x40008400

240170ac <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
240170ac:	b580      	push	{r7, lr}
240170ae:	b084      	sub	sp, #16
240170b0:	af00      	add	r7, sp, #0
240170b2:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
240170b4:	2300      	movs	r3, #0
240170b6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
240170b8:	f7eb f8b4 	bl	24002224 <HAL_GetTick>
240170bc:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
240170be:	687b      	ldr	r3, [r7, #4]
240170c0:	f1b3 3fff 	cmp.w	r3, #4294967295
240170c4:	d00c      	beq.n	240170e0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240170c6:	f7eb f8ad 	bl	24002224 <HAL_GetTick>
240170ca:	4602      	mov	r2, r0
240170cc:	68bb      	ldr	r3, [r7, #8]
240170ce:	1ad3      	subs	r3, r2, r3
240170d0:	687a      	ldr	r2, [r7, #4]
240170d2:	429a      	cmp	r2, r3
240170d4:	d302      	bcc.n	240170dc <HAL_RCCEx_CRSWaitSynchronization+0x30>
240170d6:	687b      	ldr	r3, [r7, #4]
240170d8:	2b00      	cmp	r3, #0
240170da:	d101      	bne.n	240170e0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
240170dc:	2301      	movs	r3, #1
240170de:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
240170e0:	4b2a      	ldr	r3, [pc, #168]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240170e2:	689b      	ldr	r3, [r3, #8]
240170e4:	f003 0301 	and.w	r3, r3, #1
240170e8:	2b01      	cmp	r3, #1
240170ea:	d106      	bne.n	240170fa <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
240170ec:	68fb      	ldr	r3, [r7, #12]
240170ee:	f043 0302 	orr.w	r3, r3, #2
240170f2:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
240170f4:	4b25      	ldr	r3, [pc, #148]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240170f6:	2201      	movs	r2, #1
240170f8:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
240170fa:	4b24      	ldr	r3, [pc, #144]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240170fc:	689b      	ldr	r3, [r3, #8]
240170fe:	f003 0302 	and.w	r3, r3, #2
24017102:	2b02      	cmp	r3, #2
24017104:	d106      	bne.n	24017114 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
24017106:	68fb      	ldr	r3, [r7, #12]
24017108:	f043 0304 	orr.w	r3, r3, #4
2401710c:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
2401710e:	4b1f      	ldr	r3, [pc, #124]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017110:	2202      	movs	r2, #2
24017112:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
24017114:	4b1d      	ldr	r3, [pc, #116]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017116:	689b      	ldr	r3, [r3, #8]
24017118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2401711c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24017120:	d106      	bne.n	24017130 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
24017122:	68fb      	ldr	r3, [r7, #12]
24017124:	f043 0320 	orr.w	r3, r3, #32
24017128:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
2401712a:	4b18      	ldr	r3, [pc, #96]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401712c:	2204      	movs	r2, #4
2401712e:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
24017130:	4b16      	ldr	r3, [pc, #88]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017132:	689b      	ldr	r3, [r3, #8]
24017134:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401713c:	d106      	bne.n	2401714c <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
2401713e:	68fb      	ldr	r3, [r7, #12]
24017140:	f043 0308 	orr.w	r3, r3, #8
24017144:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
24017146:	4b11      	ldr	r3, [pc, #68]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017148:	2204      	movs	r2, #4
2401714a:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
2401714c:	4b0f      	ldr	r3, [pc, #60]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401714e:	689b      	ldr	r3, [r3, #8]
24017150:	f403 7300 	and.w	r3, r3, #512	; 0x200
24017154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24017158:	d106      	bne.n	24017168 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
2401715a:	68fb      	ldr	r3, [r7, #12]
2401715c:	f043 0310 	orr.w	r3, r3, #16
24017160:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
24017162:	4b0a      	ldr	r3, [pc, #40]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017164:	2204      	movs	r2, #4
24017166:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
24017168:	4b08      	ldr	r3, [pc, #32]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401716a:	689b      	ldr	r3, [r3, #8]
2401716c:	f003 0308 	and.w	r3, r3, #8
24017170:	2b08      	cmp	r3, #8
24017172:	d102      	bne.n	2401717a <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
24017174:	4b05      	ldr	r3, [pc, #20]	; (2401718c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24017176:	2208      	movs	r2, #8
24017178:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
2401717a:	68fb      	ldr	r3, [r7, #12]
2401717c:	2b00      	cmp	r3, #0
2401717e:	d09e      	beq.n	240170be <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
24017180:	68fb      	ldr	r3, [r7, #12]
}
24017182:	4618      	mov	r0, r3
24017184:	3710      	adds	r7, #16
24017186:	46bd      	mov	sp, r7
24017188:	bd80      	pop	{r7, pc}
2401718a:	bf00      	nop
2401718c:	40008400 	.word	0x40008400

24017190 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
24017190:	b580      	push	{r7, lr}
24017192:	b084      	sub	sp, #16
24017194:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
24017196:	2300      	movs	r3, #0
24017198:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
2401719a:	4b33      	ldr	r3, [pc, #204]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2401719c:	689b      	ldr	r3, [r3, #8]
2401719e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
240171a0:	4b31      	ldr	r3, [pc, #196]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
240171a2:	681b      	ldr	r3, [r3, #0]
240171a4:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
240171a6:	68bb      	ldr	r3, [r7, #8]
240171a8:	f003 0301 	and.w	r3, r3, #1
240171ac:	2b00      	cmp	r3, #0
240171ae:	d00a      	beq.n	240171c6 <HAL_RCCEx_CRS_IRQHandler+0x36>
240171b0:	687b      	ldr	r3, [r7, #4]
240171b2:	f003 0301 	and.w	r3, r3, #1
240171b6:	2b00      	cmp	r3, #0
240171b8:	d005      	beq.n	240171c6 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
240171ba:	4b2b      	ldr	r3, [pc, #172]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
240171bc:	2201      	movs	r2, #1
240171be:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
240171c0:	f000 f854 	bl	2401726c <HAL_RCCEx_CRS_SyncOkCallback>
240171c4:	e04b      	b.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
240171c6:	68bb      	ldr	r3, [r7, #8]
240171c8:	f003 0302 	and.w	r3, r3, #2
240171cc:	2b00      	cmp	r3, #0
240171ce:	d00a      	beq.n	240171e6 <HAL_RCCEx_CRS_IRQHandler+0x56>
240171d0:	687b      	ldr	r3, [r7, #4]
240171d2:	f003 0302 	and.w	r3, r3, #2
240171d6:	2b00      	cmp	r3, #0
240171d8:	d005      	beq.n	240171e6 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
240171da:	4b23      	ldr	r3, [pc, #140]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
240171dc:	2202      	movs	r2, #2
240171de:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
240171e0:	f000 f84b 	bl	2401727a <HAL_RCCEx_CRS_SyncWarnCallback>
240171e4:	e03b      	b.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
240171e6:	68bb      	ldr	r3, [r7, #8]
240171e8:	f003 0308 	and.w	r3, r3, #8
240171ec:	2b00      	cmp	r3, #0
240171ee:	d00a      	beq.n	24017206 <HAL_RCCEx_CRS_IRQHandler+0x76>
240171f0:	687b      	ldr	r3, [r7, #4]
240171f2:	f003 0308 	and.w	r3, r3, #8
240171f6:	2b00      	cmp	r3, #0
240171f8:	d005      	beq.n	24017206 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
240171fa:	4b1b      	ldr	r3, [pc, #108]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
240171fc:	2208      	movs	r2, #8
240171fe:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
24017200:	f000 f842 	bl	24017288 <HAL_RCCEx_CRS_ExpectedSyncCallback>
24017204:	e02b      	b.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
24017206:	68bb      	ldr	r3, [r7, #8]
24017208:	f003 0304 	and.w	r3, r3, #4
2401720c:	2b00      	cmp	r3, #0
2401720e:	d026      	beq.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
24017210:	687b      	ldr	r3, [r7, #4]
24017212:	f003 0304 	and.w	r3, r3, #4
24017216:	2b00      	cmp	r3, #0
24017218:	d021      	beq.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
2401721a:	68bb      	ldr	r3, [r7, #8]
2401721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24017220:	2b00      	cmp	r3, #0
24017222:	d003      	beq.n	2401722c <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
24017224:	68fb      	ldr	r3, [r7, #12]
24017226:	f043 0308 	orr.w	r3, r3, #8
2401722a:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
2401722c:	68bb      	ldr	r3, [r7, #8]
2401722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
24017232:	2b00      	cmp	r3, #0
24017234:	d003      	beq.n	2401723e <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
24017236:	68fb      	ldr	r3, [r7, #12]
24017238:	f043 0310 	orr.w	r3, r3, #16
2401723c:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
2401723e:	68bb      	ldr	r3, [r7, #8]
24017240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24017244:	2b00      	cmp	r3, #0
24017246:	d003      	beq.n	24017250 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
24017248:	68fb      	ldr	r3, [r7, #12]
2401724a:	f043 0320 	orr.w	r3, r3, #32
2401724e:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
24017250:	4b05      	ldr	r3, [pc, #20]	; (24017268 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24017252:	2204      	movs	r2, #4
24017254:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
24017256:	68f8      	ldr	r0, [r7, #12]
24017258:	f000 f81d 	bl	24017296 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
2401725c:	e7ff      	b.n	2401725e <HAL_RCCEx_CRS_IRQHandler+0xce>
2401725e:	bf00      	nop
24017260:	3710      	adds	r7, #16
24017262:	46bd      	mov	sp, r7
24017264:	bd80      	pop	{r7, pc}
24017266:	bf00      	nop
24017268:	40008400 	.word	0x40008400

2401726c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
2401726c:	b480      	push	{r7}
2401726e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
24017270:	bf00      	nop
24017272:	46bd      	mov	sp, r7
24017274:	f85d 7b04 	ldr.w	r7, [sp], #4
24017278:	4770      	bx	lr

2401727a <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
2401727a:	b480      	push	{r7}
2401727c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
2401727e:	bf00      	nop
24017280:	46bd      	mov	sp, r7
24017282:	f85d 7b04 	ldr.w	r7, [sp], #4
24017286:	4770      	bx	lr

24017288 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
24017288:	b480      	push	{r7}
2401728a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
2401728c:	bf00      	nop
2401728e:	46bd      	mov	sp, r7
24017290:	f85d 7b04 	ldr.w	r7, [sp], #4
24017294:	4770      	bx	lr

24017296 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
24017296:	b480      	push	{r7}
24017298:	b083      	sub	sp, #12
2401729a:	af00      	add	r7, sp, #0
2401729c:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
2401729e:	bf00      	nop
240172a0:	370c      	adds	r7, #12
240172a2:	46bd      	mov	sp, r7
240172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240172a8:	4770      	bx	lr
	...

240172ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
240172ac:	b580      	push	{r7, lr}
240172ae:	b084      	sub	sp, #16
240172b0:	af00      	add	r7, sp, #0
240172b2:	6078      	str	r0, [r7, #4]
240172b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
240172b6:	2300      	movs	r3, #0
240172b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240172ba:	4b53      	ldr	r3, [pc, #332]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240172bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240172be:	f003 0303 	and.w	r3, r3, #3
240172c2:	2b03      	cmp	r3, #3
240172c4:	d101      	bne.n	240172ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
240172c6:	2301      	movs	r3, #1
240172c8:	e099      	b.n	240173fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
240172ca:	4b4f      	ldr	r3, [pc, #316]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240172cc:	681b      	ldr	r3, [r3, #0]
240172ce:	4a4e      	ldr	r2, [pc, #312]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240172d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
240172d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240172d6:	f7ea ffa5 	bl	24002224 <HAL_GetTick>
240172da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240172dc:	e008      	b.n	240172f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
240172de:	f7ea ffa1 	bl	24002224 <HAL_GetTick>
240172e2:	4602      	mov	r2, r0
240172e4:	68bb      	ldr	r3, [r7, #8]
240172e6:	1ad3      	subs	r3, r2, r3
240172e8:	2b02      	cmp	r3, #2
240172ea:	d901      	bls.n	240172f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
240172ec:	2303      	movs	r3, #3
240172ee:	e086      	b.n	240173fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240172f0:	4b45      	ldr	r3, [pc, #276]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240172f2:	681b      	ldr	r3, [r3, #0]
240172f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240172f8:	2b00      	cmp	r3, #0
240172fa:	d1f0      	bne.n	240172de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
240172fc:	4b42      	ldr	r3, [pc, #264]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240172fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24017300:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24017304:	687b      	ldr	r3, [r7, #4]
24017306:	681b      	ldr	r3, [r3, #0]
24017308:	031b      	lsls	r3, r3, #12
2401730a:	493f      	ldr	r1, [pc, #252]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
2401730c:	4313      	orrs	r3, r2
2401730e:	628b      	str	r3, [r1, #40]	; 0x28
24017310:	687b      	ldr	r3, [r7, #4]
24017312:	685b      	ldr	r3, [r3, #4]
24017314:	3b01      	subs	r3, #1
24017316:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401731a:	687b      	ldr	r3, [r7, #4]
2401731c:	689b      	ldr	r3, [r3, #8]
2401731e:	3b01      	subs	r3, #1
24017320:	025b      	lsls	r3, r3, #9
24017322:	b29b      	uxth	r3, r3
24017324:	431a      	orrs	r2, r3
24017326:	687b      	ldr	r3, [r7, #4]
24017328:	68db      	ldr	r3, [r3, #12]
2401732a:	3b01      	subs	r3, #1
2401732c:	041b      	lsls	r3, r3, #16
2401732e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24017332:	431a      	orrs	r2, r3
24017334:	687b      	ldr	r3, [r7, #4]
24017336:	691b      	ldr	r3, [r3, #16]
24017338:	3b01      	subs	r3, #1
2401733a:	061b      	lsls	r3, r3, #24
2401733c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24017340:	4931      	ldr	r1, [pc, #196]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017342:	4313      	orrs	r3, r2
24017344:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24017346:	4b30      	ldr	r3, [pc, #192]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401734a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2401734e:	687b      	ldr	r3, [r7, #4]
24017350:	695b      	ldr	r3, [r3, #20]
24017352:	492d      	ldr	r1, [pc, #180]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017354:	4313      	orrs	r3, r2
24017356:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24017358:	4b2b      	ldr	r3, [pc, #172]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
2401735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401735c:	f023 0220 	bic.w	r2, r3, #32
24017360:	687b      	ldr	r3, [r7, #4]
24017362:	699b      	ldr	r3, [r3, #24]
24017364:	4928      	ldr	r1, [pc, #160]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017366:	4313      	orrs	r3, r2
24017368:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2401736a:	4b27      	ldr	r3, [pc, #156]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
2401736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401736e:	4a26      	ldr	r2, [pc, #152]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017370:	f023 0310 	bic.w	r3, r3, #16
24017374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24017376:	4b24      	ldr	r3, [pc, #144]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2401737a:	4b24      	ldr	r3, [pc, #144]	; (2401740c <RCCEx_PLL2_Config+0x160>)
2401737c:	4013      	ands	r3, r2
2401737e:	687a      	ldr	r2, [r7, #4]
24017380:	69d2      	ldr	r2, [r2, #28]
24017382:	00d2      	lsls	r2, r2, #3
24017384:	4920      	ldr	r1, [pc, #128]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017386:	4313      	orrs	r3, r2
24017388:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2401738a:	4b1f      	ldr	r3, [pc, #124]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
2401738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401738e:	4a1e      	ldr	r2, [pc, #120]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
24017390:	f043 0310 	orr.w	r3, r3, #16
24017394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
24017396:	683b      	ldr	r3, [r7, #0]
24017398:	2b00      	cmp	r3, #0
2401739a:	d106      	bne.n	240173aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2401739c:	4b1a      	ldr	r3, [pc, #104]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
2401739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240173a0:	4a19      	ldr	r2, [pc, #100]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
240173a6:	62d3      	str	r3, [r2, #44]	; 0x2c
240173a8:	e00f      	b.n	240173ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
240173aa:	683b      	ldr	r3, [r7, #0]
240173ac:	2b01      	cmp	r3, #1
240173ae:	d106      	bne.n	240173be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240173b0:	4b15      	ldr	r3, [pc, #84]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240173b4:	4a14      	ldr	r2, [pc, #80]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
240173ba:	62d3      	str	r3, [r2, #44]	; 0x2c
240173bc:	e005      	b.n	240173ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240173be:	4b12      	ldr	r3, [pc, #72]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240173c2:	4a11      	ldr	r2, [pc, #68]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240173c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
240173ca:	4b0f      	ldr	r3, [pc, #60]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173cc:	681b      	ldr	r3, [r3, #0]
240173ce:	4a0e      	ldr	r2, [pc, #56]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
240173d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240173d6:	f7ea ff25 	bl	24002224 <HAL_GetTick>
240173da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240173dc:	e008      	b.n	240173f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
240173de:	f7ea ff21 	bl	24002224 <HAL_GetTick>
240173e2:	4602      	mov	r2, r0
240173e4:	68bb      	ldr	r3, [r7, #8]
240173e6:	1ad3      	subs	r3, r2, r3
240173e8:	2b02      	cmp	r3, #2
240173ea:	d901      	bls.n	240173f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
240173ec:	2303      	movs	r3, #3
240173ee:	e006      	b.n	240173fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240173f0:	4b05      	ldr	r3, [pc, #20]	; (24017408 <RCCEx_PLL2_Config+0x15c>)
240173f2:	681b      	ldr	r3, [r3, #0]
240173f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240173f8:	2b00      	cmp	r3, #0
240173fa:	d0f0      	beq.n	240173de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
240173fc:	7bfb      	ldrb	r3, [r7, #15]
}
240173fe:	4618      	mov	r0, r3
24017400:	3710      	adds	r7, #16
24017402:	46bd      	mov	sp, r7
24017404:	bd80      	pop	{r7, pc}
24017406:	bf00      	nop
24017408:	58024400 	.word	0x58024400
2401740c:	ffff0007 	.word	0xffff0007

24017410 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24017410:	b580      	push	{r7, lr}
24017412:	b084      	sub	sp, #16
24017414:	af00      	add	r7, sp, #0
24017416:	6078      	str	r0, [r7, #4]
24017418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2401741a:	2300      	movs	r3, #0
2401741c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2401741e:	4b53      	ldr	r3, [pc, #332]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24017422:	f003 0303 	and.w	r3, r3, #3
24017426:	2b03      	cmp	r3, #3
24017428:	d101      	bne.n	2401742e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2401742a:	2301      	movs	r3, #1
2401742c:	e099      	b.n	24017562 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2401742e:	4b4f      	ldr	r3, [pc, #316]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017430:	681b      	ldr	r3, [r3, #0]
24017432:	4a4e      	ldr	r2, [pc, #312]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24017438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2401743a:	f7ea fef3 	bl	24002224 <HAL_GetTick>
2401743e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24017440:	e008      	b.n	24017454 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24017442:	f7ea feef 	bl	24002224 <HAL_GetTick>
24017446:	4602      	mov	r2, r0
24017448:	68bb      	ldr	r3, [r7, #8]
2401744a:	1ad3      	subs	r3, r2, r3
2401744c:	2b02      	cmp	r3, #2
2401744e:	d901      	bls.n	24017454 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
24017450:	2303      	movs	r3, #3
24017452:	e086      	b.n	24017562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24017454:	4b45      	ldr	r3, [pc, #276]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017456:	681b      	ldr	r3, [r3, #0]
24017458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401745c:	2b00      	cmp	r3, #0
2401745e:	d1f0      	bne.n	24017442 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24017460:	4b42      	ldr	r3, [pc, #264]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24017464:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
24017468:	687b      	ldr	r3, [r7, #4]
2401746a:	681b      	ldr	r3, [r3, #0]
2401746c:	051b      	lsls	r3, r3, #20
2401746e:	493f      	ldr	r1, [pc, #252]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017470:	4313      	orrs	r3, r2
24017472:	628b      	str	r3, [r1, #40]	; 0x28
24017474:	687b      	ldr	r3, [r7, #4]
24017476:	685b      	ldr	r3, [r3, #4]
24017478:	3b01      	subs	r3, #1
2401747a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2401747e:	687b      	ldr	r3, [r7, #4]
24017480:	689b      	ldr	r3, [r3, #8]
24017482:	3b01      	subs	r3, #1
24017484:	025b      	lsls	r3, r3, #9
24017486:	b29b      	uxth	r3, r3
24017488:	431a      	orrs	r2, r3
2401748a:	687b      	ldr	r3, [r7, #4]
2401748c:	68db      	ldr	r3, [r3, #12]
2401748e:	3b01      	subs	r3, #1
24017490:	041b      	lsls	r3, r3, #16
24017492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24017496:	431a      	orrs	r2, r3
24017498:	687b      	ldr	r3, [r7, #4]
2401749a:	691b      	ldr	r3, [r3, #16]
2401749c:	3b01      	subs	r3, #1
2401749e:	061b      	lsls	r3, r3, #24
240174a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
240174a4:	4931      	ldr	r1, [pc, #196]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174a6:	4313      	orrs	r3, r2
240174a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240174aa:	4b30      	ldr	r3, [pc, #192]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240174ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
240174b2:	687b      	ldr	r3, [r7, #4]
240174b4:	695b      	ldr	r3, [r3, #20]
240174b6:	492d      	ldr	r1, [pc, #180]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174b8:	4313      	orrs	r3, r2
240174ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240174bc:	4b2b      	ldr	r3, [pc, #172]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240174c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
240174c4:	687b      	ldr	r3, [r7, #4]
240174c6:	699b      	ldr	r3, [r3, #24]
240174c8:	4928      	ldr	r1, [pc, #160]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174ca:	4313      	orrs	r3, r2
240174cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
240174ce:	4b27      	ldr	r3, [pc, #156]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240174d2:	4a26      	ldr	r2, [pc, #152]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240174d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240174da:	4b24      	ldr	r3, [pc, #144]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
240174de:	4b24      	ldr	r3, [pc, #144]	; (24017570 <RCCEx_PLL3_Config+0x160>)
240174e0:	4013      	ands	r3, r2
240174e2:	687a      	ldr	r2, [r7, #4]
240174e4:	69d2      	ldr	r2, [r2, #28]
240174e6:	00d2      	lsls	r2, r2, #3
240174e8:	4920      	ldr	r1, [pc, #128]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174ea:	4313      	orrs	r3, r2
240174ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240174ee:	4b1f      	ldr	r3, [pc, #124]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240174f2:	4a1e      	ldr	r2, [pc, #120]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
240174f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240174f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
240174fa:	683b      	ldr	r3, [r7, #0]
240174fc:	2b00      	cmp	r3, #0
240174fe:	d106      	bne.n	2401750e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24017500:	4b1a      	ldr	r3, [pc, #104]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24017504:	4a19      	ldr	r2, [pc, #100]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2401750a:	62d3      	str	r3, [r2, #44]	; 0x2c
2401750c:	e00f      	b.n	2401752e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
2401750e:	683b      	ldr	r3, [r7, #0]
24017510:	2b01      	cmp	r3, #1
24017512:	d106      	bne.n	24017522 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24017514:	4b15      	ldr	r3, [pc, #84]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24017518:	4a14      	ldr	r2, [pc, #80]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
2401751a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2401751e:	62d3      	str	r3, [r2, #44]	; 0x2c
24017520:	e005      	b.n	2401752e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24017522:	4b12      	ldr	r3, [pc, #72]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24017526:	4a11      	ldr	r2, [pc, #68]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2401752c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2401752e:	4b0f      	ldr	r3, [pc, #60]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017530:	681b      	ldr	r3, [r3, #0]
24017532:	4a0e      	ldr	r2, [pc, #56]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24017538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2401753a:	f7ea fe73 	bl	24002224 <HAL_GetTick>
2401753e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24017540:	e008      	b.n	24017554 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24017542:	f7ea fe6f 	bl	24002224 <HAL_GetTick>
24017546:	4602      	mov	r2, r0
24017548:	68bb      	ldr	r3, [r7, #8]
2401754a:	1ad3      	subs	r3, r2, r3
2401754c:	2b02      	cmp	r3, #2
2401754e:	d901      	bls.n	24017554 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
24017550:	2303      	movs	r3, #3
24017552:	e006      	b.n	24017562 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24017554:	4b05      	ldr	r3, [pc, #20]	; (2401756c <RCCEx_PLL3_Config+0x15c>)
24017556:	681b      	ldr	r3, [r3, #0]
24017558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401755c:	2b00      	cmp	r3, #0
2401755e:	d0f0      	beq.n	24017542 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
24017560:	7bfb      	ldrb	r3, [r7, #15]
}
24017562:	4618      	mov	r0, r3
24017564:	3710      	adds	r7, #16
24017566:	46bd      	mov	sp, r7
24017568:	bd80      	pop	{r7, pc}
2401756a:	bf00      	nop
2401756c:	58024400 	.word	0x58024400
24017570:	ffff0007 	.word	0xffff0007

24017574 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
24017574:	b580      	push	{r7, lr}
24017576:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
24017578:	4b07      	ldr	r3, [pc, #28]	; (24017598 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
2401757a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2401757c:	f403 7300 	and.w	r3, r3, #512	; 0x200
24017580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24017584:	d105      	bne.n	24017592 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
24017586:	4b04      	ldr	r3, [pc, #16]	; (24017598 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24017588:	f44f 7200 	mov.w	r2, #512	; 0x200
2401758c:	669a      	str	r2, [r3, #104]	; 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
2401758e:	f000 f805 	bl	2401759c <HAL_RCCEx_LSECSS_Callback>

  }
}
24017592:	bf00      	nop
24017594:	bd80      	pop	{r7, pc}
24017596:	bf00      	nop
24017598:	58024400 	.word	0x58024400

2401759c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
2401759c:	b480      	push	{r7}
2401759e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
240175a0:	bf00      	nop
240175a2:	46bd      	mov	sp, r7
240175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240175a8:	4770      	bx	lr
	...

240175ac <__errno>:
240175ac:	4b01      	ldr	r3, [pc, #4]	; (240175b4 <__errno+0x8>)
240175ae:	6818      	ldr	r0, [r3, #0]
240175b0:	4770      	bx	lr
240175b2:	bf00      	nop
240175b4:	240004d8 	.word	0x240004d8

240175b8 <exit>:
240175b8:	b508      	push	{r3, lr}
240175ba:	4b07      	ldr	r3, [pc, #28]	; (240175d8 <exit+0x20>)
240175bc:	4604      	mov	r4, r0
240175be:	b113      	cbz	r3, 240175c6 <exit+0xe>
240175c0:	2100      	movs	r1, #0
240175c2:	f3af 8000 	nop.w
240175c6:	4b05      	ldr	r3, [pc, #20]	; (240175dc <exit+0x24>)
240175c8:	6818      	ldr	r0, [r3, #0]
240175ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
240175cc:	b103      	cbz	r3, 240175d0 <exit+0x18>
240175ce:	4798      	blx	r3
240175d0:	4620      	mov	r0, r4
240175d2:	f7ea f9e8 	bl	240019a6 <_exit>
240175d6:	bf00      	nop
240175d8:	00000000 	.word	0x00000000
240175dc:	2401777c 	.word	0x2401777c

240175e0 <__libc_init_array>:
240175e0:	b570      	push	{r4, r5, r6, lr}
240175e2:	4d0d      	ldr	r5, [pc, #52]	; (24017618 <__libc_init_array+0x38>)
240175e4:	4c0d      	ldr	r4, [pc, #52]	; (2401761c <__libc_init_array+0x3c>)
240175e6:	1b64      	subs	r4, r4, r5
240175e8:	10a4      	asrs	r4, r4, #2
240175ea:	2600      	movs	r6, #0
240175ec:	42a6      	cmp	r6, r4
240175ee:	d109      	bne.n	24017604 <__libc_init_array+0x24>
240175f0:	4d0b      	ldr	r5, [pc, #44]	; (24017620 <__libc_init_array+0x40>)
240175f2:	4c0c      	ldr	r4, [pc, #48]	; (24017624 <__libc_init_array+0x44>)
240175f4:	f000 f822 	bl	2401763c <_init>
240175f8:	1b64      	subs	r4, r4, r5
240175fa:	10a4      	asrs	r4, r4, #2
240175fc:	2600      	movs	r6, #0
240175fe:	42a6      	cmp	r6, r4
24017600:	d105      	bne.n	2401760e <__libc_init_array+0x2e>
24017602:	bd70      	pop	{r4, r5, r6, pc}
24017604:	f855 3b04 	ldr.w	r3, [r5], #4
24017608:	4798      	blx	r3
2401760a:	3601      	adds	r6, #1
2401760c:	e7ee      	b.n	240175ec <__libc_init_array+0xc>
2401760e:	f855 3b04 	ldr.w	r3, [r5], #4
24017612:	4798      	blx	r3
24017614:	3601      	adds	r6, #1
24017616:	e7f2      	b.n	240175fe <__libc_init_array+0x1e>
24017618:	240004a0 	.word	0x240004a0
2401761c:	240004a0 	.word	0x240004a0
24017620:	240004a0 	.word	0x240004a0
24017624:	240004a4 	.word	0x240004a4

24017628 <memset>:
24017628:	4402      	add	r2, r0
2401762a:	4603      	mov	r3, r0
2401762c:	4293      	cmp	r3, r2
2401762e:	d100      	bne.n	24017632 <memset+0xa>
24017630:	4770      	bx	lr
24017632:	f803 1b01 	strb.w	r1, [r3], #1
24017636:	e7f9      	b.n	2401762c <memset+0x4>

24017638 <__EH_FRAME_BEGIN__>:
24017638:	0000 0000                                   ....

2401763c <_init>:
2401763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401763e:	bf00      	nop
24017640:	bcf8      	pop	{r3, r4, r5, r6, r7}
24017642:	bc08      	pop	{r3}
24017644:	469e      	mov	lr, r3
24017646:	4770      	bx	lr

24017648 <_fini>:
24017648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401764a:	bf00      	nop
2401764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2401764e:	bc08      	pop	{r3}
24017650:	469e      	mov	lr, r3
24017652:	4770      	bx	lr
