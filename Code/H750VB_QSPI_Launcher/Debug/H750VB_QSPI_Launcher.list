
H750VB_QSPI_Launcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  24000498  24000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  240004a0  240004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  240004a4  240004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  240004a8  240004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000f8  2400053c  2400053c  0001053c  2**2
                  ALLOC
  6 .text         000167fc  24000634  24000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  24016e30  24016e30  00036e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000064  24016ef8  24016ef8  00026ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  24016f5c  24016f5c  00026f5c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00036ef8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015796  00000000  00000000  00036f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003477  00000000  00000000  0004c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011a8  00000000  00000000  0004fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003909d  00000000  00000000  00050ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ac1d  00000000  00000000  00089d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158c14  00000000  00000000  000a499a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fd5ae  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000fb8  00000000  00000000  001fd600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000468c  00000000  00000000  001fe5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000634 <__do_global_dtors_aux>:
24000634:	b510      	push	{r4, lr}
24000636:	4c05      	ldr	r4, [pc, #20]	; (2400064c <__do_global_dtors_aux+0x18>)
24000638:	7823      	ldrb	r3, [r4, #0]
2400063a:	b933      	cbnz	r3, 2400064a <__do_global_dtors_aux+0x16>
2400063c:	4b04      	ldr	r3, [pc, #16]	; (24000650 <__do_global_dtors_aux+0x1c>)
2400063e:	b113      	cbz	r3, 24000646 <__do_global_dtors_aux+0x12>
24000640:	4804      	ldr	r0, [pc, #16]	; (24000654 <__do_global_dtors_aux+0x20>)
24000642:	f3af 8000 	nop.w
24000646:	2301      	movs	r3, #1
24000648:	7023      	strb	r3, [r4, #0]
2400064a:	bd10      	pop	{r4, pc}
2400064c:	2400053c 	.word	0x2400053c
24000650:	00000000 	.word	0x00000000
24000654:	24016e14 	.word	0x24016e14

24000658 <frame_dummy>:
24000658:	b508      	push	{r3, lr}
2400065a:	4b03      	ldr	r3, [pc, #12]	; (24000668 <frame_dummy+0x10>)
2400065c:	b11b      	cbz	r3, 24000666 <frame_dummy+0xe>
2400065e:	4903      	ldr	r1, [pc, #12]	; (2400066c <frame_dummy+0x14>)
24000660:	4803      	ldr	r0, [pc, #12]	; (24000670 <frame_dummy+0x18>)
24000662:	f3af 8000 	nop.w
24000666:	bd08      	pop	{r3, pc}
24000668:	00000000 	.word	0x00000000
2400066c:	24000540 	.word	0x24000540
24000670:	24016e14 	.word	0x24016e14

24000674 <_stack_init>:
24000674:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
24000678:	4770      	bx	lr
2400067a:	bf00      	nop

2400067c <_mainCRTStartup>:
2400067c:	4b17      	ldr	r3, [pc, #92]	; (240006dc <_mainCRTStartup+0x60>)
2400067e:	2b00      	cmp	r3, #0
24000680:	bf08      	it	eq
24000682:	4b13      	ldreq	r3, [pc, #76]	; (240006d0 <_mainCRTStartup+0x54>)
24000684:	469d      	mov	sp, r3
24000686:	f7ff fff5 	bl	24000674 <_stack_init>
2400068a:	2100      	movs	r1, #0
2400068c:	468b      	mov	fp, r1
2400068e:	460f      	mov	r7, r1
24000690:	4813      	ldr	r0, [pc, #76]	; (240006e0 <_mainCRTStartup+0x64>)
24000692:	4a14      	ldr	r2, [pc, #80]	; (240006e4 <_mainCRTStartup+0x68>)
24000694:	1a12      	subs	r2, r2, r0
24000696:	f016 fbb5 	bl	24016e04 <memset>
2400069a:	4b0e      	ldr	r3, [pc, #56]	; (240006d4 <_mainCRTStartup+0x58>)
2400069c:	2b00      	cmp	r3, #0
2400069e:	d000      	beq.n	240006a2 <_mainCRTStartup+0x26>
240006a0:	4798      	blx	r3
240006a2:	4b0d      	ldr	r3, [pc, #52]	; (240006d8 <_mainCRTStartup+0x5c>)
240006a4:	2b00      	cmp	r3, #0
240006a6:	d000      	beq.n	240006aa <_mainCRTStartup+0x2e>
240006a8:	4798      	blx	r3
240006aa:	2000      	movs	r0, #0
240006ac:	2100      	movs	r1, #0
240006ae:	0004      	movs	r4, r0
240006b0:	000d      	movs	r5, r1
240006b2:	480d      	ldr	r0, [pc, #52]	; (240006e8 <_mainCRTStartup+0x6c>)
240006b4:	2800      	cmp	r0, #0
240006b6:	d002      	beq.n	240006be <_mainCRTStartup+0x42>
240006b8:	480c      	ldr	r0, [pc, #48]	; (240006ec <_mainCRTStartup+0x70>)
240006ba:	f3af 8000 	nop.w
240006be:	f016 fb6f 	bl	24016da0 <__libc_init_array>
240006c2:	0020      	movs	r0, r4
240006c4:	0029      	movs	r1, r5
240006c6:	f000 fad5 	bl	24000c74 <main>
240006ca:	f016 fb55 	bl	24016d78 <exit>
240006ce:	bf00      	nop
240006d0:	00080000 	.word	0x00080000
	...
240006e0:	2400053c 	.word	0x2400053c
240006e4:	24000634 	.word	0x24000634
	...
240006f0:	240004a8 	.word	0x240004a8
240006f4:	240004a8 	.word	0x240004a8
240006f8:	2400053c 	.word	0x2400053c
240006fc:	2400053c 	.word	0x2400053c
24000700:	24000634 	.word	0x24000634

24000704 <strlen>:
24000704:	4603      	mov	r3, r0
24000706:	f813 2b01 	ldrb.w	r2, [r3], #1
2400070a:	2a00      	cmp	r2, #0
2400070c:	d1fb      	bne.n	24000706 <strlen+0x2>
2400070e:	1a18      	subs	r0, r3, r0
24000710:	3801      	subs	r0, #1
24000712:	4770      	bx	lr

24000714 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
24000714:	b580      	push	{r7, lr}
24000716:	b086      	sub	sp, #24
24000718:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
2400071a:	4b26      	ldr	r3, [pc, #152]	; (240007b4 <Init+0xa0>)
2400071c:	4a26      	ldr	r2, [pc, #152]	; (240007b8 <Init+0xa4>)
2400071e:	601a      	str	r2, [r3, #0]


    SystemInit();
24000720:	f001 f9f6 	bl	24001b10 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
24000724:	4b25      	ldr	r3, [pc, #148]	; (240007bc <Init+0xa8>)
24000726:	4a26      	ldr	r2, [pc, #152]	; (240007c0 <Init+0xac>)
24000728:	609a      	str	r2, [r3, #8]
2400072a:	2300      	movs	r3, #0
2400072c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400072e:	693b      	ldr	r3, [r7, #16]
24000730:	f383 8810 	msr	PRIMASK, r3
}
24000734:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
24000736:	f001 fc17 	bl	24001f68 <HAL_Init>

    SystemClock_Config();
2400073a:	f000 fb03 	bl	24000d44 <SystemClock_Config>

    MX_GPIO_Init();
2400073e:	f000 fa43 	bl	24000bc8 <MX_GPIO_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
24000742:	4b20      	ldr	r3, [pc, #128]	; (240007c4 <Init+0xb0>)
24000744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000746:	4a1f      	ldr	r2, [pc, #124]	; (240007c4 <Init+0xb0>)
24000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400074c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
2400074e:	4b1d      	ldr	r3, [pc, #116]	; (240007c4 <Init+0xb0>)
24000750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000752:	4a1c      	ldr	r2, [pc, #112]	; (240007c4 <Init+0xb0>)
24000754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24000758:	67d3      	str	r3, [r2, #124]	; 0x7c

    if (CSP_QUADSPI_Init() != HAL_OK) {
2400075a:	f000 fcdb 	bl	24001114 <CSP_QUADSPI_Init>
2400075e:	4603      	mov	r3, r0
24000760:	2b00      	cmp	r3, #0
24000762:	d007      	beq.n	24000774 <Init+0x60>
24000764:	2301      	movs	r3, #1
24000766:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000768:	68fb      	ldr	r3, [r7, #12]
2400076a:	f383 8810 	msr	PRIMASK, r3
}
2400076e:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000770:	2300      	movs	r3, #0
24000772:	e01a      	b.n	240007aa <Init+0x96>
    }


    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000774:	f000 fea4 	bl	240014c0 <CSP_QSPI_EnableMemoryMappedMode>
24000778:	4603      	mov	r3, r0
2400077a:	2b00      	cmp	r3, #0
2400077c:	d007      	beq.n	2400078e <Init+0x7a>
2400077e:	2301      	movs	r3, #1
24000780:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000782:	68bb      	ldr	r3, [r7, #8]
24000784:	f383 8810 	msr	PRIMASK, r3
}
24000788:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400078a:	2300      	movs	r3, #0
2400078c:	e00d      	b.n	240007aa <Init+0x96>
    }

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
2400078e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
24000792:	681b      	ldr	r3, [r3, #0]
24000794:	617b      	str	r3, [r7, #20]
    a++;
24000796:	697b      	ldr	r3, [r7, #20]
24000798:	3301      	adds	r3, #1
2400079a:	617b      	str	r3, [r7, #20]
2400079c:	2301      	movs	r3, #1
2400079e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007a0:	687b      	ldr	r3, [r7, #4]
240007a2:	f383 8810 	msr	PRIMASK, r3
}
240007a6:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
240007a8:	2301      	movs	r3, #1
}
240007aa:	4618      	mov	r0, r3
240007ac:	3718      	adds	r7, #24
240007ae:	46bd      	mov	sp, r7
240007b0:	bd80      	pop	{r7, pc}
240007b2:	bf00      	nop
240007b4:	e000edf0 	.word	0xe000edf0
240007b8:	a05f0000 	.word	0xa05f0000
240007bc:	e000ed00 	.word	0xe000ed00
240007c0:	24000200 	.word	0x24000200
240007c4:	58024400 	.word	0x58024400

240007c8 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
240007c8:	b580      	push	{r7, lr}
240007ca:	b088      	sub	sp, #32
240007cc:	af00      	add	r7, sp, #0
240007ce:	60f8      	str	r0, [r7, #12]
240007d0:	60b9      	str	r1, [r7, #8]
240007d2:	607a      	str	r2, [r7, #4]
240007d4:	2300      	movs	r3, #0
240007d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007d8:	69fb      	ldr	r3, [r7, #28]
240007da:	f383 8810 	msr	PRIMASK, r3
}
240007de:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
240007e0:	4815      	ldr	r0, [pc, #84]	; (24000838 <Write+0x70>)
240007e2:	f011 feee 	bl	240125c2 <HAL_QSPI_Abort>
240007e6:	4603      	mov	r3, r0
240007e8:	2b00      	cmp	r3, #0
240007ea:	d007      	beq.n	240007fc <Write+0x34>
240007ec:	2301      	movs	r3, #1
240007ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007f0:	69bb      	ldr	r3, [r7, #24]
240007f2:	f383 8810 	msr	PRIMASK, r3
}
240007f6:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240007f8:	2300      	movs	r3, #0
240007fa:	e019      	b.n	24000830 <Write+0x68>
    }


    if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
240007fc:	68fb      	ldr	r3, [r7, #12]
240007fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
24000802:	68ba      	ldr	r2, [r7, #8]
24000804:	4619      	mov	r1, r3
24000806:	6878      	ldr	r0, [r7, #4]
24000808:	f000 ff2c 	bl	24001664 <CSP_QSPI_WriteMemory>
2400080c:	4603      	mov	r3, r0
2400080e:	2b00      	cmp	r3, #0
24000810:	d007      	beq.n	24000822 <Write+0x5a>
24000812:	2301      	movs	r3, #1
24000814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000816:	697b      	ldr	r3, [r7, #20]
24000818:	f383 8810 	msr	PRIMASK, r3
}
2400081c:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400081e:	2300      	movs	r3, #0
24000820:	e006      	b.n	24000830 <Write+0x68>
24000822:	2301      	movs	r3, #1
24000824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000826:	693b      	ldr	r3, [r7, #16]
24000828:	f383 8810 	msr	PRIMASK, r3
}
2400082c:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
2400082e:	2301      	movs	r3, #1
}
24000830:	4618      	mov	r0, r3
24000832:	3720      	adds	r7, #32
24000834:	46bd      	mov	sp, r7
24000836:	bd80      	pop	{r7, pc}
24000838:	240005c0 	.word	0x240005c0

2400083c <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
2400083c:	b580      	push	{r7, lr}
2400083e:	b086      	sub	sp, #24
24000840:	af00      	add	r7, sp, #0
24000842:	6078      	str	r0, [r7, #4]
24000844:	6039      	str	r1, [r7, #0]
24000846:	2300      	movs	r3, #0
24000848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400084a:	697b      	ldr	r3, [r7, #20]
2400084c:	f383 8810 	msr	PRIMASK, r3
}
24000850:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
24000852:	4814      	ldr	r0, [pc, #80]	; (240008a4 <SectorErase+0x68>)
24000854:	f011 feb5 	bl	240125c2 <HAL_QSPI_Abort>
24000858:	4603      	mov	r3, r0
2400085a:	2b00      	cmp	r3, #0
2400085c:	d007      	beq.n	2400086e <SectorErase+0x32>
2400085e:	2301      	movs	r3, #1
24000860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000862:	693b      	ldr	r3, [r7, #16]
24000864:	f383 8810 	msr	PRIMASK, r3
}
24000868:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
2400086a:	2300      	movs	r3, #0
2400086c:	e015      	b.n	2400089a <SectorErase+0x5e>
    }


    if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK) {
2400086e:	6839      	ldr	r1, [r7, #0]
24000870:	6878      	ldr	r0, [r7, #4]
24000872:	f000 fdd3 	bl	2400141c <CSP_QSPI_EraseSector>
24000876:	4603      	mov	r3, r0
24000878:	2b00      	cmp	r3, #0
2400087a:	d007      	beq.n	2400088c <SectorErase+0x50>
2400087c:	2301      	movs	r3, #1
2400087e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000880:	68fb      	ldr	r3, [r7, #12]
24000882:	f383 8810 	msr	PRIMASK, r3
}
24000886:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000888:	2300      	movs	r3, #0
2400088a:	e006      	b.n	2400089a <SectorErase+0x5e>
2400088c:	2301      	movs	r3, #1
2400088e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000890:	68bb      	ldr	r3, [r7, #8]
24000892:	f383 8810 	msr	PRIMASK, r3
}
24000896:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
24000898:	2301      	movs	r3, #1
}
2400089a:	4618      	mov	r0, r3
2400089c:	3718      	adds	r7, #24
2400089e:	46bd      	mov	sp, r7
240008a0:	bd80      	pop	{r7, pc}
240008a2:	bf00      	nop
240008a4:	240005c0 	.word	0x240005c0

240008a8 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int
MassErase(void) {
240008a8:	b580      	push	{r7, lr}
240008aa:	b084      	sub	sp, #16
240008ac:	af00      	add	r7, sp, #0
240008ae:	2300      	movs	r3, #0
240008b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008b2:	68fb      	ldr	r3, [r7, #12]
240008b4:	f383 8810 	msr	PRIMASK, r3
}
240008b8:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
240008ba:	4813      	ldr	r0, [pc, #76]	; (24000908 <MassErase+0x60>)
240008bc:	f011 fe81 	bl	240125c2 <HAL_QSPI_Abort>
240008c0:	4603      	mov	r3, r0
240008c2:	2b00      	cmp	r3, #0
240008c4:	d007      	beq.n	240008d6 <MassErase+0x2e>
240008c6:	2301      	movs	r3, #1
240008c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008ca:	68bb      	ldr	r3, [r7, #8]
240008cc:	f383 8810 	msr	PRIMASK, r3
}
240008d0:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240008d2:	2300      	movs	r3, #0
240008d4:	e013      	b.n	240008fe <MassErase+0x56>
    }


    if (CSP_QSPI_Erase_Chip() != HAL_OK) {
240008d6:	f000 fc53 	bl	24001180 <CSP_QSPI_Erase_Chip>
240008da:	4603      	mov	r3, r0
240008dc:	2b00      	cmp	r3, #0
240008de:	d007      	beq.n	240008f0 <MassErase+0x48>
240008e0:	2301      	movs	r3, #1
240008e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008e4:	687b      	ldr	r3, [r7, #4]
240008e6:	f383 8810 	msr	PRIMASK, r3
}
240008ea:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
240008ec:	2300      	movs	r3, #0
240008ee:	e006      	b.n	240008fe <MassErase+0x56>
240008f0:	2301      	movs	r3, #1
240008f2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240008f4:	683b      	ldr	r3, [r7, #0]
240008f6:	f383 8810 	msr	PRIMASK, r3
}
240008fa:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
240008fc:	2301      	movs	r3, #1
}
240008fe:	4618      	mov	r0, r3
24000900:	3710      	adds	r7, #16
24000902:	46bd      	mov	sp, r7
24000904:	bd80      	pop	{r7, pc}
24000906:	bf00      	nop
24000908:	240005c0 	.word	0x240005c0

2400090c <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t
CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
2400090c:	b480      	push	{r7}
2400090e:	b089      	sub	sp, #36	; 0x24
24000910:	af00      	add	r7, sp, #0
24000912:	60f8      	str	r0, [r7, #12]
24000914:	60b9      	str	r1, [r7, #8]
24000916:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
24000918:	68fb      	ldr	r3, [r7, #12]
2400091a:	b2db      	uxtb	r3, r3
2400091c:	f003 0303 	and.w	r3, r3, #3
24000920:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
24000922:	68bb      	ldr	r3, [r7, #8]
24000924:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
24000926:	68fb      	ldr	r3, [r7, #12]
24000928:	f023 0303 	bic.w	r3, r3, #3
2400092c:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
2400092e:	68bb      	ldr	r3, [r7, #8]
24000930:	f003 0303 	and.w	r3, r3, #3
24000934:	2b00      	cmp	r3, #0
24000936:	d005      	beq.n	24000944 <CheckSum+0x38>
24000938:	68bb      	ldr	r3, [r7, #8]
2400093a:	f003 0303 	and.w	r3, r3, #3
2400093e:	f1c3 0304 	rsb	r3, r3, #4
24000942:	e000      	b.n	24000946 <CheckSum+0x3a>
24000944:	2300      	movs	r3, #0
24000946:	68ba      	ldr	r2, [r7, #8]
24000948:	4413      	add	r3, r2
2400094a:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4) {
2400094c:	2300      	movs	r3, #0
2400094e:	61bb      	str	r3, [r7, #24]
24000950:	e0b3      	b.n	24000aba <CheckSum+0x1ae>
        Val = *(uint32_t*) StartAddress;
24000952:	68fb      	ldr	r3, [r7, #12]
24000954:	681b      	ldr	r3, [r3, #0]
24000956:	617b      	str	r3, [r7, #20]
        if (missalignementAddress) {
24000958:	7ffb      	ldrb	r3, [r7, #31]
2400095a:	2b00      	cmp	r3, #0
2400095c:	d040      	beq.n	240009e0 <CheckSum+0xd4>
            switch (missalignementAddress) {
2400095e:	7ffb      	ldrb	r3, [r7, #31]
24000960:	2b03      	cmp	r3, #3
24000962:	d032      	beq.n	240009ca <CheckSum+0xbe>
24000964:	2b03      	cmp	r3, #3
24000966:	f300 80a2 	bgt.w	24000aae <CheckSum+0x1a2>
2400096a:	2b01      	cmp	r3, #1
2400096c:	d002      	beq.n	24000974 <CheckSum+0x68>
2400096e:	2b02      	cmp	r3, #2
24000970:	d019      	beq.n	240009a6 <CheckSum+0x9a>
24000972:	e09c      	b.n	24000aae <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000974:	697b      	ldr	r3, [r7, #20]
24000976:	0a1b      	lsrs	r3, r3, #8
24000978:	b2db      	uxtb	r3, r3
2400097a:	461a      	mov	r2, r3
2400097c:	687b      	ldr	r3, [r7, #4]
2400097e:	4413      	add	r3, r2
24000980:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24000982:	697b      	ldr	r3, [r7, #20]
24000984:	0c1b      	lsrs	r3, r3, #16
24000986:	b2db      	uxtb	r3, r3
24000988:	461a      	mov	r2, r3
2400098a:	687b      	ldr	r3, [r7, #4]
2400098c:	4413      	add	r3, r2
2400098e:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24000990:	697b      	ldr	r3, [r7, #20]
24000992:	0e1b      	lsrs	r3, r3, #24
24000994:	b2db      	uxtb	r3, r3
24000996:	461a      	mov	r2, r3
24000998:	687b      	ldr	r3, [r7, #4]
2400099a:	4413      	add	r3, r2
2400099c:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
2400099e:	7ffb      	ldrb	r3, [r7, #31]
240009a0:	3b01      	subs	r3, #1
240009a2:	77fb      	strb	r3, [r7, #31]
                    break;
240009a4:	e083      	b.n	24000aae <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
240009a6:	697b      	ldr	r3, [r7, #20]
240009a8:	0c1b      	lsrs	r3, r3, #16
240009aa:	b2db      	uxtb	r3, r3
240009ac:	461a      	mov	r2, r3
240009ae:	687b      	ldr	r3, [r7, #4]
240009b0:	4413      	add	r3, r2
240009b2:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
240009b4:	697b      	ldr	r3, [r7, #20]
240009b6:	0e1b      	lsrs	r3, r3, #24
240009b8:	b2db      	uxtb	r3, r3
240009ba:	461a      	mov	r2, r3
240009bc:	687b      	ldr	r3, [r7, #4]
240009be:	4413      	add	r3, r2
240009c0:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
240009c2:	7ffb      	ldrb	r3, [r7, #31]
240009c4:	3b02      	subs	r3, #2
240009c6:	77fb      	strb	r3, [r7, #31]
                    break;
240009c8:	e071      	b.n	24000aae <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
240009ca:	697b      	ldr	r3, [r7, #20]
240009cc:	0e1b      	lsrs	r3, r3, #24
240009ce:	b2db      	uxtb	r3, r3
240009d0:	461a      	mov	r2, r3
240009d2:	687b      	ldr	r3, [r7, #4]
240009d4:	4413      	add	r3, r2
240009d6:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
240009d8:	7ffb      	ldrb	r3, [r7, #31]
240009da:	3b03      	subs	r3, #3
240009dc:	77fb      	strb	r3, [r7, #31]
                    break;
240009de:	e066      	b.n	24000aae <CheckSum+0x1a2>
            }
        } else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
240009e0:	7fbb      	ldrb	r3, [r7, #30]
240009e2:	68ba      	ldr	r2, [r7, #8]
240009e4:	1ad3      	subs	r3, r2, r3
240009e6:	f003 0303 	and.w	r3, r3, #3
240009ea:	2b00      	cmp	r3, #0
240009ec:	d044      	beq.n	24000a78 <CheckSum+0x16c>
240009ee:	69bb      	ldr	r3, [r7, #24]
240009f0:	68ba      	ldr	r2, [r7, #8]
240009f2:	1ad3      	subs	r3, r2, r3
240009f4:	2b04      	cmp	r3, #4
240009f6:	d83f      	bhi.n	24000a78 <CheckSum+0x16c>
            switch (Size - missalignementSize) {
240009f8:	7fbb      	ldrb	r3, [r7, #30]
240009fa:	68ba      	ldr	r2, [r7, #8]
240009fc:	1ad3      	subs	r3, r2, r3
240009fe:	2b03      	cmp	r3, #3
24000a00:	d02f      	beq.n	24000a62 <CheckSum+0x156>
24000a02:	2b03      	cmp	r3, #3
24000a04:	d853      	bhi.n	24000aae <CheckSum+0x1a2>
24000a06:	2b01      	cmp	r3, #1
24000a08:	d002      	beq.n	24000a10 <CheckSum+0x104>
24000a0a:	2b02      	cmp	r3, #2
24000a0c:	d018      	beq.n	24000a40 <CheckSum+0x134>
24000a0e:	e04e      	b.n	24000aae <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) Val;
24000a10:	697b      	ldr	r3, [r7, #20]
24000a12:	b2db      	uxtb	r3, r3
24000a14:	461a      	mov	r2, r3
24000a16:	687b      	ldr	r3, [r7, #4]
24000a18:	4413      	add	r3, r2
24000a1a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a1c:	697b      	ldr	r3, [r7, #20]
24000a1e:	0a1b      	lsrs	r3, r3, #8
24000a20:	b2db      	uxtb	r3, r3
24000a22:	461a      	mov	r2, r3
24000a24:	687b      	ldr	r3, [r7, #4]
24000a26:	4413      	add	r3, r2
24000a28:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24000a2a:	697b      	ldr	r3, [r7, #20]
24000a2c:	0c1b      	lsrs	r3, r3, #16
24000a2e:	b2db      	uxtb	r3, r3
24000a30:	461a      	mov	r2, r3
24000a32:	687b      	ldr	r3, [r7, #4]
24000a34:	4413      	add	r3, r2
24000a36:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
24000a38:	7fbb      	ldrb	r3, [r7, #30]
24000a3a:	3b01      	subs	r3, #1
24000a3c:	77bb      	strb	r3, [r7, #30]
                    break;
24000a3e:	e01a      	b.n	24000a76 <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
24000a40:	697b      	ldr	r3, [r7, #20]
24000a42:	b2db      	uxtb	r3, r3
24000a44:	461a      	mov	r2, r3
24000a46:	687b      	ldr	r3, [r7, #4]
24000a48:	4413      	add	r3, r2
24000a4a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a4c:	697b      	ldr	r3, [r7, #20]
24000a4e:	0a1b      	lsrs	r3, r3, #8
24000a50:	b2db      	uxtb	r3, r3
24000a52:	461a      	mov	r2, r3
24000a54:	687b      	ldr	r3, [r7, #4]
24000a56:	4413      	add	r3, r2
24000a58:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
24000a5a:	7fbb      	ldrb	r3, [r7, #30]
24000a5c:	3b02      	subs	r3, #2
24000a5e:	77bb      	strb	r3, [r7, #30]
                    break;
24000a60:	e009      	b.n	24000a76 <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
24000a62:	697b      	ldr	r3, [r7, #20]
24000a64:	b2db      	uxtb	r3, r3
24000a66:	461a      	mov	r2, r3
24000a68:	687b      	ldr	r3, [r7, #4]
24000a6a:	4413      	add	r3, r2
24000a6c:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
24000a6e:	7fbb      	ldrb	r3, [r7, #30]
24000a70:	3b03      	subs	r3, #3
24000a72:	77bb      	strb	r3, [r7, #30]
                    break;
24000a74:	bf00      	nop
            switch (Size - missalignementSize) {
24000a76:	e01a      	b.n	24000aae <CheckSum+0x1a2>
            }
        } else {
            InitVal += (uint8_t) Val;
24000a78:	697b      	ldr	r3, [r7, #20]
24000a7a:	b2db      	uxtb	r3, r3
24000a7c:	461a      	mov	r2, r3
24000a7e:	687b      	ldr	r3, [r7, #4]
24000a80:	4413      	add	r3, r2
24000a82:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
24000a84:	697b      	ldr	r3, [r7, #20]
24000a86:	0a1b      	lsrs	r3, r3, #8
24000a88:	b2db      	uxtb	r3, r3
24000a8a:	461a      	mov	r2, r3
24000a8c:	687b      	ldr	r3, [r7, #4]
24000a8e:	4413      	add	r3, r2
24000a90:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
24000a92:	697b      	ldr	r3, [r7, #20]
24000a94:	0c1b      	lsrs	r3, r3, #16
24000a96:	b2db      	uxtb	r3, r3
24000a98:	461a      	mov	r2, r3
24000a9a:	687b      	ldr	r3, [r7, #4]
24000a9c:	4413      	add	r3, r2
24000a9e:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
24000aa0:	697b      	ldr	r3, [r7, #20]
24000aa2:	0e1b      	lsrs	r3, r3, #24
24000aa4:	b2db      	uxtb	r3, r3
24000aa6:	461a      	mov	r2, r3
24000aa8:	687b      	ldr	r3, [r7, #4]
24000aaa:	4413      	add	r3, r2
24000aac:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
24000aae:	68fb      	ldr	r3, [r7, #12]
24000ab0:	3304      	adds	r3, #4
24000ab2:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4) {
24000ab4:	69bb      	ldr	r3, [r7, #24]
24000ab6:	3304      	adds	r3, #4
24000ab8:	61bb      	str	r3, [r7, #24]
24000aba:	69bb      	ldr	r3, [r7, #24]
24000abc:	68ba      	ldr	r2, [r7, #8]
24000abe:	429a      	cmp	r2, r3
24000ac0:	f63f af47 	bhi.w	24000952 <CheckSum+0x46>
    }

    return (InitVal);
24000ac4:	687b      	ldr	r3, [r7, #4]
}
24000ac6:	4618      	mov	r0, r3
24000ac8:	3724      	adds	r7, #36	; 0x24
24000aca:	46bd      	mov	sp, r7
24000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
24000ad0:	4770      	bx	lr

24000ad2 <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t
Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
24000ad2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24000ad6:	b08c      	sub	sp, #48	; 0x30
24000ad8:	af00      	add	r7, sp, #0
24000ada:	60f8      	str	r0, [r7, #12]
24000adc:	60b9      	str	r1, [r7, #8]
24000ade:	607a      	str	r2, [r7, #4]
24000ae0:	603b      	str	r3, [r7, #0]
24000ae2:	2300      	movs	r3, #0
24000ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000ae6:	69fb      	ldr	r3, [r7, #28]
24000ae8:	f383 8810 	msr	PRIMASK, r3
}
24000aec:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
24000aee:	2300      	movs	r3, #0
24000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
24000af2:	2300      	movs	r3, #0
24000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint64_t checksum;
    Size *= 4;
24000af6:	687b      	ldr	r3, [r7, #4]
24000af8:	009b      	lsls	r3, r3, #2
24000afa:	607b      	str	r3, [r7, #4]

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000afc:	f000 fce0 	bl	240014c0 <CSP_QSPI_EnableMemoryMappedMode>
24000b00:	4603      	mov	r3, r0
24000b02:	2b00      	cmp	r3, #0
24000b04:	d00a      	beq.n	24000b1c <Verify+0x4a>
24000b06:	2301      	movs	r3, #1
24000b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000b0a:	69bb      	ldr	r3, [r7, #24]
24000b0c:	f383 8810 	msr	PRIMASK, r3
}
24000b10:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
24000b12:	f04f 0400 	mov.w	r4, #0
24000b16:	f04f 0500 	mov.w	r5, #0
24000b1a:	e04d      	b.n	24000bb8 <Verify+0xe6>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000b1c:	683b      	ldr	r3, [r7, #0]
24000b1e:	f003 020f 	and.w	r2, r3, #15
24000b22:	68fb      	ldr	r3, [r7, #12]
24000b24:	18d0      	adds	r0, r2, r3
                        Size - ((missalignement >> 16) & 0xF), InitVal);
24000b26:	683b      	ldr	r3, [r7, #0]
24000b28:	0c1b      	lsrs	r3, r3, #16
24000b2a:	f003 030f 	and.w	r3, r3, #15
    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000b2e:	687a      	ldr	r2, [r7, #4]
24000b30:	1ad3      	subs	r3, r2, r3
24000b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
24000b34:	4619      	mov	r1, r3
24000b36:	f7ff fee9 	bl	2400090c <CheckSum>
24000b3a:	4603      	mov	r3, r0
24000b3c:	2200      	movs	r2, #0
24000b3e:	469a      	mov	sl, r3
24000b40:	4693      	mov	fp, r2
24000b42:	e9c7 ab08 	strd	sl, fp, [r7, #32]
    while (Size > VerifiedData) {
24000b46:	e025      	b.n	24000b94 <Verify+0xc2>
        if (*(uint8_t*) MemoryAddr++
24000b48:	68fb      	ldr	r3, [r7, #12]
24000b4a:	1c5a      	adds	r2, r3, #1
24000b4c:	60fa      	str	r2, [r7, #12]
24000b4e:	781a      	ldrb	r2, [r3, #0]
            != *((uint8_t*) RAMBufferAddr + VerifiedData)) {
24000b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000b52:	68bb      	ldr	r3, [r7, #8]
24000b54:	440b      	add	r3, r1
24000b56:	781b      	ldrb	r3, [r3, #0]
        if (*(uint8_t*) MemoryAddr++
24000b58:	429a      	cmp	r2, r3
24000b5a:	d018      	beq.n	24000b8e <Verify+0xbc>
24000b5c:	2301      	movs	r3, #1
24000b5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000b60:	697b      	ldr	r3, [r7, #20]
24000b62:	f383 8810 	msr	PRIMASK, r3
}
24000b66:	bf00      	nop
            __set_PRIMASK(1); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
24000b68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
24000b6c:	f04f 0200 	mov.w	r2, #0
24000b70:	f04f 0300 	mov.w	r3, #0
24000b74:	0003      	movs	r3, r0
24000b76:	2200      	movs	r2, #0
24000b78:	68f8      	ldr	r0, [r7, #12]
24000b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000b7c:	4401      	add	r1, r0
24000b7e:	2000      	movs	r0, #0
24000b80:	4688      	mov	r8, r1
24000b82:	4681      	mov	r9, r0
24000b84:	eb12 0408 	adds.w	r4, r2, r8
24000b88:	eb43 0509 	adc.w	r5, r3, r9
24000b8c:	e014      	b.n	24000bb8 <Verify+0xe6>
        }
        VerifiedData++;
24000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b90:	3301      	adds	r3, #1
24000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Size > VerifiedData) {
24000b94:	687a      	ldr	r2, [r7, #4]
24000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b98:	429a      	cmp	r2, r3
24000b9a:	d8d5      	bhi.n	24000b48 <Verify+0x76>
24000b9c:	2301      	movs	r3, #1
24000b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000ba0:	693b      	ldr	r3, [r7, #16]
24000ba2:	f383 8810 	msr	PRIMASK, r3
}
24000ba6:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return (checksum << 32);
24000ba8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
24000bac:	f04f 0400 	mov.w	r4, #0
24000bb0:	f04f 0500 	mov.w	r5, #0
24000bb4:	0015      	movs	r5, r2
24000bb6:	2400      	movs	r4, #0
}
24000bb8:	4622      	mov	r2, r4
24000bba:	462b      	mov	r3, r5
24000bbc:	4610      	mov	r0, r2
24000bbe:	4619      	mov	r1, r3
24000bc0:	3730      	adds	r7, #48	; 0x30
24000bc2:	46bd      	mov	sp, r7
24000bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

24000bc8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
24000bc8:	b480      	push	{r7}
24000bca:	b087      	sub	sp, #28
24000bcc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000bce:	4b28      	ldr	r3, [pc, #160]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bd4:	4a26      	ldr	r2, [pc, #152]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000bd6:	f043 0310 	orr.w	r3, r3, #16
24000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000bde:	4b24      	ldr	r3, [pc, #144]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000be4:	f003 0310 	and.w	r3, r3, #16
24000be8:	617b      	str	r3, [r7, #20]
24000bea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000bec:	4b20      	ldr	r3, [pc, #128]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bf2:	4a1f      	ldr	r2, [pc, #124]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000bfc:	4b1c      	ldr	r3, [pc, #112]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
24000c06:	613b      	str	r3, [r7, #16]
24000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000c0a:	4b19      	ldr	r3, [pc, #100]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c10:	4a17      	ldr	r2, [pc, #92]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c12:	f043 0301 	orr.w	r3, r3, #1
24000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c1a:	4b15      	ldr	r3, [pc, #84]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c20:	f003 0301 	and.w	r3, r3, #1
24000c24:	60fb      	str	r3, [r7, #12]
24000c26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000c28:	4b11      	ldr	r3, [pc, #68]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c2e:	4a10      	ldr	r2, [pc, #64]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c30:	f043 0302 	orr.w	r3, r3, #2
24000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c38:	4b0d      	ldr	r3, [pc, #52]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c3e:	f003 0302 	and.w	r3, r3, #2
24000c42:	60bb      	str	r3, [r7, #8]
24000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000c46:	4b0a      	ldr	r3, [pc, #40]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c4c:	4a08      	ldr	r2, [pc, #32]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c4e:	f043 0304 	orr.w	r3, r3, #4
24000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000c56:	4b06      	ldr	r3, [pc, #24]	; (24000c70 <MX_GPIO_Init+0xa8>)
24000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000c5c:	f003 0304 	and.w	r3, r3, #4
24000c60:	607b      	str	r3, [r7, #4]
24000c62:	687b      	ldr	r3, [r7, #4]

}
24000c64:	bf00      	nop
24000c66:	371c      	adds	r7, #28
24000c68:	46bd      	mov	sp, r7
24000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
24000c6e:	4770      	bx	lr
24000c70:	58024400 	.word	0x58024400

24000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24000c74:	b580      	push	{r7, lr}
24000c76:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24000c78:	4b2f      	ldr	r3, [pc, #188]	; (24000d38 <main+0xc4>)
24000c7a:	695b      	ldr	r3, [r3, #20]
24000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24000c80:	2b00      	cmp	r3, #0
24000c82:	d11b      	bne.n	24000cbc <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24000c84:	f3bf 8f4f 	dsb	sy
}
24000c88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000c8a:	f3bf 8f6f 	isb	sy
}
24000c8e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24000c90:	4b29      	ldr	r3, [pc, #164]	; (24000d38 <main+0xc4>)
24000c92:	2200      	movs	r2, #0
24000c94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24000c98:	f3bf 8f4f 	dsb	sy
}
24000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000c9e:	f3bf 8f6f 	isb	sy
}
24000ca2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24000ca4:	4b24      	ldr	r3, [pc, #144]	; (24000d38 <main+0xc4>)
24000ca6:	695b      	ldr	r3, [r3, #20]
24000ca8:	4a23      	ldr	r2, [pc, #140]	; (24000d38 <main+0xc4>)
24000caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24000cae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24000cb0:	f3bf 8f4f 	dsb	sy
}
24000cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24000cb6:	f3bf 8f6f 	isb	sy
}
24000cba:	e000      	b.n	24000cbe <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24000cbc:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24000cbe:	f001 f953 	bl	24001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24000cc2:	f000 f83f 	bl	24000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24000cc6:	f7ff ff7f 	bl	24000bc8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
24000cca:	f000 f8c7 	bl	24000e5c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */


  if (CSP_QUADSPI_Init() != HAL_OK)
24000cce:	f000 fa21 	bl	24001114 <CSP_QUADSPI_Init>
24000cd2:	4603      	mov	r3, r0
24000cd4:	2b00      	cmp	r3, #0
24000cd6:	d001      	beq.n	24000cdc <main+0x68>
  {
	  Error_Handler();
24000cd8:	f000 f8ba 	bl	24000e50 <Error_Handler>
  }

	/****************** FOR SIMPLE WRITE READ ********************/
		// Comment out these if you are using the EXT MEM BOOT
// CHANGE !!!!!  HAL_QSPI_TIMEOUT_DEFAULT_VALUE   !!!! TO 250 seconds
	  if (CSP_QSPI_Erase_Chip() != HAL_OK)
24000cdc:	f000 fa50 	bl	24001180 <CSP_QSPI_Erase_Chip>
24000ce0:	4603      	mov	r3, r0
24000ce2:	2b00      	cmp	r3, #0
24000ce4:	d001      	beq.n	24000cea <main+0x76>
	  {
		  Error_Handler();
24000ce6:	f000 f8b3 	bl	24000e50 <Error_Handler>
	  }


	  if (CSP_QSPI_WriteMemory((uint8_t*)writebuf, 0, strlen(writebuf)) != HAL_OK)
24000cea:	4814      	ldr	r0, [pc, #80]	; (24000d3c <main+0xc8>)
24000cec:	f7ff fd0a 	bl	24000704 <strlen>
24000cf0:	4603      	mov	r3, r0
24000cf2:	461a      	mov	r2, r3
24000cf4:	2100      	movs	r1, #0
24000cf6:	4811      	ldr	r0, [pc, #68]	; (24000d3c <main+0xc8>)
24000cf8:	f000 fcb4 	bl	24001664 <CSP_QSPI_WriteMemory>
24000cfc:	4603      	mov	r3, r0
24000cfe:	2b00      	cmp	r3, #0
24000d00:	d001      	beq.n	24000d06 <main+0x92>
	  {
		  Error_Handler();
24000d02:	f000 f8a5 	bl	24000e50 <Error_Handler>
	  }

	  if (CSP_QSPI_ReadMemory((uint8_t*)readbuf, 0, 100) != HAL_OK)
24000d06:	2264      	movs	r2, #100	; 0x64
24000d08:	2100      	movs	r1, #0
24000d0a:	480d      	ldr	r0, [pc, #52]	; (24000d40 <main+0xcc>)
24000d0c:	f000 fd24 	bl	24001758 <CSP_QSPI_ReadMemory>
24000d10:	4603      	mov	r3, r0
24000d12:	2b00      	cmp	r3, #0
24000d14:	d001      	beq.n	24000d1a <main+0xa6>
	  {
		  Error_Handler();
24000d16:	f000 f89b 	bl	24000e50 <Error_Handler>
   /***************************************************************/


	  /****************** FOR MEMORY MAPPED MODE ********************/

	  if(CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000d1a:	f000 fbd1 	bl	240014c0 <CSP_QSPI_EnableMemoryMappedMode>
24000d1e:	4603      	mov	r3, r0
24000d20:	2b00      	cmp	r3, #0
24000d22:	d001      	beq.n	24000d28 <main+0xb4>
		  Error_Handler();
24000d24:	f000 f894 	bl	24000e50 <Error_Handler>
	  }

	  memcpy(readbuf, (uint8_t *) 0x90000000, 30); // check memory connection
24000d28:	221e      	movs	r2, #30
24000d2a:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
24000d2e:	4804      	ldr	r0, [pc, #16]	; (24000d40 <main+0xcc>)
24000d30:	f016 f85a 	bl	24016de8 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
24000d34:	e7fe      	b.n	24000d34 <main+0xc0>
24000d36:	bf00      	nop
24000d38:	e000ed00 	.word	0xe000ed00
24000d3c:	240004ac 	.word	0x240004ac
24000d40:	24000558 	.word	0x24000558

24000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24000d44:	b580      	push	{r7, lr}
24000d46:	b09c      	sub	sp, #112	; 0x70
24000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
24000d4e:	224c      	movs	r2, #76	; 0x4c
24000d50:	2100      	movs	r1, #0
24000d52:	4618      	mov	r0, r3
24000d54:	f016 f856 	bl	24016e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24000d58:	1d3b      	adds	r3, r7, #4
24000d5a:	2220      	movs	r2, #32
24000d5c:	2100      	movs	r1, #0
24000d5e:	4618      	mov	r0, r3
24000d60:	f016 f850 	bl	24016e04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24000d64:	2002      	movs	r0, #2
24000d66:	f00f fe2f 	bl	240109c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24000d6a:	2300      	movs	r3, #0
24000d6c:	603b      	str	r3, [r7, #0]
24000d6e:	4b35      	ldr	r3, [pc, #212]	; (24000e44 <SystemClock_Config+0x100>)
24000d70:	699b      	ldr	r3, [r3, #24]
24000d72:	4a34      	ldr	r2, [pc, #208]	; (24000e44 <SystemClock_Config+0x100>)
24000d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000d78:	6193      	str	r3, [r2, #24]
24000d7a:	4b32      	ldr	r3, [pc, #200]	; (24000e44 <SystemClock_Config+0x100>)
24000d7c:	699b      	ldr	r3, [r3, #24]
24000d7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000d82:	603b      	str	r3, [r7, #0]
24000d84:	4b30      	ldr	r3, [pc, #192]	; (24000e48 <SystemClock_Config+0x104>)
24000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000d88:	4a2f      	ldr	r2, [pc, #188]	; (24000e48 <SystemClock_Config+0x104>)
24000d8a:	f043 0301 	orr.w	r3, r3, #1
24000d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
24000d90:	4b2d      	ldr	r3, [pc, #180]	; (24000e48 <SystemClock_Config+0x104>)
24000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000d94:	f003 0301 	and.w	r3, r3, #1
24000d98:	603b      	str	r3, [r7, #0]
24000d9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24000d9c:	bf00      	nop
24000d9e:	4b29      	ldr	r3, [pc, #164]	; (24000e44 <SystemClock_Config+0x100>)
24000da0:	699b      	ldr	r3, [r3, #24]
24000da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000daa:	d1f8      	bne.n	24000d9e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
24000dac:	4b27      	ldr	r3, [pc, #156]	; (24000e4c <SystemClock_Config+0x108>)
24000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24000db0:	f023 0303 	bic.w	r3, r3, #3
24000db4:	4a25      	ldr	r2, [pc, #148]	; (24000e4c <SystemClock_Config+0x108>)
24000db6:	f043 0302 	orr.w	r3, r3, #2
24000dba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
24000dbc:	2301      	movs	r3, #1
24000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000dc6:	2302      	movs	r3, #2
24000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000dca:	2302      	movs	r3, #2
24000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
24000dce:	2304      	movs	r3, #4
24000dd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
24000dd2:	23a0      	movs	r3, #160	; 0xa0
24000dd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
24000dd6:	2302      	movs	r3, #2
24000dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
24000dda:	2302      	movs	r3, #2
24000ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
24000dde:	2302      	movs	r3, #2
24000de0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24000de2:	2308      	movs	r3, #8
24000de4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000de6:	2300      	movs	r3, #0
24000de8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000dea:	2300      	movs	r3, #0
24000dec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
24000df2:	4618      	mov	r0, r3
24000df4:	f012 f8bc 	bl	24012f70 <HAL_RCC_OscConfig>
24000df8:	4603      	mov	r3, r0
24000dfa:	2b00      	cmp	r3, #0
24000dfc:	d001      	beq.n	24000e02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
24000dfe:	f000 f827 	bl	24000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24000e02:	233f      	movs	r3, #63	; 0x3f
24000e04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000e06:	2303      	movs	r3, #3
24000e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000e0a:	2300      	movs	r3, #0
24000e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000e0e:	2308      	movs	r3, #8
24000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24000e12:	2340      	movs	r3, #64	; 0x40
24000e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000e16:	2340      	movs	r3, #64	; 0x40
24000e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000e1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000e20:	2340      	movs	r3, #64	; 0x40
24000e22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000e24:	1d3b      	adds	r3, r7, #4
24000e26:	2104      	movs	r1, #4
24000e28:	4618      	mov	r0, r3
24000e2a:	f012 fccf 	bl	240137cc <HAL_RCC_ClockConfig>
24000e2e:	4603      	mov	r3, r0
24000e30:	2b00      	cmp	r3, #0
24000e32:	d001      	beq.n	24000e38 <SystemClock_Config+0xf4>
  {
    Error_Handler();
24000e34:	f000 f80c 	bl	24000e50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
24000e38:	f012 fee8 	bl	24013c0c <HAL_RCC_EnableCSS>
}
24000e3c:	bf00      	nop
24000e3e:	3770      	adds	r7, #112	; 0x70
24000e40:	46bd      	mov	sp, r7
24000e42:	bd80      	pop	{r7, pc}
24000e44:	58024800 	.word	0x58024800
24000e48:	58000400 	.word	0x58000400
24000e4c:	58024400 	.word	0x58024400

24000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24000e50:	b480      	push	{r7}
24000e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
24000e54:	b672      	cpsid	i
}
24000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
24000e58:	e7fe      	b.n	24000e58 <Error_Handler+0x8>
	...

24000e5c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24000e5c:	b580      	push	{r7, lr}
24000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24000e60:	4b12      	ldr	r3, [pc, #72]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e62:	4a13      	ldr	r2, [pc, #76]	; (24000eb0 <MX_QUADSPI_Init+0x54>)
24000e64:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
24000e66:	4b11      	ldr	r3, [pc, #68]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e68:	2201      	movs	r2, #1
24000e6a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
24000e6c:	4b0f      	ldr	r3, [pc, #60]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e6e:	2204      	movs	r2, #4
24000e70:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
24000e72:	4b0e      	ldr	r3, [pc, #56]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e74:	2210      	movs	r2, #16
24000e76:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
24000e78:	4b0c      	ldr	r3, [pc, #48]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e7a:	2217      	movs	r2, #23
24000e7c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
24000e7e:	4b0b      	ldr	r3, [pc, #44]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e80:	f44f 62a0 	mov.w	r2, #1280	; 0x500
24000e84:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
24000e86:	4b09      	ldr	r3, [pc, #36]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e88:	2200      	movs	r2, #0
24000e8a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24000e8c:	4b07      	ldr	r3, [pc, #28]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e8e:	2200      	movs	r2, #0
24000e90:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24000e92:	4b06      	ldr	r3, [pc, #24]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e94:	2200      	movs	r2, #0
24000e96:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24000e98:	4804      	ldr	r0, [pc, #16]	; (24000eac <MX_QUADSPI_Init+0x50>)
24000e9a:	f010 facb 	bl	24011434 <HAL_QSPI_Init>
24000e9e:	4603      	mov	r3, r0
24000ea0:	2b00      	cmp	r3, #0
24000ea2:	d001      	beq.n	24000ea8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
24000ea4:	f7ff ffd4 	bl	24000e50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24000ea8:	bf00      	nop
24000eaa:	bd80      	pop	{r7, pc}
24000eac:	240005c0 	.word	0x240005c0
24000eb0:	52005000 	.word	0x52005000

24000eb4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24000eb4:	b580      	push	{r7, lr}
24000eb6:	b0bc      	sub	sp, #240	; 0xf0
24000eb8:	af00      	add	r7, sp, #0
24000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000ebc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24000ec0:	2200      	movs	r2, #0
24000ec2:	601a      	str	r2, [r3, #0]
24000ec4:	605a      	str	r2, [r3, #4]
24000ec6:	609a      	str	r2, [r3, #8]
24000ec8:	60da      	str	r2, [r3, #12]
24000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000ecc:	f107 0320 	add.w	r3, r7, #32
24000ed0:	22bc      	movs	r2, #188	; 0xbc
24000ed2:	2100      	movs	r1, #0
24000ed4:	4618      	mov	r0, r3
24000ed6:	f015 ff95 	bl	24016e04 <memset>
  if(qspiHandle->Instance==QUADSPI)
24000eda:	687b      	ldr	r3, [r7, #4]
24000edc:	681b      	ldr	r3, [r3, #0]
24000ede:	4a6e      	ldr	r2, [pc, #440]	; (24001098 <HAL_QSPI_MspInit+0x1e4>)
24000ee0:	4293      	cmp	r3, r2
24000ee2:	f040 80d4 	bne.w	2400108e <HAL_QSPI_MspInit+0x1da>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24000ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24000eea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
24000eec:	2304      	movs	r3, #4
24000eee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2N = 108;
24000ef0:	236c      	movs	r3, #108	; 0x6c
24000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2P = 2;
24000ef4:	2302      	movs	r3, #2
24000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
24000ef8:	2302      	movs	r3, #2
24000efa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 3;
24000efc:	2303      	movs	r3, #3
24000efe:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
24000f00:	2380      	movs	r3, #128	; 0x80
24000f02:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
24000f04:	2300      	movs	r3, #0
24000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
24000f08:	2300      	movs	r3, #0
24000f0a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
24000f0c:	2320      	movs	r3, #32
24000f0e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000f10:	f107 0320 	add.w	r3, r7, #32
24000f14:	4618      	mov	r0, r3
24000f16:	f013 f9bb 	bl	24014290 <HAL_RCCEx_PeriphCLKConfig>
24000f1a:	4603      	mov	r3, r0
24000f1c:	2b00      	cmp	r3, #0
24000f1e:	d001      	beq.n	24000f24 <HAL_QSPI_MspInit+0x70>
    {
      Error_Handler();
24000f20:	f7ff ff96 	bl	24000e50 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
24000f24:	4b5d      	ldr	r3, [pc, #372]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000f2a:	4a5c      	ldr	r2, [pc, #368]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24000f30:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24000f34:	4b59      	ldr	r3, [pc, #356]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24000f3e:	61fb      	str	r3, [r7, #28]
24000f40:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
24000f42:	4b56      	ldr	r3, [pc, #344]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f48:	4a54      	ldr	r2, [pc, #336]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f4a:	f043 0310 	orr.w	r3, r3, #16
24000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f52:	4b52      	ldr	r3, [pc, #328]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f58:	f003 0310 	and.w	r3, r3, #16
24000f5c:	61bb      	str	r3, [r7, #24]
24000f5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000f60:	4b4e      	ldr	r3, [pc, #312]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f66:	4a4d      	ldr	r2, [pc, #308]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f68:	f043 0301 	orr.w	r3, r3, #1
24000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f70:	4b4a      	ldr	r3, [pc, #296]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f76:	f003 0301 	and.w	r3, r3, #1
24000f7a:	617b      	str	r3, [r7, #20]
24000f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000f7e:	4b47      	ldr	r3, [pc, #284]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f84:	4a45      	ldr	r2, [pc, #276]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f86:	f043 0302 	orr.w	r3, r3, #2
24000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f8e:	4b43      	ldr	r3, [pc, #268]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f94:	f003 0302 	and.w	r3, r3, #2
24000f98:	613b      	str	r3, [r7, #16]
24000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24000f9c:	4b3f      	ldr	r3, [pc, #252]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000fa2:	4a3e      	ldr	r2, [pc, #248]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000fa4:	f043 0304 	orr.w	r3, r3, #4
24000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000fac:	4b3b      	ldr	r3, [pc, #236]	; (2400109c <HAL_QSPI_MspInit+0x1e8>)
24000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000fb2:	f003 0304 	and.w	r3, r3, #4
24000fb6:	60fb      	str	r3, [r7, #12]
24000fb8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24000fba:	2304      	movs	r3, #4
24000fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000fc0:	2302      	movs	r3, #2
24000fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000fc6:	2300      	movs	r3, #0
24000fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000fcc:	2303      	movs	r3, #3
24000fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000fd2:	2309      	movs	r3, #9
24000fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000fd8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24000fdc:	4619      	mov	r1, r3
24000fde:	4830      	ldr	r0, [pc, #192]	; (240010a0 <HAL_QSPI_MspInit+0x1ec>)
24000fe0:	f008 faba 	bl	24009558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
24000fe4:	2302      	movs	r3, #2
24000fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000fea:	2302      	movs	r3, #2
24000fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000ff0:	2300      	movs	r3, #0
24000ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000ff6:	2303      	movs	r3, #3
24000ff8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000ffc:	2309      	movs	r3, #9
24000ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001002:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001006:	4619      	mov	r1, r3
24001008:	4826      	ldr	r0, [pc, #152]	; (240010a4 <HAL_QSPI_MspInit+0x1f0>)
2400100a:	f008 faa5 	bl	24009558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400100e:	2304      	movs	r3, #4
24001010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001014:	2302      	movs	r3, #2
24001016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400101a:	2300      	movs	r3, #0
2400101c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001020:	2303      	movs	r3, #3
24001022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24001026:	2309      	movs	r3, #9
24001028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400102c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001030:	4619      	mov	r1, r3
24001032:	481d      	ldr	r0, [pc, #116]	; (240010a8 <HAL_QSPI_MspInit+0x1f4>)
24001034:	f008 fa90 	bl	24009558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
24001038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
2400103c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001040:	2302      	movs	r3, #2
24001042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24001046:	2300      	movs	r3, #0
24001048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2400104c:	2303      	movs	r3, #3
2400104e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24001052:	2309      	movs	r3, #9
24001054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001058:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2400105c:	4619      	mov	r1, r3
2400105e:	4813      	ldr	r0, [pc, #76]	; (240010ac <HAL_QSPI_MspInit+0x1f8>)
24001060:	f008 fa7a 	bl	24009558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
24001064:	2340      	movs	r3, #64	; 0x40
24001066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400106a:	2302      	movs	r3, #2
2400106c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24001070:	2300      	movs	r3, #0
24001072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001076:	2303      	movs	r3, #3
24001078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
2400107c:	230a      	movs	r3, #10
2400107e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001082:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24001086:	4619      	mov	r1, r3
24001088:	4807      	ldr	r0, [pc, #28]	; (240010a8 <HAL_QSPI_MspInit+0x1f4>)
2400108a:	f008 fa65 	bl	24009558 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
2400108e:	bf00      	nop
24001090:	37f0      	adds	r7, #240	; 0xf0
24001092:	46bd      	mov	sp, r7
24001094:	bd80      	pop	{r7, pc}
24001096:	bf00      	nop
24001098:	52005000 	.word	0x52005000
2400109c:	58024400 	.word	0x58024400
240010a0:	58021000 	.word	0x58021000
240010a4:	58020000 	.word	0x58020000
240010a8:	58020400 	.word	0x58020400
240010ac:	58020800 	.word	0x58020800

240010b0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
240010b0:	b580      	push	{r7, lr}
240010b2:	b082      	sub	sp, #8
240010b4:	af00      	add	r7, sp, #0
240010b6:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
240010b8:	687b      	ldr	r3, [r7, #4]
240010ba:	681b      	ldr	r3, [r3, #0]
240010bc:	4a0f      	ldr	r2, [pc, #60]	; (240010fc <HAL_QSPI_MspDeInit+0x4c>)
240010be:	4293      	cmp	r3, r2
240010c0:	d118      	bne.n	240010f4 <HAL_QSPI_MspDeInit+0x44>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
240010c2:	4b0f      	ldr	r3, [pc, #60]	; (24001100 <HAL_QSPI_MspDeInit+0x50>)
240010c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
240010c8:	4a0d      	ldr	r2, [pc, #52]	; (24001100 <HAL_QSPI_MspDeInit+0x50>)
240010ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240010ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PB2     ------> QUADSPI_CLK
    PC9     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
240010d2:	2104      	movs	r1, #4
240010d4:	480b      	ldr	r0, [pc, #44]	; (24001104 <HAL_QSPI_MspDeInit+0x54>)
240010d6:	f008 fbef 	bl	240098b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
240010da:	2102      	movs	r1, #2
240010dc:	480a      	ldr	r0, [pc, #40]	; (24001108 <HAL_QSPI_MspDeInit+0x58>)
240010de:	f008 fbeb 	bl	240098b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
240010e2:	2144      	movs	r1, #68	; 0x44
240010e4:	4809      	ldr	r0, [pc, #36]	; (2400110c <HAL_QSPI_MspDeInit+0x5c>)
240010e6:	f008 fbe7 	bl	240098b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9|GPIO_PIN_10);
240010ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
240010ee:	4808      	ldr	r0, [pc, #32]	; (24001110 <HAL_QSPI_MspDeInit+0x60>)
240010f0:	f008 fbe2 	bl	240098b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
240010f4:	bf00      	nop
240010f6:	3708      	adds	r7, #8
240010f8:	46bd      	mov	sp, r7
240010fa:	bd80      	pop	{r7, pc}
240010fc:	52005000 	.word	0x52005000
24001100:	58024400 	.word	0x58024400
24001104:	58021000 	.word	0x58021000
24001108:	58020000 	.word	0x58020000
2400110c:	58020400 	.word	0x58020400
24001110:	58020800 	.word	0x58020800

24001114 <CSP_QUADSPI_Init>:
///////////////////////////////////////////////////////////////////

/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
24001114:	b580      	push	{r7, lr}
24001116:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
24001118:	4b17      	ldr	r3, [pc, #92]	; (24001178 <CSP_QUADSPI_Init+0x64>)
2400111a:	4a18      	ldr	r2, [pc, #96]	; (2400117c <CSP_QUADSPI_Init+0x68>)
2400111c:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
2400111e:	4816      	ldr	r0, [pc, #88]	; (24001178 <CSP_QUADSPI_Init+0x64>)
24001120:	f010 f9fc 	bl	2401151c <HAL_QSPI_DeInit>
24001124:	4603      	mov	r3, r0
24001126:	2b00      	cmp	r3, #0
24001128:	d001      	beq.n	2400112e <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
2400112a:	2301      	movs	r3, #1
2400112c:	e021      	b.n	24001172 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
2400112e:	f7ff fe95 	bl	24000e5c <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
24001132:	f000 f9f9 	bl	24001528 <QSPI_ResetChip>
24001136:	4603      	mov	r3, r0
24001138:	2b00      	cmp	r3, #0
2400113a:	d001      	beq.n	24001140 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
2400113c:	2301      	movs	r3, #1
2400113e:	e018      	b.n	24001172 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
24001140:	2001      	movs	r0, #1
24001142:	f001 f84f 	bl	240021e4 <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
24001146:	f000 f857 	bl	240011f8 <QSPI_AutoPollingMemReady>
2400114a:	4603      	mov	r3, r0
2400114c:	2b00      	cmp	r3, #0
2400114e:	d001      	beq.n	24001154 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
24001150:	2301      	movs	r3, #1
24001152:	e00e      	b.n	24001172 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
24001154:	f000 f88a 	bl	2400126c <QSPI_WriteEnable>
24001158:	4603      	mov	r3, r0
2400115a:	2b00      	cmp	r3, #0
2400115c:	d001      	beq.n	24001162 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
2400115e:	2301      	movs	r3, #1
24001160:	e007      	b.n	24001172 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
24001162:	f000 f8cd 	bl	24001300 <QSPI_Configuration>
24001166:	4603      	mov	r3, r0
24001168:	2b00      	cmp	r3, #0
2400116a:	d001      	beq.n	24001170 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
2400116c:	2301      	movs	r3, #1
2400116e:	e000      	b.n	24001172 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
24001170:	2300      	movs	r3, #0
}
24001172:	4618      	mov	r0, r3
24001174:	bd80      	pop	{r7, pc}
24001176:	bf00      	nop
24001178:	240005c0 	.word	0x240005c0
2400117c:	52005000 	.word	0x52005000

24001180 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void)
{
24001180:	b580      	push	{r7, lr}
24001182:	b08e      	sub	sp, #56	; 0x38
24001184:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
24001186:	f000 f871 	bl	2400126c <QSPI_WriteEnable>
2400118a:	4603      	mov	r3, r0
2400118c:	2b00      	cmp	r3, #0
2400118e:	d001      	beq.n	24001194 <CSP_QSPI_Erase_Chip+0x14>
        return HAL_ERROR;
24001190:	2301      	movs	r3, #1
24001192:	e02b      	b.n	240011ec <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
24001194:	23c7      	movs	r3, #199	; 0xc7
24001196:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001198:	f44f 7380 	mov.w	r3, #256	; 0x100
2400119c:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240011a2:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240011a4:	2300      	movs	r3, #0
240011a6:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240011a8:	2300      	movs	r3, #0
240011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240011ac:	2300      	movs	r3, #0
240011ae:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240011b0:	2300      	movs	r3, #0
240011b2:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240011b4:	2300      	movs	r3, #0
240011b6:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
240011b8:	2300      	movs	r3, #0
240011ba:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
240011bc:	2300      	movs	r3, #0
240011be:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles = 0;
240011c0:	2300      	movs	r3, #0
240011c2:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240011c4:	463b      	mov	r3, r7
240011c6:	f241 3288 	movw	r2, #5000	; 0x1388
240011ca:	4619      	mov	r1, r3
240011cc:	4809      	ldr	r0, [pc, #36]	; (240011f4 <CSP_QSPI_Erase_Chip+0x74>)
240011ce:	f010 fb93 	bl	240118f8 <HAL_QSPI_Command>
240011d2:	4603      	mov	r3, r0
240011d4:	2b00      	cmp	r3, #0
240011d6:	d001      	beq.n	240011dc <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return HAL_ERROR;
240011d8:	2301      	movs	r3, #1
240011da:	e007      	b.n	240011ec <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
240011dc:	f000 f80c 	bl	240011f8 <QSPI_AutoPollingMemReady>
240011e0:	4603      	mov	r3, r0
240011e2:	2b00      	cmp	r3, #0
240011e4:	d001      	beq.n	240011ea <CSP_QSPI_Erase_Chip+0x6a>
        return HAL_ERROR;
240011e6:	2301      	movs	r3, #1
240011e8:	e000      	b.n	240011ec <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
240011ea:	2300      	movs	r3, #0
}
240011ec:	4618      	mov	r0, r3
240011ee:	3738      	adds	r7, #56	; 0x38
240011f0:	46bd      	mov	sp, r7
240011f2:	bd80      	pop	{r7, pc}
240011f4:	240005c0 	.word	0x240005c0

240011f8 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
240011f8:	b580      	push	{r7, lr}
240011fa:	b094      	sub	sp, #80	; 0x50
240011fc:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
24001202:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
24001204:	2305      	movs	r3, #5
24001206:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001208:	2300      	movs	r3, #0
2400120a:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400120c:	2300      	movs	r3, #0
2400120e:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
24001210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001214:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
24001216:	2300      	movs	r3, #0
24001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400121a:	2300      	movs	r3, #0
2400121c:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400121e:	2300      	movs	r3, #0
24001220:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001222:	2300      	movs	r3, #0
24001224:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
24001226:	2300      	movs	r3, #0
24001228:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
2400122a:	2301      	movs	r3, #1
2400122c:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
2400122e:	2300      	movs	r3, #0
24001230:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
24001232:	2301      	movs	r3, #1
24001234:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
24001236:	2310      	movs	r3, #16
24001238:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2400123a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400123e:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, N25Q128A_MAX_CHIPERASE_TIMEOUT) != HAL_OK)
24001240:	463a      	mov	r2, r7
24001242:	f107 0118 	add.w	r1, r7, #24
24001246:	4b07      	ldr	r3, [pc, #28]	; (24001264 <QSPI_AutoPollingMemReady+0x6c>)
24001248:	4807      	ldr	r0, [pc, #28]	; (24001268 <QSPI_AutoPollingMemReady+0x70>)
2400124a:	f010 ffff 	bl	2401224c <HAL_QSPI_AutoPolling>
2400124e:	4603      	mov	r3, r0
24001250:	2b00      	cmp	r3, #0
24001252:	d001      	beq.n	24001258 <QSPI_AutoPollingMemReady+0x60>
    {
        return HAL_ERROR;
24001254:	2301      	movs	r3, #1
24001256:	e000      	b.n	2400125a <QSPI_AutoPollingMemReady+0x62>
    }

    return HAL_OK;
24001258:	2300      	movs	r3, #0
}
2400125a:	4618      	mov	r0, r3
2400125c:	3750      	adds	r7, #80	; 0x50
2400125e:	46bd      	mov	sp, r7
24001260:	bd80      	pop	{r7, pc}
24001262:	bf00      	nop
24001264:	0003d090 	.word	0x0003d090
24001268:	240005c0 	.word	0x240005c0

2400126c <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
2400126c:	b580      	push	{r7, lr}
2400126e:	b094      	sub	sp, #80	; 0x50
24001270:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001272:	f44f 7380 	mov.w	r3, #256	; 0x100
24001276:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
24001278:	2306      	movs	r3, #6
2400127a:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400127c:	2300      	movs	r3, #0
2400127e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001280:	2300      	movs	r3, #0
24001282:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
24001284:	2300      	movs	r3, #0
24001286:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
24001288:	2300      	movs	r3, #0
2400128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400128c:	2300      	movs	r3, #0
2400128e:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001290:	2300      	movs	r3, #0
24001292:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001294:	2300      	movs	r3, #0
24001296:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001298:	f107 0318 	add.w	r3, r7, #24
2400129c:	f241 3288 	movw	r2, #5000	; 0x1388
240012a0:	4619      	mov	r1, r3
240012a2:	4816      	ldr	r0, [pc, #88]	; (240012fc <QSPI_WriteEnable+0x90>)
240012a4:	f010 fb28 	bl	240118f8 <HAL_QSPI_Command>
240012a8:	4603      	mov	r3, r0
240012aa:	2b00      	cmp	r3, #0
240012ac:	d001      	beq.n	240012b2 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
240012ae:	2301      	movs	r3, #1
240012b0:	e01f      	b.n	240012f2 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
240012b2:	2302      	movs	r3, #2
240012b4:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
240012b6:	2302      	movs	r3, #2
240012b8:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
240012ba:	2300      	movs	r3, #0
240012bc:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
240012be:	2301      	movs	r3, #1
240012c0:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
240012c2:	2310      	movs	r3, #16
240012c4:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
240012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240012ca:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
240012cc:	2305      	movs	r3, #5
240012ce:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
240012d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240012d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
240012d6:	463a      	mov	r2, r7
240012d8:	f107 0118 	add.w	r1, r7, #24
240012dc:	f241 3388 	movw	r3, #5000	; 0x1388
240012e0:	4806      	ldr	r0, [pc, #24]	; (240012fc <QSPI_WriteEnable+0x90>)
240012e2:	f010 ffb3 	bl	2401224c <HAL_QSPI_AutoPolling>
240012e6:	4603      	mov	r3, r0
240012e8:	2b00      	cmp	r3, #0
240012ea:	d001      	beq.n	240012f0 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
240012ec:	2301      	movs	r3, #1
240012ee:	e000      	b.n	240012f2 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
240012f0:	2300      	movs	r3, #0
}
240012f2:	4618      	mov	r0, r3
240012f4:	3750      	adds	r7, #80	; 0x50
240012f6:	46bd      	mov	sp, r7
240012f8:	bd80      	pop	{r7, pc}
240012fa:	bf00      	nop
240012fc:	240005c0 	.word	0x240005c0

24001300 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
24001300:	b580      	push	{r7, lr}
24001302:	b092      	sub	sp, #72	; 0x48
24001304:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001306:	f44f 7380 	mov.w	r3, #256	; 0x100
2400130a:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
2400130c:	2385      	movs	r3, #133	; 0x85
2400130e:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001310:	2300      	movs	r3, #0
24001312:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001314:	2300      	movs	r3, #0
24001316:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
24001318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400131c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
2400131e:	2300      	movs	r3, #0
24001320:	61bb      	str	r3, [r7, #24]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001322:	2300      	movs	r3, #0
24001324:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001326:	2300      	movs	r3, #0
24001328:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400132a:	2300      	movs	r3, #0
2400132c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.NbData = 1;
2400132e:	2301      	movs	r3, #1
24001330:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001332:	1d3b      	adds	r3, r7, #4
24001334:	f241 3288 	movw	r2, #5000	; 0x1388
24001338:	4619      	mov	r1, r3
2400133a:	4837      	ldr	r0, [pc, #220]	; (24001418 <QSPI_Configuration+0x118>)
2400133c:	f010 fadc 	bl	240118f8 <HAL_QSPI_Command>
24001340:	4603      	mov	r3, r0
24001342:	2b00      	cmp	r3, #0
24001344:	d001      	beq.n	2400134a <QSPI_Configuration+0x4a>
        != HAL_OK) {
        return HAL_ERROR;
24001346:	2301      	movs	r3, #1
24001348:	e061      	b.n	2400140e <QSPI_Configuration+0x10e>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
2400134a:	1cfb      	adds	r3, r7, #3
2400134c:	f241 3288 	movw	r2, #5000	; 0x1388
24001350:	4619      	mov	r1, r3
24001352:	4831      	ldr	r0, [pc, #196]	; (24001418 <QSPI_Configuration+0x118>)
24001354:	f010 fc26 	bl	24011ba4 <HAL_QSPI_Receive>
24001358:	4603      	mov	r3, r0
2400135a:	2b00      	cmp	r3, #0
2400135c:	d001      	beq.n	24001362 <QSPI_Configuration+0x62>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
2400135e:	2301      	movs	r3, #1
24001360:	e055      	b.n	2400140e <QSPI_Configuration+0x10e>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
24001362:	f7ff ff83 	bl	2400126c <QSPI_WriteEnable>
24001366:	4603      	mov	r3, r0
24001368:	2b00      	cmp	r3, #0
2400136a:	d001      	beq.n	24001370 <QSPI_Configuration+0x70>

        return HAL_ERROR;
2400136c:	2301      	movs	r3, #1
2400136e:	e04e      	b.n	2400140e <QSPI_Configuration+0x10e>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
24001370:	78fb      	ldrb	r3, [r7, #3]
24001372:	b25b      	sxtb	r3, r3
24001374:	f003 030f 	and.w	r3, r3, #15
24001378:	b25a      	sxtb	r2, r3
2400137a:	23f0      	movs	r3, #240	; 0xf0
2400137c:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2400137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24001380:	fa93 f3a3 	rbit	r3, r3
24001384:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24001386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001388:	647b      	str	r3, [r7, #68]	; 0x44
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
2400138a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2400138c:	2b00      	cmp	r3, #0
2400138e:	d101      	bne.n	24001394 <QSPI_Configuration+0x94>
  {
    return 32U;
24001390:	2320      	movs	r3, #32
24001392:	e003      	b.n	2400139c <QSPI_Configuration+0x9c>
  }
  return __builtin_clz(value);
24001394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24001396:	fab3 f383 	clz	r3, r3
2400139a:	b2db      	uxtb	r3, r3
2400139c:	4619      	mov	r1, r3
2400139e:	230a      	movs	r3, #10
240013a0:	408b      	lsls	r3, r1
240013a2:	b25b      	sxtb	r3, r3
240013a4:	4313      	orrs	r3, r2
240013a6:	b25b      	sxtb	r3, r3
240013a8:	b2db      	uxtb	r3, r3
240013aa:	70fb      	strb	r3, [r7, #3]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
240013b0:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240013b2:	2300      	movs	r3, #0
240013b4:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240013b6:	2300      	movs	r3, #0
240013b8:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240013ba:	2300      	movs	r3, #0
240013bc:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240013be:	2300      	movs	r3, #0
240013c0:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
240013c2:	2381      	movs	r3, #129	; 0x81
240013c4:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240013c6:	2300      	movs	r3, #0
240013c8:	623b      	str	r3, [r7, #32]
    sCommand.DataMode = QSPI_DATA_1_LINE;
240013ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
240013d0:	2300      	movs	r3, #0
240013d2:	61bb      	str	r3, [r7, #24]
    sCommand.NbData = 1;
240013d4:	2301      	movs	r3, #1
240013d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240013d8:	1d3b      	adds	r3, r7, #4
240013da:	f241 3288 	movw	r2, #5000	; 0x1388
240013de:	4619      	mov	r1, r3
240013e0:	480d      	ldr	r0, [pc, #52]	; (24001418 <QSPI_Configuration+0x118>)
240013e2:	f010 fa89 	bl	240118f8 <HAL_QSPI_Command>
240013e6:	4603      	mov	r3, r0
240013e8:	2b00      	cmp	r3, #0
240013ea:	d001      	beq.n	240013f0 <QSPI_Configuration+0xf0>
        != HAL_OK) {
        return HAL_ERROR;
240013ec:	2301      	movs	r3, #1
240013ee:	e00e      	b.n	2400140e <QSPI_Configuration+0x10e>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
240013f0:	1cfb      	adds	r3, r7, #3
240013f2:	f241 3288 	movw	r2, #5000	; 0x1388
240013f6:	4619      	mov	r1, r3
240013f8:	4807      	ldr	r0, [pc, #28]	; (24001418 <QSPI_Configuration+0x118>)
240013fa:	f010 fb41 	bl	24011a80 <HAL_QSPI_Transmit>
240013fe:	4603      	mov	r3, r0
24001400:	2b00      	cmp	r3, #0
24001402:	d003      	beq.n	2400140c <QSPI_Configuration+0x10c>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
24001404:	f7ff fd24 	bl	24000e50 <Error_Handler>
        return HAL_ERROR;
24001408:	2301      	movs	r3, #1
2400140a:	e000      	b.n	2400140e <QSPI_Configuration+0x10e>
    }
    return HAL_OK;
2400140c:	2300      	movs	r3, #0
}
2400140e:	4618      	mov	r0, r3
24001410:	3748      	adds	r7, #72	; 0x48
24001412:	46bd      	mov	sp, r7
24001414:	bd80      	pop	{r7, pc}
24001416:	bf00      	nop
24001418:	240005c0 	.word	0x240005c0

2400141c <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
2400141c:	b580      	push	{r7, lr}
2400141e:	b090      	sub	sp, #64	; 0x40
24001420:	af00      	add	r7, sp, #0
24001422:	6078      	str	r0, [r7, #4]
24001424:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
24001426:	687a      	ldr	r2, [r7, #4]
24001428:	4b23      	ldr	r3, [pc, #140]	; (240014b8 <CSP_QSPI_EraseSector+0x9c>)
2400142a:	4013      	ands	r3, r2
2400142c:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400142e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001432:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001438:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400143a:	2300      	movs	r3, #0
2400143c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400143e:	2300      	movs	r3, #0
24001440:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001442:	2300      	movs	r3, #0
24001444:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001446:	2300      	movs	r3, #0
24001448:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
2400144a:	23d8      	movs	r3, #216	; 0xd8
2400144c:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
2400144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001452:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
24001454:	2300      	movs	r3, #0
24001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
24001458:	2300      	movs	r3, #0
2400145a:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
2400145c:	e022      	b.n	240014a4 <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
2400145e:	687b      	ldr	r3, [r7, #4]
24001460:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
24001464:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
24001466:	f7ff ff01 	bl	2400126c <QSPI_WriteEnable>
2400146a:	4603      	mov	r3, r0
2400146c:	2b00      	cmp	r3, #0
2400146e:	d001      	beq.n	24001474 <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
24001470:	2301      	movs	r3, #1
24001472:	e01c      	b.n	240014ae <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001474:	f107 0308 	add.w	r3, r7, #8
24001478:	f241 3288 	movw	r2, #5000	; 0x1388
2400147c:	4619      	mov	r1, r3
2400147e:	480f      	ldr	r0, [pc, #60]	; (240014bc <CSP_QSPI_EraseSector+0xa0>)
24001480:	f010 fa3a 	bl	240118f8 <HAL_QSPI_Command>
24001484:	4603      	mov	r3, r0
24001486:	2b00      	cmp	r3, #0
24001488:	d001      	beq.n	2400148e <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
2400148a:	2301      	movs	r3, #1
2400148c:	e00f      	b.n	240014ae <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
2400148e:	687b      	ldr	r3, [r7, #4]
24001490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
24001494:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
24001496:	f7ff feaf 	bl	240011f8 <QSPI_AutoPollingMemReady>
2400149a:	4603      	mov	r3, r0
2400149c:	2b00      	cmp	r3, #0
2400149e:	d001      	beq.n	240014a4 <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
240014a0:	2301      	movs	r3, #1
240014a2:	e004      	b.n	240014ae <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
240014a4:	683a      	ldr	r2, [r7, #0]
240014a6:	687b      	ldr	r3, [r7, #4]
240014a8:	429a      	cmp	r2, r3
240014aa:	d2d8      	bcs.n	2400145e <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
240014ac:	2300      	movs	r3, #0
}
240014ae:	4618      	mov	r0, r3
240014b0:	3740      	adds	r7, #64	; 0x40
240014b2:	46bd      	mov	sp, r7
240014b4:	bd80      	pop	{r7, pc}
240014b6:	bf00      	nop
240014b8:	ffff0000 	.word	0xffff0000
240014bc:	240005c0 	.word	0x240005c0

240014c0 <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
240014c0:	b580      	push	{r7, lr}
240014c2:	b090      	sub	sp, #64	; 0x40
240014c4:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    /* Enable Memory-Mapped mode-------------------------------------------------- */

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240014c6:	f44f 7380 	mov.w	r3, #256	; 0x100
240014ca:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240014d0:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240014d2:	2300      	movs	r3, #0
240014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240014d6:	2300      	movs	r3, #0
240014d8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240014da:	2300      	movs	r3, #0
240014dc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240014de:	2300      	movs	r3, #0
240014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
240014e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240014e6:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_4_LINES;
240014e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
240014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData = 0;
240014ee:	2300      	movs	r3, #0
240014f0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Address = 0;
240014f2:	2300      	movs	r3, #0
240014f4:	60fb      	str	r3, [r7, #12]
    sCommand.Instruction = QUAD_INOUT_FAST_READ_CMD;
240014f6:	23eb      	movs	r3, #235	; 0xeb
240014f8:	60bb      	str	r3, [r7, #8]
    sCommand.DummyCycles = N25Q128A_DUMMY_CYCLES_READ_QUAD;
240014fa:	230a      	movs	r3, #10
240014fc:	61fb      	str	r3, [r7, #28]

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
240014fe:	2300      	movs	r3, #0
24001500:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
24001502:	463a      	mov	r2, r7
24001504:	f107 0308 	add.w	r3, r7, #8
24001508:	4619      	mov	r1, r3
2400150a:	4806      	ldr	r0, [pc, #24]	; (24001524 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
2400150c:	f010 ff8d 	bl	2401242a <HAL_QSPI_MemoryMapped>
24001510:	4603      	mov	r3, r0
24001512:	2b00      	cmp	r3, #0
24001514:	d001      	beq.n	2400151a <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
24001516:	2301      	movs	r3, #1
24001518:	e000      	b.n	2400151c <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
2400151a:	2300      	movs	r3, #0
}
2400151c:	4618      	mov	r0, r3
2400151e:	3740      	adds	r7, #64	; 0x40
24001520:	46bd      	mov	sp, r7
24001522:	bd80      	pop	{r7, pc}
24001524:	240005c0 	.word	0x240005c0

24001528 <QSPI_ResetChip>:

uint8_t QSPI_ResetChip()
{
24001528:	b580      	push	{r7, lr}
2400152a:	b090      	sub	sp, #64	; 0x40
2400152c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
2400152e:	2300      	movs	r3, #0
24001530:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001532:	f44f 7380 	mov.w	r3, #256	; 0x100
24001536:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400153c:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400153e:	2300      	movs	r3, #0
24001540:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001542:	2300      	movs	r3, #0
24001544:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001546:	2300      	movs	r3, #0
24001548:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400154a:	2300      	movs	r3, #0
2400154c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
2400154e:	2366      	movs	r3, #102	; 0x66
24001550:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001552:	2300      	movs	r3, #0
24001554:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
24001556:	2300      	movs	r3, #0
24001558:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
2400155a:	2300      	movs	r3, #0
2400155c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
2400155e:	2300      	movs	r3, #0
24001560:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001562:	1d3b      	adds	r3, r7, #4
24001564:	f241 3288 	movw	r2, #5000	; 0x1388
24001568:	4619      	mov	r1, r3
2400156a:	481d      	ldr	r0, [pc, #116]	; (240015e0 <QSPI_ResetChip+0xb8>)
2400156c:	f010 f9c4 	bl	240118f8 <HAL_QSPI_Command>
24001570:	4603      	mov	r3, r0
24001572:	2b00      	cmp	r3, #0
24001574:	d001      	beq.n	2400157a <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
24001576:	2301      	movs	r3, #1
24001578:	e02e      	b.n	240015d8 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
2400157a:	2300      	movs	r3, #0
2400157c:	63fb      	str	r3, [r7, #60]	; 0x3c
2400157e:	e003      	b.n	24001588 <QSPI_ResetChip+0x60>
        __NOP();
24001580:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
24001582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001584:	3301      	adds	r3, #1
24001586:	63fb      	str	r3, [r7, #60]	; 0x3c
24001588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2400158a:	2b2e      	cmp	r3, #46	; 0x2e
2400158c:	d9f8      	bls.n	24001580 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400158e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001592:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001598:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400159a:	2300      	movs	r3, #0
2400159c:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400159e:	2300      	movs	r3, #0
240015a0:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240015a2:	2300      	movs	r3, #0
240015a4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240015a6:	2300      	movs	r3, #0
240015a8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
240015aa:	2399      	movs	r3, #153	; 0x99
240015ac:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
240015ae:	2300      	movs	r3, #0
240015b0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
240015b2:	2300      	movs	r3, #0
240015b4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
240015b6:	2300      	movs	r3, #0
240015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
240015ba:	2300      	movs	r3, #0
240015bc:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240015be:	1d3b      	adds	r3, r7, #4
240015c0:	f241 3288 	movw	r2, #5000	; 0x1388
240015c4:	4619      	mov	r1, r3
240015c6:	4806      	ldr	r0, [pc, #24]	; (240015e0 <QSPI_ResetChip+0xb8>)
240015c8:	f010 f996 	bl	240118f8 <HAL_QSPI_Command>
240015cc:	4603      	mov	r3, r0
240015ce:	2b00      	cmp	r3, #0
240015d0:	d001      	beq.n	240015d6 <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
240015d2:	2301      	movs	r3, #1
240015d4:	e000      	b.n	240015d8 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
240015d6:	2300      	movs	r3, #0
}
240015d8:	4618      	mov	r0, r3
240015da:	3740      	adds	r7, #64	; 0x40
240015dc:	46bd      	mov	sp, r7
240015de:	bd80      	pop	{r7, pc}
240015e0:	240005c0 	.word	0x240005c0

240015e4 <CSP_QSPI_Erase_Block>:


uint8_t CSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
240015e4:	b580      	push	{r7, lr}
240015e6:	b090      	sub	sp, #64	; 0x40
240015e8:	af00      	add	r7, sp, #0
240015ea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
240015ec:	f44f 7380 	mov.w	r3, #256	; 0x100
240015f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
240015f2:	2320      	movs	r3, #32
240015f4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
240015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
240015fa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
240015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001600:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
24001602:	687b      	ldr	r3, [r7, #4]
24001604:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001606:	2300      	movs	r3, #0
24001608:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
2400160a:	2300      	movs	r3, #0
2400160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
2400160e:	2300      	movs	r3, #0
24001610:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001612:	2300      	movs	r3, #0
24001614:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001616:	2300      	movs	r3, #0
24001618:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
2400161a:	2300      	movs	r3, #0
2400161c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
2400161e:	f7ff fe25 	bl	2400126c <QSPI_WriteEnable>
24001622:	4603      	mov	r3, r0
24001624:	2b00      	cmp	r3, #0
24001626:	d001      	beq.n	2400162c <CSP_QSPI_Erase_Block+0x48>
  {
    return HAL_ERROR;
24001628:	2301      	movs	r3, #1
2400162a:	e014      	b.n	24001656 <CSP_QSPI_Erase_Block+0x72>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400162c:	f107 0308 	add.w	r3, r7, #8
24001630:	f241 3288 	movw	r2, #5000	; 0x1388
24001634:	4619      	mov	r1, r3
24001636:	480a      	ldr	r0, [pc, #40]	; (24001660 <CSP_QSPI_Erase_Block+0x7c>)
24001638:	f010 f95e 	bl	240118f8 <HAL_QSPI_Command>
2400163c:	4603      	mov	r3, r0
2400163e:	2b00      	cmp	r3, #0
24001640:	d001      	beq.n	24001646 <CSP_QSPI_Erase_Block+0x62>
  {
    return HAL_ERROR;
24001642:	2301      	movs	r3, #1
24001644:	e007      	b.n	24001656 <CSP_QSPI_Erase_Block+0x72>
  }

  /* Configure automatic polling mode to wait for end of erase */
  if (QSPI_AutoPollingMemReady() != HAL_OK)
24001646:	f7ff fdd7 	bl	240011f8 <QSPI_AutoPollingMemReady>
2400164a:	4603      	mov	r3, r0
2400164c:	2b00      	cmp	r3, #0
2400164e:	d001      	beq.n	24001654 <CSP_QSPI_Erase_Block+0x70>
  {
    return HAL_ERROR;
24001650:	2301      	movs	r3, #1
24001652:	e000      	b.n	24001656 <CSP_QSPI_Erase_Block+0x72>
  }

  return HAL_OK;
24001654:	2300      	movs	r3, #0
}
24001656:	4618      	mov	r0, r3
24001658:	3740      	adds	r7, #64	; 0x40
2400165a:	46bd      	mov	sp, r7
2400165c:	bd80      	pop	{r7, pc}
2400165e:	bf00      	nop
24001660:	240005c0 	.word	0x240005c0

24001664 <CSP_QSPI_WriteMemory>:


uint8_t CSP_QSPI_WriteMemory(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
24001664:	b580      	push	{r7, lr}
24001666:	b096      	sub	sp, #88	; 0x58
24001668:	af00      	add	r7, sp, #0
2400166a:	60f8      	str	r0, [r7, #12]
2400166c:	60b9      	str	r1, [r7, #8]
2400166e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
24001670:	68bb      	ldr	r3, [r7, #8]
24001672:	b2db      	uxtb	r3, r3
24001674:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
24001678:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
2400167a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
2400167c:	687b      	ldr	r3, [r7, #4]
2400167e:	429a      	cmp	r2, r3
24001680:	d901      	bls.n	24001686 <CSP_QSPI_WriteMemory+0x22>
  {
    current_size = Size;
24001682:	687b      	ldr	r3, [r7, #4]
24001684:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
24001686:	68bb      	ldr	r3, [r7, #8]
24001688:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
2400168a:	68ba      	ldr	r2, [r7, #8]
2400168c:	687b      	ldr	r3, [r7, #4]
2400168e:	4413      	add	r3, r2
24001690:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001692:	f44f 7380 	mov.w	r3, #256	; 0x100
24001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
24001698:	2312      	movs	r3, #18
2400169a:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
2400169c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240016a0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
240016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240016a6:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240016a8:	2300      	movs	r3, #0
240016aa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
240016ac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
240016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
240016b2:	2300      	movs	r3, #0
240016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
240016b6:	2300      	movs	r3, #0
240016b8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240016ba:	2300      	movs	r3, #0
240016bc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240016be:	2300      	movs	r3, #0
240016c0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
240016c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240016c4:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
240016c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240016c8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
240016ca:	f7ff fdcf 	bl	2400126c <QSPI_WriteEnable>
240016ce:	4603      	mov	r3, r0
240016d0:	2b00      	cmp	r3, #0
240016d2:	d001      	beq.n	240016d8 <CSP_QSPI_WriteMemory+0x74>
    {
      return HAL_ERROR;
240016d4:	2301      	movs	r3, #1
240016d6:	e038      	b.n	2400174a <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240016d8:	f107 0314 	add.w	r3, r7, #20
240016dc:	f241 3288 	movw	r2, #5000	; 0x1388
240016e0:	4619      	mov	r1, r3
240016e2:	481c      	ldr	r0, [pc, #112]	; (24001754 <CSP_QSPI_WriteMemory+0xf0>)
240016e4:	f010 f908 	bl	240118f8 <HAL_QSPI_Command>
240016e8:	4603      	mov	r3, r0
240016ea:	2b00      	cmp	r3, #0
240016ec:	d001      	beq.n	240016f2 <CSP_QSPI_WriteMemory+0x8e>
    {
      return HAL_ERROR;
240016ee:	2301      	movs	r3, #1
240016f0:	e02b      	b.n	2400174a <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240016f2:	f241 3288 	movw	r2, #5000	; 0x1388
240016f6:	68f9      	ldr	r1, [r7, #12]
240016f8:	4816      	ldr	r0, [pc, #88]	; (24001754 <CSP_QSPI_WriteMemory+0xf0>)
240016fa:	f010 f9c1 	bl	24011a80 <HAL_QSPI_Transmit>
240016fe:	4603      	mov	r3, r0
24001700:	2b00      	cmp	r3, #0
24001702:	d001      	beq.n	24001708 <CSP_QSPI_WriteMemory+0xa4>
    {
      return HAL_ERROR;
24001704:	2301      	movs	r3, #1
24001706:	e020      	b.n	2400174a <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
24001708:	f7ff fd76 	bl	240011f8 <QSPI_AutoPollingMemReady>
2400170c:	4603      	mov	r3, r0
2400170e:	2b00      	cmp	r3, #0
24001710:	d001      	beq.n	24001716 <CSP_QSPI_WriteMemory+0xb2>
    {
      return HAL_ERROR;
24001712:	2301      	movs	r3, #1
24001714:	e019      	b.n	2400174a <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
24001716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
2400171a:	4413      	add	r3, r2
2400171c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
2400171e:	68fa      	ldr	r2, [r7, #12]
24001720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24001722:	4413      	add	r3, r2
24001724:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
24001726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001728:	f503 7380 	add.w	r3, r3, #256	; 0x100
2400172c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2400172e:	429a      	cmp	r2, r3
24001730:	d203      	bcs.n	2400173a <CSP_QSPI_WriteMemory+0xd6>
24001732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
24001734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001736:	1ad3      	subs	r3, r2, r3
24001738:	e001      	b.n	2400173e <CSP_QSPI_WriteMemory+0xda>
2400173a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400173e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
24001740:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
24001744:	429a      	cmp	r2, r3
24001746:	d3bc      	bcc.n	240016c2 <CSP_QSPI_WriteMemory+0x5e>

  return HAL_OK;
24001748:	2300      	movs	r3, #0
}
2400174a:	4618      	mov	r0, r3
2400174c:	3758      	adds	r7, #88	; 0x58
2400174e:	46bd      	mov	sp, r7
24001750:	bd80      	pop	{r7, pc}
24001752:	bf00      	nop
24001754:	240005c0 	.word	0x240005c0

24001758 <CSP_QSPI_ReadMemory>:


uint8_t CSP_QSPI_ReadMemory(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
24001758:	b580      	push	{r7, lr}
2400175a:	b092      	sub	sp, #72	; 0x48
2400175c:	af00      	add	r7, sp, #0
2400175e:	60f8      	str	r0, [r7, #12]
24001760:	60b9      	str	r1, [r7, #8]
24001762:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001764:	f44f 7380 	mov.w	r3, #256	; 0x100
24001768:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
2400176a:	23eb      	movs	r3, #235	; 0xeb
2400176c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
2400176e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
24001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001778:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
2400177a:	68bb      	ldr	r3, [r7, #8]
2400177c:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400177e:	2300      	movs	r3, #0
24001780:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
24001782:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001786:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
24001788:	230a      	movs	r3, #10
2400178a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
2400178c:	687b      	ldr	r3, [r7, #4]
2400178e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001790:	2300      	movs	r3, #0
24001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001794:	2300      	movs	r3, #0
24001796:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001798:	2300      	movs	r3, #0
2400179a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400179c:	f107 0310 	add.w	r3, r7, #16
240017a0:	f241 3288 	movw	r2, #5000	; 0x1388
240017a4:	4619      	mov	r1, r3
240017a6:	4816      	ldr	r0, [pc, #88]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017a8:	f010 f8a6 	bl	240118f8 <HAL_QSPI_Command>
240017ac:	4603      	mov	r3, r0
240017ae:	2b00      	cmp	r3, #0
240017b0:	d001      	beq.n	240017b6 <CSP_QSPI_ReadMemory+0x5e>
  {
    return HAL_ERROR;
240017b2:	2301      	movs	r3, #1
240017b4:	e01f      	b.n	240017f6 <CSP_QSPI_ReadMemory+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
240017b6:	4b12      	ldr	r3, [pc, #72]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017b8:	681b      	ldr	r3, [r3, #0]
240017ba:	685b      	ldr	r3, [r3, #4]
240017bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240017c0:	4b0f      	ldr	r3, [pc, #60]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017c2:	681b      	ldr	r3, [r3, #0]
240017c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
240017c8:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240017ca:	f241 3288 	movw	r2, #5000	; 0x1388
240017ce:	68f9      	ldr	r1, [r7, #12]
240017d0:	480b      	ldr	r0, [pc, #44]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017d2:	f010 f9e7 	bl	24011ba4 <HAL_QSPI_Receive>
240017d6:	4603      	mov	r3, r0
240017d8:	2b00      	cmp	r3, #0
240017da:	d001      	beq.n	240017e0 <CSP_QSPI_ReadMemory+0x88>
  {
    return HAL_ERROR;
240017dc:	2301      	movs	r3, #1
240017de:	e00a      	b.n	240017f6 <CSP_QSPI_ReadMemory+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
240017e0:	4b07      	ldr	r3, [pc, #28]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017e2:	681b      	ldr	r3, [r3, #0]
240017e4:	685b      	ldr	r3, [r3, #4]
240017e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
240017ea:	4b05      	ldr	r3, [pc, #20]	; (24001800 <CSP_QSPI_ReadMemory+0xa8>)
240017ec:	681b      	ldr	r3, [r3, #0]
240017ee:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
240017f2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
240017f4:	2300      	movs	r3, #0
}
240017f6:	4618      	mov	r0, r3
240017f8:	3748      	adds	r7, #72	; 0x48
240017fa:	46bd      	mov	sp, r7
240017fc:	bd80      	pop	{r7, pc}
240017fe:	bf00      	nop
24001800:	240005c0 	.word	0x240005c0

24001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24001804:	b480      	push	{r7}
24001806:	b083      	sub	sp, #12
24001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400180a:	4b0a      	ldr	r3, [pc, #40]	; (24001834 <HAL_MspInit+0x30>)
2400180c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001810:	4a08      	ldr	r2, [pc, #32]	; (24001834 <HAL_MspInit+0x30>)
24001812:	f043 0302 	orr.w	r3, r3, #2
24001816:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400181a:	4b06      	ldr	r3, [pc, #24]	; (24001834 <HAL_MspInit+0x30>)
2400181c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001820:	f003 0302 	and.w	r3, r3, #2
24001824:	607b      	str	r3, [r7, #4]
24001826:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24001828:	bf00      	nop
2400182a:	370c      	adds	r7, #12
2400182c:	46bd      	mov	sp, r7
2400182e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001832:	4770      	bx	lr
24001834:	58024400 	.word	0x58024400

24001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24001838:	b580      	push	{r7, lr}
2400183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
2400183c:	f012 fd0c 	bl	24014258 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24001840:	e7fe      	b.n	24001840 <NMI_Handler+0x8>

24001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
24001842:	b480      	push	{r7}
24001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24001846:	e7fe      	b.n	24001846 <HardFault_Handler+0x4>

24001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
24001848:	b480      	push	{r7}
2400184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2400184c:	e7fe      	b.n	2400184c <MemManage_Handler+0x4>

2400184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2400184e:	b480      	push	{r7}
24001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24001852:	e7fe      	b.n	24001852 <BusFault_Handler+0x4>

24001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
24001854:	b480      	push	{r7}
24001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24001858:	e7fe      	b.n	24001858 <UsageFault_Handler+0x4>

2400185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2400185a:	b480      	push	{r7}
2400185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2400185e:	bf00      	nop
24001860:	46bd      	mov	sp, r7
24001862:	f85d 7b04 	ldr.w	r7, [sp], #4
24001866:	4770      	bx	lr

24001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24001868:	b480      	push	{r7}
2400186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2400186c:	bf00      	nop
2400186e:	46bd      	mov	sp, r7
24001870:	f85d 7b04 	ldr.w	r7, [sp], #4
24001874:	4770      	bx	lr

24001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
24001876:	b480      	push	{r7}
24001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2400187a:	bf00      	nop
2400187c:	46bd      	mov	sp, r7
2400187e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001882:	4770      	bx	lr

24001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24001884:	b580      	push	{r7, lr}
24001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24001888:	f000 fc4c 	bl	24002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2400188c:	bf00      	nop
2400188e:	bd80      	pop	{r7, pc}

24001890 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
24001890:	b480      	push	{r7}
24001892:	af00      	add	r7, sp, #0
}
24001894:	bf00      	nop
24001896:	46bd      	mov	sp, r7
24001898:	f85d 7b04 	ldr.w	r7, [sp], #4
2400189c:	4770      	bx	lr

2400189e <_getpid>:

int _getpid(void)
{
2400189e:	b480      	push	{r7}
240018a0:	af00      	add	r7, sp, #0
	return 1;
240018a2:	2301      	movs	r3, #1
}
240018a4:	4618      	mov	r0, r3
240018a6:	46bd      	mov	sp, r7
240018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240018ac:	4770      	bx	lr

240018ae <_kill>:

int _kill(int pid, int sig)
{
240018ae:	b580      	push	{r7, lr}
240018b0:	b082      	sub	sp, #8
240018b2:	af00      	add	r7, sp, #0
240018b4:	6078      	str	r0, [r7, #4]
240018b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
240018b8:	f015 fa58 	bl	24016d6c <__errno>
240018bc:	4603      	mov	r3, r0
240018be:	2216      	movs	r2, #22
240018c0:	601a      	str	r2, [r3, #0]
	return -1;
240018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
240018c6:	4618      	mov	r0, r3
240018c8:	3708      	adds	r7, #8
240018ca:	46bd      	mov	sp, r7
240018cc:	bd80      	pop	{r7, pc}

240018ce <_exit>:

void _exit (int status)
{
240018ce:	b580      	push	{r7, lr}
240018d0:	b082      	sub	sp, #8
240018d2:	af00      	add	r7, sp, #0
240018d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
240018d6:	f04f 31ff 	mov.w	r1, #4294967295
240018da:	6878      	ldr	r0, [r7, #4]
240018dc:	f7ff ffe7 	bl	240018ae <_kill>
	while (1) {}		/* Make sure we hang here */
240018e0:	e7fe      	b.n	240018e0 <_exit+0x12>

240018e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
240018e2:	b580      	push	{r7, lr}
240018e4:	b086      	sub	sp, #24
240018e6:	af00      	add	r7, sp, #0
240018e8:	60f8      	str	r0, [r7, #12]
240018ea:	60b9      	str	r1, [r7, #8]
240018ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240018ee:	2300      	movs	r3, #0
240018f0:	617b      	str	r3, [r7, #20]
240018f2:	e00a      	b.n	2400190a <_read+0x28>
	{
		*ptr++ = __io_getchar();
240018f4:	f3af 8000 	nop.w
240018f8:	4601      	mov	r1, r0
240018fa:	68bb      	ldr	r3, [r7, #8]
240018fc:	1c5a      	adds	r2, r3, #1
240018fe:	60ba      	str	r2, [r7, #8]
24001900:	b2ca      	uxtb	r2, r1
24001902:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24001904:	697b      	ldr	r3, [r7, #20]
24001906:	3301      	adds	r3, #1
24001908:	617b      	str	r3, [r7, #20]
2400190a:	697a      	ldr	r2, [r7, #20]
2400190c:	687b      	ldr	r3, [r7, #4]
2400190e:	429a      	cmp	r2, r3
24001910:	dbf0      	blt.n	240018f4 <_read+0x12>
	}

return len;
24001912:	687b      	ldr	r3, [r7, #4]
}
24001914:	4618      	mov	r0, r3
24001916:	3718      	adds	r7, #24
24001918:	46bd      	mov	sp, r7
2400191a:	bd80      	pop	{r7, pc}

2400191c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2400191c:	b580      	push	{r7, lr}
2400191e:	b086      	sub	sp, #24
24001920:	af00      	add	r7, sp, #0
24001922:	60f8      	str	r0, [r7, #12]
24001924:	60b9      	str	r1, [r7, #8]
24001926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24001928:	2300      	movs	r3, #0
2400192a:	617b      	str	r3, [r7, #20]
2400192c:	e009      	b.n	24001942 <_write+0x26>
	{
		__io_putchar(*ptr++);
2400192e:	68bb      	ldr	r3, [r7, #8]
24001930:	1c5a      	adds	r2, r3, #1
24001932:	60ba      	str	r2, [r7, #8]
24001934:	781b      	ldrb	r3, [r3, #0]
24001936:	4618      	mov	r0, r3
24001938:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
2400193c:	697b      	ldr	r3, [r7, #20]
2400193e:	3301      	adds	r3, #1
24001940:	617b      	str	r3, [r7, #20]
24001942:	697a      	ldr	r2, [r7, #20]
24001944:	687b      	ldr	r3, [r7, #4]
24001946:	429a      	cmp	r2, r3
24001948:	dbf1      	blt.n	2400192e <_write+0x12>
	}
	return len;
2400194a:	687b      	ldr	r3, [r7, #4]
}
2400194c:	4618      	mov	r0, r3
2400194e:	3718      	adds	r7, #24
24001950:	46bd      	mov	sp, r7
24001952:	bd80      	pop	{r7, pc}

24001954 <_close>:

int _close(int file)
{
24001954:	b480      	push	{r7}
24001956:	b083      	sub	sp, #12
24001958:	af00      	add	r7, sp, #0
2400195a:	6078      	str	r0, [r7, #4]
	return -1;
2400195c:	f04f 33ff 	mov.w	r3, #4294967295
}
24001960:	4618      	mov	r0, r3
24001962:	370c      	adds	r7, #12
24001964:	46bd      	mov	sp, r7
24001966:	f85d 7b04 	ldr.w	r7, [sp], #4
2400196a:	4770      	bx	lr

2400196c <_fstat>:


int _fstat(int file, struct stat *st)
{
2400196c:	b480      	push	{r7}
2400196e:	b083      	sub	sp, #12
24001970:	af00      	add	r7, sp, #0
24001972:	6078      	str	r0, [r7, #4]
24001974:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001976:	683b      	ldr	r3, [r7, #0]
24001978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2400197c:	605a      	str	r2, [r3, #4]
	return 0;
2400197e:	2300      	movs	r3, #0
}
24001980:	4618      	mov	r0, r3
24001982:	370c      	adds	r7, #12
24001984:	46bd      	mov	sp, r7
24001986:	f85d 7b04 	ldr.w	r7, [sp], #4
2400198a:	4770      	bx	lr

2400198c <_isatty>:

int _isatty(int file)
{
2400198c:	b480      	push	{r7}
2400198e:	b083      	sub	sp, #12
24001990:	af00      	add	r7, sp, #0
24001992:	6078      	str	r0, [r7, #4]
	return 1;
24001994:	2301      	movs	r3, #1
}
24001996:	4618      	mov	r0, r3
24001998:	370c      	adds	r7, #12
2400199a:	46bd      	mov	sp, r7
2400199c:	f85d 7b04 	ldr.w	r7, [sp], #4
240019a0:	4770      	bx	lr

240019a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
240019a2:	b480      	push	{r7}
240019a4:	b085      	sub	sp, #20
240019a6:	af00      	add	r7, sp, #0
240019a8:	60f8      	str	r0, [r7, #12]
240019aa:	60b9      	str	r1, [r7, #8]
240019ac:	607a      	str	r2, [r7, #4]
	return 0;
240019ae:	2300      	movs	r3, #0
}
240019b0:	4618      	mov	r0, r3
240019b2:	3714      	adds	r7, #20
240019b4:	46bd      	mov	sp, r7
240019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240019ba:	4770      	bx	lr

240019bc <_open>:

int _open(char *path, int flags, ...)
{
240019bc:	b40e      	push	{r1, r2, r3}
240019be:	b480      	push	{r7}
240019c0:	b082      	sub	sp, #8
240019c2:	af00      	add	r7, sp, #0
240019c4:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
240019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
240019ca:	4618      	mov	r0, r3
240019cc:	3708      	adds	r7, #8
240019ce:	46bd      	mov	sp, r7
240019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240019d4:	b003      	add	sp, #12
240019d6:	4770      	bx	lr

240019d8 <_wait>:

int _wait(int *status)
{
240019d8:	b580      	push	{r7, lr}
240019da:	b082      	sub	sp, #8
240019dc:	af00      	add	r7, sp, #0
240019de:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
240019e0:	f015 f9c4 	bl	24016d6c <__errno>
240019e4:	4603      	mov	r3, r0
240019e6:	220a      	movs	r2, #10
240019e8:	601a      	str	r2, [r3, #0]
	return -1;
240019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
240019ee:	4618      	mov	r0, r3
240019f0:	3708      	adds	r7, #8
240019f2:	46bd      	mov	sp, r7
240019f4:	bd80      	pop	{r7, pc}

240019f6 <_unlink>:

int _unlink(char *name)
{
240019f6:	b580      	push	{r7, lr}
240019f8:	b082      	sub	sp, #8
240019fa:	af00      	add	r7, sp, #0
240019fc:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
240019fe:	f015 f9b5 	bl	24016d6c <__errno>
24001a02:	4603      	mov	r3, r0
24001a04:	2202      	movs	r2, #2
24001a06:	601a      	str	r2, [r3, #0]
	return -1;
24001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a0c:	4618      	mov	r0, r3
24001a0e:	3708      	adds	r7, #8
24001a10:	46bd      	mov	sp, r7
24001a12:	bd80      	pop	{r7, pc}

24001a14 <_times>:

int _times(struct tms *buf)
{
24001a14:	b480      	push	{r7}
24001a16:	b083      	sub	sp, #12
24001a18:	af00      	add	r7, sp, #0
24001a1a:	6078      	str	r0, [r7, #4]
	return -1;
24001a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a20:	4618      	mov	r0, r3
24001a22:	370c      	adds	r7, #12
24001a24:	46bd      	mov	sp, r7
24001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a2a:	4770      	bx	lr

24001a2c <_stat>:

int _stat(char *file, struct stat *st)
{
24001a2c:	b480      	push	{r7}
24001a2e:	b083      	sub	sp, #12
24001a30:	af00      	add	r7, sp, #0
24001a32:	6078      	str	r0, [r7, #4]
24001a34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001a36:	683b      	ldr	r3, [r7, #0]
24001a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24001a3c:	605a      	str	r2, [r3, #4]
	return 0;
24001a3e:	2300      	movs	r3, #0
}
24001a40:	4618      	mov	r0, r3
24001a42:	370c      	adds	r7, #12
24001a44:	46bd      	mov	sp, r7
24001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a4a:	4770      	bx	lr

24001a4c <_link>:

int _link(char *old, char *new)
{
24001a4c:	b580      	push	{r7, lr}
24001a4e:	b082      	sub	sp, #8
24001a50:	af00      	add	r7, sp, #0
24001a52:	6078      	str	r0, [r7, #4]
24001a54:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
24001a56:	f015 f989 	bl	24016d6c <__errno>
24001a5a:	4603      	mov	r3, r0
24001a5c:	221f      	movs	r2, #31
24001a5e:	601a      	str	r2, [r3, #0]
	return -1;
24001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a64:	4618      	mov	r0, r3
24001a66:	3708      	adds	r7, #8
24001a68:	46bd      	mov	sp, r7
24001a6a:	bd80      	pop	{r7, pc}

24001a6c <_fork>:

int _fork(void)
{
24001a6c:	b580      	push	{r7, lr}
24001a6e:	af00      	add	r7, sp, #0
	errno = EAGAIN;
24001a70:	f015 f97c 	bl	24016d6c <__errno>
24001a74:	4603      	mov	r3, r0
24001a76:	220b      	movs	r2, #11
24001a78:	601a      	str	r2, [r3, #0]
	return -1;
24001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a7e:	4618      	mov	r0, r3
24001a80:	bd80      	pop	{r7, pc}

24001a82 <_execve>:

int _execve(char *name, char **argv, char **env)
{
24001a82:	b580      	push	{r7, lr}
24001a84:	b084      	sub	sp, #16
24001a86:	af00      	add	r7, sp, #0
24001a88:	60f8      	str	r0, [r7, #12]
24001a8a:	60b9      	str	r1, [r7, #8]
24001a8c:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
24001a8e:	f015 f96d 	bl	24016d6c <__errno>
24001a92:	4603      	mov	r3, r0
24001a94:	220c      	movs	r2, #12
24001a96:	601a      	str	r2, [r3, #0]
	return -1;
24001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a9c:	4618      	mov	r0, r3
24001a9e:	3710      	adds	r7, #16
24001aa0:	46bd      	mov	sp, r7
24001aa2:	bd80      	pop	{r7, pc}

24001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24001aa4:	b580      	push	{r7, lr}
24001aa6:	b086      	sub	sp, #24
24001aa8:	af00      	add	r7, sp, #0
24001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24001aac:	4a14      	ldr	r2, [pc, #80]	; (24001b00 <_sbrk+0x5c>)
24001aae:	4b15      	ldr	r3, [pc, #84]	; (24001b04 <_sbrk+0x60>)
24001ab0:	1ad3      	subs	r3, r2, r3
24001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24001ab4:	697b      	ldr	r3, [r7, #20]
24001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24001ab8:	4b13      	ldr	r3, [pc, #76]	; (24001b08 <_sbrk+0x64>)
24001aba:	681b      	ldr	r3, [r3, #0]
24001abc:	2b00      	cmp	r3, #0
24001abe:	d102      	bne.n	24001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24001ac0:	4b11      	ldr	r3, [pc, #68]	; (24001b08 <_sbrk+0x64>)
24001ac2:	4a12      	ldr	r2, [pc, #72]	; (24001b0c <_sbrk+0x68>)
24001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24001ac6:	4b10      	ldr	r3, [pc, #64]	; (24001b08 <_sbrk+0x64>)
24001ac8:	681a      	ldr	r2, [r3, #0]
24001aca:	687b      	ldr	r3, [r7, #4]
24001acc:	4413      	add	r3, r2
24001ace:	693a      	ldr	r2, [r7, #16]
24001ad0:	429a      	cmp	r2, r3
24001ad2:	d207      	bcs.n	24001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
24001ad4:	f015 f94a 	bl	24016d6c <__errno>
24001ad8:	4603      	mov	r3, r0
24001ada:	220c      	movs	r2, #12
24001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24001ade:	f04f 33ff 	mov.w	r3, #4294967295
24001ae2:	e009      	b.n	24001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24001ae4:	4b08      	ldr	r3, [pc, #32]	; (24001b08 <_sbrk+0x64>)
24001ae6:	681b      	ldr	r3, [r3, #0]
24001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24001aea:	4b07      	ldr	r3, [pc, #28]	; (24001b08 <_sbrk+0x64>)
24001aec:	681a      	ldr	r2, [r3, #0]
24001aee:	687b      	ldr	r3, [r7, #4]
24001af0:	4413      	add	r3, r2
24001af2:	4a05      	ldr	r2, [pc, #20]	; (24001b08 <_sbrk+0x64>)
24001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24001af6:	68fb      	ldr	r3, [r7, #12]
}
24001af8:	4618      	mov	r0, r3
24001afa:	3718      	adds	r7, #24
24001afc:	46bd      	mov	sp, r7
24001afe:	bd80      	pop	{r7, pc}
24001b00:	24080004 	.word	0x24080004
24001b04:	00000400 	.word	0x00000400
24001b08:	24000610 	.word	0x24000610
24001b0c:	24016f5c 	.word	0x24016f5c

24001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24001b10:	b480      	push	{r7}
24001b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24001b14:	4b37      	ldr	r3, [pc, #220]	; (24001bf4 <SystemInit+0xe4>)
24001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24001b1a:	4a36      	ldr	r2, [pc, #216]	; (24001bf4 <SystemInit+0xe4>)
24001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001b24:	4b34      	ldr	r3, [pc, #208]	; (24001bf8 <SystemInit+0xe8>)
24001b26:	681b      	ldr	r3, [r3, #0]
24001b28:	f003 030f 	and.w	r3, r3, #15
24001b2c:	2b06      	cmp	r3, #6
24001b2e:	d807      	bhi.n	24001b40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001b30:	4b31      	ldr	r3, [pc, #196]	; (24001bf8 <SystemInit+0xe8>)
24001b32:	681b      	ldr	r3, [r3, #0]
24001b34:	f023 030f 	bic.w	r3, r3, #15
24001b38:	4a2f      	ldr	r2, [pc, #188]	; (24001bf8 <SystemInit+0xe8>)
24001b3a:	f043 0307 	orr.w	r3, r3, #7
24001b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24001b40:	4b2e      	ldr	r3, [pc, #184]	; (24001bfc <SystemInit+0xec>)
24001b42:	681b      	ldr	r3, [r3, #0]
24001b44:	4a2d      	ldr	r2, [pc, #180]	; (24001bfc <SystemInit+0xec>)
24001b46:	f043 0301 	orr.w	r3, r3, #1
24001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24001b4c:	4b2b      	ldr	r3, [pc, #172]	; (24001bfc <SystemInit+0xec>)
24001b4e:	2200      	movs	r2, #0
24001b50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24001b52:	4b2a      	ldr	r3, [pc, #168]	; (24001bfc <SystemInit+0xec>)
24001b54:	681a      	ldr	r2, [r3, #0]
24001b56:	4929      	ldr	r1, [pc, #164]	; (24001bfc <SystemInit+0xec>)
24001b58:	4b29      	ldr	r3, [pc, #164]	; (24001c00 <SystemInit+0xf0>)
24001b5a:	4013      	ands	r3, r2
24001b5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001b5e:	4b26      	ldr	r3, [pc, #152]	; (24001bf8 <SystemInit+0xe8>)
24001b60:	681b      	ldr	r3, [r3, #0]
24001b62:	f003 0308 	and.w	r3, r3, #8
24001b66:	2b00      	cmp	r3, #0
24001b68:	d007      	beq.n	24001b7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001b6a:	4b23      	ldr	r3, [pc, #140]	; (24001bf8 <SystemInit+0xe8>)
24001b6c:	681b      	ldr	r3, [r3, #0]
24001b6e:	f023 030f 	bic.w	r3, r3, #15
24001b72:	4a21      	ldr	r2, [pc, #132]	; (24001bf8 <SystemInit+0xe8>)
24001b74:	f043 0307 	orr.w	r3, r3, #7
24001b78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24001b7a:	4b20      	ldr	r3, [pc, #128]	; (24001bfc <SystemInit+0xec>)
24001b7c:	2200      	movs	r2, #0
24001b7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24001b80:	4b1e      	ldr	r3, [pc, #120]	; (24001bfc <SystemInit+0xec>)
24001b82:	2200      	movs	r2, #0
24001b84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24001b86:	4b1d      	ldr	r3, [pc, #116]	; (24001bfc <SystemInit+0xec>)
24001b88:	2200      	movs	r2, #0
24001b8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24001b8c:	4b1b      	ldr	r3, [pc, #108]	; (24001bfc <SystemInit+0xec>)
24001b8e:	4a1d      	ldr	r2, [pc, #116]	; (24001c04 <SystemInit+0xf4>)
24001b90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24001b92:	4b1a      	ldr	r3, [pc, #104]	; (24001bfc <SystemInit+0xec>)
24001b94:	4a1c      	ldr	r2, [pc, #112]	; (24001c08 <SystemInit+0xf8>)
24001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24001b98:	4b18      	ldr	r3, [pc, #96]	; (24001bfc <SystemInit+0xec>)
24001b9a:	4a1c      	ldr	r2, [pc, #112]	; (24001c0c <SystemInit+0xfc>)
24001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24001b9e:	4b17      	ldr	r3, [pc, #92]	; (24001bfc <SystemInit+0xec>)
24001ba0:	2200      	movs	r2, #0
24001ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24001ba4:	4b15      	ldr	r3, [pc, #84]	; (24001bfc <SystemInit+0xec>)
24001ba6:	4a19      	ldr	r2, [pc, #100]	; (24001c0c <SystemInit+0xfc>)
24001ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24001baa:	4b14      	ldr	r3, [pc, #80]	; (24001bfc <SystemInit+0xec>)
24001bac:	2200      	movs	r2, #0
24001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24001bb0:	4b12      	ldr	r3, [pc, #72]	; (24001bfc <SystemInit+0xec>)
24001bb2:	4a16      	ldr	r2, [pc, #88]	; (24001c0c <SystemInit+0xfc>)
24001bb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24001bb6:	4b11      	ldr	r3, [pc, #68]	; (24001bfc <SystemInit+0xec>)
24001bb8:	2200      	movs	r2, #0
24001bba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24001bbc:	4b0f      	ldr	r3, [pc, #60]	; (24001bfc <SystemInit+0xec>)
24001bbe:	681b      	ldr	r3, [r3, #0]
24001bc0:	4a0e      	ldr	r2, [pc, #56]	; (24001bfc <SystemInit+0xec>)
24001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24001bc8:	4b0c      	ldr	r3, [pc, #48]	; (24001bfc <SystemInit+0xec>)
24001bca:	2200      	movs	r2, #0
24001bcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24001bce:	4b10      	ldr	r3, [pc, #64]	; (24001c10 <SystemInit+0x100>)
24001bd0:	681a      	ldr	r2, [r3, #0]
24001bd2:	4b10      	ldr	r3, [pc, #64]	; (24001c14 <SystemInit+0x104>)
24001bd4:	4013      	ands	r3, r2
24001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24001bda:	d202      	bcs.n	24001be2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24001bdc:	4b0e      	ldr	r3, [pc, #56]	; (24001c18 <SystemInit+0x108>)
24001bde:	2201      	movs	r2, #1
24001be0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24001be2:	4b0e      	ldr	r3, [pc, #56]	; (24001c1c <SystemInit+0x10c>)
24001be4:	f243 02d2 	movw	r2, #12498	; 0x30d2
24001be8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24001bea:	bf00      	nop
24001bec:	46bd      	mov	sp, r7
24001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
24001bf2:	4770      	bx	lr
24001bf4:	e000ed00 	.word	0xe000ed00
24001bf8:	52002000 	.word	0x52002000
24001bfc:	58024400 	.word	0x58024400
24001c00:	eaf6ed7f 	.word	0xeaf6ed7f
24001c04:	02020200 	.word	0x02020200
24001c08:	01ff0000 	.word	0x01ff0000
24001c0c:	01010280 	.word	0x01010280
24001c10:	5c001000 	.word	0x5c001000
24001c14:	ffff0000 	.word	0xffff0000
24001c18:	51008108 	.word	0x51008108
24001c1c:	52004000 	.word	0x52004000

24001c20 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
24001c20:	b480      	push	{r7}
24001c22:	b08b      	sub	sp, #44	; 0x2c
24001c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24001c26:	4bb1      	ldr	r3, [pc, #708]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001c28:	691b      	ldr	r3, [r3, #16]
24001c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24001c2e:	2b18      	cmp	r3, #24
24001c30:	f200 812e 	bhi.w	24001e90 <SystemCoreClockUpdate+0x270>
24001c34:	a201      	add	r2, pc, #4	; (adr r2, 24001c3c <SystemCoreClockUpdate+0x1c>)
24001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24001c3a:	bf00      	nop
24001c3c:	24001ca1 	.word	0x24001ca1
24001c40:	24001e91 	.word	0x24001e91
24001c44:	24001e91 	.word	0x24001e91
24001c48:	24001e91 	.word	0x24001e91
24001c4c:	24001e91 	.word	0x24001e91
24001c50:	24001e91 	.word	0x24001e91
24001c54:	24001e91 	.word	0x24001e91
24001c58:	24001e91 	.word	0x24001e91
24001c5c:	24001cb5 	.word	0x24001cb5
24001c60:	24001e91 	.word	0x24001e91
24001c64:	24001e91 	.word	0x24001e91
24001c68:	24001e91 	.word	0x24001e91
24001c6c:	24001e91 	.word	0x24001e91
24001c70:	24001e91 	.word	0x24001e91
24001c74:	24001e91 	.word	0x24001e91
24001c78:	24001e91 	.word	0x24001e91
24001c7c:	24001cbb 	.word	0x24001cbb
24001c80:	24001e91 	.word	0x24001e91
24001c84:	24001e91 	.word	0x24001e91
24001c88:	24001e91 	.word	0x24001e91
24001c8c:	24001e91 	.word	0x24001e91
24001c90:	24001e91 	.word	0x24001e91
24001c94:	24001e91 	.word	0x24001e91
24001c98:	24001e91 	.word	0x24001e91
24001c9c:	24001cc1 	.word	0x24001cc1
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001ca0:	4b92      	ldr	r3, [pc, #584]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001ca2:	681b      	ldr	r3, [r3, #0]
24001ca4:	08db      	lsrs	r3, r3, #3
24001ca6:	f003 0303 	and.w	r3, r3, #3
24001caa:	4a91      	ldr	r2, [pc, #580]	; (24001ef0 <SystemCoreClockUpdate+0x2d0>)
24001cac:	fa22 f303 	lsr.w	r3, r2, r3
24001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001cb2:	e0f7      	b.n	24001ea4 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
24001cb4:	4b8f      	ldr	r3, [pc, #572]	; (24001ef4 <SystemCoreClockUpdate+0x2d4>)
24001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001cb8:	e0f4      	b.n	24001ea4 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
24001cba:	4b8f      	ldr	r3, [pc, #572]	; (24001ef8 <SystemCoreClockUpdate+0x2d8>)
24001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001cbe:	e0f1      	b.n	24001ea4 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24001cc0:	4b8a      	ldr	r3, [pc, #552]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001cc4:	f003 0303 	and.w	r3, r3, #3
24001cc8:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24001cca:	4b88      	ldr	r3, [pc, #544]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001cce:	091b      	lsrs	r3, r3, #4
24001cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24001cd4:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24001cd6:	4b85      	ldr	r3, [pc, #532]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001cda:	f003 0301 	and.w	r3, r3, #1
24001cde:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24001ce0:	4b82      	ldr	r3, [pc, #520]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001ce4:	08db      	lsrs	r3, r3, #3
24001ce6:	f3c3 030c 	ubfx	r3, r3, #0, #13
24001cea:	697a      	ldr	r2, [r7, #20]
24001cec:	fb02 f303 	mul.w	r3, r2, r3
24001cf0:	ee07 3a90 	vmov	s15, r3
24001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001cf8:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
24001cfc:	69bb      	ldr	r3, [r7, #24]
24001cfe:	2b00      	cmp	r3, #0
24001d00:	f000 80c3 	beq.w	24001e8a <SystemCoreClockUpdate+0x26a>
24001d04:	69fb      	ldr	r3, [r7, #28]
24001d06:	2b02      	cmp	r3, #2
24001d08:	d059      	beq.n	24001dbe <SystemCoreClockUpdate+0x19e>
24001d0a:	69fb      	ldr	r3, [r7, #28]
24001d0c:	2b02      	cmp	r3, #2
24001d0e:	d878      	bhi.n	24001e02 <SystemCoreClockUpdate+0x1e2>
24001d10:	69fb      	ldr	r3, [r7, #28]
24001d12:	2b00      	cmp	r3, #0
24001d14:	d003      	beq.n	24001d1e <SystemCoreClockUpdate+0xfe>
24001d16:	69fb      	ldr	r3, [r7, #28]
24001d18:	2b01      	cmp	r3, #1
24001d1a:	d02e      	beq.n	24001d7a <SystemCoreClockUpdate+0x15a>
24001d1c:	e071      	b.n	24001e02 <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001d1e:	4b73      	ldr	r3, [pc, #460]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001d20:	681b      	ldr	r3, [r3, #0]
24001d22:	08db      	lsrs	r3, r3, #3
24001d24:	f003 0303 	and.w	r3, r3, #3
24001d28:	4a71      	ldr	r2, [pc, #452]	; (24001ef0 <SystemCoreClockUpdate+0x2d0>)
24001d2a:	fa22 f303 	lsr.w	r3, r2, r3
24001d2e:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001d30:	68fb      	ldr	r3, [r7, #12]
24001d32:	ee07 3a90 	vmov	s15, r3
24001d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001d3a:	69bb      	ldr	r3, [r7, #24]
24001d3c:	ee07 3a90 	vmov	s15, r3
24001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001d48:	4b68      	ldr	r3, [pc, #416]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001d50:	ee07 3a90 	vmov	s15, r3
24001d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001d58:	ed97 6a04 	vldr	s12, [r7, #16]
24001d5c:	eddf 5a67 	vldr	s11, [pc, #412]	; 24001efc <SystemCoreClockUpdate+0x2dc>
24001d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
24001d74:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
24001d78:	e071      	b.n	24001e5e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001d7a:	69bb      	ldr	r3, [r7, #24]
24001d7c:	ee07 3a90 	vmov	s15, r3
24001d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001d84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24001f00 <SystemCoreClockUpdate+0x2e0>
24001d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001d8c:	4b57      	ldr	r3, [pc, #348]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001d94:	ee07 3a90 	vmov	s15, r3
24001d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001d9c:	ed97 6a04 	vldr	s12, [r7, #16]
24001da0:	eddf 5a56 	vldr	s11, [pc, #344]	; 24001efc <SystemCoreClockUpdate+0x2dc>
24001da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
24001db8:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001dbc:	e04f      	b.n	24001e5e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001dbe:	69bb      	ldr	r3, [r7, #24]
24001dc0:	ee07 3a90 	vmov	s15, r3
24001dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001dc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24001f04 <SystemCoreClockUpdate+0x2e4>
24001dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001dd0:	4b46      	ldr	r3, [pc, #280]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001dd8:	ee07 3a90 	vmov	s15, r3
24001ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001de0:	ed97 6a04 	vldr	s12, [r7, #16]
24001de4:	eddf 5a45 	vldr	s11, [pc, #276]	; 24001efc <SystemCoreClockUpdate+0x2dc>
24001de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001df8:	ee67 7a27 	vmul.f32	s15, s14, s15
24001dfc:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001e00:	e02d      	b.n	24001e5e <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001e02:	4b3a      	ldr	r3, [pc, #232]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001e04:	681b      	ldr	r3, [r3, #0]
24001e06:	08db      	lsrs	r3, r3, #3
24001e08:	f003 0303 	and.w	r3, r3, #3
24001e0c:	4a38      	ldr	r2, [pc, #224]	; (24001ef0 <SystemCoreClockUpdate+0x2d0>)
24001e0e:	fa22 f303 	lsr.w	r3, r2, r3
24001e12:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e14:	68fb      	ldr	r3, [r7, #12]
24001e16:	ee07 3a90 	vmov	s15, r3
24001e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e1e:	69bb      	ldr	r3, [r7, #24]
24001e20:	ee07 3a90 	vmov	s15, r3
24001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e2c:	4b2f      	ldr	r3, [pc, #188]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e34:	ee07 3a90 	vmov	s15, r3
24001e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e3c:	ed97 6a04 	vldr	s12, [r7, #16]
24001e40:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24001efc <SystemCoreClockUpdate+0x2dc>
24001e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e58:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001e5c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24001e5e:	4b23      	ldr	r3, [pc, #140]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e62:	0a5b      	lsrs	r3, r3, #9
24001e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24001e68:	3301      	adds	r3, #1
24001e6a:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24001e6c:	68bb      	ldr	r3, [r7, #8]
24001e6e:	ee07 3a90 	vmov	s15, r3
24001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24001e76:	edd7 6a08 	vldr	s13, [r7, #32]
24001e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24001e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24001e82:	ee17 3a90 	vmov	r3, s15
24001e86:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
24001e88:	e00c      	b.n	24001ea4 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
24001e8a:	2300      	movs	r3, #0
24001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001e8e:	e009      	b.n	24001ea4 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001e90:	4b16      	ldr	r3, [pc, #88]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001e92:	681b      	ldr	r3, [r3, #0]
24001e94:	08db      	lsrs	r3, r3, #3
24001e96:	f003 0303 	and.w	r3, r3, #3
24001e9a:	4a15      	ldr	r2, [pc, #84]	; (24001ef0 <SystemCoreClockUpdate+0x2d0>)
24001e9c:	fa22 f303 	lsr.w	r3, r2, r3
24001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001ea2:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
24001ea4:	4b11      	ldr	r3, [pc, #68]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001ea6:	699b      	ldr	r3, [r3, #24]
24001ea8:	0a1b      	lsrs	r3, r3, #8
24001eaa:	f003 030f 	and.w	r3, r3, #15
24001eae:	4a16      	ldr	r2, [pc, #88]	; (24001f08 <SystemCoreClockUpdate+0x2e8>)
24001eb0:	5cd3      	ldrb	r3, [r2, r3]
24001eb2:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
24001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001eb6:	687b      	ldr	r3, [r7, #4]
24001eb8:	fa22 f303 	lsr.w	r3, r2, r3
24001ebc:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001ebe:	4b0b      	ldr	r3, [pc, #44]	; (24001eec <SystemCoreClockUpdate+0x2cc>)
24001ec0:	699b      	ldr	r3, [r3, #24]
24001ec2:	f003 030f 	and.w	r3, r3, #15
24001ec6:	4a10      	ldr	r2, [pc, #64]	; (24001f08 <SystemCoreClockUpdate+0x2e8>)
24001ec8:	5cd3      	ldrb	r3, [r2, r3]
24001eca:	f003 031f 	and.w	r3, r3, #31
24001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001ed0:	fa22 f303 	lsr.w	r3, r2, r3
24001ed4:	4a0d      	ldr	r2, [pc, #52]	; (24001f0c <SystemCoreClockUpdate+0x2ec>)
24001ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24001ed8:	4a0d      	ldr	r2, [pc, #52]	; (24001f10 <SystemCoreClockUpdate+0x2f0>)
24001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
24001ede:	bf00      	nop
24001ee0:	372c      	adds	r7, #44	; 0x2c
24001ee2:	46bd      	mov	sp, r7
24001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
24001ee8:	4770      	bx	lr
24001eea:	bf00      	nop
24001eec:	58024400 	.word	0x58024400
24001ef0:	03d09000 	.word	0x03d09000
24001ef4:	003d0900 	.word	0x003d0900
24001ef8:	016e3600 	.word	0x016e3600
24001efc:	46000000 	.word	0x46000000
24001f00:	4a742400 	.word	0x4a742400
24001f04:	4bb71b00 	.word	0x4bb71b00
24001f08:	24016f40 	.word	0x24016f40
24001f0c:	240004cc 	.word	0x240004cc
24001f10:	240004c8 	.word	0x240004c8

24001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 24001f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
24001f18:	f7ff fdfa 	bl	24001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24001f1c:	480c      	ldr	r0, [pc, #48]	; (24001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24001f1e:	490d      	ldr	r1, [pc, #52]	; (24001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24001f20:	4a0d      	ldr	r2, [pc, #52]	; (24001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
24001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
24001f24:	e002      	b.n	24001f2c <LoopCopyDataInit>

24001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24001f2a:	3304      	adds	r3, #4

24001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
24001f30:	d3f9      	bcc.n	24001f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24001f32:	4a0a      	ldr	r2, [pc, #40]	; (24001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24001f34:	4c0a      	ldr	r4, [pc, #40]	; (24001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
24001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
24001f38:	e001      	b.n	24001f3e <LoopFillZerobss>

24001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24001f3c:	3204      	adds	r2, #4

24001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
24001f40:	d3fb      	bcc.n	24001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
24001f42:	f014 ff2d 	bl	24016da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24001f46:	f7fe fe95 	bl	24000c74 <main>
  bx  lr
24001f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24001f4c:	24080004 	.word	0x24080004
  ldr r0, =_sdata
24001f50:	240004a8 	.word	0x240004a8
  ldr r1, =_edata
24001f54:	2400053c 	.word	0x2400053c
  ldr r2, =_sidata
24001f58:	240004a8 	.word	0x240004a8
  ldr r2, =_sbss
24001f5c:	2400053c 	.word	0x2400053c
  ldr r4, =_ebss
24001f60:	24000634 	.word	0x24000634

24001f64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24001f64:	e7fe      	b.n	24001f64 <ADC3_IRQHandler>
	...

24001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24001f68:	b580      	push	{r7, lr}
24001f6a:	b082      	sub	sp, #8
24001f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24001f6e:	2003      	movs	r0, #3
24001f70:	f000 fefc 	bl	24002d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24001f74:	f011 fe6a 	bl	24013c4c <HAL_RCC_GetSysClockFreq>
24001f78:	4602      	mov	r2, r0
24001f7a:	4b15      	ldr	r3, [pc, #84]	; (24001fd0 <HAL_Init+0x68>)
24001f7c:	699b      	ldr	r3, [r3, #24]
24001f7e:	0a1b      	lsrs	r3, r3, #8
24001f80:	f003 030f 	and.w	r3, r3, #15
24001f84:	4913      	ldr	r1, [pc, #76]	; (24001fd4 <HAL_Init+0x6c>)
24001f86:	5ccb      	ldrb	r3, [r1, r3]
24001f88:	f003 031f 	and.w	r3, r3, #31
24001f8c:	fa22 f303 	lsr.w	r3, r2, r3
24001f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001f92:	4b0f      	ldr	r3, [pc, #60]	; (24001fd0 <HAL_Init+0x68>)
24001f94:	699b      	ldr	r3, [r3, #24]
24001f96:	f003 030f 	and.w	r3, r3, #15
24001f9a:	4a0e      	ldr	r2, [pc, #56]	; (24001fd4 <HAL_Init+0x6c>)
24001f9c:	5cd3      	ldrb	r3, [r2, r3]
24001f9e:	f003 031f 	and.w	r3, r3, #31
24001fa2:	687a      	ldr	r2, [r7, #4]
24001fa4:	fa22 f303 	lsr.w	r3, r2, r3
24001fa8:	4a0b      	ldr	r2, [pc, #44]	; (24001fd8 <HAL_Init+0x70>)
24001faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24001fac:	4a0b      	ldr	r2, [pc, #44]	; (24001fdc <HAL_Init+0x74>)
24001fae:	687b      	ldr	r3, [r7, #4]
24001fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24001fb2:	200f      	movs	r0, #15
24001fb4:	f000 f880 	bl	240020b8 <HAL_InitTick>
24001fb8:	4603      	mov	r3, r0
24001fba:	2b00      	cmp	r3, #0
24001fbc:	d001      	beq.n	24001fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24001fbe:	2301      	movs	r3, #1
24001fc0:	e002      	b.n	24001fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24001fc2:	f7ff fc1f 	bl	24001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24001fc6:	2300      	movs	r3, #0
}
24001fc8:	4618      	mov	r0, r3
24001fca:	3708      	adds	r7, #8
24001fcc:	46bd      	mov	sp, r7
24001fce:	bd80      	pop	{r7, pc}
24001fd0:	58024400 	.word	0x58024400
24001fd4:	24016f40 	.word	0x24016f40
24001fd8:	240004cc 	.word	0x240004cc
24001fdc:	240004c8 	.word	0x240004c8

24001fe0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
24001fe0:	b580      	push	{r7, lr}
24001fe2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
24001fe4:	4b26      	ldr	r3, [pc, #152]	; (24002080 <HAL_DeInit+0xa0>)
24001fe6:	4a27      	ldr	r2, [pc, #156]	; (24002084 <HAL_DeInit+0xa4>)
24001fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
24001fea:	4b25      	ldr	r3, [pc, #148]	; (24002080 <HAL_DeInit+0xa0>)
24001fec:	2200      	movs	r2, #0
24001fee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
24001ff0:	4b23      	ldr	r3, [pc, #140]	; (24002080 <HAL_DeInit+0xa0>)
24001ff2:	4a25      	ldr	r2, [pc, #148]	; (24002088 <HAL_DeInit+0xa8>)
24001ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
24001ff8:	4b21      	ldr	r3, [pc, #132]	; (24002080 <HAL_DeInit+0xa0>)
24001ffa:	2200      	movs	r2, #0
24001ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
24002000:	4b1f      	ldr	r3, [pc, #124]	; (24002080 <HAL_DeInit+0xa0>)
24002002:	f240 2271 	movw	r2, #625	; 0x271
24002006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
2400200a:	4b1d      	ldr	r3, [pc, #116]	; (24002080 <HAL_DeInit+0xa0>)
2400200c:	2200      	movs	r2, #0
2400200e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
24002012:	4b1b      	ldr	r3, [pc, #108]	; (24002080 <HAL_DeInit+0xa0>)
24002014:	4a1d      	ldr	r2, [pc, #116]	; (2400208c <HAL_DeInit+0xac>)
24002016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
2400201a:	4b19      	ldr	r3, [pc, #100]	; (24002080 <HAL_DeInit+0xa0>)
2400201c:	2200      	movs	r2, #0
2400201e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
24002022:	4b17      	ldr	r3, [pc, #92]	; (24002080 <HAL_DeInit+0xa0>)
24002024:	2218      	movs	r2, #24
24002026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
2400202a:	4b15      	ldr	r3, [pc, #84]	; (24002080 <HAL_DeInit+0xa0>)
2400202c:	2200      	movs	r2, #0
2400202e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
24002032:	4b13      	ldr	r3, [pc, #76]	; (24002080 <HAL_DeInit+0xa0>)
24002034:	4a16      	ldr	r2, [pc, #88]	; (24002090 <HAL_DeInit+0xb0>)
24002036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
2400203a:	4b11      	ldr	r3, [pc, #68]	; (24002080 <HAL_DeInit+0xa0>)
2400203c:	2200      	movs	r2, #0
2400203e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
24002042:	4b0f      	ldr	r3, [pc, #60]	; (24002080 <HAL_DeInit+0xa0>)
24002044:	f44f 729b 	mov.w	r2, #310	; 0x136
24002048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
2400204c:	4b0c      	ldr	r3, [pc, #48]	; (24002080 <HAL_DeInit+0xa0>)
2400204e:	2200      	movs	r2, #0
24002050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
24002054:	4b0a      	ldr	r3, [pc, #40]	; (24002080 <HAL_DeInit+0xa0>)
24002056:	4a0f      	ldr	r2, [pc, #60]	; (24002094 <HAL_DeInit+0xb4>)
24002058:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
2400205c:	4b08      	ldr	r3, [pc, #32]	; (24002080 <HAL_DeInit+0xa0>)
2400205e:	2200      	movs	r2, #0
24002060:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
24002064:	4b06      	ldr	r3, [pc, #24]	; (24002080 <HAL_DeInit+0xa0>)
24002066:	4a0c      	ldr	r2, [pc, #48]	; (24002098 <HAL_DeInit+0xb8>)
24002068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
2400206c:	4b04      	ldr	r3, [pc, #16]	; (24002080 <HAL_DeInit+0xa0>)
2400206e:	2200      	movs	r2, #0
24002070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
24002074:	f000 f819 	bl	240020aa <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
24002078:	2300      	movs	r3, #0
}
2400207a:	4618      	mov	r0, r3
2400207c:	bd80      	pop	{r7, pc}
2400207e:	bf00      	nop
24002080:	58024400 	.word	0x58024400
24002084:	00015031 	.word	0x00015031
24002088:	0a00c023 	.word	0x0a00c023
2400208c:	032807ff 	.word	0x032807ff
24002090:	e8ffc3ff 	.word	0xe8ffc3ff
24002094:	31d73033 	.word	0x31d73033
24002098:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
2400209c:	b480      	push	{r7}
2400209e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
240020a0:	bf00      	nop
240020a2:	46bd      	mov	sp, r7
240020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240020a8:	4770      	bx	lr

240020aa <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
240020aa:	b480      	push	{r7}
240020ac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
240020ae:	bf00      	nop
240020b0:	46bd      	mov	sp, r7
240020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240020b6:	4770      	bx	lr

240020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
240020b8:	b580      	push	{r7, lr}
240020ba:	b082      	sub	sp, #8
240020bc:	af00      	add	r7, sp, #0
240020be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240020c0:	4b15      	ldr	r3, [pc, #84]	; (24002118 <HAL_InitTick+0x60>)
240020c2:	781b      	ldrb	r3, [r3, #0]
240020c4:	2b00      	cmp	r3, #0
240020c6:	d101      	bne.n	240020cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
240020c8:	2301      	movs	r3, #1
240020ca:	e021      	b.n	24002110 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240020cc:	4b13      	ldr	r3, [pc, #76]	; (2400211c <HAL_InitTick+0x64>)
240020ce:	681a      	ldr	r2, [r3, #0]
240020d0:	4b11      	ldr	r3, [pc, #68]	; (24002118 <HAL_InitTick+0x60>)
240020d2:	781b      	ldrb	r3, [r3, #0]
240020d4:	4619      	mov	r1, r3
240020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
240020da:	fbb3 f3f1 	udiv	r3, r3, r1
240020de:	fbb2 f3f3 	udiv	r3, r2, r3
240020e2:	4618      	mov	r0, r3
240020e4:	f000 fe87 	bl	24002df6 <HAL_SYSTICK_Config>
240020e8:	4603      	mov	r3, r0
240020ea:	2b00      	cmp	r3, #0
240020ec:	d001      	beq.n	240020f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
240020ee:	2301      	movs	r3, #1
240020f0:	e00e      	b.n	24002110 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240020f2:	687b      	ldr	r3, [r7, #4]
240020f4:	2b0f      	cmp	r3, #15
240020f6:	d80a      	bhi.n	2400210e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240020f8:	2200      	movs	r2, #0
240020fa:	6879      	ldr	r1, [r7, #4]
240020fc:	f04f 30ff 	mov.w	r0, #4294967295
24002100:	f000 fe3f 	bl	24002d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24002104:	4a06      	ldr	r2, [pc, #24]	; (24002120 <HAL_InitTick+0x68>)
24002106:	687b      	ldr	r3, [r7, #4]
24002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2400210a:	2300      	movs	r3, #0
2400210c:	e000      	b.n	24002110 <HAL_InitTick+0x58>
    return HAL_ERROR;
2400210e:	2301      	movs	r3, #1
}
24002110:	4618      	mov	r0, r3
24002112:	3708      	adds	r7, #8
24002114:	46bd      	mov	sp, r7
24002116:	bd80      	pop	{r7, pc}
24002118:	240004d4 	.word	0x240004d4
2400211c:	240004c8 	.word	0x240004c8
24002120:	240004d0 	.word	0x240004d0

24002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24002124:	b480      	push	{r7}
24002126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24002128:	4b06      	ldr	r3, [pc, #24]	; (24002144 <HAL_IncTick+0x20>)
2400212a:	781b      	ldrb	r3, [r3, #0]
2400212c:	461a      	mov	r2, r3
2400212e:	4b06      	ldr	r3, [pc, #24]	; (24002148 <HAL_IncTick+0x24>)
24002130:	681b      	ldr	r3, [r3, #0]
24002132:	4413      	add	r3, r2
24002134:	4a04      	ldr	r2, [pc, #16]	; (24002148 <HAL_IncTick+0x24>)
24002136:	6013      	str	r3, [r2, #0]
}
24002138:	bf00      	nop
2400213a:	46bd      	mov	sp, r7
2400213c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002140:	4770      	bx	lr
24002142:	bf00      	nop
24002144:	240004d4 	.word	0x240004d4
24002148:	24000614 	.word	0x24000614

2400214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2400214c:	b480      	push	{r7}
2400214e:	af00      	add	r7, sp, #0
  return uwTick;
24002150:	4b03      	ldr	r3, [pc, #12]	; (24002160 <HAL_GetTick+0x14>)
24002152:	681b      	ldr	r3, [r3, #0]
}
24002154:	4618      	mov	r0, r3
24002156:	46bd      	mov	sp, r7
24002158:	f85d 7b04 	ldr.w	r7, [sp], #4
2400215c:	4770      	bx	lr
2400215e:	bf00      	nop
24002160:	24000614 	.word	0x24000614

24002164 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
24002164:	b480      	push	{r7}
24002166:	af00      	add	r7, sp, #0
  return uwTickPrio;
24002168:	4b03      	ldr	r3, [pc, #12]	; (24002178 <HAL_GetTickPrio+0x14>)
2400216a:	681b      	ldr	r3, [r3, #0]
}
2400216c:	4618      	mov	r0, r3
2400216e:	46bd      	mov	sp, r7
24002170:	f85d 7b04 	ldr.w	r7, [sp], #4
24002174:	4770      	bx	lr
24002176:	bf00      	nop
24002178:	240004d0 	.word	0x240004d0

2400217c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
2400217c:	b580      	push	{r7, lr}
2400217e:	b084      	sub	sp, #16
24002180:	af00      	add	r7, sp, #0
24002182:	4603      	mov	r3, r0
24002184:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
24002186:	2300      	movs	r3, #0
24002188:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
2400218a:	4b0e      	ldr	r3, [pc, #56]	; (240021c4 <HAL_SetTickFreq+0x48>)
2400218c:	781b      	ldrb	r3, [r3, #0]
2400218e:	79fa      	ldrb	r2, [r7, #7]
24002190:	429a      	cmp	r2, r3
24002192:	d012      	beq.n	240021ba <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
24002194:	4b0b      	ldr	r3, [pc, #44]	; (240021c4 <HAL_SetTickFreq+0x48>)
24002196:	781b      	ldrb	r3, [r3, #0]
24002198:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
2400219a:	4a0a      	ldr	r2, [pc, #40]	; (240021c4 <HAL_SetTickFreq+0x48>)
2400219c:	79fb      	ldrb	r3, [r7, #7]
2400219e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
240021a0:	4b09      	ldr	r3, [pc, #36]	; (240021c8 <HAL_SetTickFreq+0x4c>)
240021a2:	681b      	ldr	r3, [r3, #0]
240021a4:	4618      	mov	r0, r3
240021a6:	f7ff ff87 	bl	240020b8 <HAL_InitTick>
240021aa:	4603      	mov	r3, r0
240021ac:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
240021ae:	7bfb      	ldrb	r3, [r7, #15]
240021b0:	2b00      	cmp	r3, #0
240021b2:	d002      	beq.n	240021ba <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
240021b4:	4a03      	ldr	r2, [pc, #12]	; (240021c4 <HAL_SetTickFreq+0x48>)
240021b6:	7bbb      	ldrb	r3, [r7, #14]
240021b8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
240021ba:	7bfb      	ldrb	r3, [r7, #15]
}
240021bc:	4618      	mov	r0, r3
240021be:	3710      	adds	r7, #16
240021c0:	46bd      	mov	sp, r7
240021c2:	bd80      	pop	{r7, pc}
240021c4:	240004d4 	.word	0x240004d4
240021c8:	240004d0 	.word	0x240004d0

240021cc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
240021cc:	b480      	push	{r7}
240021ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
240021d0:	4b03      	ldr	r3, [pc, #12]	; (240021e0 <HAL_GetTickFreq+0x14>)
240021d2:	781b      	ldrb	r3, [r3, #0]
}
240021d4:	4618      	mov	r0, r3
240021d6:	46bd      	mov	sp, r7
240021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240021dc:	4770      	bx	lr
240021de:	bf00      	nop
240021e0:	240004d4 	.word	0x240004d4

240021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240021e4:	b580      	push	{r7, lr}
240021e6:	b084      	sub	sp, #16
240021e8:	af00      	add	r7, sp, #0
240021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
240021ec:	f7ff ffae 	bl	2400214c <HAL_GetTick>
240021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
240021f2:	687b      	ldr	r3, [r7, #4]
240021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240021f6:	68fb      	ldr	r3, [r7, #12]
240021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
240021fc:	d005      	beq.n	2400220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
240021fe:	4b0a      	ldr	r3, [pc, #40]	; (24002228 <HAL_Delay+0x44>)
24002200:	781b      	ldrb	r3, [r3, #0]
24002202:	461a      	mov	r2, r3
24002204:	68fb      	ldr	r3, [r7, #12]
24002206:	4413      	add	r3, r2
24002208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2400220a:	bf00      	nop
2400220c:	f7ff ff9e 	bl	2400214c <HAL_GetTick>
24002210:	4602      	mov	r2, r0
24002212:	68bb      	ldr	r3, [r7, #8]
24002214:	1ad3      	subs	r3, r2, r3
24002216:	68fa      	ldr	r2, [r7, #12]
24002218:	429a      	cmp	r2, r3
2400221a:	d8f7      	bhi.n	2400220c <HAL_Delay+0x28>
  {
  }
}
2400221c:	bf00      	nop
2400221e:	bf00      	nop
24002220:	3710      	adds	r7, #16
24002222:	46bd      	mov	sp, r7
24002224:	bd80      	pop	{r7, pc}
24002226:	bf00      	nop
24002228:	240004d4 	.word	0x240004d4

2400222c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
2400222c:	b480      	push	{r7}
2400222e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
24002230:	4b05      	ldr	r3, [pc, #20]	; (24002248 <HAL_SuspendTick+0x1c>)
24002232:	681b      	ldr	r3, [r3, #0]
24002234:	4a04      	ldr	r2, [pc, #16]	; (24002248 <HAL_SuspendTick+0x1c>)
24002236:	f023 0302 	bic.w	r3, r3, #2
2400223a:	6013      	str	r3, [r2, #0]
}
2400223c:	bf00      	nop
2400223e:	46bd      	mov	sp, r7
24002240:	f85d 7b04 	ldr.w	r7, [sp], #4
24002244:	4770      	bx	lr
24002246:	bf00      	nop
24002248:	e000e010 	.word	0xe000e010

2400224c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
2400224c:	b480      	push	{r7}
2400224e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
24002250:	4b05      	ldr	r3, [pc, #20]	; (24002268 <HAL_ResumeTick+0x1c>)
24002252:	681b      	ldr	r3, [r3, #0]
24002254:	4a04      	ldr	r2, [pc, #16]	; (24002268 <HAL_ResumeTick+0x1c>)
24002256:	f043 0302 	orr.w	r3, r3, #2
2400225a:	6013      	str	r3, [r2, #0]
}
2400225c:	bf00      	nop
2400225e:	46bd      	mov	sp, r7
24002260:	f85d 7b04 	ldr.w	r7, [sp], #4
24002264:	4770      	bx	lr
24002266:	bf00      	nop
24002268:	e000e010 	.word	0xe000e010

2400226c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
2400226c:	b480      	push	{r7}
2400226e:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
24002270:	4b02      	ldr	r3, [pc, #8]	; (2400227c <HAL_GetHalVersion+0x10>)
}
24002272:	4618      	mov	r0, r3
24002274:	46bd      	mov	sp, r7
24002276:	f85d 7b04 	ldr.w	r7, [sp], #4
2400227a:	4770      	bx	lr
2400227c:	010b0000 	.word	0x010b0000

24002280 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
24002280:	b480      	push	{r7}
24002282:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
24002284:	4b03      	ldr	r3, [pc, #12]	; (24002294 <HAL_GetREVID+0x14>)
24002286:	681b      	ldr	r3, [r3, #0]
24002288:	0c1b      	lsrs	r3, r3, #16
}
2400228a:	4618      	mov	r0, r3
2400228c:	46bd      	mov	sp, r7
2400228e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002292:	4770      	bx	lr
24002294:	5c001000 	.word	0x5c001000

24002298 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
24002298:	b480      	push	{r7}
2400229a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
2400229c:	4b04      	ldr	r3, [pc, #16]	; (240022b0 <HAL_GetDEVID+0x18>)
2400229e:	681b      	ldr	r3, [r3, #0]
240022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
240022a4:	4618      	mov	r0, r3
240022a6:	46bd      	mov	sp, r7
240022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240022ac:	4770      	bx	lr
240022ae:	bf00      	nop
240022b0:	5c001000 	.word	0x5c001000

240022b4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
240022b4:	b480      	push	{r7}
240022b6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
240022b8:	4b03      	ldr	r3, [pc, #12]	; (240022c8 <HAL_GetUIDw0+0x14>)
240022ba:	681b      	ldr	r3, [r3, #0]
}
240022bc:	4618      	mov	r0, r3
240022be:	46bd      	mov	sp, r7
240022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240022c4:	4770      	bx	lr
240022c6:	bf00      	nop
240022c8:	1ff1e800 	.word	0x1ff1e800

240022cc <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
240022cc:	b480      	push	{r7}
240022ce:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
240022d0:	4b03      	ldr	r3, [pc, #12]	; (240022e0 <HAL_GetUIDw1+0x14>)
240022d2:	681b      	ldr	r3, [r3, #0]
}
240022d4:	4618      	mov	r0, r3
240022d6:	46bd      	mov	sp, r7
240022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240022dc:	4770      	bx	lr
240022de:	bf00      	nop
240022e0:	1ff1e804 	.word	0x1ff1e804

240022e4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
240022e4:	b480      	push	{r7}
240022e6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
240022e8:	4b03      	ldr	r3, [pc, #12]	; (240022f8 <HAL_GetUIDw2+0x14>)
240022ea:	681b      	ldr	r3, [r3, #0]
}
240022ec:	4618      	mov	r0, r3
240022ee:	46bd      	mov	sp, r7
240022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240022f4:	4770      	bx	lr
240022f6:	bf00      	nop
240022f8:	1ff1e808 	.word	0x1ff1e808

240022fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
240022fc:	b480      	push	{r7}
240022fe:	b083      	sub	sp, #12
24002300:	af00      	add	r7, sp, #0
24002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
24002304:	4b06      	ldr	r3, [pc, #24]	; (24002320 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
24002306:	681b      	ldr	r3, [r3, #0]
24002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2400230c:	4904      	ldr	r1, [pc, #16]	; (24002320 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
2400230e:	687b      	ldr	r3, [r7, #4]
24002310:	4313      	orrs	r3, r2
24002312:	600b      	str	r3, [r1, #0]
}
24002314:	bf00      	nop
24002316:	370c      	adds	r7, #12
24002318:	46bd      	mov	sp, r7
2400231a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400231e:	4770      	bx	lr
24002320:	58003c00 	.word	0x58003c00

24002324 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
24002324:	b480      	push	{r7}
24002326:	b083      	sub	sp, #12
24002328:	af00      	add	r7, sp, #0
2400232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
2400232c:	4b06      	ldr	r3, [pc, #24]	; (24002348 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
2400232e:	681b      	ldr	r3, [r3, #0]
24002330:	f023 0202 	bic.w	r2, r3, #2
24002334:	4904      	ldr	r1, [pc, #16]	; (24002348 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
24002336:	687b      	ldr	r3, [r7, #4]
24002338:	4313      	orrs	r3, r2
2400233a:	600b      	str	r3, [r1, #0]
}
2400233c:	bf00      	nop
2400233e:	370c      	adds	r7, #12
24002340:	46bd      	mov	sp, r7
24002342:	f85d 7b04 	ldr.w	r7, [sp], #4
24002346:	4770      	bx	lr
24002348:	58003c00 	.word	0x58003c00

2400234c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
2400234c:	b480      	push	{r7}
2400234e:	b083      	sub	sp, #12
24002350:	af00      	add	r7, sp, #0
24002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
24002354:	4b06      	ldr	r3, [pc, #24]	; (24002370 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
24002356:	685b      	ldr	r3, [r3, #4]
24002358:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2400235c:	4904      	ldr	r1, [pc, #16]	; (24002370 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
2400235e:	687b      	ldr	r3, [r7, #4]
24002360:	4313      	orrs	r3, r2
24002362:	604b      	str	r3, [r1, #4]
}
24002364:	bf00      	nop
24002366:	370c      	adds	r7, #12
24002368:	46bd      	mov	sp, r7
2400236a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400236e:	4770      	bx	lr
24002370:	58003c00 	.word	0x58003c00

24002374 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
24002374:	b580      	push	{r7, lr}
24002376:	b082      	sub	sp, #8
24002378:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
2400237a:	4b0f      	ldr	r3, [pc, #60]	; (240023b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
2400237c:	681b      	ldr	r3, [r3, #0]
2400237e:	4a0e      	ldr	r2, [pc, #56]	; (240023b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002380:	f043 0301 	orr.w	r3, r3, #1
24002384:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
24002386:	f7ff fee1 	bl	2400214c <HAL_GetTick>
2400238a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
2400238c:	e008      	b.n	240023a0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
2400238e:	f7ff fedd 	bl	2400214c <HAL_GetTick>
24002392:	4602      	mov	r2, r0
24002394:	687b      	ldr	r3, [r7, #4]
24002396:	1ad3      	subs	r3, r2, r3
24002398:	2b0a      	cmp	r3, #10
2400239a:	d901      	bls.n	240023a0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
2400239c:	2303      	movs	r3, #3
2400239e:	e006      	b.n	240023ae <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
240023a0:	4b05      	ldr	r3, [pc, #20]	; (240023b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240023a2:	681b      	ldr	r3, [r3, #0]
240023a4:	f003 0308 	and.w	r3, r3, #8
240023a8:	2b00      	cmp	r3, #0
240023aa:	d0f0      	beq.n	2400238e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
240023ac:	2300      	movs	r3, #0
}
240023ae:	4618      	mov	r0, r3
240023b0:	3708      	adds	r7, #8
240023b2:	46bd      	mov	sp, r7
240023b4:	bd80      	pop	{r7, pc}
240023b6:	bf00      	nop
240023b8:	58003c00 	.word	0x58003c00

240023bc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
240023bc:	b480      	push	{r7}
240023be:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
240023c0:	4b05      	ldr	r3, [pc, #20]	; (240023d8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
240023c2:	681b      	ldr	r3, [r3, #0]
240023c4:	4a04      	ldr	r2, [pc, #16]	; (240023d8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
240023c6:	f023 0301 	bic.w	r3, r3, #1
240023ca:	6013      	str	r3, [r2, #0]
}
240023cc:	bf00      	nop
240023ce:	46bd      	mov	sp, r7
240023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240023d4:	4770      	bx	lr
240023d6:	bf00      	nop
240023d8:	58003c00 	.word	0x58003c00

240023dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
240023dc:	b480      	push	{r7}
240023de:	b083      	sub	sp, #12
240023e0:	af00      	add	r7, sp, #0
240023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
240023e4:	4b06      	ldr	r3, [pc, #24]	; (24002400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
240023e6:	685b      	ldr	r3, [r3, #4]
240023e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
240023ec:	4904      	ldr	r1, [pc, #16]	; (24002400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
240023ee:	687b      	ldr	r3, [r7, #4]
240023f0:	4313      	orrs	r3, r2
240023f2:	604b      	str	r3, [r1, #4]
}
240023f4:	bf00      	nop
240023f6:	370c      	adds	r7, #12
240023f8:	46bd      	mov	sp, r7
240023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240023fe:	4770      	bx	lr
24002400:	58000400 	.word	0x58000400

24002404 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
24002404:	b480      	push	{r7}
24002406:	b083      	sub	sp, #12
24002408:	af00      	add	r7, sp, #0
2400240a:	6078      	str	r0, [r7, #4]
2400240c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
2400240e:	4b07      	ldr	r3, [pc, #28]	; (2400242c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24002410:	685a      	ldr	r2, [r3, #4]
24002412:	687b      	ldr	r3, [r7, #4]
24002414:	43db      	mvns	r3, r3
24002416:	401a      	ands	r2, r3
24002418:	4904      	ldr	r1, [pc, #16]	; (2400242c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
2400241a:	683b      	ldr	r3, [r7, #0]
2400241c:	4313      	orrs	r3, r2
2400241e:	604b      	str	r3, [r1, #4]
}
24002420:	bf00      	nop
24002422:	370c      	adds	r7, #12
24002424:	46bd      	mov	sp, r7
24002426:	f85d 7b04 	ldr.w	r7, [sp], #4
2400242a:	4770      	bx	lr
2400242c:	58000400 	.word	0x58000400

24002430 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
24002430:	b480      	push	{r7}
24002432:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
24002434:	4b05      	ldr	r3, [pc, #20]	; (2400244c <HAL_SYSCFG_EnableBOOST+0x1c>)
24002436:	685b      	ldr	r3, [r3, #4]
24002438:	4a04      	ldr	r2, [pc, #16]	; (2400244c <HAL_SYSCFG_EnableBOOST+0x1c>)
2400243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400243e:	6053      	str	r3, [r2, #4]
}
24002440:	bf00      	nop
24002442:	46bd      	mov	sp, r7
24002444:	f85d 7b04 	ldr.w	r7, [sp], #4
24002448:	4770      	bx	lr
2400244a:	bf00      	nop
2400244c:	58000400 	.word	0x58000400

24002450 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
24002450:	b480      	push	{r7}
24002452:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
24002454:	4b05      	ldr	r3, [pc, #20]	; (2400246c <HAL_SYSCFG_DisableBOOST+0x1c>)
24002456:	685b      	ldr	r3, [r3, #4]
24002458:	4a04      	ldr	r2, [pc, #16]	; (2400246c <HAL_SYSCFG_DisableBOOST+0x1c>)
2400245a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400245e:	6053      	str	r3, [r2, #4]
}
24002460:	bf00      	nop
24002462:	46bd      	mov	sp, r7
24002464:	f85d 7b04 	ldr.w	r7, [sp], #4
24002468:	4770      	bx	lr
2400246a:	bf00      	nop
2400246c:	58000400 	.word	0x58000400

24002470 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
24002470:	b480      	push	{r7}
24002472:	b083      	sub	sp, #12
24002474:	af00      	add	r7, sp, #0
24002476:	6078      	str	r0, [r7, #4]
24002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
2400247a:	687b      	ldr	r3, [r7, #4]
2400247c:	2b00      	cmp	r3, #0
2400247e:	d10b      	bne.n	24002498 <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
24002480:	4b0e      	ldr	r3, [pc, #56]	; (240024bc <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002482:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
24002486:	b29a      	uxth	r2, r3
24002488:	683b      	ldr	r3, [r7, #0]
2400248a:	0c1b      	lsrs	r3, r3, #16
2400248c:	041b      	lsls	r3, r3, #16
2400248e:	490b      	ldr	r1, [pc, #44]	; (240024bc <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002490:	4313      	orrs	r3, r2
24002492:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
24002496:	e00a      	b.n	240024ae <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
24002498:	4b08      	ldr	r3, [pc, #32]	; (240024bc <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2400249a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
2400249e:	4b08      	ldr	r3, [pc, #32]	; (240024c0 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
240024a0:	4013      	ands	r3, r2
240024a2:	683a      	ldr	r2, [r7, #0]
240024a4:	0c12      	lsrs	r2, r2, #16
240024a6:	4905      	ldr	r1, [pc, #20]	; (240024bc <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240024a8:	4313      	orrs	r3, r2
240024aa:	f8c1 330c 	str.w	r3, [r1, #780]	; 0x30c
}
240024ae:	bf00      	nop
240024b0:	370c      	adds	r7, #12
240024b2:	46bd      	mov	sp, r7
240024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240024b8:	4770      	bx	lr
240024ba:	bf00      	nop
240024bc:	58000400 	.word	0x58000400
240024c0:	ffff0000 	.word	0xffff0000

240024c4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
240024c4:	b480      	push	{r7}
240024c6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
240024c8:	4b05      	ldr	r3, [pc, #20]	; (240024e0 <HAL_EnableCompensationCell+0x1c>)
240024ca:	6a1b      	ldr	r3, [r3, #32]
240024cc:	4a04      	ldr	r2, [pc, #16]	; (240024e0 <HAL_EnableCompensationCell+0x1c>)
240024ce:	f043 0301 	orr.w	r3, r3, #1
240024d2:	6213      	str	r3, [r2, #32]
}
240024d4:	bf00      	nop
240024d6:	46bd      	mov	sp, r7
240024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240024dc:	4770      	bx	lr
240024de:	bf00      	nop
240024e0:	58000400 	.word	0x58000400

240024e4 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
240024e4:	b480      	push	{r7}
240024e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
240024e8:	4b05      	ldr	r3, [pc, #20]	; (24002500 <HAL_DisableCompensationCell+0x1c>)
240024ea:	6a1b      	ldr	r3, [r3, #32]
240024ec:	4a04      	ldr	r2, [pc, #16]	; (24002500 <HAL_DisableCompensationCell+0x1c>)
240024ee:	f023 0301 	bic.w	r3, r3, #1
240024f2:	6213      	str	r3, [r2, #32]
}
240024f4:	bf00      	nop
240024f6:	46bd      	mov	sp, r7
240024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
240024fc:	4770      	bx	lr
240024fe:	bf00      	nop
24002500:	58000400 	.word	0x58000400

24002504 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
24002504:	b480      	push	{r7}
24002506:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24002508:	4b05      	ldr	r3, [pc, #20]	; (24002520 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
2400250a:	6a1b      	ldr	r3, [r3, #32]
2400250c:	4a04      	ldr	r2, [pc, #16]	; (24002520 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
2400250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002512:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
24002514:	bf00      	nop
24002516:	46bd      	mov	sp, r7
24002518:	f85d 7b04 	ldr.w	r7, [sp], #4
2400251c:	4770      	bx	lr
2400251e:	bf00      	nop
24002520:	58000400 	.word	0x58000400

24002524 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
24002524:	b480      	push	{r7}
24002526:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24002528:	4b05      	ldr	r3, [pc, #20]	; (24002540 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
2400252a:	6a1b      	ldr	r3, [r3, #32]
2400252c:	4a04      	ldr	r2, [pc, #16]	; (24002540 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
2400252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002532:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
24002534:	bf00      	nop
24002536:	46bd      	mov	sp, r7
24002538:	f85d 7b04 	ldr.w	r7, [sp], #4
2400253c:	4770      	bx	lr
2400253e:	bf00      	nop
24002540:	58000400 	.word	0x58000400

24002544 <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
24002544:	b480      	push	{r7}
24002546:	b083      	sub	sp, #12
24002548:	af00      	add	r7, sp, #0
2400254a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
2400254c:	4b06      	ldr	r3, [pc, #24]	; (24002568 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
2400254e:	6a1b      	ldr	r3, [r3, #32]
24002550:	f023 0202 	bic.w	r2, r3, #2
24002554:	4904      	ldr	r1, [pc, #16]	; (24002568 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
24002556:	687b      	ldr	r3, [r7, #4]
24002558:	4313      	orrs	r3, r2
2400255a:	620b      	str	r3, [r1, #32]
}
2400255c:	bf00      	nop
2400255e:	370c      	adds	r7, #12
24002560:	46bd      	mov	sp, r7
24002562:	f85d 7b04 	ldr.w	r7, [sp], #4
24002566:	4770      	bx	lr
24002568:	58000400 	.word	0x58000400

2400256c <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
2400256c:	b480      	push	{r7}
2400256e:	b083      	sub	sp, #12
24002570:	af00      	add	r7, sp, #0
24002572:	6078      	str	r0, [r7, #4]
24002574:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
24002576:	4b08      	ldr	r3, [pc, #32]	; (24002598 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400257a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
2400257e:	687b      	ldr	r3, [r7, #4]
24002580:	0119      	lsls	r1, r3, #4
24002582:	683b      	ldr	r3, [r7, #0]
24002584:	430b      	orrs	r3, r1
24002586:	4904      	ldr	r1, [pc, #16]	; (24002598 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002588:	4313      	orrs	r3, r2
2400258a:	628b      	str	r3, [r1, #40]	; 0x28
}
2400258c:	bf00      	nop
2400258e:	370c      	adds	r7, #12
24002590:	46bd      	mov	sp, r7
24002592:	f85d 7b04 	ldr.w	r7, [sp], #4
24002596:	4770      	bx	lr
24002598:	58000400 	.word	0x58000400

2400259c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
2400259c:	b480      	push	{r7}
2400259e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
240025a0:	4b05      	ldr	r3, [pc, #20]	; (240025b8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
240025a2:	685b      	ldr	r3, [r3, #4]
240025a4:	4a04      	ldr	r2, [pc, #16]	; (240025b8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
240025a6:	f043 0301 	orr.w	r3, r3, #1
240025aa:	6053      	str	r3, [r2, #4]
}
240025ac:	bf00      	nop
240025ae:	46bd      	mov	sp, r7
240025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025b4:	4770      	bx	lr
240025b6:	bf00      	nop
240025b8:	5c001000 	.word	0x5c001000

240025bc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
240025bc:	b480      	push	{r7}
240025be:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
240025c0:	4b05      	ldr	r3, [pc, #20]	; (240025d8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
240025c2:	685b      	ldr	r3, [r3, #4]
240025c4:	4a04      	ldr	r2, [pc, #16]	; (240025d8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
240025c6:	f023 0301 	bic.w	r3, r3, #1
240025ca:	6053      	str	r3, [r2, #4]
}
240025cc:	bf00      	nop
240025ce:	46bd      	mov	sp, r7
240025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025d4:	4770      	bx	lr
240025d6:	bf00      	nop
240025d8:	5c001000 	.word	0x5c001000

240025dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
240025dc:	b480      	push	{r7}
240025de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240025e0:	4b05      	ldr	r3, [pc, #20]	; (240025f8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240025e2:	685b      	ldr	r3, [r3, #4]
240025e4:	4a04      	ldr	r2, [pc, #16]	; (240025f8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240025e6:	f043 0302 	orr.w	r3, r3, #2
240025ea:	6053      	str	r3, [r2, #4]
}
240025ec:	bf00      	nop
240025ee:	46bd      	mov	sp, r7
240025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240025f4:	4770      	bx	lr
240025f6:	bf00      	nop
240025f8:	5c001000 	.word	0x5c001000

240025fc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
240025fc:	b480      	push	{r7}
240025fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
24002600:	4b05      	ldr	r3, [pc, #20]	; (24002618 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
24002602:	685b      	ldr	r3, [r3, #4]
24002604:	4a04      	ldr	r2, [pc, #16]	; (24002618 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
24002606:	f023 0302 	bic.w	r3, r3, #2
2400260a:	6053      	str	r3, [r2, #4]
}
2400260c:	bf00      	nop
2400260e:	46bd      	mov	sp, r7
24002610:	f85d 7b04 	ldr.w	r7, [sp], #4
24002614:	4770      	bx	lr
24002616:	bf00      	nop
24002618:	5c001000 	.word	0x5c001000

2400261c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
2400261c:	b480      	push	{r7}
2400261e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24002620:	4b05      	ldr	r3, [pc, #20]	; (24002638 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
24002622:	685b      	ldr	r3, [r3, #4]
24002624:	4a04      	ldr	r2, [pc, #16]	; (24002638 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
24002626:	f043 0304 	orr.w	r3, r3, #4
2400262a:	6053      	str	r3, [r2, #4]
}
2400262c:	bf00      	nop
2400262e:	46bd      	mov	sp, r7
24002630:	f85d 7b04 	ldr.w	r7, [sp], #4
24002634:	4770      	bx	lr
24002636:	bf00      	nop
24002638:	5c001000 	.word	0x5c001000

2400263c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
2400263c:	b480      	push	{r7}
2400263e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24002640:	4b05      	ldr	r3, [pc, #20]	; (24002658 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
24002642:	685b      	ldr	r3, [r3, #4]
24002644:	4a04      	ldr	r2, [pc, #16]	; (24002658 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
24002646:	f023 0304 	bic.w	r3, r3, #4
2400264a:	6053      	str	r3, [r2, #4]
}
2400264c:	bf00      	nop
2400264e:	46bd      	mov	sp, r7
24002650:	f85d 7b04 	ldr.w	r7, [sp], #4
24002654:	4770      	bx	lr
24002656:	bf00      	nop
24002658:	5c001000 	.word	0x5c001000

2400265c <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
2400265c:	b480      	push	{r7}
2400265e:	b083      	sub	sp, #12
24002660:	af00      	add	r7, sp, #0
24002662:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
24002664:	4b06      	ldr	r3, [pc, #24]	; (24002680 <HAL_SetFMCMemorySwappingConfig+0x24>)
24002666:	681b      	ldr	r3, [r3, #0]
24002668:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
2400266c:	4904      	ldr	r1, [pc, #16]	; (24002680 <HAL_SetFMCMemorySwappingConfig+0x24>)
2400266e:	687b      	ldr	r3, [r7, #4]
24002670:	4313      	orrs	r3, r2
24002672:	600b      	str	r3, [r1, #0]
}
24002674:	bf00      	nop
24002676:	370c      	adds	r7, #12
24002678:	46bd      	mov	sp, r7
2400267a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400267e:	4770      	bx	lr
24002680:	52004000 	.word	0x52004000

24002684 <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
24002684:	b480      	push	{r7}
24002686:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
24002688:	4b04      	ldr	r3, [pc, #16]	; (2400269c <HAL_GetFMCMemorySwappingConfig+0x18>)
2400268a:	681b      	ldr	r3, [r3, #0]
2400268c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
24002690:	4618      	mov	r0, r3
24002692:	46bd      	mov	sp, r7
24002694:	f85d 7b04 	ldr.w	r7, [sp], #4
24002698:	4770      	bx	lr
2400269a:	bf00      	nop
2400269c:	52004000 	.word	0x52004000

240026a0 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
240026a0:	b480      	push	{r7}
240026a2:	b083      	sub	sp, #12
240026a4:	af00      	add	r7, sp, #0
240026a6:	6078      	str	r0, [r7, #4]
240026a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240026aa:	687b      	ldr	r3, [r7, #4]
240026ac:	095b      	lsrs	r3, r3, #5
240026ae:	015a      	lsls	r2, r3, #5
240026b0:	4b2e      	ldr	r3, [pc, #184]	; (2400276c <HAL_EXTI_EdgeConfig+0xcc>)
240026b2:	4413      	add	r3, r2
240026b4:	6819      	ldr	r1, [r3, #0]
240026b6:	687b      	ldr	r3, [r7, #4]
240026b8:	f003 031f 	and.w	r3, r3, #31
240026bc:	2201      	movs	r2, #1
240026be:	fa02 f303 	lsl.w	r3, r2, r3
240026c2:	43da      	mvns	r2, r3
240026c4:	687b      	ldr	r3, [r7, #4]
240026c6:	095b      	lsrs	r3, r3, #5
240026c8:	0158      	lsls	r0, r3, #5
240026ca:	4b28      	ldr	r3, [pc, #160]	; (2400276c <HAL_EXTI_EdgeConfig+0xcc>)
240026cc:	4403      	add	r3, r0
240026ce:	4618      	mov	r0, r3
240026d0:	ea01 0302 	and.w	r3, r1, r2
240026d4:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240026d6:	687b      	ldr	r3, [r7, #4]
240026d8:	095b      	lsrs	r3, r3, #5
240026da:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240026de:	015b      	lsls	r3, r3, #5
240026e0:	681a      	ldr	r2, [r3, #0]
240026e2:	687b      	ldr	r3, [r7, #4]
240026e4:	f003 031f 	and.w	r3, r3, #31
240026e8:	2101      	movs	r1, #1
240026ea:	fa01 f303 	lsl.w	r3, r1, r3
240026ee:	43db      	mvns	r3, r3
240026f0:	6879      	ldr	r1, [r7, #4]
240026f2:	0949      	lsrs	r1, r1, #5
240026f4:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
240026f8:	0149      	lsls	r1, r1, #5
240026fa:	4013      	ands	r3, r2
240026fc:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
240026fe:	683b      	ldr	r3, [r7, #0]
24002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24002704:	2b00      	cmp	r3, #0
24002706:	d012      	beq.n	2400272e <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002708:	687b      	ldr	r3, [r7, #4]
2400270a:	095b      	lsrs	r3, r3, #5
2400270c:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
24002710:	015b      	lsls	r3, r3, #5
24002712:	681a      	ldr	r2, [r3, #0]
24002714:	687b      	ldr	r3, [r7, #4]
24002716:	f003 031f 	and.w	r3, r3, #31
2400271a:	2101      	movs	r1, #1
2400271c:	fa01 f303 	lsl.w	r3, r1, r3
24002720:	6879      	ldr	r1, [r7, #4]
24002722:	0949      	lsrs	r1, r1, #5
24002724:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
24002728:	0149      	lsls	r1, r1, #5
2400272a:	4313      	orrs	r3, r2
2400272c:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
2400272e:	683b      	ldr	r3, [r7, #0]
24002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24002734:	2b00      	cmp	r3, #0
24002736:	d013      	beq.n	24002760 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002738:	687b      	ldr	r3, [r7, #4]
2400273a:	095b      	lsrs	r3, r3, #5
2400273c:	015a      	lsls	r2, r3, #5
2400273e:	4b0b      	ldr	r3, [pc, #44]	; (2400276c <HAL_EXTI_EdgeConfig+0xcc>)
24002740:	4413      	add	r3, r2
24002742:	6819      	ldr	r1, [r3, #0]
24002744:	687b      	ldr	r3, [r7, #4]
24002746:	f003 031f 	and.w	r3, r3, #31
2400274a:	2201      	movs	r2, #1
2400274c:	409a      	lsls	r2, r3
2400274e:	687b      	ldr	r3, [r7, #4]
24002750:	095b      	lsrs	r3, r3, #5
24002752:	0158      	lsls	r0, r3, #5
24002754:	4b05      	ldr	r3, [pc, #20]	; (2400276c <HAL_EXTI_EdgeConfig+0xcc>)
24002756:	4403      	add	r3, r0
24002758:	4618      	mov	r0, r3
2400275a:	ea41 0302 	orr.w	r3, r1, r2
2400275e:	6003      	str	r3, [r0, #0]
  }
}
24002760:	bf00      	nop
24002762:	370c      	adds	r7, #12
24002764:	46bd      	mov	sp, r7
24002766:	f85d 7b04 	ldr.w	r7, [sp], #4
2400276a:	4770      	bx	lr
2400276c:	58000004 	.word	0x58000004

24002770 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
24002770:	b480      	push	{r7}
24002772:	b083      	sub	sp, #12
24002774:	af00      	add	r7, sp, #0
24002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002778:	687b      	ldr	r3, [r7, #4]
2400277a:	095b      	lsrs	r3, r3, #5
2400277c:	015a      	lsls	r2, r3, #5
2400277e:	4b0b      	ldr	r3, [pc, #44]	; (240027ac <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002780:	4413      	add	r3, r2
24002782:	6819      	ldr	r1, [r3, #0]
24002784:	687b      	ldr	r3, [r7, #4]
24002786:	f003 031f 	and.w	r3, r3, #31
2400278a:	2201      	movs	r2, #1
2400278c:	409a      	lsls	r2, r3
2400278e:	687b      	ldr	r3, [r7, #4]
24002790:	095b      	lsrs	r3, r3, #5
24002792:	0158      	lsls	r0, r3, #5
24002794:	4b05      	ldr	r3, [pc, #20]	; (240027ac <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002796:	4403      	add	r3, r0
24002798:	4618      	mov	r0, r3
2400279a:	ea41 0302 	orr.w	r3, r1, r2
2400279e:	6003      	str	r3, [r0, #0]
}
240027a0:	bf00      	nop
240027a2:	370c      	adds	r7, #12
240027a4:	46bd      	mov	sp, r7
240027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240027aa:	4770      	bx	lr
240027ac:	58000008 	.word	0x58000008

240027b0 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
240027b0:	b480      	push	{r7}
240027b2:	b083      	sub	sp, #12
240027b4:	af00      	add	r7, sp, #0
240027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027b8:	687b      	ldr	r3, [r7, #4]
240027ba:	f003 021f 	and.w	r2, r3, #31
240027be:	687b      	ldr	r3, [r7, #4]
240027c0:	095b      	lsrs	r3, r3, #5
240027c2:	0119      	lsls	r1, r3, #4
240027c4:	4b05      	ldr	r3, [pc, #20]	; (240027dc <HAL_EXTI_D1_ClearFlag+0x2c>)
240027c6:	440b      	add	r3, r1
240027c8:	4619      	mov	r1, r3
240027ca:	2301      	movs	r3, #1
240027cc:	4093      	lsls	r3, r2
240027ce:	600b      	str	r3, [r1, #0]

}
240027d0:	bf00      	nop
240027d2:	370c      	adds	r7, #12
240027d4:	46bd      	mov	sp, r7
240027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240027da:	4770      	bx	lr
240027dc:	58000088 	.word	0x58000088

240027e0 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
240027e0:	b480      	push	{r7}
240027e2:	b085      	sub	sp, #20
240027e4:	af00      	add	r7, sp, #0
240027e6:	60f8      	str	r0, [r7, #12]
240027e8:	60b9      	str	r1, [r7, #8]
240027ea:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
240027ec:	68bb      	ldr	r3, [r7, #8]
240027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240027f2:	2b00      	cmp	r3, #0
240027f4:	d02d      	beq.n	24002852 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
240027f6:	687b      	ldr	r3, [r7, #4]
240027f8:	2b00      	cmp	r3, #0
240027fa:	d116      	bne.n	2400282a <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240027fc:	68fb      	ldr	r3, [r7, #12]
240027fe:	095a      	lsrs	r2, r3, #5
24002800:	4b30      	ldr	r3, [pc, #192]	; (240028c4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002802:	4413      	add	r3, r2
24002804:	011b      	lsls	r3, r3, #4
24002806:	6819      	ldr	r1, [r3, #0]
24002808:	68fb      	ldr	r3, [r7, #12]
2400280a:	f003 031f 	and.w	r3, r3, #31
2400280e:	2201      	movs	r2, #1
24002810:	fa02 f303 	lsl.w	r3, r2, r3
24002814:	43da      	mvns	r2, r3
24002816:	68fb      	ldr	r3, [r7, #12]
24002818:	0958      	lsrs	r0, r3, #5
2400281a:	4b2a      	ldr	r3, [pc, #168]	; (240028c4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
2400281c:	4403      	add	r3, r0
2400281e:	011b      	lsls	r3, r3, #4
24002820:	4618      	mov	r0, r3
24002822:	ea01 0302 	and.w	r3, r1, r2
24002826:	6003      	str	r3, [r0, #0]
24002828:	e013      	b.n	24002852 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400282a:	68fb      	ldr	r3, [r7, #12]
2400282c:	095a      	lsrs	r2, r3, #5
2400282e:	4b25      	ldr	r3, [pc, #148]	; (240028c4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002830:	4413      	add	r3, r2
24002832:	011b      	lsls	r3, r3, #4
24002834:	6819      	ldr	r1, [r3, #0]
24002836:	68fb      	ldr	r3, [r7, #12]
24002838:	f003 031f 	and.w	r3, r3, #31
2400283c:	2201      	movs	r2, #1
2400283e:	409a      	lsls	r2, r3
24002840:	68fb      	ldr	r3, [r7, #12]
24002842:	0958      	lsrs	r0, r3, #5
24002844:	4b1f      	ldr	r3, [pc, #124]	; (240028c4 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002846:	4403      	add	r3, r0
24002848:	011b      	lsls	r3, r3, #4
2400284a:	4618      	mov	r0, r3
2400284c:	ea41 0302 	orr.w	r3, r1, r2
24002850:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
24002852:	68bb      	ldr	r3, [r7, #8]
24002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24002858:	2b00      	cmp	r3, #0
2400285a:	d02d      	beq.n	240028b8 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
2400285c:	687b      	ldr	r3, [r7, #4]
2400285e:	2b00      	cmp	r3, #0
24002860:	d116      	bne.n	24002890 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002862:	68fb      	ldr	r3, [r7, #12]
24002864:	095b      	lsrs	r3, r3, #5
24002866:	011a      	lsls	r2, r3, #4
24002868:	4b17      	ldr	r3, [pc, #92]	; (240028c8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400286a:	4413      	add	r3, r2
2400286c:	6819      	ldr	r1, [r3, #0]
2400286e:	68fb      	ldr	r3, [r7, #12]
24002870:	f003 031f 	and.w	r3, r3, #31
24002874:	2201      	movs	r2, #1
24002876:	fa02 f303 	lsl.w	r3, r2, r3
2400287a:	43da      	mvns	r2, r3
2400287c:	68fb      	ldr	r3, [r7, #12]
2400287e:	095b      	lsrs	r3, r3, #5
24002880:	0118      	lsls	r0, r3, #4
24002882:	4b11      	ldr	r3, [pc, #68]	; (240028c8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002884:	4403      	add	r3, r0
24002886:	4618      	mov	r0, r3
24002888:	ea01 0302 	and.w	r3, r1, r2
2400288c:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
2400288e:	e013      	b.n	240028b8 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002890:	68fb      	ldr	r3, [r7, #12]
24002892:	095b      	lsrs	r3, r3, #5
24002894:	011a      	lsls	r2, r3, #4
24002896:	4b0c      	ldr	r3, [pc, #48]	; (240028c8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002898:	4413      	add	r3, r2
2400289a:	6819      	ldr	r1, [r3, #0]
2400289c:	68fb      	ldr	r3, [r7, #12]
2400289e:	f003 031f 	and.w	r3, r3, #31
240028a2:	2201      	movs	r2, #1
240028a4:	409a      	lsls	r2, r3
240028a6:	68fb      	ldr	r3, [r7, #12]
240028a8:	095b      	lsrs	r3, r3, #5
240028aa:	0118      	lsls	r0, r3, #4
240028ac:	4b06      	ldr	r3, [pc, #24]	; (240028c8 <HAL_EXTI_D1_EventInputConfig+0xe8>)
240028ae:	4403      	add	r3, r0
240028b0:	4618      	mov	r0, r3
240028b2:	ea41 0302 	orr.w	r3, r1, r2
240028b6:	6003      	str	r3, [r0, #0]
}
240028b8:	bf00      	nop
240028ba:	3714      	adds	r7, #20
240028bc:	46bd      	mov	sp, r7
240028be:	f85d 7b04 	ldr.w	r7, [sp], #4
240028c2:	4770      	bx	lr
240028c4:	05800008 	.word	0x05800008
240028c8:	58000084 	.word	0x58000084

240028cc <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
240028cc:	b480      	push	{r7}
240028ce:	b087      	sub	sp, #28
240028d0:	af00      	add	r7, sp, #0
240028d2:	60f8      	str	r0, [r7, #12]
240028d4:	60b9      	str	r1, [r7, #8]
240028d6:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
240028d8:	68bb      	ldr	r3, [r7, #8]
240028da:	2b00      	cmp	r3, #0
240028dc:	d116      	bne.n	2400290c <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240028de:	68fb      	ldr	r3, [r7, #12]
240028e0:	095b      	lsrs	r3, r3, #5
240028e2:	015a      	lsls	r2, r3, #5
240028e4:	4b2a      	ldr	r3, [pc, #168]	; (24002990 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240028e6:	4413      	add	r3, r2
240028e8:	6819      	ldr	r1, [r3, #0]
240028ea:	68fb      	ldr	r3, [r7, #12]
240028ec:	f003 031f 	and.w	r3, r3, #31
240028f0:	2201      	movs	r2, #1
240028f2:	fa02 f303 	lsl.w	r3, r2, r3
240028f6:	43da      	mvns	r2, r3
240028f8:	68fb      	ldr	r3, [r7, #12]
240028fa:	095b      	lsrs	r3, r3, #5
240028fc:	0158      	lsls	r0, r3, #5
240028fe:	4b24      	ldr	r3, [pc, #144]	; (24002990 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002900:	4403      	add	r3, r0
24002902:	4618      	mov	r0, r3
24002904:	ea01 0302 	and.w	r3, r1, r2
24002908:	6003      	str	r3, [r0, #0]
2400290a:	e013      	b.n	24002934 <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400290c:	68fb      	ldr	r3, [r7, #12]
2400290e:	095b      	lsrs	r3, r3, #5
24002910:	015a      	lsls	r2, r3, #5
24002912:	4b1f      	ldr	r3, [pc, #124]	; (24002990 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002914:	4413      	add	r3, r2
24002916:	6819      	ldr	r1, [r3, #0]
24002918:	68fb      	ldr	r3, [r7, #12]
2400291a:	f003 031f 	and.w	r3, r3, #31
2400291e:	2201      	movs	r2, #1
24002920:	409a      	lsls	r2, r3
24002922:	68fb      	ldr	r3, [r7, #12]
24002924:	095b      	lsrs	r3, r3, #5
24002926:	0158      	lsls	r0, r3, #5
24002928:	4b19      	ldr	r3, [pc, #100]	; (24002990 <HAL_EXTI_D3_EventInputConfig+0xc4>)
2400292a:	4403      	add	r3, r0
2400292c:	4618      	mov	r0, r3
2400292e:	ea41 0302 	orr.w	r3, r1, r2
24002932:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
24002934:	68fb      	ldr	r3, [r7, #12]
24002936:	091b      	lsrs	r3, r3, #4
24002938:	f003 0301 	and.w	r3, r3, #1
2400293c:	2b00      	cmp	r3, #0
2400293e:	d106      	bne.n	2400294e <HAL_EXTI_D3_EventInputConfig+0x82>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
24002940:	68fb      	ldr	r3, [r7, #12]
24002942:	095b      	lsrs	r3, r3, #5
24002944:	015a      	lsls	r2, r3, #5
24002946:	4b13      	ldr	r3, [pc, #76]	; (24002994 <HAL_EXTI_D3_EventInputConfig+0xc8>)
24002948:	4413      	add	r3, r2
2400294a:	617b      	str	r3, [r7, #20]
2400294c:	e005      	b.n	2400295a <HAL_EXTI_D3_EventInputConfig+0x8e>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
2400294e:	68fb      	ldr	r3, [r7, #12]
24002950:	095b      	lsrs	r3, r3, #5
24002952:	015a      	lsls	r2, r3, #5
24002954:	4b10      	ldr	r3, [pc, #64]	; (24002998 <HAL_EXTI_D3_EventInputConfig+0xcc>)
24002956:	4413      	add	r3, r2
24002958:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
2400295a:	697b      	ldr	r3, [r7, #20]
2400295c:	681a      	ldr	r2, [r3, #0]
2400295e:	68fb      	ldr	r3, [r7, #12]
24002960:	005b      	lsls	r3, r3, #1
24002962:	f003 031e 	and.w	r3, r3, #30
24002966:	2103      	movs	r1, #3
24002968:	fa01 f303 	lsl.w	r3, r1, r3
2400296c:	43db      	mvns	r3, r3
2400296e:	401a      	ands	r2, r3
24002970:	68fb      	ldr	r3, [r7, #12]
24002972:	005b      	lsls	r3, r3, #1
24002974:	f003 031e 	and.w	r3, r3, #30
24002978:	6879      	ldr	r1, [r7, #4]
2400297a:	fa01 f303 	lsl.w	r3, r1, r3
2400297e:	431a      	orrs	r2, r3
24002980:	697b      	ldr	r3, [r7, #20]
24002982:	601a      	str	r2, [r3, #0]

}
24002984:	bf00      	nop
24002986:	371c      	adds	r7, #28
24002988:	46bd      	mov	sp, r7
2400298a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400298e:	4770      	bx	lr
24002990:	5800000c 	.word	0x5800000c
24002994:	58000010 	.word	0x58000010
24002998:	58000014 	.word	0x58000014

2400299c <__NVIC_SetPriorityGrouping>:
{
2400299c:	b480      	push	{r7}
2400299e:	b085      	sub	sp, #20
240029a0:	af00      	add	r7, sp, #0
240029a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
240029a4:	687b      	ldr	r3, [r7, #4]
240029a6:	f003 0307 	and.w	r3, r3, #7
240029aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240029ac:	4b0b      	ldr	r3, [pc, #44]	; (240029dc <__NVIC_SetPriorityGrouping+0x40>)
240029ae:	68db      	ldr	r3, [r3, #12]
240029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240029b2:	68ba      	ldr	r2, [r7, #8]
240029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
240029b8:	4013      	ands	r3, r2
240029ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240029bc:	68fb      	ldr	r3, [r7, #12]
240029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
240029c0:	68bb      	ldr	r3, [r7, #8]
240029c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
240029c4:	4b06      	ldr	r3, [pc, #24]	; (240029e0 <__NVIC_SetPriorityGrouping+0x44>)
240029c6:	4313      	orrs	r3, r2
240029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
240029ca:	4a04      	ldr	r2, [pc, #16]	; (240029dc <__NVIC_SetPriorityGrouping+0x40>)
240029cc:	68bb      	ldr	r3, [r7, #8]
240029ce:	60d3      	str	r3, [r2, #12]
}
240029d0:	bf00      	nop
240029d2:	3714      	adds	r7, #20
240029d4:	46bd      	mov	sp, r7
240029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240029da:	4770      	bx	lr
240029dc:	e000ed00 	.word	0xe000ed00
240029e0:	05fa0000 	.word	0x05fa0000

240029e4 <__NVIC_GetPriorityGrouping>:
{
240029e4:	b480      	push	{r7}
240029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
240029e8:	4b04      	ldr	r3, [pc, #16]	; (240029fc <__NVIC_GetPriorityGrouping+0x18>)
240029ea:	68db      	ldr	r3, [r3, #12]
240029ec:	0a1b      	lsrs	r3, r3, #8
240029ee:	f003 0307 	and.w	r3, r3, #7
}
240029f2:	4618      	mov	r0, r3
240029f4:	46bd      	mov	sp, r7
240029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240029fa:	4770      	bx	lr
240029fc:	e000ed00 	.word	0xe000ed00

24002a00 <__NVIC_EnableIRQ>:
{
24002a00:	b480      	push	{r7}
24002a02:	b083      	sub	sp, #12
24002a04:	af00      	add	r7, sp, #0
24002a06:	4603      	mov	r3, r0
24002a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a0e:	2b00      	cmp	r3, #0
24002a10:	db0b      	blt.n	24002a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002a12:	88fb      	ldrh	r3, [r7, #6]
24002a14:	f003 021f 	and.w	r2, r3, #31
24002a18:	4907      	ldr	r1, [pc, #28]	; (24002a38 <__NVIC_EnableIRQ+0x38>)
24002a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a1e:	095b      	lsrs	r3, r3, #5
24002a20:	2001      	movs	r0, #1
24002a22:	fa00 f202 	lsl.w	r2, r0, r2
24002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002a2a:	bf00      	nop
24002a2c:	370c      	adds	r7, #12
24002a2e:	46bd      	mov	sp, r7
24002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a34:	4770      	bx	lr
24002a36:	bf00      	nop
24002a38:	e000e100 	.word	0xe000e100

24002a3c <__NVIC_DisableIRQ>:
{
24002a3c:	b480      	push	{r7}
24002a3e:	b083      	sub	sp, #12
24002a40:	af00      	add	r7, sp, #0
24002a42:	4603      	mov	r3, r0
24002a44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a4a:	2b00      	cmp	r3, #0
24002a4c:	db12      	blt.n	24002a74 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002a4e:	88fb      	ldrh	r3, [r7, #6]
24002a50:	f003 021f 	and.w	r2, r3, #31
24002a54:	490a      	ldr	r1, [pc, #40]	; (24002a80 <__NVIC_DisableIRQ+0x44>)
24002a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a5a:	095b      	lsrs	r3, r3, #5
24002a5c:	2001      	movs	r0, #1
24002a5e:	fa00 f202 	lsl.w	r2, r0, r2
24002a62:	3320      	adds	r3, #32
24002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
24002a68:	f3bf 8f4f 	dsb	sy
}
24002a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002a6e:	f3bf 8f6f 	isb	sy
}
24002a72:	bf00      	nop
}
24002a74:	bf00      	nop
24002a76:	370c      	adds	r7, #12
24002a78:	46bd      	mov	sp, r7
24002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a7e:	4770      	bx	lr
24002a80:	e000e100 	.word	0xe000e100

24002a84 <__NVIC_GetPendingIRQ>:
{
24002a84:	b480      	push	{r7}
24002a86:	b083      	sub	sp, #12
24002a88:	af00      	add	r7, sp, #0
24002a8a:	4603      	mov	r3, r0
24002a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a92:	2b00      	cmp	r3, #0
24002a94:	db0e      	blt.n	24002ab4 <__NVIC_GetPendingIRQ+0x30>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002a96:	4a0b      	ldr	r2, [pc, #44]	; (24002ac4 <__NVIC_GetPendingIRQ+0x40>)
24002a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002a9c:	095b      	lsrs	r3, r3, #5
24002a9e:	3340      	adds	r3, #64	; 0x40
24002aa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002aa4:	88fb      	ldrh	r3, [r7, #6]
24002aa6:	f003 031f 	and.w	r3, r3, #31
24002aaa:	fa22 f303 	lsr.w	r3, r2, r3
24002aae:	f003 0301 	and.w	r3, r3, #1
24002ab2:	e000      	b.n	24002ab6 <__NVIC_GetPendingIRQ+0x32>
    return(0U);
24002ab4:	2300      	movs	r3, #0
}
24002ab6:	4618      	mov	r0, r3
24002ab8:	370c      	adds	r7, #12
24002aba:	46bd      	mov	sp, r7
24002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ac0:	4770      	bx	lr
24002ac2:	bf00      	nop
24002ac4:	e000e100 	.word	0xe000e100

24002ac8 <__NVIC_SetPendingIRQ>:
{
24002ac8:	b480      	push	{r7}
24002aca:	b083      	sub	sp, #12
24002acc:	af00      	add	r7, sp, #0
24002ace:	4603      	mov	r3, r0
24002ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ad6:	2b00      	cmp	r3, #0
24002ad8:	db0c      	blt.n	24002af4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002ada:	88fb      	ldrh	r3, [r7, #6]
24002adc:	f003 021f 	and.w	r2, r3, #31
24002ae0:	4907      	ldr	r1, [pc, #28]	; (24002b00 <__NVIC_SetPendingIRQ+0x38>)
24002ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ae6:	095b      	lsrs	r3, r3, #5
24002ae8:	2001      	movs	r0, #1
24002aea:	fa00 f202 	lsl.w	r2, r0, r2
24002aee:	3340      	adds	r3, #64	; 0x40
24002af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002af4:	bf00      	nop
24002af6:	370c      	adds	r7, #12
24002af8:	46bd      	mov	sp, r7
24002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
24002afe:	4770      	bx	lr
24002b00:	e000e100 	.word	0xe000e100

24002b04 <__NVIC_ClearPendingIRQ>:
{
24002b04:	b480      	push	{r7}
24002b06:	b083      	sub	sp, #12
24002b08:	af00      	add	r7, sp, #0
24002b0a:	4603      	mov	r3, r0
24002b0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b12:	2b00      	cmp	r3, #0
24002b14:	db0c      	blt.n	24002b30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002b16:	88fb      	ldrh	r3, [r7, #6]
24002b18:	f003 021f 	and.w	r2, r3, #31
24002b1c:	4907      	ldr	r1, [pc, #28]	; (24002b3c <__NVIC_ClearPendingIRQ+0x38>)
24002b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b22:	095b      	lsrs	r3, r3, #5
24002b24:	2001      	movs	r0, #1
24002b26:	fa00 f202 	lsl.w	r2, r0, r2
24002b2a:	3360      	adds	r3, #96	; 0x60
24002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
24002b30:	bf00      	nop
24002b32:	370c      	adds	r7, #12
24002b34:	46bd      	mov	sp, r7
24002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b3a:	4770      	bx	lr
24002b3c:	e000e100 	.word	0xe000e100

24002b40 <__NVIC_GetActive>:
{
24002b40:	b480      	push	{r7}
24002b42:	b083      	sub	sp, #12
24002b44:	af00      	add	r7, sp, #0
24002b46:	4603      	mov	r3, r0
24002b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b4e:	2b00      	cmp	r3, #0
24002b50:	db0e      	blt.n	24002b70 <__NVIC_GetActive+0x30>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002b52:	4a0b      	ldr	r2, [pc, #44]	; (24002b80 <__NVIC_GetActive+0x40>)
24002b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b58:	095b      	lsrs	r3, r3, #5
24002b5a:	3380      	adds	r3, #128	; 0x80
24002b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002b60:	88fb      	ldrh	r3, [r7, #6]
24002b62:	f003 031f 	and.w	r3, r3, #31
24002b66:	fa22 f303 	lsr.w	r3, r2, r3
24002b6a:	f003 0301 	and.w	r3, r3, #1
24002b6e:	e000      	b.n	24002b72 <__NVIC_GetActive+0x32>
    return(0U);
24002b70:	2300      	movs	r3, #0
}
24002b72:	4618      	mov	r0, r3
24002b74:	370c      	adds	r7, #12
24002b76:	46bd      	mov	sp, r7
24002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b7c:	4770      	bx	lr
24002b7e:	bf00      	nop
24002b80:	e000e100 	.word	0xe000e100

24002b84 <__NVIC_SetPriority>:
{
24002b84:	b480      	push	{r7}
24002b86:	b083      	sub	sp, #12
24002b88:	af00      	add	r7, sp, #0
24002b8a:	4603      	mov	r3, r0
24002b8c:	6039      	str	r1, [r7, #0]
24002b8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b94:	2b00      	cmp	r3, #0
24002b96:	db0a      	blt.n	24002bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002b98:	683b      	ldr	r3, [r7, #0]
24002b9a:	b2da      	uxtb	r2, r3
24002b9c:	490c      	ldr	r1, [pc, #48]	; (24002bd0 <__NVIC_SetPriority+0x4c>)
24002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ba2:	0112      	lsls	r2, r2, #4
24002ba4:	b2d2      	uxtb	r2, r2
24002ba6:	440b      	add	r3, r1
24002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
24002bac:	e00a      	b.n	24002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002bae:	683b      	ldr	r3, [r7, #0]
24002bb0:	b2da      	uxtb	r2, r3
24002bb2:	4908      	ldr	r1, [pc, #32]	; (24002bd4 <__NVIC_SetPriority+0x50>)
24002bb4:	88fb      	ldrh	r3, [r7, #6]
24002bb6:	f003 030f 	and.w	r3, r3, #15
24002bba:	3b04      	subs	r3, #4
24002bbc:	0112      	lsls	r2, r2, #4
24002bbe:	b2d2      	uxtb	r2, r2
24002bc0:	440b      	add	r3, r1
24002bc2:	761a      	strb	r2, [r3, #24]
}
24002bc4:	bf00      	nop
24002bc6:	370c      	adds	r7, #12
24002bc8:	46bd      	mov	sp, r7
24002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
24002bce:	4770      	bx	lr
24002bd0:	e000e100 	.word	0xe000e100
24002bd4:	e000ed00 	.word	0xe000ed00

24002bd8 <__NVIC_GetPriority>:
{
24002bd8:	b480      	push	{r7}
24002bda:	b083      	sub	sp, #12
24002bdc:	af00      	add	r7, sp, #0
24002bde:	4603      	mov	r3, r0
24002be0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002be6:	2b00      	cmp	r3, #0
24002be8:	db09      	blt.n	24002bfe <__NVIC_GetPriority+0x26>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
24002bea:	4a0d      	ldr	r2, [pc, #52]	; (24002c20 <__NVIC_GetPriority+0x48>)
24002bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bf0:	4413      	add	r3, r2
24002bf2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
24002bf6:	b2db      	uxtb	r3, r3
24002bf8:	091b      	lsrs	r3, r3, #4
24002bfa:	b2db      	uxtb	r3, r3
24002bfc:	e009      	b.n	24002c12 <__NVIC_GetPriority+0x3a>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24002bfe:	4a09      	ldr	r2, [pc, #36]	; (24002c24 <__NVIC_GetPriority+0x4c>)
24002c00:	88fb      	ldrh	r3, [r7, #6]
24002c02:	f003 030f 	and.w	r3, r3, #15
24002c06:	3b04      	subs	r3, #4
24002c08:	4413      	add	r3, r2
24002c0a:	7e1b      	ldrb	r3, [r3, #24]
24002c0c:	b2db      	uxtb	r3, r3
24002c0e:	091b      	lsrs	r3, r3, #4
24002c10:	b2db      	uxtb	r3, r3
}
24002c12:	4618      	mov	r0, r3
24002c14:	370c      	adds	r7, #12
24002c16:	46bd      	mov	sp, r7
24002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c1c:	4770      	bx	lr
24002c1e:	bf00      	nop
24002c20:	e000e100 	.word	0xe000e100
24002c24:	e000ed00 	.word	0xe000ed00

24002c28 <NVIC_EncodePriority>:
{
24002c28:	b480      	push	{r7}
24002c2a:	b089      	sub	sp, #36	; 0x24
24002c2c:	af00      	add	r7, sp, #0
24002c2e:	60f8      	str	r0, [r7, #12]
24002c30:	60b9      	str	r1, [r7, #8]
24002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002c34:	68fb      	ldr	r3, [r7, #12]
24002c36:	f003 0307 	and.w	r3, r3, #7
24002c3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002c3c:	69fb      	ldr	r3, [r7, #28]
24002c3e:	f1c3 0307 	rsb	r3, r3, #7
24002c42:	2b04      	cmp	r3, #4
24002c44:	bf28      	it	cs
24002c46:	2304      	movcs	r3, #4
24002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002c4a:	69fb      	ldr	r3, [r7, #28]
24002c4c:	3304      	adds	r3, #4
24002c4e:	2b06      	cmp	r3, #6
24002c50:	d902      	bls.n	24002c58 <NVIC_EncodePriority+0x30>
24002c52:	69fb      	ldr	r3, [r7, #28]
24002c54:	3b03      	subs	r3, #3
24002c56:	e000      	b.n	24002c5a <NVIC_EncodePriority+0x32>
24002c58:	2300      	movs	r3, #0
24002c5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002c5c:	f04f 32ff 	mov.w	r2, #4294967295
24002c60:	69bb      	ldr	r3, [r7, #24]
24002c62:	fa02 f303 	lsl.w	r3, r2, r3
24002c66:	43da      	mvns	r2, r3
24002c68:	68bb      	ldr	r3, [r7, #8]
24002c6a:	401a      	ands	r2, r3
24002c6c:	697b      	ldr	r3, [r7, #20]
24002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24002c70:	f04f 31ff 	mov.w	r1, #4294967295
24002c74:	697b      	ldr	r3, [r7, #20]
24002c76:	fa01 f303 	lsl.w	r3, r1, r3
24002c7a:	43d9      	mvns	r1, r3
24002c7c:	687b      	ldr	r3, [r7, #4]
24002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002c80:	4313      	orrs	r3, r2
}
24002c82:	4618      	mov	r0, r3
24002c84:	3724      	adds	r7, #36	; 0x24
24002c86:	46bd      	mov	sp, r7
24002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c8c:	4770      	bx	lr

24002c8e <NVIC_DecodePriority>:
{
24002c8e:	b480      	push	{r7}
24002c90:	b089      	sub	sp, #36	; 0x24
24002c92:	af00      	add	r7, sp, #0
24002c94:	60f8      	str	r0, [r7, #12]
24002c96:	60b9      	str	r1, [r7, #8]
24002c98:	607a      	str	r2, [r7, #4]
24002c9a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002c9c:	68bb      	ldr	r3, [r7, #8]
24002c9e:	f003 0307 	and.w	r3, r3, #7
24002ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002ca4:	69fb      	ldr	r3, [r7, #28]
24002ca6:	f1c3 0307 	rsb	r3, r3, #7
24002caa:	2b04      	cmp	r3, #4
24002cac:	bf28      	it	cs
24002cae:	2304      	movcs	r3, #4
24002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002cb2:	69fb      	ldr	r3, [r7, #28]
24002cb4:	3304      	adds	r3, #4
24002cb6:	2b06      	cmp	r3, #6
24002cb8:	d902      	bls.n	24002cc0 <NVIC_DecodePriority+0x32>
24002cba:	69fb      	ldr	r3, [r7, #28]
24002cbc:	3b03      	subs	r3, #3
24002cbe:	e000      	b.n	24002cc2 <NVIC_DecodePriority+0x34>
24002cc0:	2300      	movs	r3, #0
24002cc2:	617b      	str	r3, [r7, #20]
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24002cc4:	68fa      	ldr	r2, [r7, #12]
24002cc6:	697b      	ldr	r3, [r7, #20]
24002cc8:	40da      	lsrs	r2, r3
24002cca:	f04f 31ff 	mov.w	r1, #4294967295
24002cce:	69bb      	ldr	r3, [r7, #24]
24002cd0:	fa01 f303 	lsl.w	r3, r1, r3
24002cd4:	43db      	mvns	r3, r3
24002cd6:	401a      	ands	r2, r3
24002cd8:	687b      	ldr	r3, [r7, #4]
24002cda:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24002cdc:	f04f 32ff 	mov.w	r2, #4294967295
24002ce0:	697b      	ldr	r3, [r7, #20]
24002ce2:	fa02 f303 	lsl.w	r3, r2, r3
24002ce6:	43da      	mvns	r2, r3
24002ce8:	68fb      	ldr	r3, [r7, #12]
24002cea:	401a      	ands	r2, r3
24002cec:	683b      	ldr	r3, [r7, #0]
24002cee:	601a      	str	r2, [r3, #0]
}
24002cf0:	bf00      	nop
24002cf2:	3724      	adds	r7, #36	; 0x24
24002cf4:	46bd      	mov	sp, r7
24002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002cfa:	4770      	bx	lr

24002cfc <__NVIC_SystemReset>:
{
24002cfc:	b480      	push	{r7}
24002cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24002d00:	f3bf 8f4f 	dsb	sy
}
24002d04:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24002d06:	4b06      	ldr	r3, [pc, #24]	; (24002d20 <__NVIC_SystemReset+0x24>)
24002d08:	68db      	ldr	r3, [r3, #12]
24002d0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24002d0e:	4904      	ldr	r1, [pc, #16]	; (24002d20 <__NVIC_SystemReset+0x24>)
24002d10:	4b04      	ldr	r3, [pc, #16]	; (24002d24 <__NVIC_SystemReset+0x28>)
24002d12:	4313      	orrs	r3, r2
24002d14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24002d16:	f3bf 8f4f 	dsb	sy
}
24002d1a:	bf00      	nop
    __NOP();
24002d1c:	bf00      	nop
24002d1e:	e7fd      	b.n	24002d1c <__NVIC_SystemReset+0x20>
24002d20:	e000ed00 	.word	0xe000ed00
24002d24:	05fa0004 	.word	0x05fa0004

24002d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24002d28:	b580      	push	{r7, lr}
24002d2a:	b082      	sub	sp, #8
24002d2c:	af00      	add	r7, sp, #0
24002d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24002d30:	687b      	ldr	r3, [r7, #4]
24002d32:	3b01      	subs	r3, #1
24002d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24002d38:	d301      	bcc.n	24002d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24002d3a:	2301      	movs	r3, #1
24002d3c:	e00f      	b.n	24002d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002d3e:	4a0a      	ldr	r2, [pc, #40]	; (24002d68 <SysTick_Config+0x40>)
24002d40:	687b      	ldr	r3, [r7, #4]
24002d42:	3b01      	subs	r3, #1
24002d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24002d46:	210f      	movs	r1, #15
24002d48:	f04f 30ff 	mov.w	r0, #4294967295
24002d4c:	f7ff ff1a 	bl	24002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002d50:	4b05      	ldr	r3, [pc, #20]	; (24002d68 <SysTick_Config+0x40>)
24002d52:	2200      	movs	r2, #0
24002d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002d56:	4b04      	ldr	r3, [pc, #16]	; (24002d68 <SysTick_Config+0x40>)
24002d58:	2207      	movs	r2, #7
24002d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24002d5c:	2300      	movs	r3, #0
}
24002d5e:	4618      	mov	r0, r3
24002d60:	3708      	adds	r7, #8
24002d62:	46bd      	mov	sp, r7
24002d64:	bd80      	pop	{r7, pc}
24002d66:	bf00      	nop
24002d68:	e000e010 	.word	0xe000e010

24002d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002d6c:	b580      	push	{r7, lr}
24002d6e:	b082      	sub	sp, #8
24002d70:	af00      	add	r7, sp, #0
24002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24002d74:	6878      	ldr	r0, [r7, #4]
24002d76:	f7ff fe11 	bl	2400299c <__NVIC_SetPriorityGrouping>
}
24002d7a:	bf00      	nop
24002d7c:	3708      	adds	r7, #8
24002d7e:	46bd      	mov	sp, r7
24002d80:	bd80      	pop	{r7, pc}

24002d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002d82:	b580      	push	{r7, lr}
24002d84:	b086      	sub	sp, #24
24002d86:	af00      	add	r7, sp, #0
24002d88:	4603      	mov	r3, r0
24002d8a:	60b9      	str	r1, [r7, #8]
24002d8c:	607a      	str	r2, [r7, #4]
24002d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24002d90:	f7ff fe28 	bl	240029e4 <__NVIC_GetPriorityGrouping>
24002d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24002d96:	687a      	ldr	r2, [r7, #4]
24002d98:	68b9      	ldr	r1, [r7, #8]
24002d9a:	6978      	ldr	r0, [r7, #20]
24002d9c:	f7ff ff44 	bl	24002c28 <NVIC_EncodePriority>
24002da0:	4602      	mov	r2, r0
24002da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002da6:	4611      	mov	r1, r2
24002da8:	4618      	mov	r0, r3
24002daa:	f7ff feeb 	bl	24002b84 <__NVIC_SetPriority>
}
24002dae:	bf00      	nop
24002db0:	3718      	adds	r7, #24
24002db2:	46bd      	mov	sp, r7
24002db4:	bd80      	pop	{r7, pc}

24002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002db6:	b580      	push	{r7, lr}
24002db8:	b082      	sub	sp, #8
24002dba:	af00      	add	r7, sp, #0
24002dbc:	4603      	mov	r3, r0
24002dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24002dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002dc4:	4618      	mov	r0, r3
24002dc6:	f7ff fe1b 	bl	24002a00 <__NVIC_EnableIRQ>
}
24002dca:	bf00      	nop
24002dcc:	3708      	adds	r7, #8
24002dce:	46bd      	mov	sp, r7
24002dd0:	bd80      	pop	{r7, pc}

24002dd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002dd2:	b580      	push	{r7, lr}
24002dd4:	b082      	sub	sp, #8
24002dd6:	af00      	add	r7, sp, #0
24002dd8:	4603      	mov	r3, r0
24002dda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24002ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002de0:	4618      	mov	r0, r3
24002de2:	f7ff fe2b 	bl	24002a3c <__NVIC_DisableIRQ>
}
24002de6:	bf00      	nop
24002de8:	3708      	adds	r7, #8
24002dea:	46bd      	mov	sp, r7
24002dec:	bd80      	pop	{r7, pc}

24002dee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24002dee:	b580      	push	{r7, lr}
24002df0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24002df2:	f7ff ff83 	bl	24002cfc <__NVIC_SystemReset>

24002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24002df6:	b580      	push	{r7, lr}
24002df8:	b082      	sub	sp, #8
24002dfa:	af00      	add	r7, sp, #0
24002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24002dfe:	6878      	ldr	r0, [r7, #4]
24002e00:	f7ff ff92 	bl	24002d28 <SysTick_Config>
24002e04:	4603      	mov	r3, r0
}
24002e06:	4618      	mov	r0, r3
24002e08:	3708      	adds	r7, #8
24002e0a:	46bd      	mov	sp, r7
24002e0c:	bd80      	pop	{r7, pc}
	...

24002e10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24002e10:	b480      	push	{r7}
24002e12:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
24002e14:	f3bf 8f5f 	dmb	sy
}
24002e18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002e1a:	4b07      	ldr	r3, [pc, #28]	; (24002e38 <HAL_MPU_Disable+0x28>)
24002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002e1e:	4a06      	ldr	r2, [pc, #24]	; (24002e38 <HAL_MPU_Disable+0x28>)
24002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002e24:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24002e26:	4b05      	ldr	r3, [pc, #20]	; (24002e3c <HAL_MPU_Disable+0x2c>)
24002e28:	2200      	movs	r2, #0
24002e2a:	605a      	str	r2, [r3, #4]
}
24002e2c:	bf00      	nop
24002e2e:	46bd      	mov	sp, r7
24002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e34:	4770      	bx	lr
24002e36:	bf00      	nop
24002e38:	e000ed00 	.word	0xe000ed00
24002e3c:	e000ed90 	.word	0xe000ed90

24002e40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24002e40:	b480      	push	{r7}
24002e42:	b083      	sub	sp, #12
24002e44:	af00      	add	r7, sp, #0
24002e46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24002e48:	4a0b      	ldr	r2, [pc, #44]	; (24002e78 <HAL_MPU_Enable+0x38>)
24002e4a:	687b      	ldr	r3, [r7, #4]
24002e4c:	f043 0301 	orr.w	r3, r3, #1
24002e50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24002e52:	4b0a      	ldr	r3, [pc, #40]	; (24002e7c <HAL_MPU_Enable+0x3c>)
24002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002e56:	4a09      	ldr	r2, [pc, #36]	; (24002e7c <HAL_MPU_Enable+0x3c>)
24002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002e5c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24002e5e:	f3bf 8f4f 	dsb	sy
}
24002e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002e64:	f3bf 8f6f 	isb	sy
}
24002e68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24002e6a:	bf00      	nop
24002e6c:	370c      	adds	r7, #12
24002e6e:	46bd      	mov	sp, r7
24002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e74:	4770      	bx	lr
24002e76:	bf00      	nop
24002e78:	e000ed90 	.word	0xe000ed90
24002e7c:	e000ed00 	.word	0xe000ed00

24002e80 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24002e80:	b480      	push	{r7}
24002e82:	b083      	sub	sp, #12
24002e84:	af00      	add	r7, sp, #0
24002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24002e88:	687b      	ldr	r3, [r7, #4]
24002e8a:	785a      	ldrb	r2, [r3, #1]
24002e8c:	4b1d      	ldr	r3, [pc, #116]	; (24002f04 <HAL_MPU_ConfigRegion+0x84>)
24002e8e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
24002e90:	687b      	ldr	r3, [r7, #4]
24002e92:	781b      	ldrb	r3, [r3, #0]
24002e94:	2b00      	cmp	r3, #0
24002e96:	d029      	beq.n	24002eec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24002e98:	4a1a      	ldr	r2, [pc, #104]	; (24002f04 <HAL_MPU_ConfigRegion+0x84>)
24002e9a:	687b      	ldr	r3, [r7, #4]
24002e9c:	685b      	ldr	r3, [r3, #4]
24002e9e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002ea0:	687b      	ldr	r3, [r7, #4]
24002ea2:	7b1b      	ldrb	r3, [r3, #12]
24002ea4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002ea6:	687b      	ldr	r3, [r7, #4]
24002ea8:	7adb      	ldrb	r3, [r3, #11]
24002eaa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002eac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002eae:	687b      	ldr	r3, [r7, #4]
24002eb0:	7a9b      	ldrb	r3, [r3, #10]
24002eb2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002eb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002eb6:	687b      	ldr	r3, [r7, #4]
24002eb8:	7b5b      	ldrb	r3, [r3, #13]
24002eba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002ebc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002ebe:	687b      	ldr	r3, [r7, #4]
24002ec0:	7b9b      	ldrb	r3, [r3, #14]
24002ec2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002ec4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002ec6:	687b      	ldr	r3, [r7, #4]
24002ec8:	7bdb      	ldrb	r3, [r3, #15]
24002eca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002ecc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002ece:	687b      	ldr	r3, [r7, #4]
24002ed0:	7a5b      	ldrb	r3, [r3, #9]
24002ed2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002ed4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002ed6:	687b      	ldr	r3, [r7, #4]
24002ed8:	7a1b      	ldrb	r3, [r3, #8]
24002eda:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002edc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24002ede:	687a      	ldr	r2, [r7, #4]
24002ee0:	7812      	ldrb	r2, [r2, #0]
24002ee2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002ee4:	4a07      	ldr	r2, [pc, #28]	; (24002f04 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002ee6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002ee8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24002eea:	e005      	b.n	24002ef8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
24002eec:	4b05      	ldr	r3, [pc, #20]	; (24002f04 <HAL_MPU_ConfigRegion+0x84>)
24002eee:	2200      	movs	r2, #0
24002ef0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
24002ef2:	4b04      	ldr	r3, [pc, #16]	; (24002f04 <HAL_MPU_ConfigRegion+0x84>)
24002ef4:	2200      	movs	r2, #0
24002ef6:	611a      	str	r2, [r3, #16]
}
24002ef8:	bf00      	nop
24002efa:	370c      	adds	r7, #12
24002efc:	46bd      	mov	sp, r7
24002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f02:	4770      	bx	lr
24002f04:	e000ed90 	.word	0xe000ed90

24002f08 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24002f08:	b580      	push	{r7, lr}
24002f0a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24002f0c:	f7ff fd6a 	bl	240029e4 <__NVIC_GetPriorityGrouping>
24002f10:	4603      	mov	r3, r0
}
24002f12:	4618      	mov	r0, r3
24002f14:	bd80      	pop	{r7, pc}

24002f16 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24002f16:	b580      	push	{r7, lr}
24002f18:	b084      	sub	sp, #16
24002f1a:	af00      	add	r7, sp, #0
24002f1c:	60b9      	str	r1, [r7, #8]
24002f1e:	607a      	str	r2, [r7, #4]
24002f20:	603b      	str	r3, [r7, #0]
24002f22:	4603      	mov	r3, r0
24002f24:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24002f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002f2a:	4618      	mov	r0, r3
24002f2c:	f7ff fe54 	bl	24002bd8 <__NVIC_GetPriority>
24002f30:	683b      	ldr	r3, [r7, #0]
24002f32:	687a      	ldr	r2, [r7, #4]
24002f34:	68b9      	ldr	r1, [r7, #8]
24002f36:	f7ff feaa 	bl	24002c8e <NVIC_DecodePriority>
}
24002f3a:	bf00      	nop
24002f3c:	3710      	adds	r7, #16
24002f3e:	46bd      	mov	sp, r7
24002f40:	bd80      	pop	{r7, pc}

24002f42 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24002f42:	b580      	push	{r7, lr}
24002f44:	b082      	sub	sp, #8
24002f46:	af00      	add	r7, sp, #0
24002f48:	4603      	mov	r3, r0
24002f4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24002f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002f50:	4618      	mov	r0, r3
24002f52:	f7ff fdb9 	bl	24002ac8 <__NVIC_SetPendingIRQ>
}
24002f56:	bf00      	nop
24002f58:	3708      	adds	r7, #8
24002f5a:	46bd      	mov	sp, r7
24002f5c:	bd80      	pop	{r7, pc}

24002f5e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24002f5e:	b580      	push	{r7, lr}
24002f60:	b082      	sub	sp, #8
24002f62:	af00      	add	r7, sp, #0
24002f64:	4603      	mov	r3, r0
24002f66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24002f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002f6c:	4618      	mov	r0, r3
24002f6e:	f7ff fd89 	bl	24002a84 <__NVIC_GetPendingIRQ>
24002f72:	4603      	mov	r3, r0
}
24002f74:	4618      	mov	r0, r3
24002f76:	3708      	adds	r7, #8
24002f78:	46bd      	mov	sp, r7
24002f7a:	bd80      	pop	{r7, pc}

24002f7c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24002f7c:	b580      	push	{r7, lr}
24002f7e:	b082      	sub	sp, #8
24002f80:	af00      	add	r7, sp, #0
24002f82:	4603      	mov	r3, r0
24002f84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
24002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002f8a:	4618      	mov	r0, r3
24002f8c:	f7ff fdba 	bl	24002b04 <__NVIC_ClearPendingIRQ>
}
24002f90:	bf00      	nop
24002f92:	3708      	adds	r7, #8
24002f94:	46bd      	mov	sp, r7
24002f96:	bd80      	pop	{r7, pc}

24002f98 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24002f98:	b580      	push	{r7, lr}
24002f9a:	b082      	sub	sp, #8
24002f9c:	af00      	add	r7, sp, #0
24002f9e:	4603      	mov	r3, r0
24002fa0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
24002fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002fa6:	4618      	mov	r0, r3
24002fa8:	f7ff fdca 	bl	24002b40 <__NVIC_GetActive>
24002fac:	4603      	mov	r3, r0
}
24002fae:	4618      	mov	r0, r3
24002fb0:	3708      	adds	r7, #8
24002fb2:	46bd      	mov	sp, r7
24002fb4:	bd80      	pop	{r7, pc}
	...

24002fb8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24002fb8:	b480      	push	{r7}
24002fba:	b083      	sub	sp, #12
24002fbc:	af00      	add	r7, sp, #0
24002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
24002fc0:	687b      	ldr	r3, [r7, #4]
24002fc2:	2b04      	cmp	r3, #4
24002fc4:	d106      	bne.n	24002fd4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
24002fc6:	4b09      	ldr	r3, [pc, #36]	; (24002fec <HAL_SYSTICK_CLKSourceConfig+0x34>)
24002fc8:	681b      	ldr	r3, [r3, #0]
24002fca:	4a08      	ldr	r2, [pc, #32]	; (24002fec <HAL_SYSTICK_CLKSourceConfig+0x34>)
24002fcc:	f043 0304 	orr.w	r3, r3, #4
24002fd0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
24002fd2:	e005      	b.n	24002fe0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
24002fd4:	4b05      	ldr	r3, [pc, #20]	; (24002fec <HAL_SYSTICK_CLKSourceConfig+0x34>)
24002fd6:	681b      	ldr	r3, [r3, #0]
24002fd8:	4a04      	ldr	r2, [pc, #16]	; (24002fec <HAL_SYSTICK_CLKSourceConfig+0x34>)
24002fda:	f023 0304 	bic.w	r3, r3, #4
24002fde:	6013      	str	r3, [r2, #0]
}
24002fe0:	bf00      	nop
24002fe2:	370c      	adds	r7, #12
24002fe4:	46bd      	mov	sp, r7
24002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fea:	4770      	bx	lr
24002fec:	e000e010 	.word	0xe000e010

24002ff0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
24002ff0:	b580      	push	{r7, lr}
24002ff2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
24002ff4:	f000 f802 	bl	24002ffc <HAL_SYSTICK_Callback>
}
24002ff8:	bf00      	nop
24002ffa:	bd80      	pop	{r7, pc}

24002ffc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
24002ffc:	b480      	push	{r7}
24002ffe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
24003000:	bf00      	nop
24003002:	46bd      	mov	sp, r7
24003004:	f85d 7b04 	ldr.w	r7, [sp], #4
24003008:	4770      	bx	lr

2400300a <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
2400300a:	b480      	push	{r7}
2400300c:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
2400300e:	2303      	movs	r3, #3
}
24003010:	4618      	mov	r0, r3
24003012:	46bd      	mov	sp, r7
24003014:	f85d 7b04 	ldr.w	r7, [sp], #4
24003018:	4770      	bx	lr
	...

2400301c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
2400301c:	b580      	push	{r7, lr}
2400301e:	b086      	sub	sp, #24
24003020:	af00      	add	r7, sp, #0
24003022:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24003024:	f7ff f892 	bl	2400214c <HAL_GetTick>
24003028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400302a:	687b      	ldr	r3, [r7, #4]
2400302c:	2b00      	cmp	r3, #0
2400302e:	d101      	bne.n	24003034 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24003030:	2301      	movs	r3, #1
24003032:	e316      	b.n	24003662 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003034:	687b      	ldr	r3, [r7, #4]
24003036:	681b      	ldr	r3, [r3, #0]
24003038:	4a66      	ldr	r2, [pc, #408]	; (240031d4 <HAL_DMA_Init+0x1b8>)
2400303a:	4293      	cmp	r3, r2
2400303c:	d04a      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
2400303e:	687b      	ldr	r3, [r7, #4]
24003040:	681b      	ldr	r3, [r3, #0]
24003042:	4a65      	ldr	r2, [pc, #404]	; (240031d8 <HAL_DMA_Init+0x1bc>)
24003044:	4293      	cmp	r3, r2
24003046:	d045      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003048:	687b      	ldr	r3, [r7, #4]
2400304a:	681b      	ldr	r3, [r3, #0]
2400304c:	4a63      	ldr	r2, [pc, #396]	; (240031dc <HAL_DMA_Init+0x1c0>)
2400304e:	4293      	cmp	r3, r2
24003050:	d040      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003052:	687b      	ldr	r3, [r7, #4]
24003054:	681b      	ldr	r3, [r3, #0]
24003056:	4a62      	ldr	r2, [pc, #392]	; (240031e0 <HAL_DMA_Init+0x1c4>)
24003058:	4293      	cmp	r3, r2
2400305a:	d03b      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
2400305c:	687b      	ldr	r3, [r7, #4]
2400305e:	681b      	ldr	r3, [r3, #0]
24003060:	4a60      	ldr	r2, [pc, #384]	; (240031e4 <HAL_DMA_Init+0x1c8>)
24003062:	4293      	cmp	r3, r2
24003064:	d036      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003066:	687b      	ldr	r3, [r7, #4]
24003068:	681b      	ldr	r3, [r3, #0]
2400306a:	4a5f      	ldr	r2, [pc, #380]	; (240031e8 <HAL_DMA_Init+0x1cc>)
2400306c:	4293      	cmp	r3, r2
2400306e:	d031      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003070:	687b      	ldr	r3, [r7, #4]
24003072:	681b      	ldr	r3, [r3, #0]
24003074:	4a5d      	ldr	r2, [pc, #372]	; (240031ec <HAL_DMA_Init+0x1d0>)
24003076:	4293      	cmp	r3, r2
24003078:	d02c      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
2400307a:	687b      	ldr	r3, [r7, #4]
2400307c:	681b      	ldr	r3, [r3, #0]
2400307e:	4a5c      	ldr	r2, [pc, #368]	; (240031f0 <HAL_DMA_Init+0x1d4>)
24003080:	4293      	cmp	r3, r2
24003082:	d027      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003084:	687b      	ldr	r3, [r7, #4]
24003086:	681b      	ldr	r3, [r3, #0]
24003088:	4a5a      	ldr	r2, [pc, #360]	; (240031f4 <HAL_DMA_Init+0x1d8>)
2400308a:	4293      	cmp	r3, r2
2400308c:	d022      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
2400308e:	687b      	ldr	r3, [r7, #4]
24003090:	681b      	ldr	r3, [r3, #0]
24003092:	4a59      	ldr	r2, [pc, #356]	; (240031f8 <HAL_DMA_Init+0x1dc>)
24003094:	4293      	cmp	r3, r2
24003096:	d01d      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
24003098:	687b      	ldr	r3, [r7, #4]
2400309a:	681b      	ldr	r3, [r3, #0]
2400309c:	4a57      	ldr	r2, [pc, #348]	; (240031fc <HAL_DMA_Init+0x1e0>)
2400309e:	4293      	cmp	r3, r2
240030a0:	d018      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
240030a2:	687b      	ldr	r3, [r7, #4]
240030a4:	681b      	ldr	r3, [r3, #0]
240030a6:	4a56      	ldr	r2, [pc, #344]	; (24003200 <HAL_DMA_Init+0x1e4>)
240030a8:	4293      	cmp	r3, r2
240030aa:	d013      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
240030ac:	687b      	ldr	r3, [r7, #4]
240030ae:	681b      	ldr	r3, [r3, #0]
240030b0:	4a54      	ldr	r2, [pc, #336]	; (24003204 <HAL_DMA_Init+0x1e8>)
240030b2:	4293      	cmp	r3, r2
240030b4:	d00e      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
240030b6:	687b      	ldr	r3, [r7, #4]
240030b8:	681b      	ldr	r3, [r3, #0]
240030ba:	4a53      	ldr	r2, [pc, #332]	; (24003208 <HAL_DMA_Init+0x1ec>)
240030bc:	4293      	cmp	r3, r2
240030be:	d009      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
240030c0:	687b      	ldr	r3, [r7, #4]
240030c2:	681b      	ldr	r3, [r3, #0]
240030c4:	4a51      	ldr	r2, [pc, #324]	; (2400320c <HAL_DMA_Init+0x1f0>)
240030c6:	4293      	cmp	r3, r2
240030c8:	d004      	beq.n	240030d4 <HAL_DMA_Init+0xb8>
240030ca:	687b      	ldr	r3, [r7, #4]
240030cc:	681b      	ldr	r3, [r3, #0]
240030ce:	4a50      	ldr	r2, [pc, #320]	; (24003210 <HAL_DMA_Init+0x1f4>)
240030d0:	4293      	cmp	r3, r2
240030d2:	d101      	bne.n	240030d8 <HAL_DMA_Init+0xbc>
240030d4:	2301      	movs	r3, #1
240030d6:	e000      	b.n	240030da <HAL_DMA_Init+0xbe>
240030d8:	2300      	movs	r3, #0
240030da:	2b00      	cmp	r3, #0
240030dc:	f000 813b 	beq.w	24003356 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240030e0:	687b      	ldr	r3, [r7, #4]
240030e2:	2202      	movs	r2, #2
240030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240030e8:	687b      	ldr	r3, [r7, #4]
240030ea:	2200      	movs	r2, #0
240030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240030f0:	687b      	ldr	r3, [r7, #4]
240030f2:	681b      	ldr	r3, [r3, #0]
240030f4:	4a37      	ldr	r2, [pc, #220]	; (240031d4 <HAL_DMA_Init+0x1b8>)
240030f6:	4293      	cmp	r3, r2
240030f8:	d04a      	beq.n	24003190 <HAL_DMA_Init+0x174>
240030fa:	687b      	ldr	r3, [r7, #4]
240030fc:	681b      	ldr	r3, [r3, #0]
240030fe:	4a36      	ldr	r2, [pc, #216]	; (240031d8 <HAL_DMA_Init+0x1bc>)
24003100:	4293      	cmp	r3, r2
24003102:	d045      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003104:	687b      	ldr	r3, [r7, #4]
24003106:	681b      	ldr	r3, [r3, #0]
24003108:	4a34      	ldr	r2, [pc, #208]	; (240031dc <HAL_DMA_Init+0x1c0>)
2400310a:	4293      	cmp	r3, r2
2400310c:	d040      	beq.n	24003190 <HAL_DMA_Init+0x174>
2400310e:	687b      	ldr	r3, [r7, #4]
24003110:	681b      	ldr	r3, [r3, #0]
24003112:	4a33      	ldr	r2, [pc, #204]	; (240031e0 <HAL_DMA_Init+0x1c4>)
24003114:	4293      	cmp	r3, r2
24003116:	d03b      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003118:	687b      	ldr	r3, [r7, #4]
2400311a:	681b      	ldr	r3, [r3, #0]
2400311c:	4a31      	ldr	r2, [pc, #196]	; (240031e4 <HAL_DMA_Init+0x1c8>)
2400311e:	4293      	cmp	r3, r2
24003120:	d036      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003122:	687b      	ldr	r3, [r7, #4]
24003124:	681b      	ldr	r3, [r3, #0]
24003126:	4a30      	ldr	r2, [pc, #192]	; (240031e8 <HAL_DMA_Init+0x1cc>)
24003128:	4293      	cmp	r3, r2
2400312a:	d031      	beq.n	24003190 <HAL_DMA_Init+0x174>
2400312c:	687b      	ldr	r3, [r7, #4]
2400312e:	681b      	ldr	r3, [r3, #0]
24003130:	4a2e      	ldr	r2, [pc, #184]	; (240031ec <HAL_DMA_Init+0x1d0>)
24003132:	4293      	cmp	r3, r2
24003134:	d02c      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003136:	687b      	ldr	r3, [r7, #4]
24003138:	681b      	ldr	r3, [r3, #0]
2400313a:	4a2d      	ldr	r2, [pc, #180]	; (240031f0 <HAL_DMA_Init+0x1d4>)
2400313c:	4293      	cmp	r3, r2
2400313e:	d027      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003140:	687b      	ldr	r3, [r7, #4]
24003142:	681b      	ldr	r3, [r3, #0]
24003144:	4a2b      	ldr	r2, [pc, #172]	; (240031f4 <HAL_DMA_Init+0x1d8>)
24003146:	4293      	cmp	r3, r2
24003148:	d022      	beq.n	24003190 <HAL_DMA_Init+0x174>
2400314a:	687b      	ldr	r3, [r7, #4]
2400314c:	681b      	ldr	r3, [r3, #0]
2400314e:	4a2a      	ldr	r2, [pc, #168]	; (240031f8 <HAL_DMA_Init+0x1dc>)
24003150:	4293      	cmp	r3, r2
24003152:	d01d      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003154:	687b      	ldr	r3, [r7, #4]
24003156:	681b      	ldr	r3, [r3, #0]
24003158:	4a28      	ldr	r2, [pc, #160]	; (240031fc <HAL_DMA_Init+0x1e0>)
2400315a:	4293      	cmp	r3, r2
2400315c:	d018      	beq.n	24003190 <HAL_DMA_Init+0x174>
2400315e:	687b      	ldr	r3, [r7, #4]
24003160:	681b      	ldr	r3, [r3, #0]
24003162:	4a27      	ldr	r2, [pc, #156]	; (24003200 <HAL_DMA_Init+0x1e4>)
24003164:	4293      	cmp	r3, r2
24003166:	d013      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003168:	687b      	ldr	r3, [r7, #4]
2400316a:	681b      	ldr	r3, [r3, #0]
2400316c:	4a25      	ldr	r2, [pc, #148]	; (24003204 <HAL_DMA_Init+0x1e8>)
2400316e:	4293      	cmp	r3, r2
24003170:	d00e      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003172:	687b      	ldr	r3, [r7, #4]
24003174:	681b      	ldr	r3, [r3, #0]
24003176:	4a24      	ldr	r2, [pc, #144]	; (24003208 <HAL_DMA_Init+0x1ec>)
24003178:	4293      	cmp	r3, r2
2400317a:	d009      	beq.n	24003190 <HAL_DMA_Init+0x174>
2400317c:	687b      	ldr	r3, [r7, #4]
2400317e:	681b      	ldr	r3, [r3, #0]
24003180:	4a22      	ldr	r2, [pc, #136]	; (2400320c <HAL_DMA_Init+0x1f0>)
24003182:	4293      	cmp	r3, r2
24003184:	d004      	beq.n	24003190 <HAL_DMA_Init+0x174>
24003186:	687b      	ldr	r3, [r7, #4]
24003188:	681b      	ldr	r3, [r3, #0]
2400318a:	4a21      	ldr	r2, [pc, #132]	; (24003210 <HAL_DMA_Init+0x1f4>)
2400318c:	4293      	cmp	r3, r2
2400318e:	d108      	bne.n	240031a2 <HAL_DMA_Init+0x186>
24003190:	687b      	ldr	r3, [r7, #4]
24003192:	681b      	ldr	r3, [r3, #0]
24003194:	681a      	ldr	r2, [r3, #0]
24003196:	687b      	ldr	r3, [r7, #4]
24003198:	681b      	ldr	r3, [r3, #0]
2400319a:	f022 0201 	bic.w	r2, r2, #1
2400319e:	601a      	str	r2, [r3, #0]
240031a0:	e007      	b.n	240031b2 <HAL_DMA_Init+0x196>
240031a2:	687b      	ldr	r3, [r7, #4]
240031a4:	681b      	ldr	r3, [r3, #0]
240031a6:	681a      	ldr	r2, [r3, #0]
240031a8:	687b      	ldr	r3, [r7, #4]
240031aa:	681b      	ldr	r3, [r3, #0]
240031ac:	f022 0201 	bic.w	r2, r2, #1
240031b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240031b2:	e02f      	b.n	24003214 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240031b4:	f7fe ffca 	bl	2400214c <HAL_GetTick>
240031b8:	4602      	mov	r2, r0
240031ba:	693b      	ldr	r3, [r7, #16]
240031bc:	1ad3      	subs	r3, r2, r3
240031be:	2b05      	cmp	r3, #5
240031c0:	d928      	bls.n	24003214 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240031c2:	687b      	ldr	r3, [r7, #4]
240031c4:	2220      	movs	r2, #32
240031c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
240031c8:	687b      	ldr	r3, [r7, #4]
240031ca:	2203      	movs	r2, #3
240031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
240031d0:	2301      	movs	r3, #1
240031d2:	e246      	b.n	24003662 <HAL_DMA_Init+0x646>
240031d4:	40020010 	.word	0x40020010
240031d8:	40020028 	.word	0x40020028
240031dc:	40020040 	.word	0x40020040
240031e0:	40020058 	.word	0x40020058
240031e4:	40020070 	.word	0x40020070
240031e8:	40020088 	.word	0x40020088
240031ec:	400200a0 	.word	0x400200a0
240031f0:	400200b8 	.word	0x400200b8
240031f4:	40020410 	.word	0x40020410
240031f8:	40020428 	.word	0x40020428
240031fc:	40020440 	.word	0x40020440
24003200:	40020458 	.word	0x40020458
24003204:	40020470 	.word	0x40020470
24003208:	40020488 	.word	0x40020488
2400320c:	400204a0 	.word	0x400204a0
24003210:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24003214:	687b      	ldr	r3, [r7, #4]
24003216:	681b      	ldr	r3, [r3, #0]
24003218:	681b      	ldr	r3, [r3, #0]
2400321a:	f003 0301 	and.w	r3, r3, #1
2400321e:	2b00      	cmp	r3, #0
24003220:	d1c8      	bne.n	240031b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24003222:	687b      	ldr	r3, [r7, #4]
24003224:	681b      	ldr	r3, [r3, #0]
24003226:	681b      	ldr	r3, [r3, #0]
24003228:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
2400322a:	697a      	ldr	r2, [r7, #20]
2400322c:	4b83      	ldr	r3, [pc, #524]	; (2400343c <HAL_DMA_Init+0x420>)
2400322e:	4013      	ands	r3, r2
24003230:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
24003232:	687b      	ldr	r3, [r7, #4]
24003234:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003236:	687b      	ldr	r3, [r7, #4]
24003238:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
2400323a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2400323c:	687b      	ldr	r3, [r7, #4]
2400323e:	691b      	ldr	r3, [r3, #16]
24003240:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003242:	687b      	ldr	r3, [r7, #4]
24003244:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003246:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003248:	687b      	ldr	r3, [r7, #4]
2400324a:	699b      	ldr	r3, [r3, #24]
2400324c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
2400324e:	687b      	ldr	r3, [r7, #4]
24003250:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003252:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24003254:	687b      	ldr	r3, [r7, #4]
24003256:	6a1b      	ldr	r3, [r3, #32]
24003258:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
2400325a:	697a      	ldr	r2, [r7, #20]
2400325c:	4313      	orrs	r3, r2
2400325e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003260:	687b      	ldr	r3, [r7, #4]
24003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003264:	2b04      	cmp	r3, #4
24003266:	d107      	bne.n	24003278 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24003268:	687b      	ldr	r3, [r7, #4]
2400326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400326c:	687b      	ldr	r3, [r7, #4]
2400326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003270:	4313      	orrs	r3, r2
24003272:	697a      	ldr	r2, [r7, #20]
24003274:	4313      	orrs	r3, r2
24003276:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24003278:	4b71      	ldr	r3, [pc, #452]	; (24003440 <HAL_DMA_Init+0x424>)
2400327a:	681a      	ldr	r2, [r3, #0]
2400327c:	4b71      	ldr	r3, [pc, #452]	; (24003444 <HAL_DMA_Init+0x428>)
2400327e:	4013      	ands	r3, r2
24003280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003284:	d328      	bcc.n	240032d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24003286:	687b      	ldr	r3, [r7, #4]
24003288:	685b      	ldr	r3, [r3, #4]
2400328a:	2b28      	cmp	r3, #40	; 0x28
2400328c:	d903      	bls.n	24003296 <HAL_DMA_Init+0x27a>
2400328e:	687b      	ldr	r3, [r7, #4]
24003290:	685b      	ldr	r3, [r3, #4]
24003292:	2b2e      	cmp	r3, #46	; 0x2e
24003294:	d917      	bls.n	240032c6 <HAL_DMA_Init+0x2aa>
24003296:	687b      	ldr	r3, [r7, #4]
24003298:	685b      	ldr	r3, [r3, #4]
2400329a:	2b3e      	cmp	r3, #62	; 0x3e
2400329c:	d903      	bls.n	240032a6 <HAL_DMA_Init+0x28a>
2400329e:	687b      	ldr	r3, [r7, #4]
240032a0:	685b      	ldr	r3, [r3, #4]
240032a2:	2b42      	cmp	r3, #66	; 0x42
240032a4:	d90f      	bls.n	240032c6 <HAL_DMA_Init+0x2aa>
240032a6:	687b      	ldr	r3, [r7, #4]
240032a8:	685b      	ldr	r3, [r3, #4]
240032aa:	2b46      	cmp	r3, #70	; 0x46
240032ac:	d903      	bls.n	240032b6 <HAL_DMA_Init+0x29a>
240032ae:	687b      	ldr	r3, [r7, #4]
240032b0:	685b      	ldr	r3, [r3, #4]
240032b2:	2b48      	cmp	r3, #72	; 0x48
240032b4:	d907      	bls.n	240032c6 <HAL_DMA_Init+0x2aa>
240032b6:	687b      	ldr	r3, [r7, #4]
240032b8:	685b      	ldr	r3, [r3, #4]
240032ba:	2b4e      	cmp	r3, #78	; 0x4e
240032bc:	d905      	bls.n	240032ca <HAL_DMA_Init+0x2ae>
240032be:	687b      	ldr	r3, [r7, #4]
240032c0:	685b      	ldr	r3, [r3, #4]
240032c2:	2b52      	cmp	r3, #82	; 0x52
240032c4:	d801      	bhi.n	240032ca <HAL_DMA_Init+0x2ae>
240032c6:	2301      	movs	r3, #1
240032c8:	e000      	b.n	240032cc <HAL_DMA_Init+0x2b0>
240032ca:	2300      	movs	r3, #0
240032cc:	2b00      	cmp	r3, #0
240032ce:	d003      	beq.n	240032d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
240032d0:	697b      	ldr	r3, [r7, #20]
240032d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
240032d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240032d8:	687b      	ldr	r3, [r7, #4]
240032da:	681b      	ldr	r3, [r3, #0]
240032dc:	697a      	ldr	r2, [r7, #20]
240032de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240032e0:	687b      	ldr	r3, [r7, #4]
240032e2:	681b      	ldr	r3, [r3, #0]
240032e4:	695b      	ldr	r3, [r3, #20]
240032e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240032e8:	697b      	ldr	r3, [r7, #20]
240032ea:	f023 0307 	bic.w	r3, r3, #7
240032ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
240032f0:	687b      	ldr	r3, [r7, #4]
240032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240032f4:	697a      	ldr	r2, [r7, #20]
240032f6:	4313      	orrs	r3, r2
240032f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240032fa:	687b      	ldr	r3, [r7, #4]
240032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240032fe:	2b04      	cmp	r3, #4
24003300:	d117      	bne.n	24003332 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
24003302:	687b      	ldr	r3, [r7, #4]
24003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24003306:	697a      	ldr	r2, [r7, #20]
24003308:	4313      	orrs	r3, r2
2400330a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2400330c:	687b      	ldr	r3, [r7, #4]
2400330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24003310:	2b00      	cmp	r3, #0
24003312:	d00e      	beq.n	24003332 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
24003314:	6878      	ldr	r0, [r7, #4]
24003316:	f003 fa95 	bl	24006844 <DMA_CheckFifoParam>
2400331a:	4603      	mov	r3, r0
2400331c:	2b00      	cmp	r3, #0
2400331e:	d008      	beq.n	24003332 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24003320:	687b      	ldr	r3, [r7, #4]
24003322:	2240      	movs	r2, #64	; 0x40
24003324:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24003326:	687b      	ldr	r3, [r7, #4]
24003328:	2201      	movs	r2, #1
2400332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
2400332e:	2301      	movs	r3, #1
24003330:	e197      	b.n	24003662 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24003332:	687b      	ldr	r3, [r7, #4]
24003334:	681b      	ldr	r3, [r3, #0]
24003336:	697a      	ldr	r2, [r7, #20]
24003338:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400333a:	6878      	ldr	r0, [r7, #4]
2400333c:	f003 f9d0 	bl	240066e0 <DMA_CalcBaseAndBitshift>
24003340:	4603      	mov	r3, r0
24003342:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003344:	687b      	ldr	r3, [r7, #4]
24003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003348:	f003 031f 	and.w	r3, r3, #31
2400334c:	223f      	movs	r2, #63	; 0x3f
2400334e:	409a      	lsls	r2, r3
24003350:	68bb      	ldr	r3, [r7, #8]
24003352:	609a      	str	r2, [r3, #8]
24003354:	e0cd      	b.n	240034f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24003356:	687b      	ldr	r3, [r7, #4]
24003358:	681b      	ldr	r3, [r3, #0]
2400335a:	4a3b      	ldr	r2, [pc, #236]	; (24003448 <HAL_DMA_Init+0x42c>)
2400335c:	4293      	cmp	r3, r2
2400335e:	d022      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
24003360:	687b      	ldr	r3, [r7, #4]
24003362:	681b      	ldr	r3, [r3, #0]
24003364:	4a39      	ldr	r2, [pc, #228]	; (2400344c <HAL_DMA_Init+0x430>)
24003366:	4293      	cmp	r3, r2
24003368:	d01d      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
2400336a:	687b      	ldr	r3, [r7, #4]
2400336c:	681b      	ldr	r3, [r3, #0]
2400336e:	4a38      	ldr	r2, [pc, #224]	; (24003450 <HAL_DMA_Init+0x434>)
24003370:	4293      	cmp	r3, r2
24003372:	d018      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
24003374:	687b      	ldr	r3, [r7, #4]
24003376:	681b      	ldr	r3, [r3, #0]
24003378:	4a36      	ldr	r2, [pc, #216]	; (24003454 <HAL_DMA_Init+0x438>)
2400337a:	4293      	cmp	r3, r2
2400337c:	d013      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
2400337e:	687b      	ldr	r3, [r7, #4]
24003380:	681b      	ldr	r3, [r3, #0]
24003382:	4a35      	ldr	r2, [pc, #212]	; (24003458 <HAL_DMA_Init+0x43c>)
24003384:	4293      	cmp	r3, r2
24003386:	d00e      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
24003388:	687b      	ldr	r3, [r7, #4]
2400338a:	681b      	ldr	r3, [r3, #0]
2400338c:	4a33      	ldr	r2, [pc, #204]	; (2400345c <HAL_DMA_Init+0x440>)
2400338e:	4293      	cmp	r3, r2
24003390:	d009      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
24003392:	687b      	ldr	r3, [r7, #4]
24003394:	681b      	ldr	r3, [r3, #0]
24003396:	4a32      	ldr	r2, [pc, #200]	; (24003460 <HAL_DMA_Init+0x444>)
24003398:	4293      	cmp	r3, r2
2400339a:	d004      	beq.n	240033a6 <HAL_DMA_Init+0x38a>
2400339c:	687b      	ldr	r3, [r7, #4]
2400339e:	681b      	ldr	r3, [r3, #0]
240033a0:	4a30      	ldr	r2, [pc, #192]	; (24003464 <HAL_DMA_Init+0x448>)
240033a2:	4293      	cmp	r3, r2
240033a4:	d101      	bne.n	240033aa <HAL_DMA_Init+0x38e>
240033a6:	2301      	movs	r3, #1
240033a8:	e000      	b.n	240033ac <HAL_DMA_Init+0x390>
240033aa:	2300      	movs	r3, #0
240033ac:	2b00      	cmp	r3, #0
240033ae:	f000 8097 	beq.w	240034e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240033b2:	687b      	ldr	r3, [r7, #4]
240033b4:	681b      	ldr	r3, [r3, #0]
240033b6:	4a24      	ldr	r2, [pc, #144]	; (24003448 <HAL_DMA_Init+0x42c>)
240033b8:	4293      	cmp	r3, r2
240033ba:	d021      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033bc:	687b      	ldr	r3, [r7, #4]
240033be:	681b      	ldr	r3, [r3, #0]
240033c0:	4a22      	ldr	r2, [pc, #136]	; (2400344c <HAL_DMA_Init+0x430>)
240033c2:	4293      	cmp	r3, r2
240033c4:	d01c      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033c6:	687b      	ldr	r3, [r7, #4]
240033c8:	681b      	ldr	r3, [r3, #0]
240033ca:	4a21      	ldr	r2, [pc, #132]	; (24003450 <HAL_DMA_Init+0x434>)
240033cc:	4293      	cmp	r3, r2
240033ce:	d017      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033d0:	687b      	ldr	r3, [r7, #4]
240033d2:	681b      	ldr	r3, [r3, #0]
240033d4:	4a1f      	ldr	r2, [pc, #124]	; (24003454 <HAL_DMA_Init+0x438>)
240033d6:	4293      	cmp	r3, r2
240033d8:	d012      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033da:	687b      	ldr	r3, [r7, #4]
240033dc:	681b      	ldr	r3, [r3, #0]
240033de:	4a1e      	ldr	r2, [pc, #120]	; (24003458 <HAL_DMA_Init+0x43c>)
240033e0:	4293      	cmp	r3, r2
240033e2:	d00d      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033e4:	687b      	ldr	r3, [r7, #4]
240033e6:	681b      	ldr	r3, [r3, #0]
240033e8:	4a1c      	ldr	r2, [pc, #112]	; (2400345c <HAL_DMA_Init+0x440>)
240033ea:	4293      	cmp	r3, r2
240033ec:	d008      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033ee:	687b      	ldr	r3, [r7, #4]
240033f0:	681b      	ldr	r3, [r3, #0]
240033f2:	4a1b      	ldr	r2, [pc, #108]	; (24003460 <HAL_DMA_Init+0x444>)
240033f4:	4293      	cmp	r3, r2
240033f6:	d003      	beq.n	24003400 <HAL_DMA_Init+0x3e4>
240033f8:	687b      	ldr	r3, [r7, #4]
240033fa:	681b      	ldr	r3, [r3, #0]
240033fc:	4a19      	ldr	r2, [pc, #100]	; (24003464 <HAL_DMA_Init+0x448>)
240033fe:	4293      	cmp	r3, r2
24003400:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003402:	687b      	ldr	r3, [r7, #4]
24003404:	2202      	movs	r2, #2
24003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
2400340a:	687b      	ldr	r3, [r7, #4]
2400340c:	2200      	movs	r2, #0
2400340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24003412:	687b      	ldr	r3, [r7, #4]
24003414:	681b      	ldr	r3, [r3, #0]
24003416:	681b      	ldr	r3, [r3, #0]
24003418:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2400341a:	697a      	ldr	r2, [r7, #20]
2400341c:	4b12      	ldr	r3, [pc, #72]	; (24003468 <HAL_DMA_Init+0x44c>)
2400341e:	4013      	ands	r3, r2
24003420:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003422:	687b      	ldr	r3, [r7, #4]
24003424:	689b      	ldr	r3, [r3, #8]
24003426:	2b40      	cmp	r3, #64	; 0x40
24003428:	d020      	beq.n	2400346c <HAL_DMA_Init+0x450>
2400342a:	687b      	ldr	r3, [r7, #4]
2400342c:	689b      	ldr	r3, [r3, #8]
2400342e:	2b80      	cmp	r3, #128	; 0x80
24003430:	d102      	bne.n	24003438 <HAL_DMA_Init+0x41c>
24003432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003436:	e01a      	b.n	2400346e <HAL_DMA_Init+0x452>
24003438:	2300      	movs	r3, #0
2400343a:	e018      	b.n	2400346e <HAL_DMA_Init+0x452>
2400343c:	fe10803f 	.word	0xfe10803f
24003440:	5c001000 	.word	0x5c001000
24003444:	ffff0000 	.word	0xffff0000
24003448:	58025408 	.word	0x58025408
2400344c:	5802541c 	.word	0x5802541c
24003450:	58025430 	.word	0x58025430
24003454:	58025444 	.word	0x58025444
24003458:	58025458 	.word	0x58025458
2400345c:	5802546c 	.word	0x5802546c
24003460:	58025480 	.word	0x58025480
24003464:	58025494 	.word	0x58025494
24003468:	fffe000f 	.word	0xfffe000f
2400346c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2400346e:	687a      	ldr	r2, [r7, #4]
24003470:	68d2      	ldr	r2, [r2, #12]
24003472:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24003476:	687b      	ldr	r3, [r7, #4]
24003478:	691b      	ldr	r3, [r3, #16]
2400347a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2400347c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400347e:	687b      	ldr	r3, [r7, #4]
24003480:	695b      	ldr	r3, [r3, #20]
24003482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24003484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24003486:	687b      	ldr	r3, [r7, #4]
24003488:	699b      	ldr	r3, [r3, #24]
2400348a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400348c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400348e:	687b      	ldr	r3, [r7, #4]
24003490:	69db      	ldr	r3, [r3, #28]
24003492:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24003494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24003496:	687b      	ldr	r3, [r7, #4]
24003498:	6a1b      	ldr	r3, [r3, #32]
2400349a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400349c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400349e:	697a      	ldr	r2, [r7, #20]
240034a0:	4313      	orrs	r3, r2
240034a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240034a4:	687b      	ldr	r3, [r7, #4]
240034a6:	681b      	ldr	r3, [r3, #0]
240034a8:	697a      	ldr	r2, [r7, #20]
240034aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240034ac:	687b      	ldr	r3, [r7, #4]
240034ae:	681b      	ldr	r3, [r3, #0]
240034b0:	461a      	mov	r2, r3
240034b2:	4b6e      	ldr	r3, [pc, #440]	; (2400366c <HAL_DMA_Init+0x650>)
240034b4:	4413      	add	r3, r2
240034b6:	4a6e      	ldr	r2, [pc, #440]	; (24003670 <HAL_DMA_Init+0x654>)
240034b8:	fba2 2303 	umull	r2, r3, r2, r3
240034bc:	091b      	lsrs	r3, r3, #4
240034be:	009a      	lsls	r2, r3, #2
240034c0:	687b      	ldr	r3, [r7, #4]
240034c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240034c4:	6878      	ldr	r0, [r7, #4]
240034c6:	f003 f90b 	bl	240066e0 <DMA_CalcBaseAndBitshift>
240034ca:	4603      	mov	r3, r0
240034cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240034ce:	687b      	ldr	r3, [r7, #4]
240034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240034d2:	f003 031f 	and.w	r3, r3, #31
240034d6:	2201      	movs	r2, #1
240034d8:	409a      	lsls	r2, r3
240034da:	68fb      	ldr	r3, [r7, #12]
240034dc:	605a      	str	r2, [r3, #4]
240034de:	e008      	b.n	240034f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240034e0:	687b      	ldr	r3, [r7, #4]
240034e2:	2240      	movs	r2, #64	; 0x40
240034e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240034e6:	687b      	ldr	r3, [r7, #4]
240034e8:	2203      	movs	r2, #3
240034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
240034ee:	2301      	movs	r3, #1
240034f0:	e0b7      	b.n	24003662 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240034f2:	687b      	ldr	r3, [r7, #4]
240034f4:	681b      	ldr	r3, [r3, #0]
240034f6:	4a5f      	ldr	r2, [pc, #380]	; (24003674 <HAL_DMA_Init+0x658>)
240034f8:	4293      	cmp	r3, r2
240034fa:	d072      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240034fc:	687b      	ldr	r3, [r7, #4]
240034fe:	681b      	ldr	r3, [r3, #0]
24003500:	4a5d      	ldr	r2, [pc, #372]	; (24003678 <HAL_DMA_Init+0x65c>)
24003502:	4293      	cmp	r3, r2
24003504:	d06d      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003506:	687b      	ldr	r3, [r7, #4]
24003508:	681b      	ldr	r3, [r3, #0]
2400350a:	4a5c      	ldr	r2, [pc, #368]	; (2400367c <HAL_DMA_Init+0x660>)
2400350c:	4293      	cmp	r3, r2
2400350e:	d068      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003510:	687b      	ldr	r3, [r7, #4]
24003512:	681b      	ldr	r3, [r3, #0]
24003514:	4a5a      	ldr	r2, [pc, #360]	; (24003680 <HAL_DMA_Init+0x664>)
24003516:	4293      	cmp	r3, r2
24003518:	d063      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400351a:	687b      	ldr	r3, [r7, #4]
2400351c:	681b      	ldr	r3, [r3, #0]
2400351e:	4a59      	ldr	r2, [pc, #356]	; (24003684 <HAL_DMA_Init+0x668>)
24003520:	4293      	cmp	r3, r2
24003522:	d05e      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003524:	687b      	ldr	r3, [r7, #4]
24003526:	681b      	ldr	r3, [r3, #0]
24003528:	4a57      	ldr	r2, [pc, #348]	; (24003688 <HAL_DMA_Init+0x66c>)
2400352a:	4293      	cmp	r3, r2
2400352c:	d059      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400352e:	687b      	ldr	r3, [r7, #4]
24003530:	681b      	ldr	r3, [r3, #0]
24003532:	4a56      	ldr	r2, [pc, #344]	; (2400368c <HAL_DMA_Init+0x670>)
24003534:	4293      	cmp	r3, r2
24003536:	d054      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003538:	687b      	ldr	r3, [r7, #4]
2400353a:	681b      	ldr	r3, [r3, #0]
2400353c:	4a54      	ldr	r2, [pc, #336]	; (24003690 <HAL_DMA_Init+0x674>)
2400353e:	4293      	cmp	r3, r2
24003540:	d04f      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003542:	687b      	ldr	r3, [r7, #4]
24003544:	681b      	ldr	r3, [r3, #0]
24003546:	4a53      	ldr	r2, [pc, #332]	; (24003694 <HAL_DMA_Init+0x678>)
24003548:	4293      	cmp	r3, r2
2400354a:	d04a      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400354c:	687b      	ldr	r3, [r7, #4]
2400354e:	681b      	ldr	r3, [r3, #0]
24003550:	4a51      	ldr	r2, [pc, #324]	; (24003698 <HAL_DMA_Init+0x67c>)
24003552:	4293      	cmp	r3, r2
24003554:	d045      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003556:	687b      	ldr	r3, [r7, #4]
24003558:	681b      	ldr	r3, [r3, #0]
2400355a:	4a50      	ldr	r2, [pc, #320]	; (2400369c <HAL_DMA_Init+0x680>)
2400355c:	4293      	cmp	r3, r2
2400355e:	d040      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003560:	687b      	ldr	r3, [r7, #4]
24003562:	681b      	ldr	r3, [r3, #0]
24003564:	4a4e      	ldr	r2, [pc, #312]	; (240036a0 <HAL_DMA_Init+0x684>)
24003566:	4293      	cmp	r3, r2
24003568:	d03b      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400356a:	687b      	ldr	r3, [r7, #4]
2400356c:	681b      	ldr	r3, [r3, #0]
2400356e:	4a4d      	ldr	r2, [pc, #308]	; (240036a4 <HAL_DMA_Init+0x688>)
24003570:	4293      	cmp	r3, r2
24003572:	d036      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003574:	687b      	ldr	r3, [r7, #4]
24003576:	681b      	ldr	r3, [r3, #0]
24003578:	4a4b      	ldr	r2, [pc, #300]	; (240036a8 <HAL_DMA_Init+0x68c>)
2400357a:	4293      	cmp	r3, r2
2400357c:	d031      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400357e:	687b      	ldr	r3, [r7, #4]
24003580:	681b      	ldr	r3, [r3, #0]
24003582:	4a4a      	ldr	r2, [pc, #296]	; (240036ac <HAL_DMA_Init+0x690>)
24003584:	4293      	cmp	r3, r2
24003586:	d02c      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003588:	687b      	ldr	r3, [r7, #4]
2400358a:	681b      	ldr	r3, [r3, #0]
2400358c:	4a48      	ldr	r2, [pc, #288]	; (240036b0 <HAL_DMA_Init+0x694>)
2400358e:	4293      	cmp	r3, r2
24003590:	d027      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
24003592:	687b      	ldr	r3, [r7, #4]
24003594:	681b      	ldr	r3, [r3, #0]
24003596:	4a47      	ldr	r2, [pc, #284]	; (240036b4 <HAL_DMA_Init+0x698>)
24003598:	4293      	cmp	r3, r2
2400359a:	d022      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
2400359c:	687b      	ldr	r3, [r7, #4]
2400359e:	681b      	ldr	r3, [r3, #0]
240035a0:	4a45      	ldr	r2, [pc, #276]	; (240036b8 <HAL_DMA_Init+0x69c>)
240035a2:	4293      	cmp	r3, r2
240035a4:	d01d      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035a6:	687b      	ldr	r3, [r7, #4]
240035a8:	681b      	ldr	r3, [r3, #0]
240035aa:	4a44      	ldr	r2, [pc, #272]	; (240036bc <HAL_DMA_Init+0x6a0>)
240035ac:	4293      	cmp	r3, r2
240035ae:	d018      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035b0:	687b      	ldr	r3, [r7, #4]
240035b2:	681b      	ldr	r3, [r3, #0]
240035b4:	4a42      	ldr	r2, [pc, #264]	; (240036c0 <HAL_DMA_Init+0x6a4>)
240035b6:	4293      	cmp	r3, r2
240035b8:	d013      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035ba:	687b      	ldr	r3, [r7, #4]
240035bc:	681b      	ldr	r3, [r3, #0]
240035be:	4a41      	ldr	r2, [pc, #260]	; (240036c4 <HAL_DMA_Init+0x6a8>)
240035c0:	4293      	cmp	r3, r2
240035c2:	d00e      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035c4:	687b      	ldr	r3, [r7, #4]
240035c6:	681b      	ldr	r3, [r3, #0]
240035c8:	4a3f      	ldr	r2, [pc, #252]	; (240036c8 <HAL_DMA_Init+0x6ac>)
240035ca:	4293      	cmp	r3, r2
240035cc:	d009      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035ce:	687b      	ldr	r3, [r7, #4]
240035d0:	681b      	ldr	r3, [r3, #0]
240035d2:	4a3e      	ldr	r2, [pc, #248]	; (240036cc <HAL_DMA_Init+0x6b0>)
240035d4:	4293      	cmp	r3, r2
240035d6:	d004      	beq.n	240035e2 <HAL_DMA_Init+0x5c6>
240035d8:	687b      	ldr	r3, [r7, #4]
240035da:	681b      	ldr	r3, [r3, #0]
240035dc:	4a3c      	ldr	r2, [pc, #240]	; (240036d0 <HAL_DMA_Init+0x6b4>)
240035de:	4293      	cmp	r3, r2
240035e0:	d101      	bne.n	240035e6 <HAL_DMA_Init+0x5ca>
240035e2:	2301      	movs	r3, #1
240035e4:	e000      	b.n	240035e8 <HAL_DMA_Init+0x5cc>
240035e6:	2300      	movs	r3, #0
240035e8:	2b00      	cmp	r3, #0
240035ea:	d032      	beq.n	24003652 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240035ec:	6878      	ldr	r0, [r7, #4]
240035ee:	f003 f9a5 	bl	2400693c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240035f2:	687b      	ldr	r3, [r7, #4]
240035f4:	689b      	ldr	r3, [r3, #8]
240035f6:	2b80      	cmp	r3, #128	; 0x80
240035f8:	d102      	bne.n	24003600 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240035fa:	687b      	ldr	r3, [r7, #4]
240035fc:	2200      	movs	r2, #0
240035fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24003600:	687b      	ldr	r3, [r7, #4]
24003602:	685a      	ldr	r2, [r3, #4]
24003604:	687b      	ldr	r3, [r7, #4]
24003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003608:	b2d2      	uxtb	r2, r2
2400360a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400360c:	687b      	ldr	r3, [r7, #4]
2400360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003610:	687a      	ldr	r2, [r7, #4]
24003612:	6e92      	ldr	r2, [r2, #104]	; 0x68
24003614:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24003616:	687b      	ldr	r3, [r7, #4]
24003618:	685b      	ldr	r3, [r3, #4]
2400361a:	2b00      	cmp	r3, #0
2400361c:	d010      	beq.n	24003640 <HAL_DMA_Init+0x624>
2400361e:	687b      	ldr	r3, [r7, #4]
24003620:	685b      	ldr	r3, [r3, #4]
24003622:	2b08      	cmp	r3, #8
24003624:	d80c      	bhi.n	24003640 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
24003626:	6878      	ldr	r0, [r7, #4]
24003628:	f003 fa22 	bl	24006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
2400362c:	687b      	ldr	r3, [r7, #4]
2400362e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003630:	2200      	movs	r2, #0
24003632:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003634:	687b      	ldr	r3, [r7, #4]
24003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24003638:	687a      	ldr	r2, [r7, #4]
2400363a:	6f52      	ldr	r2, [r2, #116]	; 0x74
2400363c:	605a      	str	r2, [r3, #4]
2400363e:	e008      	b.n	24003652 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
24003640:	687b      	ldr	r3, [r7, #4]
24003642:	2200      	movs	r2, #0
24003644:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
24003646:	687b      	ldr	r3, [r7, #4]
24003648:	2200      	movs	r2, #0
2400364a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
2400364c:	687b      	ldr	r3, [r7, #4]
2400364e:	2200      	movs	r2, #0
24003650:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003652:	687b      	ldr	r3, [r7, #4]
24003654:	2200      	movs	r2, #0
24003656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24003658:	687b      	ldr	r3, [r7, #4]
2400365a:	2201      	movs	r2, #1
2400365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
24003660:	2300      	movs	r3, #0
}
24003662:	4618      	mov	r0, r3
24003664:	3718      	adds	r7, #24
24003666:	46bd      	mov	sp, r7
24003668:	bd80      	pop	{r7, pc}
2400366a:	bf00      	nop
2400366c:	a7fdabf8 	.word	0xa7fdabf8
24003670:	cccccccd 	.word	0xcccccccd
24003674:	40020010 	.word	0x40020010
24003678:	40020028 	.word	0x40020028
2400367c:	40020040 	.word	0x40020040
24003680:	40020058 	.word	0x40020058
24003684:	40020070 	.word	0x40020070
24003688:	40020088 	.word	0x40020088
2400368c:	400200a0 	.word	0x400200a0
24003690:	400200b8 	.word	0x400200b8
24003694:	40020410 	.word	0x40020410
24003698:	40020428 	.word	0x40020428
2400369c:	40020440 	.word	0x40020440
240036a0:	40020458 	.word	0x40020458
240036a4:	40020470 	.word	0x40020470
240036a8:	40020488 	.word	0x40020488
240036ac:	400204a0 	.word	0x400204a0
240036b0:	400204b8 	.word	0x400204b8
240036b4:	58025408 	.word	0x58025408
240036b8:	5802541c 	.word	0x5802541c
240036bc:	58025430 	.word	0x58025430
240036c0:	58025444 	.word	0x58025444
240036c4:	58025458 	.word	0x58025458
240036c8:	5802546c 	.word	0x5802546c
240036cc:	58025480 	.word	0x58025480
240036d0:	58025494 	.word	0x58025494

240036d4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
240036d4:	b580      	push	{r7, lr}
240036d6:	b084      	sub	sp, #16
240036d8:	af00      	add	r7, sp, #0
240036da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240036dc:	687b      	ldr	r3, [r7, #4]
240036de:	2b00      	cmp	r3, #0
240036e0:	d101      	bne.n	240036e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
240036e2:	2301      	movs	r3, #1
240036e4:	e1a8      	b.n	24003a38 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
240036e6:	687b      	ldr	r3, [r7, #4]
240036e8:	681b      	ldr	r3, [r3, #0]
240036ea:	4a82      	ldr	r2, [pc, #520]	; (240038f4 <HAL_DMA_DeInit+0x220>)
240036ec:	4293      	cmp	r3, r2
240036ee:	d04a      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
240036f0:	687b      	ldr	r3, [r7, #4]
240036f2:	681b      	ldr	r3, [r3, #0]
240036f4:	4a80      	ldr	r2, [pc, #512]	; (240038f8 <HAL_DMA_DeInit+0x224>)
240036f6:	4293      	cmp	r3, r2
240036f8:	d045      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
240036fa:	687b      	ldr	r3, [r7, #4]
240036fc:	681b      	ldr	r3, [r3, #0]
240036fe:	4a7f      	ldr	r2, [pc, #508]	; (240038fc <HAL_DMA_DeInit+0x228>)
24003700:	4293      	cmp	r3, r2
24003702:	d040      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003704:	687b      	ldr	r3, [r7, #4]
24003706:	681b      	ldr	r3, [r3, #0]
24003708:	4a7d      	ldr	r2, [pc, #500]	; (24003900 <HAL_DMA_DeInit+0x22c>)
2400370a:	4293      	cmp	r3, r2
2400370c:	d03b      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
2400370e:	687b      	ldr	r3, [r7, #4]
24003710:	681b      	ldr	r3, [r3, #0]
24003712:	4a7c      	ldr	r2, [pc, #496]	; (24003904 <HAL_DMA_DeInit+0x230>)
24003714:	4293      	cmp	r3, r2
24003716:	d036      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003718:	687b      	ldr	r3, [r7, #4]
2400371a:	681b      	ldr	r3, [r3, #0]
2400371c:	4a7a      	ldr	r2, [pc, #488]	; (24003908 <HAL_DMA_DeInit+0x234>)
2400371e:	4293      	cmp	r3, r2
24003720:	d031      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003722:	687b      	ldr	r3, [r7, #4]
24003724:	681b      	ldr	r3, [r3, #0]
24003726:	4a79      	ldr	r2, [pc, #484]	; (2400390c <HAL_DMA_DeInit+0x238>)
24003728:	4293      	cmp	r3, r2
2400372a:	d02c      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
2400372c:	687b      	ldr	r3, [r7, #4]
2400372e:	681b      	ldr	r3, [r3, #0]
24003730:	4a77      	ldr	r2, [pc, #476]	; (24003910 <HAL_DMA_DeInit+0x23c>)
24003732:	4293      	cmp	r3, r2
24003734:	d027      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003736:	687b      	ldr	r3, [r7, #4]
24003738:	681b      	ldr	r3, [r3, #0]
2400373a:	4a76      	ldr	r2, [pc, #472]	; (24003914 <HAL_DMA_DeInit+0x240>)
2400373c:	4293      	cmp	r3, r2
2400373e:	d022      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003740:	687b      	ldr	r3, [r7, #4]
24003742:	681b      	ldr	r3, [r3, #0]
24003744:	4a74      	ldr	r2, [pc, #464]	; (24003918 <HAL_DMA_DeInit+0x244>)
24003746:	4293      	cmp	r3, r2
24003748:	d01d      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
2400374a:	687b      	ldr	r3, [r7, #4]
2400374c:	681b      	ldr	r3, [r3, #0]
2400374e:	4a73      	ldr	r2, [pc, #460]	; (2400391c <HAL_DMA_DeInit+0x248>)
24003750:	4293      	cmp	r3, r2
24003752:	d018      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003754:	687b      	ldr	r3, [r7, #4]
24003756:	681b      	ldr	r3, [r3, #0]
24003758:	4a71      	ldr	r2, [pc, #452]	; (24003920 <HAL_DMA_DeInit+0x24c>)
2400375a:	4293      	cmp	r3, r2
2400375c:	d013      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
2400375e:	687b      	ldr	r3, [r7, #4]
24003760:	681b      	ldr	r3, [r3, #0]
24003762:	4a70      	ldr	r2, [pc, #448]	; (24003924 <HAL_DMA_DeInit+0x250>)
24003764:	4293      	cmp	r3, r2
24003766:	d00e      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003768:	687b      	ldr	r3, [r7, #4]
2400376a:	681b      	ldr	r3, [r3, #0]
2400376c:	4a6e      	ldr	r2, [pc, #440]	; (24003928 <HAL_DMA_DeInit+0x254>)
2400376e:	4293      	cmp	r3, r2
24003770:	d009      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
24003772:	687b      	ldr	r3, [r7, #4]
24003774:	681b      	ldr	r3, [r3, #0]
24003776:	4a6d      	ldr	r2, [pc, #436]	; (2400392c <HAL_DMA_DeInit+0x258>)
24003778:	4293      	cmp	r3, r2
2400377a:	d004      	beq.n	24003786 <HAL_DMA_DeInit+0xb2>
2400377c:	687b      	ldr	r3, [r7, #4]
2400377e:	681b      	ldr	r3, [r3, #0]
24003780:	4a6b      	ldr	r2, [pc, #428]	; (24003930 <HAL_DMA_DeInit+0x25c>)
24003782:	4293      	cmp	r3, r2
24003784:	d108      	bne.n	24003798 <HAL_DMA_DeInit+0xc4>
24003786:	687b      	ldr	r3, [r7, #4]
24003788:	681b      	ldr	r3, [r3, #0]
2400378a:	681a      	ldr	r2, [r3, #0]
2400378c:	687b      	ldr	r3, [r7, #4]
2400378e:	681b      	ldr	r3, [r3, #0]
24003790:	f022 0201 	bic.w	r2, r2, #1
24003794:	601a      	str	r2, [r3, #0]
24003796:	e007      	b.n	240037a8 <HAL_DMA_DeInit+0xd4>
24003798:	687b      	ldr	r3, [r7, #4]
2400379a:	681b      	ldr	r3, [r3, #0]
2400379c:	681a      	ldr	r2, [r3, #0]
2400379e:	687b      	ldr	r3, [r7, #4]
240037a0:	681b      	ldr	r3, [r3, #0]
240037a2:	f022 0201 	bic.w	r2, r2, #1
240037a6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240037a8:	687b      	ldr	r3, [r7, #4]
240037aa:	681b      	ldr	r3, [r3, #0]
240037ac:	4a51      	ldr	r2, [pc, #324]	; (240038f4 <HAL_DMA_DeInit+0x220>)
240037ae:	4293      	cmp	r3, r2
240037b0:	d04a      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037b2:	687b      	ldr	r3, [r7, #4]
240037b4:	681b      	ldr	r3, [r3, #0]
240037b6:	4a50      	ldr	r2, [pc, #320]	; (240038f8 <HAL_DMA_DeInit+0x224>)
240037b8:	4293      	cmp	r3, r2
240037ba:	d045      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037bc:	687b      	ldr	r3, [r7, #4]
240037be:	681b      	ldr	r3, [r3, #0]
240037c0:	4a4e      	ldr	r2, [pc, #312]	; (240038fc <HAL_DMA_DeInit+0x228>)
240037c2:	4293      	cmp	r3, r2
240037c4:	d040      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037c6:	687b      	ldr	r3, [r7, #4]
240037c8:	681b      	ldr	r3, [r3, #0]
240037ca:	4a4d      	ldr	r2, [pc, #308]	; (24003900 <HAL_DMA_DeInit+0x22c>)
240037cc:	4293      	cmp	r3, r2
240037ce:	d03b      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037d0:	687b      	ldr	r3, [r7, #4]
240037d2:	681b      	ldr	r3, [r3, #0]
240037d4:	4a4b      	ldr	r2, [pc, #300]	; (24003904 <HAL_DMA_DeInit+0x230>)
240037d6:	4293      	cmp	r3, r2
240037d8:	d036      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037da:	687b      	ldr	r3, [r7, #4]
240037dc:	681b      	ldr	r3, [r3, #0]
240037de:	4a4a      	ldr	r2, [pc, #296]	; (24003908 <HAL_DMA_DeInit+0x234>)
240037e0:	4293      	cmp	r3, r2
240037e2:	d031      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037e4:	687b      	ldr	r3, [r7, #4]
240037e6:	681b      	ldr	r3, [r3, #0]
240037e8:	4a48      	ldr	r2, [pc, #288]	; (2400390c <HAL_DMA_DeInit+0x238>)
240037ea:	4293      	cmp	r3, r2
240037ec:	d02c      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037ee:	687b      	ldr	r3, [r7, #4]
240037f0:	681b      	ldr	r3, [r3, #0]
240037f2:	4a47      	ldr	r2, [pc, #284]	; (24003910 <HAL_DMA_DeInit+0x23c>)
240037f4:	4293      	cmp	r3, r2
240037f6:	d027      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
240037f8:	687b      	ldr	r3, [r7, #4]
240037fa:	681b      	ldr	r3, [r3, #0]
240037fc:	4a45      	ldr	r2, [pc, #276]	; (24003914 <HAL_DMA_DeInit+0x240>)
240037fe:	4293      	cmp	r3, r2
24003800:	d022      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
24003802:	687b      	ldr	r3, [r7, #4]
24003804:	681b      	ldr	r3, [r3, #0]
24003806:	4a44      	ldr	r2, [pc, #272]	; (24003918 <HAL_DMA_DeInit+0x244>)
24003808:	4293      	cmp	r3, r2
2400380a:	d01d      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
2400380c:	687b      	ldr	r3, [r7, #4]
2400380e:	681b      	ldr	r3, [r3, #0]
24003810:	4a42      	ldr	r2, [pc, #264]	; (2400391c <HAL_DMA_DeInit+0x248>)
24003812:	4293      	cmp	r3, r2
24003814:	d018      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
24003816:	687b      	ldr	r3, [r7, #4]
24003818:	681b      	ldr	r3, [r3, #0]
2400381a:	4a41      	ldr	r2, [pc, #260]	; (24003920 <HAL_DMA_DeInit+0x24c>)
2400381c:	4293      	cmp	r3, r2
2400381e:	d013      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
24003820:	687b      	ldr	r3, [r7, #4]
24003822:	681b      	ldr	r3, [r3, #0]
24003824:	4a3f      	ldr	r2, [pc, #252]	; (24003924 <HAL_DMA_DeInit+0x250>)
24003826:	4293      	cmp	r3, r2
24003828:	d00e      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
2400382a:	687b      	ldr	r3, [r7, #4]
2400382c:	681b      	ldr	r3, [r3, #0]
2400382e:	4a3e      	ldr	r2, [pc, #248]	; (24003928 <HAL_DMA_DeInit+0x254>)
24003830:	4293      	cmp	r3, r2
24003832:	d009      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
24003834:	687b      	ldr	r3, [r7, #4]
24003836:	681b      	ldr	r3, [r3, #0]
24003838:	4a3c      	ldr	r2, [pc, #240]	; (2400392c <HAL_DMA_DeInit+0x258>)
2400383a:	4293      	cmp	r3, r2
2400383c:	d004      	beq.n	24003848 <HAL_DMA_DeInit+0x174>
2400383e:	687b      	ldr	r3, [r7, #4]
24003840:	681b      	ldr	r3, [r3, #0]
24003842:	4a3b      	ldr	r2, [pc, #236]	; (24003930 <HAL_DMA_DeInit+0x25c>)
24003844:	4293      	cmp	r3, r2
24003846:	d101      	bne.n	2400384c <HAL_DMA_DeInit+0x178>
24003848:	2301      	movs	r3, #1
2400384a:	e000      	b.n	2400384e <HAL_DMA_DeInit+0x17a>
2400384c:	2300      	movs	r3, #0
2400384e:	2b00      	cmp	r3, #0
24003850:	d025      	beq.n	2400389e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
24003852:	687b      	ldr	r3, [r7, #4]
24003854:	681b      	ldr	r3, [r3, #0]
24003856:	2200      	movs	r2, #0
24003858:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
2400385a:	687b      	ldr	r3, [r7, #4]
2400385c:	681b      	ldr	r3, [r3, #0]
2400385e:	2200      	movs	r2, #0
24003860:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
24003862:	687b      	ldr	r3, [r7, #4]
24003864:	681b      	ldr	r3, [r3, #0]
24003866:	2200      	movs	r2, #0
24003868:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
2400386a:	687b      	ldr	r3, [r7, #4]
2400386c:	681b      	ldr	r3, [r3, #0]
2400386e:	2200      	movs	r2, #0
24003870:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
24003872:	687b      	ldr	r3, [r7, #4]
24003874:	681b      	ldr	r3, [r3, #0]
24003876:	2200      	movs	r2, #0
24003878:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
2400387a:	687b      	ldr	r3, [r7, #4]
2400387c:	681b      	ldr	r3, [r3, #0]
2400387e:	2221      	movs	r2, #33	; 0x21
24003880:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003882:	6878      	ldr	r0, [r7, #4]
24003884:	f002 ff2c 	bl	240066e0 <DMA_CalcBaseAndBitshift>
24003888:	4603      	mov	r3, r0
2400388a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400388c:	687b      	ldr	r3, [r7, #4]
2400388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003890:	f003 031f 	and.w	r3, r3, #31
24003894:	223f      	movs	r2, #63	; 0x3f
24003896:	409a      	lsls	r2, r3
24003898:	68bb      	ldr	r3, [r7, #8]
2400389a:	609a      	str	r2, [r3, #8]
2400389c:	e081      	b.n	240039a2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400389e:	687b      	ldr	r3, [r7, #4]
240038a0:	681b      	ldr	r3, [r3, #0]
240038a2:	4a24      	ldr	r2, [pc, #144]	; (24003934 <HAL_DMA_DeInit+0x260>)
240038a4:	4293      	cmp	r3, r2
240038a6:	d022      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038a8:	687b      	ldr	r3, [r7, #4]
240038aa:	681b      	ldr	r3, [r3, #0]
240038ac:	4a22      	ldr	r2, [pc, #136]	; (24003938 <HAL_DMA_DeInit+0x264>)
240038ae:	4293      	cmp	r3, r2
240038b0:	d01d      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038b2:	687b      	ldr	r3, [r7, #4]
240038b4:	681b      	ldr	r3, [r3, #0]
240038b6:	4a21      	ldr	r2, [pc, #132]	; (2400393c <HAL_DMA_DeInit+0x268>)
240038b8:	4293      	cmp	r3, r2
240038ba:	d018      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038bc:	687b      	ldr	r3, [r7, #4]
240038be:	681b      	ldr	r3, [r3, #0]
240038c0:	4a1f      	ldr	r2, [pc, #124]	; (24003940 <HAL_DMA_DeInit+0x26c>)
240038c2:	4293      	cmp	r3, r2
240038c4:	d013      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038c6:	687b      	ldr	r3, [r7, #4]
240038c8:	681b      	ldr	r3, [r3, #0]
240038ca:	4a1e      	ldr	r2, [pc, #120]	; (24003944 <HAL_DMA_DeInit+0x270>)
240038cc:	4293      	cmp	r3, r2
240038ce:	d00e      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038d0:	687b      	ldr	r3, [r7, #4]
240038d2:	681b      	ldr	r3, [r3, #0]
240038d4:	4a1c      	ldr	r2, [pc, #112]	; (24003948 <HAL_DMA_DeInit+0x274>)
240038d6:	4293      	cmp	r3, r2
240038d8:	d009      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038da:	687b      	ldr	r3, [r7, #4]
240038dc:	681b      	ldr	r3, [r3, #0]
240038de:	4a1b      	ldr	r2, [pc, #108]	; (2400394c <HAL_DMA_DeInit+0x278>)
240038e0:	4293      	cmp	r3, r2
240038e2:	d004      	beq.n	240038ee <HAL_DMA_DeInit+0x21a>
240038e4:	687b      	ldr	r3, [r7, #4]
240038e6:	681b      	ldr	r3, [r3, #0]
240038e8:	4a19      	ldr	r2, [pc, #100]	; (24003950 <HAL_DMA_DeInit+0x27c>)
240038ea:	4293      	cmp	r3, r2
240038ec:	d132      	bne.n	24003954 <HAL_DMA_DeInit+0x280>
240038ee:	2301      	movs	r3, #1
240038f0:	e031      	b.n	24003956 <HAL_DMA_DeInit+0x282>
240038f2:	bf00      	nop
240038f4:	40020010 	.word	0x40020010
240038f8:	40020028 	.word	0x40020028
240038fc:	40020040 	.word	0x40020040
24003900:	40020058 	.word	0x40020058
24003904:	40020070 	.word	0x40020070
24003908:	40020088 	.word	0x40020088
2400390c:	400200a0 	.word	0x400200a0
24003910:	400200b8 	.word	0x400200b8
24003914:	40020410 	.word	0x40020410
24003918:	40020428 	.word	0x40020428
2400391c:	40020440 	.word	0x40020440
24003920:	40020458 	.word	0x40020458
24003924:	40020470 	.word	0x40020470
24003928:	40020488 	.word	0x40020488
2400392c:	400204a0 	.word	0x400204a0
24003930:	400204b8 	.word	0x400204b8
24003934:	58025408 	.word	0x58025408
24003938:	5802541c 	.word	0x5802541c
2400393c:	58025430 	.word	0x58025430
24003940:	58025444 	.word	0x58025444
24003944:	58025458 	.word	0x58025458
24003948:	5802546c 	.word	0x5802546c
2400394c:	58025480 	.word	0x58025480
24003950:	58025494 	.word	0x58025494
24003954:	2300      	movs	r3, #0
24003956:	2b00      	cmp	r3, #0
24003958:	d021      	beq.n	2400399e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
2400395a:	687b      	ldr	r3, [r7, #4]
2400395c:	681b      	ldr	r3, [r3, #0]
2400395e:	2200      	movs	r2, #0
24003960:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
24003962:	687b      	ldr	r3, [r7, #4]
24003964:	681b      	ldr	r3, [r3, #0]
24003966:	2200      	movs	r2, #0
24003968:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
2400396a:	687b      	ldr	r3, [r7, #4]
2400396c:	681b      	ldr	r3, [r3, #0]
2400396e:	2200      	movs	r2, #0
24003970:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
24003972:	687b      	ldr	r3, [r7, #4]
24003974:	681b      	ldr	r3, [r3, #0]
24003976:	2200      	movs	r2, #0
24003978:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
2400397a:	687b      	ldr	r3, [r7, #4]
2400397c:	681b      	ldr	r3, [r3, #0]
2400397e:	2200      	movs	r2, #0
24003980:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003982:	6878      	ldr	r0, [r7, #4]
24003984:	f002 feac 	bl	240066e0 <DMA_CalcBaseAndBitshift>
24003988:	4603      	mov	r3, r0
2400398a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400398c:	687b      	ldr	r3, [r7, #4]
2400398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003990:	f003 031f 	and.w	r3, r3, #31
24003994:	2201      	movs	r2, #1
24003996:	409a      	lsls	r2, r3
24003998:	68fb      	ldr	r3, [r7, #12]
2400399a:	605a      	str	r2, [r3, #4]
2400399c:	e001      	b.n	240039a2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
2400399e:	2301      	movs	r3, #1
240039a0:	e04a      	b.n	24003a38 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240039a2:	6878      	ldr	r0, [r7, #4]
240039a4:	f002 ffca 	bl	2400693c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
240039a8:	687b      	ldr	r3, [r7, #4]
240039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240039ac:	2b00      	cmp	r3, #0
240039ae:	d008      	beq.n	240039c2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
240039b0:	687b      	ldr	r3, [r7, #4]
240039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240039b4:	2200      	movs	r2, #0
240039b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240039b8:	687b      	ldr	r3, [r7, #4]
240039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240039bc:	687a      	ldr	r2, [r7, #4]
240039be:	6e92      	ldr	r2, [r2, #104]	; 0x68
240039c0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240039c2:	687b      	ldr	r3, [r7, #4]
240039c4:	685b      	ldr	r3, [r3, #4]
240039c6:	2b00      	cmp	r3, #0
240039c8:	d00f      	beq.n	240039ea <HAL_DMA_DeInit+0x316>
240039ca:	687b      	ldr	r3, [r7, #4]
240039cc:	685b      	ldr	r3, [r3, #4]
240039ce:	2b08      	cmp	r3, #8
240039d0:	d80b      	bhi.n	240039ea <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240039d2:	6878      	ldr	r0, [r7, #4]
240039d4:	f003 f84c 	bl	24006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240039d8:	687b      	ldr	r3, [r7, #4]
240039da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240039dc:	2200      	movs	r2, #0
240039de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240039e0:	687b      	ldr	r3, [r7, #4]
240039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240039e4:	687a      	ldr	r2, [r7, #4]
240039e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
240039e8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
240039ea:	687b      	ldr	r3, [r7, #4]
240039ec:	2200      	movs	r2, #0
240039ee:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
240039f0:	687b      	ldr	r3, [r7, #4]
240039f2:	2200      	movs	r2, #0
240039f4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
240039f6:	687b      	ldr	r3, [r7, #4]
240039f8:	2200      	movs	r2, #0
240039fa:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
240039fc:	687b      	ldr	r3, [r7, #4]
240039fe:	2200      	movs	r2, #0
24003a00:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
24003a02:	687b      	ldr	r3, [r7, #4]
24003a04:	2200      	movs	r2, #0
24003a06:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
24003a08:	687b      	ldr	r3, [r7, #4]
24003a0a:	2200      	movs	r2, #0
24003a0c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
24003a0e:	687b      	ldr	r3, [r7, #4]
24003a10:	2200      	movs	r2, #0
24003a12:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
24003a14:	687b      	ldr	r3, [r7, #4]
24003a16:	2200      	movs	r2, #0
24003a18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
24003a1a:	687b      	ldr	r3, [r7, #4]
24003a1c:	2200      	movs	r2, #0
24003a1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003a20:	687b      	ldr	r3, [r7, #4]
24003a22:	2200      	movs	r2, #0
24003a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
24003a26:	687b      	ldr	r3, [r7, #4]
24003a28:	2200      	movs	r2, #0
24003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24003a2e:	687b      	ldr	r3, [r7, #4]
24003a30:	2200      	movs	r2, #0
24003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
24003a36:	2300      	movs	r3, #0
}
24003a38:	4618      	mov	r0, r3
24003a3a:	3710      	adds	r7, #16
24003a3c:	46bd      	mov	sp, r7
24003a3e:	bd80      	pop	{r7, pc}

24003a40 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003a40:	b580      	push	{r7, lr}
24003a42:	b086      	sub	sp, #24
24003a44:	af00      	add	r7, sp, #0
24003a46:	60f8      	str	r0, [r7, #12]
24003a48:	60b9      	str	r1, [r7, #8]
24003a4a:	607a      	str	r2, [r7, #4]
24003a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003a4e:	2300      	movs	r3, #0
24003a50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003a52:	68fb      	ldr	r3, [r7, #12]
24003a54:	2b00      	cmp	r3, #0
24003a56:	d101      	bne.n	24003a5c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
24003a58:	2301      	movs	r3, #1
24003a5a:	e0ec      	b.n	24003c36 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003a5c:	68fb      	ldr	r3, [r7, #12]
24003a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003a62:	2b01      	cmp	r3, #1
24003a64:	d101      	bne.n	24003a6a <HAL_DMA_Start+0x2a>
24003a66:	2302      	movs	r3, #2
24003a68:	e0e5      	b.n	24003c36 <HAL_DMA_Start+0x1f6>
24003a6a:	68fb      	ldr	r3, [r7, #12]
24003a6c:	2201      	movs	r2, #1
24003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003a72:	68fb      	ldr	r3, [r7, #12]
24003a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003a78:	b2db      	uxtb	r3, r3
24003a7a:	2b01      	cmp	r3, #1
24003a7c:	f040 80d0 	bne.w	24003c20 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003a80:	68fb      	ldr	r3, [r7, #12]
24003a82:	2202      	movs	r2, #2
24003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003a88:	68fb      	ldr	r3, [r7, #12]
24003a8a:	2200      	movs	r2, #0
24003a8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003a8e:	68fb      	ldr	r3, [r7, #12]
24003a90:	681b      	ldr	r3, [r3, #0]
24003a92:	4a6b      	ldr	r2, [pc, #428]	; (24003c40 <HAL_DMA_Start+0x200>)
24003a94:	4293      	cmp	r3, r2
24003a96:	d04a      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003a98:	68fb      	ldr	r3, [r7, #12]
24003a9a:	681b      	ldr	r3, [r3, #0]
24003a9c:	4a69      	ldr	r2, [pc, #420]	; (24003c44 <HAL_DMA_Start+0x204>)
24003a9e:	4293      	cmp	r3, r2
24003aa0:	d045      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003aa2:	68fb      	ldr	r3, [r7, #12]
24003aa4:	681b      	ldr	r3, [r3, #0]
24003aa6:	4a68      	ldr	r2, [pc, #416]	; (24003c48 <HAL_DMA_Start+0x208>)
24003aa8:	4293      	cmp	r3, r2
24003aaa:	d040      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003aac:	68fb      	ldr	r3, [r7, #12]
24003aae:	681b      	ldr	r3, [r3, #0]
24003ab0:	4a66      	ldr	r2, [pc, #408]	; (24003c4c <HAL_DMA_Start+0x20c>)
24003ab2:	4293      	cmp	r3, r2
24003ab4:	d03b      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003ab6:	68fb      	ldr	r3, [r7, #12]
24003ab8:	681b      	ldr	r3, [r3, #0]
24003aba:	4a65      	ldr	r2, [pc, #404]	; (24003c50 <HAL_DMA_Start+0x210>)
24003abc:	4293      	cmp	r3, r2
24003abe:	d036      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003ac0:	68fb      	ldr	r3, [r7, #12]
24003ac2:	681b      	ldr	r3, [r3, #0]
24003ac4:	4a63      	ldr	r2, [pc, #396]	; (24003c54 <HAL_DMA_Start+0x214>)
24003ac6:	4293      	cmp	r3, r2
24003ac8:	d031      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003aca:	68fb      	ldr	r3, [r7, #12]
24003acc:	681b      	ldr	r3, [r3, #0]
24003ace:	4a62      	ldr	r2, [pc, #392]	; (24003c58 <HAL_DMA_Start+0x218>)
24003ad0:	4293      	cmp	r3, r2
24003ad2:	d02c      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003ad4:	68fb      	ldr	r3, [r7, #12]
24003ad6:	681b      	ldr	r3, [r3, #0]
24003ad8:	4a60      	ldr	r2, [pc, #384]	; (24003c5c <HAL_DMA_Start+0x21c>)
24003ada:	4293      	cmp	r3, r2
24003adc:	d027      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003ade:	68fb      	ldr	r3, [r7, #12]
24003ae0:	681b      	ldr	r3, [r3, #0]
24003ae2:	4a5f      	ldr	r2, [pc, #380]	; (24003c60 <HAL_DMA_Start+0x220>)
24003ae4:	4293      	cmp	r3, r2
24003ae6:	d022      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003ae8:	68fb      	ldr	r3, [r7, #12]
24003aea:	681b      	ldr	r3, [r3, #0]
24003aec:	4a5d      	ldr	r2, [pc, #372]	; (24003c64 <HAL_DMA_Start+0x224>)
24003aee:	4293      	cmp	r3, r2
24003af0:	d01d      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003af2:	68fb      	ldr	r3, [r7, #12]
24003af4:	681b      	ldr	r3, [r3, #0]
24003af6:	4a5c      	ldr	r2, [pc, #368]	; (24003c68 <HAL_DMA_Start+0x228>)
24003af8:	4293      	cmp	r3, r2
24003afa:	d018      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003afc:	68fb      	ldr	r3, [r7, #12]
24003afe:	681b      	ldr	r3, [r3, #0]
24003b00:	4a5a      	ldr	r2, [pc, #360]	; (24003c6c <HAL_DMA_Start+0x22c>)
24003b02:	4293      	cmp	r3, r2
24003b04:	d013      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003b06:	68fb      	ldr	r3, [r7, #12]
24003b08:	681b      	ldr	r3, [r3, #0]
24003b0a:	4a59      	ldr	r2, [pc, #356]	; (24003c70 <HAL_DMA_Start+0x230>)
24003b0c:	4293      	cmp	r3, r2
24003b0e:	d00e      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003b10:	68fb      	ldr	r3, [r7, #12]
24003b12:	681b      	ldr	r3, [r3, #0]
24003b14:	4a57      	ldr	r2, [pc, #348]	; (24003c74 <HAL_DMA_Start+0x234>)
24003b16:	4293      	cmp	r3, r2
24003b18:	d009      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003b1a:	68fb      	ldr	r3, [r7, #12]
24003b1c:	681b      	ldr	r3, [r3, #0]
24003b1e:	4a56      	ldr	r2, [pc, #344]	; (24003c78 <HAL_DMA_Start+0x238>)
24003b20:	4293      	cmp	r3, r2
24003b22:	d004      	beq.n	24003b2e <HAL_DMA_Start+0xee>
24003b24:	68fb      	ldr	r3, [r7, #12]
24003b26:	681b      	ldr	r3, [r3, #0]
24003b28:	4a54      	ldr	r2, [pc, #336]	; (24003c7c <HAL_DMA_Start+0x23c>)
24003b2a:	4293      	cmp	r3, r2
24003b2c:	d108      	bne.n	24003b40 <HAL_DMA_Start+0x100>
24003b2e:	68fb      	ldr	r3, [r7, #12]
24003b30:	681b      	ldr	r3, [r3, #0]
24003b32:	681a      	ldr	r2, [r3, #0]
24003b34:	68fb      	ldr	r3, [r7, #12]
24003b36:	681b      	ldr	r3, [r3, #0]
24003b38:	f022 0201 	bic.w	r2, r2, #1
24003b3c:	601a      	str	r2, [r3, #0]
24003b3e:	e007      	b.n	24003b50 <HAL_DMA_Start+0x110>
24003b40:	68fb      	ldr	r3, [r7, #12]
24003b42:	681b      	ldr	r3, [r3, #0]
24003b44:	681a      	ldr	r2, [r3, #0]
24003b46:	68fb      	ldr	r3, [r7, #12]
24003b48:	681b      	ldr	r3, [r3, #0]
24003b4a:	f022 0201 	bic.w	r2, r2, #1
24003b4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003b50:	683b      	ldr	r3, [r7, #0]
24003b52:	687a      	ldr	r2, [r7, #4]
24003b54:	68b9      	ldr	r1, [r7, #8]
24003b56:	68f8      	ldr	r0, [r7, #12]
24003b58:	f002 fc16 	bl	24006388 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24003b5c:	68fb      	ldr	r3, [r7, #12]
24003b5e:	681b      	ldr	r3, [r3, #0]
24003b60:	4a37      	ldr	r2, [pc, #220]	; (24003c40 <HAL_DMA_Start+0x200>)
24003b62:	4293      	cmp	r3, r2
24003b64:	d04a      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b66:	68fb      	ldr	r3, [r7, #12]
24003b68:	681b      	ldr	r3, [r3, #0]
24003b6a:	4a36      	ldr	r2, [pc, #216]	; (24003c44 <HAL_DMA_Start+0x204>)
24003b6c:	4293      	cmp	r3, r2
24003b6e:	d045      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b70:	68fb      	ldr	r3, [r7, #12]
24003b72:	681b      	ldr	r3, [r3, #0]
24003b74:	4a34      	ldr	r2, [pc, #208]	; (24003c48 <HAL_DMA_Start+0x208>)
24003b76:	4293      	cmp	r3, r2
24003b78:	d040      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b7a:	68fb      	ldr	r3, [r7, #12]
24003b7c:	681b      	ldr	r3, [r3, #0]
24003b7e:	4a33      	ldr	r2, [pc, #204]	; (24003c4c <HAL_DMA_Start+0x20c>)
24003b80:	4293      	cmp	r3, r2
24003b82:	d03b      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b84:	68fb      	ldr	r3, [r7, #12]
24003b86:	681b      	ldr	r3, [r3, #0]
24003b88:	4a31      	ldr	r2, [pc, #196]	; (24003c50 <HAL_DMA_Start+0x210>)
24003b8a:	4293      	cmp	r3, r2
24003b8c:	d036      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b8e:	68fb      	ldr	r3, [r7, #12]
24003b90:	681b      	ldr	r3, [r3, #0]
24003b92:	4a30      	ldr	r2, [pc, #192]	; (24003c54 <HAL_DMA_Start+0x214>)
24003b94:	4293      	cmp	r3, r2
24003b96:	d031      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003b98:	68fb      	ldr	r3, [r7, #12]
24003b9a:	681b      	ldr	r3, [r3, #0]
24003b9c:	4a2e      	ldr	r2, [pc, #184]	; (24003c58 <HAL_DMA_Start+0x218>)
24003b9e:	4293      	cmp	r3, r2
24003ba0:	d02c      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003ba2:	68fb      	ldr	r3, [r7, #12]
24003ba4:	681b      	ldr	r3, [r3, #0]
24003ba6:	4a2d      	ldr	r2, [pc, #180]	; (24003c5c <HAL_DMA_Start+0x21c>)
24003ba8:	4293      	cmp	r3, r2
24003baa:	d027      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bac:	68fb      	ldr	r3, [r7, #12]
24003bae:	681b      	ldr	r3, [r3, #0]
24003bb0:	4a2b      	ldr	r2, [pc, #172]	; (24003c60 <HAL_DMA_Start+0x220>)
24003bb2:	4293      	cmp	r3, r2
24003bb4:	d022      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bb6:	68fb      	ldr	r3, [r7, #12]
24003bb8:	681b      	ldr	r3, [r3, #0]
24003bba:	4a2a      	ldr	r2, [pc, #168]	; (24003c64 <HAL_DMA_Start+0x224>)
24003bbc:	4293      	cmp	r3, r2
24003bbe:	d01d      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bc0:	68fb      	ldr	r3, [r7, #12]
24003bc2:	681b      	ldr	r3, [r3, #0]
24003bc4:	4a28      	ldr	r2, [pc, #160]	; (24003c68 <HAL_DMA_Start+0x228>)
24003bc6:	4293      	cmp	r3, r2
24003bc8:	d018      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bca:	68fb      	ldr	r3, [r7, #12]
24003bcc:	681b      	ldr	r3, [r3, #0]
24003bce:	4a27      	ldr	r2, [pc, #156]	; (24003c6c <HAL_DMA_Start+0x22c>)
24003bd0:	4293      	cmp	r3, r2
24003bd2:	d013      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bd4:	68fb      	ldr	r3, [r7, #12]
24003bd6:	681b      	ldr	r3, [r3, #0]
24003bd8:	4a25      	ldr	r2, [pc, #148]	; (24003c70 <HAL_DMA_Start+0x230>)
24003bda:	4293      	cmp	r3, r2
24003bdc:	d00e      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bde:	68fb      	ldr	r3, [r7, #12]
24003be0:	681b      	ldr	r3, [r3, #0]
24003be2:	4a24      	ldr	r2, [pc, #144]	; (24003c74 <HAL_DMA_Start+0x234>)
24003be4:	4293      	cmp	r3, r2
24003be6:	d009      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003be8:	68fb      	ldr	r3, [r7, #12]
24003bea:	681b      	ldr	r3, [r3, #0]
24003bec:	4a22      	ldr	r2, [pc, #136]	; (24003c78 <HAL_DMA_Start+0x238>)
24003bee:	4293      	cmp	r3, r2
24003bf0:	d004      	beq.n	24003bfc <HAL_DMA_Start+0x1bc>
24003bf2:	68fb      	ldr	r3, [r7, #12]
24003bf4:	681b      	ldr	r3, [r3, #0]
24003bf6:	4a21      	ldr	r2, [pc, #132]	; (24003c7c <HAL_DMA_Start+0x23c>)
24003bf8:	4293      	cmp	r3, r2
24003bfa:	d108      	bne.n	24003c0e <HAL_DMA_Start+0x1ce>
24003bfc:	68fb      	ldr	r3, [r7, #12]
24003bfe:	681b      	ldr	r3, [r3, #0]
24003c00:	681a      	ldr	r2, [r3, #0]
24003c02:	68fb      	ldr	r3, [r7, #12]
24003c04:	681b      	ldr	r3, [r3, #0]
24003c06:	f042 0201 	orr.w	r2, r2, #1
24003c0a:	601a      	str	r2, [r3, #0]
24003c0c:	e012      	b.n	24003c34 <HAL_DMA_Start+0x1f4>
24003c0e:	68fb      	ldr	r3, [r7, #12]
24003c10:	681b      	ldr	r3, [r3, #0]
24003c12:	681a      	ldr	r2, [r3, #0]
24003c14:	68fb      	ldr	r3, [r7, #12]
24003c16:	681b      	ldr	r3, [r3, #0]
24003c18:	f042 0201 	orr.w	r2, r2, #1
24003c1c:	601a      	str	r2, [r3, #0]
24003c1e:	e009      	b.n	24003c34 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24003c20:	68fb      	ldr	r3, [r7, #12]
24003c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
24003c26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24003c28:	68fb      	ldr	r3, [r7, #12]
24003c2a:	2200      	movs	r2, #0
24003c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24003c30:	2301      	movs	r3, #1
24003c32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24003c34:	7dfb      	ldrb	r3, [r7, #23]
}
24003c36:	4618      	mov	r0, r3
24003c38:	3718      	adds	r7, #24
24003c3a:	46bd      	mov	sp, r7
24003c3c:	bd80      	pop	{r7, pc}
24003c3e:	bf00      	nop
24003c40:	40020010 	.word	0x40020010
24003c44:	40020028 	.word	0x40020028
24003c48:	40020040 	.word	0x40020040
24003c4c:	40020058 	.word	0x40020058
24003c50:	40020070 	.word	0x40020070
24003c54:	40020088 	.word	0x40020088
24003c58:	400200a0 	.word	0x400200a0
24003c5c:	400200b8 	.word	0x400200b8
24003c60:	40020410 	.word	0x40020410
24003c64:	40020428 	.word	0x40020428
24003c68:	40020440 	.word	0x40020440
24003c6c:	40020458 	.word	0x40020458
24003c70:	40020470 	.word	0x40020470
24003c74:	40020488 	.word	0x40020488
24003c78:	400204a0 	.word	0x400204a0
24003c7c:	400204b8 	.word	0x400204b8

24003c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003c80:	b580      	push	{r7, lr}
24003c82:	b086      	sub	sp, #24
24003c84:	af00      	add	r7, sp, #0
24003c86:	60f8      	str	r0, [r7, #12]
24003c88:	60b9      	str	r1, [r7, #8]
24003c8a:	607a      	str	r2, [r7, #4]
24003c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003c8e:	2300      	movs	r3, #0
24003c90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003c92:	68fb      	ldr	r3, [r7, #12]
24003c94:	2b00      	cmp	r3, #0
24003c96:	d101      	bne.n	24003c9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24003c98:	2301      	movs	r3, #1
24003c9a:	e226      	b.n	240040ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003c9c:	68fb      	ldr	r3, [r7, #12]
24003c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003ca2:	2b01      	cmp	r3, #1
24003ca4:	d101      	bne.n	24003caa <HAL_DMA_Start_IT+0x2a>
24003ca6:	2302      	movs	r3, #2
24003ca8:	e21f      	b.n	240040ea <HAL_DMA_Start_IT+0x46a>
24003caa:	68fb      	ldr	r3, [r7, #12]
24003cac:	2201      	movs	r2, #1
24003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003cb2:	68fb      	ldr	r3, [r7, #12]
24003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003cb8:	b2db      	uxtb	r3, r3
24003cba:	2b01      	cmp	r3, #1
24003cbc:	f040 820a 	bne.w	240040d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003cc0:	68fb      	ldr	r3, [r7, #12]
24003cc2:	2202      	movs	r2, #2
24003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003cc8:	68fb      	ldr	r3, [r7, #12]
24003cca:	2200      	movs	r2, #0
24003ccc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003cce:	68fb      	ldr	r3, [r7, #12]
24003cd0:	681b      	ldr	r3, [r3, #0]
24003cd2:	4a68      	ldr	r2, [pc, #416]	; (24003e74 <HAL_DMA_Start_IT+0x1f4>)
24003cd4:	4293      	cmp	r3, r2
24003cd6:	d04a      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003cd8:	68fb      	ldr	r3, [r7, #12]
24003cda:	681b      	ldr	r3, [r3, #0]
24003cdc:	4a66      	ldr	r2, [pc, #408]	; (24003e78 <HAL_DMA_Start_IT+0x1f8>)
24003cde:	4293      	cmp	r3, r2
24003ce0:	d045      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003ce2:	68fb      	ldr	r3, [r7, #12]
24003ce4:	681b      	ldr	r3, [r3, #0]
24003ce6:	4a65      	ldr	r2, [pc, #404]	; (24003e7c <HAL_DMA_Start_IT+0x1fc>)
24003ce8:	4293      	cmp	r3, r2
24003cea:	d040      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003cec:	68fb      	ldr	r3, [r7, #12]
24003cee:	681b      	ldr	r3, [r3, #0]
24003cf0:	4a63      	ldr	r2, [pc, #396]	; (24003e80 <HAL_DMA_Start_IT+0x200>)
24003cf2:	4293      	cmp	r3, r2
24003cf4:	d03b      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003cf6:	68fb      	ldr	r3, [r7, #12]
24003cf8:	681b      	ldr	r3, [r3, #0]
24003cfa:	4a62      	ldr	r2, [pc, #392]	; (24003e84 <HAL_DMA_Start_IT+0x204>)
24003cfc:	4293      	cmp	r3, r2
24003cfe:	d036      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d00:	68fb      	ldr	r3, [r7, #12]
24003d02:	681b      	ldr	r3, [r3, #0]
24003d04:	4a60      	ldr	r2, [pc, #384]	; (24003e88 <HAL_DMA_Start_IT+0x208>)
24003d06:	4293      	cmp	r3, r2
24003d08:	d031      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d0a:	68fb      	ldr	r3, [r7, #12]
24003d0c:	681b      	ldr	r3, [r3, #0]
24003d0e:	4a5f      	ldr	r2, [pc, #380]	; (24003e8c <HAL_DMA_Start_IT+0x20c>)
24003d10:	4293      	cmp	r3, r2
24003d12:	d02c      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d14:	68fb      	ldr	r3, [r7, #12]
24003d16:	681b      	ldr	r3, [r3, #0]
24003d18:	4a5d      	ldr	r2, [pc, #372]	; (24003e90 <HAL_DMA_Start_IT+0x210>)
24003d1a:	4293      	cmp	r3, r2
24003d1c:	d027      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d1e:	68fb      	ldr	r3, [r7, #12]
24003d20:	681b      	ldr	r3, [r3, #0]
24003d22:	4a5c      	ldr	r2, [pc, #368]	; (24003e94 <HAL_DMA_Start_IT+0x214>)
24003d24:	4293      	cmp	r3, r2
24003d26:	d022      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d28:	68fb      	ldr	r3, [r7, #12]
24003d2a:	681b      	ldr	r3, [r3, #0]
24003d2c:	4a5a      	ldr	r2, [pc, #360]	; (24003e98 <HAL_DMA_Start_IT+0x218>)
24003d2e:	4293      	cmp	r3, r2
24003d30:	d01d      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d32:	68fb      	ldr	r3, [r7, #12]
24003d34:	681b      	ldr	r3, [r3, #0]
24003d36:	4a59      	ldr	r2, [pc, #356]	; (24003e9c <HAL_DMA_Start_IT+0x21c>)
24003d38:	4293      	cmp	r3, r2
24003d3a:	d018      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d3c:	68fb      	ldr	r3, [r7, #12]
24003d3e:	681b      	ldr	r3, [r3, #0]
24003d40:	4a57      	ldr	r2, [pc, #348]	; (24003ea0 <HAL_DMA_Start_IT+0x220>)
24003d42:	4293      	cmp	r3, r2
24003d44:	d013      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d46:	68fb      	ldr	r3, [r7, #12]
24003d48:	681b      	ldr	r3, [r3, #0]
24003d4a:	4a56      	ldr	r2, [pc, #344]	; (24003ea4 <HAL_DMA_Start_IT+0x224>)
24003d4c:	4293      	cmp	r3, r2
24003d4e:	d00e      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d50:	68fb      	ldr	r3, [r7, #12]
24003d52:	681b      	ldr	r3, [r3, #0]
24003d54:	4a54      	ldr	r2, [pc, #336]	; (24003ea8 <HAL_DMA_Start_IT+0x228>)
24003d56:	4293      	cmp	r3, r2
24003d58:	d009      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d5a:	68fb      	ldr	r3, [r7, #12]
24003d5c:	681b      	ldr	r3, [r3, #0]
24003d5e:	4a53      	ldr	r2, [pc, #332]	; (24003eac <HAL_DMA_Start_IT+0x22c>)
24003d60:	4293      	cmp	r3, r2
24003d62:	d004      	beq.n	24003d6e <HAL_DMA_Start_IT+0xee>
24003d64:	68fb      	ldr	r3, [r7, #12]
24003d66:	681b      	ldr	r3, [r3, #0]
24003d68:	4a51      	ldr	r2, [pc, #324]	; (24003eb0 <HAL_DMA_Start_IT+0x230>)
24003d6a:	4293      	cmp	r3, r2
24003d6c:	d108      	bne.n	24003d80 <HAL_DMA_Start_IT+0x100>
24003d6e:	68fb      	ldr	r3, [r7, #12]
24003d70:	681b      	ldr	r3, [r3, #0]
24003d72:	681a      	ldr	r2, [r3, #0]
24003d74:	68fb      	ldr	r3, [r7, #12]
24003d76:	681b      	ldr	r3, [r3, #0]
24003d78:	f022 0201 	bic.w	r2, r2, #1
24003d7c:	601a      	str	r2, [r3, #0]
24003d7e:	e007      	b.n	24003d90 <HAL_DMA_Start_IT+0x110>
24003d80:	68fb      	ldr	r3, [r7, #12]
24003d82:	681b      	ldr	r3, [r3, #0]
24003d84:	681a      	ldr	r2, [r3, #0]
24003d86:	68fb      	ldr	r3, [r7, #12]
24003d88:	681b      	ldr	r3, [r3, #0]
24003d8a:	f022 0201 	bic.w	r2, r2, #1
24003d8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003d90:	683b      	ldr	r3, [r7, #0]
24003d92:	687a      	ldr	r2, [r7, #4]
24003d94:	68b9      	ldr	r1, [r7, #8]
24003d96:	68f8      	ldr	r0, [r7, #12]
24003d98:	f002 faf6 	bl	24006388 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003d9c:	68fb      	ldr	r3, [r7, #12]
24003d9e:	681b      	ldr	r3, [r3, #0]
24003da0:	4a34      	ldr	r2, [pc, #208]	; (24003e74 <HAL_DMA_Start_IT+0x1f4>)
24003da2:	4293      	cmp	r3, r2
24003da4:	d04a      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003da6:	68fb      	ldr	r3, [r7, #12]
24003da8:	681b      	ldr	r3, [r3, #0]
24003daa:	4a33      	ldr	r2, [pc, #204]	; (24003e78 <HAL_DMA_Start_IT+0x1f8>)
24003dac:	4293      	cmp	r3, r2
24003dae:	d045      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003db0:	68fb      	ldr	r3, [r7, #12]
24003db2:	681b      	ldr	r3, [r3, #0]
24003db4:	4a31      	ldr	r2, [pc, #196]	; (24003e7c <HAL_DMA_Start_IT+0x1fc>)
24003db6:	4293      	cmp	r3, r2
24003db8:	d040      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003dba:	68fb      	ldr	r3, [r7, #12]
24003dbc:	681b      	ldr	r3, [r3, #0]
24003dbe:	4a30      	ldr	r2, [pc, #192]	; (24003e80 <HAL_DMA_Start_IT+0x200>)
24003dc0:	4293      	cmp	r3, r2
24003dc2:	d03b      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003dc4:	68fb      	ldr	r3, [r7, #12]
24003dc6:	681b      	ldr	r3, [r3, #0]
24003dc8:	4a2e      	ldr	r2, [pc, #184]	; (24003e84 <HAL_DMA_Start_IT+0x204>)
24003dca:	4293      	cmp	r3, r2
24003dcc:	d036      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003dce:	68fb      	ldr	r3, [r7, #12]
24003dd0:	681b      	ldr	r3, [r3, #0]
24003dd2:	4a2d      	ldr	r2, [pc, #180]	; (24003e88 <HAL_DMA_Start_IT+0x208>)
24003dd4:	4293      	cmp	r3, r2
24003dd6:	d031      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003dd8:	68fb      	ldr	r3, [r7, #12]
24003dda:	681b      	ldr	r3, [r3, #0]
24003ddc:	4a2b      	ldr	r2, [pc, #172]	; (24003e8c <HAL_DMA_Start_IT+0x20c>)
24003dde:	4293      	cmp	r3, r2
24003de0:	d02c      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003de2:	68fb      	ldr	r3, [r7, #12]
24003de4:	681b      	ldr	r3, [r3, #0]
24003de6:	4a2a      	ldr	r2, [pc, #168]	; (24003e90 <HAL_DMA_Start_IT+0x210>)
24003de8:	4293      	cmp	r3, r2
24003dea:	d027      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003dec:	68fb      	ldr	r3, [r7, #12]
24003dee:	681b      	ldr	r3, [r3, #0]
24003df0:	4a28      	ldr	r2, [pc, #160]	; (24003e94 <HAL_DMA_Start_IT+0x214>)
24003df2:	4293      	cmp	r3, r2
24003df4:	d022      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003df6:	68fb      	ldr	r3, [r7, #12]
24003df8:	681b      	ldr	r3, [r3, #0]
24003dfa:	4a27      	ldr	r2, [pc, #156]	; (24003e98 <HAL_DMA_Start_IT+0x218>)
24003dfc:	4293      	cmp	r3, r2
24003dfe:	d01d      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e00:	68fb      	ldr	r3, [r7, #12]
24003e02:	681b      	ldr	r3, [r3, #0]
24003e04:	4a25      	ldr	r2, [pc, #148]	; (24003e9c <HAL_DMA_Start_IT+0x21c>)
24003e06:	4293      	cmp	r3, r2
24003e08:	d018      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e0a:	68fb      	ldr	r3, [r7, #12]
24003e0c:	681b      	ldr	r3, [r3, #0]
24003e0e:	4a24      	ldr	r2, [pc, #144]	; (24003ea0 <HAL_DMA_Start_IT+0x220>)
24003e10:	4293      	cmp	r3, r2
24003e12:	d013      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e14:	68fb      	ldr	r3, [r7, #12]
24003e16:	681b      	ldr	r3, [r3, #0]
24003e18:	4a22      	ldr	r2, [pc, #136]	; (24003ea4 <HAL_DMA_Start_IT+0x224>)
24003e1a:	4293      	cmp	r3, r2
24003e1c:	d00e      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e1e:	68fb      	ldr	r3, [r7, #12]
24003e20:	681b      	ldr	r3, [r3, #0]
24003e22:	4a21      	ldr	r2, [pc, #132]	; (24003ea8 <HAL_DMA_Start_IT+0x228>)
24003e24:	4293      	cmp	r3, r2
24003e26:	d009      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e28:	68fb      	ldr	r3, [r7, #12]
24003e2a:	681b      	ldr	r3, [r3, #0]
24003e2c:	4a1f      	ldr	r2, [pc, #124]	; (24003eac <HAL_DMA_Start_IT+0x22c>)
24003e2e:	4293      	cmp	r3, r2
24003e30:	d004      	beq.n	24003e3c <HAL_DMA_Start_IT+0x1bc>
24003e32:	68fb      	ldr	r3, [r7, #12]
24003e34:	681b      	ldr	r3, [r3, #0]
24003e36:	4a1e      	ldr	r2, [pc, #120]	; (24003eb0 <HAL_DMA_Start_IT+0x230>)
24003e38:	4293      	cmp	r3, r2
24003e3a:	d101      	bne.n	24003e40 <HAL_DMA_Start_IT+0x1c0>
24003e3c:	2301      	movs	r3, #1
24003e3e:	e000      	b.n	24003e42 <HAL_DMA_Start_IT+0x1c2>
24003e40:	2300      	movs	r3, #0
24003e42:	2b00      	cmp	r3, #0
24003e44:	d036      	beq.n	24003eb4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24003e46:	68fb      	ldr	r3, [r7, #12]
24003e48:	681b      	ldr	r3, [r3, #0]
24003e4a:	681b      	ldr	r3, [r3, #0]
24003e4c:	f023 021e 	bic.w	r2, r3, #30
24003e50:	68fb      	ldr	r3, [r7, #12]
24003e52:	681b      	ldr	r3, [r3, #0]
24003e54:	f042 0216 	orr.w	r2, r2, #22
24003e58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003e5a:	68fb      	ldr	r3, [r7, #12]
24003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003e5e:	2b00      	cmp	r3, #0
24003e60:	d03e      	beq.n	24003ee0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24003e62:	68fb      	ldr	r3, [r7, #12]
24003e64:	681b      	ldr	r3, [r3, #0]
24003e66:	681a      	ldr	r2, [r3, #0]
24003e68:	68fb      	ldr	r3, [r7, #12]
24003e6a:	681b      	ldr	r3, [r3, #0]
24003e6c:	f042 0208 	orr.w	r2, r2, #8
24003e70:	601a      	str	r2, [r3, #0]
24003e72:	e035      	b.n	24003ee0 <HAL_DMA_Start_IT+0x260>
24003e74:	40020010 	.word	0x40020010
24003e78:	40020028 	.word	0x40020028
24003e7c:	40020040 	.word	0x40020040
24003e80:	40020058 	.word	0x40020058
24003e84:	40020070 	.word	0x40020070
24003e88:	40020088 	.word	0x40020088
24003e8c:	400200a0 	.word	0x400200a0
24003e90:	400200b8 	.word	0x400200b8
24003e94:	40020410 	.word	0x40020410
24003e98:	40020428 	.word	0x40020428
24003e9c:	40020440 	.word	0x40020440
24003ea0:	40020458 	.word	0x40020458
24003ea4:	40020470 	.word	0x40020470
24003ea8:	40020488 	.word	0x40020488
24003eac:	400204a0 	.word	0x400204a0
24003eb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24003eb4:	68fb      	ldr	r3, [r7, #12]
24003eb6:	681b      	ldr	r3, [r3, #0]
24003eb8:	681b      	ldr	r3, [r3, #0]
24003eba:	f023 020e 	bic.w	r2, r3, #14
24003ebe:	68fb      	ldr	r3, [r7, #12]
24003ec0:	681b      	ldr	r3, [r3, #0]
24003ec2:	f042 020a 	orr.w	r2, r2, #10
24003ec6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003ec8:	68fb      	ldr	r3, [r7, #12]
24003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003ecc:	2b00      	cmp	r3, #0
24003ece:	d007      	beq.n	24003ee0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24003ed0:	68fb      	ldr	r3, [r7, #12]
24003ed2:	681b      	ldr	r3, [r3, #0]
24003ed4:	681a      	ldr	r2, [r3, #0]
24003ed6:	68fb      	ldr	r3, [r7, #12]
24003ed8:	681b      	ldr	r3, [r3, #0]
24003eda:	f042 0204 	orr.w	r2, r2, #4
24003ede:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003ee0:	68fb      	ldr	r3, [r7, #12]
24003ee2:	681b      	ldr	r3, [r3, #0]
24003ee4:	4a83      	ldr	r2, [pc, #524]	; (240040f4 <HAL_DMA_Start_IT+0x474>)
24003ee6:	4293      	cmp	r3, r2
24003ee8:	d072      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003eea:	68fb      	ldr	r3, [r7, #12]
24003eec:	681b      	ldr	r3, [r3, #0]
24003eee:	4a82      	ldr	r2, [pc, #520]	; (240040f8 <HAL_DMA_Start_IT+0x478>)
24003ef0:	4293      	cmp	r3, r2
24003ef2:	d06d      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003ef4:	68fb      	ldr	r3, [r7, #12]
24003ef6:	681b      	ldr	r3, [r3, #0]
24003ef8:	4a80      	ldr	r2, [pc, #512]	; (240040fc <HAL_DMA_Start_IT+0x47c>)
24003efa:	4293      	cmp	r3, r2
24003efc:	d068      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003efe:	68fb      	ldr	r3, [r7, #12]
24003f00:	681b      	ldr	r3, [r3, #0]
24003f02:	4a7f      	ldr	r2, [pc, #508]	; (24004100 <HAL_DMA_Start_IT+0x480>)
24003f04:	4293      	cmp	r3, r2
24003f06:	d063      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f08:	68fb      	ldr	r3, [r7, #12]
24003f0a:	681b      	ldr	r3, [r3, #0]
24003f0c:	4a7d      	ldr	r2, [pc, #500]	; (24004104 <HAL_DMA_Start_IT+0x484>)
24003f0e:	4293      	cmp	r3, r2
24003f10:	d05e      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f12:	68fb      	ldr	r3, [r7, #12]
24003f14:	681b      	ldr	r3, [r3, #0]
24003f16:	4a7c      	ldr	r2, [pc, #496]	; (24004108 <HAL_DMA_Start_IT+0x488>)
24003f18:	4293      	cmp	r3, r2
24003f1a:	d059      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f1c:	68fb      	ldr	r3, [r7, #12]
24003f1e:	681b      	ldr	r3, [r3, #0]
24003f20:	4a7a      	ldr	r2, [pc, #488]	; (2400410c <HAL_DMA_Start_IT+0x48c>)
24003f22:	4293      	cmp	r3, r2
24003f24:	d054      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f26:	68fb      	ldr	r3, [r7, #12]
24003f28:	681b      	ldr	r3, [r3, #0]
24003f2a:	4a79      	ldr	r2, [pc, #484]	; (24004110 <HAL_DMA_Start_IT+0x490>)
24003f2c:	4293      	cmp	r3, r2
24003f2e:	d04f      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f30:	68fb      	ldr	r3, [r7, #12]
24003f32:	681b      	ldr	r3, [r3, #0]
24003f34:	4a77      	ldr	r2, [pc, #476]	; (24004114 <HAL_DMA_Start_IT+0x494>)
24003f36:	4293      	cmp	r3, r2
24003f38:	d04a      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f3a:	68fb      	ldr	r3, [r7, #12]
24003f3c:	681b      	ldr	r3, [r3, #0]
24003f3e:	4a76      	ldr	r2, [pc, #472]	; (24004118 <HAL_DMA_Start_IT+0x498>)
24003f40:	4293      	cmp	r3, r2
24003f42:	d045      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f44:	68fb      	ldr	r3, [r7, #12]
24003f46:	681b      	ldr	r3, [r3, #0]
24003f48:	4a74      	ldr	r2, [pc, #464]	; (2400411c <HAL_DMA_Start_IT+0x49c>)
24003f4a:	4293      	cmp	r3, r2
24003f4c:	d040      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f4e:	68fb      	ldr	r3, [r7, #12]
24003f50:	681b      	ldr	r3, [r3, #0]
24003f52:	4a73      	ldr	r2, [pc, #460]	; (24004120 <HAL_DMA_Start_IT+0x4a0>)
24003f54:	4293      	cmp	r3, r2
24003f56:	d03b      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f58:	68fb      	ldr	r3, [r7, #12]
24003f5a:	681b      	ldr	r3, [r3, #0]
24003f5c:	4a71      	ldr	r2, [pc, #452]	; (24004124 <HAL_DMA_Start_IT+0x4a4>)
24003f5e:	4293      	cmp	r3, r2
24003f60:	d036      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f62:	68fb      	ldr	r3, [r7, #12]
24003f64:	681b      	ldr	r3, [r3, #0]
24003f66:	4a70      	ldr	r2, [pc, #448]	; (24004128 <HAL_DMA_Start_IT+0x4a8>)
24003f68:	4293      	cmp	r3, r2
24003f6a:	d031      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f6c:	68fb      	ldr	r3, [r7, #12]
24003f6e:	681b      	ldr	r3, [r3, #0]
24003f70:	4a6e      	ldr	r2, [pc, #440]	; (2400412c <HAL_DMA_Start_IT+0x4ac>)
24003f72:	4293      	cmp	r3, r2
24003f74:	d02c      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f76:	68fb      	ldr	r3, [r7, #12]
24003f78:	681b      	ldr	r3, [r3, #0]
24003f7a:	4a6d      	ldr	r2, [pc, #436]	; (24004130 <HAL_DMA_Start_IT+0x4b0>)
24003f7c:	4293      	cmp	r3, r2
24003f7e:	d027      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f80:	68fb      	ldr	r3, [r7, #12]
24003f82:	681b      	ldr	r3, [r3, #0]
24003f84:	4a6b      	ldr	r2, [pc, #428]	; (24004134 <HAL_DMA_Start_IT+0x4b4>)
24003f86:	4293      	cmp	r3, r2
24003f88:	d022      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f8a:	68fb      	ldr	r3, [r7, #12]
24003f8c:	681b      	ldr	r3, [r3, #0]
24003f8e:	4a6a      	ldr	r2, [pc, #424]	; (24004138 <HAL_DMA_Start_IT+0x4b8>)
24003f90:	4293      	cmp	r3, r2
24003f92:	d01d      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f94:	68fb      	ldr	r3, [r7, #12]
24003f96:	681b      	ldr	r3, [r3, #0]
24003f98:	4a68      	ldr	r2, [pc, #416]	; (2400413c <HAL_DMA_Start_IT+0x4bc>)
24003f9a:	4293      	cmp	r3, r2
24003f9c:	d018      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003f9e:	68fb      	ldr	r3, [r7, #12]
24003fa0:	681b      	ldr	r3, [r3, #0]
24003fa2:	4a67      	ldr	r2, [pc, #412]	; (24004140 <HAL_DMA_Start_IT+0x4c0>)
24003fa4:	4293      	cmp	r3, r2
24003fa6:	d013      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003fa8:	68fb      	ldr	r3, [r7, #12]
24003faa:	681b      	ldr	r3, [r3, #0]
24003fac:	4a65      	ldr	r2, [pc, #404]	; (24004144 <HAL_DMA_Start_IT+0x4c4>)
24003fae:	4293      	cmp	r3, r2
24003fb0:	d00e      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003fb2:	68fb      	ldr	r3, [r7, #12]
24003fb4:	681b      	ldr	r3, [r3, #0]
24003fb6:	4a64      	ldr	r2, [pc, #400]	; (24004148 <HAL_DMA_Start_IT+0x4c8>)
24003fb8:	4293      	cmp	r3, r2
24003fba:	d009      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003fbc:	68fb      	ldr	r3, [r7, #12]
24003fbe:	681b      	ldr	r3, [r3, #0]
24003fc0:	4a62      	ldr	r2, [pc, #392]	; (2400414c <HAL_DMA_Start_IT+0x4cc>)
24003fc2:	4293      	cmp	r3, r2
24003fc4:	d004      	beq.n	24003fd0 <HAL_DMA_Start_IT+0x350>
24003fc6:	68fb      	ldr	r3, [r7, #12]
24003fc8:	681b      	ldr	r3, [r3, #0]
24003fca:	4a61      	ldr	r2, [pc, #388]	; (24004150 <HAL_DMA_Start_IT+0x4d0>)
24003fcc:	4293      	cmp	r3, r2
24003fce:	d101      	bne.n	24003fd4 <HAL_DMA_Start_IT+0x354>
24003fd0:	2301      	movs	r3, #1
24003fd2:	e000      	b.n	24003fd6 <HAL_DMA_Start_IT+0x356>
24003fd4:	2300      	movs	r3, #0
24003fd6:	2b00      	cmp	r3, #0
24003fd8:	d01a      	beq.n	24004010 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24003fda:	68fb      	ldr	r3, [r7, #12]
24003fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003fde:	681b      	ldr	r3, [r3, #0]
24003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24003fe4:	2b00      	cmp	r3, #0
24003fe6:	d007      	beq.n	24003ff8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24003fe8:	68fb      	ldr	r3, [r7, #12]
24003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003fec:	681a      	ldr	r2, [r3, #0]
24003fee:	68fb      	ldr	r3, [r7, #12]
24003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24003ff6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24003ff8:	68fb      	ldr	r3, [r7, #12]
24003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003ffc:	2b00      	cmp	r3, #0
24003ffe:	d007      	beq.n	24004010 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24004000:	68fb      	ldr	r3, [r7, #12]
24004002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004004:	681a      	ldr	r2, [r3, #0]
24004006:	68fb      	ldr	r3, [r7, #12]
24004008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400400a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400400e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24004010:	68fb      	ldr	r3, [r7, #12]
24004012:	681b      	ldr	r3, [r3, #0]
24004014:	4a37      	ldr	r2, [pc, #220]	; (240040f4 <HAL_DMA_Start_IT+0x474>)
24004016:	4293      	cmp	r3, r2
24004018:	d04a      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400401a:	68fb      	ldr	r3, [r7, #12]
2400401c:	681b      	ldr	r3, [r3, #0]
2400401e:	4a36      	ldr	r2, [pc, #216]	; (240040f8 <HAL_DMA_Start_IT+0x478>)
24004020:	4293      	cmp	r3, r2
24004022:	d045      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004024:	68fb      	ldr	r3, [r7, #12]
24004026:	681b      	ldr	r3, [r3, #0]
24004028:	4a34      	ldr	r2, [pc, #208]	; (240040fc <HAL_DMA_Start_IT+0x47c>)
2400402a:	4293      	cmp	r3, r2
2400402c:	d040      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400402e:	68fb      	ldr	r3, [r7, #12]
24004030:	681b      	ldr	r3, [r3, #0]
24004032:	4a33      	ldr	r2, [pc, #204]	; (24004100 <HAL_DMA_Start_IT+0x480>)
24004034:	4293      	cmp	r3, r2
24004036:	d03b      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004038:	68fb      	ldr	r3, [r7, #12]
2400403a:	681b      	ldr	r3, [r3, #0]
2400403c:	4a31      	ldr	r2, [pc, #196]	; (24004104 <HAL_DMA_Start_IT+0x484>)
2400403e:	4293      	cmp	r3, r2
24004040:	d036      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004042:	68fb      	ldr	r3, [r7, #12]
24004044:	681b      	ldr	r3, [r3, #0]
24004046:	4a30      	ldr	r2, [pc, #192]	; (24004108 <HAL_DMA_Start_IT+0x488>)
24004048:	4293      	cmp	r3, r2
2400404a:	d031      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400404c:	68fb      	ldr	r3, [r7, #12]
2400404e:	681b      	ldr	r3, [r3, #0]
24004050:	4a2e      	ldr	r2, [pc, #184]	; (2400410c <HAL_DMA_Start_IT+0x48c>)
24004052:	4293      	cmp	r3, r2
24004054:	d02c      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004056:	68fb      	ldr	r3, [r7, #12]
24004058:	681b      	ldr	r3, [r3, #0]
2400405a:	4a2d      	ldr	r2, [pc, #180]	; (24004110 <HAL_DMA_Start_IT+0x490>)
2400405c:	4293      	cmp	r3, r2
2400405e:	d027      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004060:	68fb      	ldr	r3, [r7, #12]
24004062:	681b      	ldr	r3, [r3, #0]
24004064:	4a2b      	ldr	r2, [pc, #172]	; (24004114 <HAL_DMA_Start_IT+0x494>)
24004066:	4293      	cmp	r3, r2
24004068:	d022      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400406a:	68fb      	ldr	r3, [r7, #12]
2400406c:	681b      	ldr	r3, [r3, #0]
2400406e:	4a2a      	ldr	r2, [pc, #168]	; (24004118 <HAL_DMA_Start_IT+0x498>)
24004070:	4293      	cmp	r3, r2
24004072:	d01d      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004074:	68fb      	ldr	r3, [r7, #12]
24004076:	681b      	ldr	r3, [r3, #0]
24004078:	4a28      	ldr	r2, [pc, #160]	; (2400411c <HAL_DMA_Start_IT+0x49c>)
2400407a:	4293      	cmp	r3, r2
2400407c:	d018      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400407e:	68fb      	ldr	r3, [r7, #12]
24004080:	681b      	ldr	r3, [r3, #0]
24004082:	4a27      	ldr	r2, [pc, #156]	; (24004120 <HAL_DMA_Start_IT+0x4a0>)
24004084:	4293      	cmp	r3, r2
24004086:	d013      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004088:	68fb      	ldr	r3, [r7, #12]
2400408a:	681b      	ldr	r3, [r3, #0]
2400408c:	4a25      	ldr	r2, [pc, #148]	; (24004124 <HAL_DMA_Start_IT+0x4a4>)
2400408e:	4293      	cmp	r3, r2
24004090:	d00e      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
24004092:	68fb      	ldr	r3, [r7, #12]
24004094:	681b      	ldr	r3, [r3, #0]
24004096:	4a24      	ldr	r2, [pc, #144]	; (24004128 <HAL_DMA_Start_IT+0x4a8>)
24004098:	4293      	cmp	r3, r2
2400409a:	d009      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
2400409c:	68fb      	ldr	r3, [r7, #12]
2400409e:	681b      	ldr	r3, [r3, #0]
240040a0:	4a22      	ldr	r2, [pc, #136]	; (2400412c <HAL_DMA_Start_IT+0x4ac>)
240040a2:	4293      	cmp	r3, r2
240040a4:	d004      	beq.n	240040b0 <HAL_DMA_Start_IT+0x430>
240040a6:	68fb      	ldr	r3, [r7, #12]
240040a8:	681b      	ldr	r3, [r3, #0]
240040aa:	4a21      	ldr	r2, [pc, #132]	; (24004130 <HAL_DMA_Start_IT+0x4b0>)
240040ac:	4293      	cmp	r3, r2
240040ae:	d108      	bne.n	240040c2 <HAL_DMA_Start_IT+0x442>
240040b0:	68fb      	ldr	r3, [r7, #12]
240040b2:	681b      	ldr	r3, [r3, #0]
240040b4:	681a      	ldr	r2, [r3, #0]
240040b6:	68fb      	ldr	r3, [r7, #12]
240040b8:	681b      	ldr	r3, [r3, #0]
240040ba:	f042 0201 	orr.w	r2, r2, #1
240040be:	601a      	str	r2, [r3, #0]
240040c0:	e012      	b.n	240040e8 <HAL_DMA_Start_IT+0x468>
240040c2:	68fb      	ldr	r3, [r7, #12]
240040c4:	681b      	ldr	r3, [r3, #0]
240040c6:	681a      	ldr	r2, [r3, #0]
240040c8:	68fb      	ldr	r3, [r7, #12]
240040ca:	681b      	ldr	r3, [r3, #0]
240040cc:	f042 0201 	orr.w	r2, r2, #1
240040d0:	601a      	str	r2, [r3, #0]
240040d2:	e009      	b.n	240040e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240040d4:	68fb      	ldr	r3, [r7, #12]
240040d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
240040da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
240040dc:	68fb      	ldr	r3, [r7, #12]
240040de:	2200      	movs	r2, #0
240040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
240040e4:	2301      	movs	r3, #1
240040e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
240040e8:	7dfb      	ldrb	r3, [r7, #23]
}
240040ea:	4618      	mov	r0, r3
240040ec:	3718      	adds	r7, #24
240040ee:	46bd      	mov	sp, r7
240040f0:	bd80      	pop	{r7, pc}
240040f2:	bf00      	nop
240040f4:	40020010 	.word	0x40020010
240040f8:	40020028 	.word	0x40020028
240040fc:	40020040 	.word	0x40020040
24004100:	40020058 	.word	0x40020058
24004104:	40020070 	.word	0x40020070
24004108:	40020088 	.word	0x40020088
2400410c:	400200a0 	.word	0x400200a0
24004110:	400200b8 	.word	0x400200b8
24004114:	40020410 	.word	0x40020410
24004118:	40020428 	.word	0x40020428
2400411c:	40020440 	.word	0x40020440
24004120:	40020458 	.word	0x40020458
24004124:	40020470 	.word	0x40020470
24004128:	40020488 	.word	0x40020488
2400412c:	400204a0 	.word	0x400204a0
24004130:	400204b8 	.word	0x400204b8
24004134:	58025408 	.word	0x58025408
24004138:	5802541c 	.word	0x5802541c
2400413c:	58025430 	.word	0x58025430
24004140:	58025444 	.word	0x58025444
24004144:	58025458 	.word	0x58025458
24004148:	5802546c 	.word	0x5802546c
2400414c:	58025480 	.word	0x58025480
24004150:	58025494 	.word	0x58025494

24004154 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24004154:	b580      	push	{r7, lr}
24004156:	b086      	sub	sp, #24
24004158:	af00      	add	r7, sp, #0
2400415a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
2400415c:	f7fd fff6 	bl	2400214c <HAL_GetTick>
24004160:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004162:	687b      	ldr	r3, [r7, #4]
24004164:	2b00      	cmp	r3, #0
24004166:	d101      	bne.n	2400416c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24004168:	2301      	movs	r3, #1
2400416a:	e2dc      	b.n	24004726 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400416c:	687b      	ldr	r3, [r7, #4]
2400416e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004172:	b2db      	uxtb	r3, r3
24004174:	2b02      	cmp	r3, #2
24004176:	d008      	beq.n	2400418a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004178:	687b      	ldr	r3, [r7, #4]
2400417a:	2280      	movs	r2, #128	; 0x80
2400417c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2400417e:	687b      	ldr	r3, [r7, #4]
24004180:	2200      	movs	r2, #0
24004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24004186:	2301      	movs	r3, #1
24004188:	e2cd      	b.n	24004726 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400418a:	687b      	ldr	r3, [r7, #4]
2400418c:	681b      	ldr	r3, [r3, #0]
2400418e:	4a76      	ldr	r2, [pc, #472]	; (24004368 <HAL_DMA_Abort+0x214>)
24004190:	4293      	cmp	r3, r2
24004192:	d04a      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
24004194:	687b      	ldr	r3, [r7, #4]
24004196:	681b      	ldr	r3, [r3, #0]
24004198:	4a74      	ldr	r2, [pc, #464]	; (2400436c <HAL_DMA_Abort+0x218>)
2400419a:	4293      	cmp	r3, r2
2400419c:	d045      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
2400419e:	687b      	ldr	r3, [r7, #4]
240041a0:	681b      	ldr	r3, [r3, #0]
240041a2:	4a73      	ldr	r2, [pc, #460]	; (24004370 <HAL_DMA_Abort+0x21c>)
240041a4:	4293      	cmp	r3, r2
240041a6:	d040      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041a8:	687b      	ldr	r3, [r7, #4]
240041aa:	681b      	ldr	r3, [r3, #0]
240041ac:	4a71      	ldr	r2, [pc, #452]	; (24004374 <HAL_DMA_Abort+0x220>)
240041ae:	4293      	cmp	r3, r2
240041b0:	d03b      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041b2:	687b      	ldr	r3, [r7, #4]
240041b4:	681b      	ldr	r3, [r3, #0]
240041b6:	4a70      	ldr	r2, [pc, #448]	; (24004378 <HAL_DMA_Abort+0x224>)
240041b8:	4293      	cmp	r3, r2
240041ba:	d036      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041bc:	687b      	ldr	r3, [r7, #4]
240041be:	681b      	ldr	r3, [r3, #0]
240041c0:	4a6e      	ldr	r2, [pc, #440]	; (2400437c <HAL_DMA_Abort+0x228>)
240041c2:	4293      	cmp	r3, r2
240041c4:	d031      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041c6:	687b      	ldr	r3, [r7, #4]
240041c8:	681b      	ldr	r3, [r3, #0]
240041ca:	4a6d      	ldr	r2, [pc, #436]	; (24004380 <HAL_DMA_Abort+0x22c>)
240041cc:	4293      	cmp	r3, r2
240041ce:	d02c      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041d0:	687b      	ldr	r3, [r7, #4]
240041d2:	681b      	ldr	r3, [r3, #0]
240041d4:	4a6b      	ldr	r2, [pc, #428]	; (24004384 <HAL_DMA_Abort+0x230>)
240041d6:	4293      	cmp	r3, r2
240041d8:	d027      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041da:	687b      	ldr	r3, [r7, #4]
240041dc:	681b      	ldr	r3, [r3, #0]
240041de:	4a6a      	ldr	r2, [pc, #424]	; (24004388 <HAL_DMA_Abort+0x234>)
240041e0:	4293      	cmp	r3, r2
240041e2:	d022      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041e4:	687b      	ldr	r3, [r7, #4]
240041e6:	681b      	ldr	r3, [r3, #0]
240041e8:	4a68      	ldr	r2, [pc, #416]	; (2400438c <HAL_DMA_Abort+0x238>)
240041ea:	4293      	cmp	r3, r2
240041ec:	d01d      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041ee:	687b      	ldr	r3, [r7, #4]
240041f0:	681b      	ldr	r3, [r3, #0]
240041f2:	4a67      	ldr	r2, [pc, #412]	; (24004390 <HAL_DMA_Abort+0x23c>)
240041f4:	4293      	cmp	r3, r2
240041f6:	d018      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
240041f8:	687b      	ldr	r3, [r7, #4]
240041fa:	681b      	ldr	r3, [r3, #0]
240041fc:	4a65      	ldr	r2, [pc, #404]	; (24004394 <HAL_DMA_Abort+0x240>)
240041fe:	4293      	cmp	r3, r2
24004200:	d013      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
24004202:	687b      	ldr	r3, [r7, #4]
24004204:	681b      	ldr	r3, [r3, #0]
24004206:	4a64      	ldr	r2, [pc, #400]	; (24004398 <HAL_DMA_Abort+0x244>)
24004208:	4293      	cmp	r3, r2
2400420a:	d00e      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
2400420c:	687b      	ldr	r3, [r7, #4]
2400420e:	681b      	ldr	r3, [r3, #0]
24004210:	4a62      	ldr	r2, [pc, #392]	; (2400439c <HAL_DMA_Abort+0x248>)
24004212:	4293      	cmp	r3, r2
24004214:	d009      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
24004216:	687b      	ldr	r3, [r7, #4]
24004218:	681b      	ldr	r3, [r3, #0]
2400421a:	4a61      	ldr	r2, [pc, #388]	; (240043a0 <HAL_DMA_Abort+0x24c>)
2400421c:	4293      	cmp	r3, r2
2400421e:	d004      	beq.n	2400422a <HAL_DMA_Abort+0xd6>
24004220:	687b      	ldr	r3, [r7, #4]
24004222:	681b      	ldr	r3, [r3, #0]
24004224:	4a5f      	ldr	r2, [pc, #380]	; (240043a4 <HAL_DMA_Abort+0x250>)
24004226:	4293      	cmp	r3, r2
24004228:	d101      	bne.n	2400422e <HAL_DMA_Abort+0xda>
2400422a:	2301      	movs	r3, #1
2400422c:	e000      	b.n	24004230 <HAL_DMA_Abort+0xdc>
2400422e:	2300      	movs	r3, #0
24004230:	2b00      	cmp	r3, #0
24004232:	d013      	beq.n	2400425c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24004234:	687b      	ldr	r3, [r7, #4]
24004236:	681b      	ldr	r3, [r3, #0]
24004238:	681a      	ldr	r2, [r3, #0]
2400423a:	687b      	ldr	r3, [r7, #4]
2400423c:	681b      	ldr	r3, [r3, #0]
2400423e:	f022 021e 	bic.w	r2, r2, #30
24004242:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24004244:	687b      	ldr	r3, [r7, #4]
24004246:	681b      	ldr	r3, [r3, #0]
24004248:	695a      	ldr	r2, [r3, #20]
2400424a:	687b      	ldr	r3, [r7, #4]
2400424c:	681b      	ldr	r3, [r3, #0]
2400424e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24004252:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24004254:	687b      	ldr	r3, [r7, #4]
24004256:	681b      	ldr	r3, [r3, #0]
24004258:	617b      	str	r3, [r7, #20]
2400425a:	e00a      	b.n	24004272 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400425c:	687b      	ldr	r3, [r7, #4]
2400425e:	681b      	ldr	r3, [r3, #0]
24004260:	681a      	ldr	r2, [r3, #0]
24004262:	687b      	ldr	r3, [r7, #4]
24004264:	681b      	ldr	r3, [r3, #0]
24004266:	f022 020e 	bic.w	r2, r2, #14
2400426a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
2400426c:	687b      	ldr	r3, [r7, #4]
2400426e:	681b      	ldr	r3, [r3, #0]
24004270:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004272:	687b      	ldr	r3, [r7, #4]
24004274:	681b      	ldr	r3, [r3, #0]
24004276:	4a3c      	ldr	r2, [pc, #240]	; (24004368 <HAL_DMA_Abort+0x214>)
24004278:	4293      	cmp	r3, r2
2400427a:	d072      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
2400427c:	687b      	ldr	r3, [r7, #4]
2400427e:	681b      	ldr	r3, [r3, #0]
24004280:	4a3a      	ldr	r2, [pc, #232]	; (2400436c <HAL_DMA_Abort+0x218>)
24004282:	4293      	cmp	r3, r2
24004284:	d06d      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004286:	687b      	ldr	r3, [r7, #4]
24004288:	681b      	ldr	r3, [r3, #0]
2400428a:	4a39      	ldr	r2, [pc, #228]	; (24004370 <HAL_DMA_Abort+0x21c>)
2400428c:	4293      	cmp	r3, r2
2400428e:	d068      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004290:	687b      	ldr	r3, [r7, #4]
24004292:	681b      	ldr	r3, [r3, #0]
24004294:	4a37      	ldr	r2, [pc, #220]	; (24004374 <HAL_DMA_Abort+0x220>)
24004296:	4293      	cmp	r3, r2
24004298:	d063      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
2400429a:	687b      	ldr	r3, [r7, #4]
2400429c:	681b      	ldr	r3, [r3, #0]
2400429e:	4a36      	ldr	r2, [pc, #216]	; (24004378 <HAL_DMA_Abort+0x224>)
240042a0:	4293      	cmp	r3, r2
240042a2:	d05e      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042a4:	687b      	ldr	r3, [r7, #4]
240042a6:	681b      	ldr	r3, [r3, #0]
240042a8:	4a34      	ldr	r2, [pc, #208]	; (2400437c <HAL_DMA_Abort+0x228>)
240042aa:	4293      	cmp	r3, r2
240042ac:	d059      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042ae:	687b      	ldr	r3, [r7, #4]
240042b0:	681b      	ldr	r3, [r3, #0]
240042b2:	4a33      	ldr	r2, [pc, #204]	; (24004380 <HAL_DMA_Abort+0x22c>)
240042b4:	4293      	cmp	r3, r2
240042b6:	d054      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042b8:	687b      	ldr	r3, [r7, #4]
240042ba:	681b      	ldr	r3, [r3, #0]
240042bc:	4a31      	ldr	r2, [pc, #196]	; (24004384 <HAL_DMA_Abort+0x230>)
240042be:	4293      	cmp	r3, r2
240042c0:	d04f      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042c2:	687b      	ldr	r3, [r7, #4]
240042c4:	681b      	ldr	r3, [r3, #0]
240042c6:	4a30      	ldr	r2, [pc, #192]	; (24004388 <HAL_DMA_Abort+0x234>)
240042c8:	4293      	cmp	r3, r2
240042ca:	d04a      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042cc:	687b      	ldr	r3, [r7, #4]
240042ce:	681b      	ldr	r3, [r3, #0]
240042d0:	4a2e      	ldr	r2, [pc, #184]	; (2400438c <HAL_DMA_Abort+0x238>)
240042d2:	4293      	cmp	r3, r2
240042d4:	d045      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042d6:	687b      	ldr	r3, [r7, #4]
240042d8:	681b      	ldr	r3, [r3, #0]
240042da:	4a2d      	ldr	r2, [pc, #180]	; (24004390 <HAL_DMA_Abort+0x23c>)
240042dc:	4293      	cmp	r3, r2
240042de:	d040      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042e0:	687b      	ldr	r3, [r7, #4]
240042e2:	681b      	ldr	r3, [r3, #0]
240042e4:	4a2b      	ldr	r2, [pc, #172]	; (24004394 <HAL_DMA_Abort+0x240>)
240042e6:	4293      	cmp	r3, r2
240042e8:	d03b      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042ea:	687b      	ldr	r3, [r7, #4]
240042ec:	681b      	ldr	r3, [r3, #0]
240042ee:	4a2a      	ldr	r2, [pc, #168]	; (24004398 <HAL_DMA_Abort+0x244>)
240042f0:	4293      	cmp	r3, r2
240042f2:	d036      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042f4:	687b      	ldr	r3, [r7, #4]
240042f6:	681b      	ldr	r3, [r3, #0]
240042f8:	4a28      	ldr	r2, [pc, #160]	; (2400439c <HAL_DMA_Abort+0x248>)
240042fa:	4293      	cmp	r3, r2
240042fc:	d031      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
240042fe:	687b      	ldr	r3, [r7, #4]
24004300:	681b      	ldr	r3, [r3, #0]
24004302:	4a27      	ldr	r2, [pc, #156]	; (240043a0 <HAL_DMA_Abort+0x24c>)
24004304:	4293      	cmp	r3, r2
24004306:	d02c      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004308:	687b      	ldr	r3, [r7, #4]
2400430a:	681b      	ldr	r3, [r3, #0]
2400430c:	4a25      	ldr	r2, [pc, #148]	; (240043a4 <HAL_DMA_Abort+0x250>)
2400430e:	4293      	cmp	r3, r2
24004310:	d027      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004312:	687b      	ldr	r3, [r7, #4]
24004314:	681b      	ldr	r3, [r3, #0]
24004316:	4a24      	ldr	r2, [pc, #144]	; (240043a8 <HAL_DMA_Abort+0x254>)
24004318:	4293      	cmp	r3, r2
2400431a:	d022      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
2400431c:	687b      	ldr	r3, [r7, #4]
2400431e:	681b      	ldr	r3, [r3, #0]
24004320:	4a22      	ldr	r2, [pc, #136]	; (240043ac <HAL_DMA_Abort+0x258>)
24004322:	4293      	cmp	r3, r2
24004324:	d01d      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004326:	687b      	ldr	r3, [r7, #4]
24004328:	681b      	ldr	r3, [r3, #0]
2400432a:	4a21      	ldr	r2, [pc, #132]	; (240043b0 <HAL_DMA_Abort+0x25c>)
2400432c:	4293      	cmp	r3, r2
2400432e:	d018      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004330:	687b      	ldr	r3, [r7, #4]
24004332:	681b      	ldr	r3, [r3, #0]
24004334:	4a1f      	ldr	r2, [pc, #124]	; (240043b4 <HAL_DMA_Abort+0x260>)
24004336:	4293      	cmp	r3, r2
24004338:	d013      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
2400433a:	687b      	ldr	r3, [r7, #4]
2400433c:	681b      	ldr	r3, [r3, #0]
2400433e:	4a1e      	ldr	r2, [pc, #120]	; (240043b8 <HAL_DMA_Abort+0x264>)
24004340:	4293      	cmp	r3, r2
24004342:	d00e      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004344:	687b      	ldr	r3, [r7, #4]
24004346:	681b      	ldr	r3, [r3, #0]
24004348:	4a1c      	ldr	r2, [pc, #112]	; (240043bc <HAL_DMA_Abort+0x268>)
2400434a:	4293      	cmp	r3, r2
2400434c:	d009      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
2400434e:	687b      	ldr	r3, [r7, #4]
24004350:	681b      	ldr	r3, [r3, #0]
24004352:	4a1b      	ldr	r2, [pc, #108]	; (240043c0 <HAL_DMA_Abort+0x26c>)
24004354:	4293      	cmp	r3, r2
24004356:	d004      	beq.n	24004362 <HAL_DMA_Abort+0x20e>
24004358:	687b      	ldr	r3, [r7, #4]
2400435a:	681b      	ldr	r3, [r3, #0]
2400435c:	4a19      	ldr	r2, [pc, #100]	; (240043c4 <HAL_DMA_Abort+0x270>)
2400435e:	4293      	cmp	r3, r2
24004360:	d132      	bne.n	240043c8 <HAL_DMA_Abort+0x274>
24004362:	2301      	movs	r3, #1
24004364:	e031      	b.n	240043ca <HAL_DMA_Abort+0x276>
24004366:	bf00      	nop
24004368:	40020010 	.word	0x40020010
2400436c:	40020028 	.word	0x40020028
24004370:	40020040 	.word	0x40020040
24004374:	40020058 	.word	0x40020058
24004378:	40020070 	.word	0x40020070
2400437c:	40020088 	.word	0x40020088
24004380:	400200a0 	.word	0x400200a0
24004384:	400200b8 	.word	0x400200b8
24004388:	40020410 	.word	0x40020410
2400438c:	40020428 	.word	0x40020428
24004390:	40020440 	.word	0x40020440
24004394:	40020458 	.word	0x40020458
24004398:	40020470 	.word	0x40020470
2400439c:	40020488 	.word	0x40020488
240043a0:	400204a0 	.word	0x400204a0
240043a4:	400204b8 	.word	0x400204b8
240043a8:	58025408 	.word	0x58025408
240043ac:	5802541c 	.word	0x5802541c
240043b0:	58025430 	.word	0x58025430
240043b4:	58025444 	.word	0x58025444
240043b8:	58025458 	.word	0x58025458
240043bc:	5802546c 	.word	0x5802546c
240043c0:	58025480 	.word	0x58025480
240043c4:	58025494 	.word	0x58025494
240043c8:	2300      	movs	r3, #0
240043ca:	2b00      	cmp	r3, #0
240043cc:	d007      	beq.n	240043de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240043ce:	687b      	ldr	r3, [r7, #4]
240043d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240043d2:	681a      	ldr	r2, [r3, #0]
240043d4:	687b      	ldr	r3, [r7, #4]
240043d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240043d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240043dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
240043de:	687b      	ldr	r3, [r7, #4]
240043e0:	681b      	ldr	r3, [r3, #0]
240043e2:	4a6d      	ldr	r2, [pc, #436]	; (24004598 <HAL_DMA_Abort+0x444>)
240043e4:	4293      	cmp	r3, r2
240043e6:	d04a      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
240043e8:	687b      	ldr	r3, [r7, #4]
240043ea:	681b      	ldr	r3, [r3, #0]
240043ec:	4a6b      	ldr	r2, [pc, #428]	; (2400459c <HAL_DMA_Abort+0x448>)
240043ee:	4293      	cmp	r3, r2
240043f0:	d045      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
240043f2:	687b      	ldr	r3, [r7, #4]
240043f4:	681b      	ldr	r3, [r3, #0]
240043f6:	4a6a      	ldr	r2, [pc, #424]	; (240045a0 <HAL_DMA_Abort+0x44c>)
240043f8:	4293      	cmp	r3, r2
240043fa:	d040      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
240043fc:	687b      	ldr	r3, [r7, #4]
240043fe:	681b      	ldr	r3, [r3, #0]
24004400:	4a68      	ldr	r2, [pc, #416]	; (240045a4 <HAL_DMA_Abort+0x450>)
24004402:	4293      	cmp	r3, r2
24004404:	d03b      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004406:	687b      	ldr	r3, [r7, #4]
24004408:	681b      	ldr	r3, [r3, #0]
2400440a:	4a67      	ldr	r2, [pc, #412]	; (240045a8 <HAL_DMA_Abort+0x454>)
2400440c:	4293      	cmp	r3, r2
2400440e:	d036      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004410:	687b      	ldr	r3, [r7, #4]
24004412:	681b      	ldr	r3, [r3, #0]
24004414:	4a65      	ldr	r2, [pc, #404]	; (240045ac <HAL_DMA_Abort+0x458>)
24004416:	4293      	cmp	r3, r2
24004418:	d031      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
2400441a:	687b      	ldr	r3, [r7, #4]
2400441c:	681b      	ldr	r3, [r3, #0]
2400441e:	4a64      	ldr	r2, [pc, #400]	; (240045b0 <HAL_DMA_Abort+0x45c>)
24004420:	4293      	cmp	r3, r2
24004422:	d02c      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004424:	687b      	ldr	r3, [r7, #4]
24004426:	681b      	ldr	r3, [r3, #0]
24004428:	4a62      	ldr	r2, [pc, #392]	; (240045b4 <HAL_DMA_Abort+0x460>)
2400442a:	4293      	cmp	r3, r2
2400442c:	d027      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
2400442e:	687b      	ldr	r3, [r7, #4]
24004430:	681b      	ldr	r3, [r3, #0]
24004432:	4a61      	ldr	r2, [pc, #388]	; (240045b8 <HAL_DMA_Abort+0x464>)
24004434:	4293      	cmp	r3, r2
24004436:	d022      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004438:	687b      	ldr	r3, [r7, #4]
2400443a:	681b      	ldr	r3, [r3, #0]
2400443c:	4a5f      	ldr	r2, [pc, #380]	; (240045bc <HAL_DMA_Abort+0x468>)
2400443e:	4293      	cmp	r3, r2
24004440:	d01d      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004442:	687b      	ldr	r3, [r7, #4]
24004444:	681b      	ldr	r3, [r3, #0]
24004446:	4a5e      	ldr	r2, [pc, #376]	; (240045c0 <HAL_DMA_Abort+0x46c>)
24004448:	4293      	cmp	r3, r2
2400444a:	d018      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
2400444c:	687b      	ldr	r3, [r7, #4]
2400444e:	681b      	ldr	r3, [r3, #0]
24004450:	4a5c      	ldr	r2, [pc, #368]	; (240045c4 <HAL_DMA_Abort+0x470>)
24004452:	4293      	cmp	r3, r2
24004454:	d013      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004456:	687b      	ldr	r3, [r7, #4]
24004458:	681b      	ldr	r3, [r3, #0]
2400445a:	4a5b      	ldr	r2, [pc, #364]	; (240045c8 <HAL_DMA_Abort+0x474>)
2400445c:	4293      	cmp	r3, r2
2400445e:	d00e      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004460:	687b      	ldr	r3, [r7, #4]
24004462:	681b      	ldr	r3, [r3, #0]
24004464:	4a59      	ldr	r2, [pc, #356]	; (240045cc <HAL_DMA_Abort+0x478>)
24004466:	4293      	cmp	r3, r2
24004468:	d009      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
2400446a:	687b      	ldr	r3, [r7, #4]
2400446c:	681b      	ldr	r3, [r3, #0]
2400446e:	4a58      	ldr	r2, [pc, #352]	; (240045d0 <HAL_DMA_Abort+0x47c>)
24004470:	4293      	cmp	r3, r2
24004472:	d004      	beq.n	2400447e <HAL_DMA_Abort+0x32a>
24004474:	687b      	ldr	r3, [r7, #4]
24004476:	681b      	ldr	r3, [r3, #0]
24004478:	4a56      	ldr	r2, [pc, #344]	; (240045d4 <HAL_DMA_Abort+0x480>)
2400447a:	4293      	cmp	r3, r2
2400447c:	d108      	bne.n	24004490 <HAL_DMA_Abort+0x33c>
2400447e:	687b      	ldr	r3, [r7, #4]
24004480:	681b      	ldr	r3, [r3, #0]
24004482:	681a      	ldr	r2, [r3, #0]
24004484:	687b      	ldr	r3, [r7, #4]
24004486:	681b      	ldr	r3, [r3, #0]
24004488:	f022 0201 	bic.w	r2, r2, #1
2400448c:	601a      	str	r2, [r3, #0]
2400448e:	e007      	b.n	240044a0 <HAL_DMA_Abort+0x34c>
24004490:	687b      	ldr	r3, [r7, #4]
24004492:	681b      	ldr	r3, [r3, #0]
24004494:	681a      	ldr	r2, [r3, #0]
24004496:	687b      	ldr	r3, [r7, #4]
24004498:	681b      	ldr	r3, [r3, #0]
2400449a:	f022 0201 	bic.w	r2, r2, #1
2400449e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240044a0:	e013      	b.n	240044ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240044a2:	f7fd fe53 	bl	2400214c <HAL_GetTick>
240044a6:	4602      	mov	r2, r0
240044a8:	693b      	ldr	r3, [r7, #16]
240044aa:	1ad3      	subs	r3, r2, r3
240044ac:	2b05      	cmp	r3, #5
240044ae:	d90c      	bls.n	240044ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240044b0:	687b      	ldr	r3, [r7, #4]
240044b2:	2220      	movs	r2, #32
240044b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
240044b6:	687b      	ldr	r3, [r7, #4]
240044b8:	2203      	movs	r2, #3
240044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
240044be:	687b      	ldr	r3, [r7, #4]
240044c0:	2200      	movs	r2, #0
240044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
240044c6:	2301      	movs	r3, #1
240044c8:	e12d      	b.n	24004726 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240044ca:	697b      	ldr	r3, [r7, #20]
240044cc:	681b      	ldr	r3, [r3, #0]
240044ce:	f003 0301 	and.w	r3, r3, #1
240044d2:	2b00      	cmp	r3, #0
240044d4:	d1e5      	bne.n	240044a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240044d6:	687b      	ldr	r3, [r7, #4]
240044d8:	681b      	ldr	r3, [r3, #0]
240044da:	4a2f      	ldr	r2, [pc, #188]	; (24004598 <HAL_DMA_Abort+0x444>)
240044dc:	4293      	cmp	r3, r2
240044de:	d04a      	beq.n	24004576 <HAL_DMA_Abort+0x422>
240044e0:	687b      	ldr	r3, [r7, #4]
240044e2:	681b      	ldr	r3, [r3, #0]
240044e4:	4a2d      	ldr	r2, [pc, #180]	; (2400459c <HAL_DMA_Abort+0x448>)
240044e6:	4293      	cmp	r3, r2
240044e8:	d045      	beq.n	24004576 <HAL_DMA_Abort+0x422>
240044ea:	687b      	ldr	r3, [r7, #4]
240044ec:	681b      	ldr	r3, [r3, #0]
240044ee:	4a2c      	ldr	r2, [pc, #176]	; (240045a0 <HAL_DMA_Abort+0x44c>)
240044f0:	4293      	cmp	r3, r2
240044f2:	d040      	beq.n	24004576 <HAL_DMA_Abort+0x422>
240044f4:	687b      	ldr	r3, [r7, #4]
240044f6:	681b      	ldr	r3, [r3, #0]
240044f8:	4a2a      	ldr	r2, [pc, #168]	; (240045a4 <HAL_DMA_Abort+0x450>)
240044fa:	4293      	cmp	r3, r2
240044fc:	d03b      	beq.n	24004576 <HAL_DMA_Abort+0x422>
240044fe:	687b      	ldr	r3, [r7, #4]
24004500:	681b      	ldr	r3, [r3, #0]
24004502:	4a29      	ldr	r2, [pc, #164]	; (240045a8 <HAL_DMA_Abort+0x454>)
24004504:	4293      	cmp	r3, r2
24004506:	d036      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004508:	687b      	ldr	r3, [r7, #4]
2400450a:	681b      	ldr	r3, [r3, #0]
2400450c:	4a27      	ldr	r2, [pc, #156]	; (240045ac <HAL_DMA_Abort+0x458>)
2400450e:	4293      	cmp	r3, r2
24004510:	d031      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004512:	687b      	ldr	r3, [r7, #4]
24004514:	681b      	ldr	r3, [r3, #0]
24004516:	4a26      	ldr	r2, [pc, #152]	; (240045b0 <HAL_DMA_Abort+0x45c>)
24004518:	4293      	cmp	r3, r2
2400451a:	d02c      	beq.n	24004576 <HAL_DMA_Abort+0x422>
2400451c:	687b      	ldr	r3, [r7, #4]
2400451e:	681b      	ldr	r3, [r3, #0]
24004520:	4a24      	ldr	r2, [pc, #144]	; (240045b4 <HAL_DMA_Abort+0x460>)
24004522:	4293      	cmp	r3, r2
24004524:	d027      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004526:	687b      	ldr	r3, [r7, #4]
24004528:	681b      	ldr	r3, [r3, #0]
2400452a:	4a23      	ldr	r2, [pc, #140]	; (240045b8 <HAL_DMA_Abort+0x464>)
2400452c:	4293      	cmp	r3, r2
2400452e:	d022      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004530:	687b      	ldr	r3, [r7, #4]
24004532:	681b      	ldr	r3, [r3, #0]
24004534:	4a21      	ldr	r2, [pc, #132]	; (240045bc <HAL_DMA_Abort+0x468>)
24004536:	4293      	cmp	r3, r2
24004538:	d01d      	beq.n	24004576 <HAL_DMA_Abort+0x422>
2400453a:	687b      	ldr	r3, [r7, #4]
2400453c:	681b      	ldr	r3, [r3, #0]
2400453e:	4a20      	ldr	r2, [pc, #128]	; (240045c0 <HAL_DMA_Abort+0x46c>)
24004540:	4293      	cmp	r3, r2
24004542:	d018      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004544:	687b      	ldr	r3, [r7, #4]
24004546:	681b      	ldr	r3, [r3, #0]
24004548:	4a1e      	ldr	r2, [pc, #120]	; (240045c4 <HAL_DMA_Abort+0x470>)
2400454a:	4293      	cmp	r3, r2
2400454c:	d013      	beq.n	24004576 <HAL_DMA_Abort+0x422>
2400454e:	687b      	ldr	r3, [r7, #4]
24004550:	681b      	ldr	r3, [r3, #0]
24004552:	4a1d      	ldr	r2, [pc, #116]	; (240045c8 <HAL_DMA_Abort+0x474>)
24004554:	4293      	cmp	r3, r2
24004556:	d00e      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004558:	687b      	ldr	r3, [r7, #4]
2400455a:	681b      	ldr	r3, [r3, #0]
2400455c:	4a1b      	ldr	r2, [pc, #108]	; (240045cc <HAL_DMA_Abort+0x478>)
2400455e:	4293      	cmp	r3, r2
24004560:	d009      	beq.n	24004576 <HAL_DMA_Abort+0x422>
24004562:	687b      	ldr	r3, [r7, #4]
24004564:	681b      	ldr	r3, [r3, #0]
24004566:	4a1a      	ldr	r2, [pc, #104]	; (240045d0 <HAL_DMA_Abort+0x47c>)
24004568:	4293      	cmp	r3, r2
2400456a:	d004      	beq.n	24004576 <HAL_DMA_Abort+0x422>
2400456c:	687b      	ldr	r3, [r7, #4]
2400456e:	681b      	ldr	r3, [r3, #0]
24004570:	4a18      	ldr	r2, [pc, #96]	; (240045d4 <HAL_DMA_Abort+0x480>)
24004572:	4293      	cmp	r3, r2
24004574:	d101      	bne.n	2400457a <HAL_DMA_Abort+0x426>
24004576:	2301      	movs	r3, #1
24004578:	e000      	b.n	2400457c <HAL_DMA_Abort+0x428>
2400457a:	2300      	movs	r3, #0
2400457c:	2b00      	cmp	r3, #0
2400457e:	d02b      	beq.n	240045d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004580:	687b      	ldr	r3, [r7, #4]
24004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004584:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004586:	687b      	ldr	r3, [r7, #4]
24004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400458a:	f003 031f 	and.w	r3, r3, #31
2400458e:	223f      	movs	r2, #63	; 0x3f
24004590:	409a      	lsls	r2, r3
24004592:	68bb      	ldr	r3, [r7, #8]
24004594:	609a      	str	r2, [r3, #8]
24004596:	e02a      	b.n	240045ee <HAL_DMA_Abort+0x49a>
24004598:	40020010 	.word	0x40020010
2400459c:	40020028 	.word	0x40020028
240045a0:	40020040 	.word	0x40020040
240045a4:	40020058 	.word	0x40020058
240045a8:	40020070 	.word	0x40020070
240045ac:	40020088 	.word	0x40020088
240045b0:	400200a0 	.word	0x400200a0
240045b4:	400200b8 	.word	0x400200b8
240045b8:	40020410 	.word	0x40020410
240045bc:	40020428 	.word	0x40020428
240045c0:	40020440 	.word	0x40020440
240045c4:	40020458 	.word	0x40020458
240045c8:	40020470 	.word	0x40020470
240045cc:	40020488 	.word	0x40020488
240045d0:	400204a0 	.word	0x400204a0
240045d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240045d8:	687b      	ldr	r3, [r7, #4]
240045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240045dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240045de:	687b      	ldr	r3, [r7, #4]
240045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240045e2:	f003 031f 	and.w	r3, r3, #31
240045e6:	2201      	movs	r2, #1
240045e8:	409a      	lsls	r2, r3
240045ea:	68fb      	ldr	r3, [r7, #12]
240045ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240045ee:	687b      	ldr	r3, [r7, #4]
240045f0:	681b      	ldr	r3, [r3, #0]
240045f2:	4a4f      	ldr	r2, [pc, #316]	; (24004730 <HAL_DMA_Abort+0x5dc>)
240045f4:	4293      	cmp	r3, r2
240045f6:	d072      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240045f8:	687b      	ldr	r3, [r7, #4]
240045fa:	681b      	ldr	r3, [r3, #0]
240045fc:	4a4d      	ldr	r2, [pc, #308]	; (24004734 <HAL_DMA_Abort+0x5e0>)
240045fe:	4293      	cmp	r3, r2
24004600:	d06d      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004602:	687b      	ldr	r3, [r7, #4]
24004604:	681b      	ldr	r3, [r3, #0]
24004606:	4a4c      	ldr	r2, [pc, #304]	; (24004738 <HAL_DMA_Abort+0x5e4>)
24004608:	4293      	cmp	r3, r2
2400460a:	d068      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400460c:	687b      	ldr	r3, [r7, #4]
2400460e:	681b      	ldr	r3, [r3, #0]
24004610:	4a4a      	ldr	r2, [pc, #296]	; (2400473c <HAL_DMA_Abort+0x5e8>)
24004612:	4293      	cmp	r3, r2
24004614:	d063      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004616:	687b      	ldr	r3, [r7, #4]
24004618:	681b      	ldr	r3, [r3, #0]
2400461a:	4a49      	ldr	r2, [pc, #292]	; (24004740 <HAL_DMA_Abort+0x5ec>)
2400461c:	4293      	cmp	r3, r2
2400461e:	d05e      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004620:	687b      	ldr	r3, [r7, #4]
24004622:	681b      	ldr	r3, [r3, #0]
24004624:	4a47      	ldr	r2, [pc, #284]	; (24004744 <HAL_DMA_Abort+0x5f0>)
24004626:	4293      	cmp	r3, r2
24004628:	d059      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400462a:	687b      	ldr	r3, [r7, #4]
2400462c:	681b      	ldr	r3, [r3, #0]
2400462e:	4a46      	ldr	r2, [pc, #280]	; (24004748 <HAL_DMA_Abort+0x5f4>)
24004630:	4293      	cmp	r3, r2
24004632:	d054      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004634:	687b      	ldr	r3, [r7, #4]
24004636:	681b      	ldr	r3, [r3, #0]
24004638:	4a44      	ldr	r2, [pc, #272]	; (2400474c <HAL_DMA_Abort+0x5f8>)
2400463a:	4293      	cmp	r3, r2
2400463c:	d04f      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400463e:	687b      	ldr	r3, [r7, #4]
24004640:	681b      	ldr	r3, [r3, #0]
24004642:	4a43      	ldr	r2, [pc, #268]	; (24004750 <HAL_DMA_Abort+0x5fc>)
24004644:	4293      	cmp	r3, r2
24004646:	d04a      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004648:	687b      	ldr	r3, [r7, #4]
2400464a:	681b      	ldr	r3, [r3, #0]
2400464c:	4a41      	ldr	r2, [pc, #260]	; (24004754 <HAL_DMA_Abort+0x600>)
2400464e:	4293      	cmp	r3, r2
24004650:	d045      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004652:	687b      	ldr	r3, [r7, #4]
24004654:	681b      	ldr	r3, [r3, #0]
24004656:	4a40      	ldr	r2, [pc, #256]	; (24004758 <HAL_DMA_Abort+0x604>)
24004658:	4293      	cmp	r3, r2
2400465a:	d040      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400465c:	687b      	ldr	r3, [r7, #4]
2400465e:	681b      	ldr	r3, [r3, #0]
24004660:	4a3e      	ldr	r2, [pc, #248]	; (2400475c <HAL_DMA_Abort+0x608>)
24004662:	4293      	cmp	r3, r2
24004664:	d03b      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004666:	687b      	ldr	r3, [r7, #4]
24004668:	681b      	ldr	r3, [r3, #0]
2400466a:	4a3d      	ldr	r2, [pc, #244]	; (24004760 <HAL_DMA_Abort+0x60c>)
2400466c:	4293      	cmp	r3, r2
2400466e:	d036      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004670:	687b      	ldr	r3, [r7, #4]
24004672:	681b      	ldr	r3, [r3, #0]
24004674:	4a3b      	ldr	r2, [pc, #236]	; (24004764 <HAL_DMA_Abort+0x610>)
24004676:	4293      	cmp	r3, r2
24004678:	d031      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400467a:	687b      	ldr	r3, [r7, #4]
2400467c:	681b      	ldr	r3, [r3, #0]
2400467e:	4a3a      	ldr	r2, [pc, #232]	; (24004768 <HAL_DMA_Abort+0x614>)
24004680:	4293      	cmp	r3, r2
24004682:	d02c      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004684:	687b      	ldr	r3, [r7, #4]
24004686:	681b      	ldr	r3, [r3, #0]
24004688:	4a38      	ldr	r2, [pc, #224]	; (2400476c <HAL_DMA_Abort+0x618>)
2400468a:	4293      	cmp	r3, r2
2400468c:	d027      	beq.n	240046de <HAL_DMA_Abort+0x58a>
2400468e:	687b      	ldr	r3, [r7, #4]
24004690:	681b      	ldr	r3, [r3, #0]
24004692:	4a37      	ldr	r2, [pc, #220]	; (24004770 <HAL_DMA_Abort+0x61c>)
24004694:	4293      	cmp	r3, r2
24004696:	d022      	beq.n	240046de <HAL_DMA_Abort+0x58a>
24004698:	687b      	ldr	r3, [r7, #4]
2400469a:	681b      	ldr	r3, [r3, #0]
2400469c:	4a35      	ldr	r2, [pc, #212]	; (24004774 <HAL_DMA_Abort+0x620>)
2400469e:	4293      	cmp	r3, r2
240046a0:	d01d      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046a2:	687b      	ldr	r3, [r7, #4]
240046a4:	681b      	ldr	r3, [r3, #0]
240046a6:	4a34      	ldr	r2, [pc, #208]	; (24004778 <HAL_DMA_Abort+0x624>)
240046a8:	4293      	cmp	r3, r2
240046aa:	d018      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046ac:	687b      	ldr	r3, [r7, #4]
240046ae:	681b      	ldr	r3, [r3, #0]
240046b0:	4a32      	ldr	r2, [pc, #200]	; (2400477c <HAL_DMA_Abort+0x628>)
240046b2:	4293      	cmp	r3, r2
240046b4:	d013      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046b6:	687b      	ldr	r3, [r7, #4]
240046b8:	681b      	ldr	r3, [r3, #0]
240046ba:	4a31      	ldr	r2, [pc, #196]	; (24004780 <HAL_DMA_Abort+0x62c>)
240046bc:	4293      	cmp	r3, r2
240046be:	d00e      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046c0:	687b      	ldr	r3, [r7, #4]
240046c2:	681b      	ldr	r3, [r3, #0]
240046c4:	4a2f      	ldr	r2, [pc, #188]	; (24004784 <HAL_DMA_Abort+0x630>)
240046c6:	4293      	cmp	r3, r2
240046c8:	d009      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046ca:	687b      	ldr	r3, [r7, #4]
240046cc:	681b      	ldr	r3, [r3, #0]
240046ce:	4a2e      	ldr	r2, [pc, #184]	; (24004788 <HAL_DMA_Abort+0x634>)
240046d0:	4293      	cmp	r3, r2
240046d2:	d004      	beq.n	240046de <HAL_DMA_Abort+0x58a>
240046d4:	687b      	ldr	r3, [r7, #4]
240046d6:	681b      	ldr	r3, [r3, #0]
240046d8:	4a2c      	ldr	r2, [pc, #176]	; (2400478c <HAL_DMA_Abort+0x638>)
240046da:	4293      	cmp	r3, r2
240046dc:	d101      	bne.n	240046e2 <HAL_DMA_Abort+0x58e>
240046de:	2301      	movs	r3, #1
240046e0:	e000      	b.n	240046e4 <HAL_DMA_Abort+0x590>
240046e2:	2300      	movs	r3, #0
240046e4:	2b00      	cmp	r3, #0
240046e6:	d015      	beq.n	24004714 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240046e8:	687b      	ldr	r3, [r7, #4]
240046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240046ec:	687a      	ldr	r2, [r7, #4]
240046ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
240046f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240046f2:	687b      	ldr	r3, [r7, #4]
240046f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240046f6:	2b00      	cmp	r3, #0
240046f8:	d00c      	beq.n	24004714 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240046fa:	687b      	ldr	r3, [r7, #4]
240046fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240046fe:	681a      	ldr	r2, [r3, #0]
24004700:	687b      	ldr	r3, [r7, #4]
24004702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004708:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400470a:	687b      	ldr	r3, [r7, #4]
2400470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400470e:	687a      	ldr	r2, [r7, #4]
24004710:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004712:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
24004714:	687b      	ldr	r3, [r7, #4]
24004716:	2201      	movs	r2, #1
24004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2400471c:	687b      	ldr	r3, [r7, #4]
2400471e:	2200      	movs	r2, #0
24004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
24004724:	2300      	movs	r3, #0
}
24004726:	4618      	mov	r0, r3
24004728:	3718      	adds	r7, #24
2400472a:	46bd      	mov	sp, r7
2400472c:	bd80      	pop	{r7, pc}
2400472e:	bf00      	nop
24004730:	40020010 	.word	0x40020010
24004734:	40020028 	.word	0x40020028
24004738:	40020040 	.word	0x40020040
2400473c:	40020058 	.word	0x40020058
24004740:	40020070 	.word	0x40020070
24004744:	40020088 	.word	0x40020088
24004748:	400200a0 	.word	0x400200a0
2400474c:	400200b8 	.word	0x400200b8
24004750:	40020410 	.word	0x40020410
24004754:	40020428 	.word	0x40020428
24004758:	40020440 	.word	0x40020440
2400475c:	40020458 	.word	0x40020458
24004760:	40020470 	.word	0x40020470
24004764:	40020488 	.word	0x40020488
24004768:	400204a0 	.word	0x400204a0
2400476c:	400204b8 	.word	0x400204b8
24004770:	58025408 	.word	0x58025408
24004774:	5802541c 	.word	0x5802541c
24004778:	58025430 	.word	0x58025430
2400477c:	58025444 	.word	0x58025444
24004780:	58025458 	.word	0x58025458
24004784:	5802546c 	.word	0x5802546c
24004788:	58025480 	.word	0x58025480
2400478c:	58025494 	.word	0x58025494

24004790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24004790:	b580      	push	{r7, lr}
24004792:	b084      	sub	sp, #16
24004794:	af00      	add	r7, sp, #0
24004796:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004798:	687b      	ldr	r3, [r7, #4]
2400479a:	2b00      	cmp	r3, #0
2400479c:	d101      	bne.n	240047a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400479e:	2301      	movs	r3, #1
240047a0:	e237      	b.n	24004c12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
240047a2:	687b      	ldr	r3, [r7, #4]
240047a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240047a8:	b2db      	uxtb	r3, r3
240047aa:	2b02      	cmp	r3, #2
240047ac:	d004      	beq.n	240047b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240047ae:	687b      	ldr	r3, [r7, #4]
240047b0:	2280      	movs	r2, #128	; 0x80
240047b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
240047b4:	2301      	movs	r3, #1
240047b6:	e22c      	b.n	24004c12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240047b8:	687b      	ldr	r3, [r7, #4]
240047ba:	681b      	ldr	r3, [r3, #0]
240047bc:	4a5c      	ldr	r2, [pc, #368]	; (24004930 <HAL_DMA_Abort_IT+0x1a0>)
240047be:	4293      	cmp	r3, r2
240047c0:	d04a      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047c2:	687b      	ldr	r3, [r7, #4]
240047c4:	681b      	ldr	r3, [r3, #0]
240047c6:	4a5b      	ldr	r2, [pc, #364]	; (24004934 <HAL_DMA_Abort_IT+0x1a4>)
240047c8:	4293      	cmp	r3, r2
240047ca:	d045      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047cc:	687b      	ldr	r3, [r7, #4]
240047ce:	681b      	ldr	r3, [r3, #0]
240047d0:	4a59      	ldr	r2, [pc, #356]	; (24004938 <HAL_DMA_Abort_IT+0x1a8>)
240047d2:	4293      	cmp	r3, r2
240047d4:	d040      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047d6:	687b      	ldr	r3, [r7, #4]
240047d8:	681b      	ldr	r3, [r3, #0]
240047da:	4a58      	ldr	r2, [pc, #352]	; (2400493c <HAL_DMA_Abort_IT+0x1ac>)
240047dc:	4293      	cmp	r3, r2
240047de:	d03b      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047e0:	687b      	ldr	r3, [r7, #4]
240047e2:	681b      	ldr	r3, [r3, #0]
240047e4:	4a56      	ldr	r2, [pc, #344]	; (24004940 <HAL_DMA_Abort_IT+0x1b0>)
240047e6:	4293      	cmp	r3, r2
240047e8:	d036      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047ea:	687b      	ldr	r3, [r7, #4]
240047ec:	681b      	ldr	r3, [r3, #0]
240047ee:	4a55      	ldr	r2, [pc, #340]	; (24004944 <HAL_DMA_Abort_IT+0x1b4>)
240047f0:	4293      	cmp	r3, r2
240047f2:	d031      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047f4:	687b      	ldr	r3, [r7, #4]
240047f6:	681b      	ldr	r3, [r3, #0]
240047f8:	4a53      	ldr	r2, [pc, #332]	; (24004948 <HAL_DMA_Abort_IT+0x1b8>)
240047fa:	4293      	cmp	r3, r2
240047fc:	d02c      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
240047fe:	687b      	ldr	r3, [r7, #4]
24004800:	681b      	ldr	r3, [r3, #0]
24004802:	4a52      	ldr	r2, [pc, #328]	; (2400494c <HAL_DMA_Abort_IT+0x1bc>)
24004804:	4293      	cmp	r3, r2
24004806:	d027      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
24004808:	687b      	ldr	r3, [r7, #4]
2400480a:	681b      	ldr	r3, [r3, #0]
2400480c:	4a50      	ldr	r2, [pc, #320]	; (24004950 <HAL_DMA_Abort_IT+0x1c0>)
2400480e:	4293      	cmp	r3, r2
24004810:	d022      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
24004812:	687b      	ldr	r3, [r7, #4]
24004814:	681b      	ldr	r3, [r3, #0]
24004816:	4a4f      	ldr	r2, [pc, #316]	; (24004954 <HAL_DMA_Abort_IT+0x1c4>)
24004818:	4293      	cmp	r3, r2
2400481a:	d01d      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
2400481c:	687b      	ldr	r3, [r7, #4]
2400481e:	681b      	ldr	r3, [r3, #0]
24004820:	4a4d      	ldr	r2, [pc, #308]	; (24004958 <HAL_DMA_Abort_IT+0x1c8>)
24004822:	4293      	cmp	r3, r2
24004824:	d018      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
24004826:	687b      	ldr	r3, [r7, #4]
24004828:	681b      	ldr	r3, [r3, #0]
2400482a:	4a4c      	ldr	r2, [pc, #304]	; (2400495c <HAL_DMA_Abort_IT+0x1cc>)
2400482c:	4293      	cmp	r3, r2
2400482e:	d013      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
24004830:	687b      	ldr	r3, [r7, #4]
24004832:	681b      	ldr	r3, [r3, #0]
24004834:	4a4a      	ldr	r2, [pc, #296]	; (24004960 <HAL_DMA_Abort_IT+0x1d0>)
24004836:	4293      	cmp	r3, r2
24004838:	d00e      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
2400483a:	687b      	ldr	r3, [r7, #4]
2400483c:	681b      	ldr	r3, [r3, #0]
2400483e:	4a49      	ldr	r2, [pc, #292]	; (24004964 <HAL_DMA_Abort_IT+0x1d4>)
24004840:	4293      	cmp	r3, r2
24004842:	d009      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
24004844:	687b      	ldr	r3, [r7, #4]
24004846:	681b      	ldr	r3, [r3, #0]
24004848:	4a47      	ldr	r2, [pc, #284]	; (24004968 <HAL_DMA_Abort_IT+0x1d8>)
2400484a:	4293      	cmp	r3, r2
2400484c:	d004      	beq.n	24004858 <HAL_DMA_Abort_IT+0xc8>
2400484e:	687b      	ldr	r3, [r7, #4]
24004850:	681b      	ldr	r3, [r3, #0]
24004852:	4a46      	ldr	r2, [pc, #280]	; (2400496c <HAL_DMA_Abort_IT+0x1dc>)
24004854:	4293      	cmp	r3, r2
24004856:	d101      	bne.n	2400485c <HAL_DMA_Abort_IT+0xcc>
24004858:	2301      	movs	r3, #1
2400485a:	e000      	b.n	2400485e <HAL_DMA_Abort_IT+0xce>
2400485c:	2300      	movs	r3, #0
2400485e:	2b00      	cmp	r3, #0
24004860:	f000 8086 	beq.w	24004970 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
24004864:	687b      	ldr	r3, [r7, #4]
24004866:	2204      	movs	r2, #4
24004868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
2400486c:	687b      	ldr	r3, [r7, #4]
2400486e:	681b      	ldr	r3, [r3, #0]
24004870:	4a2f      	ldr	r2, [pc, #188]	; (24004930 <HAL_DMA_Abort_IT+0x1a0>)
24004872:	4293      	cmp	r3, r2
24004874:	d04a      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
24004876:	687b      	ldr	r3, [r7, #4]
24004878:	681b      	ldr	r3, [r3, #0]
2400487a:	4a2e      	ldr	r2, [pc, #184]	; (24004934 <HAL_DMA_Abort_IT+0x1a4>)
2400487c:	4293      	cmp	r3, r2
2400487e:	d045      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
24004880:	687b      	ldr	r3, [r7, #4]
24004882:	681b      	ldr	r3, [r3, #0]
24004884:	4a2c      	ldr	r2, [pc, #176]	; (24004938 <HAL_DMA_Abort_IT+0x1a8>)
24004886:	4293      	cmp	r3, r2
24004888:	d040      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
2400488a:	687b      	ldr	r3, [r7, #4]
2400488c:	681b      	ldr	r3, [r3, #0]
2400488e:	4a2b      	ldr	r2, [pc, #172]	; (2400493c <HAL_DMA_Abort_IT+0x1ac>)
24004890:	4293      	cmp	r3, r2
24004892:	d03b      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
24004894:	687b      	ldr	r3, [r7, #4]
24004896:	681b      	ldr	r3, [r3, #0]
24004898:	4a29      	ldr	r2, [pc, #164]	; (24004940 <HAL_DMA_Abort_IT+0x1b0>)
2400489a:	4293      	cmp	r3, r2
2400489c:	d036      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
2400489e:	687b      	ldr	r3, [r7, #4]
240048a0:	681b      	ldr	r3, [r3, #0]
240048a2:	4a28      	ldr	r2, [pc, #160]	; (24004944 <HAL_DMA_Abort_IT+0x1b4>)
240048a4:	4293      	cmp	r3, r2
240048a6:	d031      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048a8:	687b      	ldr	r3, [r7, #4]
240048aa:	681b      	ldr	r3, [r3, #0]
240048ac:	4a26      	ldr	r2, [pc, #152]	; (24004948 <HAL_DMA_Abort_IT+0x1b8>)
240048ae:	4293      	cmp	r3, r2
240048b0:	d02c      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048b2:	687b      	ldr	r3, [r7, #4]
240048b4:	681b      	ldr	r3, [r3, #0]
240048b6:	4a25      	ldr	r2, [pc, #148]	; (2400494c <HAL_DMA_Abort_IT+0x1bc>)
240048b8:	4293      	cmp	r3, r2
240048ba:	d027      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048bc:	687b      	ldr	r3, [r7, #4]
240048be:	681b      	ldr	r3, [r3, #0]
240048c0:	4a23      	ldr	r2, [pc, #140]	; (24004950 <HAL_DMA_Abort_IT+0x1c0>)
240048c2:	4293      	cmp	r3, r2
240048c4:	d022      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048c6:	687b      	ldr	r3, [r7, #4]
240048c8:	681b      	ldr	r3, [r3, #0]
240048ca:	4a22      	ldr	r2, [pc, #136]	; (24004954 <HAL_DMA_Abort_IT+0x1c4>)
240048cc:	4293      	cmp	r3, r2
240048ce:	d01d      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048d0:	687b      	ldr	r3, [r7, #4]
240048d2:	681b      	ldr	r3, [r3, #0]
240048d4:	4a20      	ldr	r2, [pc, #128]	; (24004958 <HAL_DMA_Abort_IT+0x1c8>)
240048d6:	4293      	cmp	r3, r2
240048d8:	d018      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048da:	687b      	ldr	r3, [r7, #4]
240048dc:	681b      	ldr	r3, [r3, #0]
240048de:	4a1f      	ldr	r2, [pc, #124]	; (2400495c <HAL_DMA_Abort_IT+0x1cc>)
240048e0:	4293      	cmp	r3, r2
240048e2:	d013      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048e4:	687b      	ldr	r3, [r7, #4]
240048e6:	681b      	ldr	r3, [r3, #0]
240048e8:	4a1d      	ldr	r2, [pc, #116]	; (24004960 <HAL_DMA_Abort_IT+0x1d0>)
240048ea:	4293      	cmp	r3, r2
240048ec:	d00e      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048ee:	687b      	ldr	r3, [r7, #4]
240048f0:	681b      	ldr	r3, [r3, #0]
240048f2:	4a1c      	ldr	r2, [pc, #112]	; (24004964 <HAL_DMA_Abort_IT+0x1d4>)
240048f4:	4293      	cmp	r3, r2
240048f6:	d009      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
240048f8:	687b      	ldr	r3, [r7, #4]
240048fa:	681b      	ldr	r3, [r3, #0]
240048fc:	4a1a      	ldr	r2, [pc, #104]	; (24004968 <HAL_DMA_Abort_IT+0x1d8>)
240048fe:	4293      	cmp	r3, r2
24004900:	d004      	beq.n	2400490c <HAL_DMA_Abort_IT+0x17c>
24004902:	687b      	ldr	r3, [r7, #4]
24004904:	681b      	ldr	r3, [r3, #0]
24004906:	4a19      	ldr	r2, [pc, #100]	; (2400496c <HAL_DMA_Abort_IT+0x1dc>)
24004908:	4293      	cmp	r3, r2
2400490a:	d108      	bne.n	2400491e <HAL_DMA_Abort_IT+0x18e>
2400490c:	687b      	ldr	r3, [r7, #4]
2400490e:	681b      	ldr	r3, [r3, #0]
24004910:	681a      	ldr	r2, [r3, #0]
24004912:	687b      	ldr	r3, [r7, #4]
24004914:	681b      	ldr	r3, [r3, #0]
24004916:	f022 0201 	bic.w	r2, r2, #1
2400491a:	601a      	str	r2, [r3, #0]
2400491c:	e178      	b.n	24004c10 <HAL_DMA_Abort_IT+0x480>
2400491e:	687b      	ldr	r3, [r7, #4]
24004920:	681b      	ldr	r3, [r3, #0]
24004922:	681a      	ldr	r2, [r3, #0]
24004924:	687b      	ldr	r3, [r7, #4]
24004926:	681b      	ldr	r3, [r3, #0]
24004928:	f022 0201 	bic.w	r2, r2, #1
2400492c:	601a      	str	r2, [r3, #0]
2400492e:	e16f      	b.n	24004c10 <HAL_DMA_Abort_IT+0x480>
24004930:	40020010 	.word	0x40020010
24004934:	40020028 	.word	0x40020028
24004938:	40020040 	.word	0x40020040
2400493c:	40020058 	.word	0x40020058
24004940:	40020070 	.word	0x40020070
24004944:	40020088 	.word	0x40020088
24004948:	400200a0 	.word	0x400200a0
2400494c:	400200b8 	.word	0x400200b8
24004950:	40020410 	.word	0x40020410
24004954:	40020428 	.word	0x40020428
24004958:	40020440 	.word	0x40020440
2400495c:	40020458 	.word	0x40020458
24004960:	40020470 	.word	0x40020470
24004964:	40020488 	.word	0x40020488
24004968:	400204a0 	.word	0x400204a0
2400496c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004970:	687b      	ldr	r3, [r7, #4]
24004972:	681b      	ldr	r3, [r3, #0]
24004974:	681a      	ldr	r2, [r3, #0]
24004976:	687b      	ldr	r3, [r7, #4]
24004978:	681b      	ldr	r3, [r3, #0]
2400497a:	f022 020e 	bic.w	r2, r2, #14
2400497e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24004980:	687b      	ldr	r3, [r7, #4]
24004982:	681b      	ldr	r3, [r3, #0]
24004984:	4a6c      	ldr	r2, [pc, #432]	; (24004b38 <HAL_DMA_Abort_IT+0x3a8>)
24004986:	4293      	cmp	r3, r2
24004988:	d04a      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
2400498a:	687b      	ldr	r3, [r7, #4]
2400498c:	681b      	ldr	r3, [r3, #0]
2400498e:	4a6b      	ldr	r2, [pc, #428]	; (24004b3c <HAL_DMA_Abort_IT+0x3ac>)
24004990:	4293      	cmp	r3, r2
24004992:	d045      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
24004994:	687b      	ldr	r3, [r7, #4]
24004996:	681b      	ldr	r3, [r3, #0]
24004998:	4a69      	ldr	r2, [pc, #420]	; (24004b40 <HAL_DMA_Abort_IT+0x3b0>)
2400499a:	4293      	cmp	r3, r2
2400499c:	d040      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
2400499e:	687b      	ldr	r3, [r7, #4]
240049a0:	681b      	ldr	r3, [r3, #0]
240049a2:	4a68      	ldr	r2, [pc, #416]	; (24004b44 <HAL_DMA_Abort_IT+0x3b4>)
240049a4:	4293      	cmp	r3, r2
240049a6:	d03b      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049a8:	687b      	ldr	r3, [r7, #4]
240049aa:	681b      	ldr	r3, [r3, #0]
240049ac:	4a66      	ldr	r2, [pc, #408]	; (24004b48 <HAL_DMA_Abort_IT+0x3b8>)
240049ae:	4293      	cmp	r3, r2
240049b0:	d036      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049b2:	687b      	ldr	r3, [r7, #4]
240049b4:	681b      	ldr	r3, [r3, #0]
240049b6:	4a65      	ldr	r2, [pc, #404]	; (24004b4c <HAL_DMA_Abort_IT+0x3bc>)
240049b8:	4293      	cmp	r3, r2
240049ba:	d031      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049bc:	687b      	ldr	r3, [r7, #4]
240049be:	681b      	ldr	r3, [r3, #0]
240049c0:	4a63      	ldr	r2, [pc, #396]	; (24004b50 <HAL_DMA_Abort_IT+0x3c0>)
240049c2:	4293      	cmp	r3, r2
240049c4:	d02c      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049c6:	687b      	ldr	r3, [r7, #4]
240049c8:	681b      	ldr	r3, [r3, #0]
240049ca:	4a62      	ldr	r2, [pc, #392]	; (24004b54 <HAL_DMA_Abort_IT+0x3c4>)
240049cc:	4293      	cmp	r3, r2
240049ce:	d027      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049d0:	687b      	ldr	r3, [r7, #4]
240049d2:	681b      	ldr	r3, [r3, #0]
240049d4:	4a60      	ldr	r2, [pc, #384]	; (24004b58 <HAL_DMA_Abort_IT+0x3c8>)
240049d6:	4293      	cmp	r3, r2
240049d8:	d022      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049da:	687b      	ldr	r3, [r7, #4]
240049dc:	681b      	ldr	r3, [r3, #0]
240049de:	4a5f      	ldr	r2, [pc, #380]	; (24004b5c <HAL_DMA_Abort_IT+0x3cc>)
240049e0:	4293      	cmp	r3, r2
240049e2:	d01d      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049e4:	687b      	ldr	r3, [r7, #4]
240049e6:	681b      	ldr	r3, [r3, #0]
240049e8:	4a5d      	ldr	r2, [pc, #372]	; (24004b60 <HAL_DMA_Abort_IT+0x3d0>)
240049ea:	4293      	cmp	r3, r2
240049ec:	d018      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049ee:	687b      	ldr	r3, [r7, #4]
240049f0:	681b      	ldr	r3, [r3, #0]
240049f2:	4a5c      	ldr	r2, [pc, #368]	; (24004b64 <HAL_DMA_Abort_IT+0x3d4>)
240049f4:	4293      	cmp	r3, r2
240049f6:	d013      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
240049f8:	687b      	ldr	r3, [r7, #4]
240049fa:	681b      	ldr	r3, [r3, #0]
240049fc:	4a5a      	ldr	r2, [pc, #360]	; (24004b68 <HAL_DMA_Abort_IT+0x3d8>)
240049fe:	4293      	cmp	r3, r2
24004a00:	d00e      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
24004a02:	687b      	ldr	r3, [r7, #4]
24004a04:	681b      	ldr	r3, [r3, #0]
24004a06:	4a59      	ldr	r2, [pc, #356]	; (24004b6c <HAL_DMA_Abort_IT+0x3dc>)
24004a08:	4293      	cmp	r3, r2
24004a0a:	d009      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
24004a0c:	687b      	ldr	r3, [r7, #4]
24004a0e:	681b      	ldr	r3, [r3, #0]
24004a10:	4a57      	ldr	r2, [pc, #348]	; (24004b70 <HAL_DMA_Abort_IT+0x3e0>)
24004a12:	4293      	cmp	r3, r2
24004a14:	d004      	beq.n	24004a20 <HAL_DMA_Abort_IT+0x290>
24004a16:	687b      	ldr	r3, [r7, #4]
24004a18:	681b      	ldr	r3, [r3, #0]
24004a1a:	4a56      	ldr	r2, [pc, #344]	; (24004b74 <HAL_DMA_Abort_IT+0x3e4>)
24004a1c:	4293      	cmp	r3, r2
24004a1e:	d108      	bne.n	24004a32 <HAL_DMA_Abort_IT+0x2a2>
24004a20:	687b      	ldr	r3, [r7, #4]
24004a22:	681b      	ldr	r3, [r3, #0]
24004a24:	681a      	ldr	r2, [r3, #0]
24004a26:	687b      	ldr	r3, [r7, #4]
24004a28:	681b      	ldr	r3, [r3, #0]
24004a2a:	f022 0201 	bic.w	r2, r2, #1
24004a2e:	601a      	str	r2, [r3, #0]
24004a30:	e007      	b.n	24004a42 <HAL_DMA_Abort_IT+0x2b2>
24004a32:	687b      	ldr	r3, [r7, #4]
24004a34:	681b      	ldr	r3, [r3, #0]
24004a36:	681a      	ldr	r2, [r3, #0]
24004a38:	687b      	ldr	r3, [r7, #4]
24004a3a:	681b      	ldr	r3, [r3, #0]
24004a3c:	f022 0201 	bic.w	r2, r2, #1
24004a40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004a42:	687b      	ldr	r3, [r7, #4]
24004a44:	681b      	ldr	r3, [r3, #0]
24004a46:	4a3c      	ldr	r2, [pc, #240]	; (24004b38 <HAL_DMA_Abort_IT+0x3a8>)
24004a48:	4293      	cmp	r3, r2
24004a4a:	d072      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a4c:	687b      	ldr	r3, [r7, #4]
24004a4e:	681b      	ldr	r3, [r3, #0]
24004a50:	4a3a      	ldr	r2, [pc, #232]	; (24004b3c <HAL_DMA_Abort_IT+0x3ac>)
24004a52:	4293      	cmp	r3, r2
24004a54:	d06d      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a56:	687b      	ldr	r3, [r7, #4]
24004a58:	681b      	ldr	r3, [r3, #0]
24004a5a:	4a39      	ldr	r2, [pc, #228]	; (24004b40 <HAL_DMA_Abort_IT+0x3b0>)
24004a5c:	4293      	cmp	r3, r2
24004a5e:	d068      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a60:	687b      	ldr	r3, [r7, #4]
24004a62:	681b      	ldr	r3, [r3, #0]
24004a64:	4a37      	ldr	r2, [pc, #220]	; (24004b44 <HAL_DMA_Abort_IT+0x3b4>)
24004a66:	4293      	cmp	r3, r2
24004a68:	d063      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a6a:	687b      	ldr	r3, [r7, #4]
24004a6c:	681b      	ldr	r3, [r3, #0]
24004a6e:	4a36      	ldr	r2, [pc, #216]	; (24004b48 <HAL_DMA_Abort_IT+0x3b8>)
24004a70:	4293      	cmp	r3, r2
24004a72:	d05e      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a74:	687b      	ldr	r3, [r7, #4]
24004a76:	681b      	ldr	r3, [r3, #0]
24004a78:	4a34      	ldr	r2, [pc, #208]	; (24004b4c <HAL_DMA_Abort_IT+0x3bc>)
24004a7a:	4293      	cmp	r3, r2
24004a7c:	d059      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a7e:	687b      	ldr	r3, [r7, #4]
24004a80:	681b      	ldr	r3, [r3, #0]
24004a82:	4a33      	ldr	r2, [pc, #204]	; (24004b50 <HAL_DMA_Abort_IT+0x3c0>)
24004a84:	4293      	cmp	r3, r2
24004a86:	d054      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a88:	687b      	ldr	r3, [r7, #4]
24004a8a:	681b      	ldr	r3, [r3, #0]
24004a8c:	4a31      	ldr	r2, [pc, #196]	; (24004b54 <HAL_DMA_Abort_IT+0x3c4>)
24004a8e:	4293      	cmp	r3, r2
24004a90:	d04f      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a92:	687b      	ldr	r3, [r7, #4]
24004a94:	681b      	ldr	r3, [r3, #0]
24004a96:	4a30      	ldr	r2, [pc, #192]	; (24004b58 <HAL_DMA_Abort_IT+0x3c8>)
24004a98:	4293      	cmp	r3, r2
24004a9a:	d04a      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004a9c:	687b      	ldr	r3, [r7, #4]
24004a9e:	681b      	ldr	r3, [r3, #0]
24004aa0:	4a2e      	ldr	r2, [pc, #184]	; (24004b5c <HAL_DMA_Abort_IT+0x3cc>)
24004aa2:	4293      	cmp	r3, r2
24004aa4:	d045      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004aa6:	687b      	ldr	r3, [r7, #4]
24004aa8:	681b      	ldr	r3, [r3, #0]
24004aaa:	4a2d      	ldr	r2, [pc, #180]	; (24004b60 <HAL_DMA_Abort_IT+0x3d0>)
24004aac:	4293      	cmp	r3, r2
24004aae:	d040      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004ab0:	687b      	ldr	r3, [r7, #4]
24004ab2:	681b      	ldr	r3, [r3, #0]
24004ab4:	4a2b      	ldr	r2, [pc, #172]	; (24004b64 <HAL_DMA_Abort_IT+0x3d4>)
24004ab6:	4293      	cmp	r3, r2
24004ab8:	d03b      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004aba:	687b      	ldr	r3, [r7, #4]
24004abc:	681b      	ldr	r3, [r3, #0]
24004abe:	4a2a      	ldr	r2, [pc, #168]	; (24004b68 <HAL_DMA_Abort_IT+0x3d8>)
24004ac0:	4293      	cmp	r3, r2
24004ac2:	d036      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004ac4:	687b      	ldr	r3, [r7, #4]
24004ac6:	681b      	ldr	r3, [r3, #0]
24004ac8:	4a28      	ldr	r2, [pc, #160]	; (24004b6c <HAL_DMA_Abort_IT+0x3dc>)
24004aca:	4293      	cmp	r3, r2
24004acc:	d031      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004ace:	687b      	ldr	r3, [r7, #4]
24004ad0:	681b      	ldr	r3, [r3, #0]
24004ad2:	4a27      	ldr	r2, [pc, #156]	; (24004b70 <HAL_DMA_Abort_IT+0x3e0>)
24004ad4:	4293      	cmp	r3, r2
24004ad6:	d02c      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004ad8:	687b      	ldr	r3, [r7, #4]
24004ada:	681b      	ldr	r3, [r3, #0]
24004adc:	4a25      	ldr	r2, [pc, #148]	; (24004b74 <HAL_DMA_Abort_IT+0x3e4>)
24004ade:	4293      	cmp	r3, r2
24004ae0:	d027      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004ae2:	687b      	ldr	r3, [r7, #4]
24004ae4:	681b      	ldr	r3, [r3, #0]
24004ae6:	4a24      	ldr	r2, [pc, #144]	; (24004b78 <HAL_DMA_Abort_IT+0x3e8>)
24004ae8:	4293      	cmp	r3, r2
24004aea:	d022      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004aec:	687b      	ldr	r3, [r7, #4]
24004aee:	681b      	ldr	r3, [r3, #0]
24004af0:	4a22      	ldr	r2, [pc, #136]	; (24004b7c <HAL_DMA_Abort_IT+0x3ec>)
24004af2:	4293      	cmp	r3, r2
24004af4:	d01d      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004af6:	687b      	ldr	r3, [r7, #4]
24004af8:	681b      	ldr	r3, [r3, #0]
24004afa:	4a21      	ldr	r2, [pc, #132]	; (24004b80 <HAL_DMA_Abort_IT+0x3f0>)
24004afc:	4293      	cmp	r3, r2
24004afe:	d018      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004b00:	687b      	ldr	r3, [r7, #4]
24004b02:	681b      	ldr	r3, [r3, #0]
24004b04:	4a1f      	ldr	r2, [pc, #124]	; (24004b84 <HAL_DMA_Abort_IT+0x3f4>)
24004b06:	4293      	cmp	r3, r2
24004b08:	d013      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004b0a:	687b      	ldr	r3, [r7, #4]
24004b0c:	681b      	ldr	r3, [r3, #0]
24004b0e:	4a1e      	ldr	r2, [pc, #120]	; (24004b88 <HAL_DMA_Abort_IT+0x3f8>)
24004b10:	4293      	cmp	r3, r2
24004b12:	d00e      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004b14:	687b      	ldr	r3, [r7, #4]
24004b16:	681b      	ldr	r3, [r3, #0]
24004b18:	4a1c      	ldr	r2, [pc, #112]	; (24004b8c <HAL_DMA_Abort_IT+0x3fc>)
24004b1a:	4293      	cmp	r3, r2
24004b1c:	d009      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004b1e:	687b      	ldr	r3, [r7, #4]
24004b20:	681b      	ldr	r3, [r3, #0]
24004b22:	4a1b      	ldr	r2, [pc, #108]	; (24004b90 <HAL_DMA_Abort_IT+0x400>)
24004b24:	4293      	cmp	r3, r2
24004b26:	d004      	beq.n	24004b32 <HAL_DMA_Abort_IT+0x3a2>
24004b28:	687b      	ldr	r3, [r7, #4]
24004b2a:	681b      	ldr	r3, [r3, #0]
24004b2c:	4a19      	ldr	r2, [pc, #100]	; (24004b94 <HAL_DMA_Abort_IT+0x404>)
24004b2e:	4293      	cmp	r3, r2
24004b30:	d132      	bne.n	24004b98 <HAL_DMA_Abort_IT+0x408>
24004b32:	2301      	movs	r3, #1
24004b34:	e031      	b.n	24004b9a <HAL_DMA_Abort_IT+0x40a>
24004b36:	bf00      	nop
24004b38:	40020010 	.word	0x40020010
24004b3c:	40020028 	.word	0x40020028
24004b40:	40020040 	.word	0x40020040
24004b44:	40020058 	.word	0x40020058
24004b48:	40020070 	.word	0x40020070
24004b4c:	40020088 	.word	0x40020088
24004b50:	400200a0 	.word	0x400200a0
24004b54:	400200b8 	.word	0x400200b8
24004b58:	40020410 	.word	0x40020410
24004b5c:	40020428 	.word	0x40020428
24004b60:	40020440 	.word	0x40020440
24004b64:	40020458 	.word	0x40020458
24004b68:	40020470 	.word	0x40020470
24004b6c:	40020488 	.word	0x40020488
24004b70:	400204a0 	.word	0x400204a0
24004b74:	400204b8 	.word	0x400204b8
24004b78:	58025408 	.word	0x58025408
24004b7c:	5802541c 	.word	0x5802541c
24004b80:	58025430 	.word	0x58025430
24004b84:	58025444 	.word	0x58025444
24004b88:	58025458 	.word	0x58025458
24004b8c:	5802546c 	.word	0x5802546c
24004b90:	58025480 	.word	0x58025480
24004b94:	58025494 	.word	0x58025494
24004b98:	2300      	movs	r3, #0
24004b9a:	2b00      	cmp	r3, #0
24004b9c:	d028      	beq.n	24004bf0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24004b9e:	687b      	ldr	r3, [r7, #4]
24004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004ba2:	681a      	ldr	r2, [r3, #0]
24004ba4:	687b      	ldr	r3, [r7, #4]
24004ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004bac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24004bae:	687b      	ldr	r3, [r7, #4]
24004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004bb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004bb4:	687b      	ldr	r3, [r7, #4]
24004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004bb8:	f003 031f 	and.w	r3, r3, #31
24004bbc:	2201      	movs	r2, #1
24004bbe:	409a      	lsls	r2, r3
24004bc0:	68fb      	ldr	r3, [r7, #12]
24004bc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004bc4:	687b      	ldr	r3, [r7, #4]
24004bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004bc8:	687a      	ldr	r2, [r7, #4]
24004bca:	6e92      	ldr	r2, [r2, #104]	; 0x68
24004bcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24004bce:	687b      	ldr	r3, [r7, #4]
24004bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004bd2:	2b00      	cmp	r3, #0
24004bd4:	d00c      	beq.n	24004bf0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24004bd6:	687b      	ldr	r3, [r7, #4]
24004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004bda:	681a      	ldr	r2, [r3, #0]
24004bdc:	687b      	ldr	r3, [r7, #4]
24004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004be4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004be6:	687b      	ldr	r3, [r7, #4]
24004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24004bea:	687a      	ldr	r2, [r7, #4]
24004bec:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004bee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24004bf0:	687b      	ldr	r3, [r7, #4]
24004bf2:	2201      	movs	r2, #1
24004bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24004bf8:	687b      	ldr	r3, [r7, #4]
24004bfa:	2200      	movs	r2, #0
24004bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24004c00:	687b      	ldr	r3, [r7, #4]
24004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004c04:	2b00      	cmp	r3, #0
24004c06:	d003      	beq.n	24004c10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24004c08:	687b      	ldr	r3, [r7, #4]
24004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004c0c:	6878      	ldr	r0, [r7, #4]
24004c0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24004c10:	2300      	movs	r3, #0
}
24004c12:	4618      	mov	r0, r3
24004c14:	3710      	adds	r7, #16
24004c16:	46bd      	mov	sp, r7
24004c18:	bd80      	pop	{r7, pc}
24004c1a:	bf00      	nop

24004c1c <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24004c1c:	b580      	push	{r7, lr}
24004c1e:	b08a      	sub	sp, #40	; 0x28
24004c20:	af00      	add	r7, sp, #0
24004c22:	60f8      	str	r0, [r7, #12]
24004c24:	460b      	mov	r3, r1
24004c26:	607a      	str	r2, [r7, #4]
24004c28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24004c2a:	2300      	movs	r3, #0
24004c2c:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
24004c2e:	f7fd fa8d 	bl	2400214c <HAL_GetTick>
24004c32:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004c34:	68fb      	ldr	r3, [r7, #12]
24004c36:	2b00      	cmp	r3, #0
24004c38:	d101      	bne.n	24004c3e <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
24004c3a:	2301      	movs	r3, #1
24004c3c:	e374      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
24004c3e:	68fb      	ldr	r3, [r7, #12]
24004c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004c44:	b2db      	uxtb	r3, r3
24004c46:	2b02      	cmp	r3, #2
24004c48:	d008      	beq.n	24004c5c <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004c4a:	68fb      	ldr	r3, [r7, #12]
24004c4c:	2280      	movs	r2, #128	; 0x80
24004c4e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24004c50:	68fb      	ldr	r3, [r7, #12]
24004c52:	2200      	movs	r2, #0
24004c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24004c58:	2301      	movs	r3, #1
24004c5a:	e365      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004c5c:	68fb      	ldr	r3, [r7, #12]
24004c5e:	681b      	ldr	r3, [r3, #0]
24004c60:	4a7b      	ldr	r2, [pc, #492]	; (24004e50 <HAL_DMA_PollForTransfer+0x234>)
24004c62:	4293      	cmp	r3, r2
24004c64:	d04a      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c66:	68fb      	ldr	r3, [r7, #12]
24004c68:	681b      	ldr	r3, [r3, #0]
24004c6a:	4a7a      	ldr	r2, [pc, #488]	; (24004e54 <HAL_DMA_PollForTransfer+0x238>)
24004c6c:	4293      	cmp	r3, r2
24004c6e:	d045      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c70:	68fb      	ldr	r3, [r7, #12]
24004c72:	681b      	ldr	r3, [r3, #0]
24004c74:	4a78      	ldr	r2, [pc, #480]	; (24004e58 <HAL_DMA_PollForTransfer+0x23c>)
24004c76:	4293      	cmp	r3, r2
24004c78:	d040      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c7a:	68fb      	ldr	r3, [r7, #12]
24004c7c:	681b      	ldr	r3, [r3, #0]
24004c7e:	4a77      	ldr	r2, [pc, #476]	; (24004e5c <HAL_DMA_PollForTransfer+0x240>)
24004c80:	4293      	cmp	r3, r2
24004c82:	d03b      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c84:	68fb      	ldr	r3, [r7, #12]
24004c86:	681b      	ldr	r3, [r3, #0]
24004c88:	4a75      	ldr	r2, [pc, #468]	; (24004e60 <HAL_DMA_PollForTransfer+0x244>)
24004c8a:	4293      	cmp	r3, r2
24004c8c:	d036      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c8e:	68fb      	ldr	r3, [r7, #12]
24004c90:	681b      	ldr	r3, [r3, #0]
24004c92:	4a74      	ldr	r2, [pc, #464]	; (24004e64 <HAL_DMA_PollForTransfer+0x248>)
24004c94:	4293      	cmp	r3, r2
24004c96:	d031      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004c98:	68fb      	ldr	r3, [r7, #12]
24004c9a:	681b      	ldr	r3, [r3, #0]
24004c9c:	4a72      	ldr	r2, [pc, #456]	; (24004e68 <HAL_DMA_PollForTransfer+0x24c>)
24004c9e:	4293      	cmp	r3, r2
24004ca0:	d02c      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004ca2:	68fb      	ldr	r3, [r7, #12]
24004ca4:	681b      	ldr	r3, [r3, #0]
24004ca6:	4a71      	ldr	r2, [pc, #452]	; (24004e6c <HAL_DMA_PollForTransfer+0x250>)
24004ca8:	4293      	cmp	r3, r2
24004caa:	d027      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cac:	68fb      	ldr	r3, [r7, #12]
24004cae:	681b      	ldr	r3, [r3, #0]
24004cb0:	4a6f      	ldr	r2, [pc, #444]	; (24004e70 <HAL_DMA_PollForTransfer+0x254>)
24004cb2:	4293      	cmp	r3, r2
24004cb4:	d022      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cb6:	68fb      	ldr	r3, [r7, #12]
24004cb8:	681b      	ldr	r3, [r3, #0]
24004cba:	4a6e      	ldr	r2, [pc, #440]	; (24004e74 <HAL_DMA_PollForTransfer+0x258>)
24004cbc:	4293      	cmp	r3, r2
24004cbe:	d01d      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cc0:	68fb      	ldr	r3, [r7, #12]
24004cc2:	681b      	ldr	r3, [r3, #0]
24004cc4:	4a6c      	ldr	r2, [pc, #432]	; (24004e78 <HAL_DMA_PollForTransfer+0x25c>)
24004cc6:	4293      	cmp	r3, r2
24004cc8:	d018      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cca:	68fb      	ldr	r3, [r7, #12]
24004ccc:	681b      	ldr	r3, [r3, #0]
24004cce:	4a6b      	ldr	r2, [pc, #428]	; (24004e7c <HAL_DMA_PollForTransfer+0x260>)
24004cd0:	4293      	cmp	r3, r2
24004cd2:	d013      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cd4:	68fb      	ldr	r3, [r7, #12]
24004cd6:	681b      	ldr	r3, [r3, #0]
24004cd8:	4a69      	ldr	r2, [pc, #420]	; (24004e80 <HAL_DMA_PollForTransfer+0x264>)
24004cda:	4293      	cmp	r3, r2
24004cdc:	d00e      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cde:	68fb      	ldr	r3, [r7, #12]
24004ce0:	681b      	ldr	r3, [r3, #0]
24004ce2:	4a68      	ldr	r2, [pc, #416]	; (24004e84 <HAL_DMA_PollForTransfer+0x268>)
24004ce4:	4293      	cmp	r3, r2
24004ce6:	d009      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004ce8:	68fb      	ldr	r3, [r7, #12]
24004cea:	681b      	ldr	r3, [r3, #0]
24004cec:	4a66      	ldr	r2, [pc, #408]	; (24004e88 <HAL_DMA_PollForTransfer+0x26c>)
24004cee:	4293      	cmp	r3, r2
24004cf0:	d004      	beq.n	24004cfc <HAL_DMA_PollForTransfer+0xe0>
24004cf2:	68fb      	ldr	r3, [r7, #12]
24004cf4:	681b      	ldr	r3, [r3, #0]
24004cf6:	4a65      	ldr	r2, [pc, #404]	; (24004e8c <HAL_DMA_PollForTransfer+0x270>)
24004cf8:	4293      	cmp	r3, r2
24004cfa:	d101      	bne.n	24004d00 <HAL_DMA_PollForTransfer+0xe4>
24004cfc:	2301      	movs	r3, #1
24004cfe:	e000      	b.n	24004d02 <HAL_DMA_PollForTransfer+0xe6>
24004d00:	2300      	movs	r3, #0
24004d02:	2b00      	cmp	r3, #0
24004d04:	d028      	beq.n	24004d58 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
24004d06:	68fb      	ldr	r3, [r7, #12]
24004d08:	681b      	ldr	r3, [r3, #0]
24004d0a:	681b      	ldr	r3, [r3, #0]
24004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24004d10:	2b00      	cmp	r3, #0
24004d12:	d005      	beq.n	24004d20 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004d14:	68fb      	ldr	r3, [r7, #12]
24004d16:	f44f 7280 	mov.w	r2, #256	; 0x100
24004d1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004d1c:	2301      	movs	r3, #1
24004d1e:	e303      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004d20:	7afb      	ldrb	r3, [r7, #11]
24004d22:	2b00      	cmp	r3, #0
24004d24:	d108      	bne.n	24004d38 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24004d26:	68fb      	ldr	r3, [r7, #12]
24004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004d2a:	f003 031f 	and.w	r3, r3, #31
24004d2e:	2220      	movs	r2, #32
24004d30:	fa02 f303 	lsl.w	r3, r2, r3
24004d34:	627b      	str	r3, [r7, #36]	; 0x24
24004d36:	e007      	b.n	24004d48 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24004d38:	68fb      	ldr	r3, [r7, #12]
24004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004d3c:	f003 031f 	and.w	r3, r3, #31
24004d40:	2210      	movs	r2, #16
24004d42:	fa02 f303 	lsl.w	r3, r2, r3
24004d46:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004d48:	68fb      	ldr	r3, [r7, #12]
24004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004d4c:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004d4e:	68fb      	ldr	r3, [r7, #12]
24004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004d52:	3308      	adds	r3, #8
24004d54:	61fb      	str	r3, [r7, #28]
24004d56:	e1d5      	b.n	24005104 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
24004d58:	68fb      	ldr	r3, [r7, #12]
24004d5a:	681b      	ldr	r3, [r3, #0]
24004d5c:	681b      	ldr	r3, [r3, #0]
24004d5e:	f003 0320 	and.w	r3, r3, #32
24004d62:	2b00      	cmp	r3, #0
24004d64:	d005      	beq.n	24004d72 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004d66:	68fb      	ldr	r3, [r7, #12]
24004d68:	f44f 7280 	mov.w	r2, #256	; 0x100
24004d6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004d6e:	2301      	movs	r3, #1
24004d70:	e2da      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004d72:	7afb      	ldrb	r3, [r7, #11]
24004d74:	2b00      	cmp	r3, #0
24004d76:	d108      	bne.n	24004d8a <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
24004d78:	68fb      	ldr	r3, [r7, #12]
24004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004d7c:	f003 031f 	and.w	r3, r3, #31
24004d80:	2202      	movs	r2, #2
24004d82:	fa02 f303 	lsl.w	r3, r2, r3
24004d86:	627b      	str	r3, [r7, #36]	; 0x24
24004d88:	e007      	b.n	24004d9a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
24004d8a:	68fb      	ldr	r3, [r7, #12]
24004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004d8e:	f003 031f 	and.w	r3, r3, #31
24004d92:	2204      	movs	r2, #4
24004d94:	fa02 f303 	lsl.w	r3, r2, r3
24004d98:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004d9a:	68fb      	ldr	r3, [r7, #12]
24004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004d9e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004da0:	68fb      	ldr	r3, [r7, #12]
24004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004da4:	3304      	adds	r3, #4
24004da6:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
24004da8:	e1ac      	b.n	24005104 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004daa:	68fb      	ldr	r3, [r7, #12]
24004dac:	681b      	ldr	r3, [r3, #0]
24004dae:	4a28      	ldr	r2, [pc, #160]	; (24004e50 <HAL_DMA_PollForTransfer+0x234>)
24004db0:	4293      	cmp	r3, r2
24004db2:	d04a      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004db4:	68fb      	ldr	r3, [r7, #12]
24004db6:	681b      	ldr	r3, [r3, #0]
24004db8:	4a26      	ldr	r2, [pc, #152]	; (24004e54 <HAL_DMA_PollForTransfer+0x238>)
24004dba:	4293      	cmp	r3, r2
24004dbc:	d045      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004dbe:	68fb      	ldr	r3, [r7, #12]
24004dc0:	681b      	ldr	r3, [r3, #0]
24004dc2:	4a25      	ldr	r2, [pc, #148]	; (24004e58 <HAL_DMA_PollForTransfer+0x23c>)
24004dc4:	4293      	cmp	r3, r2
24004dc6:	d040      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004dc8:	68fb      	ldr	r3, [r7, #12]
24004dca:	681b      	ldr	r3, [r3, #0]
24004dcc:	4a23      	ldr	r2, [pc, #140]	; (24004e5c <HAL_DMA_PollForTransfer+0x240>)
24004dce:	4293      	cmp	r3, r2
24004dd0:	d03b      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004dd2:	68fb      	ldr	r3, [r7, #12]
24004dd4:	681b      	ldr	r3, [r3, #0]
24004dd6:	4a22      	ldr	r2, [pc, #136]	; (24004e60 <HAL_DMA_PollForTransfer+0x244>)
24004dd8:	4293      	cmp	r3, r2
24004dda:	d036      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004ddc:	68fb      	ldr	r3, [r7, #12]
24004dde:	681b      	ldr	r3, [r3, #0]
24004de0:	4a20      	ldr	r2, [pc, #128]	; (24004e64 <HAL_DMA_PollForTransfer+0x248>)
24004de2:	4293      	cmp	r3, r2
24004de4:	d031      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004de6:	68fb      	ldr	r3, [r7, #12]
24004de8:	681b      	ldr	r3, [r3, #0]
24004dea:	4a1f      	ldr	r2, [pc, #124]	; (24004e68 <HAL_DMA_PollForTransfer+0x24c>)
24004dec:	4293      	cmp	r3, r2
24004dee:	d02c      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004df0:	68fb      	ldr	r3, [r7, #12]
24004df2:	681b      	ldr	r3, [r3, #0]
24004df4:	4a1d      	ldr	r2, [pc, #116]	; (24004e6c <HAL_DMA_PollForTransfer+0x250>)
24004df6:	4293      	cmp	r3, r2
24004df8:	d027      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004dfa:	68fb      	ldr	r3, [r7, #12]
24004dfc:	681b      	ldr	r3, [r3, #0]
24004dfe:	4a1c      	ldr	r2, [pc, #112]	; (24004e70 <HAL_DMA_PollForTransfer+0x254>)
24004e00:	4293      	cmp	r3, r2
24004e02:	d022      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e04:	68fb      	ldr	r3, [r7, #12]
24004e06:	681b      	ldr	r3, [r3, #0]
24004e08:	4a1a      	ldr	r2, [pc, #104]	; (24004e74 <HAL_DMA_PollForTransfer+0x258>)
24004e0a:	4293      	cmp	r3, r2
24004e0c:	d01d      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e0e:	68fb      	ldr	r3, [r7, #12]
24004e10:	681b      	ldr	r3, [r3, #0]
24004e12:	4a19      	ldr	r2, [pc, #100]	; (24004e78 <HAL_DMA_PollForTransfer+0x25c>)
24004e14:	4293      	cmp	r3, r2
24004e16:	d018      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e18:	68fb      	ldr	r3, [r7, #12]
24004e1a:	681b      	ldr	r3, [r3, #0]
24004e1c:	4a17      	ldr	r2, [pc, #92]	; (24004e7c <HAL_DMA_PollForTransfer+0x260>)
24004e1e:	4293      	cmp	r3, r2
24004e20:	d013      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e22:	68fb      	ldr	r3, [r7, #12]
24004e24:	681b      	ldr	r3, [r3, #0]
24004e26:	4a16      	ldr	r2, [pc, #88]	; (24004e80 <HAL_DMA_PollForTransfer+0x264>)
24004e28:	4293      	cmp	r3, r2
24004e2a:	d00e      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e2c:	68fb      	ldr	r3, [r7, #12]
24004e2e:	681b      	ldr	r3, [r3, #0]
24004e30:	4a14      	ldr	r2, [pc, #80]	; (24004e84 <HAL_DMA_PollForTransfer+0x268>)
24004e32:	4293      	cmp	r3, r2
24004e34:	d009      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e36:	68fb      	ldr	r3, [r7, #12]
24004e38:	681b      	ldr	r3, [r3, #0]
24004e3a:	4a13      	ldr	r2, [pc, #76]	; (24004e88 <HAL_DMA_PollForTransfer+0x26c>)
24004e3c:	4293      	cmp	r3, r2
24004e3e:	d004      	beq.n	24004e4a <HAL_DMA_PollForTransfer+0x22e>
24004e40:	68fb      	ldr	r3, [r7, #12]
24004e42:	681b      	ldr	r3, [r3, #0]
24004e44:	4a11      	ldr	r2, [pc, #68]	; (24004e8c <HAL_DMA_PollForTransfer+0x270>)
24004e46:	4293      	cmp	r3, r2
24004e48:	d122      	bne.n	24004e90 <HAL_DMA_PollForTransfer+0x274>
24004e4a:	2301      	movs	r3, #1
24004e4c:	e021      	b.n	24004e92 <HAL_DMA_PollForTransfer+0x276>
24004e4e:	bf00      	nop
24004e50:	40020010 	.word	0x40020010
24004e54:	40020028 	.word	0x40020028
24004e58:	40020040 	.word	0x40020040
24004e5c:	40020058 	.word	0x40020058
24004e60:	40020070 	.word	0x40020070
24004e64:	40020088 	.word	0x40020088
24004e68:	400200a0 	.word	0x400200a0
24004e6c:	400200b8 	.word	0x400200b8
24004e70:	40020410 	.word	0x40020410
24004e74:	40020428 	.word	0x40020428
24004e78:	40020440 	.word	0x40020440
24004e7c:	40020458 	.word	0x40020458
24004e80:	40020470 	.word	0x40020470
24004e84:	40020488 	.word	0x40020488
24004e88:	400204a0 	.word	0x400204a0
24004e8c:	400204b8 	.word	0x400204b8
24004e90:	2300      	movs	r3, #0
24004e92:	2b00      	cmp	r3, #0
24004e94:	d057      	beq.n	24004f46 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004e96:	6a3b      	ldr	r3, [r7, #32]
24004e98:	681a      	ldr	r2, [r3, #0]
24004e9a:	68fb      	ldr	r3, [r7, #12]
24004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e9e:	f003 031f 	and.w	r3, r3, #31
24004ea2:	fa22 f303 	lsr.w	r3, r2, r3
24004ea6:	f003 0301 	and.w	r3, r3, #1
24004eaa:	2b00      	cmp	r3, #0
24004eac:	d00d      	beq.n	24004eca <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24004eae:	68fb      	ldr	r3, [r7, #12]
24004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004eb2:	f043 0202 	orr.w	r2, r3, #2
24004eb6:	68fb      	ldr	r3, [r7, #12]
24004eb8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004eba:	68fb      	ldr	r3, [r7, #12]
24004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004ebe:	f003 031f 	and.w	r3, r3, #31
24004ec2:	2201      	movs	r2, #1
24004ec4:	409a      	lsls	r2, r3
24004ec6:	69fb      	ldr	r3, [r7, #28]
24004ec8:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004eca:	6a3b      	ldr	r3, [r7, #32]
24004ecc:	681a      	ldr	r2, [r3, #0]
24004ece:	68fb      	ldr	r3, [r7, #12]
24004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004ed2:	f003 031f 	and.w	r3, r3, #31
24004ed6:	2104      	movs	r1, #4
24004ed8:	fa01 f303 	lsl.w	r3, r1, r3
24004edc:	4013      	ands	r3, r2
24004ede:	2b00      	cmp	r3, #0
24004ee0:	d00d      	beq.n	24004efe <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24004ee2:	68fb      	ldr	r3, [r7, #12]
24004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004ee6:	f043 0204 	orr.w	r2, r3, #4
24004eea:	68fb      	ldr	r3, [r7, #12]
24004eec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004eee:	68fb      	ldr	r3, [r7, #12]
24004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004ef2:	f003 031f 	and.w	r3, r3, #31
24004ef6:	2204      	movs	r2, #4
24004ef8:	409a      	lsls	r2, r3
24004efa:	69fb      	ldr	r3, [r7, #28]
24004efc:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004efe:	6a3b      	ldr	r3, [r7, #32]
24004f00:	681a      	ldr	r2, [r3, #0]
24004f02:	68fb      	ldr	r3, [r7, #12]
24004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f06:	f003 031f 	and.w	r3, r3, #31
24004f0a:	2108      	movs	r1, #8
24004f0c:	fa01 f303 	lsl.w	r3, r1, r3
24004f10:	4013      	ands	r3, r2
24004f12:	2b00      	cmp	r3, #0
24004f14:	d038      	beq.n	24004f88 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24004f16:	68fb      	ldr	r3, [r7, #12]
24004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004f1a:	f043 0201 	orr.w	r2, r3, #1
24004f1e:	68fb      	ldr	r3, [r7, #12]
24004f20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004f22:	68fb      	ldr	r3, [r7, #12]
24004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f26:	f003 031f 	and.w	r3, r3, #31
24004f2a:	2208      	movs	r2, #8
24004f2c:	409a      	lsls	r2, r3
24004f2e:	69fb      	ldr	r3, [r7, #28]
24004f30:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24004f32:	68fb      	ldr	r3, [r7, #12]
24004f34:	2201      	movs	r2, #1
24004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24004f3a:	68fb      	ldr	r3, [r7, #12]
24004f3c:	2200      	movs	r2, #0
24004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24004f42:	2301      	movs	r3, #1
24004f44:	e1f0      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004f46:	6a3b      	ldr	r3, [r7, #32]
24004f48:	681a      	ldr	r2, [r3, #0]
24004f4a:	68fb      	ldr	r3, [r7, #12]
24004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f4e:	f003 031f 	and.w	r3, r3, #31
24004f52:	2108      	movs	r1, #8
24004f54:	fa01 f303 	lsl.w	r3, r1, r3
24004f58:	4013      	ands	r3, r2
24004f5a:	2b00      	cmp	r3, #0
24004f5c:	d014      	beq.n	24004f88 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
24004f5e:	68fb      	ldr	r3, [r7, #12]
24004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f62:	f003 031f 	and.w	r3, r3, #31
24004f66:	2201      	movs	r2, #1
24004f68:	409a      	lsls	r2, r3
24004f6a:	6a3b      	ldr	r3, [r7, #32]
24004f6c:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
24004f6e:	68fb      	ldr	r3, [r7, #12]
24004f70:	2201      	movs	r2, #1
24004f72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24004f74:	68fb      	ldr	r3, [r7, #12]
24004f76:	2201      	movs	r2, #1
24004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24004f7c:	68fb      	ldr	r3, [r7, #12]
24004f7e:	2200      	movs	r2, #0
24004f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24004f84:	2301      	movs	r3, #1
24004f86:	e1cf      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
24004f88:	687b      	ldr	r3, [r7, #4]
24004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
24004f8e:	d012      	beq.n	24004fb6 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
24004f90:	f7fd f8dc 	bl	2400214c <HAL_GetTick>
24004f94:	4602      	mov	r2, r0
24004f96:	697b      	ldr	r3, [r7, #20]
24004f98:	1ad3      	subs	r3, r2, r3
24004f9a:	687a      	ldr	r2, [r7, #4]
24004f9c:	429a      	cmp	r2, r3
24004f9e:	d302      	bcc.n	24004fa6 <HAL_DMA_PollForTransfer+0x38a>
24004fa0:	687b      	ldr	r3, [r7, #4]
24004fa2:	2b00      	cmp	r3, #0
24004fa4:	d107      	bne.n	24004fb6 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004fa6:	68fb      	ldr	r3, [r7, #12]
24004fa8:	2220      	movs	r2, #32
24004faa:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
24004fac:	68f8      	ldr	r0, [r7, #12]
24004fae:	f7ff f8d1 	bl	24004154 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
24004fb2:	2301      	movs	r3, #1
24004fb4:	e1b8      	b.n	24005328 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004fb6:	68fb      	ldr	r3, [r7, #12]
24004fb8:	681b      	ldr	r3, [r3, #0]
24004fba:	4a81      	ldr	r2, [pc, #516]	; (240051c0 <HAL_DMA_PollForTransfer+0x5a4>)
24004fbc:	4293      	cmp	r3, r2
24004fbe:	d072      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004fc0:	68fb      	ldr	r3, [r7, #12]
24004fc2:	681b      	ldr	r3, [r3, #0]
24004fc4:	4a7f      	ldr	r2, [pc, #508]	; (240051c4 <HAL_DMA_PollForTransfer+0x5a8>)
24004fc6:	4293      	cmp	r3, r2
24004fc8:	d06d      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004fca:	68fb      	ldr	r3, [r7, #12]
24004fcc:	681b      	ldr	r3, [r3, #0]
24004fce:	4a7e      	ldr	r2, [pc, #504]	; (240051c8 <HAL_DMA_PollForTransfer+0x5ac>)
24004fd0:	4293      	cmp	r3, r2
24004fd2:	d068      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004fd4:	68fb      	ldr	r3, [r7, #12]
24004fd6:	681b      	ldr	r3, [r3, #0]
24004fd8:	4a7c      	ldr	r2, [pc, #496]	; (240051cc <HAL_DMA_PollForTransfer+0x5b0>)
24004fda:	4293      	cmp	r3, r2
24004fdc:	d063      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004fde:	68fb      	ldr	r3, [r7, #12]
24004fe0:	681b      	ldr	r3, [r3, #0]
24004fe2:	4a7b      	ldr	r2, [pc, #492]	; (240051d0 <HAL_DMA_PollForTransfer+0x5b4>)
24004fe4:	4293      	cmp	r3, r2
24004fe6:	d05e      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004fe8:	68fb      	ldr	r3, [r7, #12]
24004fea:	681b      	ldr	r3, [r3, #0]
24004fec:	4a79      	ldr	r2, [pc, #484]	; (240051d4 <HAL_DMA_PollForTransfer+0x5b8>)
24004fee:	4293      	cmp	r3, r2
24004ff0:	d059      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004ff2:	68fb      	ldr	r3, [r7, #12]
24004ff4:	681b      	ldr	r3, [r3, #0]
24004ff6:	4a78      	ldr	r2, [pc, #480]	; (240051d8 <HAL_DMA_PollForTransfer+0x5bc>)
24004ff8:	4293      	cmp	r3, r2
24004ffa:	d054      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24004ffc:	68fb      	ldr	r3, [r7, #12]
24004ffe:	681b      	ldr	r3, [r3, #0]
24005000:	4a76      	ldr	r2, [pc, #472]	; (240051dc <HAL_DMA_PollForTransfer+0x5c0>)
24005002:	4293      	cmp	r3, r2
24005004:	d04f      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005006:	68fb      	ldr	r3, [r7, #12]
24005008:	681b      	ldr	r3, [r3, #0]
2400500a:	4a75      	ldr	r2, [pc, #468]	; (240051e0 <HAL_DMA_PollForTransfer+0x5c4>)
2400500c:	4293      	cmp	r3, r2
2400500e:	d04a      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005010:	68fb      	ldr	r3, [r7, #12]
24005012:	681b      	ldr	r3, [r3, #0]
24005014:	4a73      	ldr	r2, [pc, #460]	; (240051e4 <HAL_DMA_PollForTransfer+0x5c8>)
24005016:	4293      	cmp	r3, r2
24005018:	d045      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400501a:	68fb      	ldr	r3, [r7, #12]
2400501c:	681b      	ldr	r3, [r3, #0]
2400501e:	4a72      	ldr	r2, [pc, #456]	; (240051e8 <HAL_DMA_PollForTransfer+0x5cc>)
24005020:	4293      	cmp	r3, r2
24005022:	d040      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005024:	68fb      	ldr	r3, [r7, #12]
24005026:	681b      	ldr	r3, [r3, #0]
24005028:	4a70      	ldr	r2, [pc, #448]	; (240051ec <HAL_DMA_PollForTransfer+0x5d0>)
2400502a:	4293      	cmp	r3, r2
2400502c:	d03b      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400502e:	68fb      	ldr	r3, [r7, #12]
24005030:	681b      	ldr	r3, [r3, #0]
24005032:	4a6f      	ldr	r2, [pc, #444]	; (240051f0 <HAL_DMA_PollForTransfer+0x5d4>)
24005034:	4293      	cmp	r3, r2
24005036:	d036      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005038:	68fb      	ldr	r3, [r7, #12]
2400503a:	681b      	ldr	r3, [r3, #0]
2400503c:	4a6d      	ldr	r2, [pc, #436]	; (240051f4 <HAL_DMA_PollForTransfer+0x5d8>)
2400503e:	4293      	cmp	r3, r2
24005040:	d031      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005042:	68fb      	ldr	r3, [r7, #12]
24005044:	681b      	ldr	r3, [r3, #0]
24005046:	4a6c      	ldr	r2, [pc, #432]	; (240051f8 <HAL_DMA_PollForTransfer+0x5dc>)
24005048:	4293      	cmp	r3, r2
2400504a:	d02c      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400504c:	68fb      	ldr	r3, [r7, #12]
2400504e:	681b      	ldr	r3, [r3, #0]
24005050:	4a6a      	ldr	r2, [pc, #424]	; (240051fc <HAL_DMA_PollForTransfer+0x5e0>)
24005052:	4293      	cmp	r3, r2
24005054:	d027      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005056:	68fb      	ldr	r3, [r7, #12]
24005058:	681b      	ldr	r3, [r3, #0]
2400505a:	4a69      	ldr	r2, [pc, #420]	; (24005200 <HAL_DMA_PollForTransfer+0x5e4>)
2400505c:	4293      	cmp	r3, r2
2400505e:	d022      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005060:	68fb      	ldr	r3, [r7, #12]
24005062:	681b      	ldr	r3, [r3, #0]
24005064:	4a67      	ldr	r2, [pc, #412]	; (24005204 <HAL_DMA_PollForTransfer+0x5e8>)
24005066:	4293      	cmp	r3, r2
24005068:	d01d      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400506a:	68fb      	ldr	r3, [r7, #12]
2400506c:	681b      	ldr	r3, [r3, #0]
2400506e:	4a66      	ldr	r2, [pc, #408]	; (24005208 <HAL_DMA_PollForTransfer+0x5ec>)
24005070:	4293      	cmp	r3, r2
24005072:	d018      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005074:	68fb      	ldr	r3, [r7, #12]
24005076:	681b      	ldr	r3, [r3, #0]
24005078:	4a64      	ldr	r2, [pc, #400]	; (2400520c <HAL_DMA_PollForTransfer+0x5f0>)
2400507a:	4293      	cmp	r3, r2
2400507c:	d013      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400507e:	68fb      	ldr	r3, [r7, #12]
24005080:	681b      	ldr	r3, [r3, #0]
24005082:	4a63      	ldr	r2, [pc, #396]	; (24005210 <HAL_DMA_PollForTransfer+0x5f4>)
24005084:	4293      	cmp	r3, r2
24005086:	d00e      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005088:	68fb      	ldr	r3, [r7, #12]
2400508a:	681b      	ldr	r3, [r3, #0]
2400508c:	4a61      	ldr	r2, [pc, #388]	; (24005214 <HAL_DMA_PollForTransfer+0x5f8>)
2400508e:	4293      	cmp	r3, r2
24005090:	d009      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
24005092:	68fb      	ldr	r3, [r7, #12]
24005094:	681b      	ldr	r3, [r3, #0]
24005096:	4a60      	ldr	r2, [pc, #384]	; (24005218 <HAL_DMA_PollForTransfer+0x5fc>)
24005098:	4293      	cmp	r3, r2
2400509a:	d004      	beq.n	240050a6 <HAL_DMA_PollForTransfer+0x48a>
2400509c:	68fb      	ldr	r3, [r7, #12]
2400509e:	681b      	ldr	r3, [r3, #0]
240050a0:	4a5e      	ldr	r2, [pc, #376]	; (2400521c <HAL_DMA_PollForTransfer+0x600>)
240050a2:	4293      	cmp	r3, r2
240050a4:	d101      	bne.n	240050aa <HAL_DMA_PollForTransfer+0x48e>
240050a6:	2301      	movs	r3, #1
240050a8:	e000      	b.n	240050ac <HAL_DMA_PollForTransfer+0x490>
240050aa:	2300      	movs	r3, #0
240050ac:	2b00      	cmp	r3, #0
240050ae:	d029      	beq.n	24005104 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
240050b0:	68fb      	ldr	r3, [r7, #12]
240050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240050b4:	2b00      	cmp	r3, #0
240050b6:	d012      	beq.n	240050de <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240050b8:	68fb      	ldr	r3, [r7, #12]
240050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240050bc:	681a      	ldr	r2, [r3, #0]
240050be:	68fb      	ldr	r3, [r7, #12]
240050c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240050c2:	4013      	ands	r3, r2
240050c4:	2b00      	cmp	r3, #0
240050c6:	d00a      	beq.n	240050de <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240050c8:	68fb      	ldr	r3, [r7, #12]
240050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240050cc:	68fa      	ldr	r2, [r7, #12]
240050ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
240050d0:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240050d2:	68fb      	ldr	r3, [r7, #12]
240050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240050d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
240050da:	68fb      	ldr	r3, [r7, #12]
240050dc:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240050de:	68fb      	ldr	r3, [r7, #12]
240050e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240050e2:	681a      	ldr	r2, [r3, #0]
240050e4:	68fb      	ldr	r3, [r7, #12]
240050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240050e8:	4013      	ands	r3, r2
240050ea:	2b00      	cmp	r3, #0
240050ec:	d00a      	beq.n	24005104 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240050ee:	68fb      	ldr	r3, [r7, #12]
240050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240050f2:	68fa      	ldr	r2, [r7, #12]
240050f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
240050f6:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240050f8:	68fb      	ldr	r3, [r7, #12]
240050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240050fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24005100:	68fb      	ldr	r3, [r7, #12]
24005102:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
24005104:	6a3b      	ldr	r3, [r7, #32]
24005106:	681a      	ldr	r2, [r3, #0]
24005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400510a:	4013      	ands	r3, r2
2400510c:	2b00      	cmp	r3, #0
2400510e:	f43f ae4c 	beq.w	24004daa <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24005112:	7afb      	ldrb	r3, [r7, #11]
24005114:	2b00      	cmp	r3, #0
24005116:	f040 80a0 	bne.w	2400525a <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400511a:	68fb      	ldr	r3, [r7, #12]
2400511c:	681b      	ldr	r3, [r3, #0]
2400511e:	4a28      	ldr	r2, [pc, #160]	; (240051c0 <HAL_DMA_PollForTransfer+0x5a4>)
24005120:	4293      	cmp	r3, r2
24005122:	d04a      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005124:	68fb      	ldr	r3, [r7, #12]
24005126:	681b      	ldr	r3, [r3, #0]
24005128:	4a26      	ldr	r2, [pc, #152]	; (240051c4 <HAL_DMA_PollForTransfer+0x5a8>)
2400512a:	4293      	cmp	r3, r2
2400512c:	d045      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
2400512e:	68fb      	ldr	r3, [r7, #12]
24005130:	681b      	ldr	r3, [r3, #0]
24005132:	4a25      	ldr	r2, [pc, #148]	; (240051c8 <HAL_DMA_PollForTransfer+0x5ac>)
24005134:	4293      	cmp	r3, r2
24005136:	d040      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005138:	68fb      	ldr	r3, [r7, #12]
2400513a:	681b      	ldr	r3, [r3, #0]
2400513c:	4a23      	ldr	r2, [pc, #140]	; (240051cc <HAL_DMA_PollForTransfer+0x5b0>)
2400513e:	4293      	cmp	r3, r2
24005140:	d03b      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005142:	68fb      	ldr	r3, [r7, #12]
24005144:	681b      	ldr	r3, [r3, #0]
24005146:	4a22      	ldr	r2, [pc, #136]	; (240051d0 <HAL_DMA_PollForTransfer+0x5b4>)
24005148:	4293      	cmp	r3, r2
2400514a:	d036      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
2400514c:	68fb      	ldr	r3, [r7, #12]
2400514e:	681b      	ldr	r3, [r3, #0]
24005150:	4a20      	ldr	r2, [pc, #128]	; (240051d4 <HAL_DMA_PollForTransfer+0x5b8>)
24005152:	4293      	cmp	r3, r2
24005154:	d031      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005156:	68fb      	ldr	r3, [r7, #12]
24005158:	681b      	ldr	r3, [r3, #0]
2400515a:	4a1f      	ldr	r2, [pc, #124]	; (240051d8 <HAL_DMA_PollForTransfer+0x5bc>)
2400515c:	4293      	cmp	r3, r2
2400515e:	d02c      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005160:	68fb      	ldr	r3, [r7, #12]
24005162:	681b      	ldr	r3, [r3, #0]
24005164:	4a1d      	ldr	r2, [pc, #116]	; (240051dc <HAL_DMA_PollForTransfer+0x5c0>)
24005166:	4293      	cmp	r3, r2
24005168:	d027      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
2400516a:	68fb      	ldr	r3, [r7, #12]
2400516c:	681b      	ldr	r3, [r3, #0]
2400516e:	4a1c      	ldr	r2, [pc, #112]	; (240051e0 <HAL_DMA_PollForTransfer+0x5c4>)
24005170:	4293      	cmp	r3, r2
24005172:	d022      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005174:	68fb      	ldr	r3, [r7, #12]
24005176:	681b      	ldr	r3, [r3, #0]
24005178:	4a1a      	ldr	r2, [pc, #104]	; (240051e4 <HAL_DMA_PollForTransfer+0x5c8>)
2400517a:	4293      	cmp	r3, r2
2400517c:	d01d      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
2400517e:	68fb      	ldr	r3, [r7, #12]
24005180:	681b      	ldr	r3, [r3, #0]
24005182:	4a19      	ldr	r2, [pc, #100]	; (240051e8 <HAL_DMA_PollForTransfer+0x5cc>)
24005184:	4293      	cmp	r3, r2
24005186:	d018      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005188:	68fb      	ldr	r3, [r7, #12]
2400518a:	681b      	ldr	r3, [r3, #0]
2400518c:	4a17      	ldr	r2, [pc, #92]	; (240051ec <HAL_DMA_PollForTransfer+0x5d0>)
2400518e:	4293      	cmp	r3, r2
24005190:	d013      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
24005192:	68fb      	ldr	r3, [r7, #12]
24005194:	681b      	ldr	r3, [r3, #0]
24005196:	4a16      	ldr	r2, [pc, #88]	; (240051f0 <HAL_DMA_PollForTransfer+0x5d4>)
24005198:	4293      	cmp	r3, r2
2400519a:	d00e      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
2400519c:	68fb      	ldr	r3, [r7, #12]
2400519e:	681b      	ldr	r3, [r3, #0]
240051a0:	4a14      	ldr	r2, [pc, #80]	; (240051f4 <HAL_DMA_PollForTransfer+0x5d8>)
240051a2:	4293      	cmp	r3, r2
240051a4:	d009      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
240051a6:	68fb      	ldr	r3, [r7, #12]
240051a8:	681b      	ldr	r3, [r3, #0]
240051aa:	4a13      	ldr	r2, [pc, #76]	; (240051f8 <HAL_DMA_PollForTransfer+0x5dc>)
240051ac:	4293      	cmp	r3, r2
240051ae:	d004      	beq.n	240051ba <HAL_DMA_PollForTransfer+0x59e>
240051b0:	68fb      	ldr	r3, [r7, #12]
240051b2:	681b      	ldr	r3, [r3, #0]
240051b4:	4a11      	ldr	r2, [pc, #68]	; (240051fc <HAL_DMA_PollForTransfer+0x5e0>)
240051b6:	4293      	cmp	r3, r2
240051b8:	d132      	bne.n	24005220 <HAL_DMA_PollForTransfer+0x604>
240051ba:	2301      	movs	r3, #1
240051bc:	e031      	b.n	24005222 <HAL_DMA_PollForTransfer+0x606>
240051be:	bf00      	nop
240051c0:	40020010 	.word	0x40020010
240051c4:	40020028 	.word	0x40020028
240051c8:	40020040 	.word	0x40020040
240051cc:	40020058 	.word	0x40020058
240051d0:	40020070 	.word	0x40020070
240051d4:	40020088 	.word	0x40020088
240051d8:	400200a0 	.word	0x400200a0
240051dc:	400200b8 	.word	0x400200b8
240051e0:	40020410 	.word	0x40020410
240051e4:	40020428 	.word	0x40020428
240051e8:	40020440 	.word	0x40020440
240051ec:	40020458 	.word	0x40020458
240051f0:	40020470 	.word	0x40020470
240051f4:	40020488 	.word	0x40020488
240051f8:	400204a0 	.word	0x400204a0
240051fc:	400204b8 	.word	0x400204b8
24005200:	58025408 	.word	0x58025408
24005204:	5802541c 	.word	0x5802541c
24005208:	58025430 	.word	0x58025430
2400520c:	58025444 	.word	0x58025444
24005210:	58025458 	.word	0x58025458
24005214:	5802546c 	.word	0x5802546c
24005218:	58025480 	.word	0x58025480
2400521c:	58025494 	.word	0x58025494
24005220:	2300      	movs	r3, #0
24005222:	2b00      	cmp	r3, #0
24005224:	d008      	beq.n	24005238 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
24005226:	68fb      	ldr	r3, [r7, #12]
24005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400522a:	f003 031f 	and.w	r3, r3, #31
2400522e:	2230      	movs	r2, #48	; 0x30
24005230:	409a      	lsls	r2, r3
24005232:	69fb      	ldr	r3, [r7, #28]
24005234:	601a      	str	r2, [r3, #0]
24005236:	e007      	b.n	24005248 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
24005238:	68fb      	ldr	r3, [r7, #12]
2400523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400523c:	f003 031f 	and.w	r3, r3, #31
24005240:	2202      	movs	r2, #2
24005242:	409a      	lsls	r2, r3
24005244:	69fb      	ldr	r3, [r7, #28]
24005246:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
24005248:	68fb      	ldr	r3, [r7, #12]
2400524a:	2201      	movs	r2, #1
2400524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24005250:	68fb      	ldr	r3, [r7, #12]
24005252:	2200      	movs	r2, #0
24005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
24005258:	e065      	b.n	24005326 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400525a:	68fb      	ldr	r3, [r7, #12]
2400525c:	681b      	ldr	r3, [r3, #0]
2400525e:	4a34      	ldr	r2, [pc, #208]	; (24005330 <HAL_DMA_PollForTransfer+0x714>)
24005260:	4293      	cmp	r3, r2
24005262:	d04a      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
24005264:	68fb      	ldr	r3, [r7, #12]
24005266:	681b      	ldr	r3, [r3, #0]
24005268:	4a32      	ldr	r2, [pc, #200]	; (24005334 <HAL_DMA_PollForTransfer+0x718>)
2400526a:	4293      	cmp	r3, r2
2400526c:	d045      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
2400526e:	68fb      	ldr	r3, [r7, #12]
24005270:	681b      	ldr	r3, [r3, #0]
24005272:	4a31      	ldr	r2, [pc, #196]	; (24005338 <HAL_DMA_PollForTransfer+0x71c>)
24005274:	4293      	cmp	r3, r2
24005276:	d040      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
24005278:	68fb      	ldr	r3, [r7, #12]
2400527a:	681b      	ldr	r3, [r3, #0]
2400527c:	4a2f      	ldr	r2, [pc, #188]	; (2400533c <HAL_DMA_PollForTransfer+0x720>)
2400527e:	4293      	cmp	r3, r2
24005280:	d03b      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
24005282:	68fb      	ldr	r3, [r7, #12]
24005284:	681b      	ldr	r3, [r3, #0]
24005286:	4a2e      	ldr	r2, [pc, #184]	; (24005340 <HAL_DMA_PollForTransfer+0x724>)
24005288:	4293      	cmp	r3, r2
2400528a:	d036      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
2400528c:	68fb      	ldr	r3, [r7, #12]
2400528e:	681b      	ldr	r3, [r3, #0]
24005290:	4a2c      	ldr	r2, [pc, #176]	; (24005344 <HAL_DMA_PollForTransfer+0x728>)
24005292:	4293      	cmp	r3, r2
24005294:	d031      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
24005296:	68fb      	ldr	r3, [r7, #12]
24005298:	681b      	ldr	r3, [r3, #0]
2400529a:	4a2b      	ldr	r2, [pc, #172]	; (24005348 <HAL_DMA_PollForTransfer+0x72c>)
2400529c:	4293      	cmp	r3, r2
2400529e:	d02c      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052a0:	68fb      	ldr	r3, [r7, #12]
240052a2:	681b      	ldr	r3, [r3, #0]
240052a4:	4a29      	ldr	r2, [pc, #164]	; (2400534c <HAL_DMA_PollForTransfer+0x730>)
240052a6:	4293      	cmp	r3, r2
240052a8:	d027      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052aa:	68fb      	ldr	r3, [r7, #12]
240052ac:	681b      	ldr	r3, [r3, #0]
240052ae:	4a28      	ldr	r2, [pc, #160]	; (24005350 <HAL_DMA_PollForTransfer+0x734>)
240052b0:	4293      	cmp	r3, r2
240052b2:	d022      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052b4:	68fb      	ldr	r3, [r7, #12]
240052b6:	681b      	ldr	r3, [r3, #0]
240052b8:	4a26      	ldr	r2, [pc, #152]	; (24005354 <HAL_DMA_PollForTransfer+0x738>)
240052ba:	4293      	cmp	r3, r2
240052bc:	d01d      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052be:	68fb      	ldr	r3, [r7, #12]
240052c0:	681b      	ldr	r3, [r3, #0]
240052c2:	4a25      	ldr	r2, [pc, #148]	; (24005358 <HAL_DMA_PollForTransfer+0x73c>)
240052c4:	4293      	cmp	r3, r2
240052c6:	d018      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052c8:	68fb      	ldr	r3, [r7, #12]
240052ca:	681b      	ldr	r3, [r3, #0]
240052cc:	4a23      	ldr	r2, [pc, #140]	; (2400535c <HAL_DMA_PollForTransfer+0x740>)
240052ce:	4293      	cmp	r3, r2
240052d0:	d013      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052d2:	68fb      	ldr	r3, [r7, #12]
240052d4:	681b      	ldr	r3, [r3, #0]
240052d6:	4a22      	ldr	r2, [pc, #136]	; (24005360 <HAL_DMA_PollForTransfer+0x744>)
240052d8:	4293      	cmp	r3, r2
240052da:	d00e      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052dc:	68fb      	ldr	r3, [r7, #12]
240052de:	681b      	ldr	r3, [r3, #0]
240052e0:	4a20      	ldr	r2, [pc, #128]	; (24005364 <HAL_DMA_PollForTransfer+0x748>)
240052e2:	4293      	cmp	r3, r2
240052e4:	d009      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052e6:	68fb      	ldr	r3, [r7, #12]
240052e8:	681b      	ldr	r3, [r3, #0]
240052ea:	4a1f      	ldr	r2, [pc, #124]	; (24005368 <HAL_DMA_PollForTransfer+0x74c>)
240052ec:	4293      	cmp	r3, r2
240052ee:	d004      	beq.n	240052fa <HAL_DMA_PollForTransfer+0x6de>
240052f0:	68fb      	ldr	r3, [r7, #12]
240052f2:	681b      	ldr	r3, [r3, #0]
240052f4:	4a1d      	ldr	r2, [pc, #116]	; (2400536c <HAL_DMA_PollForTransfer+0x750>)
240052f6:	4293      	cmp	r3, r2
240052f8:	d101      	bne.n	240052fe <HAL_DMA_PollForTransfer+0x6e2>
240052fa:	2301      	movs	r3, #1
240052fc:	e000      	b.n	24005300 <HAL_DMA_PollForTransfer+0x6e4>
240052fe:	2300      	movs	r3, #0
24005300:	2b00      	cmp	r3, #0
24005302:	d008      	beq.n	24005316 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
24005304:	68fb      	ldr	r3, [r7, #12]
24005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005308:	f003 031f 	and.w	r3, r3, #31
2400530c:	2210      	movs	r2, #16
2400530e:	409a      	lsls	r2, r3
24005310:	69fb      	ldr	r3, [r7, #28]
24005312:	601a      	str	r2, [r3, #0]
24005314:	e007      	b.n	24005326 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
24005316:	68fb      	ldr	r3, [r7, #12]
24005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400531a:	f003 031f 	and.w	r3, r3, #31
2400531e:	2204      	movs	r2, #4
24005320:	409a      	lsls	r2, r3
24005322:	69fb      	ldr	r3, [r7, #28]
24005324:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
24005326:	7efb      	ldrb	r3, [r7, #27]
}
24005328:	4618      	mov	r0, r3
2400532a:	3728      	adds	r7, #40	; 0x28
2400532c:	46bd      	mov	sp, r7
2400532e:	bd80      	pop	{r7, pc}
24005330:	40020010 	.word	0x40020010
24005334:	40020028 	.word	0x40020028
24005338:	40020040 	.word	0x40020040
2400533c:	40020058 	.word	0x40020058
24005340:	40020070 	.word	0x40020070
24005344:	40020088 	.word	0x40020088
24005348:	400200a0 	.word	0x400200a0
2400534c:	400200b8 	.word	0x400200b8
24005350:	40020410 	.word	0x40020410
24005354:	40020428 	.word	0x40020428
24005358:	40020440 	.word	0x40020440
2400535c:	40020458 	.word	0x40020458
24005360:	40020470 	.word	0x40020470
24005364:	40020488 	.word	0x40020488
24005368:	400204a0 	.word	0x400204a0
2400536c:	400204b8 	.word	0x400204b8

24005370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
24005370:	b580      	push	{r7, lr}
24005372:	b08a      	sub	sp, #40	; 0x28
24005374:	af00      	add	r7, sp, #0
24005376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
24005378:	2300      	movs	r3, #0
2400537a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
2400537c:	4b67      	ldr	r3, [pc, #412]	; (2400551c <HAL_DMA_IRQHandler+0x1ac>)
2400537e:	681b      	ldr	r3, [r3, #0]
24005380:	4a67      	ldr	r2, [pc, #412]	; (24005520 <HAL_DMA_IRQHandler+0x1b0>)
24005382:	fba2 2303 	umull	r2, r3, r2, r3
24005386:	0a9b      	lsrs	r3, r3, #10
24005388:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400538a:	687b      	ldr	r3, [r7, #4]
2400538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400538e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005390:	687b      	ldr	r3, [r7, #4]
24005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
24005396:	6a3b      	ldr	r3, [r7, #32]
24005398:	681b      	ldr	r3, [r3, #0]
2400539a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
2400539c:	69fb      	ldr	r3, [r7, #28]
2400539e:	681b      	ldr	r3, [r3, #0]
240053a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240053a2:	687b      	ldr	r3, [r7, #4]
240053a4:	681b      	ldr	r3, [r3, #0]
240053a6:	4a5f      	ldr	r2, [pc, #380]	; (24005524 <HAL_DMA_IRQHandler+0x1b4>)
240053a8:	4293      	cmp	r3, r2
240053aa:	d04a      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053ac:	687b      	ldr	r3, [r7, #4]
240053ae:	681b      	ldr	r3, [r3, #0]
240053b0:	4a5d      	ldr	r2, [pc, #372]	; (24005528 <HAL_DMA_IRQHandler+0x1b8>)
240053b2:	4293      	cmp	r3, r2
240053b4:	d045      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053b6:	687b      	ldr	r3, [r7, #4]
240053b8:	681b      	ldr	r3, [r3, #0]
240053ba:	4a5c      	ldr	r2, [pc, #368]	; (2400552c <HAL_DMA_IRQHandler+0x1bc>)
240053bc:	4293      	cmp	r3, r2
240053be:	d040      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053c0:	687b      	ldr	r3, [r7, #4]
240053c2:	681b      	ldr	r3, [r3, #0]
240053c4:	4a5a      	ldr	r2, [pc, #360]	; (24005530 <HAL_DMA_IRQHandler+0x1c0>)
240053c6:	4293      	cmp	r3, r2
240053c8:	d03b      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053ca:	687b      	ldr	r3, [r7, #4]
240053cc:	681b      	ldr	r3, [r3, #0]
240053ce:	4a59      	ldr	r2, [pc, #356]	; (24005534 <HAL_DMA_IRQHandler+0x1c4>)
240053d0:	4293      	cmp	r3, r2
240053d2:	d036      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053d4:	687b      	ldr	r3, [r7, #4]
240053d6:	681b      	ldr	r3, [r3, #0]
240053d8:	4a57      	ldr	r2, [pc, #348]	; (24005538 <HAL_DMA_IRQHandler+0x1c8>)
240053da:	4293      	cmp	r3, r2
240053dc:	d031      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053de:	687b      	ldr	r3, [r7, #4]
240053e0:	681b      	ldr	r3, [r3, #0]
240053e2:	4a56      	ldr	r2, [pc, #344]	; (2400553c <HAL_DMA_IRQHandler+0x1cc>)
240053e4:	4293      	cmp	r3, r2
240053e6:	d02c      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053e8:	687b      	ldr	r3, [r7, #4]
240053ea:	681b      	ldr	r3, [r3, #0]
240053ec:	4a54      	ldr	r2, [pc, #336]	; (24005540 <HAL_DMA_IRQHandler+0x1d0>)
240053ee:	4293      	cmp	r3, r2
240053f0:	d027      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053f2:	687b      	ldr	r3, [r7, #4]
240053f4:	681b      	ldr	r3, [r3, #0]
240053f6:	4a53      	ldr	r2, [pc, #332]	; (24005544 <HAL_DMA_IRQHandler+0x1d4>)
240053f8:	4293      	cmp	r3, r2
240053fa:	d022      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
240053fc:	687b      	ldr	r3, [r7, #4]
240053fe:	681b      	ldr	r3, [r3, #0]
24005400:	4a51      	ldr	r2, [pc, #324]	; (24005548 <HAL_DMA_IRQHandler+0x1d8>)
24005402:	4293      	cmp	r3, r2
24005404:	d01d      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
24005406:	687b      	ldr	r3, [r7, #4]
24005408:	681b      	ldr	r3, [r3, #0]
2400540a:	4a50      	ldr	r2, [pc, #320]	; (2400554c <HAL_DMA_IRQHandler+0x1dc>)
2400540c:	4293      	cmp	r3, r2
2400540e:	d018      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
24005410:	687b      	ldr	r3, [r7, #4]
24005412:	681b      	ldr	r3, [r3, #0]
24005414:	4a4e      	ldr	r2, [pc, #312]	; (24005550 <HAL_DMA_IRQHandler+0x1e0>)
24005416:	4293      	cmp	r3, r2
24005418:	d013      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
2400541a:	687b      	ldr	r3, [r7, #4]
2400541c:	681b      	ldr	r3, [r3, #0]
2400541e:	4a4d      	ldr	r2, [pc, #308]	; (24005554 <HAL_DMA_IRQHandler+0x1e4>)
24005420:	4293      	cmp	r3, r2
24005422:	d00e      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
24005424:	687b      	ldr	r3, [r7, #4]
24005426:	681b      	ldr	r3, [r3, #0]
24005428:	4a4b      	ldr	r2, [pc, #300]	; (24005558 <HAL_DMA_IRQHandler+0x1e8>)
2400542a:	4293      	cmp	r3, r2
2400542c:	d009      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
2400542e:	687b      	ldr	r3, [r7, #4]
24005430:	681b      	ldr	r3, [r3, #0]
24005432:	4a4a      	ldr	r2, [pc, #296]	; (2400555c <HAL_DMA_IRQHandler+0x1ec>)
24005434:	4293      	cmp	r3, r2
24005436:	d004      	beq.n	24005442 <HAL_DMA_IRQHandler+0xd2>
24005438:	687b      	ldr	r3, [r7, #4]
2400543a:	681b      	ldr	r3, [r3, #0]
2400543c:	4a48      	ldr	r2, [pc, #288]	; (24005560 <HAL_DMA_IRQHandler+0x1f0>)
2400543e:	4293      	cmp	r3, r2
24005440:	d101      	bne.n	24005446 <HAL_DMA_IRQHandler+0xd6>
24005442:	2301      	movs	r3, #1
24005444:	e000      	b.n	24005448 <HAL_DMA_IRQHandler+0xd8>
24005446:	2300      	movs	r3, #0
24005448:	2b00      	cmp	r3, #0
2400544a:	f000 842b 	beq.w	24005ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400544e:	687b      	ldr	r3, [r7, #4]
24005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005452:	f003 031f 	and.w	r3, r3, #31
24005456:	2208      	movs	r2, #8
24005458:	409a      	lsls	r2, r3
2400545a:	69bb      	ldr	r3, [r7, #24]
2400545c:	4013      	ands	r3, r2
2400545e:	2b00      	cmp	r3, #0
24005460:	f000 80a2 	beq.w	240055a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005464:	687b      	ldr	r3, [r7, #4]
24005466:	681b      	ldr	r3, [r3, #0]
24005468:	4a2e      	ldr	r2, [pc, #184]	; (24005524 <HAL_DMA_IRQHandler+0x1b4>)
2400546a:	4293      	cmp	r3, r2
2400546c:	d04a      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
2400546e:	687b      	ldr	r3, [r7, #4]
24005470:	681b      	ldr	r3, [r3, #0]
24005472:	4a2d      	ldr	r2, [pc, #180]	; (24005528 <HAL_DMA_IRQHandler+0x1b8>)
24005474:	4293      	cmp	r3, r2
24005476:	d045      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
24005478:	687b      	ldr	r3, [r7, #4]
2400547a:	681b      	ldr	r3, [r3, #0]
2400547c:	4a2b      	ldr	r2, [pc, #172]	; (2400552c <HAL_DMA_IRQHandler+0x1bc>)
2400547e:	4293      	cmp	r3, r2
24005480:	d040      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
24005482:	687b      	ldr	r3, [r7, #4]
24005484:	681b      	ldr	r3, [r3, #0]
24005486:	4a2a      	ldr	r2, [pc, #168]	; (24005530 <HAL_DMA_IRQHandler+0x1c0>)
24005488:	4293      	cmp	r3, r2
2400548a:	d03b      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
2400548c:	687b      	ldr	r3, [r7, #4]
2400548e:	681b      	ldr	r3, [r3, #0]
24005490:	4a28      	ldr	r2, [pc, #160]	; (24005534 <HAL_DMA_IRQHandler+0x1c4>)
24005492:	4293      	cmp	r3, r2
24005494:	d036      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
24005496:	687b      	ldr	r3, [r7, #4]
24005498:	681b      	ldr	r3, [r3, #0]
2400549a:	4a27      	ldr	r2, [pc, #156]	; (24005538 <HAL_DMA_IRQHandler+0x1c8>)
2400549c:	4293      	cmp	r3, r2
2400549e:	d031      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054a0:	687b      	ldr	r3, [r7, #4]
240054a2:	681b      	ldr	r3, [r3, #0]
240054a4:	4a25      	ldr	r2, [pc, #148]	; (2400553c <HAL_DMA_IRQHandler+0x1cc>)
240054a6:	4293      	cmp	r3, r2
240054a8:	d02c      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054aa:	687b      	ldr	r3, [r7, #4]
240054ac:	681b      	ldr	r3, [r3, #0]
240054ae:	4a24      	ldr	r2, [pc, #144]	; (24005540 <HAL_DMA_IRQHandler+0x1d0>)
240054b0:	4293      	cmp	r3, r2
240054b2:	d027      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054b4:	687b      	ldr	r3, [r7, #4]
240054b6:	681b      	ldr	r3, [r3, #0]
240054b8:	4a22      	ldr	r2, [pc, #136]	; (24005544 <HAL_DMA_IRQHandler+0x1d4>)
240054ba:	4293      	cmp	r3, r2
240054bc:	d022      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054be:	687b      	ldr	r3, [r7, #4]
240054c0:	681b      	ldr	r3, [r3, #0]
240054c2:	4a21      	ldr	r2, [pc, #132]	; (24005548 <HAL_DMA_IRQHandler+0x1d8>)
240054c4:	4293      	cmp	r3, r2
240054c6:	d01d      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054c8:	687b      	ldr	r3, [r7, #4]
240054ca:	681b      	ldr	r3, [r3, #0]
240054cc:	4a1f      	ldr	r2, [pc, #124]	; (2400554c <HAL_DMA_IRQHandler+0x1dc>)
240054ce:	4293      	cmp	r3, r2
240054d0:	d018      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054d2:	687b      	ldr	r3, [r7, #4]
240054d4:	681b      	ldr	r3, [r3, #0]
240054d6:	4a1e      	ldr	r2, [pc, #120]	; (24005550 <HAL_DMA_IRQHandler+0x1e0>)
240054d8:	4293      	cmp	r3, r2
240054da:	d013      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054dc:	687b      	ldr	r3, [r7, #4]
240054de:	681b      	ldr	r3, [r3, #0]
240054e0:	4a1c      	ldr	r2, [pc, #112]	; (24005554 <HAL_DMA_IRQHandler+0x1e4>)
240054e2:	4293      	cmp	r3, r2
240054e4:	d00e      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054e6:	687b      	ldr	r3, [r7, #4]
240054e8:	681b      	ldr	r3, [r3, #0]
240054ea:	4a1b      	ldr	r2, [pc, #108]	; (24005558 <HAL_DMA_IRQHandler+0x1e8>)
240054ec:	4293      	cmp	r3, r2
240054ee:	d009      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054f0:	687b      	ldr	r3, [r7, #4]
240054f2:	681b      	ldr	r3, [r3, #0]
240054f4:	4a19      	ldr	r2, [pc, #100]	; (2400555c <HAL_DMA_IRQHandler+0x1ec>)
240054f6:	4293      	cmp	r3, r2
240054f8:	d004      	beq.n	24005504 <HAL_DMA_IRQHandler+0x194>
240054fa:	687b      	ldr	r3, [r7, #4]
240054fc:	681b      	ldr	r3, [r3, #0]
240054fe:	4a18      	ldr	r2, [pc, #96]	; (24005560 <HAL_DMA_IRQHandler+0x1f0>)
24005500:	4293      	cmp	r3, r2
24005502:	d12f      	bne.n	24005564 <HAL_DMA_IRQHandler+0x1f4>
24005504:	687b      	ldr	r3, [r7, #4]
24005506:	681b      	ldr	r3, [r3, #0]
24005508:	681b      	ldr	r3, [r3, #0]
2400550a:	f003 0304 	and.w	r3, r3, #4
2400550e:	2b00      	cmp	r3, #0
24005510:	bf14      	ite	ne
24005512:	2301      	movne	r3, #1
24005514:	2300      	moveq	r3, #0
24005516:	b2db      	uxtb	r3, r3
24005518:	e02e      	b.n	24005578 <HAL_DMA_IRQHandler+0x208>
2400551a:	bf00      	nop
2400551c:	240004c8 	.word	0x240004c8
24005520:	1b4e81b5 	.word	0x1b4e81b5
24005524:	40020010 	.word	0x40020010
24005528:	40020028 	.word	0x40020028
2400552c:	40020040 	.word	0x40020040
24005530:	40020058 	.word	0x40020058
24005534:	40020070 	.word	0x40020070
24005538:	40020088 	.word	0x40020088
2400553c:	400200a0 	.word	0x400200a0
24005540:	400200b8 	.word	0x400200b8
24005544:	40020410 	.word	0x40020410
24005548:	40020428 	.word	0x40020428
2400554c:	40020440 	.word	0x40020440
24005550:	40020458 	.word	0x40020458
24005554:	40020470 	.word	0x40020470
24005558:	40020488 	.word	0x40020488
2400555c:	400204a0 	.word	0x400204a0
24005560:	400204b8 	.word	0x400204b8
24005564:	687b      	ldr	r3, [r7, #4]
24005566:	681b      	ldr	r3, [r3, #0]
24005568:	681b      	ldr	r3, [r3, #0]
2400556a:	f003 0308 	and.w	r3, r3, #8
2400556e:	2b00      	cmp	r3, #0
24005570:	bf14      	ite	ne
24005572:	2301      	movne	r3, #1
24005574:	2300      	moveq	r3, #0
24005576:	b2db      	uxtb	r3, r3
24005578:	2b00      	cmp	r3, #0
2400557a:	d015      	beq.n	240055a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
2400557c:	687b      	ldr	r3, [r7, #4]
2400557e:	681b      	ldr	r3, [r3, #0]
24005580:	681a      	ldr	r2, [r3, #0]
24005582:	687b      	ldr	r3, [r7, #4]
24005584:	681b      	ldr	r3, [r3, #0]
24005586:	f022 0204 	bic.w	r2, r2, #4
2400558a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400558c:	687b      	ldr	r3, [r7, #4]
2400558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005590:	f003 031f 	and.w	r3, r3, #31
24005594:	2208      	movs	r2, #8
24005596:	409a      	lsls	r2, r3
24005598:	6a3b      	ldr	r3, [r7, #32]
2400559a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2400559c:	687b      	ldr	r3, [r7, #4]
2400559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240055a0:	f043 0201 	orr.w	r2, r3, #1
240055a4:	687b      	ldr	r3, [r7, #4]
240055a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240055a8:	687b      	ldr	r3, [r7, #4]
240055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240055ac:	f003 031f 	and.w	r3, r3, #31
240055b0:	69ba      	ldr	r2, [r7, #24]
240055b2:	fa22 f303 	lsr.w	r3, r2, r3
240055b6:	f003 0301 	and.w	r3, r3, #1
240055ba:	2b00      	cmp	r3, #0
240055bc:	d06e      	beq.n	2400569c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240055be:	687b      	ldr	r3, [r7, #4]
240055c0:	681b      	ldr	r3, [r3, #0]
240055c2:	4a69      	ldr	r2, [pc, #420]	; (24005768 <HAL_DMA_IRQHandler+0x3f8>)
240055c4:	4293      	cmp	r3, r2
240055c6:	d04a      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055c8:	687b      	ldr	r3, [r7, #4]
240055ca:	681b      	ldr	r3, [r3, #0]
240055cc:	4a67      	ldr	r2, [pc, #412]	; (2400576c <HAL_DMA_IRQHandler+0x3fc>)
240055ce:	4293      	cmp	r3, r2
240055d0:	d045      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055d2:	687b      	ldr	r3, [r7, #4]
240055d4:	681b      	ldr	r3, [r3, #0]
240055d6:	4a66      	ldr	r2, [pc, #408]	; (24005770 <HAL_DMA_IRQHandler+0x400>)
240055d8:	4293      	cmp	r3, r2
240055da:	d040      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055dc:	687b      	ldr	r3, [r7, #4]
240055de:	681b      	ldr	r3, [r3, #0]
240055e0:	4a64      	ldr	r2, [pc, #400]	; (24005774 <HAL_DMA_IRQHandler+0x404>)
240055e2:	4293      	cmp	r3, r2
240055e4:	d03b      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055e6:	687b      	ldr	r3, [r7, #4]
240055e8:	681b      	ldr	r3, [r3, #0]
240055ea:	4a63      	ldr	r2, [pc, #396]	; (24005778 <HAL_DMA_IRQHandler+0x408>)
240055ec:	4293      	cmp	r3, r2
240055ee:	d036      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055f0:	687b      	ldr	r3, [r7, #4]
240055f2:	681b      	ldr	r3, [r3, #0]
240055f4:	4a61      	ldr	r2, [pc, #388]	; (2400577c <HAL_DMA_IRQHandler+0x40c>)
240055f6:	4293      	cmp	r3, r2
240055f8:	d031      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
240055fa:	687b      	ldr	r3, [r7, #4]
240055fc:	681b      	ldr	r3, [r3, #0]
240055fe:	4a60      	ldr	r2, [pc, #384]	; (24005780 <HAL_DMA_IRQHandler+0x410>)
24005600:	4293      	cmp	r3, r2
24005602:	d02c      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005604:	687b      	ldr	r3, [r7, #4]
24005606:	681b      	ldr	r3, [r3, #0]
24005608:	4a5e      	ldr	r2, [pc, #376]	; (24005784 <HAL_DMA_IRQHandler+0x414>)
2400560a:	4293      	cmp	r3, r2
2400560c:	d027      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
2400560e:	687b      	ldr	r3, [r7, #4]
24005610:	681b      	ldr	r3, [r3, #0]
24005612:	4a5d      	ldr	r2, [pc, #372]	; (24005788 <HAL_DMA_IRQHandler+0x418>)
24005614:	4293      	cmp	r3, r2
24005616:	d022      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005618:	687b      	ldr	r3, [r7, #4]
2400561a:	681b      	ldr	r3, [r3, #0]
2400561c:	4a5b      	ldr	r2, [pc, #364]	; (2400578c <HAL_DMA_IRQHandler+0x41c>)
2400561e:	4293      	cmp	r3, r2
24005620:	d01d      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005622:	687b      	ldr	r3, [r7, #4]
24005624:	681b      	ldr	r3, [r3, #0]
24005626:	4a5a      	ldr	r2, [pc, #360]	; (24005790 <HAL_DMA_IRQHandler+0x420>)
24005628:	4293      	cmp	r3, r2
2400562a:	d018      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
2400562c:	687b      	ldr	r3, [r7, #4]
2400562e:	681b      	ldr	r3, [r3, #0]
24005630:	4a58      	ldr	r2, [pc, #352]	; (24005794 <HAL_DMA_IRQHandler+0x424>)
24005632:	4293      	cmp	r3, r2
24005634:	d013      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005636:	687b      	ldr	r3, [r7, #4]
24005638:	681b      	ldr	r3, [r3, #0]
2400563a:	4a57      	ldr	r2, [pc, #348]	; (24005798 <HAL_DMA_IRQHandler+0x428>)
2400563c:	4293      	cmp	r3, r2
2400563e:	d00e      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005640:	687b      	ldr	r3, [r7, #4]
24005642:	681b      	ldr	r3, [r3, #0]
24005644:	4a55      	ldr	r2, [pc, #340]	; (2400579c <HAL_DMA_IRQHandler+0x42c>)
24005646:	4293      	cmp	r3, r2
24005648:	d009      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
2400564a:	687b      	ldr	r3, [r7, #4]
2400564c:	681b      	ldr	r3, [r3, #0]
2400564e:	4a54      	ldr	r2, [pc, #336]	; (240057a0 <HAL_DMA_IRQHandler+0x430>)
24005650:	4293      	cmp	r3, r2
24005652:	d004      	beq.n	2400565e <HAL_DMA_IRQHandler+0x2ee>
24005654:	687b      	ldr	r3, [r7, #4]
24005656:	681b      	ldr	r3, [r3, #0]
24005658:	4a52      	ldr	r2, [pc, #328]	; (240057a4 <HAL_DMA_IRQHandler+0x434>)
2400565a:	4293      	cmp	r3, r2
2400565c:	d10a      	bne.n	24005674 <HAL_DMA_IRQHandler+0x304>
2400565e:	687b      	ldr	r3, [r7, #4]
24005660:	681b      	ldr	r3, [r3, #0]
24005662:	695b      	ldr	r3, [r3, #20]
24005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
24005668:	2b00      	cmp	r3, #0
2400566a:	bf14      	ite	ne
2400566c:	2301      	movne	r3, #1
2400566e:	2300      	moveq	r3, #0
24005670:	b2db      	uxtb	r3, r3
24005672:	e003      	b.n	2400567c <HAL_DMA_IRQHandler+0x30c>
24005674:	687b      	ldr	r3, [r7, #4]
24005676:	681b      	ldr	r3, [r3, #0]
24005678:	681b      	ldr	r3, [r3, #0]
2400567a:	2300      	movs	r3, #0
2400567c:	2b00      	cmp	r3, #0
2400567e:	d00d      	beq.n	2400569c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005680:	687b      	ldr	r3, [r7, #4]
24005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005684:	f003 031f 	and.w	r3, r3, #31
24005688:	2201      	movs	r2, #1
2400568a:	409a      	lsls	r2, r3
2400568c:	6a3b      	ldr	r3, [r7, #32]
2400568e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005690:	687b      	ldr	r3, [r7, #4]
24005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005694:	f043 0202 	orr.w	r2, r3, #2
24005698:	687b      	ldr	r3, [r7, #4]
2400569a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400569c:	687b      	ldr	r3, [r7, #4]
2400569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240056a0:	f003 031f 	and.w	r3, r3, #31
240056a4:	2204      	movs	r2, #4
240056a6:	409a      	lsls	r2, r3
240056a8:	69bb      	ldr	r3, [r7, #24]
240056aa:	4013      	ands	r3, r2
240056ac:	2b00      	cmp	r3, #0
240056ae:	f000 808f 	beq.w	240057d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240056b2:	687b      	ldr	r3, [r7, #4]
240056b4:	681b      	ldr	r3, [r3, #0]
240056b6:	4a2c      	ldr	r2, [pc, #176]	; (24005768 <HAL_DMA_IRQHandler+0x3f8>)
240056b8:	4293      	cmp	r3, r2
240056ba:	d04a      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056bc:	687b      	ldr	r3, [r7, #4]
240056be:	681b      	ldr	r3, [r3, #0]
240056c0:	4a2a      	ldr	r2, [pc, #168]	; (2400576c <HAL_DMA_IRQHandler+0x3fc>)
240056c2:	4293      	cmp	r3, r2
240056c4:	d045      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056c6:	687b      	ldr	r3, [r7, #4]
240056c8:	681b      	ldr	r3, [r3, #0]
240056ca:	4a29      	ldr	r2, [pc, #164]	; (24005770 <HAL_DMA_IRQHandler+0x400>)
240056cc:	4293      	cmp	r3, r2
240056ce:	d040      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056d0:	687b      	ldr	r3, [r7, #4]
240056d2:	681b      	ldr	r3, [r3, #0]
240056d4:	4a27      	ldr	r2, [pc, #156]	; (24005774 <HAL_DMA_IRQHandler+0x404>)
240056d6:	4293      	cmp	r3, r2
240056d8:	d03b      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056da:	687b      	ldr	r3, [r7, #4]
240056dc:	681b      	ldr	r3, [r3, #0]
240056de:	4a26      	ldr	r2, [pc, #152]	; (24005778 <HAL_DMA_IRQHandler+0x408>)
240056e0:	4293      	cmp	r3, r2
240056e2:	d036      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056e4:	687b      	ldr	r3, [r7, #4]
240056e6:	681b      	ldr	r3, [r3, #0]
240056e8:	4a24      	ldr	r2, [pc, #144]	; (2400577c <HAL_DMA_IRQHandler+0x40c>)
240056ea:	4293      	cmp	r3, r2
240056ec:	d031      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056ee:	687b      	ldr	r3, [r7, #4]
240056f0:	681b      	ldr	r3, [r3, #0]
240056f2:	4a23      	ldr	r2, [pc, #140]	; (24005780 <HAL_DMA_IRQHandler+0x410>)
240056f4:	4293      	cmp	r3, r2
240056f6:	d02c      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
240056f8:	687b      	ldr	r3, [r7, #4]
240056fa:	681b      	ldr	r3, [r3, #0]
240056fc:	4a21      	ldr	r2, [pc, #132]	; (24005784 <HAL_DMA_IRQHandler+0x414>)
240056fe:	4293      	cmp	r3, r2
24005700:	d027      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
24005702:	687b      	ldr	r3, [r7, #4]
24005704:	681b      	ldr	r3, [r3, #0]
24005706:	4a20      	ldr	r2, [pc, #128]	; (24005788 <HAL_DMA_IRQHandler+0x418>)
24005708:	4293      	cmp	r3, r2
2400570a:	d022      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
2400570c:	687b      	ldr	r3, [r7, #4]
2400570e:	681b      	ldr	r3, [r3, #0]
24005710:	4a1e      	ldr	r2, [pc, #120]	; (2400578c <HAL_DMA_IRQHandler+0x41c>)
24005712:	4293      	cmp	r3, r2
24005714:	d01d      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
24005716:	687b      	ldr	r3, [r7, #4]
24005718:	681b      	ldr	r3, [r3, #0]
2400571a:	4a1d      	ldr	r2, [pc, #116]	; (24005790 <HAL_DMA_IRQHandler+0x420>)
2400571c:	4293      	cmp	r3, r2
2400571e:	d018      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
24005720:	687b      	ldr	r3, [r7, #4]
24005722:	681b      	ldr	r3, [r3, #0]
24005724:	4a1b      	ldr	r2, [pc, #108]	; (24005794 <HAL_DMA_IRQHandler+0x424>)
24005726:	4293      	cmp	r3, r2
24005728:	d013      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
2400572a:	687b      	ldr	r3, [r7, #4]
2400572c:	681b      	ldr	r3, [r3, #0]
2400572e:	4a1a      	ldr	r2, [pc, #104]	; (24005798 <HAL_DMA_IRQHandler+0x428>)
24005730:	4293      	cmp	r3, r2
24005732:	d00e      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
24005734:	687b      	ldr	r3, [r7, #4]
24005736:	681b      	ldr	r3, [r3, #0]
24005738:	4a18      	ldr	r2, [pc, #96]	; (2400579c <HAL_DMA_IRQHandler+0x42c>)
2400573a:	4293      	cmp	r3, r2
2400573c:	d009      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
2400573e:	687b      	ldr	r3, [r7, #4]
24005740:	681b      	ldr	r3, [r3, #0]
24005742:	4a17      	ldr	r2, [pc, #92]	; (240057a0 <HAL_DMA_IRQHandler+0x430>)
24005744:	4293      	cmp	r3, r2
24005746:	d004      	beq.n	24005752 <HAL_DMA_IRQHandler+0x3e2>
24005748:	687b      	ldr	r3, [r7, #4]
2400574a:	681b      	ldr	r3, [r3, #0]
2400574c:	4a15      	ldr	r2, [pc, #84]	; (240057a4 <HAL_DMA_IRQHandler+0x434>)
2400574e:	4293      	cmp	r3, r2
24005750:	d12a      	bne.n	240057a8 <HAL_DMA_IRQHandler+0x438>
24005752:	687b      	ldr	r3, [r7, #4]
24005754:	681b      	ldr	r3, [r3, #0]
24005756:	681b      	ldr	r3, [r3, #0]
24005758:	f003 0302 	and.w	r3, r3, #2
2400575c:	2b00      	cmp	r3, #0
2400575e:	bf14      	ite	ne
24005760:	2301      	movne	r3, #1
24005762:	2300      	moveq	r3, #0
24005764:	b2db      	uxtb	r3, r3
24005766:	e023      	b.n	240057b0 <HAL_DMA_IRQHandler+0x440>
24005768:	40020010 	.word	0x40020010
2400576c:	40020028 	.word	0x40020028
24005770:	40020040 	.word	0x40020040
24005774:	40020058 	.word	0x40020058
24005778:	40020070 	.word	0x40020070
2400577c:	40020088 	.word	0x40020088
24005780:	400200a0 	.word	0x400200a0
24005784:	400200b8 	.word	0x400200b8
24005788:	40020410 	.word	0x40020410
2400578c:	40020428 	.word	0x40020428
24005790:	40020440 	.word	0x40020440
24005794:	40020458 	.word	0x40020458
24005798:	40020470 	.word	0x40020470
2400579c:	40020488 	.word	0x40020488
240057a0:	400204a0 	.word	0x400204a0
240057a4:	400204b8 	.word	0x400204b8
240057a8:	687b      	ldr	r3, [r7, #4]
240057aa:	681b      	ldr	r3, [r3, #0]
240057ac:	681b      	ldr	r3, [r3, #0]
240057ae:	2300      	movs	r3, #0
240057b0:	2b00      	cmp	r3, #0
240057b2:	d00d      	beq.n	240057d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
240057b4:	687b      	ldr	r3, [r7, #4]
240057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240057b8:	f003 031f 	and.w	r3, r3, #31
240057bc:	2204      	movs	r2, #4
240057be:	409a      	lsls	r2, r3
240057c0:	6a3b      	ldr	r3, [r7, #32]
240057c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240057c4:	687b      	ldr	r3, [r7, #4]
240057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240057c8:	f043 0204 	orr.w	r2, r3, #4
240057cc:	687b      	ldr	r3, [r7, #4]
240057ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240057d0:	687b      	ldr	r3, [r7, #4]
240057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240057d4:	f003 031f 	and.w	r3, r3, #31
240057d8:	2210      	movs	r2, #16
240057da:	409a      	lsls	r2, r3
240057dc:	69bb      	ldr	r3, [r7, #24]
240057de:	4013      	ands	r3, r2
240057e0:	2b00      	cmp	r3, #0
240057e2:	f000 80a6 	beq.w	24005932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240057e6:	687b      	ldr	r3, [r7, #4]
240057e8:	681b      	ldr	r3, [r3, #0]
240057ea:	4a85      	ldr	r2, [pc, #532]	; (24005a00 <HAL_DMA_IRQHandler+0x690>)
240057ec:	4293      	cmp	r3, r2
240057ee:	d04a      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
240057f0:	687b      	ldr	r3, [r7, #4]
240057f2:	681b      	ldr	r3, [r3, #0]
240057f4:	4a83      	ldr	r2, [pc, #524]	; (24005a04 <HAL_DMA_IRQHandler+0x694>)
240057f6:	4293      	cmp	r3, r2
240057f8:	d045      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
240057fa:	687b      	ldr	r3, [r7, #4]
240057fc:	681b      	ldr	r3, [r3, #0]
240057fe:	4a82      	ldr	r2, [pc, #520]	; (24005a08 <HAL_DMA_IRQHandler+0x698>)
24005800:	4293      	cmp	r3, r2
24005802:	d040      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005804:	687b      	ldr	r3, [r7, #4]
24005806:	681b      	ldr	r3, [r3, #0]
24005808:	4a80      	ldr	r2, [pc, #512]	; (24005a0c <HAL_DMA_IRQHandler+0x69c>)
2400580a:	4293      	cmp	r3, r2
2400580c:	d03b      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
2400580e:	687b      	ldr	r3, [r7, #4]
24005810:	681b      	ldr	r3, [r3, #0]
24005812:	4a7f      	ldr	r2, [pc, #508]	; (24005a10 <HAL_DMA_IRQHandler+0x6a0>)
24005814:	4293      	cmp	r3, r2
24005816:	d036      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005818:	687b      	ldr	r3, [r7, #4]
2400581a:	681b      	ldr	r3, [r3, #0]
2400581c:	4a7d      	ldr	r2, [pc, #500]	; (24005a14 <HAL_DMA_IRQHandler+0x6a4>)
2400581e:	4293      	cmp	r3, r2
24005820:	d031      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005822:	687b      	ldr	r3, [r7, #4]
24005824:	681b      	ldr	r3, [r3, #0]
24005826:	4a7c      	ldr	r2, [pc, #496]	; (24005a18 <HAL_DMA_IRQHandler+0x6a8>)
24005828:	4293      	cmp	r3, r2
2400582a:	d02c      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
2400582c:	687b      	ldr	r3, [r7, #4]
2400582e:	681b      	ldr	r3, [r3, #0]
24005830:	4a7a      	ldr	r2, [pc, #488]	; (24005a1c <HAL_DMA_IRQHandler+0x6ac>)
24005832:	4293      	cmp	r3, r2
24005834:	d027      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005836:	687b      	ldr	r3, [r7, #4]
24005838:	681b      	ldr	r3, [r3, #0]
2400583a:	4a79      	ldr	r2, [pc, #484]	; (24005a20 <HAL_DMA_IRQHandler+0x6b0>)
2400583c:	4293      	cmp	r3, r2
2400583e:	d022      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005840:	687b      	ldr	r3, [r7, #4]
24005842:	681b      	ldr	r3, [r3, #0]
24005844:	4a77      	ldr	r2, [pc, #476]	; (24005a24 <HAL_DMA_IRQHandler+0x6b4>)
24005846:	4293      	cmp	r3, r2
24005848:	d01d      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
2400584a:	687b      	ldr	r3, [r7, #4]
2400584c:	681b      	ldr	r3, [r3, #0]
2400584e:	4a76      	ldr	r2, [pc, #472]	; (24005a28 <HAL_DMA_IRQHandler+0x6b8>)
24005850:	4293      	cmp	r3, r2
24005852:	d018      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005854:	687b      	ldr	r3, [r7, #4]
24005856:	681b      	ldr	r3, [r3, #0]
24005858:	4a74      	ldr	r2, [pc, #464]	; (24005a2c <HAL_DMA_IRQHandler+0x6bc>)
2400585a:	4293      	cmp	r3, r2
2400585c:	d013      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
2400585e:	687b      	ldr	r3, [r7, #4]
24005860:	681b      	ldr	r3, [r3, #0]
24005862:	4a73      	ldr	r2, [pc, #460]	; (24005a30 <HAL_DMA_IRQHandler+0x6c0>)
24005864:	4293      	cmp	r3, r2
24005866:	d00e      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005868:	687b      	ldr	r3, [r7, #4]
2400586a:	681b      	ldr	r3, [r3, #0]
2400586c:	4a71      	ldr	r2, [pc, #452]	; (24005a34 <HAL_DMA_IRQHandler+0x6c4>)
2400586e:	4293      	cmp	r3, r2
24005870:	d009      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
24005872:	687b      	ldr	r3, [r7, #4]
24005874:	681b      	ldr	r3, [r3, #0]
24005876:	4a70      	ldr	r2, [pc, #448]	; (24005a38 <HAL_DMA_IRQHandler+0x6c8>)
24005878:	4293      	cmp	r3, r2
2400587a:	d004      	beq.n	24005886 <HAL_DMA_IRQHandler+0x516>
2400587c:	687b      	ldr	r3, [r7, #4]
2400587e:	681b      	ldr	r3, [r3, #0]
24005880:	4a6e      	ldr	r2, [pc, #440]	; (24005a3c <HAL_DMA_IRQHandler+0x6cc>)
24005882:	4293      	cmp	r3, r2
24005884:	d10a      	bne.n	2400589c <HAL_DMA_IRQHandler+0x52c>
24005886:	687b      	ldr	r3, [r7, #4]
24005888:	681b      	ldr	r3, [r3, #0]
2400588a:	681b      	ldr	r3, [r3, #0]
2400588c:	f003 0308 	and.w	r3, r3, #8
24005890:	2b00      	cmp	r3, #0
24005892:	bf14      	ite	ne
24005894:	2301      	movne	r3, #1
24005896:	2300      	moveq	r3, #0
24005898:	b2db      	uxtb	r3, r3
2400589a:	e009      	b.n	240058b0 <HAL_DMA_IRQHandler+0x540>
2400589c:	687b      	ldr	r3, [r7, #4]
2400589e:	681b      	ldr	r3, [r3, #0]
240058a0:	681b      	ldr	r3, [r3, #0]
240058a2:	f003 0304 	and.w	r3, r3, #4
240058a6:	2b00      	cmp	r3, #0
240058a8:	bf14      	ite	ne
240058aa:	2301      	movne	r3, #1
240058ac:	2300      	moveq	r3, #0
240058ae:	b2db      	uxtb	r3, r3
240058b0:	2b00      	cmp	r3, #0
240058b2:	d03e      	beq.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
240058b4:	687b      	ldr	r3, [r7, #4]
240058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240058b8:	f003 031f 	and.w	r3, r3, #31
240058bc:	2210      	movs	r2, #16
240058be:	409a      	lsls	r2, r3
240058c0:	6a3b      	ldr	r3, [r7, #32]
240058c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240058c4:	687b      	ldr	r3, [r7, #4]
240058c6:	681b      	ldr	r3, [r3, #0]
240058c8:	681b      	ldr	r3, [r3, #0]
240058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240058ce:	2b00      	cmp	r3, #0
240058d0:	d018      	beq.n	24005904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
240058d2:	687b      	ldr	r3, [r7, #4]
240058d4:	681b      	ldr	r3, [r3, #0]
240058d6:	681b      	ldr	r3, [r3, #0]
240058d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240058dc:	2b00      	cmp	r3, #0
240058de:	d108      	bne.n	240058f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
240058e0:	687b      	ldr	r3, [r7, #4]
240058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240058e4:	2b00      	cmp	r3, #0
240058e6:	d024      	beq.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
240058e8:	687b      	ldr	r3, [r7, #4]
240058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240058ec:	6878      	ldr	r0, [r7, #4]
240058ee:	4798      	blx	r3
240058f0:	e01f      	b.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
240058f2:	687b      	ldr	r3, [r7, #4]
240058f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240058f6:	2b00      	cmp	r3, #0
240058f8:	d01b      	beq.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
240058fa:	687b      	ldr	r3, [r7, #4]
240058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240058fe:	6878      	ldr	r0, [r7, #4]
24005900:	4798      	blx	r3
24005902:	e016      	b.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005904:	687b      	ldr	r3, [r7, #4]
24005906:	681b      	ldr	r3, [r3, #0]
24005908:	681b      	ldr	r3, [r3, #0]
2400590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400590e:	2b00      	cmp	r3, #0
24005910:	d107      	bne.n	24005922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005912:	687b      	ldr	r3, [r7, #4]
24005914:	681b      	ldr	r3, [r3, #0]
24005916:	681a      	ldr	r2, [r3, #0]
24005918:	687b      	ldr	r3, [r7, #4]
2400591a:	681b      	ldr	r3, [r3, #0]
2400591c:	f022 0208 	bic.w	r2, r2, #8
24005920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
24005922:	687b      	ldr	r3, [r7, #4]
24005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005926:	2b00      	cmp	r3, #0
24005928:	d003      	beq.n	24005932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
2400592a:	687b      	ldr	r3, [r7, #4]
2400592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400592e:	6878      	ldr	r0, [r7, #4]
24005930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005932:	687b      	ldr	r3, [r7, #4]
24005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005936:	f003 031f 	and.w	r3, r3, #31
2400593a:	2220      	movs	r2, #32
2400593c:	409a      	lsls	r2, r3
2400593e:	69bb      	ldr	r3, [r7, #24]
24005940:	4013      	ands	r3, r2
24005942:	2b00      	cmp	r3, #0
24005944:	f000 8110 	beq.w	24005b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005948:	687b      	ldr	r3, [r7, #4]
2400594a:	681b      	ldr	r3, [r3, #0]
2400594c:	4a2c      	ldr	r2, [pc, #176]	; (24005a00 <HAL_DMA_IRQHandler+0x690>)
2400594e:	4293      	cmp	r3, r2
24005950:	d04a      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
24005952:	687b      	ldr	r3, [r7, #4]
24005954:	681b      	ldr	r3, [r3, #0]
24005956:	4a2b      	ldr	r2, [pc, #172]	; (24005a04 <HAL_DMA_IRQHandler+0x694>)
24005958:	4293      	cmp	r3, r2
2400595a:	d045      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
2400595c:	687b      	ldr	r3, [r7, #4]
2400595e:	681b      	ldr	r3, [r3, #0]
24005960:	4a29      	ldr	r2, [pc, #164]	; (24005a08 <HAL_DMA_IRQHandler+0x698>)
24005962:	4293      	cmp	r3, r2
24005964:	d040      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
24005966:	687b      	ldr	r3, [r7, #4]
24005968:	681b      	ldr	r3, [r3, #0]
2400596a:	4a28      	ldr	r2, [pc, #160]	; (24005a0c <HAL_DMA_IRQHandler+0x69c>)
2400596c:	4293      	cmp	r3, r2
2400596e:	d03b      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
24005970:	687b      	ldr	r3, [r7, #4]
24005972:	681b      	ldr	r3, [r3, #0]
24005974:	4a26      	ldr	r2, [pc, #152]	; (24005a10 <HAL_DMA_IRQHandler+0x6a0>)
24005976:	4293      	cmp	r3, r2
24005978:	d036      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
2400597a:	687b      	ldr	r3, [r7, #4]
2400597c:	681b      	ldr	r3, [r3, #0]
2400597e:	4a25      	ldr	r2, [pc, #148]	; (24005a14 <HAL_DMA_IRQHandler+0x6a4>)
24005980:	4293      	cmp	r3, r2
24005982:	d031      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
24005984:	687b      	ldr	r3, [r7, #4]
24005986:	681b      	ldr	r3, [r3, #0]
24005988:	4a23      	ldr	r2, [pc, #140]	; (24005a18 <HAL_DMA_IRQHandler+0x6a8>)
2400598a:	4293      	cmp	r3, r2
2400598c:	d02c      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
2400598e:	687b      	ldr	r3, [r7, #4]
24005990:	681b      	ldr	r3, [r3, #0]
24005992:	4a22      	ldr	r2, [pc, #136]	; (24005a1c <HAL_DMA_IRQHandler+0x6ac>)
24005994:	4293      	cmp	r3, r2
24005996:	d027      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
24005998:	687b      	ldr	r3, [r7, #4]
2400599a:	681b      	ldr	r3, [r3, #0]
2400599c:	4a20      	ldr	r2, [pc, #128]	; (24005a20 <HAL_DMA_IRQHandler+0x6b0>)
2400599e:	4293      	cmp	r3, r2
240059a0:	d022      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059a2:	687b      	ldr	r3, [r7, #4]
240059a4:	681b      	ldr	r3, [r3, #0]
240059a6:	4a1f      	ldr	r2, [pc, #124]	; (24005a24 <HAL_DMA_IRQHandler+0x6b4>)
240059a8:	4293      	cmp	r3, r2
240059aa:	d01d      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059ac:	687b      	ldr	r3, [r7, #4]
240059ae:	681b      	ldr	r3, [r3, #0]
240059b0:	4a1d      	ldr	r2, [pc, #116]	; (24005a28 <HAL_DMA_IRQHandler+0x6b8>)
240059b2:	4293      	cmp	r3, r2
240059b4:	d018      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059b6:	687b      	ldr	r3, [r7, #4]
240059b8:	681b      	ldr	r3, [r3, #0]
240059ba:	4a1c      	ldr	r2, [pc, #112]	; (24005a2c <HAL_DMA_IRQHandler+0x6bc>)
240059bc:	4293      	cmp	r3, r2
240059be:	d013      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059c0:	687b      	ldr	r3, [r7, #4]
240059c2:	681b      	ldr	r3, [r3, #0]
240059c4:	4a1a      	ldr	r2, [pc, #104]	; (24005a30 <HAL_DMA_IRQHandler+0x6c0>)
240059c6:	4293      	cmp	r3, r2
240059c8:	d00e      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059ca:	687b      	ldr	r3, [r7, #4]
240059cc:	681b      	ldr	r3, [r3, #0]
240059ce:	4a19      	ldr	r2, [pc, #100]	; (24005a34 <HAL_DMA_IRQHandler+0x6c4>)
240059d0:	4293      	cmp	r3, r2
240059d2:	d009      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059d4:	687b      	ldr	r3, [r7, #4]
240059d6:	681b      	ldr	r3, [r3, #0]
240059d8:	4a17      	ldr	r2, [pc, #92]	; (24005a38 <HAL_DMA_IRQHandler+0x6c8>)
240059da:	4293      	cmp	r3, r2
240059dc:	d004      	beq.n	240059e8 <HAL_DMA_IRQHandler+0x678>
240059de:	687b      	ldr	r3, [r7, #4]
240059e0:	681b      	ldr	r3, [r3, #0]
240059e2:	4a16      	ldr	r2, [pc, #88]	; (24005a3c <HAL_DMA_IRQHandler+0x6cc>)
240059e4:	4293      	cmp	r3, r2
240059e6:	d12b      	bne.n	24005a40 <HAL_DMA_IRQHandler+0x6d0>
240059e8:	687b      	ldr	r3, [r7, #4]
240059ea:	681b      	ldr	r3, [r3, #0]
240059ec:	681b      	ldr	r3, [r3, #0]
240059ee:	f003 0310 	and.w	r3, r3, #16
240059f2:	2b00      	cmp	r3, #0
240059f4:	bf14      	ite	ne
240059f6:	2301      	movne	r3, #1
240059f8:	2300      	moveq	r3, #0
240059fa:	b2db      	uxtb	r3, r3
240059fc:	e02a      	b.n	24005a54 <HAL_DMA_IRQHandler+0x6e4>
240059fe:	bf00      	nop
24005a00:	40020010 	.word	0x40020010
24005a04:	40020028 	.word	0x40020028
24005a08:	40020040 	.word	0x40020040
24005a0c:	40020058 	.word	0x40020058
24005a10:	40020070 	.word	0x40020070
24005a14:	40020088 	.word	0x40020088
24005a18:	400200a0 	.word	0x400200a0
24005a1c:	400200b8 	.word	0x400200b8
24005a20:	40020410 	.word	0x40020410
24005a24:	40020428 	.word	0x40020428
24005a28:	40020440 	.word	0x40020440
24005a2c:	40020458 	.word	0x40020458
24005a30:	40020470 	.word	0x40020470
24005a34:	40020488 	.word	0x40020488
24005a38:	400204a0 	.word	0x400204a0
24005a3c:	400204b8 	.word	0x400204b8
24005a40:	687b      	ldr	r3, [r7, #4]
24005a42:	681b      	ldr	r3, [r3, #0]
24005a44:	681b      	ldr	r3, [r3, #0]
24005a46:	f003 0302 	and.w	r3, r3, #2
24005a4a:	2b00      	cmp	r3, #0
24005a4c:	bf14      	ite	ne
24005a4e:	2301      	movne	r3, #1
24005a50:	2300      	moveq	r3, #0
24005a52:	b2db      	uxtb	r3, r3
24005a54:	2b00      	cmp	r3, #0
24005a56:	f000 8087 	beq.w	24005b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005a5a:	687b      	ldr	r3, [r7, #4]
24005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005a5e:	f003 031f 	and.w	r3, r3, #31
24005a62:	2220      	movs	r2, #32
24005a64:	409a      	lsls	r2, r3
24005a66:	6a3b      	ldr	r3, [r7, #32]
24005a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
24005a6a:	687b      	ldr	r3, [r7, #4]
24005a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24005a70:	b2db      	uxtb	r3, r3
24005a72:	2b04      	cmp	r3, #4
24005a74:	d139      	bne.n	24005aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005a76:	687b      	ldr	r3, [r7, #4]
24005a78:	681b      	ldr	r3, [r3, #0]
24005a7a:	681a      	ldr	r2, [r3, #0]
24005a7c:	687b      	ldr	r3, [r7, #4]
24005a7e:	681b      	ldr	r3, [r3, #0]
24005a80:	f022 0216 	bic.w	r2, r2, #22
24005a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005a86:	687b      	ldr	r3, [r7, #4]
24005a88:	681b      	ldr	r3, [r3, #0]
24005a8a:	695a      	ldr	r2, [r3, #20]
24005a8c:	687b      	ldr	r3, [r7, #4]
24005a8e:	681b      	ldr	r3, [r3, #0]
24005a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24005a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005a96:	687b      	ldr	r3, [r7, #4]
24005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005a9a:	2b00      	cmp	r3, #0
24005a9c:	d103      	bne.n	24005aa6 <HAL_DMA_IRQHandler+0x736>
24005a9e:	687b      	ldr	r3, [r7, #4]
24005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005aa2:	2b00      	cmp	r3, #0
24005aa4:	d007      	beq.n	24005ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005aa6:	687b      	ldr	r3, [r7, #4]
24005aa8:	681b      	ldr	r3, [r3, #0]
24005aaa:	681a      	ldr	r2, [r3, #0]
24005aac:	687b      	ldr	r3, [r7, #4]
24005aae:	681b      	ldr	r3, [r3, #0]
24005ab0:	f022 0208 	bic.w	r2, r2, #8
24005ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005ab6:	687b      	ldr	r3, [r7, #4]
24005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005aba:	f003 031f 	and.w	r3, r3, #31
24005abe:	223f      	movs	r2, #63	; 0x3f
24005ac0:	409a      	lsls	r2, r3
24005ac2:	6a3b      	ldr	r3, [r7, #32]
24005ac4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24005ac6:	687b      	ldr	r3, [r7, #4]
24005ac8:	2201      	movs	r2, #1
24005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24005ace:	687b      	ldr	r3, [r7, #4]
24005ad0:	2200      	movs	r2, #0
24005ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24005ad6:	687b      	ldr	r3, [r7, #4]
24005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005ada:	2b00      	cmp	r3, #0
24005adc:	f000 834a 	beq.w	24006174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
24005ae0:	687b      	ldr	r3, [r7, #4]
24005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005ae4:	6878      	ldr	r0, [r7, #4]
24005ae6:	4798      	blx	r3
          }
          return;
24005ae8:	e344      	b.n	24006174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005aea:	687b      	ldr	r3, [r7, #4]
24005aec:	681b      	ldr	r3, [r3, #0]
24005aee:	681b      	ldr	r3, [r3, #0]
24005af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24005af4:	2b00      	cmp	r3, #0
24005af6:	d018      	beq.n	24005b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005af8:	687b      	ldr	r3, [r7, #4]
24005afa:	681b      	ldr	r3, [r3, #0]
24005afc:	681b      	ldr	r3, [r3, #0]
24005afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24005b02:	2b00      	cmp	r3, #0
24005b04:	d108      	bne.n	24005b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24005b06:	687b      	ldr	r3, [r7, #4]
24005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005b0a:	2b00      	cmp	r3, #0
24005b0c:	d02c      	beq.n	24005b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24005b0e:	687b      	ldr	r3, [r7, #4]
24005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005b12:	6878      	ldr	r0, [r7, #4]
24005b14:	4798      	blx	r3
24005b16:	e027      	b.n	24005b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24005b18:	687b      	ldr	r3, [r7, #4]
24005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b1c:	2b00      	cmp	r3, #0
24005b1e:	d023      	beq.n	24005b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24005b20:	687b      	ldr	r3, [r7, #4]
24005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b24:	6878      	ldr	r0, [r7, #4]
24005b26:	4798      	blx	r3
24005b28:	e01e      	b.n	24005b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005b2a:	687b      	ldr	r3, [r7, #4]
24005b2c:	681b      	ldr	r3, [r3, #0]
24005b2e:	681b      	ldr	r3, [r3, #0]
24005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
24005b34:	2b00      	cmp	r3, #0
24005b36:	d10f      	bne.n	24005b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005b38:	687b      	ldr	r3, [r7, #4]
24005b3a:	681b      	ldr	r3, [r3, #0]
24005b3c:	681a      	ldr	r2, [r3, #0]
24005b3e:	687b      	ldr	r3, [r7, #4]
24005b40:	681b      	ldr	r3, [r3, #0]
24005b42:	f022 0210 	bic.w	r2, r2, #16
24005b46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24005b48:	687b      	ldr	r3, [r7, #4]
24005b4a:	2201      	movs	r2, #1
24005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24005b50:	687b      	ldr	r3, [r7, #4]
24005b52:	2200      	movs	r2, #0
24005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24005b58:	687b      	ldr	r3, [r7, #4]
24005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b5c:	2b00      	cmp	r3, #0
24005b5e:	d003      	beq.n	24005b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24005b60:	687b      	ldr	r3, [r7, #4]
24005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b64:	6878      	ldr	r0, [r7, #4]
24005b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005b68:	687b      	ldr	r3, [r7, #4]
24005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005b6c:	2b00      	cmp	r3, #0
24005b6e:	f000 8306 	beq.w	2400617e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005b72:	687b      	ldr	r3, [r7, #4]
24005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005b76:	f003 0301 	and.w	r3, r3, #1
24005b7a:	2b00      	cmp	r3, #0
24005b7c:	f000 8088 	beq.w	24005c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24005b80:	687b      	ldr	r3, [r7, #4]
24005b82:	2204      	movs	r2, #4
24005b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24005b88:	687b      	ldr	r3, [r7, #4]
24005b8a:	681b      	ldr	r3, [r3, #0]
24005b8c:	4a7a      	ldr	r2, [pc, #488]	; (24005d78 <HAL_DMA_IRQHandler+0xa08>)
24005b8e:	4293      	cmp	r3, r2
24005b90:	d04a      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005b92:	687b      	ldr	r3, [r7, #4]
24005b94:	681b      	ldr	r3, [r3, #0]
24005b96:	4a79      	ldr	r2, [pc, #484]	; (24005d7c <HAL_DMA_IRQHandler+0xa0c>)
24005b98:	4293      	cmp	r3, r2
24005b9a:	d045      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005b9c:	687b      	ldr	r3, [r7, #4]
24005b9e:	681b      	ldr	r3, [r3, #0]
24005ba0:	4a77      	ldr	r2, [pc, #476]	; (24005d80 <HAL_DMA_IRQHandler+0xa10>)
24005ba2:	4293      	cmp	r3, r2
24005ba4:	d040      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005ba6:	687b      	ldr	r3, [r7, #4]
24005ba8:	681b      	ldr	r3, [r3, #0]
24005baa:	4a76      	ldr	r2, [pc, #472]	; (24005d84 <HAL_DMA_IRQHandler+0xa14>)
24005bac:	4293      	cmp	r3, r2
24005bae:	d03b      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bb0:	687b      	ldr	r3, [r7, #4]
24005bb2:	681b      	ldr	r3, [r3, #0]
24005bb4:	4a74      	ldr	r2, [pc, #464]	; (24005d88 <HAL_DMA_IRQHandler+0xa18>)
24005bb6:	4293      	cmp	r3, r2
24005bb8:	d036      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bba:	687b      	ldr	r3, [r7, #4]
24005bbc:	681b      	ldr	r3, [r3, #0]
24005bbe:	4a73      	ldr	r2, [pc, #460]	; (24005d8c <HAL_DMA_IRQHandler+0xa1c>)
24005bc0:	4293      	cmp	r3, r2
24005bc2:	d031      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bc4:	687b      	ldr	r3, [r7, #4]
24005bc6:	681b      	ldr	r3, [r3, #0]
24005bc8:	4a71      	ldr	r2, [pc, #452]	; (24005d90 <HAL_DMA_IRQHandler+0xa20>)
24005bca:	4293      	cmp	r3, r2
24005bcc:	d02c      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bce:	687b      	ldr	r3, [r7, #4]
24005bd0:	681b      	ldr	r3, [r3, #0]
24005bd2:	4a70      	ldr	r2, [pc, #448]	; (24005d94 <HAL_DMA_IRQHandler+0xa24>)
24005bd4:	4293      	cmp	r3, r2
24005bd6:	d027      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bd8:	687b      	ldr	r3, [r7, #4]
24005bda:	681b      	ldr	r3, [r3, #0]
24005bdc:	4a6e      	ldr	r2, [pc, #440]	; (24005d98 <HAL_DMA_IRQHandler+0xa28>)
24005bde:	4293      	cmp	r3, r2
24005be0:	d022      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005be2:	687b      	ldr	r3, [r7, #4]
24005be4:	681b      	ldr	r3, [r3, #0]
24005be6:	4a6d      	ldr	r2, [pc, #436]	; (24005d9c <HAL_DMA_IRQHandler+0xa2c>)
24005be8:	4293      	cmp	r3, r2
24005bea:	d01d      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bec:	687b      	ldr	r3, [r7, #4]
24005bee:	681b      	ldr	r3, [r3, #0]
24005bf0:	4a6b      	ldr	r2, [pc, #428]	; (24005da0 <HAL_DMA_IRQHandler+0xa30>)
24005bf2:	4293      	cmp	r3, r2
24005bf4:	d018      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005bf6:	687b      	ldr	r3, [r7, #4]
24005bf8:	681b      	ldr	r3, [r3, #0]
24005bfa:	4a6a      	ldr	r2, [pc, #424]	; (24005da4 <HAL_DMA_IRQHandler+0xa34>)
24005bfc:	4293      	cmp	r3, r2
24005bfe:	d013      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005c00:	687b      	ldr	r3, [r7, #4]
24005c02:	681b      	ldr	r3, [r3, #0]
24005c04:	4a68      	ldr	r2, [pc, #416]	; (24005da8 <HAL_DMA_IRQHandler+0xa38>)
24005c06:	4293      	cmp	r3, r2
24005c08:	d00e      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005c0a:	687b      	ldr	r3, [r7, #4]
24005c0c:	681b      	ldr	r3, [r3, #0]
24005c0e:	4a67      	ldr	r2, [pc, #412]	; (24005dac <HAL_DMA_IRQHandler+0xa3c>)
24005c10:	4293      	cmp	r3, r2
24005c12:	d009      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005c14:	687b      	ldr	r3, [r7, #4]
24005c16:	681b      	ldr	r3, [r3, #0]
24005c18:	4a65      	ldr	r2, [pc, #404]	; (24005db0 <HAL_DMA_IRQHandler+0xa40>)
24005c1a:	4293      	cmp	r3, r2
24005c1c:	d004      	beq.n	24005c28 <HAL_DMA_IRQHandler+0x8b8>
24005c1e:	687b      	ldr	r3, [r7, #4]
24005c20:	681b      	ldr	r3, [r3, #0]
24005c22:	4a64      	ldr	r2, [pc, #400]	; (24005db4 <HAL_DMA_IRQHandler+0xa44>)
24005c24:	4293      	cmp	r3, r2
24005c26:	d108      	bne.n	24005c3a <HAL_DMA_IRQHandler+0x8ca>
24005c28:	687b      	ldr	r3, [r7, #4]
24005c2a:	681b      	ldr	r3, [r3, #0]
24005c2c:	681a      	ldr	r2, [r3, #0]
24005c2e:	687b      	ldr	r3, [r7, #4]
24005c30:	681b      	ldr	r3, [r3, #0]
24005c32:	f022 0201 	bic.w	r2, r2, #1
24005c36:	601a      	str	r2, [r3, #0]
24005c38:	e007      	b.n	24005c4a <HAL_DMA_IRQHandler+0x8da>
24005c3a:	687b      	ldr	r3, [r7, #4]
24005c3c:	681b      	ldr	r3, [r3, #0]
24005c3e:	681a      	ldr	r2, [r3, #0]
24005c40:	687b      	ldr	r3, [r7, #4]
24005c42:	681b      	ldr	r3, [r3, #0]
24005c44:	f022 0201 	bic.w	r2, r2, #1
24005c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24005c4a:	68fb      	ldr	r3, [r7, #12]
24005c4c:	3301      	adds	r3, #1
24005c4e:	60fb      	str	r3, [r7, #12]
24005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24005c52:	429a      	cmp	r2, r3
24005c54:	d307      	bcc.n	24005c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005c56:	687b      	ldr	r3, [r7, #4]
24005c58:	681b      	ldr	r3, [r3, #0]
24005c5a:	681b      	ldr	r3, [r3, #0]
24005c5c:	f003 0301 	and.w	r3, r3, #1
24005c60:	2b00      	cmp	r3, #0
24005c62:	d1f2      	bne.n	24005c4a <HAL_DMA_IRQHandler+0x8da>
24005c64:	e000      	b.n	24005c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
24005c66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005c68:	687b      	ldr	r3, [r7, #4]
24005c6a:	681b      	ldr	r3, [r3, #0]
24005c6c:	681b      	ldr	r3, [r3, #0]
24005c6e:	f003 0301 	and.w	r3, r3, #1
24005c72:	2b00      	cmp	r3, #0
24005c74:	d004      	beq.n	24005c80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24005c76:	687b      	ldr	r3, [r7, #4]
24005c78:	2203      	movs	r2, #3
24005c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24005c7e:	e003      	b.n	24005c88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24005c80:	687b      	ldr	r3, [r7, #4]
24005c82:	2201      	movs	r2, #1
24005c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005c88:	687b      	ldr	r3, [r7, #4]
24005c8a:	2200      	movs	r2, #0
24005c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24005c90:	687b      	ldr	r3, [r7, #4]
24005c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005c94:	2b00      	cmp	r3, #0
24005c96:	f000 8272 	beq.w	2400617e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24005c9a:	687b      	ldr	r3, [r7, #4]
24005c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005c9e:	6878      	ldr	r0, [r7, #4]
24005ca0:	4798      	blx	r3
24005ca2:	e26c      	b.n	2400617e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005ca4:	687b      	ldr	r3, [r7, #4]
24005ca6:	681b      	ldr	r3, [r3, #0]
24005ca8:	4a43      	ldr	r2, [pc, #268]	; (24005db8 <HAL_DMA_IRQHandler+0xa48>)
24005caa:	4293      	cmp	r3, r2
24005cac:	d022      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005cae:	687b      	ldr	r3, [r7, #4]
24005cb0:	681b      	ldr	r3, [r3, #0]
24005cb2:	4a42      	ldr	r2, [pc, #264]	; (24005dbc <HAL_DMA_IRQHandler+0xa4c>)
24005cb4:	4293      	cmp	r3, r2
24005cb6:	d01d      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005cb8:	687b      	ldr	r3, [r7, #4]
24005cba:	681b      	ldr	r3, [r3, #0]
24005cbc:	4a40      	ldr	r2, [pc, #256]	; (24005dc0 <HAL_DMA_IRQHandler+0xa50>)
24005cbe:	4293      	cmp	r3, r2
24005cc0:	d018      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005cc2:	687b      	ldr	r3, [r7, #4]
24005cc4:	681b      	ldr	r3, [r3, #0]
24005cc6:	4a3f      	ldr	r2, [pc, #252]	; (24005dc4 <HAL_DMA_IRQHandler+0xa54>)
24005cc8:	4293      	cmp	r3, r2
24005cca:	d013      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005ccc:	687b      	ldr	r3, [r7, #4]
24005cce:	681b      	ldr	r3, [r3, #0]
24005cd0:	4a3d      	ldr	r2, [pc, #244]	; (24005dc8 <HAL_DMA_IRQHandler+0xa58>)
24005cd2:	4293      	cmp	r3, r2
24005cd4:	d00e      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005cd6:	687b      	ldr	r3, [r7, #4]
24005cd8:	681b      	ldr	r3, [r3, #0]
24005cda:	4a3c      	ldr	r2, [pc, #240]	; (24005dcc <HAL_DMA_IRQHandler+0xa5c>)
24005cdc:	4293      	cmp	r3, r2
24005cde:	d009      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005ce0:	687b      	ldr	r3, [r7, #4]
24005ce2:	681b      	ldr	r3, [r3, #0]
24005ce4:	4a3a      	ldr	r2, [pc, #232]	; (24005dd0 <HAL_DMA_IRQHandler+0xa60>)
24005ce6:	4293      	cmp	r3, r2
24005ce8:	d004      	beq.n	24005cf4 <HAL_DMA_IRQHandler+0x984>
24005cea:	687b      	ldr	r3, [r7, #4]
24005cec:	681b      	ldr	r3, [r3, #0]
24005cee:	4a39      	ldr	r2, [pc, #228]	; (24005dd4 <HAL_DMA_IRQHandler+0xa64>)
24005cf0:	4293      	cmp	r3, r2
24005cf2:	d101      	bne.n	24005cf8 <HAL_DMA_IRQHandler+0x988>
24005cf4:	2301      	movs	r3, #1
24005cf6:	e000      	b.n	24005cfa <HAL_DMA_IRQHandler+0x98a>
24005cf8:	2300      	movs	r3, #0
24005cfa:	2b00      	cmp	r3, #0
24005cfc:	f000 823f 	beq.w	2400617e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005d00:	687b      	ldr	r3, [r7, #4]
24005d02:	681b      	ldr	r3, [r3, #0]
24005d04:	681b      	ldr	r3, [r3, #0]
24005d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005d08:	687b      	ldr	r3, [r7, #4]
24005d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005d0c:	f003 031f 	and.w	r3, r3, #31
24005d10:	2204      	movs	r2, #4
24005d12:	409a      	lsls	r2, r3
24005d14:	697b      	ldr	r3, [r7, #20]
24005d16:	4013      	ands	r3, r2
24005d18:	2b00      	cmp	r3, #0
24005d1a:	f000 80cd 	beq.w	24005eb8 <HAL_DMA_IRQHandler+0xb48>
24005d1e:	693b      	ldr	r3, [r7, #16]
24005d20:	f003 0304 	and.w	r3, r3, #4
24005d24:	2b00      	cmp	r3, #0
24005d26:	f000 80c7 	beq.w	24005eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005d2a:	687b      	ldr	r3, [r7, #4]
24005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005d2e:	f003 031f 	and.w	r3, r3, #31
24005d32:	2204      	movs	r2, #4
24005d34:	409a      	lsls	r2, r3
24005d36:	69fb      	ldr	r3, [r7, #28]
24005d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005d3a:	693b      	ldr	r3, [r7, #16]
24005d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005d40:	2b00      	cmp	r3, #0
24005d42:	d049      	beq.n	24005dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005d44:	693b      	ldr	r3, [r7, #16]
24005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005d4a:	2b00      	cmp	r3, #0
24005d4c:	d109      	bne.n	24005d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24005d4e:	687b      	ldr	r3, [r7, #4]
24005d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005d52:	2b00      	cmp	r3, #0
24005d54:	f000 8210 	beq.w	24006178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24005d58:	687b      	ldr	r3, [r7, #4]
24005d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005d5c:	6878      	ldr	r0, [r7, #4]
24005d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005d60:	e20a      	b.n	24006178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24005d62:	687b      	ldr	r3, [r7, #4]
24005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005d66:	2b00      	cmp	r3, #0
24005d68:	f000 8206 	beq.w	24006178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24005d6c:	687b      	ldr	r3, [r7, #4]
24005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005d70:	6878      	ldr	r0, [r7, #4]
24005d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005d74:	e200      	b.n	24006178 <HAL_DMA_IRQHandler+0xe08>
24005d76:	bf00      	nop
24005d78:	40020010 	.word	0x40020010
24005d7c:	40020028 	.word	0x40020028
24005d80:	40020040 	.word	0x40020040
24005d84:	40020058 	.word	0x40020058
24005d88:	40020070 	.word	0x40020070
24005d8c:	40020088 	.word	0x40020088
24005d90:	400200a0 	.word	0x400200a0
24005d94:	400200b8 	.word	0x400200b8
24005d98:	40020410 	.word	0x40020410
24005d9c:	40020428 	.word	0x40020428
24005da0:	40020440 	.word	0x40020440
24005da4:	40020458 	.word	0x40020458
24005da8:	40020470 	.word	0x40020470
24005dac:	40020488 	.word	0x40020488
24005db0:	400204a0 	.word	0x400204a0
24005db4:	400204b8 	.word	0x400204b8
24005db8:	58025408 	.word	0x58025408
24005dbc:	5802541c 	.word	0x5802541c
24005dc0:	58025430 	.word	0x58025430
24005dc4:	58025444 	.word	0x58025444
24005dc8:	58025458 	.word	0x58025458
24005dcc:	5802546c 	.word	0x5802546c
24005dd0:	58025480 	.word	0x58025480
24005dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005dd8:	693b      	ldr	r3, [r7, #16]
24005dda:	f003 0320 	and.w	r3, r3, #32
24005dde:	2b00      	cmp	r3, #0
24005de0:	d160      	bne.n	24005ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005de2:	687b      	ldr	r3, [r7, #4]
24005de4:	681b      	ldr	r3, [r3, #0]
24005de6:	4a7f      	ldr	r2, [pc, #508]	; (24005fe4 <HAL_DMA_IRQHandler+0xc74>)
24005de8:	4293      	cmp	r3, r2
24005dea:	d04a      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005dec:	687b      	ldr	r3, [r7, #4]
24005dee:	681b      	ldr	r3, [r3, #0]
24005df0:	4a7d      	ldr	r2, [pc, #500]	; (24005fe8 <HAL_DMA_IRQHandler+0xc78>)
24005df2:	4293      	cmp	r3, r2
24005df4:	d045      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005df6:	687b      	ldr	r3, [r7, #4]
24005df8:	681b      	ldr	r3, [r3, #0]
24005dfa:	4a7c      	ldr	r2, [pc, #496]	; (24005fec <HAL_DMA_IRQHandler+0xc7c>)
24005dfc:	4293      	cmp	r3, r2
24005dfe:	d040      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e00:	687b      	ldr	r3, [r7, #4]
24005e02:	681b      	ldr	r3, [r3, #0]
24005e04:	4a7a      	ldr	r2, [pc, #488]	; (24005ff0 <HAL_DMA_IRQHandler+0xc80>)
24005e06:	4293      	cmp	r3, r2
24005e08:	d03b      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e0a:	687b      	ldr	r3, [r7, #4]
24005e0c:	681b      	ldr	r3, [r3, #0]
24005e0e:	4a79      	ldr	r2, [pc, #484]	; (24005ff4 <HAL_DMA_IRQHandler+0xc84>)
24005e10:	4293      	cmp	r3, r2
24005e12:	d036      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e14:	687b      	ldr	r3, [r7, #4]
24005e16:	681b      	ldr	r3, [r3, #0]
24005e18:	4a77      	ldr	r2, [pc, #476]	; (24005ff8 <HAL_DMA_IRQHandler+0xc88>)
24005e1a:	4293      	cmp	r3, r2
24005e1c:	d031      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e1e:	687b      	ldr	r3, [r7, #4]
24005e20:	681b      	ldr	r3, [r3, #0]
24005e22:	4a76      	ldr	r2, [pc, #472]	; (24005ffc <HAL_DMA_IRQHandler+0xc8c>)
24005e24:	4293      	cmp	r3, r2
24005e26:	d02c      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e28:	687b      	ldr	r3, [r7, #4]
24005e2a:	681b      	ldr	r3, [r3, #0]
24005e2c:	4a74      	ldr	r2, [pc, #464]	; (24006000 <HAL_DMA_IRQHandler+0xc90>)
24005e2e:	4293      	cmp	r3, r2
24005e30:	d027      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e32:	687b      	ldr	r3, [r7, #4]
24005e34:	681b      	ldr	r3, [r3, #0]
24005e36:	4a73      	ldr	r2, [pc, #460]	; (24006004 <HAL_DMA_IRQHandler+0xc94>)
24005e38:	4293      	cmp	r3, r2
24005e3a:	d022      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e3c:	687b      	ldr	r3, [r7, #4]
24005e3e:	681b      	ldr	r3, [r3, #0]
24005e40:	4a71      	ldr	r2, [pc, #452]	; (24006008 <HAL_DMA_IRQHandler+0xc98>)
24005e42:	4293      	cmp	r3, r2
24005e44:	d01d      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e46:	687b      	ldr	r3, [r7, #4]
24005e48:	681b      	ldr	r3, [r3, #0]
24005e4a:	4a70      	ldr	r2, [pc, #448]	; (2400600c <HAL_DMA_IRQHandler+0xc9c>)
24005e4c:	4293      	cmp	r3, r2
24005e4e:	d018      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e50:	687b      	ldr	r3, [r7, #4]
24005e52:	681b      	ldr	r3, [r3, #0]
24005e54:	4a6e      	ldr	r2, [pc, #440]	; (24006010 <HAL_DMA_IRQHandler+0xca0>)
24005e56:	4293      	cmp	r3, r2
24005e58:	d013      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e5a:	687b      	ldr	r3, [r7, #4]
24005e5c:	681b      	ldr	r3, [r3, #0]
24005e5e:	4a6d      	ldr	r2, [pc, #436]	; (24006014 <HAL_DMA_IRQHandler+0xca4>)
24005e60:	4293      	cmp	r3, r2
24005e62:	d00e      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e64:	687b      	ldr	r3, [r7, #4]
24005e66:	681b      	ldr	r3, [r3, #0]
24005e68:	4a6b      	ldr	r2, [pc, #428]	; (24006018 <HAL_DMA_IRQHandler+0xca8>)
24005e6a:	4293      	cmp	r3, r2
24005e6c:	d009      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e6e:	687b      	ldr	r3, [r7, #4]
24005e70:	681b      	ldr	r3, [r3, #0]
24005e72:	4a6a      	ldr	r2, [pc, #424]	; (2400601c <HAL_DMA_IRQHandler+0xcac>)
24005e74:	4293      	cmp	r3, r2
24005e76:	d004      	beq.n	24005e82 <HAL_DMA_IRQHandler+0xb12>
24005e78:	687b      	ldr	r3, [r7, #4]
24005e7a:	681b      	ldr	r3, [r3, #0]
24005e7c:	4a68      	ldr	r2, [pc, #416]	; (24006020 <HAL_DMA_IRQHandler+0xcb0>)
24005e7e:	4293      	cmp	r3, r2
24005e80:	d108      	bne.n	24005e94 <HAL_DMA_IRQHandler+0xb24>
24005e82:	687b      	ldr	r3, [r7, #4]
24005e84:	681b      	ldr	r3, [r3, #0]
24005e86:	681a      	ldr	r2, [r3, #0]
24005e88:	687b      	ldr	r3, [r7, #4]
24005e8a:	681b      	ldr	r3, [r3, #0]
24005e8c:	f022 0208 	bic.w	r2, r2, #8
24005e90:	601a      	str	r2, [r3, #0]
24005e92:	e007      	b.n	24005ea4 <HAL_DMA_IRQHandler+0xb34>
24005e94:	687b      	ldr	r3, [r7, #4]
24005e96:	681b      	ldr	r3, [r3, #0]
24005e98:	681a      	ldr	r2, [r3, #0]
24005e9a:	687b      	ldr	r3, [r7, #4]
24005e9c:	681b      	ldr	r3, [r3, #0]
24005e9e:	f022 0204 	bic.w	r2, r2, #4
24005ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24005ea4:	687b      	ldr	r3, [r7, #4]
24005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005ea8:	2b00      	cmp	r3, #0
24005eaa:	f000 8165 	beq.w	24006178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24005eae:	687b      	ldr	r3, [r7, #4]
24005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005eb2:	6878      	ldr	r0, [r7, #4]
24005eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005eb6:	e15f      	b.n	24006178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005eb8:	687b      	ldr	r3, [r7, #4]
24005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005ebc:	f003 031f 	and.w	r3, r3, #31
24005ec0:	2202      	movs	r2, #2
24005ec2:	409a      	lsls	r2, r3
24005ec4:	697b      	ldr	r3, [r7, #20]
24005ec6:	4013      	ands	r3, r2
24005ec8:	2b00      	cmp	r3, #0
24005eca:	f000 80c5 	beq.w	24006058 <HAL_DMA_IRQHandler+0xce8>
24005ece:	693b      	ldr	r3, [r7, #16]
24005ed0:	f003 0302 	and.w	r3, r3, #2
24005ed4:	2b00      	cmp	r3, #0
24005ed6:	f000 80bf 	beq.w	24006058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005eda:	687b      	ldr	r3, [r7, #4]
24005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005ede:	f003 031f 	and.w	r3, r3, #31
24005ee2:	2202      	movs	r2, #2
24005ee4:	409a      	lsls	r2, r3
24005ee6:	69fb      	ldr	r3, [r7, #28]
24005ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005eea:	693b      	ldr	r3, [r7, #16]
24005eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005ef0:	2b00      	cmp	r3, #0
24005ef2:	d018      	beq.n	24005f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005ef4:	693b      	ldr	r3, [r7, #16]
24005ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005efa:	2b00      	cmp	r3, #0
24005efc:	d109      	bne.n	24005f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
24005efe:	687b      	ldr	r3, [r7, #4]
24005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005f02:	2b00      	cmp	r3, #0
24005f04:	f000 813a 	beq.w	2400617c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24005f08:	687b      	ldr	r3, [r7, #4]
24005f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005f0c:	6878      	ldr	r0, [r7, #4]
24005f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005f10:	e134      	b.n	2400617c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24005f12:	687b      	ldr	r3, [r7, #4]
24005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005f16:	2b00      	cmp	r3, #0
24005f18:	f000 8130 	beq.w	2400617c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24005f1c:	687b      	ldr	r3, [r7, #4]
24005f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005f20:	6878      	ldr	r0, [r7, #4]
24005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005f24:	e12a      	b.n	2400617c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005f26:	693b      	ldr	r3, [r7, #16]
24005f28:	f003 0320 	and.w	r3, r3, #32
24005f2c:	2b00      	cmp	r3, #0
24005f2e:	f040 8089 	bne.w	24006044 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005f32:	687b      	ldr	r3, [r7, #4]
24005f34:	681b      	ldr	r3, [r3, #0]
24005f36:	4a2b      	ldr	r2, [pc, #172]	; (24005fe4 <HAL_DMA_IRQHandler+0xc74>)
24005f38:	4293      	cmp	r3, r2
24005f3a:	d04a      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f3c:	687b      	ldr	r3, [r7, #4]
24005f3e:	681b      	ldr	r3, [r3, #0]
24005f40:	4a29      	ldr	r2, [pc, #164]	; (24005fe8 <HAL_DMA_IRQHandler+0xc78>)
24005f42:	4293      	cmp	r3, r2
24005f44:	d045      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f46:	687b      	ldr	r3, [r7, #4]
24005f48:	681b      	ldr	r3, [r3, #0]
24005f4a:	4a28      	ldr	r2, [pc, #160]	; (24005fec <HAL_DMA_IRQHandler+0xc7c>)
24005f4c:	4293      	cmp	r3, r2
24005f4e:	d040      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f50:	687b      	ldr	r3, [r7, #4]
24005f52:	681b      	ldr	r3, [r3, #0]
24005f54:	4a26      	ldr	r2, [pc, #152]	; (24005ff0 <HAL_DMA_IRQHandler+0xc80>)
24005f56:	4293      	cmp	r3, r2
24005f58:	d03b      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f5a:	687b      	ldr	r3, [r7, #4]
24005f5c:	681b      	ldr	r3, [r3, #0]
24005f5e:	4a25      	ldr	r2, [pc, #148]	; (24005ff4 <HAL_DMA_IRQHandler+0xc84>)
24005f60:	4293      	cmp	r3, r2
24005f62:	d036      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f64:	687b      	ldr	r3, [r7, #4]
24005f66:	681b      	ldr	r3, [r3, #0]
24005f68:	4a23      	ldr	r2, [pc, #140]	; (24005ff8 <HAL_DMA_IRQHandler+0xc88>)
24005f6a:	4293      	cmp	r3, r2
24005f6c:	d031      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f6e:	687b      	ldr	r3, [r7, #4]
24005f70:	681b      	ldr	r3, [r3, #0]
24005f72:	4a22      	ldr	r2, [pc, #136]	; (24005ffc <HAL_DMA_IRQHandler+0xc8c>)
24005f74:	4293      	cmp	r3, r2
24005f76:	d02c      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f78:	687b      	ldr	r3, [r7, #4]
24005f7a:	681b      	ldr	r3, [r3, #0]
24005f7c:	4a20      	ldr	r2, [pc, #128]	; (24006000 <HAL_DMA_IRQHandler+0xc90>)
24005f7e:	4293      	cmp	r3, r2
24005f80:	d027      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f82:	687b      	ldr	r3, [r7, #4]
24005f84:	681b      	ldr	r3, [r3, #0]
24005f86:	4a1f      	ldr	r2, [pc, #124]	; (24006004 <HAL_DMA_IRQHandler+0xc94>)
24005f88:	4293      	cmp	r3, r2
24005f8a:	d022      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f8c:	687b      	ldr	r3, [r7, #4]
24005f8e:	681b      	ldr	r3, [r3, #0]
24005f90:	4a1d      	ldr	r2, [pc, #116]	; (24006008 <HAL_DMA_IRQHandler+0xc98>)
24005f92:	4293      	cmp	r3, r2
24005f94:	d01d      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005f96:	687b      	ldr	r3, [r7, #4]
24005f98:	681b      	ldr	r3, [r3, #0]
24005f9a:	4a1c      	ldr	r2, [pc, #112]	; (2400600c <HAL_DMA_IRQHandler+0xc9c>)
24005f9c:	4293      	cmp	r3, r2
24005f9e:	d018      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005fa0:	687b      	ldr	r3, [r7, #4]
24005fa2:	681b      	ldr	r3, [r3, #0]
24005fa4:	4a1a      	ldr	r2, [pc, #104]	; (24006010 <HAL_DMA_IRQHandler+0xca0>)
24005fa6:	4293      	cmp	r3, r2
24005fa8:	d013      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005faa:	687b      	ldr	r3, [r7, #4]
24005fac:	681b      	ldr	r3, [r3, #0]
24005fae:	4a19      	ldr	r2, [pc, #100]	; (24006014 <HAL_DMA_IRQHandler+0xca4>)
24005fb0:	4293      	cmp	r3, r2
24005fb2:	d00e      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005fb4:	687b      	ldr	r3, [r7, #4]
24005fb6:	681b      	ldr	r3, [r3, #0]
24005fb8:	4a17      	ldr	r2, [pc, #92]	; (24006018 <HAL_DMA_IRQHandler+0xca8>)
24005fba:	4293      	cmp	r3, r2
24005fbc:	d009      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005fbe:	687b      	ldr	r3, [r7, #4]
24005fc0:	681b      	ldr	r3, [r3, #0]
24005fc2:	4a16      	ldr	r2, [pc, #88]	; (2400601c <HAL_DMA_IRQHandler+0xcac>)
24005fc4:	4293      	cmp	r3, r2
24005fc6:	d004      	beq.n	24005fd2 <HAL_DMA_IRQHandler+0xc62>
24005fc8:	687b      	ldr	r3, [r7, #4]
24005fca:	681b      	ldr	r3, [r3, #0]
24005fcc:	4a14      	ldr	r2, [pc, #80]	; (24006020 <HAL_DMA_IRQHandler+0xcb0>)
24005fce:	4293      	cmp	r3, r2
24005fd0:	d128      	bne.n	24006024 <HAL_DMA_IRQHandler+0xcb4>
24005fd2:	687b      	ldr	r3, [r7, #4]
24005fd4:	681b      	ldr	r3, [r3, #0]
24005fd6:	681a      	ldr	r2, [r3, #0]
24005fd8:	687b      	ldr	r3, [r7, #4]
24005fda:	681b      	ldr	r3, [r3, #0]
24005fdc:	f022 0214 	bic.w	r2, r2, #20
24005fe0:	601a      	str	r2, [r3, #0]
24005fe2:	e027      	b.n	24006034 <HAL_DMA_IRQHandler+0xcc4>
24005fe4:	40020010 	.word	0x40020010
24005fe8:	40020028 	.word	0x40020028
24005fec:	40020040 	.word	0x40020040
24005ff0:	40020058 	.word	0x40020058
24005ff4:	40020070 	.word	0x40020070
24005ff8:	40020088 	.word	0x40020088
24005ffc:	400200a0 	.word	0x400200a0
24006000:	400200b8 	.word	0x400200b8
24006004:	40020410 	.word	0x40020410
24006008:	40020428 	.word	0x40020428
2400600c:	40020440 	.word	0x40020440
24006010:	40020458 	.word	0x40020458
24006014:	40020470 	.word	0x40020470
24006018:	40020488 	.word	0x40020488
2400601c:	400204a0 	.word	0x400204a0
24006020:	400204b8 	.word	0x400204b8
24006024:	687b      	ldr	r3, [r7, #4]
24006026:	681b      	ldr	r3, [r3, #0]
24006028:	681a      	ldr	r2, [r3, #0]
2400602a:	687b      	ldr	r3, [r7, #4]
2400602c:	681b      	ldr	r3, [r3, #0]
2400602e:	f022 020a 	bic.w	r2, r2, #10
24006032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24006034:	687b      	ldr	r3, [r7, #4]
24006036:	2201      	movs	r2, #1
24006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
2400603c:	687b      	ldr	r3, [r7, #4]
2400603e:	2200      	movs	r2, #0
24006040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24006044:	687b      	ldr	r3, [r7, #4]
24006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006048:	2b00      	cmp	r3, #0
2400604a:	f000 8097 	beq.w	2400617c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
2400604e:	687b      	ldr	r3, [r7, #4]
24006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006052:	6878      	ldr	r0, [r7, #4]
24006054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006056:	e091      	b.n	2400617c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006058:	687b      	ldr	r3, [r7, #4]
2400605a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400605c:	f003 031f 	and.w	r3, r3, #31
24006060:	2208      	movs	r2, #8
24006062:	409a      	lsls	r2, r3
24006064:	697b      	ldr	r3, [r7, #20]
24006066:	4013      	ands	r3, r2
24006068:	2b00      	cmp	r3, #0
2400606a:	f000 8088 	beq.w	2400617e <HAL_DMA_IRQHandler+0xe0e>
2400606e:	693b      	ldr	r3, [r7, #16]
24006070:	f003 0308 	and.w	r3, r3, #8
24006074:	2b00      	cmp	r3, #0
24006076:	f000 8082 	beq.w	2400617e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2400607a:	687b      	ldr	r3, [r7, #4]
2400607c:	681b      	ldr	r3, [r3, #0]
2400607e:	4a41      	ldr	r2, [pc, #260]	; (24006184 <HAL_DMA_IRQHandler+0xe14>)
24006080:	4293      	cmp	r3, r2
24006082:	d04a      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
24006084:	687b      	ldr	r3, [r7, #4]
24006086:	681b      	ldr	r3, [r3, #0]
24006088:	4a3f      	ldr	r2, [pc, #252]	; (24006188 <HAL_DMA_IRQHandler+0xe18>)
2400608a:	4293      	cmp	r3, r2
2400608c:	d045      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
2400608e:	687b      	ldr	r3, [r7, #4]
24006090:	681b      	ldr	r3, [r3, #0]
24006092:	4a3e      	ldr	r2, [pc, #248]	; (2400618c <HAL_DMA_IRQHandler+0xe1c>)
24006094:	4293      	cmp	r3, r2
24006096:	d040      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
24006098:	687b      	ldr	r3, [r7, #4]
2400609a:	681b      	ldr	r3, [r3, #0]
2400609c:	4a3c      	ldr	r2, [pc, #240]	; (24006190 <HAL_DMA_IRQHandler+0xe20>)
2400609e:	4293      	cmp	r3, r2
240060a0:	d03b      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060a2:	687b      	ldr	r3, [r7, #4]
240060a4:	681b      	ldr	r3, [r3, #0]
240060a6:	4a3b      	ldr	r2, [pc, #236]	; (24006194 <HAL_DMA_IRQHandler+0xe24>)
240060a8:	4293      	cmp	r3, r2
240060aa:	d036      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060ac:	687b      	ldr	r3, [r7, #4]
240060ae:	681b      	ldr	r3, [r3, #0]
240060b0:	4a39      	ldr	r2, [pc, #228]	; (24006198 <HAL_DMA_IRQHandler+0xe28>)
240060b2:	4293      	cmp	r3, r2
240060b4:	d031      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060b6:	687b      	ldr	r3, [r7, #4]
240060b8:	681b      	ldr	r3, [r3, #0]
240060ba:	4a38      	ldr	r2, [pc, #224]	; (2400619c <HAL_DMA_IRQHandler+0xe2c>)
240060bc:	4293      	cmp	r3, r2
240060be:	d02c      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060c0:	687b      	ldr	r3, [r7, #4]
240060c2:	681b      	ldr	r3, [r3, #0]
240060c4:	4a36      	ldr	r2, [pc, #216]	; (240061a0 <HAL_DMA_IRQHandler+0xe30>)
240060c6:	4293      	cmp	r3, r2
240060c8:	d027      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060ca:	687b      	ldr	r3, [r7, #4]
240060cc:	681b      	ldr	r3, [r3, #0]
240060ce:	4a35      	ldr	r2, [pc, #212]	; (240061a4 <HAL_DMA_IRQHandler+0xe34>)
240060d0:	4293      	cmp	r3, r2
240060d2:	d022      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060d4:	687b      	ldr	r3, [r7, #4]
240060d6:	681b      	ldr	r3, [r3, #0]
240060d8:	4a33      	ldr	r2, [pc, #204]	; (240061a8 <HAL_DMA_IRQHandler+0xe38>)
240060da:	4293      	cmp	r3, r2
240060dc:	d01d      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060de:	687b      	ldr	r3, [r7, #4]
240060e0:	681b      	ldr	r3, [r3, #0]
240060e2:	4a32      	ldr	r2, [pc, #200]	; (240061ac <HAL_DMA_IRQHandler+0xe3c>)
240060e4:	4293      	cmp	r3, r2
240060e6:	d018      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060e8:	687b      	ldr	r3, [r7, #4]
240060ea:	681b      	ldr	r3, [r3, #0]
240060ec:	4a30      	ldr	r2, [pc, #192]	; (240061b0 <HAL_DMA_IRQHandler+0xe40>)
240060ee:	4293      	cmp	r3, r2
240060f0:	d013      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060f2:	687b      	ldr	r3, [r7, #4]
240060f4:	681b      	ldr	r3, [r3, #0]
240060f6:	4a2f      	ldr	r2, [pc, #188]	; (240061b4 <HAL_DMA_IRQHandler+0xe44>)
240060f8:	4293      	cmp	r3, r2
240060fa:	d00e      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
240060fc:	687b      	ldr	r3, [r7, #4]
240060fe:	681b      	ldr	r3, [r3, #0]
24006100:	4a2d      	ldr	r2, [pc, #180]	; (240061b8 <HAL_DMA_IRQHandler+0xe48>)
24006102:	4293      	cmp	r3, r2
24006104:	d009      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
24006106:	687b      	ldr	r3, [r7, #4]
24006108:	681b      	ldr	r3, [r3, #0]
2400610a:	4a2c      	ldr	r2, [pc, #176]	; (240061bc <HAL_DMA_IRQHandler+0xe4c>)
2400610c:	4293      	cmp	r3, r2
2400610e:	d004      	beq.n	2400611a <HAL_DMA_IRQHandler+0xdaa>
24006110:	687b      	ldr	r3, [r7, #4]
24006112:	681b      	ldr	r3, [r3, #0]
24006114:	4a2a      	ldr	r2, [pc, #168]	; (240061c0 <HAL_DMA_IRQHandler+0xe50>)
24006116:	4293      	cmp	r3, r2
24006118:	d108      	bne.n	2400612c <HAL_DMA_IRQHandler+0xdbc>
2400611a:	687b      	ldr	r3, [r7, #4]
2400611c:	681b      	ldr	r3, [r3, #0]
2400611e:	681a      	ldr	r2, [r3, #0]
24006120:	687b      	ldr	r3, [r7, #4]
24006122:	681b      	ldr	r3, [r3, #0]
24006124:	f022 021c 	bic.w	r2, r2, #28
24006128:	601a      	str	r2, [r3, #0]
2400612a:	e007      	b.n	2400613c <HAL_DMA_IRQHandler+0xdcc>
2400612c:	687b      	ldr	r3, [r7, #4]
2400612e:	681b      	ldr	r3, [r3, #0]
24006130:	681a      	ldr	r2, [r3, #0]
24006132:	687b      	ldr	r3, [r7, #4]
24006134:	681b      	ldr	r3, [r3, #0]
24006136:	f022 020e 	bic.w	r2, r2, #14
2400613a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400613c:	687b      	ldr	r3, [r7, #4]
2400613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006140:	f003 031f 	and.w	r3, r3, #31
24006144:	2201      	movs	r2, #1
24006146:	409a      	lsls	r2, r3
24006148:	69fb      	ldr	r3, [r7, #28]
2400614a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
2400614c:	687b      	ldr	r3, [r7, #4]
2400614e:	2201      	movs	r2, #1
24006150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24006152:	687b      	ldr	r3, [r7, #4]
24006154:	2201      	movs	r2, #1
24006156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2400615a:	687b      	ldr	r3, [r7, #4]
2400615c:	2200      	movs	r2, #0
2400615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
24006162:	687b      	ldr	r3, [r7, #4]
24006164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24006166:	2b00      	cmp	r3, #0
24006168:	d009      	beq.n	2400617e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2400616a:	687b      	ldr	r3, [r7, #4]
2400616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400616e:	6878      	ldr	r0, [r7, #4]
24006170:	4798      	blx	r3
24006172:	e004      	b.n	2400617e <HAL_DMA_IRQHandler+0xe0e>
          return;
24006174:	bf00      	nop
24006176:	e002      	b.n	2400617e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006178:	bf00      	nop
2400617a:	e000      	b.n	2400617e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400617c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
2400617e:	3728      	adds	r7, #40	; 0x28
24006180:	46bd      	mov	sp, r7
24006182:	bd80      	pop	{r7, pc}
24006184:	40020010 	.word	0x40020010
24006188:	40020028 	.word	0x40020028
2400618c:	40020040 	.word	0x40020040
24006190:	40020058 	.word	0x40020058
24006194:	40020070 	.word	0x40020070
24006198:	40020088 	.word	0x40020088
2400619c:	400200a0 	.word	0x400200a0
240061a0:	400200b8 	.word	0x400200b8
240061a4:	40020410 	.word	0x40020410
240061a8:	40020428 	.word	0x40020428
240061ac:	40020440 	.word	0x40020440
240061b0:	40020458 	.word	0x40020458
240061b4:	40020470 	.word	0x40020470
240061b8:	40020488 	.word	0x40020488
240061bc:	400204a0 	.word	0x400204a0
240061c0:	400204b8 	.word	0x400204b8

240061c4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
240061c4:	b480      	push	{r7}
240061c6:	b087      	sub	sp, #28
240061c8:	af00      	add	r7, sp, #0
240061ca:	60f8      	str	r0, [r7, #12]
240061cc:	460b      	mov	r3, r1
240061ce:	607a      	str	r2, [r7, #4]
240061d0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
240061d2:	2300      	movs	r3, #0
240061d4:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240061d6:	68fb      	ldr	r3, [r7, #12]
240061d8:	2b00      	cmp	r3, #0
240061da:	d101      	bne.n	240061e0 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
240061dc:	2301      	movs	r3, #1
240061de:	e045      	b.n	2400626c <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
240061e0:	68fb      	ldr	r3, [r7, #12]
240061e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240061e6:	2b01      	cmp	r3, #1
240061e8:	d101      	bne.n	240061ee <HAL_DMA_RegisterCallback+0x2a>
240061ea:	2302      	movs	r3, #2
240061ec:	e03e      	b.n	2400626c <HAL_DMA_RegisterCallback+0xa8>
240061ee:	68fb      	ldr	r3, [r7, #12]
240061f0:	2201      	movs	r2, #1
240061f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240061f6:	68fb      	ldr	r3, [r7, #12]
240061f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240061fc:	b2db      	uxtb	r3, r3
240061fe:	2b01      	cmp	r3, #1
24006200:	d12d      	bne.n	2400625e <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
24006202:	7afb      	ldrb	r3, [r7, #11]
24006204:	2b05      	cmp	r3, #5
24006206:	d827      	bhi.n	24006258 <HAL_DMA_RegisterCallback+0x94>
24006208:	a201      	add	r2, pc, #4	; (adr r2, 24006210 <HAL_DMA_RegisterCallback+0x4c>)
2400620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400620e:	bf00      	nop
24006210:	24006229 	.word	0x24006229
24006214:	24006231 	.word	0x24006231
24006218:	24006239 	.word	0x24006239
2400621c:	24006241 	.word	0x24006241
24006220:	24006249 	.word	0x24006249
24006224:	24006251 	.word	0x24006251
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
24006228:	68fb      	ldr	r3, [r7, #12]
2400622a:	687a      	ldr	r2, [r7, #4]
2400622c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
2400622e:	e018      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
24006230:	68fb      	ldr	r3, [r7, #12]
24006232:	687a      	ldr	r2, [r7, #4]
24006234:	641a      	str	r2, [r3, #64]	; 0x40
      break;
24006236:	e014      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
24006238:	68fb      	ldr	r3, [r7, #12]
2400623a:	687a      	ldr	r2, [r7, #4]
2400623c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400623e:	e010      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
24006240:	68fb      	ldr	r3, [r7, #12]
24006242:	687a      	ldr	r2, [r7, #4]
24006244:	649a      	str	r2, [r3, #72]	; 0x48
      break;
24006246:	e00c      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
24006248:	68fb      	ldr	r3, [r7, #12]
2400624a:	687a      	ldr	r2, [r7, #4]
2400624c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400624e:	e008      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
24006250:	68fb      	ldr	r3, [r7, #12]
24006252:	687a      	ldr	r2, [r7, #4]
24006254:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24006256:	e004      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
24006258:	2301      	movs	r3, #1
2400625a:	75fb      	strb	r3, [r7, #23]
      break;
2400625c:	e001      	b.n	24006262 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400625e:	2301      	movs	r3, #1
24006260:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24006262:	68fb      	ldr	r3, [r7, #12]
24006264:	2200      	movs	r2, #0
24006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
2400626a:	7dfb      	ldrb	r3, [r7, #23]
}
2400626c:	4618      	mov	r0, r3
2400626e:	371c      	adds	r7, #28
24006270:	46bd      	mov	sp, r7
24006272:	f85d 7b04 	ldr.w	r7, [sp], #4
24006276:	4770      	bx	lr

24006278 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
24006278:	b480      	push	{r7}
2400627a:	b085      	sub	sp, #20
2400627c:	af00      	add	r7, sp, #0
2400627e:	6078      	str	r0, [r7, #4]
24006280:	460b      	mov	r3, r1
24006282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24006284:	2300      	movs	r3, #0
24006286:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006288:	687b      	ldr	r3, [r7, #4]
2400628a:	2b00      	cmp	r3, #0
2400628c:	d101      	bne.n	24006292 <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2400628e:	2301      	movs	r3, #1
24006290:	e059      	b.n	24006346 <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006292:	687b      	ldr	r3, [r7, #4]
24006294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006298:	2b01      	cmp	r3, #1
2400629a:	d101      	bne.n	240062a0 <HAL_DMA_UnRegisterCallback+0x28>
2400629c:	2302      	movs	r3, #2
2400629e:	e052      	b.n	24006346 <HAL_DMA_UnRegisterCallback+0xce>
240062a0:	687b      	ldr	r3, [r7, #4]
240062a2:	2201      	movs	r2, #1
240062a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240062a8:	687b      	ldr	r3, [r7, #4]
240062aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240062ae:	b2db      	uxtb	r3, r3
240062b0:	2b01      	cmp	r3, #1
240062b2:	d141      	bne.n	24006338 <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
240062b4:	78fb      	ldrb	r3, [r7, #3]
240062b6:	2b06      	cmp	r3, #6
240062b8:	d83b      	bhi.n	24006332 <HAL_DMA_UnRegisterCallback+0xba>
240062ba:	a201      	add	r2, pc, #4	; (adr r2, 240062c0 <HAL_DMA_UnRegisterCallback+0x48>)
240062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240062c0:	240062dd 	.word	0x240062dd
240062c4:	240062e5 	.word	0x240062e5
240062c8:	240062ed 	.word	0x240062ed
240062cc:	240062f5 	.word	0x240062f5
240062d0:	240062fd 	.word	0x240062fd
240062d4:	24006305 	.word	0x24006305
240062d8:	2400630d 	.word	0x2400630d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
240062dc:	687b      	ldr	r3, [r7, #4]
240062de:	2200      	movs	r2, #0
240062e0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
240062e2:	e02b      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
240062e4:	687b      	ldr	r3, [r7, #4]
240062e6:	2200      	movs	r2, #0
240062e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
240062ea:	e027      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
240062ec:	687b      	ldr	r3, [r7, #4]
240062ee:	2200      	movs	r2, #0
240062f0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240062f2:	e023      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
240062f4:	687b      	ldr	r3, [r7, #4]
240062f6:	2200      	movs	r2, #0
240062f8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240062fa:	e01f      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
240062fc:	687b      	ldr	r3, [r7, #4]
240062fe:	2200      	movs	r2, #0
24006300:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
24006302:	e01b      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
24006304:	687b      	ldr	r3, [r7, #4]
24006306:	2200      	movs	r2, #0
24006308:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400630a:	e017      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
2400630c:	687b      	ldr	r3, [r7, #4]
2400630e:	2200      	movs	r2, #0
24006310:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
24006312:	687b      	ldr	r3, [r7, #4]
24006314:	2200      	movs	r2, #0
24006316:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
24006318:	687b      	ldr	r3, [r7, #4]
2400631a:	2200      	movs	r2, #0
2400631c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
2400631e:	687b      	ldr	r3, [r7, #4]
24006320:	2200      	movs	r2, #0
24006322:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
24006324:	687b      	ldr	r3, [r7, #4]
24006326:	2200      	movs	r2, #0
24006328:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
2400632a:	687b      	ldr	r3, [r7, #4]
2400632c:	2200      	movs	r2, #0
2400632e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24006330:	e004      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
24006332:	2301      	movs	r3, #1
24006334:	73fb      	strb	r3, [r7, #15]
      break;
24006336:	e001      	b.n	2400633c <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
24006338:	2301      	movs	r3, #1
2400633a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
2400633c:	687b      	ldr	r3, [r7, #4]
2400633e:	2200      	movs	r2, #0
24006340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
24006344:	7bfb      	ldrb	r3, [r7, #15]
}
24006346:	4618      	mov	r0, r3
24006348:	3714      	adds	r7, #20
2400634a:	46bd      	mov	sp, r7
2400634c:	f85d 7b04 	ldr.w	r7, [sp], #4
24006350:	4770      	bx	lr
24006352:	bf00      	nop

24006354 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
24006354:	b480      	push	{r7}
24006356:	b083      	sub	sp, #12
24006358:	af00      	add	r7, sp, #0
2400635a:	6078      	str	r0, [r7, #4]
  return hdma->State;
2400635c:	687b      	ldr	r3, [r7, #4]
2400635e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006362:	b2db      	uxtb	r3, r3
}
24006364:	4618      	mov	r0, r3
24006366:	370c      	adds	r7, #12
24006368:	46bd      	mov	sp, r7
2400636a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400636e:	4770      	bx	lr

24006370 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24006370:	b480      	push	{r7}
24006372:	b083      	sub	sp, #12
24006374:	af00      	add	r7, sp, #0
24006376:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24006378:	687b      	ldr	r3, [r7, #4]
2400637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
2400637c:	4618      	mov	r0, r3
2400637e:	370c      	adds	r7, #12
24006380:	46bd      	mov	sp, r7
24006382:	f85d 7b04 	ldr.w	r7, [sp], #4
24006386:	4770      	bx	lr

24006388 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24006388:	b480      	push	{r7}
2400638a:	b087      	sub	sp, #28
2400638c:	af00      	add	r7, sp, #0
2400638e:	60f8      	str	r0, [r7, #12]
24006390:	60b9      	str	r1, [r7, #8]
24006392:	607a      	str	r2, [r7, #4]
24006394:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006396:	68fb      	ldr	r3, [r7, #12]
24006398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400639a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2400639c:	68fb      	ldr	r3, [r7, #12]
2400639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240063a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240063a2:	68fb      	ldr	r3, [r7, #12]
240063a4:	681b      	ldr	r3, [r3, #0]
240063a6:	4a7f      	ldr	r2, [pc, #508]	; (240065a4 <DMA_SetConfig+0x21c>)
240063a8:	4293      	cmp	r3, r2
240063aa:	d072      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063ac:	68fb      	ldr	r3, [r7, #12]
240063ae:	681b      	ldr	r3, [r3, #0]
240063b0:	4a7d      	ldr	r2, [pc, #500]	; (240065a8 <DMA_SetConfig+0x220>)
240063b2:	4293      	cmp	r3, r2
240063b4:	d06d      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063b6:	68fb      	ldr	r3, [r7, #12]
240063b8:	681b      	ldr	r3, [r3, #0]
240063ba:	4a7c      	ldr	r2, [pc, #496]	; (240065ac <DMA_SetConfig+0x224>)
240063bc:	4293      	cmp	r3, r2
240063be:	d068      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063c0:	68fb      	ldr	r3, [r7, #12]
240063c2:	681b      	ldr	r3, [r3, #0]
240063c4:	4a7a      	ldr	r2, [pc, #488]	; (240065b0 <DMA_SetConfig+0x228>)
240063c6:	4293      	cmp	r3, r2
240063c8:	d063      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063ca:	68fb      	ldr	r3, [r7, #12]
240063cc:	681b      	ldr	r3, [r3, #0]
240063ce:	4a79      	ldr	r2, [pc, #484]	; (240065b4 <DMA_SetConfig+0x22c>)
240063d0:	4293      	cmp	r3, r2
240063d2:	d05e      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063d4:	68fb      	ldr	r3, [r7, #12]
240063d6:	681b      	ldr	r3, [r3, #0]
240063d8:	4a77      	ldr	r2, [pc, #476]	; (240065b8 <DMA_SetConfig+0x230>)
240063da:	4293      	cmp	r3, r2
240063dc:	d059      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063de:	68fb      	ldr	r3, [r7, #12]
240063e0:	681b      	ldr	r3, [r3, #0]
240063e2:	4a76      	ldr	r2, [pc, #472]	; (240065bc <DMA_SetConfig+0x234>)
240063e4:	4293      	cmp	r3, r2
240063e6:	d054      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063e8:	68fb      	ldr	r3, [r7, #12]
240063ea:	681b      	ldr	r3, [r3, #0]
240063ec:	4a74      	ldr	r2, [pc, #464]	; (240065c0 <DMA_SetConfig+0x238>)
240063ee:	4293      	cmp	r3, r2
240063f0:	d04f      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063f2:	68fb      	ldr	r3, [r7, #12]
240063f4:	681b      	ldr	r3, [r3, #0]
240063f6:	4a73      	ldr	r2, [pc, #460]	; (240065c4 <DMA_SetConfig+0x23c>)
240063f8:	4293      	cmp	r3, r2
240063fa:	d04a      	beq.n	24006492 <DMA_SetConfig+0x10a>
240063fc:	68fb      	ldr	r3, [r7, #12]
240063fe:	681b      	ldr	r3, [r3, #0]
24006400:	4a71      	ldr	r2, [pc, #452]	; (240065c8 <DMA_SetConfig+0x240>)
24006402:	4293      	cmp	r3, r2
24006404:	d045      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006406:	68fb      	ldr	r3, [r7, #12]
24006408:	681b      	ldr	r3, [r3, #0]
2400640a:	4a70      	ldr	r2, [pc, #448]	; (240065cc <DMA_SetConfig+0x244>)
2400640c:	4293      	cmp	r3, r2
2400640e:	d040      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006410:	68fb      	ldr	r3, [r7, #12]
24006412:	681b      	ldr	r3, [r3, #0]
24006414:	4a6e      	ldr	r2, [pc, #440]	; (240065d0 <DMA_SetConfig+0x248>)
24006416:	4293      	cmp	r3, r2
24006418:	d03b      	beq.n	24006492 <DMA_SetConfig+0x10a>
2400641a:	68fb      	ldr	r3, [r7, #12]
2400641c:	681b      	ldr	r3, [r3, #0]
2400641e:	4a6d      	ldr	r2, [pc, #436]	; (240065d4 <DMA_SetConfig+0x24c>)
24006420:	4293      	cmp	r3, r2
24006422:	d036      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006424:	68fb      	ldr	r3, [r7, #12]
24006426:	681b      	ldr	r3, [r3, #0]
24006428:	4a6b      	ldr	r2, [pc, #428]	; (240065d8 <DMA_SetConfig+0x250>)
2400642a:	4293      	cmp	r3, r2
2400642c:	d031      	beq.n	24006492 <DMA_SetConfig+0x10a>
2400642e:	68fb      	ldr	r3, [r7, #12]
24006430:	681b      	ldr	r3, [r3, #0]
24006432:	4a6a      	ldr	r2, [pc, #424]	; (240065dc <DMA_SetConfig+0x254>)
24006434:	4293      	cmp	r3, r2
24006436:	d02c      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006438:	68fb      	ldr	r3, [r7, #12]
2400643a:	681b      	ldr	r3, [r3, #0]
2400643c:	4a68      	ldr	r2, [pc, #416]	; (240065e0 <DMA_SetConfig+0x258>)
2400643e:	4293      	cmp	r3, r2
24006440:	d027      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006442:	68fb      	ldr	r3, [r7, #12]
24006444:	681b      	ldr	r3, [r3, #0]
24006446:	4a67      	ldr	r2, [pc, #412]	; (240065e4 <DMA_SetConfig+0x25c>)
24006448:	4293      	cmp	r3, r2
2400644a:	d022      	beq.n	24006492 <DMA_SetConfig+0x10a>
2400644c:	68fb      	ldr	r3, [r7, #12]
2400644e:	681b      	ldr	r3, [r3, #0]
24006450:	4a65      	ldr	r2, [pc, #404]	; (240065e8 <DMA_SetConfig+0x260>)
24006452:	4293      	cmp	r3, r2
24006454:	d01d      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006456:	68fb      	ldr	r3, [r7, #12]
24006458:	681b      	ldr	r3, [r3, #0]
2400645a:	4a64      	ldr	r2, [pc, #400]	; (240065ec <DMA_SetConfig+0x264>)
2400645c:	4293      	cmp	r3, r2
2400645e:	d018      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006460:	68fb      	ldr	r3, [r7, #12]
24006462:	681b      	ldr	r3, [r3, #0]
24006464:	4a62      	ldr	r2, [pc, #392]	; (240065f0 <DMA_SetConfig+0x268>)
24006466:	4293      	cmp	r3, r2
24006468:	d013      	beq.n	24006492 <DMA_SetConfig+0x10a>
2400646a:	68fb      	ldr	r3, [r7, #12]
2400646c:	681b      	ldr	r3, [r3, #0]
2400646e:	4a61      	ldr	r2, [pc, #388]	; (240065f4 <DMA_SetConfig+0x26c>)
24006470:	4293      	cmp	r3, r2
24006472:	d00e      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006474:	68fb      	ldr	r3, [r7, #12]
24006476:	681b      	ldr	r3, [r3, #0]
24006478:	4a5f      	ldr	r2, [pc, #380]	; (240065f8 <DMA_SetConfig+0x270>)
2400647a:	4293      	cmp	r3, r2
2400647c:	d009      	beq.n	24006492 <DMA_SetConfig+0x10a>
2400647e:	68fb      	ldr	r3, [r7, #12]
24006480:	681b      	ldr	r3, [r3, #0]
24006482:	4a5e      	ldr	r2, [pc, #376]	; (240065fc <DMA_SetConfig+0x274>)
24006484:	4293      	cmp	r3, r2
24006486:	d004      	beq.n	24006492 <DMA_SetConfig+0x10a>
24006488:	68fb      	ldr	r3, [r7, #12]
2400648a:	681b      	ldr	r3, [r3, #0]
2400648c:	4a5c      	ldr	r2, [pc, #368]	; (24006600 <DMA_SetConfig+0x278>)
2400648e:	4293      	cmp	r3, r2
24006490:	d101      	bne.n	24006496 <DMA_SetConfig+0x10e>
24006492:	2301      	movs	r3, #1
24006494:	e000      	b.n	24006498 <DMA_SetConfig+0x110>
24006496:	2300      	movs	r3, #0
24006498:	2b00      	cmp	r3, #0
2400649a:	d00d      	beq.n	240064b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400649c:	68fb      	ldr	r3, [r7, #12]
2400649e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240064a0:	68fa      	ldr	r2, [r7, #12]
240064a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
240064a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
240064a6:	68fb      	ldr	r3, [r7, #12]
240064a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240064aa:	2b00      	cmp	r3, #0
240064ac:	d004      	beq.n	240064b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240064ae:	68fb      	ldr	r3, [r7, #12]
240064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240064b2:	68fa      	ldr	r2, [r7, #12]
240064b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
240064b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240064b8:	68fb      	ldr	r3, [r7, #12]
240064ba:	681b      	ldr	r3, [r3, #0]
240064bc:	4a39      	ldr	r2, [pc, #228]	; (240065a4 <DMA_SetConfig+0x21c>)
240064be:	4293      	cmp	r3, r2
240064c0:	d04a      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064c2:	68fb      	ldr	r3, [r7, #12]
240064c4:	681b      	ldr	r3, [r3, #0]
240064c6:	4a38      	ldr	r2, [pc, #224]	; (240065a8 <DMA_SetConfig+0x220>)
240064c8:	4293      	cmp	r3, r2
240064ca:	d045      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064cc:	68fb      	ldr	r3, [r7, #12]
240064ce:	681b      	ldr	r3, [r3, #0]
240064d0:	4a36      	ldr	r2, [pc, #216]	; (240065ac <DMA_SetConfig+0x224>)
240064d2:	4293      	cmp	r3, r2
240064d4:	d040      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064d6:	68fb      	ldr	r3, [r7, #12]
240064d8:	681b      	ldr	r3, [r3, #0]
240064da:	4a35      	ldr	r2, [pc, #212]	; (240065b0 <DMA_SetConfig+0x228>)
240064dc:	4293      	cmp	r3, r2
240064de:	d03b      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064e0:	68fb      	ldr	r3, [r7, #12]
240064e2:	681b      	ldr	r3, [r3, #0]
240064e4:	4a33      	ldr	r2, [pc, #204]	; (240065b4 <DMA_SetConfig+0x22c>)
240064e6:	4293      	cmp	r3, r2
240064e8:	d036      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064ea:	68fb      	ldr	r3, [r7, #12]
240064ec:	681b      	ldr	r3, [r3, #0]
240064ee:	4a32      	ldr	r2, [pc, #200]	; (240065b8 <DMA_SetConfig+0x230>)
240064f0:	4293      	cmp	r3, r2
240064f2:	d031      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064f4:	68fb      	ldr	r3, [r7, #12]
240064f6:	681b      	ldr	r3, [r3, #0]
240064f8:	4a30      	ldr	r2, [pc, #192]	; (240065bc <DMA_SetConfig+0x234>)
240064fa:	4293      	cmp	r3, r2
240064fc:	d02c      	beq.n	24006558 <DMA_SetConfig+0x1d0>
240064fe:	68fb      	ldr	r3, [r7, #12]
24006500:	681b      	ldr	r3, [r3, #0]
24006502:	4a2f      	ldr	r2, [pc, #188]	; (240065c0 <DMA_SetConfig+0x238>)
24006504:	4293      	cmp	r3, r2
24006506:	d027      	beq.n	24006558 <DMA_SetConfig+0x1d0>
24006508:	68fb      	ldr	r3, [r7, #12]
2400650a:	681b      	ldr	r3, [r3, #0]
2400650c:	4a2d      	ldr	r2, [pc, #180]	; (240065c4 <DMA_SetConfig+0x23c>)
2400650e:	4293      	cmp	r3, r2
24006510:	d022      	beq.n	24006558 <DMA_SetConfig+0x1d0>
24006512:	68fb      	ldr	r3, [r7, #12]
24006514:	681b      	ldr	r3, [r3, #0]
24006516:	4a2c      	ldr	r2, [pc, #176]	; (240065c8 <DMA_SetConfig+0x240>)
24006518:	4293      	cmp	r3, r2
2400651a:	d01d      	beq.n	24006558 <DMA_SetConfig+0x1d0>
2400651c:	68fb      	ldr	r3, [r7, #12]
2400651e:	681b      	ldr	r3, [r3, #0]
24006520:	4a2a      	ldr	r2, [pc, #168]	; (240065cc <DMA_SetConfig+0x244>)
24006522:	4293      	cmp	r3, r2
24006524:	d018      	beq.n	24006558 <DMA_SetConfig+0x1d0>
24006526:	68fb      	ldr	r3, [r7, #12]
24006528:	681b      	ldr	r3, [r3, #0]
2400652a:	4a29      	ldr	r2, [pc, #164]	; (240065d0 <DMA_SetConfig+0x248>)
2400652c:	4293      	cmp	r3, r2
2400652e:	d013      	beq.n	24006558 <DMA_SetConfig+0x1d0>
24006530:	68fb      	ldr	r3, [r7, #12]
24006532:	681b      	ldr	r3, [r3, #0]
24006534:	4a27      	ldr	r2, [pc, #156]	; (240065d4 <DMA_SetConfig+0x24c>)
24006536:	4293      	cmp	r3, r2
24006538:	d00e      	beq.n	24006558 <DMA_SetConfig+0x1d0>
2400653a:	68fb      	ldr	r3, [r7, #12]
2400653c:	681b      	ldr	r3, [r3, #0]
2400653e:	4a26      	ldr	r2, [pc, #152]	; (240065d8 <DMA_SetConfig+0x250>)
24006540:	4293      	cmp	r3, r2
24006542:	d009      	beq.n	24006558 <DMA_SetConfig+0x1d0>
24006544:	68fb      	ldr	r3, [r7, #12]
24006546:	681b      	ldr	r3, [r3, #0]
24006548:	4a24      	ldr	r2, [pc, #144]	; (240065dc <DMA_SetConfig+0x254>)
2400654a:	4293      	cmp	r3, r2
2400654c:	d004      	beq.n	24006558 <DMA_SetConfig+0x1d0>
2400654e:	68fb      	ldr	r3, [r7, #12]
24006550:	681b      	ldr	r3, [r3, #0]
24006552:	4a23      	ldr	r2, [pc, #140]	; (240065e0 <DMA_SetConfig+0x258>)
24006554:	4293      	cmp	r3, r2
24006556:	d101      	bne.n	2400655c <DMA_SetConfig+0x1d4>
24006558:	2301      	movs	r3, #1
2400655a:	e000      	b.n	2400655e <DMA_SetConfig+0x1d6>
2400655c:	2300      	movs	r3, #0
2400655e:	2b00      	cmp	r3, #0
24006560:	d059      	beq.n	24006616 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006562:	68fb      	ldr	r3, [r7, #12]
24006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006566:	f003 031f 	and.w	r3, r3, #31
2400656a:	223f      	movs	r2, #63	; 0x3f
2400656c:	409a      	lsls	r2, r3
2400656e:	697b      	ldr	r3, [r7, #20]
24006570:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24006572:	68fb      	ldr	r3, [r7, #12]
24006574:	681b      	ldr	r3, [r3, #0]
24006576:	681a      	ldr	r2, [r3, #0]
24006578:	68fb      	ldr	r3, [r7, #12]
2400657a:	681b      	ldr	r3, [r3, #0]
2400657c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24006580:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24006582:	68fb      	ldr	r3, [r7, #12]
24006584:	681b      	ldr	r3, [r3, #0]
24006586:	683a      	ldr	r2, [r7, #0]
24006588:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400658a:	68fb      	ldr	r3, [r7, #12]
2400658c:	689b      	ldr	r3, [r3, #8]
2400658e:	2b40      	cmp	r3, #64	; 0x40
24006590:	d138      	bne.n	24006604 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
24006592:	68fb      	ldr	r3, [r7, #12]
24006594:	681b      	ldr	r3, [r3, #0]
24006596:	687a      	ldr	r2, [r7, #4]
24006598:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
2400659a:	68fb      	ldr	r3, [r7, #12]
2400659c:	681b      	ldr	r3, [r3, #0]
2400659e:	68ba      	ldr	r2, [r7, #8]
240065a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
240065a2:	e086      	b.n	240066b2 <DMA_SetConfig+0x32a>
240065a4:	40020010 	.word	0x40020010
240065a8:	40020028 	.word	0x40020028
240065ac:	40020040 	.word	0x40020040
240065b0:	40020058 	.word	0x40020058
240065b4:	40020070 	.word	0x40020070
240065b8:	40020088 	.word	0x40020088
240065bc:	400200a0 	.word	0x400200a0
240065c0:	400200b8 	.word	0x400200b8
240065c4:	40020410 	.word	0x40020410
240065c8:	40020428 	.word	0x40020428
240065cc:	40020440 	.word	0x40020440
240065d0:	40020458 	.word	0x40020458
240065d4:	40020470 	.word	0x40020470
240065d8:	40020488 	.word	0x40020488
240065dc:	400204a0 	.word	0x400204a0
240065e0:	400204b8 	.word	0x400204b8
240065e4:	58025408 	.word	0x58025408
240065e8:	5802541c 	.word	0x5802541c
240065ec:	58025430 	.word	0x58025430
240065f0:	58025444 	.word	0x58025444
240065f4:	58025458 	.word	0x58025458
240065f8:	5802546c 	.word	0x5802546c
240065fc:	58025480 	.word	0x58025480
24006600:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
24006604:	68fb      	ldr	r3, [r7, #12]
24006606:	681b      	ldr	r3, [r3, #0]
24006608:	68ba      	ldr	r2, [r7, #8]
2400660a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
2400660c:	68fb      	ldr	r3, [r7, #12]
2400660e:	681b      	ldr	r3, [r3, #0]
24006610:	687a      	ldr	r2, [r7, #4]
24006612:	60da      	str	r2, [r3, #12]
}
24006614:	e04d      	b.n	240066b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24006616:	68fb      	ldr	r3, [r7, #12]
24006618:	681b      	ldr	r3, [r3, #0]
2400661a:	4a29      	ldr	r2, [pc, #164]	; (240066c0 <DMA_SetConfig+0x338>)
2400661c:	4293      	cmp	r3, r2
2400661e:	d022      	beq.n	24006666 <DMA_SetConfig+0x2de>
24006620:	68fb      	ldr	r3, [r7, #12]
24006622:	681b      	ldr	r3, [r3, #0]
24006624:	4a27      	ldr	r2, [pc, #156]	; (240066c4 <DMA_SetConfig+0x33c>)
24006626:	4293      	cmp	r3, r2
24006628:	d01d      	beq.n	24006666 <DMA_SetConfig+0x2de>
2400662a:	68fb      	ldr	r3, [r7, #12]
2400662c:	681b      	ldr	r3, [r3, #0]
2400662e:	4a26      	ldr	r2, [pc, #152]	; (240066c8 <DMA_SetConfig+0x340>)
24006630:	4293      	cmp	r3, r2
24006632:	d018      	beq.n	24006666 <DMA_SetConfig+0x2de>
24006634:	68fb      	ldr	r3, [r7, #12]
24006636:	681b      	ldr	r3, [r3, #0]
24006638:	4a24      	ldr	r2, [pc, #144]	; (240066cc <DMA_SetConfig+0x344>)
2400663a:	4293      	cmp	r3, r2
2400663c:	d013      	beq.n	24006666 <DMA_SetConfig+0x2de>
2400663e:	68fb      	ldr	r3, [r7, #12]
24006640:	681b      	ldr	r3, [r3, #0]
24006642:	4a23      	ldr	r2, [pc, #140]	; (240066d0 <DMA_SetConfig+0x348>)
24006644:	4293      	cmp	r3, r2
24006646:	d00e      	beq.n	24006666 <DMA_SetConfig+0x2de>
24006648:	68fb      	ldr	r3, [r7, #12]
2400664a:	681b      	ldr	r3, [r3, #0]
2400664c:	4a21      	ldr	r2, [pc, #132]	; (240066d4 <DMA_SetConfig+0x34c>)
2400664e:	4293      	cmp	r3, r2
24006650:	d009      	beq.n	24006666 <DMA_SetConfig+0x2de>
24006652:	68fb      	ldr	r3, [r7, #12]
24006654:	681b      	ldr	r3, [r3, #0]
24006656:	4a20      	ldr	r2, [pc, #128]	; (240066d8 <DMA_SetConfig+0x350>)
24006658:	4293      	cmp	r3, r2
2400665a:	d004      	beq.n	24006666 <DMA_SetConfig+0x2de>
2400665c:	68fb      	ldr	r3, [r7, #12]
2400665e:	681b      	ldr	r3, [r3, #0]
24006660:	4a1e      	ldr	r2, [pc, #120]	; (240066dc <DMA_SetConfig+0x354>)
24006662:	4293      	cmp	r3, r2
24006664:	d101      	bne.n	2400666a <DMA_SetConfig+0x2e2>
24006666:	2301      	movs	r3, #1
24006668:	e000      	b.n	2400666c <DMA_SetConfig+0x2e4>
2400666a:	2300      	movs	r3, #0
2400666c:	2b00      	cmp	r3, #0
2400666e:	d020      	beq.n	240066b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006670:	68fb      	ldr	r3, [r7, #12]
24006672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006674:	f003 031f 	and.w	r3, r3, #31
24006678:	2201      	movs	r2, #1
2400667a:	409a      	lsls	r2, r3
2400667c:	693b      	ldr	r3, [r7, #16]
2400667e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006680:	68fb      	ldr	r3, [r7, #12]
24006682:	681b      	ldr	r3, [r3, #0]
24006684:	683a      	ldr	r2, [r7, #0]
24006686:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006688:	68fb      	ldr	r3, [r7, #12]
2400668a:	689b      	ldr	r3, [r3, #8]
2400668c:	2b40      	cmp	r3, #64	; 0x40
2400668e:	d108      	bne.n	240066a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006690:	68fb      	ldr	r3, [r7, #12]
24006692:	681b      	ldr	r3, [r3, #0]
24006694:	687a      	ldr	r2, [r7, #4]
24006696:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24006698:	68fb      	ldr	r3, [r7, #12]
2400669a:	681b      	ldr	r3, [r3, #0]
2400669c:	68ba      	ldr	r2, [r7, #8]
2400669e:	60da      	str	r2, [r3, #12]
}
240066a0:	e007      	b.n	240066b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
240066a2:	68fb      	ldr	r3, [r7, #12]
240066a4:	681b      	ldr	r3, [r3, #0]
240066a6:	68ba      	ldr	r2, [r7, #8]
240066a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
240066aa:	68fb      	ldr	r3, [r7, #12]
240066ac:	681b      	ldr	r3, [r3, #0]
240066ae:	687a      	ldr	r2, [r7, #4]
240066b0:	60da      	str	r2, [r3, #12]
}
240066b2:	bf00      	nop
240066b4:	371c      	adds	r7, #28
240066b6:	46bd      	mov	sp, r7
240066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240066bc:	4770      	bx	lr
240066be:	bf00      	nop
240066c0:	58025408 	.word	0x58025408
240066c4:	5802541c 	.word	0x5802541c
240066c8:	58025430 	.word	0x58025430
240066cc:	58025444 	.word	0x58025444
240066d0:	58025458 	.word	0x58025458
240066d4:	5802546c 	.word	0x5802546c
240066d8:	58025480 	.word	0x58025480
240066dc:	58025494 	.word	0x58025494

240066e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
240066e0:	b480      	push	{r7}
240066e2:	b085      	sub	sp, #20
240066e4:	af00      	add	r7, sp, #0
240066e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240066e8:	687b      	ldr	r3, [r7, #4]
240066ea:	681b      	ldr	r3, [r3, #0]
240066ec:	4a42      	ldr	r2, [pc, #264]	; (240067f8 <DMA_CalcBaseAndBitshift+0x118>)
240066ee:	4293      	cmp	r3, r2
240066f0:	d04a      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
240066f2:	687b      	ldr	r3, [r7, #4]
240066f4:	681b      	ldr	r3, [r3, #0]
240066f6:	4a41      	ldr	r2, [pc, #260]	; (240067fc <DMA_CalcBaseAndBitshift+0x11c>)
240066f8:	4293      	cmp	r3, r2
240066fa:	d045      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
240066fc:	687b      	ldr	r3, [r7, #4]
240066fe:	681b      	ldr	r3, [r3, #0]
24006700:	4a3f      	ldr	r2, [pc, #252]	; (24006800 <DMA_CalcBaseAndBitshift+0x120>)
24006702:	4293      	cmp	r3, r2
24006704:	d040      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006706:	687b      	ldr	r3, [r7, #4]
24006708:	681b      	ldr	r3, [r3, #0]
2400670a:	4a3e      	ldr	r2, [pc, #248]	; (24006804 <DMA_CalcBaseAndBitshift+0x124>)
2400670c:	4293      	cmp	r3, r2
2400670e:	d03b      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006710:	687b      	ldr	r3, [r7, #4]
24006712:	681b      	ldr	r3, [r3, #0]
24006714:	4a3c      	ldr	r2, [pc, #240]	; (24006808 <DMA_CalcBaseAndBitshift+0x128>)
24006716:	4293      	cmp	r3, r2
24006718:	d036      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
2400671a:	687b      	ldr	r3, [r7, #4]
2400671c:	681b      	ldr	r3, [r3, #0]
2400671e:	4a3b      	ldr	r2, [pc, #236]	; (2400680c <DMA_CalcBaseAndBitshift+0x12c>)
24006720:	4293      	cmp	r3, r2
24006722:	d031      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006724:	687b      	ldr	r3, [r7, #4]
24006726:	681b      	ldr	r3, [r3, #0]
24006728:	4a39      	ldr	r2, [pc, #228]	; (24006810 <DMA_CalcBaseAndBitshift+0x130>)
2400672a:	4293      	cmp	r3, r2
2400672c:	d02c      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
2400672e:	687b      	ldr	r3, [r7, #4]
24006730:	681b      	ldr	r3, [r3, #0]
24006732:	4a38      	ldr	r2, [pc, #224]	; (24006814 <DMA_CalcBaseAndBitshift+0x134>)
24006734:	4293      	cmp	r3, r2
24006736:	d027      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006738:	687b      	ldr	r3, [r7, #4]
2400673a:	681b      	ldr	r3, [r3, #0]
2400673c:	4a36      	ldr	r2, [pc, #216]	; (24006818 <DMA_CalcBaseAndBitshift+0x138>)
2400673e:	4293      	cmp	r3, r2
24006740:	d022      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006742:	687b      	ldr	r3, [r7, #4]
24006744:	681b      	ldr	r3, [r3, #0]
24006746:	4a35      	ldr	r2, [pc, #212]	; (2400681c <DMA_CalcBaseAndBitshift+0x13c>)
24006748:	4293      	cmp	r3, r2
2400674a:	d01d      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
2400674c:	687b      	ldr	r3, [r7, #4]
2400674e:	681b      	ldr	r3, [r3, #0]
24006750:	4a33      	ldr	r2, [pc, #204]	; (24006820 <DMA_CalcBaseAndBitshift+0x140>)
24006752:	4293      	cmp	r3, r2
24006754:	d018      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006756:	687b      	ldr	r3, [r7, #4]
24006758:	681b      	ldr	r3, [r3, #0]
2400675a:	4a32      	ldr	r2, [pc, #200]	; (24006824 <DMA_CalcBaseAndBitshift+0x144>)
2400675c:	4293      	cmp	r3, r2
2400675e:	d013      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006760:	687b      	ldr	r3, [r7, #4]
24006762:	681b      	ldr	r3, [r3, #0]
24006764:	4a30      	ldr	r2, [pc, #192]	; (24006828 <DMA_CalcBaseAndBitshift+0x148>)
24006766:	4293      	cmp	r3, r2
24006768:	d00e      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
2400676a:	687b      	ldr	r3, [r7, #4]
2400676c:	681b      	ldr	r3, [r3, #0]
2400676e:	4a2f      	ldr	r2, [pc, #188]	; (2400682c <DMA_CalcBaseAndBitshift+0x14c>)
24006770:	4293      	cmp	r3, r2
24006772:	d009      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
24006774:	687b      	ldr	r3, [r7, #4]
24006776:	681b      	ldr	r3, [r3, #0]
24006778:	4a2d      	ldr	r2, [pc, #180]	; (24006830 <DMA_CalcBaseAndBitshift+0x150>)
2400677a:	4293      	cmp	r3, r2
2400677c:	d004      	beq.n	24006788 <DMA_CalcBaseAndBitshift+0xa8>
2400677e:	687b      	ldr	r3, [r7, #4]
24006780:	681b      	ldr	r3, [r3, #0]
24006782:	4a2c      	ldr	r2, [pc, #176]	; (24006834 <DMA_CalcBaseAndBitshift+0x154>)
24006784:	4293      	cmp	r3, r2
24006786:	d101      	bne.n	2400678c <DMA_CalcBaseAndBitshift+0xac>
24006788:	2301      	movs	r3, #1
2400678a:	e000      	b.n	2400678e <DMA_CalcBaseAndBitshift+0xae>
2400678c:	2300      	movs	r3, #0
2400678e:	2b00      	cmp	r3, #0
24006790:	d024      	beq.n	240067dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006792:	687b      	ldr	r3, [r7, #4]
24006794:	681b      	ldr	r3, [r3, #0]
24006796:	b2db      	uxtb	r3, r3
24006798:	3b10      	subs	r3, #16
2400679a:	4a27      	ldr	r2, [pc, #156]	; (24006838 <DMA_CalcBaseAndBitshift+0x158>)
2400679c:	fba2 2303 	umull	r2, r3, r2, r3
240067a0:	091b      	lsrs	r3, r3, #4
240067a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
240067a4:	68fb      	ldr	r3, [r7, #12]
240067a6:	f003 0307 	and.w	r3, r3, #7
240067aa:	4a24      	ldr	r2, [pc, #144]	; (2400683c <DMA_CalcBaseAndBitshift+0x15c>)
240067ac:	5cd3      	ldrb	r3, [r2, r3]
240067ae:	461a      	mov	r2, r3
240067b0:	687b      	ldr	r3, [r7, #4]
240067b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
240067b4:	68fb      	ldr	r3, [r7, #12]
240067b6:	2b03      	cmp	r3, #3
240067b8:	d908      	bls.n	240067cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
240067ba:	687b      	ldr	r3, [r7, #4]
240067bc:	681b      	ldr	r3, [r3, #0]
240067be:	461a      	mov	r2, r3
240067c0:	4b1f      	ldr	r3, [pc, #124]	; (24006840 <DMA_CalcBaseAndBitshift+0x160>)
240067c2:	4013      	ands	r3, r2
240067c4:	1d1a      	adds	r2, r3, #4
240067c6:	687b      	ldr	r3, [r7, #4]
240067c8:	659a      	str	r2, [r3, #88]	; 0x58
240067ca:	e00d      	b.n	240067e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
240067cc:	687b      	ldr	r3, [r7, #4]
240067ce:	681b      	ldr	r3, [r3, #0]
240067d0:	461a      	mov	r2, r3
240067d2:	4b1b      	ldr	r3, [pc, #108]	; (24006840 <DMA_CalcBaseAndBitshift+0x160>)
240067d4:	4013      	ands	r3, r2
240067d6:	687a      	ldr	r2, [r7, #4]
240067d8:	6593      	str	r3, [r2, #88]	; 0x58
240067da:	e005      	b.n	240067e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
240067dc:	687b      	ldr	r3, [r7, #4]
240067de:	681b      	ldr	r3, [r3, #0]
240067e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
240067e4:	687b      	ldr	r3, [r7, #4]
240067e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
240067e8:	687b      	ldr	r3, [r7, #4]
240067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
240067ec:	4618      	mov	r0, r3
240067ee:	3714      	adds	r7, #20
240067f0:	46bd      	mov	sp, r7
240067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240067f6:	4770      	bx	lr
240067f8:	40020010 	.word	0x40020010
240067fc:	40020028 	.word	0x40020028
24006800:	40020040 	.word	0x40020040
24006804:	40020058 	.word	0x40020058
24006808:	40020070 	.word	0x40020070
2400680c:	40020088 	.word	0x40020088
24006810:	400200a0 	.word	0x400200a0
24006814:	400200b8 	.word	0x400200b8
24006818:	40020410 	.word	0x40020410
2400681c:	40020428 	.word	0x40020428
24006820:	40020440 	.word	0x40020440
24006824:	40020458 	.word	0x40020458
24006828:	40020470 	.word	0x40020470
2400682c:	40020488 	.word	0x40020488
24006830:	400204a0 	.word	0x400204a0
24006834:	400204b8 	.word	0x400204b8
24006838:	aaaaaaab 	.word	0xaaaaaaab
2400683c:	24016f50 	.word	0x24016f50
24006840:	fffffc00 	.word	0xfffffc00

24006844 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
24006844:	b480      	push	{r7}
24006846:	b085      	sub	sp, #20
24006848:	af00      	add	r7, sp, #0
2400684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2400684c:	2300      	movs	r3, #0
2400684e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24006850:	687b      	ldr	r3, [r7, #4]
24006852:	699b      	ldr	r3, [r3, #24]
24006854:	2b00      	cmp	r3, #0
24006856:	d120      	bne.n	2400689a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24006858:	687b      	ldr	r3, [r7, #4]
2400685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400685c:	2b03      	cmp	r3, #3
2400685e:	d858      	bhi.n	24006912 <DMA_CheckFifoParam+0xce>
24006860:	a201      	add	r2, pc, #4	; (adr r2, 24006868 <DMA_CheckFifoParam+0x24>)
24006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006866:	bf00      	nop
24006868:	24006879 	.word	0x24006879
2400686c:	2400688b 	.word	0x2400688b
24006870:	24006879 	.word	0x24006879
24006874:	24006913 	.word	0x24006913
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24006878:	687b      	ldr	r3, [r7, #4]
2400687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400687c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24006880:	2b00      	cmp	r3, #0
24006882:	d048      	beq.n	24006916 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
24006884:	2301      	movs	r3, #1
24006886:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006888:	e045      	b.n	24006916 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2400688a:	687b      	ldr	r3, [r7, #4]
2400688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400688e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24006892:	d142      	bne.n	2400691a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
24006894:	2301      	movs	r3, #1
24006896:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006898:	e03f      	b.n	2400691a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400689a:	687b      	ldr	r3, [r7, #4]
2400689c:	699b      	ldr	r3, [r3, #24]
2400689e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240068a2:	d123      	bne.n	240068ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
240068a4:	687b      	ldr	r3, [r7, #4]
240068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240068a8:	2b03      	cmp	r3, #3
240068aa:	d838      	bhi.n	2400691e <DMA_CheckFifoParam+0xda>
240068ac:	a201      	add	r2, pc, #4	; (adr r2, 240068b4 <DMA_CheckFifoParam+0x70>)
240068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240068b2:	bf00      	nop
240068b4:	240068c5 	.word	0x240068c5
240068b8:	240068cb 	.word	0x240068cb
240068bc:	240068c5 	.word	0x240068c5
240068c0:	240068dd 	.word	0x240068dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
240068c4:	2301      	movs	r3, #1
240068c6:	73fb      	strb	r3, [r7, #15]
        break;
240068c8:	e030      	b.n	2400692c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240068ca:	687b      	ldr	r3, [r7, #4]
240068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240068ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240068d2:	2b00      	cmp	r3, #0
240068d4:	d025      	beq.n	24006922 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
240068d6:	2301      	movs	r3, #1
240068d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
240068da:	e022      	b.n	24006922 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240068dc:	687b      	ldr	r3, [r7, #4]
240068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240068e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
240068e4:	d11f      	bne.n	24006926 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
240068e6:	2301      	movs	r3, #1
240068e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
240068ea:	e01c      	b.n	24006926 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
240068ec:	687b      	ldr	r3, [r7, #4]
240068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240068f0:	2b02      	cmp	r3, #2
240068f2:	d902      	bls.n	240068fa <DMA_CheckFifoParam+0xb6>
240068f4:	2b03      	cmp	r3, #3
240068f6:	d003      	beq.n	24006900 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
240068f8:	e018      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
240068fa:	2301      	movs	r3, #1
240068fc:	73fb      	strb	r3, [r7, #15]
        break;
240068fe:	e015      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24006900:	687b      	ldr	r3, [r7, #4]
24006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24006904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24006908:	2b00      	cmp	r3, #0
2400690a:	d00e      	beq.n	2400692a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
2400690c:	2301      	movs	r3, #1
2400690e:	73fb      	strb	r3, [r7, #15]
    break;
24006910:	e00b      	b.n	2400692a <DMA_CheckFifoParam+0xe6>
        break;
24006912:	bf00      	nop
24006914:	e00a      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        break;
24006916:	bf00      	nop
24006918:	e008      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        break;
2400691a:	bf00      	nop
2400691c:	e006      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        break;
2400691e:	bf00      	nop
24006920:	e004      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        break;
24006922:	bf00      	nop
24006924:	e002      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
        break;
24006926:	bf00      	nop
24006928:	e000      	b.n	2400692c <DMA_CheckFifoParam+0xe8>
    break;
2400692a:	bf00      	nop
    }
  }

  return status;
2400692c:	7bfb      	ldrb	r3, [r7, #15]
}
2400692e:	4618      	mov	r0, r3
24006930:	3714      	adds	r7, #20
24006932:	46bd      	mov	sp, r7
24006934:	f85d 7b04 	ldr.w	r7, [sp], #4
24006938:	4770      	bx	lr
2400693a:	bf00      	nop

2400693c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
2400693c:	b480      	push	{r7}
2400693e:	b085      	sub	sp, #20
24006940:	af00      	add	r7, sp, #0
24006942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24006944:	687b      	ldr	r3, [r7, #4]
24006946:	681b      	ldr	r3, [r3, #0]
24006948:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2400694a:	687b      	ldr	r3, [r7, #4]
2400694c:	681b      	ldr	r3, [r3, #0]
2400694e:	4a38      	ldr	r2, [pc, #224]	; (24006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
24006950:	4293      	cmp	r3, r2
24006952:	d022      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006954:	687b      	ldr	r3, [r7, #4]
24006956:	681b      	ldr	r3, [r3, #0]
24006958:	4a36      	ldr	r2, [pc, #216]	; (24006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
2400695a:	4293      	cmp	r3, r2
2400695c:	d01d      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2400695e:	687b      	ldr	r3, [r7, #4]
24006960:	681b      	ldr	r3, [r3, #0]
24006962:	4a35      	ldr	r2, [pc, #212]	; (24006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24006964:	4293      	cmp	r3, r2
24006966:	d018      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006968:	687b      	ldr	r3, [r7, #4]
2400696a:	681b      	ldr	r3, [r3, #0]
2400696c:	4a33      	ldr	r2, [pc, #204]	; (24006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
2400696e:	4293      	cmp	r3, r2
24006970:	d013      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006972:	687b      	ldr	r3, [r7, #4]
24006974:	681b      	ldr	r3, [r3, #0]
24006976:	4a32      	ldr	r2, [pc, #200]	; (24006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24006978:	4293      	cmp	r3, r2
2400697a:	d00e      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2400697c:	687b      	ldr	r3, [r7, #4]
2400697e:	681b      	ldr	r3, [r3, #0]
24006980:	4a30      	ldr	r2, [pc, #192]	; (24006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
24006982:	4293      	cmp	r3, r2
24006984:	d009      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006986:	687b      	ldr	r3, [r7, #4]
24006988:	681b      	ldr	r3, [r3, #0]
2400698a:	4a2f      	ldr	r2, [pc, #188]	; (24006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
2400698c:	4293      	cmp	r3, r2
2400698e:	d004      	beq.n	2400699a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006990:	687b      	ldr	r3, [r7, #4]
24006992:	681b      	ldr	r3, [r3, #0]
24006994:	4a2d      	ldr	r2, [pc, #180]	; (24006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24006996:	4293      	cmp	r3, r2
24006998:	d101      	bne.n	2400699e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
2400699a:	2301      	movs	r3, #1
2400699c:	e000      	b.n	240069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
2400699e:	2300      	movs	r3, #0
240069a0:	2b00      	cmp	r3, #0
240069a2:	d01a      	beq.n	240069da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
240069a4:	687b      	ldr	r3, [r7, #4]
240069a6:	681b      	ldr	r3, [r3, #0]
240069a8:	b2db      	uxtb	r3, r3
240069aa:	3b08      	subs	r3, #8
240069ac:	4a28      	ldr	r2, [pc, #160]	; (24006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
240069ae:	fba2 2303 	umull	r2, r3, r2, r3
240069b2:	091b      	lsrs	r3, r3, #4
240069b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
240069b6:	68fa      	ldr	r2, [r7, #12]
240069b8:	4b26      	ldr	r3, [pc, #152]	; (24006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
240069ba:	4413      	add	r3, r2
240069bc:	009b      	lsls	r3, r3, #2
240069be:	461a      	mov	r2, r3
240069c0:	687b      	ldr	r3, [r7, #4]
240069c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
240069c4:	687b      	ldr	r3, [r7, #4]
240069c6:	4a24      	ldr	r2, [pc, #144]	; (24006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
240069c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240069ca:	68fb      	ldr	r3, [r7, #12]
240069cc:	f003 031f 	and.w	r3, r3, #31
240069d0:	2201      	movs	r2, #1
240069d2:	409a      	lsls	r2, r3
240069d4:	687b      	ldr	r3, [r7, #4]
240069d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
240069d8:	e024      	b.n	24006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
240069da:	687b      	ldr	r3, [r7, #4]
240069dc:	681b      	ldr	r3, [r3, #0]
240069de:	b2db      	uxtb	r3, r3
240069e0:	3b10      	subs	r3, #16
240069e2:	4a1e      	ldr	r2, [pc, #120]	; (24006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
240069e4:	fba2 2303 	umull	r2, r3, r2, r3
240069e8:	091b      	lsrs	r3, r3, #4
240069ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240069ec:	68bb      	ldr	r3, [r7, #8]
240069ee:	4a1c      	ldr	r2, [pc, #112]	; (24006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
240069f0:	4293      	cmp	r3, r2
240069f2:	d806      	bhi.n	24006a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
240069f4:	68bb      	ldr	r3, [r7, #8]
240069f6:	4a1b      	ldr	r2, [pc, #108]	; (24006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
240069f8:	4293      	cmp	r3, r2
240069fa:	d902      	bls.n	24006a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
240069fc:	68fb      	ldr	r3, [r7, #12]
240069fe:	3308      	adds	r3, #8
24006a00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006a02:	68fa      	ldr	r2, [r7, #12]
24006a04:	4b18      	ldr	r3, [pc, #96]	; (24006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
24006a06:	4413      	add	r3, r2
24006a08:	009b      	lsls	r3, r3, #2
24006a0a:	461a      	mov	r2, r3
24006a0c:	687b      	ldr	r3, [r7, #4]
24006a0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24006a10:	687b      	ldr	r3, [r7, #4]
24006a12:	4a16      	ldr	r2, [pc, #88]	; (24006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
24006a14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006a16:	68fb      	ldr	r3, [r7, #12]
24006a18:	f003 031f 	and.w	r3, r3, #31
24006a1c:	2201      	movs	r2, #1
24006a1e:	409a      	lsls	r2, r3
24006a20:	687b      	ldr	r3, [r7, #4]
24006a22:	669a      	str	r2, [r3, #104]	; 0x68
}
24006a24:	bf00      	nop
24006a26:	3714      	adds	r7, #20
24006a28:	46bd      	mov	sp, r7
24006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24006a2e:	4770      	bx	lr
24006a30:	58025408 	.word	0x58025408
24006a34:	5802541c 	.word	0x5802541c
24006a38:	58025430 	.word	0x58025430
24006a3c:	58025444 	.word	0x58025444
24006a40:	58025458 	.word	0x58025458
24006a44:	5802546c 	.word	0x5802546c
24006a48:	58025480 	.word	0x58025480
24006a4c:	58025494 	.word	0x58025494
24006a50:	cccccccd 	.word	0xcccccccd
24006a54:	16009600 	.word	0x16009600
24006a58:	58025880 	.word	0x58025880
24006a5c:	aaaaaaab 	.word	0xaaaaaaab
24006a60:	400204b8 	.word	0x400204b8
24006a64:	4002040f 	.word	0x4002040f
24006a68:	10008200 	.word	0x10008200
24006a6c:	40020880 	.word	0x40020880

24006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
24006a70:	b480      	push	{r7}
24006a72:	b085      	sub	sp, #20
24006a74:	af00      	add	r7, sp, #0
24006a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24006a78:	687b      	ldr	r3, [r7, #4]
24006a7a:	685b      	ldr	r3, [r3, #4]
24006a7c:	b2db      	uxtb	r3, r3
24006a7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24006a80:	68fb      	ldr	r3, [r7, #12]
24006a82:	2b00      	cmp	r3, #0
24006a84:	d04a      	beq.n	24006b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24006a86:	68fb      	ldr	r3, [r7, #12]
24006a88:	2b08      	cmp	r3, #8
24006a8a:	d847      	bhi.n	24006b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24006a8c:	687b      	ldr	r3, [r7, #4]
24006a8e:	681b      	ldr	r3, [r3, #0]
24006a90:	4a25      	ldr	r2, [pc, #148]	; (24006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
24006a92:	4293      	cmp	r3, r2
24006a94:	d022      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006a96:	687b      	ldr	r3, [r7, #4]
24006a98:	681b      	ldr	r3, [r3, #0]
24006a9a:	4a24      	ldr	r2, [pc, #144]	; (24006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24006a9c:	4293      	cmp	r3, r2
24006a9e:	d01d      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006aa0:	687b      	ldr	r3, [r7, #4]
24006aa2:	681b      	ldr	r3, [r3, #0]
24006aa4:	4a22      	ldr	r2, [pc, #136]	; (24006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24006aa6:	4293      	cmp	r3, r2
24006aa8:	d018      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006aaa:	687b      	ldr	r3, [r7, #4]
24006aac:	681b      	ldr	r3, [r3, #0]
24006aae:	4a21      	ldr	r2, [pc, #132]	; (24006b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24006ab0:	4293      	cmp	r3, r2
24006ab2:	d013      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006ab4:	687b      	ldr	r3, [r7, #4]
24006ab6:	681b      	ldr	r3, [r3, #0]
24006ab8:	4a1f      	ldr	r2, [pc, #124]	; (24006b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24006aba:	4293      	cmp	r3, r2
24006abc:	d00e      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006abe:	687b      	ldr	r3, [r7, #4]
24006ac0:	681b      	ldr	r3, [r3, #0]
24006ac2:	4a1e      	ldr	r2, [pc, #120]	; (24006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24006ac4:	4293      	cmp	r3, r2
24006ac6:	d009      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006ac8:	687b      	ldr	r3, [r7, #4]
24006aca:	681b      	ldr	r3, [r3, #0]
24006acc:	4a1c      	ldr	r2, [pc, #112]	; (24006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24006ace:	4293      	cmp	r3, r2
24006ad0:	d004      	beq.n	24006adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006ad2:	687b      	ldr	r3, [r7, #4]
24006ad4:	681b      	ldr	r3, [r3, #0]
24006ad6:	4a1b      	ldr	r2, [pc, #108]	; (24006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24006ad8:	4293      	cmp	r3, r2
24006ada:	d101      	bne.n	24006ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24006adc:	2301      	movs	r3, #1
24006ade:	e000      	b.n	24006ae2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24006ae0:	2300      	movs	r3, #0
24006ae2:	2b00      	cmp	r3, #0
24006ae4:	d00a      	beq.n	24006afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24006ae6:	68fa      	ldr	r2, [r7, #12]
24006ae8:	4b17      	ldr	r3, [pc, #92]	; (24006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24006aea:	4413      	add	r3, r2
24006aec:	009b      	lsls	r3, r3, #2
24006aee:	461a      	mov	r2, r3
24006af0:	687b      	ldr	r3, [r7, #4]
24006af2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24006af4:	687b      	ldr	r3, [r7, #4]
24006af6:	4a15      	ldr	r2, [pc, #84]	; (24006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24006af8:	671a      	str	r2, [r3, #112]	; 0x70
24006afa:	e009      	b.n	24006b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24006afc:	68fa      	ldr	r2, [r7, #12]
24006afe:	4b14      	ldr	r3, [pc, #80]	; (24006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24006b00:	4413      	add	r3, r2
24006b02:	009b      	lsls	r3, r3, #2
24006b04:	461a      	mov	r2, r3
24006b06:	687b      	ldr	r3, [r7, #4]
24006b08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24006b0a:	687b      	ldr	r3, [r7, #4]
24006b0c:	4a11      	ldr	r2, [pc, #68]	; (24006b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24006b0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24006b10:	68fb      	ldr	r3, [r7, #12]
24006b12:	3b01      	subs	r3, #1
24006b14:	2201      	movs	r2, #1
24006b16:	409a      	lsls	r2, r3
24006b18:	687b      	ldr	r3, [r7, #4]
24006b1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24006b1c:	bf00      	nop
24006b1e:	3714      	adds	r7, #20
24006b20:	46bd      	mov	sp, r7
24006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
24006b26:	4770      	bx	lr
24006b28:	58025408 	.word	0x58025408
24006b2c:	5802541c 	.word	0x5802541c
24006b30:	58025430 	.word	0x58025430
24006b34:	58025444 	.word	0x58025444
24006b38:	58025458 	.word	0x58025458
24006b3c:	5802546c 	.word	0x5802546c
24006b40:	58025480 	.word	0x58025480
24006b44:	58025494 	.word	0x58025494
24006b48:	1600963f 	.word	0x1600963f
24006b4c:	58025940 	.word	0x58025940
24006b50:	1000823f 	.word	0x1000823f
24006b54:	40020940 	.word	0x40020940

24006b58 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24006b58:	b580      	push	{r7, lr}
24006b5a:	b086      	sub	sp, #24
24006b5c:	af00      	add	r7, sp, #0
24006b5e:	60f8      	str	r0, [r7, #12]
24006b60:	60b9      	str	r1, [r7, #8]
24006b62:	607a      	str	r2, [r7, #4]
24006b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006b66:	2300      	movs	r3, #0
24006b68:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24006b6a:	68fb      	ldr	r3, [r7, #12]
24006b6c:	689b      	ldr	r3, [r3, #8]
24006b6e:	2b80      	cmp	r3, #128	; 0x80
24006b70:	d106      	bne.n	24006b80 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24006b72:	68fb      	ldr	r3, [r7, #12]
24006b74:	f44f 7280 	mov.w	r2, #256	; 0x100
24006b78:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
24006b7a:	2301      	movs	r3, #1
24006b7c:	75fb      	strb	r3, [r7, #23]
24006b7e:	e1c8      	b.n	24006f12 <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006b80:	68fb      	ldr	r3, [r7, #12]
24006b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006b86:	2b01      	cmp	r3, #1
24006b88:	d101      	bne.n	24006b8e <HAL_DMAEx_MultiBufferStart+0x36>
24006b8a:	2302      	movs	r3, #2
24006b8c:	e1c2      	b.n	24006f14 <HAL_DMAEx_MultiBufferStart+0x3bc>
24006b8e:	68fb      	ldr	r3, [r7, #12]
24006b90:	2201      	movs	r2, #1
24006b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
24006b96:	68fb      	ldr	r3, [r7, #12]
24006b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006b9c:	b2db      	uxtb	r3, r3
24006b9e:	2b01      	cmp	r3, #1
24006ba0:	f040 81b1 	bne.w	24006f06 <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
24006ba4:	68fb      	ldr	r3, [r7, #12]
24006ba6:	2202      	movs	r2, #2
24006ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006bac:	68fb      	ldr	r3, [r7, #12]
24006bae:	2200      	movs	r2, #0
24006bb0:	655a      	str	r2, [r3, #84]	; 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006bb2:	68fb      	ldr	r3, [r7, #12]
24006bb4:	681b      	ldr	r3, [r3, #0]
24006bb6:	4a7f      	ldr	r2, [pc, #508]	; (24006db4 <HAL_DMAEx_MultiBufferStart+0x25c>)
24006bb8:	4293      	cmp	r3, r2
24006bba:	d04a      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bbc:	68fb      	ldr	r3, [r7, #12]
24006bbe:	681b      	ldr	r3, [r3, #0]
24006bc0:	4a7d      	ldr	r2, [pc, #500]	; (24006db8 <HAL_DMAEx_MultiBufferStart+0x260>)
24006bc2:	4293      	cmp	r3, r2
24006bc4:	d045      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bc6:	68fb      	ldr	r3, [r7, #12]
24006bc8:	681b      	ldr	r3, [r3, #0]
24006bca:	4a7c      	ldr	r2, [pc, #496]	; (24006dbc <HAL_DMAEx_MultiBufferStart+0x264>)
24006bcc:	4293      	cmp	r3, r2
24006bce:	d040      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bd0:	68fb      	ldr	r3, [r7, #12]
24006bd2:	681b      	ldr	r3, [r3, #0]
24006bd4:	4a7a      	ldr	r2, [pc, #488]	; (24006dc0 <HAL_DMAEx_MultiBufferStart+0x268>)
24006bd6:	4293      	cmp	r3, r2
24006bd8:	d03b      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bda:	68fb      	ldr	r3, [r7, #12]
24006bdc:	681b      	ldr	r3, [r3, #0]
24006bde:	4a79      	ldr	r2, [pc, #484]	; (24006dc4 <HAL_DMAEx_MultiBufferStart+0x26c>)
24006be0:	4293      	cmp	r3, r2
24006be2:	d036      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006be4:	68fb      	ldr	r3, [r7, #12]
24006be6:	681b      	ldr	r3, [r3, #0]
24006be8:	4a77      	ldr	r2, [pc, #476]	; (24006dc8 <HAL_DMAEx_MultiBufferStart+0x270>)
24006bea:	4293      	cmp	r3, r2
24006bec:	d031      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bee:	68fb      	ldr	r3, [r7, #12]
24006bf0:	681b      	ldr	r3, [r3, #0]
24006bf2:	4a76      	ldr	r2, [pc, #472]	; (24006dcc <HAL_DMAEx_MultiBufferStart+0x274>)
24006bf4:	4293      	cmp	r3, r2
24006bf6:	d02c      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006bf8:	68fb      	ldr	r3, [r7, #12]
24006bfa:	681b      	ldr	r3, [r3, #0]
24006bfc:	4a74      	ldr	r2, [pc, #464]	; (24006dd0 <HAL_DMAEx_MultiBufferStart+0x278>)
24006bfe:	4293      	cmp	r3, r2
24006c00:	d027      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c02:	68fb      	ldr	r3, [r7, #12]
24006c04:	681b      	ldr	r3, [r3, #0]
24006c06:	4a73      	ldr	r2, [pc, #460]	; (24006dd4 <HAL_DMAEx_MultiBufferStart+0x27c>)
24006c08:	4293      	cmp	r3, r2
24006c0a:	d022      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c0c:	68fb      	ldr	r3, [r7, #12]
24006c0e:	681b      	ldr	r3, [r3, #0]
24006c10:	4a71      	ldr	r2, [pc, #452]	; (24006dd8 <HAL_DMAEx_MultiBufferStart+0x280>)
24006c12:	4293      	cmp	r3, r2
24006c14:	d01d      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c16:	68fb      	ldr	r3, [r7, #12]
24006c18:	681b      	ldr	r3, [r3, #0]
24006c1a:	4a70      	ldr	r2, [pc, #448]	; (24006ddc <HAL_DMAEx_MultiBufferStart+0x284>)
24006c1c:	4293      	cmp	r3, r2
24006c1e:	d018      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c20:	68fb      	ldr	r3, [r7, #12]
24006c22:	681b      	ldr	r3, [r3, #0]
24006c24:	4a6e      	ldr	r2, [pc, #440]	; (24006de0 <HAL_DMAEx_MultiBufferStart+0x288>)
24006c26:	4293      	cmp	r3, r2
24006c28:	d013      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c2a:	68fb      	ldr	r3, [r7, #12]
24006c2c:	681b      	ldr	r3, [r3, #0]
24006c2e:	4a6d      	ldr	r2, [pc, #436]	; (24006de4 <HAL_DMAEx_MultiBufferStart+0x28c>)
24006c30:	4293      	cmp	r3, r2
24006c32:	d00e      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c34:	68fb      	ldr	r3, [r7, #12]
24006c36:	681b      	ldr	r3, [r3, #0]
24006c38:	4a6b      	ldr	r2, [pc, #428]	; (24006de8 <HAL_DMAEx_MultiBufferStart+0x290>)
24006c3a:	4293      	cmp	r3, r2
24006c3c:	d009      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c3e:	68fb      	ldr	r3, [r7, #12]
24006c40:	681b      	ldr	r3, [r3, #0]
24006c42:	4a6a      	ldr	r2, [pc, #424]	; (24006dec <HAL_DMAEx_MultiBufferStart+0x294>)
24006c44:	4293      	cmp	r3, r2
24006c46:	d004      	beq.n	24006c52 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c48:	68fb      	ldr	r3, [r7, #12]
24006c4a:	681b      	ldr	r3, [r3, #0]
24006c4c:	4a68      	ldr	r2, [pc, #416]	; (24006df0 <HAL_DMAEx_MultiBufferStart+0x298>)
24006c4e:	4293      	cmp	r3, r2
24006c50:	d101      	bne.n	24006c56 <HAL_DMAEx_MultiBufferStart+0xfe>
24006c52:	2301      	movs	r3, #1
24006c54:	e000      	b.n	24006c58 <HAL_DMAEx_MultiBufferStart+0x100>
24006c56:	2300      	movs	r3, #0
24006c58:	2b00      	cmp	r3, #0
24006c5a:	d018      	beq.n	24006c8e <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24006c5c:	68fb      	ldr	r3, [r7, #12]
24006c5e:	681b      	ldr	r3, [r3, #0]
24006c60:	681a      	ldr	r2, [r3, #0]
24006c62:	68fb      	ldr	r3, [r7, #12]
24006c64:	681b      	ldr	r3, [r3, #0]
24006c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24006c6a:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24006c6c:	68fb      	ldr	r3, [r7, #12]
24006c6e:	681b      	ldr	r3, [r3, #0]
24006c70:	683a      	ldr	r2, [r7, #0]
24006c72:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24006c74:	68fb      	ldr	r3, [r7, #12]
24006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006c78:	3308      	adds	r3, #8
24006c7a:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006c7c:	68fb      	ldr	r3, [r7, #12]
24006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006c80:	f003 031f 	and.w	r3, r3, #31
24006c84:	223f      	movs	r2, #63	; 0x3f
24006c86:	409a      	lsls	r2, r3
24006c88:	693b      	ldr	r3, [r7, #16]
24006c8a:	601a      	str	r2, [r3, #0]
24006c8c:	e018      	b.n	24006cc0 <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24006c8e:	68fb      	ldr	r3, [r7, #12]
24006c90:	681b      	ldr	r3, [r3, #0]
24006c92:	6819      	ldr	r1, [r3, #0]
24006c94:	68fb      	ldr	r3, [r7, #12]
24006c96:	681a      	ldr	r2, [r3, #0]
24006c98:	f248 0320 	movw	r3, #32800	; 0x8020
24006c9c:	430b      	orrs	r3, r1
24006c9e:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24006ca0:	68fb      	ldr	r3, [r7, #12]
24006ca2:	681b      	ldr	r3, [r3, #0]
24006ca4:	683a      	ldr	r2, [r7, #0]
24006ca6:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24006ca8:	68fb      	ldr	r3, [r7, #12]
24006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006cac:	3304      	adds	r3, #4
24006cae:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006cb0:	68fb      	ldr	r3, [r7, #12]
24006cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006cb4:	f003 031f 	and.w	r3, r3, #31
24006cb8:	2201      	movs	r2, #1
24006cba:	409a      	lsls	r2, r3
24006cbc:	693b      	ldr	r3, [r7, #16]
24006cbe:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006cc0:	68fb      	ldr	r3, [r7, #12]
24006cc2:	681b      	ldr	r3, [r3, #0]
24006cc4:	4a3b      	ldr	r2, [pc, #236]	; (24006db4 <HAL_DMAEx_MultiBufferStart+0x25c>)
24006cc6:	4293      	cmp	r3, r2
24006cc8:	d072      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006cca:	68fb      	ldr	r3, [r7, #12]
24006ccc:	681b      	ldr	r3, [r3, #0]
24006cce:	4a3a      	ldr	r2, [pc, #232]	; (24006db8 <HAL_DMAEx_MultiBufferStart+0x260>)
24006cd0:	4293      	cmp	r3, r2
24006cd2:	d06d      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006cd4:	68fb      	ldr	r3, [r7, #12]
24006cd6:	681b      	ldr	r3, [r3, #0]
24006cd8:	4a38      	ldr	r2, [pc, #224]	; (24006dbc <HAL_DMAEx_MultiBufferStart+0x264>)
24006cda:	4293      	cmp	r3, r2
24006cdc:	d068      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006cde:	68fb      	ldr	r3, [r7, #12]
24006ce0:	681b      	ldr	r3, [r3, #0]
24006ce2:	4a37      	ldr	r2, [pc, #220]	; (24006dc0 <HAL_DMAEx_MultiBufferStart+0x268>)
24006ce4:	4293      	cmp	r3, r2
24006ce6:	d063      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006ce8:	68fb      	ldr	r3, [r7, #12]
24006cea:	681b      	ldr	r3, [r3, #0]
24006cec:	4a35      	ldr	r2, [pc, #212]	; (24006dc4 <HAL_DMAEx_MultiBufferStart+0x26c>)
24006cee:	4293      	cmp	r3, r2
24006cf0:	d05e      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006cf2:	68fb      	ldr	r3, [r7, #12]
24006cf4:	681b      	ldr	r3, [r3, #0]
24006cf6:	4a34      	ldr	r2, [pc, #208]	; (24006dc8 <HAL_DMAEx_MultiBufferStart+0x270>)
24006cf8:	4293      	cmp	r3, r2
24006cfa:	d059      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006cfc:	68fb      	ldr	r3, [r7, #12]
24006cfe:	681b      	ldr	r3, [r3, #0]
24006d00:	4a32      	ldr	r2, [pc, #200]	; (24006dcc <HAL_DMAEx_MultiBufferStart+0x274>)
24006d02:	4293      	cmp	r3, r2
24006d04:	d054      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d06:	68fb      	ldr	r3, [r7, #12]
24006d08:	681b      	ldr	r3, [r3, #0]
24006d0a:	4a31      	ldr	r2, [pc, #196]	; (24006dd0 <HAL_DMAEx_MultiBufferStart+0x278>)
24006d0c:	4293      	cmp	r3, r2
24006d0e:	d04f      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d10:	68fb      	ldr	r3, [r7, #12]
24006d12:	681b      	ldr	r3, [r3, #0]
24006d14:	4a2f      	ldr	r2, [pc, #188]	; (24006dd4 <HAL_DMAEx_MultiBufferStart+0x27c>)
24006d16:	4293      	cmp	r3, r2
24006d18:	d04a      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d1a:	68fb      	ldr	r3, [r7, #12]
24006d1c:	681b      	ldr	r3, [r3, #0]
24006d1e:	4a2e      	ldr	r2, [pc, #184]	; (24006dd8 <HAL_DMAEx_MultiBufferStart+0x280>)
24006d20:	4293      	cmp	r3, r2
24006d22:	d045      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d24:	68fb      	ldr	r3, [r7, #12]
24006d26:	681b      	ldr	r3, [r3, #0]
24006d28:	4a2c      	ldr	r2, [pc, #176]	; (24006ddc <HAL_DMAEx_MultiBufferStart+0x284>)
24006d2a:	4293      	cmp	r3, r2
24006d2c:	d040      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d2e:	68fb      	ldr	r3, [r7, #12]
24006d30:	681b      	ldr	r3, [r3, #0]
24006d32:	4a2b      	ldr	r2, [pc, #172]	; (24006de0 <HAL_DMAEx_MultiBufferStart+0x288>)
24006d34:	4293      	cmp	r3, r2
24006d36:	d03b      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d38:	68fb      	ldr	r3, [r7, #12]
24006d3a:	681b      	ldr	r3, [r3, #0]
24006d3c:	4a29      	ldr	r2, [pc, #164]	; (24006de4 <HAL_DMAEx_MultiBufferStart+0x28c>)
24006d3e:	4293      	cmp	r3, r2
24006d40:	d036      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d42:	68fb      	ldr	r3, [r7, #12]
24006d44:	681b      	ldr	r3, [r3, #0]
24006d46:	4a28      	ldr	r2, [pc, #160]	; (24006de8 <HAL_DMAEx_MultiBufferStart+0x290>)
24006d48:	4293      	cmp	r3, r2
24006d4a:	d031      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d4c:	68fb      	ldr	r3, [r7, #12]
24006d4e:	681b      	ldr	r3, [r3, #0]
24006d50:	4a26      	ldr	r2, [pc, #152]	; (24006dec <HAL_DMAEx_MultiBufferStart+0x294>)
24006d52:	4293      	cmp	r3, r2
24006d54:	d02c      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d56:	68fb      	ldr	r3, [r7, #12]
24006d58:	681b      	ldr	r3, [r3, #0]
24006d5a:	4a25      	ldr	r2, [pc, #148]	; (24006df0 <HAL_DMAEx_MultiBufferStart+0x298>)
24006d5c:	4293      	cmp	r3, r2
24006d5e:	d027      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d60:	68fb      	ldr	r3, [r7, #12]
24006d62:	681b      	ldr	r3, [r3, #0]
24006d64:	4a23      	ldr	r2, [pc, #140]	; (24006df4 <HAL_DMAEx_MultiBufferStart+0x29c>)
24006d66:	4293      	cmp	r3, r2
24006d68:	d022      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d6a:	68fb      	ldr	r3, [r7, #12]
24006d6c:	681b      	ldr	r3, [r3, #0]
24006d6e:	4a22      	ldr	r2, [pc, #136]	; (24006df8 <HAL_DMAEx_MultiBufferStart+0x2a0>)
24006d70:	4293      	cmp	r3, r2
24006d72:	d01d      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d74:	68fb      	ldr	r3, [r7, #12]
24006d76:	681b      	ldr	r3, [r3, #0]
24006d78:	4a20      	ldr	r2, [pc, #128]	; (24006dfc <HAL_DMAEx_MultiBufferStart+0x2a4>)
24006d7a:	4293      	cmp	r3, r2
24006d7c:	d018      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d7e:	68fb      	ldr	r3, [r7, #12]
24006d80:	681b      	ldr	r3, [r3, #0]
24006d82:	4a1f      	ldr	r2, [pc, #124]	; (24006e00 <HAL_DMAEx_MultiBufferStart+0x2a8>)
24006d84:	4293      	cmp	r3, r2
24006d86:	d013      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d88:	68fb      	ldr	r3, [r7, #12]
24006d8a:	681b      	ldr	r3, [r3, #0]
24006d8c:	4a1d      	ldr	r2, [pc, #116]	; (24006e04 <HAL_DMAEx_MultiBufferStart+0x2ac>)
24006d8e:	4293      	cmp	r3, r2
24006d90:	d00e      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d92:	68fb      	ldr	r3, [r7, #12]
24006d94:	681b      	ldr	r3, [r3, #0]
24006d96:	4a1c      	ldr	r2, [pc, #112]	; (24006e08 <HAL_DMAEx_MultiBufferStart+0x2b0>)
24006d98:	4293      	cmp	r3, r2
24006d9a:	d009      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006d9c:	68fb      	ldr	r3, [r7, #12]
24006d9e:	681b      	ldr	r3, [r3, #0]
24006da0:	4a1a      	ldr	r2, [pc, #104]	; (24006e0c <HAL_DMAEx_MultiBufferStart+0x2b4>)
24006da2:	4293      	cmp	r3, r2
24006da4:	d004      	beq.n	24006db0 <HAL_DMAEx_MultiBufferStart+0x258>
24006da6:	68fb      	ldr	r3, [r7, #12]
24006da8:	681b      	ldr	r3, [r3, #0]
24006daa:	4a19      	ldr	r2, [pc, #100]	; (24006e10 <HAL_DMAEx_MultiBufferStart+0x2b8>)
24006dac:	4293      	cmp	r3, r2
24006dae:	d131      	bne.n	24006e14 <HAL_DMAEx_MultiBufferStart+0x2bc>
24006db0:	2301      	movs	r3, #1
24006db2:	e030      	b.n	24006e16 <HAL_DMAEx_MultiBufferStart+0x2be>
24006db4:	40020010 	.word	0x40020010
24006db8:	40020028 	.word	0x40020028
24006dbc:	40020040 	.word	0x40020040
24006dc0:	40020058 	.word	0x40020058
24006dc4:	40020070 	.word	0x40020070
24006dc8:	40020088 	.word	0x40020088
24006dcc:	400200a0 	.word	0x400200a0
24006dd0:	400200b8 	.word	0x400200b8
24006dd4:	40020410 	.word	0x40020410
24006dd8:	40020428 	.word	0x40020428
24006ddc:	40020440 	.word	0x40020440
24006de0:	40020458 	.word	0x40020458
24006de4:	40020470 	.word	0x40020470
24006de8:	40020488 	.word	0x40020488
24006dec:	400204a0 	.word	0x400204a0
24006df0:	400204b8 	.word	0x400204b8
24006df4:	58025408 	.word	0x58025408
24006df8:	5802541c 	.word	0x5802541c
24006dfc:	58025430 	.word	0x58025430
24006e00:	58025444 	.word	0x58025444
24006e04:	58025458 	.word	0x58025458
24006e08:	5802546c 	.word	0x5802546c
24006e0c:	58025480 	.word	0x58025480
24006e10:	58025494 	.word	0x58025494
24006e14:	2300      	movs	r3, #0
24006e16:	2b00      	cmp	r3, #0
24006e18:	d013      	beq.n	24006e42 <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24006e1a:	6a3b      	ldr	r3, [r7, #32]
24006e1c:	687a      	ldr	r2, [r7, #4]
24006e1e:	68b9      	ldr	r1, [r7, #8]
24006e20:	68f8      	ldr	r0, [r7, #12]
24006e22:	f000 fea5 	bl	24007b70 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006e26:	68fb      	ldr	r3, [r7, #12]
24006e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24006e2a:	68fa      	ldr	r2, [r7, #12]
24006e2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
24006e2e:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24006e30:	68fb      	ldr	r3, [r7, #12]
24006e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24006e34:	2b00      	cmp	r3, #0
24006e36:	d004      	beq.n	24006e42 <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006e38:	68fb      	ldr	r3, [r7, #12]
24006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006e3c:	68fa      	ldr	r2, [r7, #12]
24006e3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
24006e40:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
24006e42:	68fb      	ldr	r3, [r7, #12]
24006e44:	681b      	ldr	r3, [r3, #0]
24006e46:	4a35      	ldr	r2, [pc, #212]	; (24006f1c <HAL_DMAEx_MultiBufferStart+0x3c4>)
24006e48:	4293      	cmp	r3, r2
24006e4a:	d04a      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e4c:	68fb      	ldr	r3, [r7, #12]
24006e4e:	681b      	ldr	r3, [r3, #0]
24006e50:	4a33      	ldr	r2, [pc, #204]	; (24006f20 <HAL_DMAEx_MultiBufferStart+0x3c8>)
24006e52:	4293      	cmp	r3, r2
24006e54:	d045      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e56:	68fb      	ldr	r3, [r7, #12]
24006e58:	681b      	ldr	r3, [r3, #0]
24006e5a:	4a32      	ldr	r2, [pc, #200]	; (24006f24 <HAL_DMAEx_MultiBufferStart+0x3cc>)
24006e5c:	4293      	cmp	r3, r2
24006e5e:	d040      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e60:	68fb      	ldr	r3, [r7, #12]
24006e62:	681b      	ldr	r3, [r3, #0]
24006e64:	4a30      	ldr	r2, [pc, #192]	; (24006f28 <HAL_DMAEx_MultiBufferStart+0x3d0>)
24006e66:	4293      	cmp	r3, r2
24006e68:	d03b      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e6a:	68fb      	ldr	r3, [r7, #12]
24006e6c:	681b      	ldr	r3, [r3, #0]
24006e6e:	4a2f      	ldr	r2, [pc, #188]	; (24006f2c <HAL_DMAEx_MultiBufferStart+0x3d4>)
24006e70:	4293      	cmp	r3, r2
24006e72:	d036      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e74:	68fb      	ldr	r3, [r7, #12]
24006e76:	681b      	ldr	r3, [r3, #0]
24006e78:	4a2d      	ldr	r2, [pc, #180]	; (24006f30 <HAL_DMAEx_MultiBufferStart+0x3d8>)
24006e7a:	4293      	cmp	r3, r2
24006e7c:	d031      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e7e:	68fb      	ldr	r3, [r7, #12]
24006e80:	681b      	ldr	r3, [r3, #0]
24006e82:	4a2c      	ldr	r2, [pc, #176]	; (24006f34 <HAL_DMAEx_MultiBufferStart+0x3dc>)
24006e84:	4293      	cmp	r3, r2
24006e86:	d02c      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e88:	68fb      	ldr	r3, [r7, #12]
24006e8a:	681b      	ldr	r3, [r3, #0]
24006e8c:	4a2a      	ldr	r2, [pc, #168]	; (24006f38 <HAL_DMAEx_MultiBufferStart+0x3e0>)
24006e8e:	4293      	cmp	r3, r2
24006e90:	d027      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e92:	68fb      	ldr	r3, [r7, #12]
24006e94:	681b      	ldr	r3, [r3, #0]
24006e96:	4a29      	ldr	r2, [pc, #164]	; (24006f3c <HAL_DMAEx_MultiBufferStart+0x3e4>)
24006e98:	4293      	cmp	r3, r2
24006e9a:	d022      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006e9c:	68fb      	ldr	r3, [r7, #12]
24006e9e:	681b      	ldr	r3, [r3, #0]
24006ea0:	4a27      	ldr	r2, [pc, #156]	; (24006f40 <HAL_DMAEx_MultiBufferStart+0x3e8>)
24006ea2:	4293      	cmp	r3, r2
24006ea4:	d01d      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006ea6:	68fb      	ldr	r3, [r7, #12]
24006ea8:	681b      	ldr	r3, [r3, #0]
24006eaa:	4a26      	ldr	r2, [pc, #152]	; (24006f44 <HAL_DMAEx_MultiBufferStart+0x3ec>)
24006eac:	4293      	cmp	r3, r2
24006eae:	d018      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006eb0:	68fb      	ldr	r3, [r7, #12]
24006eb2:	681b      	ldr	r3, [r3, #0]
24006eb4:	4a24      	ldr	r2, [pc, #144]	; (24006f48 <HAL_DMAEx_MultiBufferStart+0x3f0>)
24006eb6:	4293      	cmp	r3, r2
24006eb8:	d013      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006eba:	68fb      	ldr	r3, [r7, #12]
24006ebc:	681b      	ldr	r3, [r3, #0]
24006ebe:	4a23      	ldr	r2, [pc, #140]	; (24006f4c <HAL_DMAEx_MultiBufferStart+0x3f4>)
24006ec0:	4293      	cmp	r3, r2
24006ec2:	d00e      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006ec4:	68fb      	ldr	r3, [r7, #12]
24006ec6:	681b      	ldr	r3, [r3, #0]
24006ec8:	4a21      	ldr	r2, [pc, #132]	; (24006f50 <HAL_DMAEx_MultiBufferStart+0x3f8>)
24006eca:	4293      	cmp	r3, r2
24006ecc:	d009      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006ece:	68fb      	ldr	r3, [r7, #12]
24006ed0:	681b      	ldr	r3, [r3, #0]
24006ed2:	4a20      	ldr	r2, [pc, #128]	; (24006f54 <HAL_DMAEx_MultiBufferStart+0x3fc>)
24006ed4:	4293      	cmp	r3, r2
24006ed6:	d004      	beq.n	24006ee2 <HAL_DMAEx_MultiBufferStart+0x38a>
24006ed8:	68fb      	ldr	r3, [r7, #12]
24006eda:	681b      	ldr	r3, [r3, #0]
24006edc:	4a1e      	ldr	r2, [pc, #120]	; (24006f58 <HAL_DMAEx_MultiBufferStart+0x400>)
24006ede:	4293      	cmp	r3, r2
24006ee0:	d108      	bne.n	24006ef4 <HAL_DMAEx_MultiBufferStart+0x39c>
24006ee2:	68fb      	ldr	r3, [r7, #12]
24006ee4:	681b      	ldr	r3, [r3, #0]
24006ee6:	681a      	ldr	r2, [r3, #0]
24006ee8:	68fb      	ldr	r3, [r7, #12]
24006eea:	681b      	ldr	r3, [r3, #0]
24006eec:	f042 0201 	orr.w	r2, r2, #1
24006ef0:	601a      	str	r2, [r3, #0]
24006ef2:	e00e      	b.n	24006f12 <HAL_DMAEx_MultiBufferStart+0x3ba>
24006ef4:	68fb      	ldr	r3, [r7, #12]
24006ef6:	681b      	ldr	r3, [r3, #0]
24006ef8:	681a      	ldr	r2, [r3, #0]
24006efa:	68fb      	ldr	r3, [r7, #12]
24006efc:	681b      	ldr	r3, [r3, #0]
24006efe:	f042 0201 	orr.w	r2, r2, #1
24006f02:	601a      	str	r2, [r3, #0]
24006f04:	e005      	b.n	24006f12 <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006f06:	68fb      	ldr	r3, [r7, #12]
24006f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006f0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Return error status */
      status = HAL_ERROR;
24006f0e:	2301      	movs	r3, #1
24006f10:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
24006f12:	7dfb      	ldrb	r3, [r7, #23]
}
24006f14:	4618      	mov	r0, r3
24006f16:	3718      	adds	r7, #24
24006f18:	46bd      	mov	sp, r7
24006f1a:	bd80      	pop	{r7, pc}
24006f1c:	40020010 	.word	0x40020010
24006f20:	40020028 	.word	0x40020028
24006f24:	40020040 	.word	0x40020040
24006f28:	40020058 	.word	0x40020058
24006f2c:	40020070 	.word	0x40020070
24006f30:	40020088 	.word	0x40020088
24006f34:	400200a0 	.word	0x400200a0
24006f38:	400200b8 	.word	0x400200b8
24006f3c:	40020410 	.word	0x40020410
24006f40:	40020428 	.word	0x40020428
24006f44:	40020440 	.word	0x40020440
24006f48:	40020458 	.word	0x40020458
24006f4c:	40020470 	.word	0x40020470
24006f50:	40020488 	.word	0x40020488
24006f54:	400204a0 	.word	0x400204a0
24006f58:	400204b8 	.word	0x400204b8

24006f5c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24006f5c:	b580      	push	{r7, lr}
24006f5e:	b086      	sub	sp, #24
24006f60:	af00      	add	r7, sp, #0
24006f62:	60f8      	str	r0, [r7, #12]
24006f64:	60b9      	str	r1, [r7, #8]
24006f66:	607a      	str	r2, [r7, #4]
24006f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006f6a:	2300      	movs	r3, #0
24006f6c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24006f6e:	68fb      	ldr	r3, [r7, #12]
24006f70:	689b      	ldr	r3, [r3, #8]
24006f72:	2b80      	cmp	r3, #128	; 0x80
24006f74:	d105      	bne.n	24006f82 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24006f76:	68fb      	ldr	r3, [r7, #12]
24006f78:	f44f 7280 	mov.w	r2, #256	; 0x100
24006f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24006f7e:	2301      	movs	r3, #1
24006f80:	e315      	b.n	240075ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006f82:	68fb      	ldr	r3, [r7, #12]
24006f84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006f88:	2b01      	cmp	r3, #1
24006f8a:	d101      	bne.n	24006f90 <HAL_DMAEx_MultiBufferStart_IT+0x34>
24006f8c:	2302      	movs	r3, #2
24006f8e:	e30e      	b.n	240075ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
24006f90:	68fb      	ldr	r3, [r7, #12]
24006f92:	2201      	movs	r2, #1
24006f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24006f98:	68fb      	ldr	r3, [r7, #12]
24006f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006f9e:	b2db      	uxtb	r3, r3
24006fa0:	2b01      	cmp	r3, #1
24006fa2:	f040 82fd 	bne.w	240075a0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24006fa6:	68fb      	ldr	r3, [r7, #12]
24006fa8:	2202      	movs	r2, #2
24006faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006fae:	68fb      	ldr	r3, [r7, #12]
24006fb0:	2200      	movs	r2, #0
24006fb2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006fb4:	68fb      	ldr	r3, [r7, #12]
24006fb6:	681b      	ldr	r3, [r3, #0]
24006fb8:	4a82      	ldr	r2, [pc, #520]	; (240071c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24006fba:	4293      	cmp	r3, r2
24006fbc:	d04a      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006fbe:	68fb      	ldr	r3, [r7, #12]
24006fc0:	681b      	ldr	r3, [r3, #0]
24006fc2:	4a81      	ldr	r2, [pc, #516]	; (240071c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24006fc4:	4293      	cmp	r3, r2
24006fc6:	d045      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006fc8:	68fb      	ldr	r3, [r7, #12]
24006fca:	681b      	ldr	r3, [r3, #0]
24006fcc:	4a7f      	ldr	r2, [pc, #508]	; (240071cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24006fce:	4293      	cmp	r3, r2
24006fd0:	d040      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006fd2:	68fb      	ldr	r3, [r7, #12]
24006fd4:	681b      	ldr	r3, [r3, #0]
24006fd6:	4a7e      	ldr	r2, [pc, #504]	; (240071d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
24006fd8:	4293      	cmp	r3, r2
24006fda:	d03b      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006fdc:	68fb      	ldr	r3, [r7, #12]
24006fde:	681b      	ldr	r3, [r3, #0]
24006fe0:	4a7c      	ldr	r2, [pc, #496]	; (240071d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24006fe2:	4293      	cmp	r3, r2
24006fe4:	d036      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006fe6:	68fb      	ldr	r3, [r7, #12]
24006fe8:	681b      	ldr	r3, [r3, #0]
24006fea:	4a7b      	ldr	r2, [pc, #492]	; (240071d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
24006fec:	4293      	cmp	r3, r2
24006fee:	d031      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006ff0:	68fb      	ldr	r3, [r7, #12]
24006ff2:	681b      	ldr	r3, [r3, #0]
24006ff4:	4a79      	ldr	r2, [pc, #484]	; (240071dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24006ff6:	4293      	cmp	r3, r2
24006ff8:	d02c      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24006ffa:	68fb      	ldr	r3, [r7, #12]
24006ffc:	681b      	ldr	r3, [r3, #0]
24006ffe:	4a78      	ldr	r2, [pc, #480]	; (240071e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
24007000:	4293      	cmp	r3, r2
24007002:	d027      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007004:	68fb      	ldr	r3, [r7, #12]
24007006:	681b      	ldr	r3, [r3, #0]
24007008:	4a76      	ldr	r2, [pc, #472]	; (240071e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
2400700a:	4293      	cmp	r3, r2
2400700c:	d022      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400700e:	68fb      	ldr	r3, [r7, #12]
24007010:	681b      	ldr	r3, [r3, #0]
24007012:	4a75      	ldr	r2, [pc, #468]	; (240071e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24007014:	4293      	cmp	r3, r2
24007016:	d01d      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007018:	68fb      	ldr	r3, [r7, #12]
2400701a:	681b      	ldr	r3, [r3, #0]
2400701c:	4a73      	ldr	r2, [pc, #460]	; (240071ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
2400701e:	4293      	cmp	r3, r2
24007020:	d018      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007022:	68fb      	ldr	r3, [r7, #12]
24007024:	681b      	ldr	r3, [r3, #0]
24007026:	4a72      	ldr	r2, [pc, #456]	; (240071f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007028:	4293      	cmp	r3, r2
2400702a:	d013      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400702c:	68fb      	ldr	r3, [r7, #12]
2400702e:	681b      	ldr	r3, [r3, #0]
24007030:	4a70      	ldr	r2, [pc, #448]	; (240071f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
24007032:	4293      	cmp	r3, r2
24007034:	d00e      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007036:	68fb      	ldr	r3, [r7, #12]
24007038:	681b      	ldr	r3, [r3, #0]
2400703a:	4a6f      	ldr	r2, [pc, #444]	; (240071f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
2400703c:	4293      	cmp	r3, r2
2400703e:	d009      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007040:	68fb      	ldr	r3, [r7, #12]
24007042:	681b      	ldr	r3, [r3, #0]
24007044:	4a6d      	ldr	r2, [pc, #436]	; (240071fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007046:	4293      	cmp	r3, r2
24007048:	d004      	beq.n	24007054 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400704a:	68fb      	ldr	r3, [r7, #12]
2400704c:	681b      	ldr	r3, [r3, #0]
2400704e:	4a6c      	ldr	r2, [pc, #432]	; (24007200 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007050:	4293      	cmp	r3, r2
24007052:	d101      	bne.n	24007058 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
24007054:	2301      	movs	r3, #1
24007056:	e000      	b.n	2400705a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
24007058:	2300      	movs	r3, #0
2400705a:	2b00      	cmp	r3, #0
2400705c:	d018      	beq.n	24007090 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
2400705e:	68fb      	ldr	r3, [r7, #12]
24007060:	681b      	ldr	r3, [r3, #0]
24007062:	681a      	ldr	r2, [r3, #0]
24007064:	68fb      	ldr	r3, [r7, #12]
24007066:	681b      	ldr	r3, [r3, #0]
24007068:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400706c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
2400706e:	68fb      	ldr	r3, [r7, #12]
24007070:	681b      	ldr	r3, [r3, #0]
24007072:	683a      	ldr	r2, [r7, #0]
24007074:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007076:	68fb      	ldr	r3, [r7, #12]
24007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400707a:	3308      	adds	r3, #8
2400707c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400707e:	68fb      	ldr	r3, [r7, #12]
24007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007082:	f003 031f 	and.w	r3, r3, #31
24007086:	223f      	movs	r2, #63	; 0x3f
24007088:	409a      	lsls	r2, r3
2400708a:	693b      	ldr	r3, [r7, #16]
2400708c:	601a      	str	r2, [r3, #0]
2400708e:	e018      	b.n	240070c2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007090:	68fb      	ldr	r3, [r7, #12]
24007092:	681b      	ldr	r3, [r3, #0]
24007094:	6819      	ldr	r1, [r3, #0]
24007096:	68fb      	ldr	r3, [r7, #12]
24007098:	681a      	ldr	r2, [r3, #0]
2400709a:	f248 0320 	movw	r3, #32800	; 0x8020
2400709e:	430b      	orrs	r3, r1
240070a0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
240070a2:	68fb      	ldr	r3, [r7, #12]
240070a4:	681b      	ldr	r3, [r3, #0]
240070a6:	683a      	ldr	r2, [r7, #0]
240070a8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
240070aa:	68fb      	ldr	r3, [r7, #12]
240070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240070ae:	3304      	adds	r3, #4
240070b0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240070b2:	68fb      	ldr	r3, [r7, #12]
240070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240070b6:	f003 031f 	and.w	r3, r3, #31
240070ba:	2201      	movs	r2, #1
240070bc:	409a      	lsls	r2, r3
240070be:	693b      	ldr	r3, [r7, #16]
240070c0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
240070c2:	6a3b      	ldr	r3, [r7, #32]
240070c4:	687a      	ldr	r2, [r7, #4]
240070c6:	68b9      	ldr	r1, [r7, #8]
240070c8:	68f8      	ldr	r0, [r7, #12]
240070ca:	f000 fd51 	bl	24007b70 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240070ce:	68fb      	ldr	r3, [r7, #12]
240070d0:	681b      	ldr	r3, [r3, #0]
240070d2:	4a3c      	ldr	r2, [pc, #240]	; (240071c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
240070d4:	4293      	cmp	r3, r2
240070d6:	d072      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240070d8:	68fb      	ldr	r3, [r7, #12]
240070da:	681b      	ldr	r3, [r3, #0]
240070dc:	4a3a      	ldr	r2, [pc, #232]	; (240071c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
240070de:	4293      	cmp	r3, r2
240070e0:	d06d      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240070e2:	68fb      	ldr	r3, [r7, #12]
240070e4:	681b      	ldr	r3, [r3, #0]
240070e6:	4a39      	ldr	r2, [pc, #228]	; (240071cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
240070e8:	4293      	cmp	r3, r2
240070ea:	d068      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240070ec:	68fb      	ldr	r3, [r7, #12]
240070ee:	681b      	ldr	r3, [r3, #0]
240070f0:	4a37      	ldr	r2, [pc, #220]	; (240071d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
240070f2:	4293      	cmp	r3, r2
240070f4:	d063      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240070f6:	68fb      	ldr	r3, [r7, #12]
240070f8:	681b      	ldr	r3, [r3, #0]
240070fa:	4a36      	ldr	r2, [pc, #216]	; (240071d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
240070fc:	4293      	cmp	r3, r2
240070fe:	d05e      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007100:	68fb      	ldr	r3, [r7, #12]
24007102:	681b      	ldr	r3, [r3, #0]
24007104:	4a34      	ldr	r2, [pc, #208]	; (240071d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
24007106:	4293      	cmp	r3, r2
24007108:	d059      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400710a:	68fb      	ldr	r3, [r7, #12]
2400710c:	681b      	ldr	r3, [r3, #0]
2400710e:	4a33      	ldr	r2, [pc, #204]	; (240071dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24007110:	4293      	cmp	r3, r2
24007112:	d054      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007114:	68fb      	ldr	r3, [r7, #12]
24007116:	681b      	ldr	r3, [r3, #0]
24007118:	4a31      	ldr	r2, [pc, #196]	; (240071e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
2400711a:	4293      	cmp	r3, r2
2400711c:	d04f      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400711e:	68fb      	ldr	r3, [r7, #12]
24007120:	681b      	ldr	r3, [r3, #0]
24007122:	4a30      	ldr	r2, [pc, #192]	; (240071e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
24007124:	4293      	cmp	r3, r2
24007126:	d04a      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007128:	68fb      	ldr	r3, [r7, #12]
2400712a:	681b      	ldr	r3, [r3, #0]
2400712c:	4a2e      	ldr	r2, [pc, #184]	; (240071e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
2400712e:	4293      	cmp	r3, r2
24007130:	d045      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007132:	68fb      	ldr	r3, [r7, #12]
24007134:	681b      	ldr	r3, [r3, #0]
24007136:	4a2d      	ldr	r2, [pc, #180]	; (240071ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24007138:	4293      	cmp	r3, r2
2400713a:	d040      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400713c:	68fb      	ldr	r3, [r7, #12]
2400713e:	681b      	ldr	r3, [r3, #0]
24007140:	4a2b      	ldr	r2, [pc, #172]	; (240071f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007142:	4293      	cmp	r3, r2
24007144:	d03b      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007146:	68fb      	ldr	r3, [r7, #12]
24007148:	681b      	ldr	r3, [r3, #0]
2400714a:	4a2a      	ldr	r2, [pc, #168]	; (240071f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
2400714c:	4293      	cmp	r3, r2
2400714e:	d036      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007150:	68fb      	ldr	r3, [r7, #12]
24007152:	681b      	ldr	r3, [r3, #0]
24007154:	4a28      	ldr	r2, [pc, #160]	; (240071f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007156:	4293      	cmp	r3, r2
24007158:	d031      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400715a:	68fb      	ldr	r3, [r7, #12]
2400715c:	681b      	ldr	r3, [r3, #0]
2400715e:	4a27      	ldr	r2, [pc, #156]	; (240071fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007160:	4293      	cmp	r3, r2
24007162:	d02c      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007164:	68fb      	ldr	r3, [r7, #12]
24007166:	681b      	ldr	r3, [r3, #0]
24007168:	4a25      	ldr	r2, [pc, #148]	; (24007200 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
2400716a:	4293      	cmp	r3, r2
2400716c:	d027      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400716e:	68fb      	ldr	r3, [r7, #12]
24007170:	681b      	ldr	r3, [r3, #0]
24007172:	4a24      	ldr	r2, [pc, #144]	; (24007204 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
24007174:	4293      	cmp	r3, r2
24007176:	d022      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007178:	68fb      	ldr	r3, [r7, #12]
2400717a:	681b      	ldr	r3, [r3, #0]
2400717c:	4a22      	ldr	r2, [pc, #136]	; (24007208 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
2400717e:	4293      	cmp	r3, r2
24007180:	d01d      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007182:	68fb      	ldr	r3, [r7, #12]
24007184:	681b      	ldr	r3, [r3, #0]
24007186:	4a21      	ldr	r2, [pc, #132]	; (2400720c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
24007188:	4293      	cmp	r3, r2
2400718a:	d018      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400718c:	68fb      	ldr	r3, [r7, #12]
2400718e:	681b      	ldr	r3, [r3, #0]
24007190:	4a1f      	ldr	r2, [pc, #124]	; (24007210 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
24007192:	4293      	cmp	r3, r2
24007194:	d013      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007196:	68fb      	ldr	r3, [r7, #12]
24007198:	681b      	ldr	r3, [r3, #0]
2400719a:	4a1e      	ldr	r2, [pc, #120]	; (24007214 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
2400719c:	4293      	cmp	r3, r2
2400719e:	d00e      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071a0:	68fb      	ldr	r3, [r7, #12]
240071a2:	681b      	ldr	r3, [r3, #0]
240071a4:	4a1c      	ldr	r2, [pc, #112]	; (24007218 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
240071a6:	4293      	cmp	r3, r2
240071a8:	d009      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071aa:	68fb      	ldr	r3, [r7, #12]
240071ac:	681b      	ldr	r3, [r3, #0]
240071ae:	4a1b      	ldr	r2, [pc, #108]	; (2400721c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
240071b0:	4293      	cmp	r3, r2
240071b2:	d004      	beq.n	240071be <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071b4:	68fb      	ldr	r3, [r7, #12]
240071b6:	681b      	ldr	r3, [r3, #0]
240071b8:	4a19      	ldr	r2, [pc, #100]	; (24007220 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
240071ba:	4293      	cmp	r3, r2
240071bc:	d132      	bne.n	24007224 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
240071be:	2301      	movs	r3, #1
240071c0:	e031      	b.n	24007226 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
240071c2:	bf00      	nop
240071c4:	40020010 	.word	0x40020010
240071c8:	40020028 	.word	0x40020028
240071cc:	40020040 	.word	0x40020040
240071d0:	40020058 	.word	0x40020058
240071d4:	40020070 	.word	0x40020070
240071d8:	40020088 	.word	0x40020088
240071dc:	400200a0 	.word	0x400200a0
240071e0:	400200b8 	.word	0x400200b8
240071e4:	40020410 	.word	0x40020410
240071e8:	40020428 	.word	0x40020428
240071ec:	40020440 	.word	0x40020440
240071f0:	40020458 	.word	0x40020458
240071f4:	40020470 	.word	0x40020470
240071f8:	40020488 	.word	0x40020488
240071fc:	400204a0 	.word	0x400204a0
24007200:	400204b8 	.word	0x400204b8
24007204:	58025408 	.word	0x58025408
24007208:	5802541c 	.word	0x5802541c
2400720c:	58025430 	.word	0x58025430
24007210:	58025444 	.word	0x58025444
24007214:	58025458 	.word	0x58025458
24007218:	5802546c 	.word	0x5802546c
2400721c:	58025480 	.word	0x58025480
24007220:	58025494 	.word	0x58025494
24007224:	2300      	movs	r3, #0
24007226:	2b00      	cmp	r3, #0
24007228:	d00d      	beq.n	24007246 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400722a:	68fb      	ldr	r3, [r7, #12]
2400722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400722e:	68fa      	ldr	r2, [r7, #12]
24007230:	6e92      	ldr	r2, [r2, #104]	; 0x68
24007232:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
24007234:	68fb      	ldr	r3, [r7, #12]
24007236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007238:	2b00      	cmp	r3, #0
2400723a:	d004      	beq.n	24007246 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400723c:	68fb      	ldr	r3, [r7, #12]
2400723e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007240:	68fa      	ldr	r2, [r7, #12]
24007242:	6f52      	ldr	r2, [r2, #116]	; 0x74
24007244:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007246:	68fb      	ldr	r3, [r7, #12]
24007248:	681b      	ldr	r3, [r3, #0]
2400724a:	4a3b      	ldr	r2, [pc, #236]	; (24007338 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
2400724c:	4293      	cmp	r3, r2
2400724e:	d04a      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007250:	68fb      	ldr	r3, [r7, #12]
24007252:	681b      	ldr	r3, [r3, #0]
24007254:	4a39      	ldr	r2, [pc, #228]	; (2400733c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
24007256:	4293      	cmp	r3, r2
24007258:	d045      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400725a:	68fb      	ldr	r3, [r7, #12]
2400725c:	681b      	ldr	r3, [r3, #0]
2400725e:	4a38      	ldr	r2, [pc, #224]	; (24007340 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
24007260:	4293      	cmp	r3, r2
24007262:	d040      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007264:	68fb      	ldr	r3, [r7, #12]
24007266:	681b      	ldr	r3, [r3, #0]
24007268:	4a36      	ldr	r2, [pc, #216]	; (24007344 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
2400726a:	4293      	cmp	r3, r2
2400726c:	d03b      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400726e:	68fb      	ldr	r3, [r7, #12]
24007270:	681b      	ldr	r3, [r3, #0]
24007272:	4a35      	ldr	r2, [pc, #212]	; (24007348 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
24007274:	4293      	cmp	r3, r2
24007276:	d036      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007278:	68fb      	ldr	r3, [r7, #12]
2400727a:	681b      	ldr	r3, [r3, #0]
2400727c:	4a33      	ldr	r2, [pc, #204]	; (2400734c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
2400727e:	4293      	cmp	r3, r2
24007280:	d031      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007282:	68fb      	ldr	r3, [r7, #12]
24007284:	681b      	ldr	r3, [r3, #0]
24007286:	4a32      	ldr	r2, [pc, #200]	; (24007350 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
24007288:	4293      	cmp	r3, r2
2400728a:	d02c      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400728c:	68fb      	ldr	r3, [r7, #12]
2400728e:	681b      	ldr	r3, [r3, #0]
24007290:	4a30      	ldr	r2, [pc, #192]	; (24007354 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
24007292:	4293      	cmp	r3, r2
24007294:	d027      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007296:	68fb      	ldr	r3, [r7, #12]
24007298:	681b      	ldr	r3, [r3, #0]
2400729a:	4a2f      	ldr	r2, [pc, #188]	; (24007358 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
2400729c:	4293      	cmp	r3, r2
2400729e:	d022      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072a0:	68fb      	ldr	r3, [r7, #12]
240072a2:	681b      	ldr	r3, [r3, #0]
240072a4:	4a2d      	ldr	r2, [pc, #180]	; (2400735c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
240072a6:	4293      	cmp	r3, r2
240072a8:	d01d      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072aa:	68fb      	ldr	r3, [r7, #12]
240072ac:	681b      	ldr	r3, [r3, #0]
240072ae:	4a2c      	ldr	r2, [pc, #176]	; (24007360 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
240072b0:	4293      	cmp	r3, r2
240072b2:	d018      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072b4:	68fb      	ldr	r3, [r7, #12]
240072b6:	681b      	ldr	r3, [r3, #0]
240072b8:	4a2a      	ldr	r2, [pc, #168]	; (24007364 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
240072ba:	4293      	cmp	r3, r2
240072bc:	d013      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072be:	68fb      	ldr	r3, [r7, #12]
240072c0:	681b      	ldr	r3, [r3, #0]
240072c2:	4a29      	ldr	r2, [pc, #164]	; (24007368 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
240072c4:	4293      	cmp	r3, r2
240072c6:	d00e      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072c8:	68fb      	ldr	r3, [r7, #12]
240072ca:	681b      	ldr	r3, [r3, #0]
240072cc:	4a27      	ldr	r2, [pc, #156]	; (2400736c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
240072ce:	4293      	cmp	r3, r2
240072d0:	d009      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072d2:	68fb      	ldr	r3, [r7, #12]
240072d4:	681b      	ldr	r3, [r3, #0]
240072d6:	4a26      	ldr	r2, [pc, #152]	; (24007370 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
240072d8:	4293      	cmp	r3, r2
240072da:	d004      	beq.n	240072e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
240072dc:	68fb      	ldr	r3, [r7, #12]
240072de:	681b      	ldr	r3, [r3, #0]
240072e0:	4a24      	ldr	r2, [pc, #144]	; (24007374 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
240072e2:	4293      	cmp	r3, r2
240072e4:	d101      	bne.n	240072ea <HAL_DMAEx_MultiBufferStart_IT+0x38e>
240072e6:	2301      	movs	r3, #1
240072e8:	e000      	b.n	240072ec <HAL_DMAEx_MultiBufferStart_IT+0x390>
240072ea:	2300      	movs	r3, #0
240072ec:	2b00      	cmp	r3, #0
240072ee:	d043      	beq.n	24007378 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240072f0:	68fb      	ldr	r3, [r7, #12]
240072f2:	681b      	ldr	r3, [r3, #0]
240072f4:	681b      	ldr	r3, [r3, #0]
240072f6:	f023 021e 	bic.w	r2, r3, #30
240072fa:	68fb      	ldr	r3, [r7, #12]
240072fc:	681b      	ldr	r3, [r3, #0]
240072fe:	f042 0216 	orr.w	r2, r2, #22
24007302:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
24007304:	68fb      	ldr	r3, [r7, #12]
24007306:	681b      	ldr	r3, [r3, #0]
24007308:	695a      	ldr	r2, [r3, #20]
2400730a:	68fb      	ldr	r3, [r7, #12]
2400730c:	681b      	ldr	r3, [r3, #0]
2400730e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24007312:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24007314:	68fb      	ldr	r3, [r7, #12]
24007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24007318:	2b00      	cmp	r3, #0
2400731a:	d103      	bne.n	24007324 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
2400731c:	68fb      	ldr	r3, [r7, #12]
2400731e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24007320:	2b00      	cmp	r3, #0
24007322:	d043      	beq.n	240073ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24007324:	68fb      	ldr	r3, [r7, #12]
24007326:	681b      	ldr	r3, [r3, #0]
24007328:	681a      	ldr	r2, [r3, #0]
2400732a:	68fb      	ldr	r3, [r7, #12]
2400732c:	681b      	ldr	r3, [r3, #0]
2400732e:	f042 0208 	orr.w	r2, r2, #8
24007332:	601a      	str	r2, [r3, #0]
24007334:	e03a      	b.n	240073ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
24007336:	bf00      	nop
24007338:	40020010 	.word	0x40020010
2400733c:	40020028 	.word	0x40020028
24007340:	40020040 	.word	0x40020040
24007344:	40020058 	.word	0x40020058
24007348:	40020070 	.word	0x40020070
2400734c:	40020088 	.word	0x40020088
24007350:	400200a0 	.word	0x400200a0
24007354:	400200b8 	.word	0x400200b8
24007358:	40020410 	.word	0x40020410
2400735c:	40020428 	.word	0x40020428
24007360:	40020440 	.word	0x40020440
24007364:	40020458 	.word	0x40020458
24007368:	40020470 	.word	0x40020470
2400736c:	40020488 	.word	0x40020488
24007370:	400204a0 	.word	0x400204a0
24007374:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24007378:	68fb      	ldr	r3, [r7, #12]
2400737a:	681b      	ldr	r3, [r3, #0]
2400737c:	681b      	ldr	r3, [r3, #0]
2400737e:	f023 020e 	bic.w	r2, r3, #14
24007382:	68fb      	ldr	r3, [r7, #12]
24007384:	681b      	ldr	r3, [r3, #0]
24007386:	f042 020a 	orr.w	r2, r2, #10
2400738a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2400738c:	68fb      	ldr	r3, [r7, #12]
2400738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24007390:	2b00      	cmp	r3, #0
24007392:	d103      	bne.n	2400739c <HAL_DMAEx_MultiBufferStart_IT+0x440>
24007394:	68fb      	ldr	r3, [r7, #12]
24007396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24007398:	2b00      	cmp	r3, #0
2400739a:	d007      	beq.n	240073ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2400739c:	68fb      	ldr	r3, [r7, #12]
2400739e:	681b      	ldr	r3, [r3, #0]
240073a0:	681a      	ldr	r2, [r3, #0]
240073a2:	68fb      	ldr	r3, [r7, #12]
240073a4:	681b      	ldr	r3, [r3, #0]
240073a6:	f042 0204 	orr.w	r2, r2, #4
240073aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240073ac:	68fb      	ldr	r3, [r7, #12]
240073ae:	681b      	ldr	r3, [r3, #0]
240073b0:	4a81      	ldr	r2, [pc, #516]	; (240075b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
240073b2:	4293      	cmp	r3, r2
240073b4:	d072      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073b6:	68fb      	ldr	r3, [r7, #12]
240073b8:	681b      	ldr	r3, [r3, #0]
240073ba:	4a80      	ldr	r2, [pc, #512]	; (240075bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
240073bc:	4293      	cmp	r3, r2
240073be:	d06d      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073c0:	68fb      	ldr	r3, [r7, #12]
240073c2:	681b      	ldr	r3, [r3, #0]
240073c4:	4a7e      	ldr	r2, [pc, #504]	; (240075c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
240073c6:	4293      	cmp	r3, r2
240073c8:	d068      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073ca:	68fb      	ldr	r3, [r7, #12]
240073cc:	681b      	ldr	r3, [r3, #0]
240073ce:	4a7d      	ldr	r2, [pc, #500]	; (240075c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
240073d0:	4293      	cmp	r3, r2
240073d2:	d063      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073d4:	68fb      	ldr	r3, [r7, #12]
240073d6:	681b      	ldr	r3, [r3, #0]
240073d8:	4a7b      	ldr	r2, [pc, #492]	; (240075c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
240073da:	4293      	cmp	r3, r2
240073dc:	d05e      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073de:	68fb      	ldr	r3, [r7, #12]
240073e0:	681b      	ldr	r3, [r3, #0]
240073e2:	4a7a      	ldr	r2, [pc, #488]	; (240075cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240073e4:	4293      	cmp	r3, r2
240073e6:	d059      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073e8:	68fb      	ldr	r3, [r7, #12]
240073ea:	681b      	ldr	r3, [r3, #0]
240073ec:	4a78      	ldr	r2, [pc, #480]	; (240075d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240073ee:	4293      	cmp	r3, r2
240073f0:	d054      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073f2:	68fb      	ldr	r3, [r7, #12]
240073f4:	681b      	ldr	r3, [r3, #0]
240073f6:	4a77      	ldr	r2, [pc, #476]	; (240075d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240073f8:	4293      	cmp	r3, r2
240073fa:	d04f      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240073fc:	68fb      	ldr	r3, [r7, #12]
240073fe:	681b      	ldr	r3, [r3, #0]
24007400:	4a75      	ldr	r2, [pc, #468]	; (240075d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
24007402:	4293      	cmp	r3, r2
24007404:	d04a      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007406:	68fb      	ldr	r3, [r7, #12]
24007408:	681b      	ldr	r3, [r3, #0]
2400740a:	4a74      	ldr	r2, [pc, #464]	; (240075dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
2400740c:	4293      	cmp	r3, r2
2400740e:	d045      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007410:	68fb      	ldr	r3, [r7, #12]
24007412:	681b      	ldr	r3, [r3, #0]
24007414:	4a72      	ldr	r2, [pc, #456]	; (240075e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
24007416:	4293      	cmp	r3, r2
24007418:	d040      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400741a:	68fb      	ldr	r3, [r7, #12]
2400741c:	681b      	ldr	r3, [r3, #0]
2400741e:	4a71      	ldr	r2, [pc, #452]	; (240075e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
24007420:	4293      	cmp	r3, r2
24007422:	d03b      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007424:	68fb      	ldr	r3, [r7, #12]
24007426:	681b      	ldr	r3, [r3, #0]
24007428:	4a6f      	ldr	r2, [pc, #444]	; (240075e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
2400742a:	4293      	cmp	r3, r2
2400742c:	d036      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400742e:	68fb      	ldr	r3, [r7, #12]
24007430:	681b      	ldr	r3, [r3, #0]
24007432:	4a6e      	ldr	r2, [pc, #440]	; (240075ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
24007434:	4293      	cmp	r3, r2
24007436:	d031      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007438:	68fb      	ldr	r3, [r7, #12]
2400743a:	681b      	ldr	r3, [r3, #0]
2400743c:	4a6c      	ldr	r2, [pc, #432]	; (240075f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
2400743e:	4293      	cmp	r3, r2
24007440:	d02c      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007442:	68fb      	ldr	r3, [r7, #12]
24007444:	681b      	ldr	r3, [r3, #0]
24007446:	4a6b      	ldr	r2, [pc, #428]	; (240075f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24007448:	4293      	cmp	r3, r2
2400744a:	d027      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400744c:	68fb      	ldr	r3, [r7, #12]
2400744e:	681b      	ldr	r3, [r3, #0]
24007450:	4a69      	ldr	r2, [pc, #420]	; (240075f8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
24007452:	4293      	cmp	r3, r2
24007454:	d022      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007456:	68fb      	ldr	r3, [r7, #12]
24007458:	681b      	ldr	r3, [r3, #0]
2400745a:	4a68      	ldr	r2, [pc, #416]	; (240075fc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
2400745c:	4293      	cmp	r3, r2
2400745e:	d01d      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007460:	68fb      	ldr	r3, [r7, #12]
24007462:	681b      	ldr	r3, [r3, #0]
24007464:	4a66      	ldr	r2, [pc, #408]	; (24007600 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
24007466:	4293      	cmp	r3, r2
24007468:	d018      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400746a:	68fb      	ldr	r3, [r7, #12]
2400746c:	681b      	ldr	r3, [r3, #0]
2400746e:	4a65      	ldr	r2, [pc, #404]	; (24007604 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
24007470:	4293      	cmp	r3, r2
24007472:	d013      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007474:	68fb      	ldr	r3, [r7, #12]
24007476:	681b      	ldr	r3, [r3, #0]
24007478:	4a63      	ldr	r2, [pc, #396]	; (24007608 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
2400747a:	4293      	cmp	r3, r2
2400747c:	d00e      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400747e:	68fb      	ldr	r3, [r7, #12]
24007480:	681b      	ldr	r3, [r3, #0]
24007482:	4a62      	ldr	r2, [pc, #392]	; (2400760c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
24007484:	4293      	cmp	r3, r2
24007486:	d009      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007488:	68fb      	ldr	r3, [r7, #12]
2400748a:	681b      	ldr	r3, [r3, #0]
2400748c:	4a60      	ldr	r2, [pc, #384]	; (24007610 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
2400748e:	4293      	cmp	r3, r2
24007490:	d004      	beq.n	2400749c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007492:	68fb      	ldr	r3, [r7, #12]
24007494:	681b      	ldr	r3, [r3, #0]
24007496:	4a5f      	ldr	r2, [pc, #380]	; (24007614 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
24007498:	4293      	cmp	r3, r2
2400749a:	d101      	bne.n	240074a0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
2400749c:	2301      	movs	r3, #1
2400749e:	e000      	b.n	240074a2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
240074a0:	2300      	movs	r3, #0
240074a2:	2b00      	cmp	r3, #0
240074a4:	d01a      	beq.n	240074dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240074a6:	68fb      	ldr	r3, [r7, #12]
240074a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240074aa:	681b      	ldr	r3, [r3, #0]
240074ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240074b0:	2b00      	cmp	r3, #0
240074b2:	d007      	beq.n	240074c4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240074b4:	68fb      	ldr	r3, [r7, #12]
240074b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240074b8:	681a      	ldr	r2, [r3, #0]
240074ba:	68fb      	ldr	r3, [r7, #12]
240074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240074be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240074c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
240074c4:	68fb      	ldr	r3, [r7, #12]
240074c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240074c8:	2b00      	cmp	r3, #0
240074ca:	d007      	beq.n	240074dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240074cc:	68fb      	ldr	r3, [r7, #12]
240074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240074d0:	681a      	ldr	r2, [r3, #0]
240074d2:	68fb      	ldr	r3, [r7, #12]
240074d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240074d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240074da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
240074dc:	68fb      	ldr	r3, [r7, #12]
240074de:	681b      	ldr	r3, [r3, #0]
240074e0:	4a35      	ldr	r2, [pc, #212]	; (240075b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
240074e2:	4293      	cmp	r3, r2
240074e4:	d04a      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240074e6:	68fb      	ldr	r3, [r7, #12]
240074e8:	681b      	ldr	r3, [r3, #0]
240074ea:	4a34      	ldr	r2, [pc, #208]	; (240075bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
240074ec:	4293      	cmp	r3, r2
240074ee:	d045      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240074f0:	68fb      	ldr	r3, [r7, #12]
240074f2:	681b      	ldr	r3, [r3, #0]
240074f4:	4a32      	ldr	r2, [pc, #200]	; (240075c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
240074f6:	4293      	cmp	r3, r2
240074f8:	d040      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240074fa:	68fb      	ldr	r3, [r7, #12]
240074fc:	681b      	ldr	r3, [r3, #0]
240074fe:	4a31      	ldr	r2, [pc, #196]	; (240075c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
24007500:	4293      	cmp	r3, r2
24007502:	d03b      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007504:	68fb      	ldr	r3, [r7, #12]
24007506:	681b      	ldr	r3, [r3, #0]
24007508:	4a2f      	ldr	r2, [pc, #188]	; (240075c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
2400750a:	4293      	cmp	r3, r2
2400750c:	d036      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400750e:	68fb      	ldr	r3, [r7, #12]
24007510:	681b      	ldr	r3, [r3, #0]
24007512:	4a2e      	ldr	r2, [pc, #184]	; (240075cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
24007514:	4293      	cmp	r3, r2
24007516:	d031      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007518:	68fb      	ldr	r3, [r7, #12]
2400751a:	681b      	ldr	r3, [r3, #0]
2400751c:	4a2c      	ldr	r2, [pc, #176]	; (240075d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
2400751e:	4293      	cmp	r3, r2
24007520:	d02c      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007522:	68fb      	ldr	r3, [r7, #12]
24007524:	681b      	ldr	r3, [r3, #0]
24007526:	4a2b      	ldr	r2, [pc, #172]	; (240075d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
24007528:	4293      	cmp	r3, r2
2400752a:	d027      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400752c:	68fb      	ldr	r3, [r7, #12]
2400752e:	681b      	ldr	r3, [r3, #0]
24007530:	4a29      	ldr	r2, [pc, #164]	; (240075d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
24007532:	4293      	cmp	r3, r2
24007534:	d022      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007536:	68fb      	ldr	r3, [r7, #12]
24007538:	681b      	ldr	r3, [r3, #0]
2400753a:	4a28      	ldr	r2, [pc, #160]	; (240075dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
2400753c:	4293      	cmp	r3, r2
2400753e:	d01d      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007540:	68fb      	ldr	r3, [r7, #12]
24007542:	681b      	ldr	r3, [r3, #0]
24007544:	4a26      	ldr	r2, [pc, #152]	; (240075e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
24007546:	4293      	cmp	r3, r2
24007548:	d018      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400754a:	68fb      	ldr	r3, [r7, #12]
2400754c:	681b      	ldr	r3, [r3, #0]
2400754e:	4a25      	ldr	r2, [pc, #148]	; (240075e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
24007550:	4293      	cmp	r3, r2
24007552:	d013      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007554:	68fb      	ldr	r3, [r7, #12]
24007556:	681b      	ldr	r3, [r3, #0]
24007558:	4a23      	ldr	r2, [pc, #140]	; (240075e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
2400755a:	4293      	cmp	r3, r2
2400755c:	d00e      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400755e:	68fb      	ldr	r3, [r7, #12]
24007560:	681b      	ldr	r3, [r3, #0]
24007562:	4a22      	ldr	r2, [pc, #136]	; (240075ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
24007564:	4293      	cmp	r3, r2
24007566:	d009      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007568:	68fb      	ldr	r3, [r7, #12]
2400756a:	681b      	ldr	r3, [r3, #0]
2400756c:	4a20      	ldr	r2, [pc, #128]	; (240075f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
2400756e:	4293      	cmp	r3, r2
24007570:	d004      	beq.n	2400757c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007572:	68fb      	ldr	r3, [r7, #12]
24007574:	681b      	ldr	r3, [r3, #0]
24007576:	4a1f      	ldr	r2, [pc, #124]	; (240075f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24007578:	4293      	cmp	r3, r2
2400757a:	d108      	bne.n	2400758e <HAL_DMAEx_MultiBufferStart_IT+0x632>
2400757c:	68fb      	ldr	r3, [r7, #12]
2400757e:	681b      	ldr	r3, [r3, #0]
24007580:	681a      	ldr	r2, [r3, #0]
24007582:	68fb      	ldr	r3, [r7, #12]
24007584:	681b      	ldr	r3, [r3, #0]
24007586:	f042 0201 	orr.w	r2, r2, #1
2400758a:	601a      	str	r2, [r3, #0]
2400758c:	e00e      	b.n	240075ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
2400758e:	68fb      	ldr	r3, [r7, #12]
24007590:	681b      	ldr	r3, [r3, #0]
24007592:	681a      	ldr	r2, [r3, #0]
24007594:	68fb      	ldr	r3, [r7, #12]
24007596:	681b      	ldr	r3, [r3, #0]
24007598:	f042 0201 	orr.w	r2, r2, #1
2400759c:	601a      	str	r2, [r3, #0]
2400759e:	e005      	b.n	240075ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240075a0:	68fb      	ldr	r3, [r7, #12]
240075a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
240075a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
240075a8:	2301      	movs	r3, #1
240075aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
240075ac:	7dfb      	ldrb	r3, [r7, #23]
}
240075ae:	4618      	mov	r0, r3
240075b0:	3718      	adds	r7, #24
240075b2:	46bd      	mov	sp, r7
240075b4:	bd80      	pop	{r7, pc}
240075b6:	bf00      	nop
240075b8:	40020010 	.word	0x40020010
240075bc:	40020028 	.word	0x40020028
240075c0:	40020040 	.word	0x40020040
240075c4:	40020058 	.word	0x40020058
240075c8:	40020070 	.word	0x40020070
240075cc:	40020088 	.word	0x40020088
240075d0:	400200a0 	.word	0x400200a0
240075d4:	400200b8 	.word	0x400200b8
240075d8:	40020410 	.word	0x40020410
240075dc:	40020428 	.word	0x40020428
240075e0:	40020440 	.word	0x40020440
240075e4:	40020458 	.word	0x40020458
240075e8:	40020470 	.word	0x40020470
240075ec:	40020488 	.word	0x40020488
240075f0:	400204a0 	.word	0x400204a0
240075f4:	400204b8 	.word	0x400204b8
240075f8:	58025408 	.word	0x58025408
240075fc:	5802541c 	.word	0x5802541c
24007600:	58025430 	.word	0x58025430
24007604:	58025444 	.word	0x58025444
24007608:	58025458 	.word	0x58025458
2400760c:	5802546c 	.word	0x5802546c
24007610:	58025480 	.word	0x58025480
24007614:	58025494 	.word	0x58025494

24007618 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
24007618:	b480      	push	{r7}
2400761a:	b085      	sub	sp, #20
2400761c:	af00      	add	r7, sp, #0
2400761e:	60f8      	str	r0, [r7, #12]
24007620:	60b9      	str	r1, [r7, #8]
24007622:	4613      	mov	r3, r2
24007624:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007626:	68fb      	ldr	r3, [r7, #12]
24007628:	681b      	ldr	r3, [r3, #0]
2400762a:	4a39      	ldr	r2, [pc, #228]	; (24007710 <HAL_DMAEx_ChangeMemory+0xf8>)
2400762c:	4293      	cmp	r3, r2
2400762e:	d04a      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007630:	68fb      	ldr	r3, [r7, #12]
24007632:	681b      	ldr	r3, [r3, #0]
24007634:	4a37      	ldr	r2, [pc, #220]	; (24007714 <HAL_DMAEx_ChangeMemory+0xfc>)
24007636:	4293      	cmp	r3, r2
24007638:	d045      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
2400763a:	68fb      	ldr	r3, [r7, #12]
2400763c:	681b      	ldr	r3, [r3, #0]
2400763e:	4a36      	ldr	r2, [pc, #216]	; (24007718 <HAL_DMAEx_ChangeMemory+0x100>)
24007640:	4293      	cmp	r3, r2
24007642:	d040      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007644:	68fb      	ldr	r3, [r7, #12]
24007646:	681b      	ldr	r3, [r3, #0]
24007648:	4a34      	ldr	r2, [pc, #208]	; (2400771c <HAL_DMAEx_ChangeMemory+0x104>)
2400764a:	4293      	cmp	r3, r2
2400764c:	d03b      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
2400764e:	68fb      	ldr	r3, [r7, #12]
24007650:	681b      	ldr	r3, [r3, #0]
24007652:	4a33      	ldr	r2, [pc, #204]	; (24007720 <HAL_DMAEx_ChangeMemory+0x108>)
24007654:	4293      	cmp	r3, r2
24007656:	d036      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007658:	68fb      	ldr	r3, [r7, #12]
2400765a:	681b      	ldr	r3, [r3, #0]
2400765c:	4a31      	ldr	r2, [pc, #196]	; (24007724 <HAL_DMAEx_ChangeMemory+0x10c>)
2400765e:	4293      	cmp	r3, r2
24007660:	d031      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007662:	68fb      	ldr	r3, [r7, #12]
24007664:	681b      	ldr	r3, [r3, #0]
24007666:	4a30      	ldr	r2, [pc, #192]	; (24007728 <HAL_DMAEx_ChangeMemory+0x110>)
24007668:	4293      	cmp	r3, r2
2400766a:	d02c      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
2400766c:	68fb      	ldr	r3, [r7, #12]
2400766e:	681b      	ldr	r3, [r3, #0]
24007670:	4a2e      	ldr	r2, [pc, #184]	; (2400772c <HAL_DMAEx_ChangeMemory+0x114>)
24007672:	4293      	cmp	r3, r2
24007674:	d027      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007676:	68fb      	ldr	r3, [r7, #12]
24007678:	681b      	ldr	r3, [r3, #0]
2400767a:	4a2d      	ldr	r2, [pc, #180]	; (24007730 <HAL_DMAEx_ChangeMemory+0x118>)
2400767c:	4293      	cmp	r3, r2
2400767e:	d022      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007680:	68fb      	ldr	r3, [r7, #12]
24007682:	681b      	ldr	r3, [r3, #0]
24007684:	4a2b      	ldr	r2, [pc, #172]	; (24007734 <HAL_DMAEx_ChangeMemory+0x11c>)
24007686:	4293      	cmp	r3, r2
24007688:	d01d      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
2400768a:	68fb      	ldr	r3, [r7, #12]
2400768c:	681b      	ldr	r3, [r3, #0]
2400768e:	4a2a      	ldr	r2, [pc, #168]	; (24007738 <HAL_DMAEx_ChangeMemory+0x120>)
24007690:	4293      	cmp	r3, r2
24007692:	d018      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
24007694:	68fb      	ldr	r3, [r7, #12]
24007696:	681b      	ldr	r3, [r3, #0]
24007698:	4a28      	ldr	r2, [pc, #160]	; (2400773c <HAL_DMAEx_ChangeMemory+0x124>)
2400769a:	4293      	cmp	r3, r2
2400769c:	d013      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
2400769e:	68fb      	ldr	r3, [r7, #12]
240076a0:	681b      	ldr	r3, [r3, #0]
240076a2:	4a27      	ldr	r2, [pc, #156]	; (24007740 <HAL_DMAEx_ChangeMemory+0x128>)
240076a4:	4293      	cmp	r3, r2
240076a6:	d00e      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
240076a8:	68fb      	ldr	r3, [r7, #12]
240076aa:	681b      	ldr	r3, [r3, #0]
240076ac:	4a25      	ldr	r2, [pc, #148]	; (24007744 <HAL_DMAEx_ChangeMemory+0x12c>)
240076ae:	4293      	cmp	r3, r2
240076b0:	d009      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
240076b2:	68fb      	ldr	r3, [r7, #12]
240076b4:	681b      	ldr	r3, [r3, #0]
240076b6:	4a24      	ldr	r2, [pc, #144]	; (24007748 <HAL_DMAEx_ChangeMemory+0x130>)
240076b8:	4293      	cmp	r3, r2
240076ba:	d004      	beq.n	240076c6 <HAL_DMAEx_ChangeMemory+0xae>
240076bc:	68fb      	ldr	r3, [r7, #12]
240076be:	681b      	ldr	r3, [r3, #0]
240076c0:	4a22      	ldr	r2, [pc, #136]	; (2400774c <HAL_DMAEx_ChangeMemory+0x134>)
240076c2:	4293      	cmp	r3, r2
240076c4:	d101      	bne.n	240076ca <HAL_DMAEx_ChangeMemory+0xb2>
240076c6:	2301      	movs	r3, #1
240076c8:	e000      	b.n	240076cc <HAL_DMAEx_ChangeMemory+0xb4>
240076ca:	2300      	movs	r3, #0
240076cc:	2b00      	cmp	r3, #0
240076ce:	d00c      	beq.n	240076ea <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
240076d0:	79fb      	ldrb	r3, [r7, #7]
240076d2:	2b00      	cmp	r3, #0
240076d4:	d104      	bne.n	240076e0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
240076d6:	68fb      	ldr	r3, [r7, #12]
240076d8:	681b      	ldr	r3, [r3, #0]
240076da:	68ba      	ldr	r2, [r7, #8]
240076dc:	60da      	str	r2, [r3, #12]
240076de:	e010      	b.n	24007702 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
240076e0:	68fb      	ldr	r3, [r7, #12]
240076e2:	681b      	ldr	r3, [r3, #0]
240076e4:	68ba      	ldr	r2, [r7, #8]
240076e6:	611a      	str	r2, [r3, #16]
240076e8:	e00b      	b.n	24007702 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
240076ea:	79fb      	ldrb	r3, [r7, #7]
240076ec:	2b00      	cmp	r3, #0
240076ee:	d104      	bne.n	240076fa <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
240076f0:	68fb      	ldr	r3, [r7, #12]
240076f2:	681b      	ldr	r3, [r3, #0]
240076f4:	68ba      	ldr	r2, [r7, #8]
240076f6:	60da      	str	r2, [r3, #12]
240076f8:	e003      	b.n	24007702 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
240076fa:	68fb      	ldr	r3, [r7, #12]
240076fc:	681b      	ldr	r3, [r3, #0]
240076fe:	68ba      	ldr	r2, [r7, #8]
24007700:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
24007702:	2300      	movs	r3, #0
}
24007704:	4618      	mov	r0, r3
24007706:	3714      	adds	r7, #20
24007708:	46bd      	mov	sp, r7
2400770a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400770e:	4770      	bx	lr
24007710:	40020010 	.word	0x40020010
24007714:	40020028 	.word	0x40020028
24007718:	40020040 	.word	0x40020040
2400771c:	40020058 	.word	0x40020058
24007720:	40020070 	.word	0x40020070
24007724:	40020088 	.word	0x40020088
24007728:	400200a0 	.word	0x400200a0
2400772c:	400200b8 	.word	0x400200b8
24007730:	40020410 	.word	0x40020410
24007734:	40020428 	.word	0x40020428
24007738:	40020440 	.word	0x40020440
2400773c:	40020458 	.word	0x40020458
24007740:	40020470 	.word	0x40020470
24007744:	40020488 	.word	0x40020488
24007748:	400204a0 	.word	0x400204a0
2400774c:	400204b8 	.word	0x400204b8

24007750 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24007750:	b480      	push	{r7}
24007752:	b085      	sub	sp, #20
24007754:	af00      	add	r7, sp, #0
24007756:	6078      	str	r0, [r7, #4]
24007758:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
2400775a:	2300      	movs	r3, #0
2400775c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
2400775e:	2300      	movs	r3, #0
24007760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24007762:	683b      	ldr	r3, [r7, #0]
24007764:	7a1b      	ldrb	r3, [r3, #8]
24007766:	2b01      	cmp	r3, #1
24007768:	d155      	bne.n	24007816 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400776a:	687b      	ldr	r3, [r7, #4]
2400776c:	681b      	ldr	r3, [r3, #0]
2400776e:	4a4b      	ldr	r2, [pc, #300]	; (2400789c <HAL_DMAEx_ConfigMuxSync+0x14c>)
24007770:	4293      	cmp	r3, r2
24007772:	d049      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007774:	687b      	ldr	r3, [r7, #4]
24007776:	681b      	ldr	r3, [r3, #0]
24007778:	4a49      	ldr	r2, [pc, #292]	; (240078a0 <HAL_DMAEx_ConfigMuxSync+0x150>)
2400777a:	4293      	cmp	r3, r2
2400777c:	d044      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400777e:	687b      	ldr	r3, [r7, #4]
24007780:	681b      	ldr	r3, [r3, #0]
24007782:	4a48      	ldr	r2, [pc, #288]	; (240078a4 <HAL_DMAEx_ConfigMuxSync+0x154>)
24007784:	4293      	cmp	r3, r2
24007786:	d03f      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007788:	687b      	ldr	r3, [r7, #4]
2400778a:	681b      	ldr	r3, [r3, #0]
2400778c:	4a46      	ldr	r2, [pc, #280]	; (240078a8 <HAL_DMAEx_ConfigMuxSync+0x158>)
2400778e:	4293      	cmp	r3, r2
24007790:	d03a      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007792:	687b      	ldr	r3, [r7, #4]
24007794:	681b      	ldr	r3, [r3, #0]
24007796:	4a45      	ldr	r2, [pc, #276]	; (240078ac <HAL_DMAEx_ConfigMuxSync+0x15c>)
24007798:	4293      	cmp	r3, r2
2400779a:	d035      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400779c:	687b      	ldr	r3, [r7, #4]
2400779e:	681b      	ldr	r3, [r3, #0]
240077a0:	4a43      	ldr	r2, [pc, #268]	; (240078b0 <HAL_DMAEx_ConfigMuxSync+0x160>)
240077a2:	4293      	cmp	r3, r2
240077a4:	d030      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077a6:	687b      	ldr	r3, [r7, #4]
240077a8:	681b      	ldr	r3, [r3, #0]
240077aa:	4a42      	ldr	r2, [pc, #264]	; (240078b4 <HAL_DMAEx_ConfigMuxSync+0x164>)
240077ac:	4293      	cmp	r3, r2
240077ae:	d02b      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077b0:	687b      	ldr	r3, [r7, #4]
240077b2:	681b      	ldr	r3, [r3, #0]
240077b4:	4a40      	ldr	r2, [pc, #256]	; (240078b8 <HAL_DMAEx_ConfigMuxSync+0x168>)
240077b6:	4293      	cmp	r3, r2
240077b8:	d026      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077ba:	687b      	ldr	r3, [r7, #4]
240077bc:	681b      	ldr	r3, [r3, #0]
240077be:	4a3f      	ldr	r2, [pc, #252]	; (240078bc <HAL_DMAEx_ConfigMuxSync+0x16c>)
240077c0:	4293      	cmp	r3, r2
240077c2:	d021      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077c4:	687b      	ldr	r3, [r7, #4]
240077c6:	681b      	ldr	r3, [r3, #0]
240077c8:	4a3d      	ldr	r2, [pc, #244]	; (240078c0 <HAL_DMAEx_ConfigMuxSync+0x170>)
240077ca:	4293      	cmp	r3, r2
240077cc:	d01c      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077ce:	687b      	ldr	r3, [r7, #4]
240077d0:	681b      	ldr	r3, [r3, #0]
240077d2:	4a3c      	ldr	r2, [pc, #240]	; (240078c4 <HAL_DMAEx_ConfigMuxSync+0x174>)
240077d4:	4293      	cmp	r3, r2
240077d6:	d017      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077d8:	687b      	ldr	r3, [r7, #4]
240077da:	681b      	ldr	r3, [r3, #0]
240077dc:	4a3a      	ldr	r2, [pc, #232]	; (240078c8 <HAL_DMAEx_ConfigMuxSync+0x178>)
240077de:	4293      	cmp	r3, r2
240077e0:	d012      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077e2:	687b      	ldr	r3, [r7, #4]
240077e4:	681b      	ldr	r3, [r3, #0]
240077e6:	4a39      	ldr	r2, [pc, #228]	; (240078cc <HAL_DMAEx_ConfigMuxSync+0x17c>)
240077e8:	4293      	cmp	r3, r2
240077ea:	d00d      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077ec:	687b      	ldr	r3, [r7, #4]
240077ee:	681b      	ldr	r3, [r3, #0]
240077f0:	4a37      	ldr	r2, [pc, #220]	; (240078d0 <HAL_DMAEx_ConfigMuxSync+0x180>)
240077f2:	4293      	cmp	r3, r2
240077f4:	d008      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
240077f6:	687b      	ldr	r3, [r7, #4]
240077f8:	681b      	ldr	r3, [r3, #0]
240077fa:	4a36      	ldr	r2, [pc, #216]	; (240078d4 <HAL_DMAEx_ConfigMuxSync+0x184>)
240077fc:	4293      	cmp	r3, r2
240077fe:	d003      	beq.n	24007808 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007800:	687b      	ldr	r3, [r7, #4]
24007802:	681b      	ldr	r3, [r3, #0]
24007804:	4a34      	ldr	r2, [pc, #208]	; (240078d8 <HAL_DMAEx_ConfigMuxSync+0x188>)
24007806:	4293      	cmp	r3, r2
24007808:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
2400780a:	683b      	ldr	r3, [r7, #0]
2400780c:	681b      	ldr	r3, [r3, #0]
2400780e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
24007810:	683b      	ldr	r3, [r7, #0]
24007812:	685b      	ldr	r3, [r3, #4]
24007814:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24007816:	687b      	ldr	r3, [r7, #4]
24007818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400781c:	b2db      	uxtb	r3, r3
2400781e:	2b01      	cmp	r3, #1
24007820:	d131      	bne.n	24007886 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24007822:	687b      	ldr	r3, [r7, #4]
24007824:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007828:	2b01      	cmp	r3, #1
2400782a:	d101      	bne.n	24007830 <HAL_DMAEx_ConfigMuxSync+0xe0>
2400782c:	2302      	movs	r3, #2
2400782e:	e02f      	b.n	24007890 <HAL_DMAEx_ConfigMuxSync+0x140>
24007830:	687b      	ldr	r3, [r7, #4]
24007832:	2201      	movs	r2, #1
24007834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24007838:	687b      	ldr	r3, [r7, #4]
2400783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400783c:	681a      	ldr	r2, [r3, #0]
2400783e:	687b      	ldr	r3, [r7, #4]
24007840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007842:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24007846:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24007848:	687b      	ldr	r3, [r7, #4]
2400784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400784c:	681b      	ldr	r3, [r3, #0]
2400784e:	b2d9      	uxtb	r1, r3
24007850:	68fb      	ldr	r3, [r7, #12]
24007852:	061a      	lsls	r2, r3, #24
24007854:	683b      	ldr	r3, [r7, #0]
24007856:	68db      	ldr	r3, [r3, #12]
24007858:	3b01      	subs	r3, #1
2400785a:	04db      	lsls	r3, r3, #19
2400785c:	431a      	orrs	r2, r3
2400785e:	68bb      	ldr	r3, [r7, #8]
24007860:	431a      	orrs	r2, r3
24007862:	683b      	ldr	r3, [r7, #0]
24007864:	7a1b      	ldrb	r3, [r3, #8]
24007866:	041b      	lsls	r3, r3, #16
24007868:	431a      	orrs	r2, r3
2400786a:	683b      	ldr	r3, [r7, #0]
2400786c:	7a5b      	ldrb	r3, [r3, #9]
2400786e:	025b      	lsls	r3, r3, #9
24007870:	431a      	orrs	r2, r3
24007872:	687b      	ldr	r3, [r7, #4]
24007874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007876:	430a      	orrs	r2, r1
24007878:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
2400787a:	687b      	ldr	r3, [r7, #4]
2400787c:	2200      	movs	r2, #0
2400787e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
24007882:	2300      	movs	r3, #0
24007884:	e004      	b.n	24007890 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007886:	687b      	ldr	r3, [r7, #4]
24007888:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400788c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
2400788e:	2301      	movs	r3, #1
  }
}
24007890:	4618      	mov	r0, r3
24007892:	3714      	adds	r7, #20
24007894:	46bd      	mov	sp, r7
24007896:	f85d 7b04 	ldr.w	r7, [sp], #4
2400789a:	4770      	bx	lr
2400789c:	40020010 	.word	0x40020010
240078a0:	40020028 	.word	0x40020028
240078a4:	40020040 	.word	0x40020040
240078a8:	40020058 	.word	0x40020058
240078ac:	40020070 	.word	0x40020070
240078b0:	40020088 	.word	0x40020088
240078b4:	400200a0 	.word	0x400200a0
240078b8:	400200b8 	.word	0x400200b8
240078bc:	40020410 	.word	0x40020410
240078c0:	40020428 	.word	0x40020428
240078c4:	40020440 	.word	0x40020440
240078c8:	40020458 	.word	0x40020458
240078cc:	40020470 	.word	0x40020470
240078d0:	40020488 	.word	0x40020488
240078d4:	400204a0 	.word	0x400204a0
240078d8:	400204b8 	.word	0x400204b8

240078dc <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
240078dc:	b480      	push	{r7}
240078de:	b085      	sub	sp, #20
240078e0:	af00      	add	r7, sp, #0
240078e2:	6078      	str	r0, [r7, #4]
240078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
240078e6:	687b      	ldr	r3, [r7, #4]
240078e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240078ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240078ee:	687b      	ldr	r3, [r7, #4]
240078f0:	681b      	ldr	r3, [r3, #0]
240078f2:	4a47      	ldr	r2, [pc, #284]	; (24007a10 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
240078f4:	4293      	cmp	r3, r2
240078f6:	d049      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240078f8:	687b      	ldr	r3, [r7, #4]
240078fa:	681b      	ldr	r3, [r3, #0]
240078fc:	4a45      	ldr	r2, [pc, #276]	; (24007a14 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
240078fe:	4293      	cmp	r3, r2
24007900:	d044      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007902:	687b      	ldr	r3, [r7, #4]
24007904:	681b      	ldr	r3, [r3, #0]
24007906:	4a44      	ldr	r2, [pc, #272]	; (24007a18 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
24007908:	4293      	cmp	r3, r2
2400790a:	d03f      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400790c:	687b      	ldr	r3, [r7, #4]
2400790e:	681b      	ldr	r3, [r3, #0]
24007910:	4a42      	ldr	r2, [pc, #264]	; (24007a1c <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
24007912:	4293      	cmp	r3, r2
24007914:	d03a      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007916:	687b      	ldr	r3, [r7, #4]
24007918:	681b      	ldr	r3, [r3, #0]
2400791a:	4a41      	ldr	r2, [pc, #260]	; (24007a20 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
2400791c:	4293      	cmp	r3, r2
2400791e:	d035      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007920:	687b      	ldr	r3, [r7, #4]
24007922:	681b      	ldr	r3, [r3, #0]
24007924:	4a3f      	ldr	r2, [pc, #252]	; (24007a24 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
24007926:	4293      	cmp	r3, r2
24007928:	d030      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400792a:	687b      	ldr	r3, [r7, #4]
2400792c:	681b      	ldr	r3, [r3, #0]
2400792e:	4a3e      	ldr	r2, [pc, #248]	; (24007a28 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
24007930:	4293      	cmp	r3, r2
24007932:	d02b      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007934:	687b      	ldr	r3, [r7, #4]
24007936:	681b      	ldr	r3, [r3, #0]
24007938:	4a3c      	ldr	r2, [pc, #240]	; (24007a2c <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
2400793a:	4293      	cmp	r3, r2
2400793c:	d026      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400793e:	687b      	ldr	r3, [r7, #4]
24007940:	681b      	ldr	r3, [r3, #0]
24007942:	4a3b      	ldr	r2, [pc, #236]	; (24007a30 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
24007944:	4293      	cmp	r3, r2
24007946:	d021      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007948:	687b      	ldr	r3, [r7, #4]
2400794a:	681b      	ldr	r3, [r3, #0]
2400794c:	4a39      	ldr	r2, [pc, #228]	; (24007a34 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
2400794e:	4293      	cmp	r3, r2
24007950:	d01c      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007952:	687b      	ldr	r3, [r7, #4]
24007954:	681b      	ldr	r3, [r3, #0]
24007956:	4a38      	ldr	r2, [pc, #224]	; (24007a38 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
24007958:	4293      	cmp	r3, r2
2400795a:	d017      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400795c:	687b      	ldr	r3, [r7, #4]
2400795e:	681b      	ldr	r3, [r3, #0]
24007960:	4a36      	ldr	r2, [pc, #216]	; (24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
24007962:	4293      	cmp	r3, r2
24007964:	d012      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007966:	687b      	ldr	r3, [r7, #4]
24007968:	681b      	ldr	r3, [r3, #0]
2400796a:	4a35      	ldr	r2, [pc, #212]	; (24007a40 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
2400796c:	4293      	cmp	r3, r2
2400796e:	d00d      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007970:	687b      	ldr	r3, [r7, #4]
24007972:	681b      	ldr	r3, [r3, #0]
24007974:	4a33      	ldr	r2, [pc, #204]	; (24007a44 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
24007976:	4293      	cmp	r3, r2
24007978:	d008      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400797a:	687b      	ldr	r3, [r7, #4]
2400797c:	681b      	ldr	r3, [r3, #0]
2400797e:	4a32      	ldr	r2, [pc, #200]	; (24007a48 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
24007980:	4293      	cmp	r3, r2
24007982:	d003      	beq.n	2400798c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007984:	687b      	ldr	r3, [r7, #4]
24007986:	681b      	ldr	r3, [r3, #0]
24007988:	4a30      	ldr	r2, [pc, #192]	; (24007a4c <HAL_DMAEx_ConfigMuxRequestGenerator+0x170>)
2400798a:	4293      	cmp	r3, r2
2400798c:	bf00      	nop
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
2400798e:	687b      	ldr	r3, [r7, #4]
24007990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007992:	2b00      	cmp	r3, #0
24007994:	d105      	bne.n	240079a2 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc6>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24007996:	687b      	ldr	r3, [r7, #4]
24007998:	2240      	movs	r2, #64	; 0x40
2400799a:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
2400799c:	2301      	movs	r3, #1
2400799e:	73fb      	strb	r3, [r7, #15]
240079a0:	e02e      	b.n	24007a00 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
240079a2:	687b      	ldr	r3, [r7, #4]
240079a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240079a6:	681b      	ldr	r3, [r3, #0]
240079a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240079ac:	2b00      	cmp	r3, #0
240079ae:	d121      	bne.n	240079f4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
240079b0:	7bbb      	ldrb	r3, [r7, #14]
240079b2:	2b01      	cmp	r3, #1
240079b4:	d11e      	bne.n	240079f4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
240079b6:	687b      	ldr	r3, [r7, #4]
240079b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240079bc:	2b01      	cmp	r3, #1
240079be:	d101      	bne.n	240079c4 <HAL_DMAEx_ConfigMuxRequestGenerator+0xe8>
240079c0:	2302      	movs	r3, #2
240079c2:	e01e      	b.n	24007a02 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
240079c4:	687b      	ldr	r3, [r7, #4]
240079c6:	2201      	movs	r2, #1
240079c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
240079cc:	683b      	ldr	r3, [r7, #0]
240079ce:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
240079d0:	683b      	ldr	r3, [r7, #0]
240079d2:	689b      	ldr	r3, [r3, #8]
240079d4:	3b01      	subs	r3, #1
240079d6:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
240079d8:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
240079dc:	683b      	ldr	r3, [r7, #0]
240079de:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
240079e0:	687b      	ldr	r3, [r7, #4]
240079e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
240079e4:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
240079e6:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
240079e8:	687b      	ldr	r3, [r7, #4]
240079ea:	2200      	movs	r2, #0
240079ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
240079f0:	2300      	movs	r3, #0
240079f2:	e006      	b.n	24007a02 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240079f4:	687b      	ldr	r3, [r7, #4]
240079f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
240079fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
240079fc:	2301      	movs	r3, #1
240079fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
24007a00:	7bfb      	ldrb	r3, [r7, #15]
}
24007a02:	4618      	mov	r0, r3
24007a04:	3714      	adds	r7, #20
24007a06:	46bd      	mov	sp, r7
24007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
24007a0c:	4770      	bx	lr
24007a0e:	bf00      	nop
24007a10:	40020010 	.word	0x40020010
24007a14:	40020028 	.word	0x40020028
24007a18:	40020040 	.word	0x40020040
24007a1c:	40020058 	.word	0x40020058
24007a20:	40020070 	.word	0x40020070
24007a24:	40020088 	.word	0x40020088
24007a28:	400200a0 	.word	0x400200a0
24007a2c:	400200b8 	.word	0x400200b8
24007a30:	40020410 	.word	0x40020410
24007a34:	40020428 	.word	0x40020428
24007a38:	40020440 	.word	0x40020440
24007a3c:	40020458 	.word	0x40020458
24007a40:	40020470 	.word	0x40020470
24007a44:	40020488 	.word	0x40020488
24007a48:	400204a0 	.word	0x400204a0
24007a4c:	400204b8 	.word	0x400204b8

24007a50 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007a50:	b480      	push	{r7}
24007a52:	b083      	sub	sp, #12
24007a54:	af00      	add	r7, sp, #0
24007a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007a58:	687b      	ldr	r3, [r7, #4]
24007a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007a5e:	b2db      	uxtb	r3, r3
24007a60:	2b00      	cmp	r3, #0
24007a62:	d00d      	beq.n	24007a80 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
24007a64:	687b      	ldr	r3, [r7, #4]
24007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a68:	2b00      	cmp	r3, #0
24007a6a:	d009      	beq.n	24007a80 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
24007a6c:	687b      	ldr	r3, [r7, #4]
24007a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a70:	681a      	ldr	r2, [r3, #0]
24007a72:	687b      	ldr	r3, [r7, #4]
24007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007a7a:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007a7c:	2300      	movs	r3, #0
24007a7e:	e000      	b.n	24007a82 <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007a80:	2301      	movs	r3, #1
 }
}
24007a82:	4618      	mov	r0, r3
24007a84:	370c      	adds	r7, #12
24007a86:	46bd      	mov	sp, r7
24007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
24007a8c:	4770      	bx	lr

24007a8e <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007a8e:	b480      	push	{r7}
24007a90:	b083      	sub	sp, #12
24007a92:	af00      	add	r7, sp, #0
24007a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007a96:	687b      	ldr	r3, [r7, #4]
24007a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007a9c:	b2db      	uxtb	r3, r3
24007a9e:	2b00      	cmp	r3, #0
24007aa0:	d00d      	beq.n	24007abe <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
24007aa2:	687b      	ldr	r3, [r7, #4]
24007aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007aa6:	2b00      	cmp	r3, #0
24007aa8:	d009      	beq.n	24007abe <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
24007aaa:	687b      	ldr	r3, [r7, #4]
24007aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007aae:	681a      	ldr	r2, [r3, #0]
24007ab0:	687b      	ldr	r3, [r7, #4]
24007ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007ab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007ab8:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007aba:	2300      	movs	r3, #0
24007abc:	e000      	b.n	24007ac0 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007abe:	2301      	movs	r3, #1
 }
}
24007ac0:	4618      	mov	r0, r3
24007ac2:	370c      	adds	r7, #12
24007ac4:	46bd      	mov	sp, r7
24007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
24007aca:	4770      	bx	lr

24007acc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24007acc:	b580      	push	{r7, lr}
24007ace:	b082      	sub	sp, #8
24007ad0:	af00      	add	r7, sp, #0
24007ad2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007ad4:	687b      	ldr	r3, [r7, #4]
24007ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007ad8:	681a      	ldr	r2, [r3, #0]
24007ada:	687b      	ldr	r3, [r7, #4]
24007adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24007ade:	4013      	ands	r3, r2
24007ae0:	2b00      	cmp	r3, #0
24007ae2:	d01a      	beq.n	24007b1a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24007ae4:	687b      	ldr	r3, [r7, #4]
24007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007ae8:	681a      	ldr	r2, [r3, #0]
24007aea:	687b      	ldr	r3, [r7, #4]
24007aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007af4:	687b      	ldr	r3, [r7, #4]
24007af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007af8:	687a      	ldr	r2, [r7, #4]
24007afa:	6e92      	ldr	r2, [r2, #104]	; 0x68
24007afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007afe:	687b      	ldr	r3, [r7, #4]
24007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007b02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24007b06:	687b      	ldr	r3, [r7, #4]
24007b08:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24007b0a:	687b      	ldr	r3, [r7, #4]
24007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007b0e:	2b00      	cmp	r3, #0
24007b10:	d003      	beq.n	24007b1a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24007b12:	687b      	ldr	r3, [r7, #4]
24007b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007b16:	6878      	ldr	r0, [r7, #4]
24007b18:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24007b1a:	687b      	ldr	r3, [r7, #4]
24007b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b1e:	2b00      	cmp	r3, #0
24007b20:	d022      	beq.n	24007b68 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24007b22:	687b      	ldr	r3, [r7, #4]
24007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007b26:	681a      	ldr	r2, [r3, #0]
24007b28:	687b      	ldr	r3, [r7, #4]
24007b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24007b2c:	4013      	ands	r3, r2
24007b2e:	2b00      	cmp	r3, #0
24007b30:	d01a      	beq.n	24007b68 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007b32:	687b      	ldr	r3, [r7, #4]
24007b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b36:	681a      	ldr	r2, [r3, #0]
24007b38:	687b      	ldr	r3, [r7, #4]
24007b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007b40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007b42:	687b      	ldr	r3, [r7, #4]
24007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007b46:	687a      	ldr	r2, [r7, #4]
24007b48:	6f52      	ldr	r2, [r2, #116]	; 0x74
24007b4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007b4c:	687b      	ldr	r3, [r7, #4]
24007b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007b50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24007b54:	687b      	ldr	r3, [r7, #4]
24007b56:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24007b58:	687b      	ldr	r3, [r7, #4]
24007b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007b5c:	2b00      	cmp	r3, #0
24007b5e:	d003      	beq.n	24007b68 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007b60:	687b      	ldr	r3, [r7, #4]
24007b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007b64:	6878      	ldr	r0, [r7, #4]
24007b66:	4798      	blx	r3
      }
    }
  }
}
24007b68:	bf00      	nop
24007b6a:	3708      	adds	r7, #8
24007b6c:	46bd      	mov	sp, r7
24007b6e:	bd80      	pop	{r7, pc}

24007b70 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24007b70:	b480      	push	{r7}
24007b72:	b085      	sub	sp, #20
24007b74:	af00      	add	r7, sp, #0
24007b76:	60f8      	str	r0, [r7, #12]
24007b78:	60b9      	str	r1, [r7, #8]
24007b7a:	607a      	str	r2, [r7, #4]
24007b7c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007b7e:	68fb      	ldr	r3, [r7, #12]
24007b80:	681b      	ldr	r3, [r3, #0]
24007b82:	4a46      	ldr	r2, [pc, #280]	; (24007c9c <DMA_MultiBufferSetConfig+0x12c>)
24007b84:	4293      	cmp	r3, r2
24007b86:	d04a      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007b88:	68fb      	ldr	r3, [r7, #12]
24007b8a:	681b      	ldr	r3, [r3, #0]
24007b8c:	4a44      	ldr	r2, [pc, #272]	; (24007ca0 <DMA_MultiBufferSetConfig+0x130>)
24007b8e:	4293      	cmp	r3, r2
24007b90:	d045      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007b92:	68fb      	ldr	r3, [r7, #12]
24007b94:	681b      	ldr	r3, [r3, #0]
24007b96:	4a43      	ldr	r2, [pc, #268]	; (24007ca4 <DMA_MultiBufferSetConfig+0x134>)
24007b98:	4293      	cmp	r3, r2
24007b9a:	d040      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007b9c:	68fb      	ldr	r3, [r7, #12]
24007b9e:	681b      	ldr	r3, [r3, #0]
24007ba0:	4a41      	ldr	r2, [pc, #260]	; (24007ca8 <DMA_MultiBufferSetConfig+0x138>)
24007ba2:	4293      	cmp	r3, r2
24007ba4:	d03b      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007ba6:	68fb      	ldr	r3, [r7, #12]
24007ba8:	681b      	ldr	r3, [r3, #0]
24007baa:	4a40      	ldr	r2, [pc, #256]	; (24007cac <DMA_MultiBufferSetConfig+0x13c>)
24007bac:	4293      	cmp	r3, r2
24007bae:	d036      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bb0:	68fb      	ldr	r3, [r7, #12]
24007bb2:	681b      	ldr	r3, [r3, #0]
24007bb4:	4a3e      	ldr	r2, [pc, #248]	; (24007cb0 <DMA_MultiBufferSetConfig+0x140>)
24007bb6:	4293      	cmp	r3, r2
24007bb8:	d031      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bba:	68fb      	ldr	r3, [r7, #12]
24007bbc:	681b      	ldr	r3, [r3, #0]
24007bbe:	4a3d      	ldr	r2, [pc, #244]	; (24007cb4 <DMA_MultiBufferSetConfig+0x144>)
24007bc0:	4293      	cmp	r3, r2
24007bc2:	d02c      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bc4:	68fb      	ldr	r3, [r7, #12]
24007bc6:	681b      	ldr	r3, [r3, #0]
24007bc8:	4a3b      	ldr	r2, [pc, #236]	; (24007cb8 <DMA_MultiBufferSetConfig+0x148>)
24007bca:	4293      	cmp	r3, r2
24007bcc:	d027      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bce:	68fb      	ldr	r3, [r7, #12]
24007bd0:	681b      	ldr	r3, [r3, #0]
24007bd2:	4a3a      	ldr	r2, [pc, #232]	; (24007cbc <DMA_MultiBufferSetConfig+0x14c>)
24007bd4:	4293      	cmp	r3, r2
24007bd6:	d022      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bd8:	68fb      	ldr	r3, [r7, #12]
24007bda:	681b      	ldr	r3, [r3, #0]
24007bdc:	4a38      	ldr	r2, [pc, #224]	; (24007cc0 <DMA_MultiBufferSetConfig+0x150>)
24007bde:	4293      	cmp	r3, r2
24007be0:	d01d      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007be2:	68fb      	ldr	r3, [r7, #12]
24007be4:	681b      	ldr	r3, [r3, #0]
24007be6:	4a37      	ldr	r2, [pc, #220]	; (24007cc4 <DMA_MultiBufferSetConfig+0x154>)
24007be8:	4293      	cmp	r3, r2
24007bea:	d018      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bec:	68fb      	ldr	r3, [r7, #12]
24007bee:	681b      	ldr	r3, [r3, #0]
24007bf0:	4a35      	ldr	r2, [pc, #212]	; (24007cc8 <DMA_MultiBufferSetConfig+0x158>)
24007bf2:	4293      	cmp	r3, r2
24007bf4:	d013      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007bf6:	68fb      	ldr	r3, [r7, #12]
24007bf8:	681b      	ldr	r3, [r3, #0]
24007bfa:	4a34      	ldr	r2, [pc, #208]	; (24007ccc <DMA_MultiBufferSetConfig+0x15c>)
24007bfc:	4293      	cmp	r3, r2
24007bfe:	d00e      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007c00:	68fb      	ldr	r3, [r7, #12]
24007c02:	681b      	ldr	r3, [r3, #0]
24007c04:	4a32      	ldr	r2, [pc, #200]	; (24007cd0 <DMA_MultiBufferSetConfig+0x160>)
24007c06:	4293      	cmp	r3, r2
24007c08:	d009      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007c0a:	68fb      	ldr	r3, [r7, #12]
24007c0c:	681b      	ldr	r3, [r3, #0]
24007c0e:	4a31      	ldr	r2, [pc, #196]	; (24007cd4 <DMA_MultiBufferSetConfig+0x164>)
24007c10:	4293      	cmp	r3, r2
24007c12:	d004      	beq.n	24007c1e <DMA_MultiBufferSetConfig+0xae>
24007c14:	68fb      	ldr	r3, [r7, #12]
24007c16:	681b      	ldr	r3, [r3, #0]
24007c18:	4a2f      	ldr	r2, [pc, #188]	; (24007cd8 <DMA_MultiBufferSetConfig+0x168>)
24007c1a:	4293      	cmp	r3, r2
24007c1c:	d101      	bne.n	24007c22 <DMA_MultiBufferSetConfig+0xb2>
24007c1e:	2301      	movs	r3, #1
24007c20:	e000      	b.n	24007c24 <DMA_MultiBufferSetConfig+0xb4>
24007c22:	2300      	movs	r3, #0
24007c24:	2b00      	cmp	r3, #0
24007c26:	d019      	beq.n	24007c5c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
24007c28:	68fb      	ldr	r3, [r7, #12]
24007c2a:	681b      	ldr	r3, [r3, #0]
24007c2c:	683a      	ldr	r2, [r7, #0]
24007c2e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007c30:	68fb      	ldr	r3, [r7, #12]
24007c32:	689b      	ldr	r3, [r3, #8]
24007c34:	2b40      	cmp	r3, #64	; 0x40
24007c36:	d108      	bne.n	24007c4a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
24007c38:	68fb      	ldr	r3, [r7, #12]
24007c3a:	681b      	ldr	r3, [r3, #0]
24007c3c:	687a      	ldr	r2, [r7, #4]
24007c3e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
24007c40:	68fb      	ldr	r3, [r7, #12]
24007c42:	681b      	ldr	r3, [r3, #0]
24007c44:	68ba      	ldr	r2, [r7, #8]
24007c46:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
24007c48:	e021      	b.n	24007c8e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
24007c4a:	68fb      	ldr	r3, [r7, #12]
24007c4c:	681b      	ldr	r3, [r3, #0]
24007c4e:	68ba      	ldr	r2, [r7, #8]
24007c50:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
24007c52:	68fb      	ldr	r3, [r7, #12]
24007c54:	681b      	ldr	r3, [r3, #0]
24007c56:	687a      	ldr	r2, [r7, #4]
24007c58:	60da      	str	r2, [r3, #12]
}
24007c5a:	e018      	b.n	24007c8e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
24007c5c:	68fb      	ldr	r3, [r7, #12]
24007c5e:	681b      	ldr	r3, [r3, #0]
24007c60:	683a      	ldr	r2, [r7, #0]
24007c62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007c64:	68fb      	ldr	r3, [r7, #12]
24007c66:	689b      	ldr	r3, [r3, #8]
24007c68:	2b40      	cmp	r3, #64	; 0x40
24007c6a:	d108      	bne.n	24007c7e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
24007c6c:	68fb      	ldr	r3, [r7, #12]
24007c6e:	681b      	ldr	r3, [r3, #0]
24007c70:	687a      	ldr	r2, [r7, #4]
24007c72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
24007c74:	68fb      	ldr	r3, [r7, #12]
24007c76:	681b      	ldr	r3, [r3, #0]
24007c78:	68ba      	ldr	r2, [r7, #8]
24007c7a:	60da      	str	r2, [r3, #12]
}
24007c7c:	e007      	b.n	24007c8e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
24007c7e:	68fb      	ldr	r3, [r7, #12]
24007c80:	681b      	ldr	r3, [r3, #0]
24007c82:	68ba      	ldr	r2, [r7, #8]
24007c84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
24007c86:	68fb      	ldr	r3, [r7, #12]
24007c88:	681b      	ldr	r3, [r3, #0]
24007c8a:	687a      	ldr	r2, [r7, #4]
24007c8c:	60da      	str	r2, [r3, #12]
}
24007c8e:	bf00      	nop
24007c90:	3714      	adds	r7, #20
24007c92:	46bd      	mov	sp, r7
24007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
24007c98:	4770      	bx	lr
24007c9a:	bf00      	nop
24007c9c:	40020010 	.word	0x40020010
24007ca0:	40020028 	.word	0x40020028
24007ca4:	40020040 	.word	0x40020040
24007ca8:	40020058 	.word	0x40020058
24007cac:	40020070 	.word	0x40020070
24007cb0:	40020088 	.word	0x40020088
24007cb4:	400200a0 	.word	0x400200a0
24007cb8:	400200b8 	.word	0x400200b8
24007cbc:	40020410 	.word	0x40020410
24007cc0:	40020428 	.word	0x40020428
24007cc4:	40020440 	.word	0x40020440
24007cc8:	40020458 	.word	0x40020458
24007ccc:	40020470 	.word	0x40020470
24007cd0:	40020488 	.word	0x40020488
24007cd4:	400204a0 	.word	0x400204a0
24007cd8:	400204b8 	.word	0x400204b8

24007cdc <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24007cdc:	b480      	push	{r7}
24007cde:	b089      	sub	sp, #36	; 0x24
24007ce0:	af00      	add	r7, sp, #0
24007ce2:	6078      	str	r0, [r7, #4]
24007ce4:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24007ce6:	687b      	ldr	r3, [r7, #4]
24007ce8:	2b00      	cmp	r3, #0
24007cea:	d002      	beq.n	24007cf2 <HAL_EXTI_SetConfigLine+0x16>
24007cec:	683b      	ldr	r3, [r7, #0]
24007cee:	2b00      	cmp	r3, #0
24007cf0:	d101      	bne.n	24007cf6 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
24007cf2:	2301      	movs	r3, #1
24007cf4:	e109      	b.n	24007f0a <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
24007cf6:	683b      	ldr	r3, [r7, #0]
24007cf8:	681a      	ldr	r2, [r3, #0]
24007cfa:	687b      	ldr	r3, [r7, #4]
24007cfc:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24007cfe:	683b      	ldr	r3, [r7, #0]
24007d00:	681b      	ldr	r3, [r3, #0]
24007d02:	0c1b      	lsrs	r3, r3, #16
24007d04:	f003 0303 	and.w	r3, r3, #3
24007d08:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24007d0a:	683b      	ldr	r3, [r7, #0]
24007d0c:	681b      	ldr	r3, [r3, #0]
24007d0e:	f003 031f 	and.w	r3, r3, #31
24007d12:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
24007d14:	2201      	movs	r2, #1
24007d16:	68fb      	ldr	r3, [r7, #12]
24007d18:	fa02 f303 	lsl.w	r3, r2, r3
24007d1c:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24007d1e:	683b      	ldr	r3, [r7, #0]
24007d20:	681b      	ldr	r3, [r3, #0]
24007d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007d26:	2b00      	cmp	r3, #0
24007d28:	d064      	beq.n	24007df4 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007d2a:	693b      	ldr	r3, [r7, #16]
24007d2c:	015b      	lsls	r3, r3, #5
24007d2e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24007d32:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007d34:	69fb      	ldr	r3, [r7, #28]
24007d36:	681b      	ldr	r3, [r3, #0]
24007d38:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
24007d3a:	683b      	ldr	r3, [r7, #0]
24007d3c:	689b      	ldr	r3, [r3, #8]
24007d3e:	f003 0301 	and.w	r3, r3, #1
24007d42:	2b00      	cmp	r3, #0
24007d44:	d004      	beq.n	24007d50 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
24007d46:	69ba      	ldr	r2, [r7, #24]
24007d48:	68bb      	ldr	r3, [r7, #8]
24007d4a:	4313      	orrs	r3, r2
24007d4c:	61bb      	str	r3, [r7, #24]
24007d4e:	e004      	b.n	24007d5a <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
24007d50:	68bb      	ldr	r3, [r7, #8]
24007d52:	43db      	mvns	r3, r3
24007d54:	69ba      	ldr	r2, [r7, #24]
24007d56:	4013      	ands	r3, r2
24007d58:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
24007d5a:	69fb      	ldr	r3, [r7, #28]
24007d5c:	69ba      	ldr	r2, [r7, #24]
24007d5e:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007d60:	693b      	ldr	r3, [r7, #16]
24007d62:	015a      	lsls	r2, r3, #5
24007d64:	4b6c      	ldr	r3, [pc, #432]	; (24007f18 <HAL_EXTI_SetConfigLine+0x23c>)
24007d66:	4413      	add	r3, r2
24007d68:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007d6a:	69fb      	ldr	r3, [r7, #28]
24007d6c:	681b      	ldr	r3, [r3, #0]
24007d6e:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
24007d70:	683b      	ldr	r3, [r7, #0]
24007d72:	689b      	ldr	r3, [r3, #8]
24007d74:	f003 0302 	and.w	r3, r3, #2
24007d78:	2b00      	cmp	r3, #0
24007d7a:	d004      	beq.n	24007d86 <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
24007d7c:	69ba      	ldr	r2, [r7, #24]
24007d7e:	68bb      	ldr	r3, [r7, #8]
24007d80:	4313      	orrs	r3, r2
24007d82:	61bb      	str	r3, [r7, #24]
24007d84:	e004      	b.n	24007d90 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
24007d86:	68bb      	ldr	r3, [r7, #8]
24007d88:	43db      	mvns	r3, r3
24007d8a:	69ba      	ldr	r2, [r7, #24]
24007d8c:	4013      	ands	r3, r2
24007d8e:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
24007d90:	69fb      	ldr	r3, [r7, #28]
24007d92:	69ba      	ldr	r2, [r7, #24]
24007d94:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24007d96:	683b      	ldr	r3, [r7, #0]
24007d98:	681b      	ldr	r3, [r3, #0]
24007d9a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24007d9e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24007da2:	d127      	bne.n	24007df4 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24007da4:	4a5d      	ldr	r2, [pc, #372]	; (24007f1c <HAL_EXTI_SetConfigLine+0x240>)
24007da6:	68fb      	ldr	r3, [r7, #12]
24007da8:	089b      	lsrs	r3, r3, #2
24007daa:	f003 0303 	and.w	r3, r3, #3
24007dae:	3302      	adds	r3, #2
24007db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24007db4:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007db6:	68fb      	ldr	r3, [r7, #12]
24007db8:	f003 0303 	and.w	r3, r3, #3
24007dbc:	009b      	lsls	r3, r3, #2
24007dbe:	220f      	movs	r2, #15
24007dc0:	fa02 f303 	lsl.w	r3, r2, r3
24007dc4:	43db      	mvns	r3, r3
24007dc6:	69ba      	ldr	r2, [r7, #24]
24007dc8:	4013      	ands	r3, r2
24007dca:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007dcc:	683b      	ldr	r3, [r7, #0]
24007dce:	68da      	ldr	r2, [r3, #12]
24007dd0:	68fb      	ldr	r3, [r7, #12]
24007dd2:	f003 0303 	and.w	r3, r3, #3
24007dd6:	009b      	lsls	r3, r3, #2
24007dd8:	fa02 f303 	lsl.w	r3, r2, r3
24007ddc:	69ba      	ldr	r2, [r7, #24]
24007dde:	4313      	orrs	r3, r2
24007de0:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24007de2:	494e      	ldr	r1, [pc, #312]	; (24007f1c <HAL_EXTI_SetConfigLine+0x240>)
24007de4:	68fb      	ldr	r3, [r7, #12]
24007de6:	089b      	lsrs	r3, r3, #2
24007de8:	f003 0303 	and.w	r3, r3, #3
24007dec:	3302      	adds	r3, #2
24007dee:	69ba      	ldr	r2, [r7, #24]
24007df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24007df4:	693b      	ldr	r3, [r7, #16]
24007df6:	011a      	lsls	r2, r3, #4
24007df8:	4b49      	ldr	r3, [pc, #292]	; (24007f20 <HAL_EXTI_SetConfigLine+0x244>)
24007dfa:	4413      	add	r3, r2
24007dfc:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007dfe:	69fb      	ldr	r3, [r7, #28]
24007e00:	681b      	ldr	r3, [r3, #0]
24007e02:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
24007e04:	683b      	ldr	r3, [r7, #0]
24007e06:	685b      	ldr	r3, [r3, #4]
24007e08:	f003 0301 	and.w	r3, r3, #1
24007e0c:	2b00      	cmp	r3, #0
24007e0e:	d004      	beq.n	24007e1a <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
24007e10:	69ba      	ldr	r2, [r7, #24]
24007e12:	68bb      	ldr	r3, [r7, #8]
24007e14:	4313      	orrs	r3, r2
24007e16:	61bb      	str	r3, [r7, #24]
24007e18:	e004      	b.n	24007e24 <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
24007e1a:	68bb      	ldr	r3, [r7, #8]
24007e1c:	43db      	mvns	r3, r3
24007e1e:	69ba      	ldr	r2, [r7, #24]
24007e20:	4013      	ands	r3, r2
24007e22:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
24007e24:	69fb      	ldr	r3, [r7, #28]
24007e26:	69ba      	ldr	r2, [r7, #24]
24007e28:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24007e2a:	693b      	ldr	r3, [r7, #16]
24007e2c:	011a      	lsls	r2, r3, #4
24007e2e:	4b3d      	ldr	r3, [pc, #244]	; (24007f24 <HAL_EXTI_SetConfigLine+0x248>)
24007e30:	4413      	add	r3, r2
24007e32:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007e34:	69fb      	ldr	r3, [r7, #28]
24007e36:	681b      	ldr	r3, [r3, #0]
24007e38:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
24007e3a:	683b      	ldr	r3, [r7, #0]
24007e3c:	685b      	ldr	r3, [r3, #4]
24007e3e:	f003 0302 	and.w	r3, r3, #2
24007e42:	2b00      	cmp	r3, #0
24007e44:	d004      	beq.n	24007e50 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
24007e46:	69ba      	ldr	r2, [r7, #24]
24007e48:	68bb      	ldr	r3, [r7, #8]
24007e4a:	4313      	orrs	r3, r2
24007e4c:	61bb      	str	r3, [r7, #24]
24007e4e:	e004      	b.n	24007e5a <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
24007e50:	68bb      	ldr	r3, [r7, #8]
24007e52:	43db      	mvns	r3, r3
24007e54:	69ba      	ldr	r2, [r7, #24]
24007e56:	4013      	ands	r3, r2
24007e58:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
24007e5a:	69fb      	ldr	r3, [r7, #28]
24007e5c:	69ba      	ldr	r2, [r7, #24]
24007e5e:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24007e60:	683b      	ldr	r3, [r7, #0]
24007e62:	681b      	ldr	r3, [r3, #0]
24007e64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24007e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24007e6c:	d14c      	bne.n	24007f08 <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24007e6e:	693b      	ldr	r3, [r7, #16]
24007e70:	015a      	lsls	r2, r3, #5
24007e72:	4b2d      	ldr	r3, [pc, #180]	; (24007f28 <HAL_EXTI_SetConfigLine+0x24c>)
24007e74:	4413      	add	r3, r2
24007e76:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007e78:	69fb      	ldr	r3, [r7, #28]
24007e7a:	681b      	ldr	r3, [r3, #0]
24007e7c:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
24007e7e:	683b      	ldr	r3, [r7, #0]
24007e80:	691b      	ldr	r3, [r3, #16]
24007e82:	2b00      	cmp	r3, #0
24007e84:	d108      	bne.n	24007e98 <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
24007e86:	68bb      	ldr	r3, [r7, #8]
24007e88:	43db      	mvns	r3, r3
24007e8a:	69ba      	ldr	r2, [r7, #24]
24007e8c:	4013      	ands	r3, r2
24007e8e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007e90:	69fb      	ldr	r3, [r7, #28]
24007e92:	69ba      	ldr	r2, [r7, #24]
24007e94:	601a      	str	r2, [r3, #0]
24007e96:	e037      	b.n	24007f08 <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
24007e98:	69ba      	ldr	r2, [r7, #24]
24007e9a:	68bb      	ldr	r3, [r7, #8]
24007e9c:	4313      	orrs	r3, r2
24007e9e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007ea0:	69fb      	ldr	r3, [r7, #28]
24007ea2:	69ba      	ldr	r2, [r7, #24]
24007ea4:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
24007ea6:	68fb      	ldr	r3, [r7, #12]
24007ea8:	2b0f      	cmp	r3, #15
24007eaa:	d80a      	bhi.n	24007ec2 <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24007eac:	693b      	ldr	r3, [r7, #16]
24007eae:	015a      	lsls	r2, r3, #5
24007eb0:	4b1e      	ldr	r3, [pc, #120]	; (24007f2c <HAL_EXTI_SetConfigLine+0x250>)
24007eb2:	4413      	add	r3, r2
24007eb4:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24007eb6:	2201      	movs	r2, #1
24007eb8:	68fb      	ldr	r3, [r7, #12]
24007eba:	fa02 f303 	lsl.w	r3, r2, r3
24007ebe:	617b      	str	r3, [r7, #20]
24007ec0:	e00a      	b.n	24007ed8 <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24007ec2:	693b      	ldr	r3, [r7, #16]
24007ec4:	015a      	lsls	r2, r3, #5
24007ec6:	4b1a      	ldr	r3, [pc, #104]	; (24007f30 <HAL_EXTI_SetConfigLine+0x254>)
24007ec8:	4413      	add	r3, r2
24007eca:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24007ecc:	68fb      	ldr	r3, [r7, #12]
24007ece:	3b10      	subs	r3, #16
24007ed0:	2201      	movs	r2, #1
24007ed2:	fa02 f303 	lsl.w	r3, r2, r3
24007ed6:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
24007ed8:	69fb      	ldr	r3, [r7, #28]
24007eda:	6819      	ldr	r1, [r3, #0]
24007edc:	697b      	ldr	r3, [r7, #20]
24007ede:	fb03 f203 	mul.w	r2, r3, r3
24007ee2:	4613      	mov	r3, r2
24007ee4:	005b      	lsls	r3, r3, #1
24007ee6:	4413      	add	r3, r2
24007ee8:	43db      	mvns	r3, r3
24007eea:	ea01 0203 	and.w	r2, r1, r3
24007eee:	697b      	ldr	r3, [r7, #20]
24007ef0:	fb03 f303 	mul.w	r3, r3, r3
24007ef4:	6839      	ldr	r1, [r7, #0]
24007ef6:	6909      	ldr	r1, [r1, #16]
24007ef8:	3901      	subs	r1, #1
24007efa:	fb01 f303 	mul.w	r3, r1, r3
24007efe:	4313      	orrs	r3, r2
24007f00:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
24007f02:	69fb      	ldr	r3, [r7, #28]
24007f04:	69ba      	ldr	r2, [r7, #24]
24007f06:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
24007f08:	2300      	movs	r3, #0
}
24007f0a:	4618      	mov	r0, r3
24007f0c:	3724      	adds	r7, #36	; 0x24
24007f0e:	46bd      	mov	sp, r7
24007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
24007f14:	4770      	bx	lr
24007f16:	bf00      	nop
24007f18:	58000004 	.word	0x58000004
24007f1c:	58000400 	.word	0x58000400
24007f20:	58000080 	.word	0x58000080
24007f24:	58000084 	.word	0x58000084
24007f28:	5800000c 	.word	0x5800000c
24007f2c:	58000010 	.word	0x58000010
24007f30:	58000014 	.word	0x58000014

24007f34 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24007f34:	b480      	push	{r7}
24007f36:	b089      	sub	sp, #36	; 0x24
24007f38:	af00      	add	r7, sp, #0
24007f3a:	6078      	str	r0, [r7, #4]
24007f3c:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24007f3e:	687b      	ldr	r3, [r7, #4]
24007f40:	2b00      	cmp	r3, #0
24007f42:	d002      	beq.n	24007f4a <HAL_EXTI_GetConfigLine+0x16>
24007f44:	683b      	ldr	r3, [r7, #0]
24007f46:	2b00      	cmp	r3, #0
24007f48:	d101      	bne.n	24007f4e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
24007f4a:	2301      	movs	r3, #1
24007f4c:	e0c4      	b.n	240080d8 <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
24007f4e:	687b      	ldr	r3, [r7, #4]
24007f50:	681a      	ldr	r2, [r3, #0]
24007f52:	683b      	ldr	r3, [r7, #0]
24007f54:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24007f56:	683b      	ldr	r3, [r7, #0]
24007f58:	681b      	ldr	r3, [r3, #0]
24007f5a:	0c1b      	lsrs	r3, r3, #16
24007f5c:	f003 0303 	and.w	r3, r3, #3
24007f60:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24007f62:	683b      	ldr	r3, [r7, #0]
24007f64:	681b      	ldr	r3, [r3, #0]
24007f66:	f003 031f 	and.w	r3, r3, #31
24007f6a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24007f6c:	2201      	movs	r2, #1
24007f6e:	693b      	ldr	r3, [r7, #16]
24007f70:	fa02 f303 	lsl.w	r3, r2, r3
24007f74:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24007f76:	697b      	ldr	r3, [r7, #20]
24007f78:	011a      	lsls	r2, r3, #4
24007f7a:	4b5a      	ldr	r3, [pc, #360]	; (240080e4 <HAL_EXTI_GetConfigLine+0x1b0>)
24007f7c:	4413      	add	r3, r2
24007f7e:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007f80:	69fb      	ldr	r3, [r7, #28]
24007f82:	681b      	ldr	r3, [r3, #0]
24007f84:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
24007f86:	683b      	ldr	r3, [r7, #0]
24007f88:	2200      	movs	r2, #0
24007f8a:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24007f8c:	68ba      	ldr	r2, [r7, #8]
24007f8e:	68fb      	ldr	r3, [r7, #12]
24007f90:	4013      	ands	r3, r2
24007f92:	2b00      	cmp	r3, #0
24007f94:	d002      	beq.n	24007f9c <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
24007f96:	683b      	ldr	r3, [r7, #0]
24007f98:	2201      	movs	r2, #1
24007f9a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24007f9c:	697b      	ldr	r3, [r7, #20]
24007f9e:	011a      	lsls	r2, r3, #4
24007fa0:	4b51      	ldr	r3, [pc, #324]	; (240080e8 <HAL_EXTI_GetConfigLine+0x1b4>)
24007fa2:	4413      	add	r3, r2
24007fa4:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007fa6:	69fb      	ldr	r3, [r7, #28]
24007fa8:	681b      	ldr	r3, [r3, #0]
24007faa:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24007fac:	68ba      	ldr	r2, [r7, #8]
24007fae:	68fb      	ldr	r3, [r7, #12]
24007fb0:	4013      	ands	r3, r2
24007fb2:	2b00      	cmp	r3, #0
24007fb4:	d005      	beq.n	24007fc2 <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
24007fb6:	683b      	ldr	r3, [r7, #0]
24007fb8:	685b      	ldr	r3, [r3, #4]
24007fba:	f043 0202 	orr.w	r2, r3, #2
24007fbe:	683b      	ldr	r3, [r7, #0]
24007fc0:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
24007fc2:	683b      	ldr	r3, [r7, #0]
24007fc4:	2200      	movs	r2, #0
24007fc6:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
24007fc8:	683b      	ldr	r3, [r7, #0]
24007fca:	2200      	movs	r2, #0
24007fcc:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24007fce:	683b      	ldr	r3, [r7, #0]
24007fd0:	681b      	ldr	r3, [r3, #0]
24007fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007fd6:	2b00      	cmp	r3, #0
24007fd8:	d03d      	beq.n	24008056 <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007fda:	697b      	ldr	r3, [r7, #20]
24007fdc:	015b      	lsls	r3, r3, #5
24007fde:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24007fe2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007fe4:	69fb      	ldr	r3, [r7, #28]
24007fe6:	681b      	ldr	r3, [r3, #0]
24007fe8:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
24007fea:	68ba      	ldr	r2, [r7, #8]
24007fec:	68fb      	ldr	r3, [r7, #12]
24007fee:	4013      	ands	r3, r2
24007ff0:	2b00      	cmp	r3, #0
24007ff2:	d002      	beq.n	24007ffa <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
24007ff4:	683b      	ldr	r3, [r7, #0]
24007ff6:	2201      	movs	r2, #1
24007ff8:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007ffa:	697b      	ldr	r3, [r7, #20]
24007ffc:	015a      	lsls	r2, r3, #5
24007ffe:	4b3b      	ldr	r3, [pc, #236]	; (240080ec <HAL_EXTI_GetConfigLine+0x1b8>)
24008000:	4413      	add	r3, r2
24008002:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008004:	69fb      	ldr	r3, [r7, #28]
24008006:	681b      	ldr	r3, [r3, #0]
24008008:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
2400800a:	68ba      	ldr	r2, [r7, #8]
2400800c:	68fb      	ldr	r3, [r7, #12]
2400800e:	4013      	ands	r3, r2
24008010:	2b00      	cmp	r3, #0
24008012:	d005      	beq.n	24008020 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
24008014:	683b      	ldr	r3, [r7, #0]
24008016:	689b      	ldr	r3, [r3, #8]
24008018:	f043 0202 	orr.w	r2, r3, #2
2400801c:	683b      	ldr	r3, [r7, #0]
2400801e:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24008020:	683b      	ldr	r3, [r7, #0]
24008022:	681b      	ldr	r3, [r3, #0]
24008024:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24008028:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2400802c:	d113      	bne.n	24008056 <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
2400802e:	4a30      	ldr	r2, [pc, #192]	; (240080f0 <HAL_EXTI_GetConfigLine+0x1bc>)
24008030:	693b      	ldr	r3, [r7, #16]
24008032:	089b      	lsrs	r3, r3, #2
24008034:	f003 0303 	and.w	r3, r3, #3
24008038:	3302      	adds	r3, #2
2400803a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400803e:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3UL - (linepos & 0x03UL)))) >> 24U);
24008040:	693b      	ldr	r3, [r7, #16]
24008042:	43db      	mvns	r3, r3
24008044:	f003 0303 	and.w	r3, r3, #3
24008048:	009b      	lsls	r3, r3, #2
2400804a:	68ba      	ldr	r2, [r7, #8]
2400804c:	fa02 f303 	lsl.w	r3, r2, r3
24008050:	0e1a      	lsrs	r2, r3, #24
24008052:	683b      	ldr	r3, [r7, #0]
24008054:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
24008056:	683b      	ldr	r3, [r7, #0]
24008058:	2200      	movs	r2, #0
2400805a:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
2400805c:	683b      	ldr	r3, [r7, #0]
2400805e:	681b      	ldr	r3, [r3, #0]
24008060:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24008064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008068:	d135      	bne.n	240080d6 <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
2400806a:	697b      	ldr	r3, [r7, #20]
2400806c:	015a      	lsls	r2, r3, #5
2400806e:	4b21      	ldr	r3, [pc, #132]	; (240080f4 <HAL_EXTI_GetConfigLine+0x1c0>)
24008070:	4413      	add	r3, r2
24008072:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
24008074:	69fb      	ldr	r3, [r7, #28]
24008076:	681a      	ldr	r2, [r3, #0]
24008078:	693b      	ldr	r3, [r7, #16]
2400807a:	4013      	ands	r3, r2
2400807c:	2b00      	cmp	r3, #0
2400807e:	d02a      	beq.n	240080d6 <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
24008080:	693b      	ldr	r3, [r7, #16]
24008082:	2b0f      	cmp	r3, #15
24008084:	d80a      	bhi.n	2400809c <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008086:	697b      	ldr	r3, [r7, #20]
24008088:	015a      	lsls	r2, r3, #5
2400808a:	4b1b      	ldr	r3, [pc, #108]	; (240080f8 <HAL_EXTI_GetConfigLine+0x1c4>)
2400808c:	4413      	add	r3, r2
2400808e:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008090:	2201      	movs	r2, #1
24008092:	693b      	ldr	r3, [r7, #16]
24008094:	fa02 f303 	lsl.w	r3, r2, r3
24008098:	61bb      	str	r3, [r7, #24]
2400809a:	e00a      	b.n	240080b2 <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
2400809c:	697b      	ldr	r3, [r7, #20]
2400809e:	015a      	lsls	r2, r3, #5
240080a0:	4b16      	ldr	r3, [pc, #88]	; (240080fc <HAL_EXTI_GetConfigLine+0x1c8>)
240080a2:	4413      	add	r3, r2
240080a4:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
240080a6:	693b      	ldr	r3, [r7, #16]
240080a8:	3b10      	subs	r3, #16
240080aa:	2201      	movs	r2, #1
240080ac:	fa02 f303 	lsl.w	r3, r2, r3
240080b0:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
240080b2:	69fb      	ldr	r3, [r7, #28]
240080b4:	6819      	ldr	r1, [r3, #0]
240080b6:	69bb      	ldr	r3, [r7, #24]
240080b8:	fb03 f203 	mul.w	r2, r3, r3
240080bc:	4613      	mov	r3, r2
240080be:	005b      	lsls	r3, r3, #1
240080c0:	4413      	add	r3, r2
240080c2:	ea01 0203 	and.w	r2, r1, r3
240080c6:	69bb      	ldr	r3, [r7, #24]
240080c8:	fb03 f303 	mul.w	r3, r3, r3
240080cc:	fbb2 f3f3 	udiv	r3, r2, r3
240080d0:	1c5a      	adds	r2, r3, #1
240080d2:	683b      	ldr	r3, [r7, #0]
240080d4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
240080d6:	2300      	movs	r3, #0
}
240080d8:	4618      	mov	r0, r3
240080da:	3724      	adds	r7, #36	; 0x24
240080dc:	46bd      	mov	sp, r7
240080de:	f85d 7b04 	ldr.w	r7, [sp], #4
240080e2:	4770      	bx	lr
240080e4:	58000080 	.word	0x58000080
240080e8:	58000084 	.word	0x58000084
240080ec:	58000004 	.word	0x58000004
240080f0:	58000400 	.word	0x58000400
240080f4:	5800000c 	.word	0x5800000c
240080f8:	58000010 	.word	0x58000010
240080fc:	58000014 	.word	0x58000014

24008100 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
24008100:	b480      	push	{r7}
24008102:	b089      	sub	sp, #36	; 0x24
24008104:	af00      	add	r7, sp, #0
24008106:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
24008108:	687b      	ldr	r3, [r7, #4]
2400810a:	2b00      	cmp	r3, #0
2400810c:	d101      	bne.n	24008112 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
2400810e:	2301      	movs	r3, #1
24008110:	e0ab      	b.n	2400826a <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008112:	687b      	ldr	r3, [r7, #4]
24008114:	681b      	ldr	r3, [r3, #0]
24008116:	0c1b      	lsrs	r3, r3, #16
24008118:	f003 0303 	and.w	r3, r3, #3
2400811c:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
2400811e:	687b      	ldr	r3, [r7, #4]
24008120:	681b      	ldr	r3, [r3, #0]
24008122:	f003 031f 	and.w	r3, r3, #31
24008126:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008128:	2201      	movs	r2, #1
2400812a:	693b      	ldr	r3, [r7, #16]
2400812c:	fa02 f303 	lsl.w	r3, r2, r3
24008130:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008132:	697b      	ldr	r3, [r7, #20]
24008134:	011a      	lsls	r2, r3, #4
24008136:	4b50      	ldr	r3, [pc, #320]	; (24008278 <HAL_EXTI_ClearConfigLine+0x178>)
24008138:	4413      	add	r3, r2
2400813a:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
2400813c:	69fb      	ldr	r3, [r7, #28]
2400813e:	681a      	ldr	r2, [r3, #0]
24008140:	68fb      	ldr	r3, [r7, #12]
24008142:	43db      	mvns	r3, r3
24008144:	4013      	ands	r3, r2
24008146:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008148:	69fb      	ldr	r3, [r7, #28]
2400814a:	68ba      	ldr	r2, [r7, #8]
2400814c:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
2400814e:	697b      	ldr	r3, [r7, #20]
24008150:	011a      	lsls	r2, r3, #4
24008152:	4b4a      	ldr	r3, [pc, #296]	; (2400827c <HAL_EXTI_ClearConfigLine+0x17c>)
24008154:	4413      	add	r3, r2
24008156:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008158:	69fb      	ldr	r3, [r7, #28]
2400815a:	681a      	ldr	r2, [r3, #0]
2400815c:	68fb      	ldr	r3, [r7, #12]
2400815e:	43db      	mvns	r3, r3
24008160:	4013      	ands	r3, r2
24008162:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008164:	69fb      	ldr	r3, [r7, #28]
24008166:	68ba      	ldr	r2, [r7, #8]
24008168:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
2400816a:	687b      	ldr	r3, [r7, #4]
2400816c:	681b      	ldr	r3, [r3, #0]
2400816e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24008172:	2b00      	cmp	r3, #0
24008174:	d03f      	beq.n	240081f6 <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008176:	697b      	ldr	r3, [r7, #20]
24008178:	015b      	lsls	r3, r3, #5
2400817a:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
2400817e:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008180:	69fb      	ldr	r3, [r7, #28]
24008182:	681a      	ldr	r2, [r3, #0]
24008184:	68fb      	ldr	r3, [r7, #12]
24008186:	43db      	mvns	r3, r3
24008188:	4013      	ands	r3, r2
2400818a:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
2400818c:	69fb      	ldr	r3, [r7, #28]
2400818e:	68ba      	ldr	r2, [r7, #8]
24008190:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008192:	697b      	ldr	r3, [r7, #20]
24008194:	015a      	lsls	r2, r3, #5
24008196:	4b3a      	ldr	r3, [pc, #232]	; (24008280 <HAL_EXTI_ClearConfigLine+0x180>)
24008198:	4413      	add	r3, r2
2400819a:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
2400819c:	69fb      	ldr	r3, [r7, #28]
2400819e:	681a      	ldr	r2, [r3, #0]
240081a0:	68fb      	ldr	r3, [r7, #12]
240081a2:	43db      	mvns	r3, r3
240081a4:	4013      	ands	r3, r2
240081a6:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
240081a8:	69fb      	ldr	r3, [r7, #28]
240081aa:	68ba      	ldr	r2, [r7, #8]
240081ac:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
240081ae:	687b      	ldr	r3, [r7, #4]
240081b0:	681b      	ldr	r3, [r3, #0]
240081b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
240081b6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
240081ba:	d11c      	bne.n	240081f6 <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
240081bc:	4a31      	ldr	r2, [pc, #196]	; (24008284 <HAL_EXTI_ClearConfigLine+0x184>)
240081be:	693b      	ldr	r3, [r7, #16]
240081c0:	089b      	lsrs	r3, r3, #2
240081c2:	f003 0303 	and.w	r3, r3, #3
240081c6:	3302      	adds	r3, #2
240081c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240081cc:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
240081ce:	693b      	ldr	r3, [r7, #16]
240081d0:	f003 0303 	and.w	r3, r3, #3
240081d4:	009b      	lsls	r3, r3, #2
240081d6:	220f      	movs	r2, #15
240081d8:	fa02 f303 	lsl.w	r3, r2, r3
240081dc:	43db      	mvns	r3, r3
240081de:	68ba      	ldr	r2, [r7, #8]
240081e0:	4013      	ands	r3, r2
240081e2:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
240081e4:	4927      	ldr	r1, [pc, #156]	; (24008284 <HAL_EXTI_ClearConfigLine+0x184>)
240081e6:	693b      	ldr	r3, [r7, #16]
240081e8:	089b      	lsrs	r3, r3, #2
240081ea:	f003 0303 	and.w	r3, r3, #3
240081ee:	3302      	adds	r3, #2
240081f0:	68ba      	ldr	r2, [r7, #8]
240081f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
240081f6:	687b      	ldr	r3, [r7, #4]
240081f8:	681b      	ldr	r3, [r3, #0]
240081fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
240081fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008202:	d131      	bne.n	24008268 <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008204:	697b      	ldr	r3, [r7, #20]
24008206:	015a      	lsls	r2, r3, #5
24008208:	4b1f      	ldr	r3, [pc, #124]	; (24008288 <HAL_EXTI_ClearConfigLine+0x188>)
2400820a:	4413      	add	r3, r2
2400820c:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
2400820e:	69fb      	ldr	r3, [r7, #28]
24008210:	681a      	ldr	r2, [r3, #0]
24008212:	68fb      	ldr	r3, [r7, #12]
24008214:	43db      	mvns	r3, r3
24008216:	401a      	ands	r2, r3
24008218:	69fb      	ldr	r3, [r7, #28]
2400821a:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
2400821c:	693b      	ldr	r3, [r7, #16]
2400821e:	2b0f      	cmp	r3, #15
24008220:	d80a      	bhi.n	24008238 <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008222:	697b      	ldr	r3, [r7, #20]
24008224:	015a      	lsls	r2, r3, #5
24008226:	4b19      	ldr	r3, [pc, #100]	; (2400828c <HAL_EXTI_ClearConfigLine+0x18c>)
24008228:	4413      	add	r3, r2
2400822a:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
2400822c:	2201      	movs	r2, #1
2400822e:	693b      	ldr	r3, [r7, #16]
24008230:	fa02 f303 	lsl.w	r3, r2, r3
24008234:	61bb      	str	r3, [r7, #24]
24008236:	e00a      	b.n	2400824e <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008238:	697b      	ldr	r3, [r7, #20]
2400823a:	015a      	lsls	r2, r3, #5
2400823c:	4b14      	ldr	r3, [pc, #80]	; (24008290 <HAL_EXTI_ClearConfigLine+0x190>)
2400823e:	4413      	add	r3, r2
24008240:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
24008242:	693b      	ldr	r3, [r7, #16]
24008244:	3b10      	subs	r3, #16
24008246:	2201      	movs	r2, #1
24008248:	fa02 f303 	lsl.w	r3, r2, r3
2400824c:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
2400824e:	69fb      	ldr	r3, [r7, #28]
24008250:	6819      	ldr	r1, [r3, #0]
24008252:	69bb      	ldr	r3, [r7, #24]
24008254:	fb03 f203 	mul.w	r2, r3, r3
24008258:	4613      	mov	r3, r2
2400825a:	005b      	lsls	r3, r3, #1
2400825c:	4413      	add	r3, r2
2400825e:	43db      	mvns	r3, r3
24008260:	ea01 0203 	and.w	r2, r1, r3
24008264:	69fb      	ldr	r3, [r7, #28]
24008266:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
24008268:	2300      	movs	r3, #0
}
2400826a:	4618      	mov	r0, r3
2400826c:	3724      	adds	r7, #36	; 0x24
2400826e:	46bd      	mov	sp, r7
24008270:	f85d 7b04 	ldr.w	r7, [sp], #4
24008274:	4770      	bx	lr
24008276:	bf00      	nop
24008278:	58000080 	.word	0x58000080
2400827c:	58000084 	.word	0x58000084
24008280:	58000004 	.word	0x58000004
24008284:	58000400 	.word	0x58000400
24008288:	5800000c 	.word	0x5800000c
2400828c:	58000010 	.word	0x58000010
24008290:	58000014 	.word	0x58000014

24008294 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
24008294:	b480      	push	{r7}
24008296:	b087      	sub	sp, #28
24008298:	af00      	add	r7, sp, #0
2400829a:	60f8      	str	r0, [r7, #12]
2400829c:	460b      	mov	r3, r1
2400829e:	607a      	str	r2, [r7, #4]
240082a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
240082a2:	2300      	movs	r3, #0
240082a4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
240082a6:	68fb      	ldr	r3, [r7, #12]
240082a8:	2b00      	cmp	r3, #0
240082aa:	d101      	bne.n	240082b0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
240082ac:	2301      	movs	r3, #1
240082ae:	e00a      	b.n	240082c6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
240082b0:	7afb      	ldrb	r3, [r7, #11]
240082b2:	2b00      	cmp	r3, #0
240082b4:	d103      	bne.n	240082be <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
240082b6:	68fb      	ldr	r3, [r7, #12]
240082b8:	687a      	ldr	r2, [r7, #4]
240082ba:	605a      	str	r2, [r3, #4]
      break;
240082bc:	e002      	b.n	240082c4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
240082be:	2301      	movs	r3, #1
240082c0:	75fb      	strb	r3, [r7, #23]
      break;
240082c2:	bf00      	nop
  }

  return status;
240082c4:	7dfb      	ldrb	r3, [r7, #23]
}
240082c6:	4618      	mov	r0, r3
240082c8:	371c      	adds	r7, #28
240082ca:	46bd      	mov	sp, r7
240082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240082d0:	4770      	bx	lr

240082d2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
240082d2:	b480      	push	{r7}
240082d4:	b083      	sub	sp, #12
240082d6:	af00      	add	r7, sp, #0
240082d8:	6078      	str	r0, [r7, #4]
240082da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
240082dc:	687b      	ldr	r3, [r7, #4]
240082de:	2b00      	cmp	r3, #0
240082e0:	d101      	bne.n	240082e6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
240082e2:	2301      	movs	r3, #1
240082e4:	e003      	b.n	240082ee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
240082e6:	687b      	ldr	r3, [r7, #4]
240082e8:	683a      	ldr	r2, [r7, #0]
240082ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
240082ec:	2300      	movs	r3, #0
  }
}
240082ee:	4618      	mov	r0, r3
240082f0:	370c      	adds	r7, #12
240082f2:	46bd      	mov	sp, r7
240082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240082f8:	4770      	bx	lr
	...

240082fc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
240082fc:	b580      	push	{r7, lr}
240082fe:	b086      	sub	sp, #24
24008300:	af00      	add	r7, sp, #0
24008302:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008304:	687b      	ldr	r3, [r7, #4]
24008306:	681b      	ldr	r3, [r3, #0]
24008308:	0c1b      	lsrs	r3, r3, #16
2400830a:	f003 0303 	and.w	r3, r3, #3
2400830e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24008310:	687b      	ldr	r3, [r7, #4]
24008312:	681b      	ldr	r3, [r3, #0]
24008314:	f003 031f 	and.w	r3, r3, #31
24008318:	2201      	movs	r2, #1
2400831a:	fa02 f303 	lsl.w	r3, r2, r3
2400831e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24008320:	697b      	ldr	r3, [r7, #20]
24008322:	011a      	lsls	r2, r3, #4
24008324:	4b0c      	ldr	r3, [pc, #48]	; (24008358 <HAL_EXTI_IRQHandler+0x5c>)
24008326:	4413      	add	r3, r2
24008328:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
2400832a:	68fb      	ldr	r3, [r7, #12]
2400832c:	681b      	ldr	r3, [r3, #0]
2400832e:	693a      	ldr	r2, [r7, #16]
24008330:	4013      	ands	r3, r2
24008332:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
24008334:	68bb      	ldr	r3, [r7, #8]
24008336:	2b00      	cmp	r3, #0
24008338:	d009      	beq.n	2400834e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
2400833a:	68fb      	ldr	r3, [r7, #12]
2400833c:	693a      	ldr	r2, [r7, #16]
2400833e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
24008340:	687b      	ldr	r3, [r7, #4]
24008342:	685b      	ldr	r3, [r3, #4]
24008344:	2b00      	cmp	r3, #0
24008346:	d002      	beq.n	2400834e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
24008348:	687b      	ldr	r3, [r7, #4]
2400834a:	685b      	ldr	r3, [r3, #4]
2400834c:	4798      	blx	r3
    }
  }
}
2400834e:	bf00      	nop
24008350:	3718      	adds	r7, #24
24008352:	46bd      	mov	sp, r7
24008354:	bd80      	pop	{r7, pc}
24008356:	bf00      	nop
24008358:	58000088 	.word	0x58000088

2400835c <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
2400835c:	b480      	push	{r7}
2400835e:	b089      	sub	sp, #36	; 0x24
24008360:	af00      	add	r7, sp, #0
24008362:	6078      	str	r0, [r7, #4]
24008364:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008366:	687b      	ldr	r3, [r7, #4]
24008368:	681b      	ldr	r3, [r3, #0]
2400836a:	0c1b      	lsrs	r3, r3, #16
2400836c:	f003 0303 	and.w	r3, r3, #3
24008370:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
24008372:	687b      	ldr	r3, [r7, #4]
24008374:	681b      	ldr	r3, [r3, #0]
24008376:	f003 031f 	and.w	r3, r3, #31
2400837a:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
2400837c:	2201      	movs	r2, #1
2400837e:	69bb      	ldr	r3, [r7, #24]
24008380:	fa02 f303 	lsl.w	r3, r2, r3
24008384:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24008386:	69fb      	ldr	r3, [r7, #28]
24008388:	011a      	lsls	r2, r3, #4
2400838a:	4b09      	ldr	r3, [pc, #36]	; (240083b0 <HAL_EXTI_GetPending+0x54>)
2400838c:	4413      	add	r3, r2
2400838e:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
24008390:	693b      	ldr	r3, [r7, #16]
24008392:	681a      	ldr	r2, [r3, #0]
24008394:	697b      	ldr	r3, [r7, #20]
24008396:	401a      	ands	r2, r3
24008398:	69bb      	ldr	r3, [r7, #24]
2400839a:	fa22 f303 	lsr.w	r3, r2, r3
2400839e:	60fb      	str	r3, [r7, #12]
  return regval;
240083a0:	68fb      	ldr	r3, [r7, #12]
}
240083a2:	4618      	mov	r0, r3
240083a4:	3724      	adds	r7, #36	; 0x24
240083a6:	46bd      	mov	sp, r7
240083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240083ac:	4770      	bx	lr
240083ae:	bf00      	nop
240083b0:	58000088 	.word	0x58000088

240083b4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
240083b4:	b480      	push	{r7}
240083b6:	b087      	sub	sp, #28
240083b8:	af00      	add	r7, sp, #0
240083ba:	6078      	str	r0, [r7, #4]
240083bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240083be:	687b      	ldr	r3, [r7, #4]
240083c0:	681b      	ldr	r3, [r3, #0]
240083c2:	0c1b      	lsrs	r3, r3, #16
240083c4:	f003 0303 	and.w	r3, r3, #3
240083c8:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240083ca:	687b      	ldr	r3, [r7, #4]
240083cc:	681b      	ldr	r3, [r3, #0]
240083ce:	f003 031f 	and.w	r3, r3, #31
240083d2:	2201      	movs	r2, #1
240083d4:	fa02 f303 	lsl.w	r3, r2, r3
240083d8:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
240083da:	697b      	ldr	r3, [r7, #20]
240083dc:	011a      	lsls	r2, r3, #4
240083de:	4b06      	ldr	r3, [pc, #24]	; (240083f8 <HAL_EXTI_ClearPending+0x44>)
240083e0:	4413      	add	r3, r2
240083e2:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
240083e4:	68fb      	ldr	r3, [r7, #12]
240083e6:	693a      	ldr	r2, [r7, #16]
240083e8:	601a      	str	r2, [r3, #0]
}
240083ea:	bf00      	nop
240083ec:	371c      	adds	r7, #28
240083ee:	46bd      	mov	sp, r7
240083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240083f4:	4770      	bx	lr
240083f6:	bf00      	nop
240083f8:	58000088 	.word	0x58000088

240083fc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
240083fc:	b480      	push	{r7}
240083fe:	b087      	sub	sp, #28
24008400:	af00      	add	r7, sp, #0
24008402:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008404:	687b      	ldr	r3, [r7, #4]
24008406:	681b      	ldr	r3, [r3, #0]
24008408:	0c1b      	lsrs	r3, r3, #16
2400840a:	f003 0303 	and.w	r3, r3, #3
2400840e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24008410:	687b      	ldr	r3, [r7, #4]
24008412:	681b      	ldr	r3, [r3, #0]
24008414:	f003 031f 	and.w	r3, r3, #31
24008418:	2201      	movs	r2, #1
2400841a:	fa02 f303 	lsl.w	r3, r2, r3
2400841e:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
24008420:	697b      	ldr	r3, [r7, #20]
24008422:	015a      	lsls	r2, r3, #5
24008424:	4b05      	ldr	r3, [pc, #20]	; (2400843c <HAL_EXTI_GenerateSWI+0x40>)
24008426:	4413      	add	r3, r2
24008428:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
2400842a:	68fb      	ldr	r3, [r7, #12]
2400842c:	693a      	ldr	r2, [r7, #16]
2400842e:	601a      	str	r2, [r3, #0]
}
24008430:	bf00      	nop
24008432:	371c      	adds	r7, #28
24008434:	46bd      	mov	sp, r7
24008436:	f85d 7b04 	ldr.w	r7, [sp], #4
2400843a:	4770      	bx	lr
2400843c:	58000008 	.word	0x58000008

24008440 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
24008440:	b580      	push	{r7, lr}
24008442:	b08a      	sub	sp, #40	; 0x28
24008444:	af00      	add	r7, sp, #0
24008446:	60f8      	str	r0, [r7, #12]
24008448:	60b9      	str	r1, [r7, #8]
2400844a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
2400844c:	68bb      	ldr	r3, [r7, #8]
2400844e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
24008450:	687b      	ldr	r3, [r7, #4]
24008452:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
24008454:	2308      	movs	r3, #8
24008456:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008458:	4b2e      	ldr	r3, [pc, #184]	; (24008514 <HAL_FLASH_Program+0xd4>)
2400845a:	7d1b      	ldrb	r3, [r3, #20]
2400845c:	2b01      	cmp	r3, #1
2400845e:	d101      	bne.n	24008464 <HAL_FLASH_Program+0x24>
24008460:	2302      	movs	r3, #2
24008462:	e053      	b.n	2400850c <HAL_FLASH_Program+0xcc>
24008464:	4b2b      	ldr	r3, [pc, #172]	; (24008514 <HAL_FLASH_Program+0xd4>)
24008466:	2201      	movs	r2, #1
24008468:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
2400846a:	68bb      	ldr	r3, [r7, #8]
2400846c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008470:	d315      	bcc.n	2400849e <HAL_FLASH_Program+0x5e>
24008472:	68bb      	ldr	r3, [r7, #8]
24008474:	4a28      	ldr	r2, [pc, #160]	; (24008518 <HAL_FLASH_Program+0xd8>)
24008476:	4293      	cmp	r3, r2
24008478:	d811      	bhi.n	2400849e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
2400847a:	2301      	movs	r3, #1
2400847c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2400847e:	4b25      	ldr	r3, [pc, #148]	; (24008514 <HAL_FLASH_Program+0xd4>)
24008480:	2200      	movs	r2, #0
24008482:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008484:	6979      	ldr	r1, [r7, #20]
24008486:	f24c 3050 	movw	r0, #50000	; 0xc350
2400848a:	f000 fa1d 	bl	240088c8 <FLASH_WaitForLastOperation>
2400848e:	4603      	mov	r3, r0
24008490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
24008494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24008498:	2b00      	cmp	r3, #0
2400849a:	d002      	beq.n	240084a2 <HAL_FLASH_Program+0x62>
2400849c:	e031      	b.n	24008502 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
2400849e:	2301      	movs	r3, #1
240084a0:	e034      	b.n	2400850c <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
240084a2:	4b1e      	ldr	r3, [pc, #120]	; (2400851c <HAL_FLASH_Program+0xdc>)
240084a4:	68db      	ldr	r3, [r3, #12]
240084a6:	4a1d      	ldr	r2, [pc, #116]	; (2400851c <HAL_FLASH_Program+0xdc>)
240084a8:	f043 0302 	orr.w	r3, r3, #2
240084ac:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
240084ae:	f3bf 8f6f 	isb	sy
}
240084b2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240084b4:	f3bf 8f4f 	dsb	sy
}
240084b8:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
240084ba:	69fb      	ldr	r3, [r7, #28]
240084bc:	681a      	ldr	r2, [r3, #0]
240084be:	6a3b      	ldr	r3, [r7, #32]
240084c0:	601a      	str	r2, [r3, #0]
        dest_addr++;
240084c2:	6a3b      	ldr	r3, [r7, #32]
240084c4:	3304      	adds	r3, #4
240084c6:	623b      	str	r3, [r7, #32]
        src_addr++;
240084c8:	69fb      	ldr	r3, [r7, #28]
240084ca:	3304      	adds	r3, #4
240084cc:	61fb      	str	r3, [r7, #28]
        row_index--;
240084ce:	7efb      	ldrb	r3, [r7, #27]
240084d0:	3b01      	subs	r3, #1
240084d2:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
240084d4:	7efb      	ldrb	r3, [r7, #27]
240084d6:	2b00      	cmp	r3, #0
240084d8:	d1ef      	bne.n	240084ba <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
240084da:	f3bf 8f6f 	isb	sy
}
240084de:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240084e0:	f3bf 8f4f 	dsb	sy
}
240084e4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
240084e6:	6979      	ldr	r1, [r7, #20]
240084e8:	f24c 3050 	movw	r0, #50000	; 0xc350
240084ec:	f000 f9ec 	bl	240088c8 <FLASH_WaitForLastOperation>
240084f0:	4603      	mov	r3, r0
240084f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
240084f6:	4b09      	ldr	r3, [pc, #36]	; (2400851c <HAL_FLASH_Program+0xdc>)
240084f8:	68db      	ldr	r3, [r3, #12]
240084fa:	4a08      	ldr	r2, [pc, #32]	; (2400851c <HAL_FLASH_Program+0xdc>)
240084fc:	f023 0302 	bic.w	r3, r3, #2
24008500:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008502:	4b04      	ldr	r3, [pc, #16]	; (24008514 <HAL_FLASH_Program+0xd4>)
24008504:	2200      	movs	r2, #0
24008506:	751a      	strb	r2, [r3, #20]

  return status;
24008508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2400850c:	4618      	mov	r0, r3
2400850e:	3728      	adds	r7, #40	; 0x28
24008510:	46bd      	mov	sp, r7
24008512:	bd80      	pop	{r7, pc}
24008514:	24000618 	.word	0x24000618
24008518:	0801ffff 	.word	0x0801ffff
2400851c:	52002000 	.word	0x52002000

24008520 <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
24008520:	b580      	push	{r7, lr}
24008522:	b08a      	sub	sp, #40	; 0x28
24008524:	af00      	add	r7, sp, #0
24008526:	60f8      	str	r0, [r7, #12]
24008528:	60b9      	str	r1, [r7, #8]
2400852a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
2400852c:	68bb      	ldr	r3, [r7, #8]
2400852e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
24008530:	687b      	ldr	r3, [r7, #4]
24008532:	623b      	str	r3, [r7, #32]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
24008534:	2308      	movs	r3, #8
24008536:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008538:	4b2c      	ldr	r3, [pc, #176]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
2400853a:	7d1b      	ldrb	r3, [r3, #20]
2400853c:	2b01      	cmp	r3, #1
2400853e:	d101      	bne.n	24008544 <HAL_FLASH_Program_IT+0x24>
24008540:	2302      	movs	r3, #2
24008542:	e04f      	b.n	240085e4 <HAL_FLASH_Program_IT+0xc4>
24008544:	4b29      	ldr	r3, [pc, #164]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
24008546:	2201      	movs	r2, #1
24008548:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2400854a:	4b28      	ldr	r3, [pc, #160]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
2400854c:	2200      	movs	r2, #0
2400854e:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
24008550:	68bb      	ldr	r3, [r7, #8]
24008552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008556:	d310      	bcc.n	2400857a <HAL_FLASH_Program_IT+0x5a>
24008558:	68bb      	ldr	r3, [r7, #8]
2400855a:	4a25      	ldr	r2, [pc, #148]	; (240085f0 <HAL_FLASH_Program_IT+0xd0>)
2400855c:	4293      	cmp	r3, r2
2400855e:	d80c      	bhi.n	2400857a <HAL_FLASH_Program_IT+0x5a>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
24008560:	2301      	movs	r3, #1
24008562:	61bb      	str	r3, [r7, #24]
  {
    return HAL_ERROR;
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008564:	69b9      	ldr	r1, [r7, #24]
24008566:	f24c 3050 	movw	r0, #50000	; 0xc350
2400856a:	f000 f9ad 	bl	240088c8 <FLASH_WaitForLastOperation>
2400856e:	4603      	mov	r3, r0
24008570:	75fb      	strb	r3, [r7, #23]

  if (status != HAL_OK)
24008572:	7dfb      	ldrb	r3, [r7, #23]
24008574:	2b00      	cmp	r3, #0
24008576:	d102      	bne.n	2400857e <HAL_FLASH_Program_IT+0x5e>
24008578:	e005      	b.n	24008586 <HAL_FLASH_Program_IT+0x66>
    return HAL_ERROR;
2400857a:	2301      	movs	r3, #1
2400857c:	e032      	b.n	240085e4 <HAL_FLASH_Program_IT+0xc4>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400857e:	4b1b      	ldr	r3, [pc, #108]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
24008580:	2200      	movs	r2, #0
24008582:	751a      	strb	r2, [r3, #20]
24008584:	e02d      	b.n	240085e2 <HAL_FLASH_Program_IT+0xc2>
  }
  else
  {
    pFlash.Address = FlashAddress;
24008586:	4a19      	ldr	r2, [pc, #100]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
24008588:	68bb      	ldr	r3, [r7, #8]
2400858a:	6113      	str	r3, [r2, #16]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#else /* Single Bank */
    /* Set internal variables used by the IRQ handler */
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
2400858c:	4b17      	ldr	r3, [pc, #92]	; (240085ec <HAL_FLASH_Program_IT+0xcc>)
2400858e:	2203      	movs	r2, #3
24008590:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR1, FLASH_CR_PG);
24008592:	4b18      	ldr	r3, [pc, #96]	; (240085f4 <HAL_FLASH_Program_IT+0xd4>)
24008594:	68db      	ldr	r3, [r3, #12]
24008596:	4a17      	ldr	r2, [pc, #92]	; (240085f4 <HAL_FLASH_Program_IT+0xd4>)
24008598:	f043 0302 	orr.w	r3, r3, #2
2400859c:	60d3      	str	r3, [r2, #12]
    }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
2400859e:	4b15      	ldr	r3, [pc, #84]	; (240085f4 <HAL_FLASH_Program_IT+0xd4>)
240085a0:	68db      	ldr	r3, [r3, #12]
240085a2:	4a14      	ldr	r2, [pc, #80]	; (240085f4 <HAL_FLASH_Program_IT+0xd4>)
240085a4:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
240085a8:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
240085aa:	f3bf 8f6f 	isb	sy
}
240085ae:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240085b0:	f3bf 8f4f 	dsb	sy
}
240085b4:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
240085b6:	6a3b      	ldr	r3, [r7, #32]
240085b8:	681a      	ldr	r2, [r3, #0]
240085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240085bc:	601a      	str	r2, [r3, #0]
        dest_addr++;
240085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240085c0:	3304      	adds	r3, #4
240085c2:	627b      	str	r3, [r7, #36]	; 0x24
        src_addr++;
240085c4:	6a3b      	ldr	r3, [r7, #32]
240085c6:	3304      	adds	r3, #4
240085c8:	623b      	str	r3, [r7, #32]
        row_index--;
240085ca:	7ffb      	ldrb	r3, [r7, #31]
240085cc:	3b01      	subs	r3, #1
240085ce:	77fb      	strb	r3, [r7, #31]
      } while (row_index != 0U);
240085d0:	7ffb      	ldrb	r3, [r7, #31]
240085d2:	2b00      	cmp	r3, #0
240085d4:	d1ef      	bne.n	240085b6 <HAL_FLASH_Program_IT+0x96>
  __ASM volatile ("isb 0xF":::"memory");
240085d6:	f3bf 8f6f 	isb	sy
}
240085da:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
240085dc:	f3bf 8f4f 	dsb	sy
}
240085e0:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
240085e2:	7dfb      	ldrb	r3, [r7, #23]
}
240085e4:	4618      	mov	r0, r3
240085e6:	3728      	adds	r7, #40	; 0x28
240085e8:	46bd      	mov	sp, r7
240085ea:	bd80      	pop	{r7, pc}
240085ec:	24000618 	.word	0x24000618
240085f0:	0801ffff 	.word	0x0801ffff
240085f4:	52002000 	.word	0x52002000

240085f8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
240085f8:	b580      	push	{r7, lr}
240085fa:	b084      	sub	sp, #16
240085fc:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
240085fe:	4b53      	ldr	r3, [pc, #332]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
24008600:	691b      	ldr	r3, [r3, #16]
24008602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400860a:	d15c      	bne.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
2400860c:	4b50      	ldr	r3, [pc, #320]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400860e:	781b      	ldrb	r3, [r3, #0]
24008610:	b2db      	uxtb	r3, r3
24008612:	2b01      	cmp	r3, #1
24008614:	d132      	bne.n	2400867c <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
24008616:	4b4e      	ldr	r3, [pc, #312]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008618:	685b      	ldr	r3, [r3, #4]
2400861a:	3b01      	subs	r3, #1
2400861c:	4a4c      	ldr	r2, [pc, #304]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400861e:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
24008620:	4b4b      	ldr	r3, [pc, #300]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008622:	685b      	ldr	r3, [r3, #4]
24008624:	2b00      	cmp	r3, #0
24008626:	d018      	beq.n	2400865a <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24008628:	4b49      	ldr	r3, [pc, #292]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400862a:	68db      	ldr	r3, [r3, #12]
2400862c:	4618      	mov	r0, r3
2400862e:	f000 f891 	bl	24008754 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008632:	4b46      	ldr	r3, [pc, #280]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
24008634:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008638:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
2400863a:	4b45      	ldr	r3, [pc, #276]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400863c:	68db      	ldr	r3, [r3, #12]
2400863e:	3301      	adds	r3, #1
24008640:	4a43      	ldr	r2, [pc, #268]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008642:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
24008644:	4b42      	ldr	r3, [pc, #264]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008646:	68db      	ldr	r3, [r3, #12]
24008648:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
2400864a:	4b41      	ldr	r3, [pc, #260]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400864c:	689b      	ldr	r3, [r3, #8]
2400864e:	461a      	mov	r2, r3
24008650:	2101      	movs	r1, #1
24008652:	68f8      	ldr	r0, [r7, #12]
24008654:	f000 fcd6 	bl	24009004 <FLASH_Erase_Sector>
24008658:	e035      	b.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
2400865a:	4b3d      	ldr	r3, [pc, #244]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400865c:	f04f 32ff 	mov.w	r2, #4294967295
24008660:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24008662:	4b3b      	ldr	r3, [pc, #236]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008664:	2200      	movs	r2, #0
24008666:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24008668:	4b39      	ldr	r3, [pc, #228]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400866a:	68db      	ldr	r3, [r3, #12]
2400866c:	4618      	mov	r0, r3
2400866e:	f000 f871 	bl	24008754 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008672:	4b36      	ldr	r3, [pc, #216]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
24008674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008678:	615a      	str	r2, [r3, #20]
2400867a:	e024      	b.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
2400867c:	4b34      	ldr	r3, [pc, #208]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400867e:	781b      	ldrb	r3, [r3, #0]
24008680:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24008682:	7afb      	ldrb	r3, [r7, #11]
24008684:	2b02      	cmp	r3, #2
24008686:	d002      	beq.n	2400868e <HAL_FLASH_IRQHandler+0x96>
24008688:	7afb      	ldrb	r3, [r7, #11]
2400868a:	2b07      	cmp	r3, #7
2400868c:	d103      	bne.n	24008696 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
2400868e:	2001      	movs	r0, #1
24008690:	f000 f860 	bl	24008754 <HAL_FLASH_EndOfOperationCallback>
24008694:	e007      	b.n	240086a6 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
24008696:	7afb      	ldrb	r3, [r7, #11]
24008698:	2b03      	cmp	r3, #3
2400869a:	d104      	bne.n	240086a6 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
2400869c:	4b2c      	ldr	r3, [pc, #176]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400869e:	691b      	ldr	r3, [r3, #16]
240086a0:	4618      	mov	r0, r3
240086a2:	f000 f857 	bl	24008754 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
240086a6:	7afb      	ldrb	r3, [r7, #11]
240086a8:	2b04      	cmp	r3, #4
240086aa:	d00c      	beq.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
240086ac:	7afb      	ldrb	r3, [r7, #11]
240086ae:	2b05      	cmp	r3, #5
240086b0:	d009      	beq.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
240086b2:	7afb      	ldrb	r3, [r7, #11]
240086b4:	2b06      	cmp	r3, #6
240086b6:	d006      	beq.n	240086c6 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240086b8:	4b25      	ldr	r3, [pc, #148]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086ba:	2200      	movs	r2, #0
240086bc:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
240086be:	4b23      	ldr	r3, [pc, #140]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
240086c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240086c4:	615a      	str	r2, [r3, #20]
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
240086c6:	4b21      	ldr	r3, [pc, #132]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
240086c8:	691b      	ldr	r3, [r3, #16]
240086ca:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
240086ce:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
240086d0:	687b      	ldr	r3, [r7, #4]
240086d2:	2b00      	cmp	r3, #0
240086d4:	d028      	beq.n	24008728 <HAL_FLASH_IRQHandler+0x130>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
240086d6:	4b1e      	ldr	r3, [pc, #120]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086d8:	699a      	ldr	r2, [r3, #24]
240086da:	687b      	ldr	r3, [r7, #4]
240086dc:	4313      	orrs	r3, r2
240086de:	4a1c      	ldr	r2, [pc, #112]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086e0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
240086e2:	4a1a      	ldr	r2, [pc, #104]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
240086e4:	687b      	ldr	r3, [r7, #4]
240086e6:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
240086e8:	4b19      	ldr	r3, [pc, #100]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086ea:	781b      	ldrb	r3, [r3, #0]
240086ec:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
240086ee:	7afb      	ldrb	r3, [r7, #11]
240086f0:	2b01      	cmp	r3, #1
240086f2:	d107      	bne.n	24008704 <HAL_FLASH_IRQHandler+0x10c>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
240086f4:	4b16      	ldr	r3, [pc, #88]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086f6:	68db      	ldr	r3, [r3, #12]
240086f8:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
240086fa:	4b15      	ldr	r3, [pc, #84]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
240086fc:	f04f 32ff 	mov.w	r2, #4294967295
24008700:	60da      	str	r2, [r3, #12]
24008702:	e00b      	b.n	2400871c <HAL_FLASH_IRQHandler+0x124>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24008704:	7afb      	ldrb	r3, [r7, #11]
24008706:	2b02      	cmp	r3, #2
24008708:	d002      	beq.n	24008710 <HAL_FLASH_IRQHandler+0x118>
2400870a:	7afb      	ldrb	r3, [r7, #11]
2400870c:	2b07      	cmp	r3, #7
2400870e:	d102      	bne.n	24008716 <HAL_FLASH_IRQHandler+0x11e>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
24008710:	2301      	movs	r3, #1
24008712:	60fb      	str	r3, [r7, #12]
24008714:	e002      	b.n	2400871c <HAL_FLASH_IRQHandler+0x124>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
24008716:	4b0e      	ldr	r3, [pc, #56]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008718:	691b      	ldr	r3, [r3, #16]
2400871a:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
2400871c:	4b0c      	ldr	r3, [pc, #48]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400871e:	2200      	movs	r2, #0
24008720:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
24008722:	68f8      	ldr	r0, [r7, #12]
24008724:	f000 f820 	bl	24008768 <HAL_FLASH_OperationErrorCallback>
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
  }
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
24008728:	4b09      	ldr	r3, [pc, #36]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
2400872a:	781b      	ldrb	r3, [r3, #0]
2400872c:	b2db      	uxtb	r3, r3
2400872e:	2b00      	cmp	r3, #0
24008730:	d108      	bne.n	24008744 <HAL_FLASH_IRQHandler+0x14c>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24008732:	4b06      	ldr	r3, [pc, #24]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
24008734:	68db      	ldr	r3, [r3, #12]
24008736:	4a05      	ldr	r2, [pc, #20]	; (2400874c <HAL_FLASH_IRQHandler+0x154>)
24008738:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
2400873c:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400873e:	4b04      	ldr	r3, [pc, #16]	; (24008750 <HAL_FLASH_IRQHandler+0x158>)
24008740:	2200      	movs	r2, #0
24008742:	751a      	strb	r2, [r3, #20]
  }
}
24008744:	bf00      	nop
24008746:	3710      	adds	r7, #16
24008748:	46bd      	mov	sp, r7
2400874a:	bd80      	pop	{r7, pc}
2400874c:	52002000 	.word	0x52002000
24008750:	24000618 	.word	0x24000618

24008754 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
24008754:	b480      	push	{r7}
24008756:	b083      	sub	sp, #12
24008758:	af00      	add	r7, sp, #0
2400875a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
2400875c:	bf00      	nop
2400875e:	370c      	adds	r7, #12
24008760:	46bd      	mov	sp, r7
24008762:	f85d 7b04 	ldr.w	r7, [sp], #4
24008766:	4770      	bx	lr

24008768 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
24008768:	b480      	push	{r7}
2400876a:	b083      	sub	sp, #12
2400876c:	af00      	add	r7, sp, #0
2400876e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
24008770:	bf00      	nop
24008772:	370c      	adds	r7, #12
24008774:	46bd      	mov	sp, r7
24008776:	f85d 7b04 	ldr.w	r7, [sp], #4
2400877a:	4770      	bx	lr

2400877c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
2400877c:	b480      	push	{r7}
2400877e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008780:	4b0c      	ldr	r3, [pc, #48]	; (240087b4 <HAL_FLASH_Unlock+0x38>)
24008782:	68db      	ldr	r3, [r3, #12]
24008784:	f003 0301 	and.w	r3, r3, #1
24008788:	2b00      	cmp	r3, #0
2400878a:	d00d      	beq.n	240087a8 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
2400878c:	4b09      	ldr	r3, [pc, #36]	; (240087b4 <HAL_FLASH_Unlock+0x38>)
2400878e:	4a0a      	ldr	r2, [pc, #40]	; (240087b8 <HAL_FLASH_Unlock+0x3c>)
24008790:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24008792:	4b08      	ldr	r3, [pc, #32]	; (240087b4 <HAL_FLASH_Unlock+0x38>)
24008794:	4a09      	ldr	r2, [pc, #36]	; (240087bc <HAL_FLASH_Unlock+0x40>)
24008796:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008798:	4b06      	ldr	r3, [pc, #24]	; (240087b4 <HAL_FLASH_Unlock+0x38>)
2400879a:	68db      	ldr	r3, [r3, #12]
2400879c:	f003 0301 	and.w	r3, r3, #1
240087a0:	2b00      	cmp	r3, #0
240087a2:	d001      	beq.n	240087a8 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
240087a4:	2301      	movs	r3, #1
240087a6:	e000      	b.n	240087aa <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
240087a8:	2300      	movs	r3, #0
}
240087aa:	4618      	mov	r0, r3
240087ac:	46bd      	mov	sp, r7
240087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240087b2:	4770      	bx	lr
240087b4:	52002000 	.word	0x52002000
240087b8:	45670123 	.word	0x45670123
240087bc:	cdef89ab 	.word	0xcdef89ab

240087c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
240087c0:	b480      	push	{r7}
240087c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
240087c4:	4b09      	ldr	r3, [pc, #36]	; (240087ec <HAL_FLASH_Lock+0x2c>)
240087c6:	68db      	ldr	r3, [r3, #12]
240087c8:	4a08      	ldr	r2, [pc, #32]	; (240087ec <HAL_FLASH_Lock+0x2c>)
240087ca:	f043 0301 	orr.w	r3, r3, #1
240087ce:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
240087d0:	4b06      	ldr	r3, [pc, #24]	; (240087ec <HAL_FLASH_Lock+0x2c>)
240087d2:	68db      	ldr	r3, [r3, #12]
240087d4:	f003 0301 	and.w	r3, r3, #1
240087d8:	2b00      	cmp	r3, #0
240087da:	d101      	bne.n	240087e0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
240087dc:	2301      	movs	r3, #1
240087de:	e000      	b.n	240087e2 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
240087e0:	2300      	movs	r3, #0
}
240087e2:	4618      	mov	r0, r3
240087e4:	46bd      	mov	sp, r7
240087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
240087ea:	4770      	bx	lr
240087ec:	52002000 	.word	0x52002000

240087f0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
240087f0:	b480      	push	{r7}
240087f2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
240087f4:	4b0c      	ldr	r3, [pc, #48]	; (24008828 <HAL_FLASH_OB_Unlock+0x38>)
240087f6:	699b      	ldr	r3, [r3, #24]
240087f8:	f003 0301 	and.w	r3, r3, #1
240087fc:	2b00      	cmp	r3, #0
240087fe:	d00d      	beq.n	2400881c <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
24008800:	4b09      	ldr	r3, [pc, #36]	; (24008828 <HAL_FLASH_OB_Unlock+0x38>)
24008802:	4a0a      	ldr	r2, [pc, #40]	; (2400882c <HAL_FLASH_OB_Unlock+0x3c>)
24008804:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
24008806:	4b08      	ldr	r3, [pc, #32]	; (24008828 <HAL_FLASH_OB_Unlock+0x38>)
24008808:	4a09      	ldr	r2, [pc, #36]	; (24008830 <HAL_FLASH_OB_Unlock+0x40>)
2400880a:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
2400880c:	4b06      	ldr	r3, [pc, #24]	; (24008828 <HAL_FLASH_OB_Unlock+0x38>)
2400880e:	699b      	ldr	r3, [r3, #24]
24008810:	f003 0301 	and.w	r3, r3, #1
24008814:	2b00      	cmp	r3, #0
24008816:	d001      	beq.n	2400881c <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
24008818:	2301      	movs	r3, #1
2400881a:	e000      	b.n	2400881e <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
2400881c:	2300      	movs	r3, #0
}
2400881e:	4618      	mov	r0, r3
24008820:	46bd      	mov	sp, r7
24008822:	f85d 7b04 	ldr.w	r7, [sp], #4
24008826:	4770      	bx	lr
24008828:	52002000 	.word	0x52002000
2400882c:	08192a3b 	.word	0x08192a3b
24008830:	4c5d6e7f 	.word	0x4c5d6e7f

24008834 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
24008834:	b480      	push	{r7}
24008836:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
24008838:	4b09      	ldr	r3, [pc, #36]	; (24008860 <HAL_FLASH_OB_Lock+0x2c>)
2400883a:	699b      	ldr	r3, [r3, #24]
2400883c:	4a08      	ldr	r2, [pc, #32]	; (24008860 <HAL_FLASH_OB_Lock+0x2c>)
2400883e:	f043 0301 	orr.w	r3, r3, #1
24008842:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
24008844:	4b06      	ldr	r3, [pc, #24]	; (24008860 <HAL_FLASH_OB_Lock+0x2c>)
24008846:	699b      	ldr	r3, [r3, #24]
24008848:	f003 0301 	and.w	r3, r3, #1
2400884c:	2b00      	cmp	r3, #0
2400884e:	d101      	bne.n	24008854 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
24008850:	2301      	movs	r3, #1
24008852:	e000      	b.n	24008856 <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
24008854:	2300      	movs	r3, #0
}
24008856:	4618      	mov	r0, r3
24008858:	46bd      	mov	sp, r7
2400885a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400885e:	4770      	bx	lr
24008860:	52002000 	.word	0x52002000

24008864 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
24008864:	b580      	push	{r7, lr}
24008866:	b082      	sub	sp, #8
24008868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
2400886a:	2101      	movs	r1, #1
2400886c:	f24c 3050 	movw	r0, #50000	; 0xc350
24008870:	f000 f8bc 	bl	240089ec <FLASH_CRC_WaitForLastOperation>
24008874:	4603      	mov	r3, r0
24008876:	2b00      	cmp	r3, #0
24008878:	d002      	beq.n	24008880 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
2400887a:	2301      	movs	r3, #1
2400887c:	71fb      	strb	r3, [r7, #7]
2400887e:	e001      	b.n	24008884 <HAL_FLASH_OB_Launch+0x20>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24008880:	2300      	movs	r3, #0
24008882:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
24008884:	79fb      	ldrb	r3, [r7, #7]
24008886:	2b00      	cmp	r3, #0
24008888:	d10b      	bne.n	240088a2 <HAL_FLASH_OB_Launch+0x3e>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
2400888a:	4b08      	ldr	r3, [pc, #32]	; (240088ac <HAL_FLASH_OB_Launch+0x48>)
2400888c:	699b      	ldr	r3, [r3, #24]
2400888e:	4a07      	ldr	r2, [pc, #28]	; (240088ac <HAL_FLASH_OB_Launch+0x48>)
24008890:	f043 0302 	orr.w	r3, r3, #2
24008894:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24008896:	f24c 3050 	movw	r0, #50000	; 0xc350
2400889a:	f000 f86b 	bl	24008974 <FLASH_OB_WaitForLastOperation>
2400889e:	4603      	mov	r3, r0
240088a0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
240088a2:	79fb      	ldrb	r3, [r7, #7]
}
240088a4:	4618      	mov	r0, r3
240088a6:	3708      	adds	r7, #8
240088a8:	46bd      	mov	sp, r7
240088aa:	bd80      	pop	{r7, pc}
240088ac:	52002000 	.word	0x52002000

240088b0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
240088b0:	b480      	push	{r7}
240088b2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
240088b4:	4b03      	ldr	r3, [pc, #12]	; (240088c4 <HAL_FLASH_GetError+0x14>)
240088b6:	699b      	ldr	r3, [r3, #24]
}
240088b8:	4618      	mov	r0, r3
240088ba:	46bd      	mov	sp, r7
240088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240088c0:	4770      	bx	lr
240088c2:	bf00      	nop
240088c4:	24000618 	.word	0x24000618

240088c8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
240088c8:	b580      	push	{r7, lr}
240088ca:	b086      	sub	sp, #24
240088cc:	af00      	add	r7, sp, #0
240088ce:	6078      	str	r0, [r7, #4]
240088d0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
240088d2:	2304      	movs	r3, #4
240088d4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
240088d6:	2300      	movs	r3, #0
240088d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
240088da:	f7f9 fc37 	bl	2400214c <HAL_GetTick>
240088de:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
240088e0:	e010      	b.n	24008904 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
240088e2:	687b      	ldr	r3, [r7, #4]
240088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
240088e8:	d00c      	beq.n	24008904 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240088ea:	f7f9 fc2f 	bl	2400214c <HAL_GetTick>
240088ee:	4602      	mov	r2, r0
240088f0:	68fb      	ldr	r3, [r7, #12]
240088f2:	1ad3      	subs	r3, r2, r3
240088f4:	687a      	ldr	r2, [r7, #4]
240088f6:	429a      	cmp	r2, r3
240088f8:	d302      	bcc.n	24008900 <FLASH_WaitForLastOperation+0x38>
240088fa:	687b      	ldr	r3, [r7, #4]
240088fc:	2b00      	cmp	r3, #0
240088fe:	d101      	bne.n	24008904 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
24008900:	2303      	movs	r3, #3
24008902:	e02d      	b.n	24008960 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008904:	4b18      	ldr	r3, [pc, #96]	; (24008968 <FLASH_WaitForLastOperation+0xa0>)
24008906:	691a      	ldr	r2, [r3, #16]
24008908:	693b      	ldr	r3, [r7, #16]
2400890a:	4013      	ands	r3, r2
2400890c:	693a      	ldr	r2, [r7, #16]
2400890e:	429a      	cmp	r2, r3
24008910:	d0e7      	beq.n	240088e2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
24008912:	683b      	ldr	r3, [r7, #0]
24008914:	2b01      	cmp	r3, #1
24008916:	d104      	bne.n	24008922 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
24008918:	4b13      	ldr	r3, [pc, #76]	; (24008968 <FLASH_WaitForLastOperation+0xa0>)
2400891a:	691a      	ldr	r2, [r3, #16]
2400891c:	4b13      	ldr	r3, [pc, #76]	; (2400896c <FLASH_WaitForLastOperation+0xa4>)
2400891e:	4013      	ands	r3, r2
24008920:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
24008922:	697b      	ldr	r3, [r7, #20]
24008924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008928:	2b00      	cmp	r3, #0
2400892a:	d00a      	beq.n	24008942 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
2400892c:	4b10      	ldr	r3, [pc, #64]	; (24008970 <FLASH_WaitForLastOperation+0xa8>)
2400892e:	699a      	ldr	r2, [r3, #24]
24008930:	697b      	ldr	r3, [r7, #20]
24008932:	4313      	orrs	r3, r2
24008934:	4a0e      	ldr	r2, [pc, #56]	; (24008970 <FLASH_WaitForLastOperation+0xa8>)
24008936:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
24008938:	4a0b      	ldr	r2, [pc, #44]	; (24008968 <FLASH_WaitForLastOperation+0xa0>)
2400893a:	697b      	ldr	r3, [r7, #20]
2400893c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
2400893e:	2301      	movs	r3, #1
24008940:	e00e      	b.n	24008960 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
24008942:	683b      	ldr	r3, [r7, #0]
24008944:	2b01      	cmp	r3, #1
24008946:	d10a      	bne.n	2400895e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
24008948:	4b07      	ldr	r3, [pc, #28]	; (24008968 <FLASH_WaitForLastOperation+0xa0>)
2400894a:	691b      	ldr	r3, [r3, #16]
2400894c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008954:	d103      	bne.n	2400895e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008956:	4b04      	ldr	r3, [pc, #16]	; (24008968 <FLASH_WaitForLastOperation+0xa0>)
24008958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2400895c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
2400895e:	2300      	movs	r3, #0
}
24008960:	4618      	mov	r0, r3
24008962:	3718      	adds	r7, #24
24008964:	46bd      	mov	sp, r7
24008966:	bd80      	pop	{r7, pc}
24008968:	52002000 	.word	0x52002000
2400896c:	17ee0000 	.word	0x17ee0000
24008970:	24000618 	.word	0x24000618

24008974 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
24008974:	b580      	push	{r7, lr}
24008976:	b084      	sub	sp, #16
24008978:	af00      	add	r7, sp, #0
2400897a:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
2400897c:	f7f9 fbe6 	bl	2400214c <HAL_GetTick>
24008980:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24008982:	e010      	b.n	240089a6 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
24008984:	687b      	ldr	r3, [r7, #4]
24008986:	f1b3 3fff 	cmp.w	r3, #4294967295
2400898a:	d00c      	beq.n	240089a6 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400898c:	f7f9 fbde 	bl	2400214c <HAL_GetTick>
24008990:	4602      	mov	r2, r0
24008992:	68fb      	ldr	r3, [r7, #12]
24008994:	1ad3      	subs	r3, r2, r3
24008996:	687a      	ldr	r2, [r7, #4]
24008998:	429a      	cmp	r2, r3
2400899a:	d302      	bcc.n	240089a2 <FLASH_OB_WaitForLastOperation+0x2e>
2400899c:	687b      	ldr	r3, [r7, #4]
2400899e:	2b00      	cmp	r3, #0
240089a0:	d101      	bne.n	240089a6 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
240089a2:	2303      	movs	r3, #3
240089a4:	e01a      	b.n	240089dc <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
240089a6:	4b0f      	ldr	r3, [pc, #60]	; (240089e4 <FLASH_OB_WaitForLastOperation+0x70>)
240089a8:	69db      	ldr	r3, [r3, #28]
240089aa:	f003 0301 	and.w	r3, r3, #1
240089ae:	2b00      	cmp	r3, #0
240089b0:	d1e8      	bne.n	24008984 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
240089b2:	4b0c      	ldr	r3, [pc, #48]	; (240089e4 <FLASH_OB_WaitForLastOperation+0x70>)
240089b4:	69db      	ldr	r3, [r3, #28]
240089b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240089ba:	2b00      	cmp	r3, #0
240089bc:	d00d      	beq.n	240089da <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
240089be:	4b0a      	ldr	r3, [pc, #40]	; (240089e8 <FLASH_OB_WaitForLastOperation+0x74>)
240089c0:	699b      	ldr	r3, [r3, #24]
240089c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240089c6:	4a08      	ldr	r2, [pc, #32]	; (240089e8 <FLASH_OB_WaitForLastOperation+0x74>)
240089c8:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
240089ca:	4b06      	ldr	r3, [pc, #24]	; (240089e4 <FLASH_OB_WaitForLastOperation+0x70>)
240089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240089ce:	4a05      	ldr	r2, [pc, #20]	; (240089e4 <FLASH_OB_WaitForLastOperation+0x70>)
240089d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240089d4:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
240089d6:	2301      	movs	r3, #1
240089d8:	e000      	b.n	240089dc <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
240089da:	2300      	movs	r3, #0
}
240089dc:	4618      	mov	r0, r3
240089de:	3710      	adds	r7, #16
240089e0:	46bd      	mov	sp, r7
240089e2:	bd80      	pop	{r7, pc}
240089e4:	52002000 	.word	0x52002000
240089e8:	24000618 	.word	0x24000618

240089ec <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
240089ec:	b580      	push	{r7, lr}
240089ee:	b084      	sub	sp, #16
240089f0:	af00      	add	r7, sp, #0
240089f2:	6078      	str	r0, [r7, #4]
240089f4:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
240089f6:	f7f9 fba9 	bl	2400214c <HAL_GetTick>
240089fa:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
240089fc:	683b      	ldr	r3, [r7, #0]
240089fe:	2b01      	cmp	r3, #1
24008a00:	d102      	bne.n	24008a08 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
24008a02:	2308      	movs	r3, #8
24008a04:	60fb      	str	r3, [r7, #12]
24008a06:	e013      	b.n	24008a30 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
24008a08:	4b1a      	ldr	r3, [pc, #104]	; (24008a74 <FLASH_CRC_WaitForLastOperation+0x88>)
24008a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008a0c:	e010      	b.n	24008a30 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
24008a0e:	687b      	ldr	r3, [r7, #4]
24008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
24008a14:	d00c      	beq.n	24008a30 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008a16:	f7f9 fb99 	bl	2400214c <HAL_GetTick>
24008a1a:	4602      	mov	r2, r0
24008a1c:	68bb      	ldr	r3, [r7, #8]
24008a1e:	1ad3      	subs	r3, r2, r3
24008a20:	687a      	ldr	r2, [r7, #4]
24008a22:	429a      	cmp	r2, r3
24008a24:	d302      	bcc.n	24008a2c <FLASH_CRC_WaitForLastOperation+0x40>
24008a26:	687b      	ldr	r3, [r7, #4]
24008a28:	2b00      	cmp	r3, #0
24008a2a:	d101      	bne.n	24008a30 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
24008a2c:	2303      	movs	r3, #3
24008a2e:	e01d      	b.n	24008a6c <FLASH_CRC_WaitForLastOperation+0x80>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008a30:	4b11      	ldr	r3, [pc, #68]	; (24008a78 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008a32:	691a      	ldr	r2, [r3, #16]
24008a34:	68fb      	ldr	r3, [r7, #12]
24008a36:	4013      	ands	r3, r2
24008a38:	68fa      	ldr	r2, [r7, #12]
24008a3a:	429a      	cmp	r2, r3
24008a3c:	d0e7      	beq.n	24008a0e <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
24008a3e:	683b      	ldr	r3, [r7, #0]
24008a40:	2b01      	cmp	r3, #1
24008a42:	d112      	bne.n	24008a6a <FLASH_CRC_WaitForLastOperation+0x7e>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
24008a44:	4b0c      	ldr	r3, [pc, #48]	; (24008a78 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008a46:	691b      	ldr	r3, [r3, #16]
24008a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24008a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008a50:	d10b      	bne.n	24008a6a <FLASH_CRC_WaitForLastOperation+0x7e>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
24008a52:	4b0a      	ldr	r3, [pc, #40]	; (24008a7c <FLASH_CRC_WaitForLastOperation+0x90>)
24008a54:	699b      	ldr	r3, [r3, #24]
24008a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008a5a:	4a08      	ldr	r2, [pc, #32]	; (24008a7c <FLASH_CRC_WaitForLastOperation+0x90>)
24008a5c:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
24008a5e:	4b06      	ldr	r3, [pc, #24]	; (24008a78 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24008a64:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
24008a66:	2301      	movs	r3, #1
24008a68:	e000      	b.n	24008a6c <FLASH_CRC_WaitForLastOperation+0x80>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
24008a6a:	2300      	movs	r3, #0
}
24008a6c:	4618      	mov	r0, r3
24008a6e:	3710      	adds	r7, #16
24008a70:	46bd      	mov	sp, r7
24008a72:	bd80      	pop	{r7, pc}
24008a74:	80000008 	.word	0x80000008
24008a78:	52002000 	.word	0x52002000
24008a7c:	24000618 	.word	0x24000618

24008a80 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
24008a80:	b580      	push	{r7, lr}
24008a82:	b084      	sub	sp, #16
24008a84:	af00      	add	r7, sp, #0
24008a86:	6078      	str	r0, [r7, #4]
24008a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24008a8a:	2300      	movs	r3, #0
24008a8c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008a8e:	4b3f      	ldr	r3, [pc, #252]	; (24008b8c <HAL_FLASHEx_Erase+0x10c>)
24008a90:	7d1b      	ldrb	r3, [r3, #20]
24008a92:	2b01      	cmp	r3, #1
24008a94:	d101      	bne.n	24008a9a <HAL_FLASHEx_Erase+0x1a>
24008a96:	2302      	movs	r3, #2
24008a98:	e074      	b.n	24008b84 <HAL_FLASHEx_Erase+0x104>
24008a9a:	4b3c      	ldr	r3, [pc, #240]	; (24008b8c <HAL_FLASHEx_Erase+0x10c>)
24008a9c:	2201      	movs	r2, #1
24008a9e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008aa0:	4b3a      	ldr	r3, [pc, #232]	; (24008b8c <HAL_FLASHEx_Erase+0x10c>)
24008aa2:	2200      	movs	r2, #0
24008aa4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008aa6:	687b      	ldr	r3, [r7, #4]
24008aa8:	685b      	ldr	r3, [r3, #4]
24008aaa:	f003 0301 	and.w	r3, r3, #1
24008aae:	2b00      	cmp	r3, #0
24008ab0:	d009      	beq.n	24008ac6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008ab2:	2101      	movs	r1, #1
24008ab4:	f24c 3050 	movw	r0, #50000	; 0xc350
24008ab8:	f7ff ff06 	bl	240088c8 <FLASH_WaitForLastOperation>
24008abc:	4603      	mov	r3, r0
24008abe:	2b00      	cmp	r3, #0
24008ac0:	d001      	beq.n	24008ac6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
24008ac2:	2301      	movs	r3, #1
24008ac4:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
24008ac6:	7bfb      	ldrb	r3, [r7, #15]
24008ac8:	2b00      	cmp	r3, #0
24008aca:	d157      	bne.n	24008b7c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24008acc:	687b      	ldr	r3, [r7, #4]
24008ace:	681b      	ldr	r3, [r3, #0]
24008ad0:	2b01      	cmp	r3, #1
24008ad2:	d11e      	bne.n	24008b12 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24008ad4:	687b      	ldr	r3, [r7, #4]
24008ad6:	691a      	ldr	r2, [r3, #16]
24008ad8:	687b      	ldr	r3, [r7, #4]
24008ada:	685b      	ldr	r3, [r3, #4]
24008adc:	4619      	mov	r1, r3
24008ade:	4610      	mov	r0, r2
24008ae0:	f000 fa6c 	bl	24008fbc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008ae4:	687b      	ldr	r3, [r7, #4]
24008ae6:	685b      	ldr	r3, [r3, #4]
24008ae8:	f003 0301 	and.w	r3, r3, #1
24008aec:	2b00      	cmp	r3, #0
24008aee:	d045      	beq.n	24008b7c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008af0:	2101      	movs	r1, #1
24008af2:	f24c 3050 	movw	r0, #50000	; 0xc350
24008af6:	f7ff fee7 	bl	240088c8 <FLASH_WaitForLastOperation>
24008afa:	4603      	mov	r3, r0
24008afc:	2b00      	cmp	r3, #0
24008afe:	d001      	beq.n	24008b04 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
24008b00:	2301      	movs	r3, #1
24008b02:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
24008b04:	4b22      	ldr	r3, [pc, #136]	; (24008b90 <HAL_FLASHEx_Erase+0x110>)
24008b06:	68db      	ldr	r3, [r3, #12]
24008b08:	4a21      	ldr	r2, [pc, #132]	; (24008b90 <HAL_FLASHEx_Erase+0x110>)
24008b0a:	f023 0308 	bic.w	r3, r3, #8
24008b0e:	60d3      	str	r3, [r2, #12]
24008b10:	e034      	b.n	24008b7c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
24008b12:	683b      	ldr	r3, [r7, #0]
24008b14:	f04f 32ff 	mov.w	r2, #4294967295
24008b18:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008b1a:	687b      	ldr	r3, [r7, #4]
24008b1c:	689b      	ldr	r3, [r3, #8]
24008b1e:	60bb      	str	r3, [r7, #8]
24008b20:	e024      	b.n	24008b6c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
24008b22:	687b      	ldr	r3, [r7, #4]
24008b24:	6859      	ldr	r1, [r3, #4]
24008b26:	687b      	ldr	r3, [r7, #4]
24008b28:	691b      	ldr	r3, [r3, #16]
24008b2a:	461a      	mov	r2, r3
24008b2c:	68b8      	ldr	r0, [r7, #8]
24008b2e:	f000 fa69 	bl	24009004 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008b32:	687b      	ldr	r3, [r7, #4]
24008b34:	685b      	ldr	r3, [r3, #4]
24008b36:	f003 0301 	and.w	r3, r3, #1
24008b3a:	2b00      	cmp	r3, #0
24008b3c:	d00c      	beq.n	24008b58 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24008b3e:	2101      	movs	r1, #1
24008b40:	f24c 3050 	movw	r0, #50000	; 0xc350
24008b44:	f7ff fec0 	bl	240088c8 <FLASH_WaitForLastOperation>
24008b48:	4603      	mov	r3, r0
24008b4a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24008b4c:	4b10      	ldr	r3, [pc, #64]	; (24008b90 <HAL_FLASHEx_Erase+0x110>)
24008b4e:	68da      	ldr	r2, [r3, #12]
24008b50:	490f      	ldr	r1, [pc, #60]	; (24008b90 <HAL_FLASHEx_Erase+0x110>)
24008b52:	4b10      	ldr	r3, [pc, #64]	; (24008b94 <HAL_FLASHEx_Erase+0x114>)
24008b54:	4013      	ands	r3, r2
24008b56:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
24008b58:	7bfb      	ldrb	r3, [r7, #15]
24008b5a:	2b00      	cmp	r3, #0
24008b5c:	d003      	beq.n	24008b66 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
24008b5e:	683b      	ldr	r3, [r7, #0]
24008b60:	68ba      	ldr	r2, [r7, #8]
24008b62:	601a      	str	r2, [r3, #0]
          break;
24008b64:	e00a      	b.n	24008b7c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008b66:	68bb      	ldr	r3, [r7, #8]
24008b68:	3301      	adds	r3, #1
24008b6a:	60bb      	str	r3, [r7, #8]
24008b6c:	687b      	ldr	r3, [r7, #4]
24008b6e:	68da      	ldr	r2, [r3, #12]
24008b70:	687b      	ldr	r3, [r7, #4]
24008b72:	689b      	ldr	r3, [r3, #8]
24008b74:	4413      	add	r3, r2
24008b76:	68ba      	ldr	r2, [r7, #8]
24008b78:	429a      	cmp	r2, r3
24008b7a:	d3d2      	bcc.n	24008b22 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008b7c:	4b03      	ldr	r3, [pc, #12]	; (24008b8c <HAL_FLASHEx_Erase+0x10c>)
24008b7e:	2200      	movs	r2, #0
24008b80:	751a      	strb	r2, [r3, #20]

  return status;
24008b82:	7bfb      	ldrb	r3, [r7, #15]
}
24008b84:	4618      	mov	r0, r3
24008b86:	3710      	adds	r7, #16
24008b88:	46bd      	mov	sp, r7
24008b8a:	bd80      	pop	{r7, pc}
24008b8c:	24000618 	.word	0x24000618
24008b90:	52002000 	.word	0x52002000
24008b94:	fffff8fb 	.word	0xfffff8fb

24008b98 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
24008b98:	b580      	push	{r7, lr}
24008b9a:	b084      	sub	sp, #16
24008b9c:	af00      	add	r7, sp, #0
24008b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24008ba0:	2300      	movs	r3, #0
24008ba2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008ba4:	4b31      	ldr	r3, [pc, #196]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008ba6:	7d1b      	ldrb	r3, [r3, #20]
24008ba8:	2b01      	cmp	r3, #1
24008baa:	d101      	bne.n	24008bb0 <HAL_FLASHEx_Erase_IT+0x18>
24008bac:	2302      	movs	r3, #2
24008bae:	e059      	b.n	24008c64 <HAL_FLASHEx_Erase_IT+0xcc>
24008bb0:	4b2e      	ldr	r3, [pc, #184]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008bb2:	2201      	movs	r2, #1
24008bb4:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008bb6:	4b2d      	ldr	r3, [pc, #180]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008bb8:	2200      	movs	r2, #0
24008bba:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008bbc:	687b      	ldr	r3, [r7, #4]
24008bbe:	685b      	ldr	r3, [r3, #4]
24008bc0:	f003 0301 	and.w	r3, r3, #1
24008bc4:	2b00      	cmp	r3, #0
24008bc6:	d009      	beq.n	24008bdc <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008bc8:	2101      	movs	r1, #1
24008bca:	f24c 3050 	movw	r0, #50000	; 0xc350
24008bce:	f7ff fe7b 	bl	240088c8 <FLASH_WaitForLastOperation>
24008bd2:	4603      	mov	r3, r0
24008bd4:	2b00      	cmp	r3, #0
24008bd6:	d001      	beq.n	24008bdc <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
24008bd8:	2301      	movs	r3, #1
24008bda:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
24008bdc:	7bfb      	ldrb	r3, [r7, #15]
24008bde:	2b00      	cmp	r3, #0
24008be0:	d003      	beq.n	24008bea <HAL_FLASHEx_Erase_IT+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
24008be2:	4b22      	ldr	r3, [pc, #136]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008be4:	2200      	movs	r2, #0
24008be6:	751a      	strb	r2, [r3, #20]
24008be8:	e03b      	b.n	24008c62 <HAL_FLASHEx_Erase_IT+0xca>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008bea:	687b      	ldr	r3, [r7, #4]
24008bec:	685b      	ldr	r3, [r3, #4]
24008bee:	f003 0301 	and.w	r3, r3, #1
24008bf2:	2b00      	cmp	r3, #0
24008bf4:	d005      	beq.n	24008c02 <HAL_FLASHEx_Erase_IT+0x6a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24008bf6:	4b1e      	ldr	r3, [pc, #120]	; (24008c70 <HAL_FLASHEx_Erase_IT+0xd8>)
24008bf8:	68db      	ldr	r3, [r3, #12]
24008bfa:	4a1d      	ldr	r2, [pc, #116]	; (24008c70 <HAL_FLASHEx_Erase_IT+0xd8>)
24008bfc:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24008c00:	60d3      	str	r3, [r2, #12]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24008c02:	687b      	ldr	r3, [r7, #4]
24008c04:	681b      	ldr	r3, [r3, #0]
24008c06:	2b01      	cmp	r3, #1
24008c08:	d113      	bne.n	24008c32 <HAL_FLASHEx_Erase_IT+0x9a>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
24008c0a:	687b      	ldr	r3, [r7, #4]
24008c0c:	685b      	ldr	r3, [r3, #4]
24008c0e:	2b01      	cmp	r3, #1
24008c10:	d103      	bne.n	24008c1a <HAL_FLASHEx_Erase_IT+0x82>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
24008c12:	4b16      	ldr	r3, [pc, #88]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c14:	2202      	movs	r2, #2
24008c16:	701a      	strb	r2, [r3, #0]
24008c18:	e002      	b.n	24008c20 <HAL_FLASHEx_Erase_IT+0x88>
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
24008c1a:	4b14      	ldr	r3, [pc, #80]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c1c:	2207      	movs	r2, #7
24008c1e:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24008c20:	687b      	ldr	r3, [r7, #4]
24008c22:	691a      	ldr	r2, [r3, #16]
24008c24:	687b      	ldr	r3, [r7, #4]
24008c26:	685b      	ldr	r3, [r3, #4]
24008c28:	4619      	mov	r1, r3
24008c2a:	4610      	mov	r0, r2
24008c2c:	f000 f9c6 	bl	24008fbc <FLASH_MassErase>
24008c30:	e017      	b.n	24008c62 <HAL_FLASHEx_Erase_IT+0xca>
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
24008c32:	4b0e      	ldr	r3, [pc, #56]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c34:	2201      	movs	r2, #1
24008c36:	701a      	strb	r2, [r3, #0]
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
24008c38:	687b      	ldr	r3, [r7, #4]
24008c3a:	68db      	ldr	r3, [r3, #12]
24008c3c:	4a0b      	ldr	r2, [pc, #44]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c3e:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
24008c40:	687b      	ldr	r3, [r7, #4]
24008c42:	689b      	ldr	r3, [r3, #8]
24008c44:	4a09      	ldr	r2, [pc, #36]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c46:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
24008c48:	687b      	ldr	r3, [r7, #4]
24008c4a:	691b      	ldr	r3, [r3, #16]
24008c4c:	4a07      	ldr	r2, [pc, #28]	; (24008c6c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c4e:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
24008c50:	687b      	ldr	r3, [r7, #4]
24008c52:	6898      	ldr	r0, [r3, #8]
24008c54:	687b      	ldr	r3, [r7, #4]
24008c56:	6859      	ldr	r1, [r3, #4]
24008c58:	687b      	ldr	r3, [r7, #4]
24008c5a:	691b      	ldr	r3, [r3, #16]
24008c5c:	461a      	mov	r2, r3
24008c5e:	f000 f9d1 	bl	24009004 <FLASH_Erase_Sector>
    }
  }

  return status;
24008c62:	7bfb      	ldrb	r3, [r7, #15]
}
24008c64:	4618      	mov	r0, r3
24008c66:	3710      	adds	r7, #16
24008c68:	46bd      	mov	sp, r7
24008c6a:	bd80      	pop	{r7, pc}
24008c6c:	24000618 	.word	0x24000618
24008c70:	52002000 	.word	0x52002000

24008c74 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
24008c74:	b580      	push	{r7, lr}
24008c76:	b084      	sub	sp, #16
24008c78:	af00      	add	r7, sp, #0
24008c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008c7c:	4b48      	ldr	r3, [pc, #288]	; (24008da0 <HAL_FLASHEx_OBProgram+0x12c>)
24008c7e:	7d1b      	ldrb	r3, [r3, #20]
24008c80:	2b01      	cmp	r3, #1
24008c82:	d101      	bne.n	24008c88 <HAL_FLASHEx_OBProgram+0x14>
24008c84:	2302      	movs	r3, #2
24008c86:	e087      	b.n	24008d98 <HAL_FLASHEx_OBProgram+0x124>
24008c88:	4b45      	ldr	r3, [pc, #276]	; (24008da0 <HAL_FLASHEx_OBProgram+0x12c>)
24008c8a:	2201      	movs	r2, #1
24008c8c:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008c8e:	4b44      	ldr	r3, [pc, #272]	; (24008da0 <HAL_FLASHEx_OBProgram+0x12c>)
24008c90:	2200      	movs	r2, #0
24008c92:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008c94:	2101      	movs	r1, #1
24008c96:	f24c 3050 	movw	r0, #50000	; 0xc350
24008c9a:	f7ff fe15 	bl	240088c8 <FLASH_WaitForLastOperation>
24008c9e:	4603      	mov	r3, r0
24008ca0:	2b00      	cmp	r3, #0
24008ca2:	d002      	beq.n	24008caa <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
24008ca4:	2301      	movs	r3, #1
24008ca6:	73fb      	strb	r3, [r7, #15]
24008ca8:	e001      	b.n	24008cae <HAL_FLASHEx_OBProgram+0x3a>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24008caa:	2300      	movs	r3, #0
24008cac:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
24008cae:	7bfb      	ldrb	r3, [r7, #15]
24008cb0:	2b00      	cmp	r3, #0
24008cb2:	d16d      	bne.n	24008d90 <HAL_FLASHEx_OBProgram+0x11c>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
24008cb4:	687b      	ldr	r3, [r7, #4]
24008cb6:	681b      	ldr	r3, [r3, #0]
24008cb8:	f003 0301 	and.w	r3, r3, #1
24008cbc:	2b00      	cmp	r3, #0
24008cbe:	d014      	beq.n	24008cea <HAL_FLASHEx_OBProgram+0x76>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
24008cc0:	687b      	ldr	r3, [r7, #4]
24008cc2:	685b      	ldr	r3, [r3, #4]
24008cc4:	2b01      	cmp	r3, #1
24008cc6:	d108      	bne.n	24008cda <HAL_FLASHEx_OBProgram+0x66>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
24008cc8:	687b      	ldr	r3, [r7, #4]
24008cca:	689a      	ldr	r2, [r3, #8]
24008ccc:	687b      	ldr	r3, [r7, #4]
24008cce:	69db      	ldr	r3, [r3, #28]
24008cd0:	4619      	mov	r1, r3
24008cd2:	4610      	mov	r0, r2
24008cd4:	f000 f9ba 	bl	2400904c <FLASH_OB_EnableWRP>
24008cd8:	e007      	b.n	24008cea <HAL_FLASHEx_OBProgram+0x76>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
24008cda:	687b      	ldr	r3, [r7, #4]
24008cdc:	689a      	ldr	r2, [r3, #8]
24008cde:	687b      	ldr	r3, [r7, #4]
24008ce0:	69db      	ldr	r3, [r3, #28]
24008ce2:	4619      	mov	r1, r3
24008ce4:	4610      	mov	r0, r2
24008ce6:	f000 f9cb 	bl	24009080 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
24008cea:	687b      	ldr	r3, [r7, #4]
24008cec:	681b      	ldr	r3, [r3, #0]
24008cee:	f003 0302 	and.w	r3, r3, #2
24008cf2:	2b00      	cmp	r3, #0
24008cf4:	d004      	beq.n	24008d00 <HAL_FLASHEx_OBProgram+0x8c>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
24008cf6:	687b      	ldr	r3, [r7, #4]
24008cf8:	68db      	ldr	r3, [r3, #12]
24008cfa:	4618      	mov	r0, r3
24008cfc:	f000 fa00 	bl	24009100 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
24008d00:	687b      	ldr	r3, [r7, #4]
24008d02:	681b      	ldr	r3, [r3, #0]
24008d04:	f003 0304 	and.w	r3, r3, #4
24008d08:	2b00      	cmp	r3, #0
24008d0a:	d007      	beq.n	24008d1c <HAL_FLASHEx_OBProgram+0xa8>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
24008d0c:	687b      	ldr	r3, [r7, #4]
24008d0e:	695a      	ldr	r2, [r3, #20]
24008d10:	687b      	ldr	r3, [r7, #4]
24008d12:	699b      	ldr	r3, [r3, #24]
24008d14:	4619      	mov	r1, r3
24008d16:	4610      	mov	r0, r2
24008d18:	f000 fa22 	bl	24009160 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
24008d1c:	687b      	ldr	r3, [r7, #4]
24008d1e:	681b      	ldr	r3, [r3, #0]
24008d20:	f003 0308 	and.w	r3, r3, #8
24008d24:	2b00      	cmp	r3, #0
24008d26:	d009      	beq.n	24008d3c <HAL_FLASHEx_OBProgram+0xc8>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
24008d28:	687b      	ldr	r3, [r7, #4]
24008d2a:	6a18      	ldr	r0, [r3, #32]
24008d2c:	687b      	ldr	r3, [r7, #4]
24008d2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
24008d30:	687b      	ldr	r3, [r7, #4]
24008d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24008d34:	687b      	ldr	r3, [r7, #4]
24008d36:	69db      	ldr	r3, [r3, #28]
24008d38:	f000 faba 	bl	240092b0 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
24008d3c:	687b      	ldr	r3, [r7, #4]
24008d3e:	681b      	ldr	r3, [r3, #0]
24008d40:	f003 0310 	and.w	r3, r3, #16
24008d44:	2b00      	cmp	r3, #0
24008d46:	d004      	beq.n	24008d52 <HAL_FLASHEx_OBProgram+0xde>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
24008d48:	687b      	ldr	r3, [r7, #4]
24008d4a:	691b      	ldr	r3, [r3, #16]
24008d4c:	4618      	mov	r0, r3
24008d4e:	f000 fb09 	bl	24009364 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
24008d52:	687b      	ldr	r3, [r7, #4]
24008d54:	681b      	ldr	r3, [r3, #0]
24008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
24008d5a:	2b00      	cmp	r3, #0
24008d5c:	d008      	beq.n	24008d70 <HAL_FLASHEx_OBProgram+0xfc>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
24008d5e:	687b      	ldr	r3, [r7, #4]
24008d60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
24008d62:	687b      	ldr	r3, [r7, #4]
24008d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
24008d66:	687b      	ldr	r3, [r7, #4]
24008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24008d6a:	461a      	mov	r2, r3
24008d6c:	f000 fb1c 	bl	240093a8 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
24008d70:	687b      	ldr	r3, [r7, #4]
24008d72:	681b      	ldr	r3, [r3, #0]
24008d74:	f003 0320 	and.w	r3, r3, #32
24008d78:	2b00      	cmp	r3, #0
24008d7a:	d009      	beq.n	24008d90 <HAL_FLASHEx_OBProgram+0x11c>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
24008d7c:	687b      	ldr	r3, [r7, #4]
24008d7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
24008d80:	687b      	ldr	r3, [r7, #4]
24008d82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
24008d84:	687b      	ldr	r3, [r7, #4]
24008d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24008d88:	687b      	ldr	r3, [r7, #4]
24008d8a:	69db      	ldr	r3, [r3, #28]
24008d8c:	f000 fb52 	bl	24009434 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008d90:	4b03      	ldr	r3, [pc, #12]	; (24008da0 <HAL_FLASHEx_OBProgram+0x12c>)
24008d92:	2200      	movs	r2, #0
24008d94:	751a      	strb	r2, [r3, #20]

  return status;
24008d96:	7bfb      	ldrb	r3, [r7, #15]
}
24008d98:	4618      	mov	r0, r3
24008d9a:	3710      	adds	r7, #16
24008d9c:	46bd      	mov	sp, r7
24008d9e:	bd80      	pop	{r7, pc}
24008da0:	24000618 	.word	0x24000618

24008da4 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
24008da4:	b580      	push	{r7, lr}
24008da6:	b082      	sub	sp, #8
24008da8:	af00      	add	r7, sp, #0
24008daa:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
24008dac:	687b      	ldr	r3, [r7, #4]
24008dae:	2216      	movs	r2, #22
24008db0:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
24008db2:	f000 f9b9 	bl	24009128 <FLASH_OB_GetRDP>
24008db6:	4602      	mov	r2, r0
24008db8:	687b      	ldr	r3, [r7, #4]
24008dba:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
24008dbc:	f000 fa62 	bl	24009284 <FLASH_OB_GetUser>
24008dc0:	4602      	mov	r2, r0
24008dc2:	687b      	ldr	r3, [r7, #4]
24008dc4:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
24008dc6:	f000 fae1 	bl	2400938c <FLASH_OB_GetBOR>
24008dca:	4602      	mov	r2, r0
24008dcc:	687b      	ldr	r3, [r7, #4]
24008dce:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
#else
  if (pOBInit->Banks == FLASH_BANK_1)
24008dd0:	687b      	ldr	r3, [r7, #4]
24008dd2:	69db      	ldr	r3, [r3, #28]
24008dd4:	2b01      	cmp	r3, #1
24008dd6:	d129      	bne.n	24008e2c <HAL_FLASHEx_OBGetConfig+0x88>
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
24008dd8:	687b      	ldr	r3, [r7, #4]
24008dda:	681b      	ldr	r3, [r3, #0]
24008ddc:	f043 0229 	orr.w	r2, r3, #41	; 0x29
24008de0:	687b      	ldr	r3, [r7, #4]
24008de2:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
24008de4:	687b      	ldr	r3, [r7, #4]
24008de6:	1d18      	adds	r0, r3, #4
24008de8:	687b      	ldr	r3, [r7, #4]
24008dea:	f103 0108 	add.w	r1, r3, #8
24008dee:	687b      	ldr	r3, [r7, #4]
24008df0:	69db      	ldr	r3, [r3, #28]
24008df2:	461a      	mov	r2, r3
24008df4:	f000 f95e 	bl	240090b4 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
24008df8:	687b      	ldr	r3, [r7, #4]
24008dfa:	f103 0020 	add.w	r0, r3, #32
24008dfe:	687b      	ldr	r3, [r7, #4]
24008e00:	f103 0124 	add.w	r1, r3, #36	; 0x24
24008e04:	687b      	ldr	r3, [r7, #4]
24008e06:	f103 0228 	add.w	r2, r3, #40	; 0x28
24008e0a:	687b      	ldr	r3, [r7, #4]
24008e0c:	69db      	ldr	r3, [r3, #28]
24008e0e:	f000 fa71 	bl	240092f4 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
24008e12:	687b      	ldr	r3, [r7, #4]
24008e14:	f103 0038 	add.w	r0, r3, #56	; 0x38
24008e18:	687b      	ldr	r3, [r7, #4]
24008e1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24008e1e:	687b      	ldr	r3, [r7, #4]
24008e20:	f103 0240 	add.w	r2, r3, #64	; 0x40
24008e24:	687b      	ldr	r3, [r7, #4]
24008e26:	69db      	ldr	r3, [r3, #28]
24008e28:	f000 fb28 	bl	2400947c <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
24008e2c:	687b      	ldr	r3, [r7, #4]
24008e2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
24008e32:	687b      	ldr	r3, [r7, #4]
24008e34:	3334      	adds	r3, #52	; 0x34
24008e36:	4619      	mov	r1, r3
24008e38:	4610      	mov	r0, r2
24008e3a:	f000 fadf 	bl	240093fc <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
24008e3e:	687b      	ldr	r3, [r7, #4]
24008e40:	681b      	ldr	r3, [r3, #0]
24008e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24008e46:	687b      	ldr	r3, [r7, #4]
24008e48:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
24008e4a:	bf00      	nop
24008e4c:	3708      	adds	r7, #8
24008e4e:	46bd      	mov	sp, r7
24008e50:	bd80      	pop	{r7, pc}
	...

24008e54 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
24008e54:	b480      	push	{r7}
24008e56:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008e58:	4b0c      	ldr	r3, [pc, #48]	; (24008e8c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008e5a:	68db      	ldr	r3, [r3, #12]
24008e5c:	f003 0301 	and.w	r3, r3, #1
24008e60:	2b00      	cmp	r3, #0
24008e62:	d00d      	beq.n	24008e80 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
24008e64:	4b09      	ldr	r3, [pc, #36]	; (24008e8c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008e66:	4a0a      	ldr	r2, [pc, #40]	; (24008e90 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
24008e68:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24008e6a:	4b08      	ldr	r3, [pc, #32]	; (24008e8c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008e6c:	4a09      	ldr	r2, [pc, #36]	; (24008e94 <HAL_FLASHEx_Unlock_Bank1+0x40>)
24008e6e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008e70:	4b06      	ldr	r3, [pc, #24]	; (24008e8c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008e72:	68db      	ldr	r3, [r3, #12]
24008e74:	f003 0301 	and.w	r3, r3, #1
24008e78:	2b00      	cmp	r3, #0
24008e7a:	d001      	beq.n	24008e80 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
24008e7c:	2301      	movs	r3, #1
24008e7e:	e000      	b.n	24008e82 <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
24008e80:	2300      	movs	r3, #0
}
24008e82:	4618      	mov	r0, r3
24008e84:	46bd      	mov	sp, r7
24008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
24008e8a:	4770      	bx	lr
24008e8c:	52002000 	.word	0x52002000
24008e90:	45670123 	.word	0x45670123
24008e94:	cdef89ab 	.word	0xcdef89ab

24008e98 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
24008e98:	b480      	push	{r7}
24008e9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24008e9c:	4b05      	ldr	r3, [pc, #20]	; (24008eb4 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24008e9e:	68db      	ldr	r3, [r3, #12]
24008ea0:	4a04      	ldr	r2, [pc, #16]	; (24008eb4 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24008ea2:	f043 0301 	orr.w	r3, r3, #1
24008ea6:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
24008ea8:	2300      	movs	r3, #0
}
24008eaa:	4618      	mov	r0, r3
24008eac:	46bd      	mov	sp, r7
24008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
24008eb2:	4770      	bx	lr
24008eb4:	52002000 	.word	0x52002000

24008eb8 <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
24008eb8:	b580      	push	{r7, lr}
24008eba:	b084      	sub	sp, #16
24008ebc:	af00      	add	r7, sp, #0
24008ebe:	6078      	str	r0, [r7, #4]
24008ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24008ec2:	f24c 3050 	movw	r0, #50000	; 0xc350
24008ec6:	f7ff fd55 	bl	24008974 <FLASH_OB_WaitForLastOperation>
24008eca:	4603      	mov	r3, r0
24008ecc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
24008ece:	7bfb      	ldrb	r3, [r7, #15]
24008ed0:	2b00      	cmp	r3, #0
24008ed2:	d169      	bne.n	24008fa8 <HAL_FLASHEx_ComputeCRC+0xf0>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
24008ed4:	687b      	ldr	r3, [r7, #4]
24008ed6:	689b      	ldr	r3, [r3, #8]
24008ed8:	2b01      	cmp	r3, #1
24008eda:	d165      	bne.n	24008fa8 <HAL_FLASHEx_ComputeCRC+0xf0>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
24008edc:	4b35      	ldr	r3, [pc, #212]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008ede:	68db      	ldr	r3, [r3, #12]
24008ee0:	4a34      	ldr	r2, [pc, #208]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24008ee6:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
24008ee8:	4b32      	ldr	r3, [pc, #200]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008eea:	695b      	ldr	r3, [r3, #20]
24008eec:	4a31      	ldr	r2, [pc, #196]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008eee:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
24008ef2:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
24008ef4:	4b2f      	ldr	r3, [pc, #188]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24008ef8:	687b      	ldr	r3, [r7, #4]
24008efa:	6859      	ldr	r1, [r3, #4]
24008efc:	687b      	ldr	r3, [r7, #4]
24008efe:	681b      	ldr	r3, [r3, #0]
24008f00:	430b      	orrs	r3, r1
24008f02:	4313      	orrs	r3, r2
24008f04:	4a2b      	ldr	r2, [pc, #172]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008f0a:	6513      	str	r3, [r2, #80]	; 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
24008f0c:	687b      	ldr	r3, [r7, #4]
24008f0e:	681b      	ldr	r3, [r3, #0]
24008f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008f14:	d119      	bne.n	24008f4a <HAL_FLASHEx_ComputeCRC+0x92>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
24008f16:	4b27      	ldr	r3, [pc, #156]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008f1a:	4a26      	ldr	r2, [pc, #152]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24008f20:	6513      	str	r3, [r2, #80]	; 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24008f22:	687b      	ldr	r3, [r7, #4]
24008f24:	68db      	ldr	r3, [r3, #12]
24008f26:	60bb      	str	r3, [r7, #8]
24008f28:	e006      	b.n	24008f38 <HAL_FLASHEx_ComputeCRC+0x80>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
24008f2a:	2101      	movs	r1, #1
24008f2c:	68b8      	ldr	r0, [r7, #8]
24008f2e:	f000 fadd 	bl	240094ec <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24008f32:	68bb      	ldr	r3, [r7, #8]
24008f34:	3301      	adds	r3, #1
24008f36:	60bb      	str	r3, [r7, #8]
24008f38:	687b      	ldr	r3, [r7, #4]
24008f3a:	691a      	ldr	r2, [r3, #16]
24008f3c:	687b      	ldr	r3, [r7, #4]
24008f3e:	68db      	ldr	r3, [r3, #12]
24008f40:	4413      	add	r3, r2
24008f42:	68ba      	ldr	r2, [r7, #8]
24008f44:	429a      	cmp	r2, r3
24008f46:	d3f0      	bcc.n	24008f2a <HAL_FLASHEx_ComputeCRC+0x72>
24008f48:	e013      	b.n	24008f72 <HAL_FLASHEx_ComputeCRC+0xba>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
24008f4a:	687b      	ldr	r3, [r7, #4]
24008f4c:	681b      	ldr	r3, [r3, #0]
24008f4e:	4a1a      	ldr	r2, [pc, #104]	; (24008fb8 <HAL_FLASHEx_ComputeCRC+0x100>)
24008f50:	4293      	cmp	r3, r2
24008f52:	d106      	bne.n	24008f62 <HAL_FLASHEx_ComputeCRC+0xaa>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
24008f54:	4b17      	ldr	r3, [pc, #92]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008f58:	4a16      	ldr	r2, [pc, #88]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24008f5e:	6513      	str	r3, [r2, #80]	; 0x50
24008f60:	e007      	b.n	24008f72 <HAL_FLASHEx_ComputeCRC+0xba>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
24008f62:	687b      	ldr	r3, [r7, #4]
24008f64:	6958      	ldr	r0, [r3, #20]
24008f66:	687b      	ldr	r3, [r7, #4]
24008f68:	699b      	ldr	r3, [r3, #24]
24008f6a:	2201      	movs	r2, #1
24008f6c:	4619      	mov	r1, r3
24008f6e:	f000 fadb 	bl	24009528 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
24008f72:	4b10      	ldr	r3, [pc, #64]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008f76:	4a0f      	ldr	r2, [pc, #60]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24008f7c:	6513      	str	r3, [r2, #80]	; 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24008f7e:	2101      	movs	r1, #1
24008f80:	f24c 3050 	movw	r0, #50000	; 0xc350
24008f84:	f7ff fd32 	bl	240089ec <FLASH_CRC_WaitForLastOperation>
24008f88:	4603      	mov	r3, r0
24008f8a:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
24008f8c:	4b09      	ldr	r3, [pc, #36]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24008f90:	683b      	ldr	r3, [r7, #0]
24008f92:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
24008f94:	4b07      	ldr	r3, [pc, #28]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f96:	68db      	ldr	r3, [r3, #12]
24008f98:	4a06      	ldr	r2, [pc, #24]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24008f9e:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
24008fa0:	4b04      	ldr	r3, [pc, #16]	; (24008fb4 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008fa2:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
24008fa6:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
    }
#endif /* DUAL_BANK */
  }

  return status;
24008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
24008faa:	4618      	mov	r0, r3
24008fac:	3710      	adds	r7, #16
24008fae:	46bd      	mov	sp, r7
24008fb0:	bd80      	pop	{r7, pc}
24008fb2:	bf00      	nop
24008fb4:	52002000 	.word	0x52002000
24008fb8:	00400100 	.word	0x00400100

24008fbc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
24008fbc:	b480      	push	{r7}
24008fbe:	b083      	sub	sp, #12
24008fc0:	af00      	add	r7, sp, #0
24008fc2:	6078      	str	r0, [r7, #4]
24008fc4:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008fc6:	683b      	ldr	r3, [r7, #0]
24008fc8:	f003 0301 	and.w	r3, r3, #1
24008fcc:	2b00      	cmp	r3, #0
24008fce:	d011      	beq.n	24008ff4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
24008fd0:	4b0b      	ldr	r3, [pc, #44]	; (24009000 <FLASH_MassErase+0x44>)
24008fd2:	68db      	ldr	r3, [r3, #12]
24008fd4:	4a0a      	ldr	r2, [pc, #40]	; (24009000 <FLASH_MassErase+0x44>)
24008fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008fda:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
24008fdc:	4b08      	ldr	r3, [pc, #32]	; (24009000 <FLASH_MassErase+0x44>)
24008fde:	68da      	ldr	r2, [r3, #12]
24008fe0:	4907      	ldr	r1, [pc, #28]	; (24009000 <FLASH_MassErase+0x44>)
24008fe2:	687b      	ldr	r3, [r7, #4]
24008fe4:	4313      	orrs	r3, r2
24008fe6:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
24008fe8:	4b05      	ldr	r3, [pc, #20]	; (24009000 <FLASH_MassErase+0x44>)
24008fea:	68db      	ldr	r3, [r3, #12]
24008fec:	4a04      	ldr	r2, [pc, #16]	; (24009000 <FLASH_MassErase+0x44>)
24008fee:	f043 0388 	orr.w	r3, r3, #136	; 0x88
24008ff2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
24008ff4:	bf00      	nop
24008ff6:	370c      	adds	r7, #12
24008ff8:	46bd      	mov	sp, r7
24008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
24008ffe:	4770      	bx	lr
24009000:	52002000 	.word	0x52002000

24009004 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
24009004:	b480      	push	{r7}
24009006:	b085      	sub	sp, #20
24009008:	af00      	add	r7, sp, #0
2400900a:	60f8      	str	r0, [r7, #12]
2400900c:	60b9      	str	r1, [r7, #8]
2400900e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009010:	68bb      	ldr	r3, [r7, #8]
24009012:	f003 0301 	and.w	r3, r3, #1
24009016:	2b00      	cmp	r3, #0
24009018:	d010      	beq.n	2400903c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
2400901a:	4b0b      	ldr	r3, [pc, #44]	; (24009048 <FLASH_Erase_Sector+0x44>)
2400901c:	68db      	ldr	r3, [r3, #12]
2400901e:	4a0a      	ldr	r2, [pc, #40]	; (24009048 <FLASH_Erase_Sector+0x44>)
24009020:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
24009024:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
24009026:	4b08      	ldr	r3, [pc, #32]	; (24009048 <FLASH_Erase_Sector+0x44>)
24009028:	68da      	ldr	r2, [r3, #12]
2400902a:	68fb      	ldr	r3, [r7, #12]
2400902c:	0219      	lsls	r1, r3, #8
2400902e:	687b      	ldr	r3, [r7, #4]
24009030:	430b      	orrs	r3, r1
24009032:	4313      	orrs	r3, r2
24009034:	4a04      	ldr	r2, [pc, #16]	; (24009048 <FLASH_Erase_Sector+0x44>)
24009036:	f043 0384 	orr.w	r3, r3, #132	; 0x84
2400903a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
2400903c:	bf00      	nop
2400903e:	3714      	adds	r7, #20
24009040:	46bd      	mov	sp, r7
24009042:	f85d 7b04 	ldr.w	r7, [sp], #4
24009046:	4770      	bx	lr
24009048:	52002000 	.word	0x52002000

2400904c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
2400904c:	b480      	push	{r7}
2400904e:	b083      	sub	sp, #12
24009050:	af00      	add	r7, sp, #0
24009052:	6078      	str	r0, [r7, #4]
24009054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009056:	683b      	ldr	r3, [r7, #0]
24009058:	f003 0301 	and.w	r3, r3, #1
2400905c:	2b00      	cmp	r3, #0
2400905e:	d007      	beq.n	24009070 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
24009060:	4b06      	ldr	r3, [pc, #24]	; (2400907c <FLASH_OB_EnableWRP+0x30>)
24009062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24009064:	687b      	ldr	r3, [r7, #4]
24009066:	b2db      	uxtb	r3, r3
24009068:	43db      	mvns	r3, r3
2400906a:	4904      	ldr	r1, [pc, #16]	; (2400907c <FLASH_OB_EnableWRP+0x30>)
2400906c:	4013      	ands	r3, r2
2400906e:	63cb      	str	r3, [r1, #60]	; 0x3c
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
  }
#endif /* DUAL_BANK */
}
24009070:	bf00      	nop
24009072:	370c      	adds	r7, #12
24009074:	46bd      	mov	sp, r7
24009076:	f85d 7b04 	ldr.w	r7, [sp], #4
2400907a:	4770      	bx	lr
2400907c:	52002000 	.word	0x52002000

24009080 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
24009080:	b480      	push	{r7}
24009082:	b083      	sub	sp, #12
24009084:	af00      	add	r7, sp, #0
24009086:	6078      	str	r0, [r7, #4]
24009088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400908a:	683b      	ldr	r3, [r7, #0]
2400908c:	f003 0301 	and.w	r3, r3, #1
24009090:	2b00      	cmp	r3, #0
24009092:	d006      	beq.n	240090a2 <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
24009094:	4b06      	ldr	r3, [pc, #24]	; (240090b0 <FLASH_OB_DisableWRP+0x30>)
24009096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24009098:	687b      	ldr	r3, [r7, #4]
2400909a:	b2db      	uxtb	r3, r3
2400909c:	4904      	ldr	r1, [pc, #16]	; (240090b0 <FLASH_OB_DisableWRP+0x30>)
2400909e:	4313      	orrs	r3, r2
240090a0:	63cb      	str	r3, [r1, #60]	; 0x3c
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
  }
#endif /* DUAL_BANK */
}
240090a2:	bf00      	nop
240090a4:	370c      	adds	r7, #12
240090a6:	46bd      	mov	sp, r7
240090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240090ac:	4770      	bx	lr
240090ae:	bf00      	nop
240090b0:	52002000 	.word	0x52002000

240090b4 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
240090b4:	b480      	push	{r7}
240090b6:	b087      	sub	sp, #28
240090b8:	af00      	add	r7, sp, #0
240090ba:	60f8      	str	r0, [r7, #12]
240090bc:	60b9      	str	r1, [r7, #8]
240090be:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
240090c0:	2300      	movs	r3, #0
240090c2:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
240090c4:	687b      	ldr	r3, [r7, #4]
240090c6:	2b01      	cmp	r3, #1
240090c8:	d102      	bne.n	240090d0 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
240090ca:	4b0c      	ldr	r3, [pc, #48]	; (240090fc <FLASH_OB_GetWRP+0x48>)
240090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240090ce:	617b      	str	r3, [r7, #20]
  {
    regvalue = FLASH->WPSN_CUR2;
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
240090d0:	697b      	ldr	r3, [r7, #20]
240090d2:	43db      	mvns	r3, r3
240090d4:	b2da      	uxtb	r2, r3
240090d6:	68bb      	ldr	r3, [r7, #8]
240090d8:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
240090da:	68bb      	ldr	r3, [r7, #8]
240090dc:	681b      	ldr	r3, [r3, #0]
240090de:	2b00      	cmp	r3, #0
240090e0:	d103      	bne.n	240090ea <FLASH_OB_GetWRP+0x36>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
240090e2:	68fb      	ldr	r3, [r7, #12]
240090e4:	2200      	movs	r2, #0
240090e6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
240090e8:	e002      	b.n	240090f0 <FLASH_OB_GetWRP+0x3c>
    (*WRPState) = OB_WRPSTATE_ENABLE;
240090ea:	68fb      	ldr	r3, [r7, #12]
240090ec:	2201      	movs	r2, #1
240090ee:	601a      	str	r2, [r3, #0]
}
240090f0:	bf00      	nop
240090f2:	371c      	adds	r7, #28
240090f4:	46bd      	mov	sp, r7
240090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240090fa:	4770      	bx	lr
240090fc:	52002000 	.word	0x52002000

24009100 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
24009100:	b480      	push	{r7}
24009102:	b083      	sub	sp, #12
24009104:	af00      	add	r7, sp, #0
24009106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
24009108:	4b06      	ldr	r3, [pc, #24]	; (24009124 <FLASH_OB_RDPConfig+0x24>)
2400910a:	6a1b      	ldr	r3, [r3, #32]
2400910c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
24009110:	4904      	ldr	r1, [pc, #16]	; (24009124 <FLASH_OB_RDPConfig+0x24>)
24009112:	687b      	ldr	r3, [r7, #4]
24009114:	4313      	orrs	r3, r2
24009116:	620b      	str	r3, [r1, #32]
}
24009118:	bf00      	nop
2400911a:	370c      	adds	r7, #12
2400911c:	46bd      	mov	sp, r7
2400911e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009122:	4770      	bx	lr
24009124:	52002000 	.word	0x52002000

24009128 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
24009128:	b480      	push	{r7}
2400912a:	b083      	sub	sp, #12
2400912c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
2400912e:	4b0b      	ldr	r3, [pc, #44]	; (2400915c <FLASH_OB_GetRDP+0x34>)
24009130:	69db      	ldr	r3, [r3, #28]
24009132:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
24009136:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
24009138:	687b      	ldr	r3, [r7, #4]
2400913a:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400913e:	d006      	beq.n	2400914e <FLASH_OB_GetRDP+0x26>
24009140:	687b      	ldr	r3, [r7, #4]
24009142:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
24009146:	d002      	beq.n	2400914e <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
24009148:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
2400914c:	e000      	b.n	24009150 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
2400914e:	687b      	ldr	r3, [r7, #4]
  }
}
24009150:	4618      	mov	r0, r3
24009152:	370c      	adds	r7, #12
24009154:	46bd      	mov	sp, r7
24009156:	f85d 7b04 	ldr.w	r7, [sp], #4
2400915a:	4770      	bx	lr
2400915c:	52002000 	.word	0x52002000

24009160 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
24009160:	b480      	push	{r7}
24009162:	b085      	sub	sp, #20
24009164:	af00      	add	r7, sp, #0
24009166:	6078      	str	r0, [r7, #4]
24009168:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
2400916a:	2300      	movs	r3, #0
2400916c:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
2400916e:	2300      	movs	r3, #0
24009170:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
24009172:	687b      	ldr	r3, [r7, #4]
24009174:	f003 0301 	and.w	r3, r3, #1
24009178:	2b00      	cmp	r3, #0
2400917a:	d009      	beq.n	24009190 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
2400917c:	683b      	ldr	r3, [r7, #0]
2400917e:	f003 0310 	and.w	r3, r3, #16
24009182:	68fa      	ldr	r2, [r7, #12]
24009184:	4313      	orrs	r3, r2
24009186:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
24009188:	68bb      	ldr	r3, [r7, #8]
2400918a:	f043 0310 	orr.w	r3, r3, #16
2400918e:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
24009190:	687b      	ldr	r3, [r7, #4]
24009192:	f003 0302 	and.w	r3, r3, #2
24009196:	2b00      	cmp	r3, #0
24009198:	d009      	beq.n	240091ae <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
2400919a:	683b      	ldr	r3, [r7, #0]
2400919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
240091a0:	68fa      	ldr	r2, [r7, #12]
240091a2:	4313      	orrs	r3, r2
240091a4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
240091a6:	68bb      	ldr	r3, [r7, #8]
240091a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240091ac:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
240091ae:	687b      	ldr	r3, [r7, #4]
240091b0:	f003 0304 	and.w	r3, r3, #4
240091b4:	2b00      	cmp	r3, #0
240091b6:	d009      	beq.n	240091cc <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
240091b8:	683b      	ldr	r3, [r7, #0]
240091ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
240091be:	68fa      	ldr	r2, [r7, #12]
240091c0:	4313      	orrs	r3, r2
240091c2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
240091c4:	68bb      	ldr	r3, [r7, #8]
240091c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240091ca:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
240091cc:	687b      	ldr	r3, [r7, #4]
240091ce:	f003 0308 	and.w	r3, r3, #8
240091d2:	2b00      	cmp	r3, #0
240091d4:	d009      	beq.n	240091ea <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
240091d6:	683b      	ldr	r3, [r7, #0]
240091d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240091dc:	68fa      	ldr	r2, [r7, #12]
240091de:	4313      	orrs	r3, r2
240091e0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
240091e2:	68bb      	ldr	r3, [r7, #8]
240091e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240091e8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
240091ea:	687b      	ldr	r3, [r7, #4]
240091ec:	f003 0310 	and.w	r3, r3, #16
240091f0:	2b00      	cmp	r3, #0
240091f2:	d009      	beq.n	24009208 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
240091f4:	683b      	ldr	r3, [r7, #0]
240091f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240091fa:	68fa      	ldr	r2, [r7, #12]
240091fc:	4313      	orrs	r3, r2
240091fe:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
24009200:	68bb      	ldr	r3, [r7, #8]
24009202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24009206:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
24009208:	687b      	ldr	r3, [r7, #4]
2400920a:	f003 0320 	and.w	r3, r3, #32
2400920e:	2b00      	cmp	r3, #0
24009210:	d009      	beq.n	24009226 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
24009212:	683b      	ldr	r3, [r7, #0]
24009214:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
24009218:	68fa      	ldr	r2, [r7, #12]
2400921a:	4313      	orrs	r3, r2
2400921c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
2400921e:	68bb      	ldr	r3, [r7, #8]
24009220:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
24009224:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
24009226:	687b      	ldr	r3, [r7, #4]
24009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400922c:	2b00      	cmp	r3, #0
2400922e:	d009      	beq.n	24009244 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
24009230:	683b      	ldr	r3, [r7, #0]
24009232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24009236:	68fa      	ldr	r2, [r7, #12]
24009238:	4313      	orrs	r3, r2
2400923a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
2400923c:	68bb      	ldr	r3, [r7, #8]
2400923e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24009242:	60bb      	str	r3, [r7, #8]
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
24009244:	687b      	ldr	r3, [r7, #4]
24009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400924a:	2b00      	cmp	r3, #0
2400924c:	d009      	beq.n	24009262 <FLASH_OB_UserConfig+0x102>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
2400924e:	683b      	ldr	r3, [r7, #0]
24009250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24009254:	68fa      	ldr	r2, [r7, #12]
24009256:	4313      	orrs	r3, r2
24009258:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
2400925a:	68bb      	ldr	r3, [r7, #8]
2400925c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24009260:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
24009262:	4b07      	ldr	r3, [pc, #28]	; (24009280 <FLASH_OB_UserConfig+0x120>)
24009264:	6a1a      	ldr	r2, [r3, #32]
24009266:	68bb      	ldr	r3, [r7, #8]
24009268:	43db      	mvns	r3, r3
2400926a:	401a      	ands	r2, r3
2400926c:	4904      	ldr	r1, [pc, #16]	; (24009280 <FLASH_OB_UserConfig+0x120>)
2400926e:	68fb      	ldr	r3, [r7, #12]
24009270:	4313      	orrs	r3, r2
24009272:	620b      	str	r3, [r1, #32]
}
24009274:	bf00      	nop
24009276:	3714      	adds	r7, #20
24009278:	46bd      	mov	sp, r7
2400927a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400927e:	4770      	bx	lr
24009280:	52002000 	.word	0x52002000

24009284 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
24009284:	b480      	push	{r7}
24009286:	b083      	sub	sp, #12
24009288:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
2400928a:	4b07      	ldr	r3, [pc, #28]	; (240092a8 <FLASH_OB_GetUser+0x24>)
2400928c:	69db      	ldr	r3, [r3, #28]
2400928e:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
24009290:	687a      	ldr	r2, [r7, #4]
24009292:	4b06      	ldr	r3, [pc, #24]	; (240092ac <FLASH_OB_GetUser+0x28>)
24009294:	4013      	ands	r3, r2
24009296:	607b      	str	r3, [r7, #4]

  return userConfig;
24009298:	687b      	ldr	r3, [r7, #4]
}
2400929a:	4618      	mov	r0, r3
2400929c:	370c      	adds	r7, #12
2400929e:	46bd      	mov	sp, r7
240092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240092a4:	4770      	bx	lr
240092a6:	bf00      	nop
240092a8:	52002000 	.word	0x52002000
240092ac:	ffff00f3 	.word	0xffff00f3

240092b0 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
240092b0:	b480      	push	{r7}
240092b2:	b085      	sub	sp, #20
240092b4:	af00      	add	r7, sp, #0
240092b6:	60f8      	str	r0, [r7, #12]
240092b8:	60b9      	str	r1, [r7, #8]
240092ba:	607a      	str	r2, [r7, #4]
240092bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
240092be:	683b      	ldr	r3, [r7, #0]
240092c0:	f003 0301 	and.w	r3, r3, #1
240092c4:	2b00      	cmp	r3, #0
240092c6:	d00d      	beq.n	240092e4 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
240092c8:	68bb      	ldr	r3, [r7, #8]
240092ca:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
240092ce:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
240092d0:	687b      	ldr	r3, [r7, #4]
240092d2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
240092d6:	0a1b      	lsrs	r3, r3, #8
240092d8:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
240092da:	431a      	orrs	r2, r3
240092dc:	4904      	ldr	r1, [pc, #16]	; (240092f0 <FLASH_OB_PCROPConfig+0x40>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
240092de:	68fb      	ldr	r3, [r7, #12]
240092e0:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
240092e2:	62cb      	str	r3, [r1, #44]	; 0x2c
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
240092e4:	bf00      	nop
240092e6:	3714      	adds	r7, #20
240092e8:	46bd      	mov	sp, r7
240092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240092ee:	4770      	bx	lr
240092f0:	52002000 	.word	0x52002000

240092f4 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
240092f4:	b480      	push	{r7}
240092f6:	b087      	sub	sp, #28
240092f8:	af00      	add	r7, sp, #0
240092fa:	60f8      	str	r0, [r7, #12]
240092fc:	60b9      	str	r1, [r7, #8]
240092fe:	607a      	str	r2, [r7, #4]
24009300:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
24009302:	2300      	movs	r3, #0
24009304:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
24009306:	2300      	movs	r3, #0
24009308:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
2400930a:	683b      	ldr	r3, [r7, #0]
2400930c:	2b01      	cmp	r3, #1
2400930e:	d105      	bne.n	2400931c <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
24009310:	4b12      	ldr	r3, [pc, #72]	; (2400935c <FLASH_OB_GetPCROP+0x68>)
24009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009314:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
24009316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2400931a:	613b      	str	r3, [r7, #16]
    regvalue = FLASH->PRAR_CUR2;
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
2400931c:	697b      	ldr	r3, [r7, #20]
2400931e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24009322:	68fb      	ldr	r3, [r7, #12]
24009324:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
24009326:	697b      	ldr	r3, [r7, #20]
24009328:	021a      	lsls	r2, r3, #8
2400932a:	4b0d      	ldr	r3, [pc, #52]	; (24009360 <FLASH_OB_GetPCROP+0x6c>)
2400932c:	4013      	ands	r3, r2
2400932e:	693a      	ldr	r2, [r7, #16]
24009330:	441a      	add	r2, r3
24009332:	68bb      	ldr	r3, [r7, #8]
24009334:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
24009336:	697b      	ldr	r3, [r7, #20]
24009338:	0c1b      	lsrs	r3, r3, #16
2400933a:	f3c3 020b 	ubfx	r2, r3, #0, #12
2400933e:	687b      	ldr	r3, [r7, #4]
24009340:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
24009342:	687b      	ldr	r3, [r7, #4]
24009344:	681b      	ldr	r3, [r3, #0]
24009346:	021a      	lsls	r2, r3, #8
24009348:	693b      	ldr	r3, [r7, #16]
2400934a:	441a      	add	r2, r3
2400934c:	687b      	ldr	r3, [r7, #4]
2400934e:	601a      	str	r2, [r3, #0]
}
24009350:	bf00      	nop
24009352:	371c      	adds	r7, #28
24009354:	46bd      	mov	sp, r7
24009356:	f85d 7b04 	ldr.w	r7, [sp], #4
2400935a:	4770      	bx	lr
2400935c:	52002000 	.word	0x52002000
24009360:	000fff00 	.word	0x000fff00

24009364 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
24009364:	b480      	push	{r7}
24009366:	b083      	sub	sp, #12
24009368:	af00      	add	r7, sp, #0
2400936a:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
2400936c:	4b06      	ldr	r3, [pc, #24]	; (24009388 <FLASH_OB_BOR_LevelConfig+0x24>)
2400936e:	6a1b      	ldr	r3, [r3, #32]
24009370:	f023 020c 	bic.w	r2, r3, #12
24009374:	4904      	ldr	r1, [pc, #16]	; (24009388 <FLASH_OB_BOR_LevelConfig+0x24>)
24009376:	687b      	ldr	r3, [r7, #4]
24009378:	4313      	orrs	r3, r2
2400937a:	620b      	str	r3, [r1, #32]
}
2400937c:	bf00      	nop
2400937e:	370c      	adds	r7, #12
24009380:	46bd      	mov	sp, r7
24009382:	f85d 7b04 	ldr.w	r7, [sp], #4
24009386:	4770      	bx	lr
24009388:	52002000 	.word	0x52002000

2400938c <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
2400938c:	b480      	push	{r7}
2400938e:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
24009390:	4b04      	ldr	r3, [pc, #16]	; (240093a4 <FLASH_OB_GetBOR+0x18>)
24009392:	69db      	ldr	r3, [r3, #28]
24009394:	f003 030c 	and.w	r3, r3, #12
}
24009398:	4618      	mov	r0, r3
2400939a:	46bd      	mov	sp, r7
2400939c:	f85d 7b04 	ldr.w	r7, [sp], #4
240093a0:	4770      	bx	lr
240093a2:	bf00      	nop
240093a4:	52002000 	.word	0x52002000

240093a8 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
240093a8:	b480      	push	{r7}
240093aa:	b085      	sub	sp, #20
240093ac:	af00      	add	r7, sp, #0
240093ae:	60f8      	str	r0, [r7, #12]
240093b0:	60b9      	str	r1, [r7, #8]
240093b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
240093b4:	68fb      	ldr	r3, [r7, #12]
240093b6:	f003 0301 	and.w	r3, r3, #1
240093ba:	2b00      	cmp	r3, #0
240093bc:	d008      	beq.n	240093d0 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
240093be:	4b0d      	ldr	r3, [pc, #52]	; (240093f4 <FLASH_OB_BootAddConfig+0x4c>)
240093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
240093c2:	4b0d      	ldr	r3, [pc, #52]	; (240093f8 <FLASH_OB_BootAddConfig+0x50>)
240093c4:	4013      	ands	r3, r2
240093c6:	68ba      	ldr	r2, [r7, #8]
240093c8:	0c12      	lsrs	r2, r2, #16
240093ca:	490a      	ldr	r1, [pc, #40]	; (240093f4 <FLASH_OB_BootAddConfig+0x4c>)
240093cc:	4313      	orrs	r3, r2
240093ce:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
240093d0:	68fb      	ldr	r3, [r7, #12]
240093d2:	f003 0302 	and.w	r3, r3, #2
240093d6:	2b00      	cmp	r3, #0
240093d8:	d006      	beq.n	240093e8 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
240093da:	4b06      	ldr	r3, [pc, #24]	; (240093f4 <FLASH_OB_BootAddConfig+0x4c>)
240093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240093de:	b29a      	uxth	r2, r3
240093e0:	4904      	ldr	r1, [pc, #16]	; (240093f4 <FLASH_OB_BootAddConfig+0x4c>)
240093e2:	687b      	ldr	r3, [r7, #4]
240093e4:	4313      	orrs	r3, r2
240093e6:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
240093e8:	bf00      	nop
240093ea:	3714      	adds	r7, #20
240093ec:	46bd      	mov	sp, r7
240093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240093f2:	4770      	bx	lr
240093f4:	52002000 	.word	0x52002000
240093f8:	ffff0000 	.word	0xffff0000

240093fc <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
240093fc:	b480      	push	{r7}
240093fe:	b085      	sub	sp, #20
24009400:	af00      	add	r7, sp, #0
24009402:	6078      	str	r0, [r7, #4]
24009404:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
24009406:	4b09      	ldr	r3, [pc, #36]	; (2400942c <FLASH_OB_GetBootAdd+0x30>)
24009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400940a:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
2400940c:	68fb      	ldr	r3, [r7, #12]
2400940e:	041a      	lsls	r2, r3, #16
24009410:	687b      	ldr	r3, [r7, #4]
24009412:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
24009414:	68fa      	ldr	r2, [r7, #12]
24009416:	4b06      	ldr	r3, [pc, #24]	; (24009430 <FLASH_OB_GetBootAdd+0x34>)
24009418:	4013      	ands	r3, r2
2400941a:	683a      	ldr	r2, [r7, #0]
2400941c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
2400941e:	bf00      	nop
24009420:	3714      	adds	r7, #20
24009422:	46bd      	mov	sp, r7
24009424:	f85d 7b04 	ldr.w	r7, [sp], #4
24009428:	4770      	bx	lr
2400942a:	bf00      	nop
2400942c:	52002000 	.word	0x52002000
24009430:	ffff0000 	.word	0xffff0000

24009434 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
24009434:	b480      	push	{r7}
24009436:	b085      	sub	sp, #20
24009438:	af00      	add	r7, sp, #0
2400943a:	60f8      	str	r0, [r7, #12]
2400943c:	60b9      	str	r1, [r7, #8]
2400943e:	607a      	str	r2, [r7, #4]
24009440:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009442:	683b      	ldr	r3, [r7, #0]
24009444:	f003 0301 	and.w	r3, r3, #1
24009448:	2b00      	cmp	r3, #0
2400944a:	d00f      	beq.n	2400946c <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400944c:	68bb      	ldr	r3, [r7, #8]
2400944e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009452:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009454:	687b      	ldr	r3, [r7, #4]
24009456:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400945a:	0a1b      	lsrs	r3, r3, #8
2400945c:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400945e:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
24009460:	68fb      	ldr	r3, [r7, #12]
24009462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009466:	4904      	ldr	r1, [pc, #16]	; (24009478 <FLASH_OB_SecureAreaConfig+0x44>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009468:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400946a:	634b      	str	r3, [r1, #52]	; 0x34
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
  }
#endif /* DUAL_BANK */
}
2400946c:	bf00      	nop
2400946e:	3714      	adds	r7, #20
24009470:	46bd      	mov	sp, r7
24009472:	f85d 7b04 	ldr.w	r7, [sp], #4
24009476:	4770      	bx	lr
24009478:	52002000 	.word	0x52002000

2400947c <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
2400947c:	b480      	push	{r7}
2400947e:	b087      	sub	sp, #28
24009480:	af00      	add	r7, sp, #0
24009482:	60f8      	str	r0, [r7, #12]
24009484:	60b9      	str	r1, [r7, #8]
24009486:	607a      	str	r2, [r7, #4]
24009488:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400948a:	2300      	movs	r3, #0
2400948c:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400948e:	2300      	movs	r3, #0
24009490:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
24009492:	683b      	ldr	r3, [r7, #0]
24009494:	2b01      	cmp	r3, #1
24009496:	d105      	bne.n	240094a4 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
24009498:	4b12      	ldr	r3, [pc, #72]	; (240094e4 <FLASH_OB_GetSecureArea+0x68>)
2400949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400949c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400949e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
240094a2:	613b      	str	r3, [r7, #16]
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
240094a4:	697b      	ldr	r3, [r7, #20]
240094a6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
240094aa:	68fb      	ldr	r3, [r7, #12]
240094ac:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
240094ae:	697b      	ldr	r3, [r7, #20]
240094b0:	021a      	lsls	r2, r3, #8
240094b2:	4b0d      	ldr	r3, [pc, #52]	; (240094e8 <FLASH_OB_GetSecureArea+0x6c>)
240094b4:	4013      	ands	r3, r2
240094b6:	693a      	ldr	r2, [r7, #16]
240094b8:	441a      	add	r2, r3
240094ba:	68bb      	ldr	r3, [r7, #8]
240094bc:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
240094be:	697b      	ldr	r3, [r7, #20]
240094c0:	0c1b      	lsrs	r3, r3, #16
240094c2:	f3c3 020b 	ubfx	r2, r3, #0, #12
240094c6:	687b      	ldr	r3, [r7, #4]
240094c8:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
240094ca:	687b      	ldr	r3, [r7, #4]
240094cc:	681b      	ldr	r3, [r3, #0]
240094ce:	021a      	lsls	r2, r3, #8
240094d0:	693b      	ldr	r3, [r7, #16]
240094d2:	441a      	add	r2, r3
240094d4:	687b      	ldr	r3, [r7, #4]
240094d6:	601a      	str	r2, [r3, #0]
}
240094d8:	bf00      	nop
240094da:	371c      	adds	r7, #28
240094dc:	46bd      	mov	sp, r7
240094de:	f85d 7b04 	ldr.w	r7, [sp], #4
240094e2:	4770      	bx	lr
240094e4:	52002000 	.word	0x52002000
240094e8:	000fff00 	.word	0x000fff00

240094ec <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
240094ec:	b480      	push	{r7}
240094ee:	b083      	sub	sp, #12
240094f0:	af00      	add	r7, sp, #0
240094f2:	6078      	str	r0, [r7, #4]
240094f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
240094f6:	683b      	ldr	r3, [r7, #0]
240094f8:	2b01      	cmp	r3, #1
240094fa:	d10d      	bne.n	24009518 <FLASH_CRC_AddSector+0x2c>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
240094fc:	4b09      	ldr	r3, [pc, #36]	; (24009524 <FLASH_CRC_AddSector+0x38>)
240094fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009500:	4a08      	ldr	r2, [pc, #32]	; (24009524 <FLASH_CRC_AddSector+0x38>)
24009502:	f023 0307 	bic.w	r3, r3, #7
24009506:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
24009508:	4b06      	ldr	r3, [pc, #24]	; (24009524 <FLASH_CRC_AddSector+0x38>)
2400950a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400950c:	687b      	ldr	r3, [r7, #4]
2400950e:	4313      	orrs	r3, r2
24009510:	4a04      	ldr	r2, [pc, #16]	; (24009524 <FLASH_CRC_AddSector+0x38>)
24009512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24009516:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
24009518:	bf00      	nop
2400951a:	370c      	adds	r7, #12
2400951c:	46bd      	mov	sp, r7
2400951e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009522:	4770      	bx	lr
24009524:	52002000 	.word	0x52002000

24009528 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
24009528:	b480      	push	{r7}
2400952a:	b085      	sub	sp, #20
2400952c:	af00      	add	r7, sp, #0
2400952e:	60f8      	str	r0, [r7, #12]
24009530:	60b9      	str	r1, [r7, #8]
24009532:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
24009534:	687b      	ldr	r3, [r7, #4]
24009536:	2b01      	cmp	r3, #1
24009538:	d105      	bne.n	24009546 <FLASH_CRC_SelectAddress+0x1e>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
2400953a:	4a06      	ldr	r2, [pc, #24]	; (24009554 <FLASH_CRC_SelectAddress+0x2c>)
2400953c:	68fb      	ldr	r3, [r7, #12]
2400953e:	6553      	str	r3, [r2, #84]	; 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
24009540:	4a04      	ldr	r2, [pc, #16]	; (24009554 <FLASH_CRC_SelectAddress+0x2c>)
24009542:	68bb      	ldr	r3, [r7, #8]
24009544:	6593      	str	r3, [r2, #88]	; 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
24009546:	bf00      	nop
24009548:	3714      	adds	r7, #20
2400954a:	46bd      	mov	sp, r7
2400954c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009550:	4770      	bx	lr
24009552:	bf00      	nop
24009554:	52002000 	.word	0x52002000

24009558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24009558:	b480      	push	{r7}
2400955a:	b089      	sub	sp, #36	; 0x24
2400955c:	af00      	add	r7, sp, #0
2400955e:	6078      	str	r0, [r7, #4]
24009560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24009562:	2300      	movs	r3, #0
24009564:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24009566:	4b89      	ldr	r3, [pc, #548]	; (2400978c <HAL_GPIO_Init+0x234>)
24009568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400956a:	e194      	b.n	24009896 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400956c:	683b      	ldr	r3, [r7, #0]
2400956e:	681a      	ldr	r2, [r3, #0]
24009570:	2101      	movs	r1, #1
24009572:	69fb      	ldr	r3, [r7, #28]
24009574:	fa01 f303 	lsl.w	r3, r1, r3
24009578:	4013      	ands	r3, r2
2400957a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2400957c:	693b      	ldr	r3, [r7, #16]
2400957e:	2b00      	cmp	r3, #0
24009580:	f000 8186 	beq.w	24009890 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24009584:	683b      	ldr	r3, [r7, #0]
24009586:	685b      	ldr	r3, [r3, #4]
24009588:	f003 0303 	and.w	r3, r3, #3
2400958c:	2b01      	cmp	r3, #1
2400958e:	d005      	beq.n	2400959c <HAL_GPIO_Init+0x44>
24009590:	683b      	ldr	r3, [r7, #0]
24009592:	685b      	ldr	r3, [r3, #4]
24009594:	f003 0303 	and.w	r3, r3, #3
24009598:	2b02      	cmp	r3, #2
2400959a:	d130      	bne.n	240095fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2400959c:	687b      	ldr	r3, [r7, #4]
2400959e:	689b      	ldr	r3, [r3, #8]
240095a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240095a2:	69fb      	ldr	r3, [r7, #28]
240095a4:	005b      	lsls	r3, r3, #1
240095a6:	2203      	movs	r2, #3
240095a8:	fa02 f303 	lsl.w	r3, r2, r3
240095ac:	43db      	mvns	r3, r3
240095ae:	69ba      	ldr	r2, [r7, #24]
240095b0:	4013      	ands	r3, r2
240095b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
240095b4:	683b      	ldr	r3, [r7, #0]
240095b6:	68da      	ldr	r2, [r3, #12]
240095b8:	69fb      	ldr	r3, [r7, #28]
240095ba:	005b      	lsls	r3, r3, #1
240095bc:	fa02 f303 	lsl.w	r3, r2, r3
240095c0:	69ba      	ldr	r2, [r7, #24]
240095c2:	4313      	orrs	r3, r2
240095c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
240095c6:	687b      	ldr	r3, [r7, #4]
240095c8:	69ba      	ldr	r2, [r7, #24]
240095ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
240095cc:	687b      	ldr	r3, [r7, #4]
240095ce:	685b      	ldr	r3, [r3, #4]
240095d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240095d2:	2201      	movs	r2, #1
240095d4:	69fb      	ldr	r3, [r7, #28]
240095d6:	fa02 f303 	lsl.w	r3, r2, r3
240095da:	43db      	mvns	r3, r3
240095dc:	69ba      	ldr	r2, [r7, #24]
240095de:	4013      	ands	r3, r2
240095e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240095e2:	683b      	ldr	r3, [r7, #0]
240095e4:	685b      	ldr	r3, [r3, #4]
240095e6:	091b      	lsrs	r3, r3, #4
240095e8:	f003 0201 	and.w	r2, r3, #1
240095ec:	69fb      	ldr	r3, [r7, #28]
240095ee:	fa02 f303 	lsl.w	r3, r2, r3
240095f2:	69ba      	ldr	r2, [r7, #24]
240095f4:	4313      	orrs	r3, r2
240095f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
240095f8:	687b      	ldr	r3, [r7, #4]
240095fa:	69ba      	ldr	r2, [r7, #24]
240095fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
240095fe:	683b      	ldr	r3, [r7, #0]
24009600:	685b      	ldr	r3, [r3, #4]
24009602:	f003 0303 	and.w	r3, r3, #3
24009606:	2b03      	cmp	r3, #3
24009608:	d017      	beq.n	2400963a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2400960a:	687b      	ldr	r3, [r7, #4]
2400960c:	68db      	ldr	r3, [r3, #12]
2400960e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24009610:	69fb      	ldr	r3, [r7, #28]
24009612:	005b      	lsls	r3, r3, #1
24009614:	2203      	movs	r2, #3
24009616:	fa02 f303 	lsl.w	r3, r2, r3
2400961a:	43db      	mvns	r3, r3
2400961c:	69ba      	ldr	r2, [r7, #24]
2400961e:	4013      	ands	r3, r2
24009620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24009622:	683b      	ldr	r3, [r7, #0]
24009624:	689a      	ldr	r2, [r3, #8]
24009626:	69fb      	ldr	r3, [r7, #28]
24009628:	005b      	lsls	r3, r3, #1
2400962a:	fa02 f303 	lsl.w	r3, r2, r3
2400962e:	69ba      	ldr	r2, [r7, #24]
24009630:	4313      	orrs	r3, r2
24009632:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
24009634:	687b      	ldr	r3, [r7, #4]
24009636:	69ba      	ldr	r2, [r7, #24]
24009638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2400963a:	683b      	ldr	r3, [r7, #0]
2400963c:	685b      	ldr	r3, [r3, #4]
2400963e:	f003 0303 	and.w	r3, r3, #3
24009642:	2b02      	cmp	r3, #2
24009644:	d123      	bne.n	2400968e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
24009646:	69fb      	ldr	r3, [r7, #28]
24009648:	08da      	lsrs	r2, r3, #3
2400964a:	687b      	ldr	r3, [r7, #4]
2400964c:	3208      	adds	r2, #8
2400964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24009652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24009654:	69fb      	ldr	r3, [r7, #28]
24009656:	f003 0307 	and.w	r3, r3, #7
2400965a:	009b      	lsls	r3, r3, #2
2400965c:	220f      	movs	r2, #15
2400965e:	fa02 f303 	lsl.w	r3, r2, r3
24009662:	43db      	mvns	r3, r3
24009664:	69ba      	ldr	r2, [r7, #24]
24009666:	4013      	ands	r3, r2
24009668:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400966a:	683b      	ldr	r3, [r7, #0]
2400966c:	691a      	ldr	r2, [r3, #16]
2400966e:	69fb      	ldr	r3, [r7, #28]
24009670:	f003 0307 	and.w	r3, r3, #7
24009674:	009b      	lsls	r3, r3, #2
24009676:	fa02 f303 	lsl.w	r3, r2, r3
2400967a:	69ba      	ldr	r2, [r7, #24]
2400967c:	4313      	orrs	r3, r2
2400967e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24009680:	69fb      	ldr	r3, [r7, #28]
24009682:	08da      	lsrs	r2, r3, #3
24009684:	687b      	ldr	r3, [r7, #4]
24009686:	3208      	adds	r2, #8
24009688:	69b9      	ldr	r1, [r7, #24]
2400968a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2400968e:	687b      	ldr	r3, [r7, #4]
24009690:	681b      	ldr	r3, [r3, #0]
24009692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24009694:	69fb      	ldr	r3, [r7, #28]
24009696:	005b      	lsls	r3, r3, #1
24009698:	2203      	movs	r2, #3
2400969a:	fa02 f303 	lsl.w	r3, r2, r3
2400969e:	43db      	mvns	r3, r3
240096a0:	69ba      	ldr	r2, [r7, #24]
240096a2:	4013      	ands	r3, r2
240096a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240096a6:	683b      	ldr	r3, [r7, #0]
240096a8:	685b      	ldr	r3, [r3, #4]
240096aa:	f003 0203 	and.w	r2, r3, #3
240096ae:	69fb      	ldr	r3, [r7, #28]
240096b0:	005b      	lsls	r3, r3, #1
240096b2:	fa02 f303 	lsl.w	r3, r2, r3
240096b6:	69ba      	ldr	r2, [r7, #24]
240096b8:	4313      	orrs	r3, r2
240096ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
240096bc:	687b      	ldr	r3, [r7, #4]
240096be:	69ba      	ldr	r2, [r7, #24]
240096c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240096c2:	683b      	ldr	r3, [r7, #0]
240096c4:	685b      	ldr	r3, [r3, #4]
240096c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
240096ca:	2b00      	cmp	r3, #0
240096cc:	f000 80e0 	beq.w	24009890 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240096d0:	4b2f      	ldr	r3, [pc, #188]	; (24009790 <HAL_GPIO_Init+0x238>)
240096d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240096d6:	4a2e      	ldr	r2, [pc, #184]	; (24009790 <HAL_GPIO_Init+0x238>)
240096d8:	f043 0302 	orr.w	r3, r3, #2
240096dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
240096e0:	4b2b      	ldr	r3, [pc, #172]	; (24009790 <HAL_GPIO_Init+0x238>)
240096e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240096e6:	f003 0302 	and.w	r3, r3, #2
240096ea:	60fb      	str	r3, [r7, #12]
240096ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
240096ee:	4a29      	ldr	r2, [pc, #164]	; (24009794 <HAL_GPIO_Init+0x23c>)
240096f0:	69fb      	ldr	r3, [r7, #28]
240096f2:	089b      	lsrs	r3, r3, #2
240096f4:	3302      	adds	r3, #2
240096f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240096fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240096fc:	69fb      	ldr	r3, [r7, #28]
240096fe:	f003 0303 	and.w	r3, r3, #3
24009702:	009b      	lsls	r3, r3, #2
24009704:	220f      	movs	r2, #15
24009706:	fa02 f303 	lsl.w	r3, r2, r3
2400970a:	43db      	mvns	r3, r3
2400970c:	69ba      	ldr	r2, [r7, #24]
2400970e:	4013      	ands	r3, r2
24009710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24009712:	687b      	ldr	r3, [r7, #4]
24009714:	4a20      	ldr	r2, [pc, #128]	; (24009798 <HAL_GPIO_Init+0x240>)
24009716:	4293      	cmp	r3, r2
24009718:	d052      	beq.n	240097c0 <HAL_GPIO_Init+0x268>
2400971a:	687b      	ldr	r3, [r7, #4]
2400971c:	4a1f      	ldr	r2, [pc, #124]	; (2400979c <HAL_GPIO_Init+0x244>)
2400971e:	4293      	cmp	r3, r2
24009720:	d031      	beq.n	24009786 <HAL_GPIO_Init+0x22e>
24009722:	687b      	ldr	r3, [r7, #4]
24009724:	4a1e      	ldr	r2, [pc, #120]	; (240097a0 <HAL_GPIO_Init+0x248>)
24009726:	4293      	cmp	r3, r2
24009728:	d02b      	beq.n	24009782 <HAL_GPIO_Init+0x22a>
2400972a:	687b      	ldr	r3, [r7, #4]
2400972c:	4a1d      	ldr	r2, [pc, #116]	; (240097a4 <HAL_GPIO_Init+0x24c>)
2400972e:	4293      	cmp	r3, r2
24009730:	d025      	beq.n	2400977e <HAL_GPIO_Init+0x226>
24009732:	687b      	ldr	r3, [r7, #4]
24009734:	4a1c      	ldr	r2, [pc, #112]	; (240097a8 <HAL_GPIO_Init+0x250>)
24009736:	4293      	cmp	r3, r2
24009738:	d01f      	beq.n	2400977a <HAL_GPIO_Init+0x222>
2400973a:	687b      	ldr	r3, [r7, #4]
2400973c:	4a1b      	ldr	r2, [pc, #108]	; (240097ac <HAL_GPIO_Init+0x254>)
2400973e:	4293      	cmp	r3, r2
24009740:	d019      	beq.n	24009776 <HAL_GPIO_Init+0x21e>
24009742:	687b      	ldr	r3, [r7, #4]
24009744:	4a1a      	ldr	r2, [pc, #104]	; (240097b0 <HAL_GPIO_Init+0x258>)
24009746:	4293      	cmp	r3, r2
24009748:	d013      	beq.n	24009772 <HAL_GPIO_Init+0x21a>
2400974a:	687b      	ldr	r3, [r7, #4]
2400974c:	4a19      	ldr	r2, [pc, #100]	; (240097b4 <HAL_GPIO_Init+0x25c>)
2400974e:	4293      	cmp	r3, r2
24009750:	d00d      	beq.n	2400976e <HAL_GPIO_Init+0x216>
24009752:	687b      	ldr	r3, [r7, #4]
24009754:	4a18      	ldr	r2, [pc, #96]	; (240097b8 <HAL_GPIO_Init+0x260>)
24009756:	4293      	cmp	r3, r2
24009758:	d007      	beq.n	2400976a <HAL_GPIO_Init+0x212>
2400975a:	687b      	ldr	r3, [r7, #4]
2400975c:	4a17      	ldr	r2, [pc, #92]	; (240097bc <HAL_GPIO_Init+0x264>)
2400975e:	4293      	cmp	r3, r2
24009760:	d101      	bne.n	24009766 <HAL_GPIO_Init+0x20e>
24009762:	2309      	movs	r3, #9
24009764:	e02d      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
24009766:	230a      	movs	r3, #10
24009768:	e02b      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
2400976a:	2308      	movs	r3, #8
2400976c:	e029      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
2400976e:	2307      	movs	r3, #7
24009770:	e027      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
24009772:	2306      	movs	r3, #6
24009774:	e025      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
24009776:	2305      	movs	r3, #5
24009778:	e023      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
2400977a:	2304      	movs	r3, #4
2400977c:	e021      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
2400977e:	2303      	movs	r3, #3
24009780:	e01f      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
24009782:	2302      	movs	r3, #2
24009784:	e01d      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
24009786:	2301      	movs	r3, #1
24009788:	e01b      	b.n	240097c2 <HAL_GPIO_Init+0x26a>
2400978a:	bf00      	nop
2400978c:	58000080 	.word	0x58000080
24009790:	58024400 	.word	0x58024400
24009794:	58000400 	.word	0x58000400
24009798:	58020000 	.word	0x58020000
2400979c:	58020400 	.word	0x58020400
240097a0:	58020800 	.word	0x58020800
240097a4:	58020c00 	.word	0x58020c00
240097a8:	58021000 	.word	0x58021000
240097ac:	58021400 	.word	0x58021400
240097b0:	58021800 	.word	0x58021800
240097b4:	58021c00 	.word	0x58021c00
240097b8:	58022000 	.word	0x58022000
240097bc:	58022400 	.word	0x58022400
240097c0:	2300      	movs	r3, #0
240097c2:	69fa      	ldr	r2, [r7, #28]
240097c4:	f002 0203 	and.w	r2, r2, #3
240097c8:	0092      	lsls	r2, r2, #2
240097ca:	4093      	lsls	r3, r2
240097cc:	69ba      	ldr	r2, [r7, #24]
240097ce:	4313      	orrs	r3, r2
240097d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
240097d2:	4938      	ldr	r1, [pc, #224]	; (240098b4 <HAL_GPIO_Init+0x35c>)
240097d4:	69fb      	ldr	r3, [r7, #28]
240097d6:	089b      	lsrs	r3, r3, #2
240097d8:	3302      	adds	r3, #2
240097da:	69ba      	ldr	r2, [r7, #24]
240097dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240097e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240097e4:	681b      	ldr	r3, [r3, #0]
240097e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240097e8:	693b      	ldr	r3, [r7, #16]
240097ea:	43db      	mvns	r3, r3
240097ec:	69ba      	ldr	r2, [r7, #24]
240097ee:	4013      	ands	r3, r2
240097f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240097f2:	683b      	ldr	r3, [r7, #0]
240097f4:	685b      	ldr	r3, [r3, #4]
240097f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240097fa:	2b00      	cmp	r3, #0
240097fc:	d003      	beq.n	24009806 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
240097fe:	69ba      	ldr	r2, [r7, #24]
24009800:	693b      	ldr	r3, [r7, #16]
24009802:	4313      	orrs	r3, r2
24009804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
24009806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400980a:	69bb      	ldr	r3, [r7, #24]
2400980c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
2400980e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009812:	685b      	ldr	r3, [r3, #4]
24009814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24009816:	693b      	ldr	r3, [r7, #16]
24009818:	43db      	mvns	r3, r3
2400981a:	69ba      	ldr	r2, [r7, #24]
2400981c:	4013      	ands	r3, r2
2400981e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24009820:	683b      	ldr	r3, [r7, #0]
24009822:	685b      	ldr	r3, [r3, #4]
24009824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24009828:	2b00      	cmp	r3, #0
2400982a:	d003      	beq.n	24009834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
2400982c:	69ba      	ldr	r2, [r7, #24]
2400982e:	693b      	ldr	r3, [r7, #16]
24009830:	4313      	orrs	r3, r2
24009832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
24009834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24009838:	69bb      	ldr	r3, [r7, #24]
2400983a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2400983c:	697b      	ldr	r3, [r7, #20]
2400983e:	685b      	ldr	r3, [r3, #4]
24009840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24009842:	693b      	ldr	r3, [r7, #16]
24009844:	43db      	mvns	r3, r3
24009846:	69ba      	ldr	r2, [r7, #24]
24009848:	4013      	ands	r3, r2
2400984a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400984c:	683b      	ldr	r3, [r7, #0]
2400984e:	685b      	ldr	r3, [r3, #4]
24009850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24009854:	2b00      	cmp	r3, #0
24009856:	d003      	beq.n	24009860 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
24009858:	69ba      	ldr	r2, [r7, #24]
2400985a:	693b      	ldr	r3, [r7, #16]
2400985c:	4313      	orrs	r3, r2
2400985e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24009860:	697b      	ldr	r3, [r7, #20]
24009862:	69ba      	ldr	r2, [r7, #24]
24009864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24009866:	697b      	ldr	r3, [r7, #20]
24009868:	681b      	ldr	r3, [r3, #0]
2400986a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400986c:	693b      	ldr	r3, [r7, #16]
2400986e:	43db      	mvns	r3, r3
24009870:	69ba      	ldr	r2, [r7, #24]
24009872:	4013      	ands	r3, r2
24009874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24009876:	683b      	ldr	r3, [r7, #0]
24009878:	685b      	ldr	r3, [r3, #4]
2400987a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400987e:	2b00      	cmp	r3, #0
24009880:	d003      	beq.n	2400988a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
24009882:	69ba      	ldr	r2, [r7, #24]
24009884:	693b      	ldr	r3, [r7, #16]
24009886:	4313      	orrs	r3, r2
24009888:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400988a:	697b      	ldr	r3, [r7, #20]
2400988c:	69ba      	ldr	r2, [r7, #24]
2400988e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
24009890:	69fb      	ldr	r3, [r7, #28]
24009892:	3301      	adds	r3, #1
24009894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24009896:	683b      	ldr	r3, [r7, #0]
24009898:	681a      	ldr	r2, [r3, #0]
2400989a:	69fb      	ldr	r3, [r7, #28]
2400989c:	fa22 f303 	lsr.w	r3, r2, r3
240098a0:	2b00      	cmp	r3, #0
240098a2:	f47f ae63 	bne.w	2400956c <HAL_GPIO_Init+0x14>
  }
}
240098a6:	bf00      	nop
240098a8:	bf00      	nop
240098aa:	3724      	adds	r7, #36	; 0x24
240098ac:	46bd      	mov	sp, r7
240098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240098b2:	4770      	bx	lr
240098b4:	58000400 	.word	0x58000400

240098b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
240098b8:	b480      	push	{r7}
240098ba:	b087      	sub	sp, #28
240098bc:	af00      	add	r7, sp, #0
240098be:	6078      	str	r0, [r7, #4]
240098c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
240098c2:	2300      	movs	r3, #0
240098c4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
240098c6:	4b75      	ldr	r3, [pc, #468]	; (24009a9c <HAL_GPIO_DeInit+0x1e4>)
240098c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
240098ca:	e0d9      	b.n	24009a80 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
240098cc:	2201      	movs	r2, #1
240098ce:	697b      	ldr	r3, [r7, #20]
240098d0:	fa02 f303 	lsl.w	r3, r2, r3
240098d4:	683a      	ldr	r2, [r7, #0]
240098d6:	4013      	ands	r3, r2
240098d8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
240098da:	68fb      	ldr	r3, [r7, #12]
240098dc:	2b00      	cmp	r3, #0
240098de:	f000 80cc 	beq.w	24009a7a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
240098e2:	4a6f      	ldr	r2, [pc, #444]	; (24009aa0 <HAL_GPIO_DeInit+0x1e8>)
240098e4:	697b      	ldr	r3, [r7, #20]
240098e6:	089b      	lsrs	r3, r3, #2
240098e8:	3302      	adds	r3, #2
240098ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240098ee:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
240098f0:	697b      	ldr	r3, [r7, #20]
240098f2:	f003 0303 	and.w	r3, r3, #3
240098f6:	009b      	lsls	r3, r3, #2
240098f8:	220f      	movs	r2, #15
240098fa:	fa02 f303 	lsl.w	r3, r2, r3
240098fe:	68ba      	ldr	r2, [r7, #8]
24009900:	4013      	ands	r3, r2
24009902:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
24009904:	687b      	ldr	r3, [r7, #4]
24009906:	4a67      	ldr	r2, [pc, #412]	; (24009aa4 <HAL_GPIO_DeInit+0x1ec>)
24009908:	4293      	cmp	r3, r2
2400990a:	d037      	beq.n	2400997c <HAL_GPIO_DeInit+0xc4>
2400990c:	687b      	ldr	r3, [r7, #4]
2400990e:	4a66      	ldr	r2, [pc, #408]	; (24009aa8 <HAL_GPIO_DeInit+0x1f0>)
24009910:	4293      	cmp	r3, r2
24009912:	d031      	beq.n	24009978 <HAL_GPIO_DeInit+0xc0>
24009914:	687b      	ldr	r3, [r7, #4]
24009916:	4a65      	ldr	r2, [pc, #404]	; (24009aac <HAL_GPIO_DeInit+0x1f4>)
24009918:	4293      	cmp	r3, r2
2400991a:	d02b      	beq.n	24009974 <HAL_GPIO_DeInit+0xbc>
2400991c:	687b      	ldr	r3, [r7, #4]
2400991e:	4a64      	ldr	r2, [pc, #400]	; (24009ab0 <HAL_GPIO_DeInit+0x1f8>)
24009920:	4293      	cmp	r3, r2
24009922:	d025      	beq.n	24009970 <HAL_GPIO_DeInit+0xb8>
24009924:	687b      	ldr	r3, [r7, #4]
24009926:	4a63      	ldr	r2, [pc, #396]	; (24009ab4 <HAL_GPIO_DeInit+0x1fc>)
24009928:	4293      	cmp	r3, r2
2400992a:	d01f      	beq.n	2400996c <HAL_GPIO_DeInit+0xb4>
2400992c:	687b      	ldr	r3, [r7, #4]
2400992e:	4a62      	ldr	r2, [pc, #392]	; (24009ab8 <HAL_GPIO_DeInit+0x200>)
24009930:	4293      	cmp	r3, r2
24009932:	d019      	beq.n	24009968 <HAL_GPIO_DeInit+0xb0>
24009934:	687b      	ldr	r3, [r7, #4]
24009936:	4a61      	ldr	r2, [pc, #388]	; (24009abc <HAL_GPIO_DeInit+0x204>)
24009938:	4293      	cmp	r3, r2
2400993a:	d013      	beq.n	24009964 <HAL_GPIO_DeInit+0xac>
2400993c:	687b      	ldr	r3, [r7, #4]
2400993e:	4a60      	ldr	r2, [pc, #384]	; (24009ac0 <HAL_GPIO_DeInit+0x208>)
24009940:	4293      	cmp	r3, r2
24009942:	d00d      	beq.n	24009960 <HAL_GPIO_DeInit+0xa8>
24009944:	687b      	ldr	r3, [r7, #4]
24009946:	4a5f      	ldr	r2, [pc, #380]	; (24009ac4 <HAL_GPIO_DeInit+0x20c>)
24009948:	4293      	cmp	r3, r2
2400994a:	d007      	beq.n	2400995c <HAL_GPIO_DeInit+0xa4>
2400994c:	687b      	ldr	r3, [r7, #4]
2400994e:	4a5e      	ldr	r2, [pc, #376]	; (24009ac8 <HAL_GPIO_DeInit+0x210>)
24009950:	4293      	cmp	r3, r2
24009952:	d101      	bne.n	24009958 <HAL_GPIO_DeInit+0xa0>
24009954:	2309      	movs	r3, #9
24009956:	e012      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009958:	230a      	movs	r3, #10
2400995a:	e010      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
2400995c:	2308      	movs	r3, #8
2400995e:	e00e      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009960:	2307      	movs	r3, #7
24009962:	e00c      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009964:	2306      	movs	r3, #6
24009966:	e00a      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009968:	2305      	movs	r3, #5
2400996a:	e008      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
2400996c:	2304      	movs	r3, #4
2400996e:	e006      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009970:	2303      	movs	r3, #3
24009972:	e004      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009974:	2302      	movs	r3, #2
24009976:	e002      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
24009978:	2301      	movs	r3, #1
2400997a:	e000      	b.n	2400997e <HAL_GPIO_DeInit+0xc6>
2400997c:	2300      	movs	r3, #0
2400997e:	697a      	ldr	r2, [r7, #20]
24009980:	f002 0203 	and.w	r2, r2, #3
24009984:	0092      	lsls	r2, r2, #2
24009986:	4093      	lsls	r3, r2
24009988:	68ba      	ldr	r2, [r7, #8]
2400998a:	429a      	cmp	r2, r3
2400998c:	d136      	bne.n	240099fc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
2400998e:	693b      	ldr	r3, [r7, #16]
24009990:	681a      	ldr	r2, [r3, #0]
24009992:	68fb      	ldr	r3, [r7, #12]
24009994:	43db      	mvns	r3, r3
24009996:	401a      	ands	r2, r3
24009998:	693b      	ldr	r3, [r7, #16]
2400999a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
2400999c:	693b      	ldr	r3, [r7, #16]
2400999e:	685a      	ldr	r2, [r3, #4]
240099a0:	68fb      	ldr	r3, [r7, #12]
240099a2:	43db      	mvns	r3, r3
240099a4:	401a      	ands	r2, r3
240099a6:	693b      	ldr	r3, [r7, #16]
240099a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
240099aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240099ae:	685a      	ldr	r2, [r3, #4]
240099b0:	68fb      	ldr	r3, [r7, #12]
240099b2:	43db      	mvns	r3, r3
240099b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
240099b8:	4013      	ands	r3, r2
240099ba:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
240099bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240099c0:	681a      	ldr	r2, [r3, #0]
240099c2:	68fb      	ldr	r3, [r7, #12]
240099c4:	43db      	mvns	r3, r3
240099c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
240099ca:	4013      	ands	r3, r2
240099cc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
240099ce:	697b      	ldr	r3, [r7, #20]
240099d0:	f003 0303 	and.w	r3, r3, #3
240099d4:	009b      	lsls	r3, r3, #2
240099d6:	220f      	movs	r2, #15
240099d8:	fa02 f303 	lsl.w	r3, r2, r3
240099dc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
240099de:	4a30      	ldr	r2, [pc, #192]	; (24009aa0 <HAL_GPIO_DeInit+0x1e8>)
240099e0:	697b      	ldr	r3, [r7, #20]
240099e2:	089b      	lsrs	r3, r3, #2
240099e4:	3302      	adds	r3, #2
240099e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
240099ea:	68bb      	ldr	r3, [r7, #8]
240099ec:	43da      	mvns	r2, r3
240099ee:	482c      	ldr	r0, [pc, #176]	; (24009aa0 <HAL_GPIO_DeInit+0x1e8>)
240099f0:	697b      	ldr	r3, [r7, #20]
240099f2:	089b      	lsrs	r3, r3, #2
240099f4:	400a      	ands	r2, r1
240099f6:	3302      	adds	r3, #2
240099f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
240099fc:	687b      	ldr	r3, [r7, #4]
240099fe:	681a      	ldr	r2, [r3, #0]
24009a00:	697b      	ldr	r3, [r7, #20]
24009a02:	005b      	lsls	r3, r3, #1
24009a04:	2103      	movs	r1, #3
24009a06:	fa01 f303 	lsl.w	r3, r1, r3
24009a0a:	431a      	orrs	r2, r3
24009a0c:	687b      	ldr	r3, [r7, #4]
24009a0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
24009a10:	697b      	ldr	r3, [r7, #20]
24009a12:	08da      	lsrs	r2, r3, #3
24009a14:	687b      	ldr	r3, [r7, #4]
24009a16:	3208      	adds	r2, #8
24009a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
24009a1c:	697b      	ldr	r3, [r7, #20]
24009a1e:	f003 0307 	and.w	r3, r3, #7
24009a22:	009b      	lsls	r3, r3, #2
24009a24:	220f      	movs	r2, #15
24009a26:	fa02 f303 	lsl.w	r3, r2, r3
24009a2a:	43db      	mvns	r3, r3
24009a2c:	697a      	ldr	r2, [r7, #20]
24009a2e:	08d2      	lsrs	r2, r2, #3
24009a30:	4019      	ands	r1, r3
24009a32:	687b      	ldr	r3, [r7, #4]
24009a34:	3208      	adds	r2, #8
24009a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24009a3a:	687b      	ldr	r3, [r7, #4]
24009a3c:	68da      	ldr	r2, [r3, #12]
24009a3e:	697b      	ldr	r3, [r7, #20]
24009a40:	005b      	lsls	r3, r3, #1
24009a42:	2103      	movs	r1, #3
24009a44:	fa01 f303 	lsl.w	r3, r1, r3
24009a48:	43db      	mvns	r3, r3
24009a4a:	401a      	ands	r2, r3
24009a4c:	687b      	ldr	r3, [r7, #4]
24009a4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
24009a50:	687b      	ldr	r3, [r7, #4]
24009a52:	685a      	ldr	r2, [r3, #4]
24009a54:	2101      	movs	r1, #1
24009a56:	697b      	ldr	r3, [r7, #20]
24009a58:	fa01 f303 	lsl.w	r3, r1, r3
24009a5c:	43db      	mvns	r3, r3
24009a5e:	401a      	ands	r2, r3
24009a60:	687b      	ldr	r3, [r7, #4]
24009a62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24009a64:	687b      	ldr	r3, [r7, #4]
24009a66:	689a      	ldr	r2, [r3, #8]
24009a68:	697b      	ldr	r3, [r7, #20]
24009a6a:	005b      	lsls	r3, r3, #1
24009a6c:	2103      	movs	r1, #3
24009a6e:	fa01 f303 	lsl.w	r3, r1, r3
24009a72:	43db      	mvns	r3, r3
24009a74:	401a      	ands	r2, r3
24009a76:	687b      	ldr	r3, [r7, #4]
24009a78:	609a      	str	r2, [r3, #8]
    }

    position++;
24009a7a:	697b      	ldr	r3, [r7, #20]
24009a7c:	3301      	adds	r3, #1
24009a7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
24009a80:	683a      	ldr	r2, [r7, #0]
24009a82:	697b      	ldr	r3, [r7, #20]
24009a84:	fa22 f303 	lsr.w	r3, r2, r3
24009a88:	2b00      	cmp	r3, #0
24009a8a:	f47f af1f 	bne.w	240098cc <HAL_GPIO_DeInit+0x14>
  }
}
24009a8e:	bf00      	nop
24009a90:	bf00      	nop
24009a92:	371c      	adds	r7, #28
24009a94:	46bd      	mov	sp, r7
24009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
24009a9a:	4770      	bx	lr
24009a9c:	58000080 	.word	0x58000080
24009aa0:	58000400 	.word	0x58000400
24009aa4:	58020000 	.word	0x58020000
24009aa8:	58020400 	.word	0x58020400
24009aac:	58020800 	.word	0x58020800
24009ab0:	58020c00 	.word	0x58020c00
24009ab4:	58021000 	.word	0x58021000
24009ab8:	58021400 	.word	0x58021400
24009abc:	58021800 	.word	0x58021800
24009ac0:	58021c00 	.word	0x58021c00
24009ac4:	58022000 	.word	0x58022000
24009ac8:	58022400 	.word	0x58022400

24009acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009acc:	b480      	push	{r7}
24009ace:	b085      	sub	sp, #20
24009ad0:	af00      	add	r7, sp, #0
24009ad2:	6078      	str	r0, [r7, #4]
24009ad4:	460b      	mov	r3, r1
24009ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24009ad8:	687b      	ldr	r3, [r7, #4]
24009ada:	691a      	ldr	r2, [r3, #16]
24009adc:	887b      	ldrh	r3, [r7, #2]
24009ade:	4013      	ands	r3, r2
24009ae0:	2b00      	cmp	r3, #0
24009ae2:	d002      	beq.n	24009aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24009ae4:	2301      	movs	r3, #1
24009ae6:	73fb      	strb	r3, [r7, #15]
24009ae8:	e001      	b.n	24009aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24009aea:	2300      	movs	r3, #0
24009aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
24009aee:	7bfb      	ldrb	r3, [r7, #15]
}
24009af0:	4618      	mov	r0, r3
24009af2:	3714      	adds	r7, #20
24009af4:	46bd      	mov	sp, r7
24009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009afa:	4770      	bx	lr

24009afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24009afc:	b480      	push	{r7}
24009afe:	b083      	sub	sp, #12
24009b00:	af00      	add	r7, sp, #0
24009b02:	6078      	str	r0, [r7, #4]
24009b04:	460b      	mov	r3, r1
24009b06:	807b      	strh	r3, [r7, #2]
24009b08:	4613      	mov	r3, r2
24009b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24009b0c:	787b      	ldrb	r3, [r7, #1]
24009b0e:	2b00      	cmp	r3, #0
24009b10:	d003      	beq.n	24009b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
24009b12:	887a      	ldrh	r2, [r7, #2]
24009b14:	687b      	ldr	r3, [r7, #4]
24009b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
24009b18:	e003      	b.n	24009b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24009b1a:	887b      	ldrh	r3, [r7, #2]
24009b1c:	041a      	lsls	r2, r3, #16
24009b1e:	687b      	ldr	r3, [r7, #4]
24009b20:	619a      	str	r2, [r3, #24]
}
24009b22:	bf00      	nop
24009b24:	370c      	adds	r7, #12
24009b26:	46bd      	mov	sp, r7
24009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b2c:	4770      	bx	lr

24009b2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009b2e:	b480      	push	{r7}
24009b30:	b085      	sub	sp, #20
24009b32:	af00      	add	r7, sp, #0
24009b34:	6078      	str	r0, [r7, #4]
24009b36:	460b      	mov	r3, r1
24009b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
24009b3a:	687b      	ldr	r3, [r7, #4]
24009b3c:	695b      	ldr	r3, [r3, #20]
24009b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
24009b40:	887a      	ldrh	r2, [r7, #2]
24009b42:	68fb      	ldr	r3, [r7, #12]
24009b44:	4013      	ands	r3, r2
24009b46:	041a      	lsls	r2, r3, #16
24009b48:	68fb      	ldr	r3, [r7, #12]
24009b4a:	43d9      	mvns	r1, r3
24009b4c:	887b      	ldrh	r3, [r7, #2]
24009b4e:	400b      	ands	r3, r1
24009b50:	431a      	orrs	r2, r3
24009b52:	687b      	ldr	r3, [r7, #4]
24009b54:	619a      	str	r2, [r3, #24]
}
24009b56:	bf00      	nop
24009b58:	3714      	adds	r7, #20
24009b5a:	46bd      	mov	sp, r7
24009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b60:	4770      	bx	lr

24009b62 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009b62:	b480      	push	{r7}
24009b64:	b085      	sub	sp, #20
24009b66:	af00      	add	r7, sp, #0
24009b68:	6078      	str	r0, [r7, #4]
24009b6a:	460b      	mov	r3, r1
24009b6c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
24009b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24009b72:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
24009b74:	887a      	ldrh	r2, [r7, #2]
24009b76:	68fb      	ldr	r3, [r7, #12]
24009b78:	4313      	orrs	r3, r2
24009b7a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
24009b7c:	68fa      	ldr	r2, [r7, #12]
24009b7e:	687b      	ldr	r3, [r7, #4]
24009b80:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
24009b82:	887a      	ldrh	r2, [r7, #2]
24009b84:	687b      	ldr	r3, [r7, #4]
24009b86:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
24009b88:	68fa      	ldr	r2, [r7, #12]
24009b8a:	687b      	ldr	r3, [r7, #4]
24009b8c:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
24009b8e:	687b      	ldr	r3, [r7, #4]
24009b90:	69db      	ldr	r3, [r3, #28]
24009b92:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
24009b94:	687b      	ldr	r3, [r7, #4]
24009b96:	69db      	ldr	r3, [r3, #28]
24009b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24009b9c:	2b00      	cmp	r3, #0
24009b9e:	d001      	beq.n	24009ba4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
24009ba0:	2300      	movs	r3, #0
24009ba2:	e000      	b.n	24009ba6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
24009ba4:	2301      	movs	r3, #1
  }
}
24009ba6:	4618      	mov	r0, r3
24009ba8:	3714      	adds	r7, #20
24009baa:	46bd      	mov	sp, r7
24009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bb0:	4770      	bx	lr

24009bb2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
24009bb2:	b580      	push	{r7, lr}
24009bb4:	b082      	sub	sp, #8
24009bb6:	af00      	add	r7, sp, #0
24009bb8:	4603      	mov	r3, r0
24009bba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
24009bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009bc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
24009bc4:	88fb      	ldrh	r3, [r7, #6]
24009bc6:	4013      	ands	r3, r2
24009bc8:	2b00      	cmp	r3, #0
24009bca:	d008      	beq.n	24009bde <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
24009bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24009bd0:	88fb      	ldrh	r3, [r7, #6]
24009bd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24009bd6:	88fb      	ldrh	r3, [r7, #6]
24009bd8:	4618      	mov	r0, r3
24009bda:	f000 f804 	bl	24009be6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24009bde:	bf00      	nop
24009be0:	3708      	adds	r7, #8
24009be2:	46bd      	mov	sp, r7
24009be4:	bd80      	pop	{r7, pc}

24009be6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
24009be6:	b480      	push	{r7}
24009be8:	b083      	sub	sp, #12
24009bea:	af00      	add	r7, sp, #0
24009bec:	4603      	mov	r3, r0
24009bee:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
24009bf0:	bf00      	nop
24009bf2:	370c      	adds	r7, #12
24009bf4:	46bd      	mov	sp, r7
24009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bfa:	4770      	bx	lr

24009bfc <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
24009bfc:	b480      	push	{r7}
24009bfe:	b083      	sub	sp, #12
24009c00:	af00      	add	r7, sp, #0
24009c02:	6078      	str	r0, [r7, #4]
24009c04:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
24009c06:	490c      	ldr	r1, [pc, #48]	; (24009c38 <HAL_HSEM_Take+0x3c>)
24009c08:	683a      	ldr	r2, [r7, #0]
24009c0a:	4b0c      	ldr	r3, [pc, #48]	; (24009c3c <HAL_HSEM_Take+0x40>)
24009c0c:	4313      	orrs	r3, r2
24009c0e:	687a      	ldr	r2, [r7, #4]
24009c10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
24009c14:	4a08      	ldr	r2, [pc, #32]	; (24009c38 <HAL_HSEM_Take+0x3c>)
24009c16:	687b      	ldr	r3, [r7, #4]
24009c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24009c1c:	6839      	ldr	r1, [r7, #0]
24009c1e:	4b07      	ldr	r3, [pc, #28]	; (24009c3c <HAL_HSEM_Take+0x40>)
24009c20:	430b      	orrs	r3, r1
24009c22:	429a      	cmp	r2, r3
24009c24:	d101      	bne.n	24009c2a <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
24009c26:	2300      	movs	r3, #0
24009c28:	e000      	b.n	24009c2c <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
24009c2a:	2301      	movs	r3, #1
}
24009c2c:	4618      	mov	r0, r3
24009c2e:	370c      	adds	r7, #12
24009c30:	46bd      	mov	sp, r7
24009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c36:	4770      	bx	lr
24009c38:	58026400 	.word	0x58026400
24009c3c:	80000300 	.word	0x80000300

24009c40 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
24009c40:	b480      	push	{r7}
24009c42:	b083      	sub	sp, #12
24009c44:	af00      	add	r7, sp, #0
24009c46:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
24009c48:	4a08      	ldr	r2, [pc, #32]	; (24009c6c <HAL_HSEM_FastTake+0x2c>)
24009c4a:	687b      	ldr	r3, [r7, #4]
24009c4c:	3320      	adds	r3, #32
24009c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009c52:	4a07      	ldr	r2, [pc, #28]	; (24009c70 <HAL_HSEM_FastTake+0x30>)
24009c54:	4293      	cmp	r3, r2
24009c56:	d101      	bne.n	24009c5c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
24009c58:	2300      	movs	r3, #0
24009c5a:	e000      	b.n	24009c5e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
24009c5c:	2301      	movs	r3, #1
}
24009c5e:	4618      	mov	r0, r3
24009c60:	370c      	adds	r7, #12
24009c62:	46bd      	mov	sp, r7
24009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c68:	4770      	bx	lr
24009c6a:	bf00      	nop
24009c6c:	58026400 	.word	0x58026400
24009c70:	80000300 	.word	0x80000300

24009c74 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
24009c74:	b480      	push	{r7}
24009c76:	b083      	sub	sp, #12
24009c78:	af00      	add	r7, sp, #0
24009c7a:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
24009c7c:	4a07      	ldr	r2, [pc, #28]	; (24009c9c <HAL_HSEM_IsSemTaken+0x28>)
24009c7e:	687b      	ldr	r3, [r7, #4]
24009c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009c84:	2b00      	cmp	r3, #0
24009c86:	da01      	bge.n	24009c8c <HAL_HSEM_IsSemTaken+0x18>
24009c88:	2301      	movs	r3, #1
24009c8a:	e000      	b.n	24009c8e <HAL_HSEM_IsSemTaken+0x1a>
24009c8c:	2300      	movs	r3, #0
}
24009c8e:	4618      	mov	r0, r3
24009c90:	370c      	adds	r7, #12
24009c92:	46bd      	mov	sp, r7
24009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c98:	4770      	bx	lr
24009c9a:	bf00      	nop
24009c9c:	58026400 	.word	0x58026400

24009ca0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
24009ca0:	b480      	push	{r7}
24009ca2:	b083      	sub	sp, #12
24009ca4:	af00      	add	r7, sp, #0
24009ca6:	6078      	str	r0, [r7, #4]
24009ca8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
24009caa:	4906      	ldr	r1, [pc, #24]	; (24009cc4 <HAL_HSEM_Release+0x24>)
24009cac:	683b      	ldr	r3, [r7, #0]
24009cae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
24009cb2:	687b      	ldr	r3, [r7, #4]
24009cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
24009cb8:	bf00      	nop
24009cba:	370c      	adds	r7, #12
24009cbc:	46bd      	mov	sp, r7
24009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
24009cc2:	4770      	bx	lr
24009cc4:	58026400 	.word	0x58026400

24009cc8 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
24009cc8:	b480      	push	{r7}
24009cca:	b083      	sub	sp, #12
24009ccc:	af00      	add	r7, sp, #0
24009cce:	6078      	str	r0, [r7, #4]
24009cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
24009cd2:	687b      	ldr	r3, [r7, #4]
24009cd4:	041a      	lsls	r2, r3, #16
24009cd6:	683b      	ldr	r3, [r7, #0]
24009cd8:	021b      	lsls	r3, r3, #8
24009cda:	4905      	ldr	r1, [pc, #20]	; (24009cf0 <HAL_HSEM_ReleaseAll+0x28>)
24009cdc:	4313      	orrs	r3, r2
24009cde:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
}
24009ce2:	bf00      	nop
24009ce4:	370c      	adds	r7, #12
24009ce6:	46bd      	mov	sp, r7
24009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
24009cec:	4770      	bx	lr
24009cee:	bf00      	nop
24009cf0:	58026400 	.word	0x58026400

24009cf4 <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
24009cf4:	b480      	push	{r7}
24009cf6:	b083      	sub	sp, #12
24009cf8:	af00      	add	r7, sp, #0
24009cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
24009cfc:	4b07      	ldr	r3, [pc, #28]	; (24009d1c <HAL_HSEM_SetClearKey+0x28>)
24009cfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24009d02:	b29a      	uxth	r2, r3
24009d04:	687b      	ldr	r3, [r7, #4]
24009d06:	041b      	lsls	r3, r3, #16
24009d08:	4904      	ldr	r1, [pc, #16]	; (24009d1c <HAL_HSEM_SetClearKey+0x28>)
24009d0a:	4313      	orrs	r3, r2
24009d0c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

}
24009d10:	bf00      	nop
24009d12:	370c      	adds	r7, #12
24009d14:	46bd      	mov	sp, r7
24009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d1a:	4770      	bx	lr
24009d1c:	58026400 	.word	0x58026400

24009d20 <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
24009d20:	b480      	push	{r7}
24009d22:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
24009d24:	4b04      	ldr	r3, [pc, #16]	; (24009d38 <HAL_HSEM_GetClearKey+0x18>)
24009d26:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24009d2a:	0c1b      	lsrs	r3, r3, #16
}
24009d2c:	4618      	mov	r0, r3
24009d2e:	46bd      	mov	sp, r7
24009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d34:	4770      	bx	lr
24009d36:	bf00      	nop
24009d38:	58026400 	.word	0x58026400

24009d3c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
24009d3c:	b480      	push	{r7}
24009d3e:	b083      	sub	sp, #12
24009d40:	af00      	add	r7, sp, #0
24009d42:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
24009d44:	4b05      	ldr	r3, [pc, #20]	; (24009d5c <HAL_HSEM_ActivateNotification+0x20>)
24009d46:	681a      	ldr	r2, [r3, #0]
24009d48:	4904      	ldr	r1, [pc, #16]	; (24009d5c <HAL_HSEM_ActivateNotification+0x20>)
24009d4a:	687b      	ldr	r3, [r7, #4]
24009d4c:	4313      	orrs	r3, r2
24009d4e:	600b      	str	r3, [r1, #0]
#endif
}
24009d50:	bf00      	nop
24009d52:	370c      	adds	r7, #12
24009d54:	46bd      	mov	sp, r7
24009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d5a:	4770      	bx	lr
24009d5c:	58026500 	.word	0x58026500

24009d60 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
24009d60:	b480      	push	{r7}
24009d62:	b083      	sub	sp, #12
24009d64:	af00      	add	r7, sp, #0
24009d66:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
24009d68:	4b06      	ldr	r3, [pc, #24]	; (24009d84 <HAL_HSEM_DeactivateNotification+0x24>)
24009d6a:	681a      	ldr	r2, [r3, #0]
24009d6c:	687b      	ldr	r3, [r7, #4]
24009d6e:	43db      	mvns	r3, r3
24009d70:	4904      	ldr	r1, [pc, #16]	; (24009d84 <HAL_HSEM_DeactivateNotification+0x24>)
24009d72:	4013      	ands	r3, r2
24009d74:	600b      	str	r3, [r1, #0]
#endif
}
24009d76:	bf00      	nop
24009d78:	370c      	adds	r7, #12
24009d7a:	46bd      	mov	sp, r7
24009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d80:	4770      	bx	lr
24009d82:	bf00      	nop
24009d84:	58026500 	.word	0x58026500

24009d88 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
24009d88:	b580      	push	{r7, lr}
24009d8a:	b082      	sub	sp, #8
24009d8c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
24009d8e:	4b0a      	ldr	r3, [pc, #40]	; (24009db8 <HAL_HSEM_IRQHandler+0x30>)
24009d90:	68db      	ldr	r3, [r3, #12]
24009d92:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
24009d94:	4b08      	ldr	r3, [pc, #32]	; (24009db8 <HAL_HSEM_IRQHandler+0x30>)
24009d96:	681a      	ldr	r2, [r3, #0]
24009d98:	687b      	ldr	r3, [r7, #4]
24009d9a:	43db      	mvns	r3, r3
24009d9c:	4906      	ldr	r1, [pc, #24]	; (24009db8 <HAL_HSEM_IRQHandler+0x30>)
24009d9e:	4013      	ands	r3, r2
24009da0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
24009da2:	4a05      	ldr	r2, [pc, #20]	; (24009db8 <HAL_HSEM_IRQHandler+0x30>)
24009da4:	687b      	ldr	r3, [r7, #4]
24009da6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
24009da8:	6878      	ldr	r0, [r7, #4]
24009daa:	f000 f807 	bl	24009dbc <HAL_HSEM_FreeCallback>
}
24009dae:	bf00      	nop
24009db0:	3708      	adds	r7, #8
24009db2:	46bd      	mov	sp, r7
24009db4:	bd80      	pop	{r7, pc}
24009db6:	bf00      	nop
24009db8:	58026500 	.word	0x58026500

24009dbc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
24009dbc:	b480      	push	{r7}
24009dbe:	b083      	sub	sp, #12
24009dc0:	af00      	add	r7, sp, #0
24009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
24009dc4:	bf00      	nop
24009dc6:	370c      	adds	r7, #12
24009dc8:	46bd      	mov	sp, r7
24009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
24009dce:	4770      	bx	lr

24009dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
24009dd0:	b580      	push	{r7, lr}
24009dd2:	b082      	sub	sp, #8
24009dd4:	af00      	add	r7, sp, #0
24009dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
24009dd8:	687b      	ldr	r3, [r7, #4]
24009dda:	2b00      	cmp	r3, #0
24009ddc:	d101      	bne.n	24009de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
24009dde:	2301      	movs	r3, #1
24009de0:	e07f      	b.n	24009ee2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
24009de2:	687b      	ldr	r3, [r7, #4]
24009de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24009de8:	b2db      	uxtb	r3, r3
24009dea:	2b00      	cmp	r3, #0
24009dec:	d106      	bne.n	24009dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
24009dee:	687b      	ldr	r3, [r7, #4]
24009df0:	2200      	movs	r2, #0
24009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
24009df6:	6878      	ldr	r0, [r7, #4]
24009df8:	f000 f8a9 	bl	24009f4e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
24009dfc:	687b      	ldr	r3, [r7, #4]
24009dfe:	2224      	movs	r2, #36	; 0x24
24009e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
24009e04:	687b      	ldr	r3, [r7, #4]
24009e06:	681b      	ldr	r3, [r3, #0]
24009e08:	681a      	ldr	r2, [r3, #0]
24009e0a:	687b      	ldr	r3, [r7, #4]
24009e0c:	681b      	ldr	r3, [r3, #0]
24009e0e:	f022 0201 	bic.w	r2, r2, #1
24009e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24009e14:	687b      	ldr	r3, [r7, #4]
24009e16:	685a      	ldr	r2, [r3, #4]
24009e18:	687b      	ldr	r3, [r7, #4]
24009e1a:	681b      	ldr	r3, [r3, #0]
24009e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
24009e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24009e22:	687b      	ldr	r3, [r7, #4]
24009e24:	681b      	ldr	r3, [r3, #0]
24009e26:	689a      	ldr	r2, [r3, #8]
24009e28:	687b      	ldr	r3, [r7, #4]
24009e2a:	681b      	ldr	r3, [r3, #0]
24009e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24009e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24009e32:	687b      	ldr	r3, [r7, #4]
24009e34:	68db      	ldr	r3, [r3, #12]
24009e36:	2b01      	cmp	r3, #1
24009e38:	d107      	bne.n	24009e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24009e3a:	687b      	ldr	r3, [r7, #4]
24009e3c:	689a      	ldr	r2, [r3, #8]
24009e3e:	687b      	ldr	r3, [r7, #4]
24009e40:	681b      	ldr	r3, [r3, #0]
24009e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
24009e46:	609a      	str	r2, [r3, #8]
24009e48:	e006      	b.n	24009e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24009e4a:	687b      	ldr	r3, [r7, #4]
24009e4c:	689a      	ldr	r2, [r3, #8]
24009e4e:	687b      	ldr	r3, [r7, #4]
24009e50:	681b      	ldr	r3, [r3, #0]
24009e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
24009e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24009e58:	687b      	ldr	r3, [r7, #4]
24009e5a:	68db      	ldr	r3, [r3, #12]
24009e5c:	2b02      	cmp	r3, #2
24009e5e:	d104      	bne.n	24009e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24009e60:	687b      	ldr	r3, [r7, #4]
24009e62:	681b      	ldr	r3, [r3, #0]
24009e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
24009e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24009e6a:	687b      	ldr	r3, [r7, #4]
24009e6c:	681b      	ldr	r3, [r3, #0]
24009e6e:	6859      	ldr	r1, [r3, #4]
24009e70:	687b      	ldr	r3, [r7, #4]
24009e72:	681a      	ldr	r2, [r3, #0]
24009e74:	4b1d      	ldr	r3, [pc, #116]	; (24009eec <HAL_I2C_Init+0x11c>)
24009e76:	430b      	orrs	r3, r1
24009e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24009e7a:	687b      	ldr	r3, [r7, #4]
24009e7c:	681b      	ldr	r3, [r3, #0]
24009e7e:	68da      	ldr	r2, [r3, #12]
24009e80:	687b      	ldr	r3, [r7, #4]
24009e82:	681b      	ldr	r3, [r3, #0]
24009e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24009e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24009e8a:	687b      	ldr	r3, [r7, #4]
24009e8c:	691a      	ldr	r2, [r3, #16]
24009e8e:	687b      	ldr	r3, [r7, #4]
24009e90:	695b      	ldr	r3, [r3, #20]
24009e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
24009e96:	687b      	ldr	r3, [r7, #4]
24009e98:	699b      	ldr	r3, [r3, #24]
24009e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24009e9c:	687b      	ldr	r3, [r7, #4]
24009e9e:	681b      	ldr	r3, [r3, #0]
24009ea0:	430a      	orrs	r2, r1
24009ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24009ea4:	687b      	ldr	r3, [r7, #4]
24009ea6:	69d9      	ldr	r1, [r3, #28]
24009ea8:	687b      	ldr	r3, [r7, #4]
24009eaa:	6a1a      	ldr	r2, [r3, #32]
24009eac:	687b      	ldr	r3, [r7, #4]
24009eae:	681b      	ldr	r3, [r3, #0]
24009eb0:	430a      	orrs	r2, r1
24009eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
24009eb4:	687b      	ldr	r3, [r7, #4]
24009eb6:	681b      	ldr	r3, [r3, #0]
24009eb8:	681a      	ldr	r2, [r3, #0]
24009eba:	687b      	ldr	r3, [r7, #4]
24009ebc:	681b      	ldr	r3, [r3, #0]
24009ebe:	f042 0201 	orr.w	r2, r2, #1
24009ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24009ec4:	687b      	ldr	r3, [r7, #4]
24009ec6:	2200      	movs	r2, #0
24009ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24009eca:	687b      	ldr	r3, [r7, #4]
24009ecc:	2220      	movs	r2, #32
24009ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24009ed2:	687b      	ldr	r3, [r7, #4]
24009ed4:	2200      	movs	r2, #0
24009ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24009ed8:	687b      	ldr	r3, [r7, #4]
24009eda:	2200      	movs	r2, #0
24009edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
24009ee0:	2300      	movs	r3, #0
}
24009ee2:	4618      	mov	r0, r3
24009ee4:	3708      	adds	r7, #8
24009ee6:	46bd      	mov	sp, r7
24009ee8:	bd80      	pop	{r7, pc}
24009eea:	bf00      	nop
24009eec:	02008000 	.word	0x02008000

24009ef0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
24009ef0:	b580      	push	{r7, lr}
24009ef2:	b082      	sub	sp, #8
24009ef4:	af00      	add	r7, sp, #0
24009ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
24009ef8:	687b      	ldr	r3, [r7, #4]
24009efa:	2b00      	cmp	r3, #0
24009efc:	d101      	bne.n	24009f02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
24009efe:	2301      	movs	r3, #1
24009f00:	e021      	b.n	24009f46 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
24009f02:	687b      	ldr	r3, [r7, #4]
24009f04:	2224      	movs	r2, #36	; 0x24
24009f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
24009f0a:	687b      	ldr	r3, [r7, #4]
24009f0c:	681b      	ldr	r3, [r3, #0]
24009f0e:	681a      	ldr	r2, [r3, #0]
24009f10:	687b      	ldr	r3, [r7, #4]
24009f12:	681b      	ldr	r3, [r3, #0]
24009f14:	f022 0201 	bic.w	r2, r2, #1
24009f18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
24009f1a:	6878      	ldr	r0, [r7, #4]
24009f1c:	f000 f821 	bl	24009f62 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24009f20:	687b      	ldr	r3, [r7, #4]
24009f22:	2200      	movs	r2, #0
24009f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
24009f26:	687b      	ldr	r3, [r7, #4]
24009f28:	2200      	movs	r2, #0
24009f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24009f2e:	687b      	ldr	r3, [r7, #4]
24009f30:	2200      	movs	r2, #0
24009f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24009f34:	687b      	ldr	r3, [r7, #4]
24009f36:	2200      	movs	r2, #0
24009f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
24009f3c:	687b      	ldr	r3, [r7, #4]
24009f3e:	2200      	movs	r2, #0
24009f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
24009f44:	2300      	movs	r3, #0
}
24009f46:	4618      	mov	r0, r3
24009f48:	3708      	adds	r7, #8
24009f4a:	46bd      	mov	sp, r7
24009f4c:	bd80      	pop	{r7, pc}

24009f4e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
24009f4e:	b480      	push	{r7}
24009f50:	b083      	sub	sp, #12
24009f52:	af00      	add	r7, sp, #0
24009f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
24009f56:	bf00      	nop
24009f58:	370c      	adds	r7, #12
24009f5a:	46bd      	mov	sp, r7
24009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009f60:	4770      	bx	lr

24009f62 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
24009f62:	b480      	push	{r7}
24009f64:	b083      	sub	sp, #12
24009f66:	af00      	add	r7, sp, #0
24009f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
24009f6a:	bf00      	nop
24009f6c:	370c      	adds	r7, #12
24009f6e:	46bd      	mov	sp, r7
24009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
24009f74:	4770      	bx	lr
	...

24009f78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
24009f78:	b580      	push	{r7, lr}
24009f7a:	b088      	sub	sp, #32
24009f7c:	af02      	add	r7, sp, #8
24009f7e:	60f8      	str	r0, [r7, #12]
24009f80:	607a      	str	r2, [r7, #4]
24009f82:	461a      	mov	r2, r3
24009f84:	460b      	mov	r3, r1
24009f86:	817b      	strh	r3, [r7, #10]
24009f88:	4613      	mov	r3, r2
24009f8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
24009f8c:	68fb      	ldr	r3, [r7, #12]
24009f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24009f92:	b2db      	uxtb	r3, r3
24009f94:	2b20      	cmp	r3, #32
24009f96:	f040 80da 	bne.w	2400a14e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24009f9a:	68fb      	ldr	r3, [r7, #12]
24009f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24009fa0:	2b01      	cmp	r3, #1
24009fa2:	d101      	bne.n	24009fa8 <HAL_I2C_Master_Transmit+0x30>
24009fa4:	2302      	movs	r3, #2
24009fa6:	e0d3      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
24009fa8:	68fb      	ldr	r3, [r7, #12]
24009faa:	2201      	movs	r2, #1
24009fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
24009fb0:	f7f8 f8cc 	bl	2400214c <HAL_GetTick>
24009fb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
24009fb6:	697b      	ldr	r3, [r7, #20]
24009fb8:	9300      	str	r3, [sp, #0]
24009fba:	2319      	movs	r3, #25
24009fbc:	2201      	movs	r2, #1
24009fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24009fc2:	68f8      	ldr	r0, [r7, #12]
24009fc4:	f004 fd3c 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
24009fc8:	4603      	mov	r3, r0
24009fca:	2b00      	cmp	r3, #0
24009fcc:	d001      	beq.n	24009fd2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
24009fce:	2301      	movs	r3, #1
24009fd0:	e0be      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24009fd2:	68fb      	ldr	r3, [r7, #12]
24009fd4:	2221      	movs	r2, #33	; 0x21
24009fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24009fda:	68fb      	ldr	r3, [r7, #12]
24009fdc:	2210      	movs	r2, #16
24009fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24009fe2:	68fb      	ldr	r3, [r7, #12]
24009fe4:	2200      	movs	r2, #0
24009fe6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
24009fe8:	68fb      	ldr	r3, [r7, #12]
24009fea:	687a      	ldr	r2, [r7, #4]
24009fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
24009fee:	68fb      	ldr	r3, [r7, #12]
24009ff0:	893a      	ldrh	r2, [r7, #8]
24009ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
24009ff4:	68fb      	ldr	r3, [r7, #12]
24009ff6:	2200      	movs	r2, #0
24009ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24009ffa:	68fb      	ldr	r3, [r7, #12]
24009ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
24009ffe:	b29b      	uxth	r3, r3
2400a000:	2bff      	cmp	r3, #255	; 0xff
2400a002:	d90e      	bls.n	2400a022 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a004:	68fb      	ldr	r3, [r7, #12]
2400a006:	22ff      	movs	r2, #255	; 0xff
2400a008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a00a:	68fb      	ldr	r3, [r7, #12]
2400a00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a00e:	b2da      	uxtb	r2, r3
2400a010:	8979      	ldrh	r1, [r7, #10]
2400a012:	4b51      	ldr	r3, [pc, #324]	; (2400a158 <HAL_I2C_Master_Transmit+0x1e0>)
2400a014:	9300      	str	r3, [sp, #0]
2400a016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a01a:	68f8      	ldr	r0, [r7, #12]
2400a01c:	f004 ff32 	bl	2400ee84 <I2C_TransferConfig>
2400a020:	e06c      	b.n	2400a0fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a022:	68fb      	ldr	r3, [r7, #12]
2400a024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a026:	b29a      	uxth	r2, r3
2400a028:	68fb      	ldr	r3, [r7, #12]
2400a02a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a02c:	68fb      	ldr	r3, [r7, #12]
2400a02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a030:	b2da      	uxtb	r2, r3
2400a032:	8979      	ldrh	r1, [r7, #10]
2400a034:	4b48      	ldr	r3, [pc, #288]	; (2400a158 <HAL_I2C_Master_Transmit+0x1e0>)
2400a036:	9300      	str	r3, [sp, #0]
2400a038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a03c:	68f8      	ldr	r0, [r7, #12]
2400a03e:	f004 ff21 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2400a042:	e05b      	b.n	2400a0fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a044:	697a      	ldr	r2, [r7, #20]
2400a046:	6a39      	ldr	r1, [r7, #32]
2400a048:	68f8      	ldr	r0, [r7, #12]
2400a04a:	f004 fd39 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400a04e:	4603      	mov	r3, r0
2400a050:	2b00      	cmp	r3, #0
2400a052:	d001      	beq.n	2400a058 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
2400a054:	2301      	movs	r3, #1
2400a056:	e07b      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400a058:	68fb      	ldr	r3, [r7, #12]
2400a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a05c:	781a      	ldrb	r2, [r3, #0]
2400a05e:	68fb      	ldr	r3, [r7, #12]
2400a060:	681b      	ldr	r3, [r3, #0]
2400a062:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a064:	68fb      	ldr	r3, [r7, #12]
2400a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a068:	1c5a      	adds	r2, r3, #1
2400a06a:	68fb      	ldr	r3, [r7, #12]
2400a06c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a06e:	68fb      	ldr	r3, [r7, #12]
2400a070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a072:	b29b      	uxth	r3, r3
2400a074:	3b01      	subs	r3, #1
2400a076:	b29a      	uxth	r2, r3
2400a078:	68fb      	ldr	r3, [r7, #12]
2400a07a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400a07c:	68fb      	ldr	r3, [r7, #12]
2400a07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a080:	3b01      	subs	r3, #1
2400a082:	b29a      	uxth	r2, r3
2400a084:	68fb      	ldr	r3, [r7, #12]
2400a086:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400a088:	68fb      	ldr	r3, [r7, #12]
2400a08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a08c:	b29b      	uxth	r3, r3
2400a08e:	2b00      	cmp	r3, #0
2400a090:	d034      	beq.n	2400a0fc <HAL_I2C_Master_Transmit+0x184>
2400a092:	68fb      	ldr	r3, [r7, #12]
2400a094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a096:	2b00      	cmp	r3, #0
2400a098:	d130      	bne.n	2400a0fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400a09a:	697b      	ldr	r3, [r7, #20]
2400a09c:	9300      	str	r3, [sp, #0]
2400a09e:	6a3b      	ldr	r3, [r7, #32]
2400a0a0:	2200      	movs	r2, #0
2400a0a2:	2180      	movs	r1, #128	; 0x80
2400a0a4:	68f8      	ldr	r0, [r7, #12]
2400a0a6:	f004 fccb 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a0aa:	4603      	mov	r3, r0
2400a0ac:	2b00      	cmp	r3, #0
2400a0ae:	d001      	beq.n	2400a0b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
2400a0b0:	2301      	movs	r3, #1
2400a0b2:	e04d      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a0b4:	68fb      	ldr	r3, [r7, #12]
2400a0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a0b8:	b29b      	uxth	r3, r3
2400a0ba:	2bff      	cmp	r3, #255	; 0xff
2400a0bc:	d90e      	bls.n	2400a0dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400a0be:	68fb      	ldr	r3, [r7, #12]
2400a0c0:	22ff      	movs	r2, #255	; 0xff
2400a0c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a0c4:	68fb      	ldr	r3, [r7, #12]
2400a0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a0c8:	b2da      	uxtb	r2, r3
2400a0ca:	8979      	ldrh	r1, [r7, #10]
2400a0cc:	2300      	movs	r3, #0
2400a0ce:	9300      	str	r3, [sp, #0]
2400a0d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a0d4:	68f8      	ldr	r0, [r7, #12]
2400a0d6:	f004 fed5 	bl	2400ee84 <I2C_TransferConfig>
2400a0da:	e00f      	b.n	2400a0fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400a0dc:	68fb      	ldr	r3, [r7, #12]
2400a0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a0e0:	b29a      	uxth	r2, r3
2400a0e2:	68fb      	ldr	r3, [r7, #12]
2400a0e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a0e6:	68fb      	ldr	r3, [r7, #12]
2400a0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a0ea:	b2da      	uxtb	r2, r3
2400a0ec:	8979      	ldrh	r1, [r7, #10]
2400a0ee:	2300      	movs	r3, #0
2400a0f0:	9300      	str	r3, [sp, #0]
2400a0f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a0f6:	68f8      	ldr	r0, [r7, #12]
2400a0f8:	f004 fec4 	bl	2400ee84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400a0fc:	68fb      	ldr	r3, [r7, #12]
2400a0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a100:	b29b      	uxth	r3, r3
2400a102:	2b00      	cmp	r3, #0
2400a104:	d19e      	bne.n	2400a044 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a106:	697a      	ldr	r2, [r7, #20]
2400a108:	6a39      	ldr	r1, [r7, #32]
2400a10a:	68f8      	ldr	r0, [r7, #12]
2400a10c:	f004 fd18 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a110:	4603      	mov	r3, r0
2400a112:	2b00      	cmp	r3, #0
2400a114:	d001      	beq.n	2400a11a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
2400a116:	2301      	movs	r3, #1
2400a118:	e01a      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a11a:	68fb      	ldr	r3, [r7, #12]
2400a11c:	681b      	ldr	r3, [r3, #0]
2400a11e:	2220      	movs	r2, #32
2400a120:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400a122:	68fb      	ldr	r3, [r7, #12]
2400a124:	681b      	ldr	r3, [r3, #0]
2400a126:	6859      	ldr	r1, [r3, #4]
2400a128:	68fb      	ldr	r3, [r7, #12]
2400a12a:	681a      	ldr	r2, [r3, #0]
2400a12c:	4b0b      	ldr	r3, [pc, #44]	; (2400a15c <HAL_I2C_Master_Transmit+0x1e4>)
2400a12e:	400b      	ands	r3, r1
2400a130:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a132:	68fb      	ldr	r3, [r7, #12]
2400a134:	2220      	movs	r2, #32
2400a136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a13a:	68fb      	ldr	r3, [r7, #12]
2400a13c:	2200      	movs	r2, #0
2400a13e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a142:	68fb      	ldr	r3, [r7, #12]
2400a144:	2200      	movs	r2, #0
2400a146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a14a:	2300      	movs	r3, #0
2400a14c:	e000      	b.n	2400a150 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
2400a14e:	2302      	movs	r3, #2
  }
}
2400a150:	4618      	mov	r0, r3
2400a152:	3718      	adds	r7, #24
2400a154:	46bd      	mov	sp, r7
2400a156:	bd80      	pop	{r7, pc}
2400a158:	80002000 	.word	0x80002000
2400a15c:	fe00e800 	.word	0xfe00e800

2400a160 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2400a160:	b580      	push	{r7, lr}
2400a162:	b088      	sub	sp, #32
2400a164:	af02      	add	r7, sp, #8
2400a166:	60f8      	str	r0, [r7, #12]
2400a168:	607a      	str	r2, [r7, #4]
2400a16a:	461a      	mov	r2, r3
2400a16c:	460b      	mov	r3, r1
2400a16e:	817b      	strh	r3, [r7, #10]
2400a170:	4613      	mov	r3, r2
2400a172:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a174:	68fb      	ldr	r3, [r7, #12]
2400a176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a17a:	b2db      	uxtb	r3, r3
2400a17c:	2b20      	cmp	r3, #32
2400a17e:	f040 80db 	bne.w	2400a338 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a182:	68fb      	ldr	r3, [r7, #12]
2400a184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a188:	2b01      	cmp	r3, #1
2400a18a:	d101      	bne.n	2400a190 <HAL_I2C_Master_Receive+0x30>
2400a18c:	2302      	movs	r3, #2
2400a18e:	e0d4      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
2400a190:	68fb      	ldr	r3, [r7, #12]
2400a192:	2201      	movs	r2, #1
2400a194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a198:	f7f7 ffd8 	bl	2400214c <HAL_GetTick>
2400a19c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400a19e:	697b      	ldr	r3, [r7, #20]
2400a1a0:	9300      	str	r3, [sp, #0]
2400a1a2:	2319      	movs	r3, #25
2400a1a4:	2201      	movs	r2, #1
2400a1a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a1aa:	68f8      	ldr	r0, [r7, #12]
2400a1ac:	f004 fc48 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a1b0:	4603      	mov	r3, r0
2400a1b2:	2b00      	cmp	r3, #0
2400a1b4:	d001      	beq.n	2400a1ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2400a1b6:	2301      	movs	r3, #1
2400a1b8:	e0bf      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400a1ba:	68fb      	ldr	r3, [r7, #12]
2400a1bc:	2222      	movs	r2, #34	; 0x22
2400a1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400a1c2:	68fb      	ldr	r3, [r7, #12]
2400a1c4:	2210      	movs	r2, #16
2400a1c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a1ca:	68fb      	ldr	r3, [r7, #12]
2400a1cc:	2200      	movs	r2, #0
2400a1ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a1d0:	68fb      	ldr	r3, [r7, #12]
2400a1d2:	687a      	ldr	r2, [r7, #4]
2400a1d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a1d6:	68fb      	ldr	r3, [r7, #12]
2400a1d8:	893a      	ldrh	r2, [r7, #8]
2400a1da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a1dc:	68fb      	ldr	r3, [r7, #12]
2400a1de:	2200      	movs	r2, #0
2400a1e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a1e2:	68fb      	ldr	r3, [r7, #12]
2400a1e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a1e6:	b29b      	uxth	r3, r3
2400a1e8:	2bff      	cmp	r3, #255	; 0xff
2400a1ea:	d90e      	bls.n	2400a20a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a1ec:	68fb      	ldr	r3, [r7, #12]
2400a1ee:	22ff      	movs	r2, #255	; 0xff
2400a1f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a1f2:	68fb      	ldr	r3, [r7, #12]
2400a1f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a1f6:	b2da      	uxtb	r2, r3
2400a1f8:	8979      	ldrh	r1, [r7, #10]
2400a1fa:	4b52      	ldr	r3, [pc, #328]	; (2400a344 <HAL_I2C_Master_Receive+0x1e4>)
2400a1fc:	9300      	str	r3, [sp, #0]
2400a1fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a202:	68f8      	ldr	r0, [r7, #12]
2400a204:	f004 fe3e 	bl	2400ee84 <I2C_TransferConfig>
2400a208:	e06d      	b.n	2400a2e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a20a:	68fb      	ldr	r3, [r7, #12]
2400a20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a20e:	b29a      	uxth	r2, r3
2400a210:	68fb      	ldr	r3, [r7, #12]
2400a212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a214:	68fb      	ldr	r3, [r7, #12]
2400a216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a218:	b2da      	uxtb	r2, r3
2400a21a:	8979      	ldrh	r1, [r7, #10]
2400a21c:	4b49      	ldr	r3, [pc, #292]	; (2400a344 <HAL_I2C_Master_Receive+0x1e4>)
2400a21e:	9300      	str	r3, [sp, #0]
2400a220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a224:	68f8      	ldr	r0, [r7, #12]
2400a226:	f004 fe2d 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2400a22a:	e05c      	b.n	2400a2e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a22c:	697a      	ldr	r2, [r7, #20]
2400a22e:	6a39      	ldr	r1, [r7, #32]
2400a230:	68f8      	ldr	r0, [r7, #12]
2400a232:	f004 fcc1 	bl	2400ebb8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400a236:	4603      	mov	r3, r0
2400a238:	2b00      	cmp	r3, #0
2400a23a:	d001      	beq.n	2400a240 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2400a23c:	2301      	movs	r3, #1
2400a23e:	e07c      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a240:	68fb      	ldr	r3, [r7, #12]
2400a242:	681b      	ldr	r3, [r3, #0]
2400a244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a246:	68fb      	ldr	r3, [r7, #12]
2400a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a24a:	b2d2      	uxtb	r2, r2
2400a24c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a24e:	68fb      	ldr	r3, [r7, #12]
2400a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a252:	1c5a      	adds	r2, r3, #1
2400a254:	68fb      	ldr	r3, [r7, #12]
2400a256:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400a258:	68fb      	ldr	r3, [r7, #12]
2400a25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a25c:	3b01      	subs	r3, #1
2400a25e:	b29a      	uxth	r2, r3
2400a260:	68fb      	ldr	r3, [r7, #12]
2400a262:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400a264:	68fb      	ldr	r3, [r7, #12]
2400a266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a268:	b29b      	uxth	r3, r3
2400a26a:	3b01      	subs	r3, #1
2400a26c:	b29a      	uxth	r2, r3
2400a26e:	68fb      	ldr	r3, [r7, #12]
2400a270:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400a272:	68fb      	ldr	r3, [r7, #12]
2400a274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a276:	b29b      	uxth	r3, r3
2400a278:	2b00      	cmp	r3, #0
2400a27a:	d034      	beq.n	2400a2e6 <HAL_I2C_Master_Receive+0x186>
2400a27c:	68fb      	ldr	r3, [r7, #12]
2400a27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a280:	2b00      	cmp	r3, #0
2400a282:	d130      	bne.n	2400a2e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400a284:	697b      	ldr	r3, [r7, #20]
2400a286:	9300      	str	r3, [sp, #0]
2400a288:	6a3b      	ldr	r3, [r7, #32]
2400a28a:	2200      	movs	r2, #0
2400a28c:	2180      	movs	r1, #128	; 0x80
2400a28e:	68f8      	ldr	r0, [r7, #12]
2400a290:	f004 fbd6 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a294:	4603      	mov	r3, r0
2400a296:	2b00      	cmp	r3, #0
2400a298:	d001      	beq.n	2400a29e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2400a29a:	2301      	movs	r3, #1
2400a29c:	e04d      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a29e:	68fb      	ldr	r3, [r7, #12]
2400a2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a2a2:	b29b      	uxth	r3, r3
2400a2a4:	2bff      	cmp	r3, #255	; 0xff
2400a2a6:	d90e      	bls.n	2400a2c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400a2a8:	68fb      	ldr	r3, [r7, #12]
2400a2aa:	22ff      	movs	r2, #255	; 0xff
2400a2ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a2ae:	68fb      	ldr	r3, [r7, #12]
2400a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a2b2:	b2da      	uxtb	r2, r3
2400a2b4:	8979      	ldrh	r1, [r7, #10]
2400a2b6:	2300      	movs	r3, #0
2400a2b8:	9300      	str	r3, [sp, #0]
2400a2ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a2be:	68f8      	ldr	r0, [r7, #12]
2400a2c0:	f004 fde0 	bl	2400ee84 <I2C_TransferConfig>
2400a2c4:	e00f      	b.n	2400a2e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400a2c6:	68fb      	ldr	r3, [r7, #12]
2400a2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a2ca:	b29a      	uxth	r2, r3
2400a2cc:	68fb      	ldr	r3, [r7, #12]
2400a2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a2d0:	68fb      	ldr	r3, [r7, #12]
2400a2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a2d4:	b2da      	uxtb	r2, r3
2400a2d6:	8979      	ldrh	r1, [r7, #10]
2400a2d8:	2300      	movs	r3, #0
2400a2da:	9300      	str	r3, [sp, #0]
2400a2dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a2e0:	68f8      	ldr	r0, [r7, #12]
2400a2e2:	f004 fdcf 	bl	2400ee84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400a2e6:	68fb      	ldr	r3, [r7, #12]
2400a2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a2ea:	b29b      	uxth	r3, r3
2400a2ec:	2b00      	cmp	r3, #0
2400a2ee:	d19d      	bne.n	2400a22c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a2f0:	697a      	ldr	r2, [r7, #20]
2400a2f2:	6a39      	ldr	r1, [r7, #32]
2400a2f4:	68f8      	ldr	r0, [r7, #12]
2400a2f6:	f004 fc23 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a2fa:	4603      	mov	r3, r0
2400a2fc:	2b00      	cmp	r3, #0
2400a2fe:	d001      	beq.n	2400a304 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2400a300:	2301      	movs	r3, #1
2400a302:	e01a      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a304:	68fb      	ldr	r3, [r7, #12]
2400a306:	681b      	ldr	r3, [r3, #0]
2400a308:	2220      	movs	r2, #32
2400a30a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400a30c:	68fb      	ldr	r3, [r7, #12]
2400a30e:	681b      	ldr	r3, [r3, #0]
2400a310:	6859      	ldr	r1, [r3, #4]
2400a312:	68fb      	ldr	r3, [r7, #12]
2400a314:	681a      	ldr	r2, [r3, #0]
2400a316:	4b0c      	ldr	r3, [pc, #48]	; (2400a348 <HAL_I2C_Master_Receive+0x1e8>)
2400a318:	400b      	ands	r3, r1
2400a31a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a31c:	68fb      	ldr	r3, [r7, #12]
2400a31e:	2220      	movs	r2, #32
2400a320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a324:	68fb      	ldr	r3, [r7, #12]
2400a326:	2200      	movs	r2, #0
2400a328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a32c:	68fb      	ldr	r3, [r7, #12]
2400a32e:	2200      	movs	r2, #0
2400a330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a334:	2300      	movs	r3, #0
2400a336:	e000      	b.n	2400a33a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2400a338:	2302      	movs	r3, #2
  }
}
2400a33a:	4618      	mov	r0, r3
2400a33c:	3718      	adds	r7, #24
2400a33e:	46bd      	mov	sp, r7
2400a340:	bd80      	pop	{r7, pc}
2400a342:	bf00      	nop
2400a344:	80002400 	.word	0x80002400
2400a348:	fe00e800 	.word	0xfe00e800

2400a34c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2400a34c:	b580      	push	{r7, lr}
2400a34e:	b088      	sub	sp, #32
2400a350:	af02      	add	r7, sp, #8
2400a352:	60f8      	str	r0, [r7, #12]
2400a354:	60b9      	str	r1, [r7, #8]
2400a356:	603b      	str	r3, [r7, #0]
2400a358:	4613      	mov	r3, r2
2400a35a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a35c:	68fb      	ldr	r3, [r7, #12]
2400a35e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a362:	b2db      	uxtb	r3, r3
2400a364:	2b20      	cmp	r3, #32
2400a366:	f040 8109 	bne.w	2400a57c <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
2400a36a:	68bb      	ldr	r3, [r7, #8]
2400a36c:	2b00      	cmp	r3, #0
2400a36e:	d002      	beq.n	2400a376 <HAL_I2C_Slave_Transmit+0x2a>
2400a370:	88fb      	ldrh	r3, [r7, #6]
2400a372:	2b00      	cmp	r3, #0
2400a374:	d105      	bne.n	2400a382 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400a376:	68fb      	ldr	r3, [r7, #12]
2400a378:	f44f 7200 	mov.w	r2, #512	; 0x200
2400a37c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400a37e:	2301      	movs	r3, #1
2400a380:	e0fd      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a382:	68fb      	ldr	r3, [r7, #12]
2400a384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a388:	2b01      	cmp	r3, #1
2400a38a:	d101      	bne.n	2400a390 <HAL_I2C_Slave_Transmit+0x44>
2400a38c:	2302      	movs	r3, #2
2400a38e:	e0f6      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
2400a390:	68fb      	ldr	r3, [r7, #12]
2400a392:	2201      	movs	r2, #1
2400a394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a398:	f7f7 fed8 	bl	2400214c <HAL_GetTick>
2400a39c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400a39e:	68fb      	ldr	r3, [r7, #12]
2400a3a0:	2221      	movs	r2, #33	; 0x21
2400a3a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400a3a6:	68fb      	ldr	r3, [r7, #12]
2400a3a8:	2220      	movs	r2, #32
2400a3aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a3ae:	68fb      	ldr	r3, [r7, #12]
2400a3b0:	2200      	movs	r2, #0
2400a3b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a3b4:	68fb      	ldr	r3, [r7, #12]
2400a3b6:	68ba      	ldr	r2, [r7, #8]
2400a3b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a3ba:	68fb      	ldr	r3, [r7, #12]
2400a3bc:	88fa      	ldrh	r2, [r7, #6]
2400a3be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a3c0:	68fb      	ldr	r3, [r7, #12]
2400a3c2:	2200      	movs	r2, #0
2400a3c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400a3c6:	68fb      	ldr	r3, [r7, #12]
2400a3c8:	681b      	ldr	r3, [r3, #0]
2400a3ca:	685a      	ldr	r2, [r3, #4]
2400a3cc:	68fb      	ldr	r3, [r7, #12]
2400a3ce:	681b      	ldr	r3, [r3, #0]
2400a3d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a3d4:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a3d6:	697b      	ldr	r3, [r7, #20]
2400a3d8:	9300      	str	r3, [sp, #0]
2400a3da:	683b      	ldr	r3, [r7, #0]
2400a3dc:	2200      	movs	r2, #0
2400a3de:	2108      	movs	r1, #8
2400a3e0:	68f8      	ldr	r0, [r7, #12]
2400a3e2:	f004 fb2d 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a3e6:	4603      	mov	r3, r0
2400a3e8:	2b00      	cmp	r3, #0
2400a3ea:	d009      	beq.n	2400a400 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a3ec:	68fb      	ldr	r3, [r7, #12]
2400a3ee:	681b      	ldr	r3, [r3, #0]
2400a3f0:	685a      	ldr	r2, [r3, #4]
2400a3f2:	68fb      	ldr	r3, [r7, #12]
2400a3f4:	681b      	ldr	r3, [r3, #0]
2400a3f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a3fa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a3fc:	2301      	movs	r3, #1
2400a3fe:	e0be      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a400:	68fb      	ldr	r3, [r7, #12]
2400a402:	681b      	ldr	r3, [r3, #0]
2400a404:	2208      	movs	r2, #8
2400a406:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400a408:	68fb      	ldr	r3, [r7, #12]
2400a40a:	68db      	ldr	r3, [r3, #12]
2400a40c:	2b02      	cmp	r3, #2
2400a40e:	d118      	bne.n	2400a442 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a410:	697b      	ldr	r3, [r7, #20]
2400a412:	9300      	str	r3, [sp, #0]
2400a414:	683b      	ldr	r3, [r7, #0]
2400a416:	2200      	movs	r2, #0
2400a418:	2108      	movs	r1, #8
2400a41a:	68f8      	ldr	r0, [r7, #12]
2400a41c:	f004 fb10 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a420:	4603      	mov	r3, r0
2400a422:	2b00      	cmp	r3, #0
2400a424:	d009      	beq.n	2400a43a <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a426:	68fb      	ldr	r3, [r7, #12]
2400a428:	681b      	ldr	r3, [r3, #0]
2400a42a:	685a      	ldr	r2, [r3, #4]
2400a42c:	68fb      	ldr	r3, [r7, #12]
2400a42e:	681b      	ldr	r3, [r3, #0]
2400a430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a434:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400a436:	2301      	movs	r3, #1
2400a438:	e0a1      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a43a:	68fb      	ldr	r3, [r7, #12]
2400a43c:	681b      	ldr	r3, [r3, #0]
2400a43e:	2208      	movs	r2, #8
2400a440:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2400a442:	697b      	ldr	r3, [r7, #20]
2400a444:	9300      	str	r3, [sp, #0]
2400a446:	683b      	ldr	r3, [r7, #0]
2400a448:	2200      	movs	r2, #0
2400a44a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400a44e:	68f8      	ldr	r0, [r7, #12]
2400a450:	f004 faf6 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a454:	4603      	mov	r3, r0
2400a456:	2b00      	cmp	r3, #0
2400a458:	d02d      	beq.n	2400a4b6 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a45a:	68fb      	ldr	r3, [r7, #12]
2400a45c:	681b      	ldr	r3, [r3, #0]
2400a45e:	685a      	ldr	r2, [r3, #4]
2400a460:	68fb      	ldr	r3, [r7, #12]
2400a462:	681b      	ldr	r3, [r3, #0]
2400a464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a468:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a46a:	2301      	movs	r3, #1
2400a46c:	e087      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a46e:	697a      	ldr	r2, [r7, #20]
2400a470:	6839      	ldr	r1, [r7, #0]
2400a472:	68f8      	ldr	r0, [r7, #12]
2400a474:	f004 fb24 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400a478:	4603      	mov	r3, r0
2400a47a:	2b00      	cmp	r3, #0
2400a47c:	d009      	beq.n	2400a492 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a47e:	68fb      	ldr	r3, [r7, #12]
2400a480:	681b      	ldr	r3, [r3, #0]
2400a482:	685a      	ldr	r2, [r3, #4]
2400a484:	68fb      	ldr	r3, [r7, #12]
2400a486:	681b      	ldr	r3, [r3, #0]
2400a488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a48c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400a48e:	2301      	movs	r3, #1
2400a490:	e075      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400a492:	68fb      	ldr	r3, [r7, #12]
2400a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a496:	781a      	ldrb	r2, [r3, #0]
2400a498:	68fb      	ldr	r3, [r7, #12]
2400a49a:	681b      	ldr	r3, [r3, #0]
2400a49c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a49e:	68fb      	ldr	r3, [r7, #12]
2400a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a4a2:	1c5a      	adds	r2, r3, #1
2400a4a4:	68fb      	ldr	r3, [r7, #12]
2400a4a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a4a8:	68fb      	ldr	r3, [r7, #12]
2400a4aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a4ac:	b29b      	uxth	r3, r3
2400a4ae:	3b01      	subs	r3, #1
2400a4b0:	b29a      	uxth	r2, r3
2400a4b2:	68fb      	ldr	r3, [r7, #12]
2400a4b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
2400a4b6:	68fb      	ldr	r3, [r7, #12]
2400a4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a4ba:	b29b      	uxth	r3, r3
2400a4bc:	2b00      	cmp	r3, #0
2400a4be:	d1d6      	bne.n	2400a46e <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
2400a4c0:	697b      	ldr	r3, [r7, #20]
2400a4c2:	9300      	str	r3, [sp, #0]
2400a4c4:	683b      	ldr	r3, [r7, #0]
2400a4c6:	2200      	movs	r2, #0
2400a4c8:	2110      	movs	r1, #16
2400a4ca:	68f8      	ldr	r0, [r7, #12]
2400a4cc:	f004 fab8 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a4d0:	4603      	mov	r3, r0
2400a4d2:	2b00      	cmp	r3, #0
2400a4d4:	d009      	beq.n	2400a4ea <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a4d6:	68fb      	ldr	r3, [r7, #12]
2400a4d8:	681b      	ldr	r3, [r3, #0]
2400a4da:	685a      	ldr	r2, [r3, #4]
2400a4dc:	68fb      	ldr	r3, [r7, #12]
2400a4de:	681b      	ldr	r3, [r3, #0]
2400a4e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a4e4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a4e6:	2301      	movs	r3, #1
2400a4e8:	e049      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400a4ea:	68f8      	ldr	r0, [r7, #12]
2400a4ec:	f003 ffc3 	bl	2400e476 <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400a4f0:	68fb      	ldr	r3, [r7, #12]
2400a4f2:	681b      	ldr	r3, [r3, #0]
2400a4f4:	2210      	movs	r2, #16
2400a4f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a4f8:	697a      	ldr	r2, [r7, #20]
2400a4fa:	6839      	ldr	r1, [r7, #0]
2400a4fc:	68f8      	ldr	r0, [r7, #12]
2400a4fe:	f004 fb1f 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a502:	4603      	mov	r3, r0
2400a504:	2b00      	cmp	r3, #0
2400a506:	d009      	beq.n	2400a51c <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a508:	68fb      	ldr	r3, [r7, #12]
2400a50a:	681b      	ldr	r3, [r3, #0]
2400a50c:	685a      	ldr	r2, [r3, #4]
2400a50e:	68fb      	ldr	r3, [r7, #12]
2400a510:	681b      	ldr	r3, [r3, #0]
2400a512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a516:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
2400a518:	2301      	movs	r3, #1
2400a51a:	e030      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a51c:	68fb      	ldr	r3, [r7, #12]
2400a51e:	681b      	ldr	r3, [r3, #0]
2400a520:	2220      	movs	r2, #32
2400a522:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400a524:	697b      	ldr	r3, [r7, #20]
2400a526:	9300      	str	r3, [sp, #0]
2400a528:	683b      	ldr	r3, [r7, #0]
2400a52a:	2201      	movs	r2, #1
2400a52c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a530:	68f8      	ldr	r0, [r7, #12]
2400a532:	f004 fa85 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a536:	4603      	mov	r3, r0
2400a538:	2b00      	cmp	r3, #0
2400a53a:	d009      	beq.n	2400a550 <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a53c:	68fb      	ldr	r3, [r7, #12]
2400a53e:	681b      	ldr	r3, [r3, #0]
2400a540:	685a      	ldr	r2, [r3, #4]
2400a542:	68fb      	ldr	r3, [r7, #12]
2400a544:	681b      	ldr	r3, [r3, #0]
2400a546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a54a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a54c:	2301      	movs	r3, #1
2400a54e:	e016      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a550:	68fb      	ldr	r3, [r7, #12]
2400a552:	681b      	ldr	r3, [r3, #0]
2400a554:	685a      	ldr	r2, [r3, #4]
2400a556:	68fb      	ldr	r3, [r7, #12]
2400a558:	681b      	ldr	r3, [r3, #0]
2400a55a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a55e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a560:	68fb      	ldr	r3, [r7, #12]
2400a562:	2220      	movs	r2, #32
2400a564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a568:	68fb      	ldr	r3, [r7, #12]
2400a56a:	2200      	movs	r2, #0
2400a56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a570:	68fb      	ldr	r3, [r7, #12]
2400a572:	2200      	movs	r2, #0
2400a574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a578:	2300      	movs	r3, #0
2400a57a:	e000      	b.n	2400a57e <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
2400a57c:	2302      	movs	r3, #2
  }
}
2400a57e:	4618      	mov	r0, r3
2400a580:	3718      	adds	r7, #24
2400a582:	46bd      	mov	sp, r7
2400a584:	bd80      	pop	{r7, pc}

2400a586 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2400a586:	b580      	push	{r7, lr}
2400a588:	b088      	sub	sp, #32
2400a58a:	af02      	add	r7, sp, #8
2400a58c:	60f8      	str	r0, [r7, #12]
2400a58e:	60b9      	str	r1, [r7, #8]
2400a590:	603b      	str	r3, [r7, #0]
2400a592:	4613      	mov	r3, r2
2400a594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a596:	68fb      	ldr	r3, [r7, #12]
2400a598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a59c:	b2db      	uxtb	r3, r3
2400a59e:	2b20      	cmp	r3, #32
2400a5a0:	f040 80fc 	bne.w	2400a79c <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2400a5a4:	68bb      	ldr	r3, [r7, #8]
2400a5a6:	2b00      	cmp	r3, #0
2400a5a8:	d002      	beq.n	2400a5b0 <HAL_I2C_Slave_Receive+0x2a>
2400a5aa:	88fb      	ldrh	r3, [r7, #6]
2400a5ac:	2b00      	cmp	r3, #0
2400a5ae:	d105      	bne.n	2400a5bc <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400a5b0:	68fb      	ldr	r3, [r7, #12]
2400a5b2:	f44f 7200 	mov.w	r2, #512	; 0x200
2400a5b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400a5b8:	2301      	movs	r3, #1
2400a5ba:	e0f0      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a5bc:	68fb      	ldr	r3, [r7, #12]
2400a5be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a5c2:	2b01      	cmp	r3, #1
2400a5c4:	d101      	bne.n	2400a5ca <HAL_I2C_Slave_Receive+0x44>
2400a5c6:	2302      	movs	r3, #2
2400a5c8:	e0e9      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
2400a5ca:	68fb      	ldr	r3, [r7, #12]
2400a5cc:	2201      	movs	r2, #1
2400a5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a5d2:	f7f7 fdbb 	bl	2400214c <HAL_GetTick>
2400a5d6:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400a5d8:	68fb      	ldr	r3, [r7, #12]
2400a5da:	2222      	movs	r2, #34	; 0x22
2400a5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400a5e0:	68fb      	ldr	r3, [r7, #12]
2400a5e2:	2220      	movs	r2, #32
2400a5e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a5e8:	68fb      	ldr	r3, [r7, #12]
2400a5ea:	2200      	movs	r2, #0
2400a5ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a5ee:	68fb      	ldr	r3, [r7, #12]
2400a5f0:	68ba      	ldr	r2, [r7, #8]
2400a5f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a5f4:	68fb      	ldr	r3, [r7, #12]
2400a5f6:	88fa      	ldrh	r2, [r7, #6]
2400a5f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
2400a5fa:	68fb      	ldr	r3, [r7, #12]
2400a5fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a5fe:	b29a      	uxth	r2, r3
2400a600:	68fb      	ldr	r3, [r7, #12]
2400a602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
2400a604:	68fb      	ldr	r3, [r7, #12]
2400a606:	2200      	movs	r2, #0
2400a608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400a60a:	68fb      	ldr	r3, [r7, #12]
2400a60c:	681b      	ldr	r3, [r3, #0]
2400a60e:	685a      	ldr	r2, [r3, #4]
2400a610:	68fb      	ldr	r3, [r7, #12]
2400a612:	681b      	ldr	r3, [r3, #0]
2400a614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a618:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a61a:	697b      	ldr	r3, [r7, #20]
2400a61c:	9300      	str	r3, [sp, #0]
2400a61e:	683b      	ldr	r3, [r7, #0]
2400a620:	2200      	movs	r2, #0
2400a622:	2108      	movs	r1, #8
2400a624:	68f8      	ldr	r0, [r7, #12]
2400a626:	f004 fa0b 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a62a:	4603      	mov	r3, r0
2400a62c:	2b00      	cmp	r3, #0
2400a62e:	d009      	beq.n	2400a644 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a630:	68fb      	ldr	r3, [r7, #12]
2400a632:	681b      	ldr	r3, [r3, #0]
2400a634:	685a      	ldr	r2, [r3, #4]
2400a636:	68fb      	ldr	r3, [r7, #12]
2400a638:	681b      	ldr	r3, [r3, #0]
2400a63a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a63e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a640:	2301      	movs	r3, #1
2400a642:	e0ac      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a644:	68fb      	ldr	r3, [r7, #12]
2400a646:	681b      	ldr	r3, [r3, #0]
2400a648:	2208      	movs	r2, #8
2400a64a:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2400a64c:	697b      	ldr	r3, [r7, #20]
2400a64e:	9300      	str	r3, [sp, #0]
2400a650:	683b      	ldr	r3, [r7, #0]
2400a652:	2201      	movs	r2, #1
2400a654:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400a658:	68f8      	ldr	r0, [r7, #12]
2400a65a:	f004 f9f1 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a65e:	4603      	mov	r3, r0
2400a660:	2b00      	cmp	r3, #0
2400a662:	d054      	beq.n	2400a70e <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a664:	68fb      	ldr	r3, [r7, #12]
2400a666:	681b      	ldr	r3, [r3, #0]
2400a668:	685a      	ldr	r2, [r3, #4]
2400a66a:	68fb      	ldr	r3, [r7, #12]
2400a66c:	681b      	ldr	r3, [r3, #0]
2400a66e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a672:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a674:	2301      	movs	r3, #1
2400a676:	e092      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a678:	697a      	ldr	r2, [r7, #20]
2400a67a:	6839      	ldr	r1, [r7, #0]
2400a67c:	68f8      	ldr	r0, [r7, #12]
2400a67e:	f004 fa9b 	bl	2400ebb8 <I2C_WaitOnRXNEFlagUntilTimeout>
2400a682:	4603      	mov	r3, r0
2400a684:	2b00      	cmp	r3, #0
2400a686:	d029      	beq.n	2400a6dc <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a688:	68fb      	ldr	r3, [r7, #12]
2400a68a:	681b      	ldr	r3, [r3, #0]
2400a68c:	685a      	ldr	r2, [r3, #4]
2400a68e:	68fb      	ldr	r3, [r7, #12]
2400a690:	681b      	ldr	r3, [r3, #0]
2400a692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a696:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2400a698:	68fb      	ldr	r3, [r7, #12]
2400a69a:	681b      	ldr	r3, [r3, #0]
2400a69c:	699b      	ldr	r3, [r3, #24]
2400a69e:	f003 0304 	and.w	r3, r3, #4
2400a6a2:	2b04      	cmp	r3, #4
2400a6a4:	d118      	bne.n	2400a6d8 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a6a6:	68fb      	ldr	r3, [r7, #12]
2400a6a8:	681b      	ldr	r3, [r3, #0]
2400a6aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a6ac:	68fb      	ldr	r3, [r7, #12]
2400a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a6b0:	b2d2      	uxtb	r2, r2
2400a6b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2400a6b4:	68fb      	ldr	r3, [r7, #12]
2400a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a6b8:	1c5a      	adds	r2, r3, #1
2400a6ba:	68fb      	ldr	r3, [r7, #12]
2400a6bc:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
2400a6be:	68fb      	ldr	r3, [r7, #12]
2400a6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a6c2:	b29b      	uxth	r3, r3
2400a6c4:	3b01      	subs	r3, #1
2400a6c6:	b29a      	uxth	r2, r3
2400a6c8:	68fb      	ldr	r3, [r7, #12]
2400a6ca:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
2400a6cc:	68fb      	ldr	r3, [r7, #12]
2400a6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a6d0:	3b01      	subs	r3, #1
2400a6d2:	b29a      	uxth	r2, r3
2400a6d4:	68fb      	ldr	r3, [r7, #12]
2400a6d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
2400a6d8:	2301      	movs	r3, #1
2400a6da:	e060      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a6dc:	68fb      	ldr	r3, [r7, #12]
2400a6de:	681b      	ldr	r3, [r3, #0]
2400a6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a6e2:	68fb      	ldr	r3, [r7, #12]
2400a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a6e6:	b2d2      	uxtb	r2, r2
2400a6e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a6ea:	68fb      	ldr	r3, [r7, #12]
2400a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a6ee:	1c5a      	adds	r2, r3, #1
2400a6f0:	68fb      	ldr	r3, [r7, #12]
2400a6f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a6f4:	68fb      	ldr	r3, [r7, #12]
2400a6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a6f8:	b29b      	uxth	r3, r3
2400a6fa:	3b01      	subs	r3, #1
2400a6fc:	b29a      	uxth	r2, r3
2400a6fe:	68fb      	ldr	r3, [r7, #12]
2400a700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400a702:	68fb      	ldr	r3, [r7, #12]
2400a704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a706:	3b01      	subs	r3, #1
2400a708:	b29a      	uxth	r2, r3
2400a70a:	68fb      	ldr	r3, [r7, #12]
2400a70c:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
2400a70e:	68fb      	ldr	r3, [r7, #12]
2400a710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a712:	b29b      	uxth	r3, r3
2400a714:	2b00      	cmp	r3, #0
2400a716:	d1af      	bne.n	2400a678 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a718:	697a      	ldr	r2, [r7, #20]
2400a71a:	6839      	ldr	r1, [r7, #0]
2400a71c:	68f8      	ldr	r0, [r7, #12]
2400a71e:	f004 fa0f 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a722:	4603      	mov	r3, r0
2400a724:	2b00      	cmp	r3, #0
2400a726:	d009      	beq.n	2400a73c <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a728:	68fb      	ldr	r3, [r7, #12]
2400a72a:	681b      	ldr	r3, [r3, #0]
2400a72c:	685a      	ldr	r2, [r3, #4]
2400a72e:	68fb      	ldr	r3, [r7, #12]
2400a730:	681b      	ldr	r3, [r3, #0]
2400a732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a736:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a738:	2301      	movs	r3, #1
2400a73a:	e030      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a73c:	68fb      	ldr	r3, [r7, #12]
2400a73e:	681b      	ldr	r3, [r3, #0]
2400a740:	2220      	movs	r2, #32
2400a742:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400a744:	697b      	ldr	r3, [r7, #20]
2400a746:	9300      	str	r3, [sp, #0]
2400a748:	683b      	ldr	r3, [r7, #0]
2400a74a:	2201      	movs	r2, #1
2400a74c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a750:	68f8      	ldr	r0, [r7, #12]
2400a752:	f004 f975 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400a756:	4603      	mov	r3, r0
2400a758:	2b00      	cmp	r3, #0
2400a75a:	d009      	beq.n	2400a770 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a75c:	68fb      	ldr	r3, [r7, #12]
2400a75e:	681b      	ldr	r3, [r3, #0]
2400a760:	685a      	ldr	r2, [r3, #4]
2400a762:	68fb      	ldr	r3, [r7, #12]
2400a764:	681b      	ldr	r3, [r3, #0]
2400a766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a76a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a76c:	2301      	movs	r3, #1
2400a76e:	e016      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a770:	68fb      	ldr	r3, [r7, #12]
2400a772:	681b      	ldr	r3, [r3, #0]
2400a774:	685a      	ldr	r2, [r3, #4]
2400a776:	68fb      	ldr	r3, [r7, #12]
2400a778:	681b      	ldr	r3, [r3, #0]
2400a77a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a77e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a780:	68fb      	ldr	r3, [r7, #12]
2400a782:	2220      	movs	r2, #32
2400a784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a788:	68fb      	ldr	r3, [r7, #12]
2400a78a:	2200      	movs	r2, #0
2400a78c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a790:	68fb      	ldr	r3, [r7, #12]
2400a792:	2200      	movs	r2, #0
2400a794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a798:	2300      	movs	r3, #0
2400a79a:	e000      	b.n	2400a79e <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2400a79c:	2302      	movs	r3, #2
  }
}
2400a79e:	4618      	mov	r0, r3
2400a7a0:	3718      	adds	r7, #24
2400a7a2:	46bd      	mov	sp, r7
2400a7a4:	bd80      	pop	{r7, pc}
	...

2400a7a8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400a7a8:	b580      	push	{r7, lr}
2400a7aa:	b088      	sub	sp, #32
2400a7ac:	af02      	add	r7, sp, #8
2400a7ae:	60f8      	str	r0, [r7, #12]
2400a7b0:	607a      	str	r2, [r7, #4]
2400a7b2:	461a      	mov	r2, r3
2400a7b4:	460b      	mov	r3, r1
2400a7b6:	817b      	strh	r3, [r7, #10]
2400a7b8:	4613      	mov	r3, r2
2400a7ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a7bc:	68fb      	ldr	r3, [r7, #12]
2400a7be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a7c2:	b2db      	uxtb	r3, r3
2400a7c4:	2b20      	cmp	r3, #32
2400a7c6:	d153      	bne.n	2400a870 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400a7c8:	68fb      	ldr	r3, [r7, #12]
2400a7ca:	681b      	ldr	r3, [r3, #0]
2400a7cc:	699b      	ldr	r3, [r3, #24]
2400a7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400a7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400a7d6:	d101      	bne.n	2400a7dc <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2400a7d8:	2302      	movs	r3, #2
2400a7da:	e04a      	b.n	2400a872 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a7dc:	68fb      	ldr	r3, [r7, #12]
2400a7de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a7e2:	2b01      	cmp	r3, #1
2400a7e4:	d101      	bne.n	2400a7ea <HAL_I2C_Master_Transmit_IT+0x42>
2400a7e6:	2302      	movs	r3, #2
2400a7e8:	e043      	b.n	2400a872 <HAL_I2C_Master_Transmit_IT+0xca>
2400a7ea:	68fb      	ldr	r3, [r7, #12]
2400a7ec:	2201      	movs	r2, #1
2400a7ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400a7f2:	68fb      	ldr	r3, [r7, #12]
2400a7f4:	2221      	movs	r2, #33	; 0x21
2400a7f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400a7fa:	68fb      	ldr	r3, [r7, #12]
2400a7fc:	2210      	movs	r2, #16
2400a7fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400a802:	68fb      	ldr	r3, [r7, #12]
2400a804:	2200      	movs	r2, #0
2400a806:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400a808:	68fb      	ldr	r3, [r7, #12]
2400a80a:	687a      	ldr	r2, [r7, #4]
2400a80c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400a80e:	68fb      	ldr	r3, [r7, #12]
2400a810:	893a      	ldrh	r2, [r7, #8]
2400a812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400a814:	68fb      	ldr	r3, [r7, #12]
2400a816:	4a19      	ldr	r2, [pc, #100]	; (2400a87c <HAL_I2C_Master_Transmit_IT+0xd4>)
2400a818:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400a81a:	68fb      	ldr	r3, [r7, #12]
2400a81c:	4a18      	ldr	r2, [pc, #96]	; (2400a880 <HAL_I2C_Master_Transmit_IT+0xd8>)
2400a81e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a820:	68fb      	ldr	r3, [r7, #12]
2400a822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a824:	b29b      	uxth	r3, r3
2400a826:	2bff      	cmp	r3, #255	; 0xff
2400a828:	d906      	bls.n	2400a838 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a82a:	68fb      	ldr	r3, [r7, #12]
2400a82c:	22ff      	movs	r2, #255	; 0xff
2400a82e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400a830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a834:	617b      	str	r3, [r7, #20]
2400a836:	e007      	b.n	2400a848 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a838:	68fb      	ldr	r3, [r7, #12]
2400a83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a83c:	b29a      	uxth	r2, r3
2400a83e:	68fb      	ldr	r3, [r7, #12]
2400a840:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400a842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a846:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400a848:	68fb      	ldr	r3, [r7, #12]
2400a84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a84c:	b2da      	uxtb	r2, r3
2400a84e:	8979      	ldrh	r1, [r7, #10]
2400a850:	4b0c      	ldr	r3, [pc, #48]	; (2400a884 <HAL_I2C_Master_Transmit_IT+0xdc>)
2400a852:	9300      	str	r3, [sp, #0]
2400a854:	697b      	ldr	r3, [r7, #20]
2400a856:	68f8      	ldr	r0, [r7, #12]
2400a858:	f004 fb14 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a85c:	68fb      	ldr	r3, [r7, #12]
2400a85e:	2200      	movs	r2, #0
2400a860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400a864:	2101      	movs	r1, #1
2400a866:	68f8      	ldr	r0, [r7, #12]
2400a868:	f004 fb3e 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400a86c:	2300      	movs	r3, #0
2400a86e:	e000      	b.n	2400a872 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400a870:	2302      	movs	r3, #2
  }
}
2400a872:	4618      	mov	r0, r3
2400a874:	3718      	adds	r7, #24
2400a876:	46bd      	mov	sp, r7
2400a878:	bd80      	pop	{r7, pc}
2400a87a:	bf00      	nop
2400a87c:	ffff0000 	.word	0xffff0000
2400a880:	2400cec7 	.word	0x2400cec7
2400a884:	80002000 	.word	0x80002000

2400a888 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2400a888:	b580      	push	{r7, lr}
2400a88a:	b088      	sub	sp, #32
2400a88c:	af02      	add	r7, sp, #8
2400a88e:	60f8      	str	r0, [r7, #12]
2400a890:	607a      	str	r2, [r7, #4]
2400a892:	461a      	mov	r2, r3
2400a894:	460b      	mov	r3, r1
2400a896:	817b      	strh	r3, [r7, #10]
2400a898:	4613      	mov	r3, r2
2400a89a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a89c:	68fb      	ldr	r3, [r7, #12]
2400a89e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a8a2:	b2db      	uxtb	r3, r3
2400a8a4:	2b20      	cmp	r3, #32
2400a8a6:	d153      	bne.n	2400a950 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400a8a8:	68fb      	ldr	r3, [r7, #12]
2400a8aa:	681b      	ldr	r3, [r3, #0]
2400a8ac:	699b      	ldr	r3, [r3, #24]
2400a8ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400a8b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400a8b6:	d101      	bne.n	2400a8bc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2400a8b8:	2302      	movs	r3, #2
2400a8ba:	e04a      	b.n	2400a952 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a8bc:	68fb      	ldr	r3, [r7, #12]
2400a8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a8c2:	2b01      	cmp	r3, #1
2400a8c4:	d101      	bne.n	2400a8ca <HAL_I2C_Master_Receive_IT+0x42>
2400a8c6:	2302      	movs	r3, #2
2400a8c8:	e043      	b.n	2400a952 <HAL_I2C_Master_Receive_IT+0xca>
2400a8ca:	68fb      	ldr	r3, [r7, #12]
2400a8cc:	2201      	movs	r2, #1
2400a8ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400a8d2:	68fb      	ldr	r3, [r7, #12]
2400a8d4:	2222      	movs	r2, #34	; 0x22
2400a8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400a8da:	68fb      	ldr	r3, [r7, #12]
2400a8dc:	2210      	movs	r2, #16
2400a8de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400a8e2:	68fb      	ldr	r3, [r7, #12]
2400a8e4:	2200      	movs	r2, #0
2400a8e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400a8e8:	68fb      	ldr	r3, [r7, #12]
2400a8ea:	687a      	ldr	r2, [r7, #4]
2400a8ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400a8ee:	68fb      	ldr	r3, [r7, #12]
2400a8f0:	893a      	ldrh	r2, [r7, #8]
2400a8f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400a8f4:	68fb      	ldr	r3, [r7, #12]
2400a8f6:	4a19      	ldr	r2, [pc, #100]	; (2400a95c <HAL_I2C_Master_Receive_IT+0xd4>)
2400a8f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400a8fa:	68fb      	ldr	r3, [r7, #12]
2400a8fc:	4a18      	ldr	r2, [pc, #96]	; (2400a960 <HAL_I2C_Master_Receive_IT+0xd8>)
2400a8fe:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a900:	68fb      	ldr	r3, [r7, #12]
2400a902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a904:	b29b      	uxth	r3, r3
2400a906:	2bff      	cmp	r3, #255	; 0xff
2400a908:	d906      	bls.n	2400a918 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a90a:	68fb      	ldr	r3, [r7, #12]
2400a90c:	22ff      	movs	r2, #255	; 0xff
2400a90e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400a910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a914:	617b      	str	r3, [r7, #20]
2400a916:	e007      	b.n	2400a928 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a918:	68fb      	ldr	r3, [r7, #12]
2400a91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a91c:	b29a      	uxth	r2, r3
2400a91e:	68fb      	ldr	r3, [r7, #12]
2400a920:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400a922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a926:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400a928:	68fb      	ldr	r3, [r7, #12]
2400a92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a92c:	b2da      	uxtb	r2, r3
2400a92e:	8979      	ldrh	r1, [r7, #10]
2400a930:	4b0c      	ldr	r3, [pc, #48]	; (2400a964 <HAL_I2C_Master_Receive_IT+0xdc>)
2400a932:	9300      	str	r3, [sp, #0]
2400a934:	697b      	ldr	r3, [r7, #20]
2400a936:	68f8      	ldr	r0, [r7, #12]
2400a938:	f004 faa4 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a93c:	68fb      	ldr	r3, [r7, #12]
2400a93e:	2200      	movs	r2, #0
2400a940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400a944:	2102      	movs	r1, #2
2400a946:	68f8      	ldr	r0, [r7, #12]
2400a948:	f004 face 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400a94c:	2300      	movs	r3, #0
2400a94e:	e000      	b.n	2400a952 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400a950:	2302      	movs	r3, #2
  }
}
2400a952:	4618      	mov	r0, r3
2400a954:	3718      	adds	r7, #24
2400a956:	46bd      	mov	sp, r7
2400a958:	bd80      	pop	{r7, pc}
2400a95a:	bf00      	nop
2400a95c:	ffff0000 	.word	0xffff0000
2400a960:	2400cec7 	.word	0x2400cec7
2400a964:	80002400 	.word	0x80002400

2400a968 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400a968:	b580      	push	{r7, lr}
2400a96a:	b084      	sub	sp, #16
2400a96c:	af00      	add	r7, sp, #0
2400a96e:	60f8      	str	r0, [r7, #12]
2400a970:	60b9      	str	r1, [r7, #8]
2400a972:	4613      	mov	r3, r2
2400a974:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400a976:	68fb      	ldr	r3, [r7, #12]
2400a978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a97c:	b2db      	uxtb	r3, r3
2400a97e:	2b20      	cmp	r3, #32
2400a980:	d139      	bne.n	2400a9f6 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a982:	68fb      	ldr	r3, [r7, #12]
2400a984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a988:	2b01      	cmp	r3, #1
2400a98a:	d101      	bne.n	2400a990 <HAL_I2C_Slave_Transmit_IT+0x28>
2400a98c:	2302      	movs	r3, #2
2400a98e:	e033      	b.n	2400a9f8 <HAL_I2C_Slave_Transmit_IT+0x90>
2400a990:	68fb      	ldr	r3, [r7, #12]
2400a992:	2201      	movs	r2, #1
2400a994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400a998:	68fb      	ldr	r3, [r7, #12]
2400a99a:	2221      	movs	r2, #33	; 0x21
2400a99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400a9a0:	68fb      	ldr	r3, [r7, #12]
2400a9a2:	2220      	movs	r2, #32
2400a9a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400a9a8:	68fb      	ldr	r3, [r7, #12]
2400a9aa:	2200      	movs	r2, #0
2400a9ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400a9ae:	68fb      	ldr	r3, [r7, #12]
2400a9b0:	681b      	ldr	r3, [r3, #0]
2400a9b2:	685a      	ldr	r2, [r3, #4]
2400a9b4:	68fb      	ldr	r3, [r7, #12]
2400a9b6:	681b      	ldr	r3, [r3, #0]
2400a9b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a9bc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400a9be:	68fb      	ldr	r3, [r7, #12]
2400a9c0:	68ba      	ldr	r2, [r7, #8]
2400a9c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400a9c4:	68fb      	ldr	r3, [r7, #12]
2400a9c6:	88fa      	ldrh	r2, [r7, #6]
2400a9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400a9ca:	68fb      	ldr	r3, [r7, #12]
2400a9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a9ce:	b29a      	uxth	r2, r3
2400a9d0:	68fb      	ldr	r3, [r7, #12]
2400a9d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400a9d4:	68fb      	ldr	r3, [r7, #12]
2400a9d6:	4a0a      	ldr	r2, [pc, #40]	; (2400aa00 <HAL_I2C_Slave_Transmit_IT+0x98>)
2400a9d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400a9da:	68fb      	ldr	r3, [r7, #12]
2400a9dc:	4a09      	ldr	r2, [pc, #36]	; (2400aa04 <HAL_I2C_Slave_Transmit_IT+0x9c>)
2400a9de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a9e0:	68fb      	ldr	r3, [r7, #12]
2400a9e2:	2200      	movs	r2, #0
2400a9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400a9e8:	f248 0101 	movw	r1, #32769	; 0x8001
2400a9ec:	68f8      	ldr	r0, [r7, #12]
2400a9ee:	f004 fa7b 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400a9f2:	2300      	movs	r3, #0
2400a9f4:	e000      	b.n	2400a9f8 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400a9f6:	2302      	movs	r3, #2
  }
}
2400a9f8:	4618      	mov	r0, r3
2400a9fa:	3710      	adds	r7, #16
2400a9fc:	46bd      	mov	sp, r7
2400a9fe:	bd80      	pop	{r7, pc}
2400aa00:	ffff0000 	.word	0xffff0000
2400aa04:	2400d117 	.word	0x2400d117

2400aa08 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400aa08:	b580      	push	{r7, lr}
2400aa0a:	b084      	sub	sp, #16
2400aa0c:	af00      	add	r7, sp, #0
2400aa0e:	60f8      	str	r0, [r7, #12]
2400aa10:	60b9      	str	r1, [r7, #8]
2400aa12:	4613      	mov	r3, r2
2400aa14:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400aa16:	68fb      	ldr	r3, [r7, #12]
2400aa18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aa1c:	b2db      	uxtb	r3, r3
2400aa1e:	2b20      	cmp	r3, #32
2400aa20:	d139      	bne.n	2400aa96 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400aa22:	68fb      	ldr	r3, [r7, #12]
2400aa24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400aa28:	2b01      	cmp	r3, #1
2400aa2a:	d101      	bne.n	2400aa30 <HAL_I2C_Slave_Receive_IT+0x28>
2400aa2c:	2302      	movs	r3, #2
2400aa2e:	e033      	b.n	2400aa98 <HAL_I2C_Slave_Receive_IT+0x90>
2400aa30:	68fb      	ldr	r3, [r7, #12]
2400aa32:	2201      	movs	r2, #1
2400aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400aa38:	68fb      	ldr	r3, [r7, #12]
2400aa3a:	2222      	movs	r2, #34	; 0x22
2400aa3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400aa40:	68fb      	ldr	r3, [r7, #12]
2400aa42:	2220      	movs	r2, #32
2400aa44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400aa48:	68fb      	ldr	r3, [r7, #12]
2400aa4a:	2200      	movs	r2, #0
2400aa4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400aa4e:	68fb      	ldr	r3, [r7, #12]
2400aa50:	681b      	ldr	r3, [r3, #0]
2400aa52:	685a      	ldr	r2, [r3, #4]
2400aa54:	68fb      	ldr	r3, [r7, #12]
2400aa56:	681b      	ldr	r3, [r3, #0]
2400aa58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400aa5c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400aa5e:	68fb      	ldr	r3, [r7, #12]
2400aa60:	68ba      	ldr	r2, [r7, #8]
2400aa62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400aa64:	68fb      	ldr	r3, [r7, #12]
2400aa66:	88fa      	ldrh	r2, [r7, #6]
2400aa68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400aa6a:	68fb      	ldr	r3, [r7, #12]
2400aa6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aa6e:	b29a      	uxth	r2, r3
2400aa70:	68fb      	ldr	r3, [r7, #12]
2400aa72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400aa74:	68fb      	ldr	r3, [r7, #12]
2400aa76:	4a0a      	ldr	r2, [pc, #40]	; (2400aaa0 <HAL_I2C_Slave_Receive_IT+0x98>)
2400aa78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400aa7a:	68fb      	ldr	r3, [r7, #12]
2400aa7c:	4a09      	ldr	r2, [pc, #36]	; (2400aaa4 <HAL_I2C_Slave_Receive_IT+0x9c>)
2400aa7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400aa80:	68fb      	ldr	r3, [r7, #12]
2400aa82:	2200      	movs	r2, #0
2400aa84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400aa88:	f248 0102 	movw	r1, #32770	; 0x8002
2400aa8c:	68f8      	ldr	r0, [r7, #12]
2400aa8e:	f004 fa2b 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400aa92:	2300      	movs	r3, #0
2400aa94:	e000      	b.n	2400aa98 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400aa96:	2302      	movs	r3, #2
  }
}
2400aa98:	4618      	mov	r0, r3
2400aa9a:	3710      	adds	r7, #16
2400aa9c:	46bd      	mov	sp, r7
2400aa9e:	bd80      	pop	{r7, pc}
2400aaa0:	ffff0000 	.word	0xffff0000
2400aaa4:	2400d117 	.word	0x2400d117

2400aaa8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2400aaa8:	b580      	push	{r7, lr}
2400aaaa:	b088      	sub	sp, #32
2400aaac:	af02      	add	r7, sp, #8
2400aaae:	60f8      	str	r0, [r7, #12]
2400aab0:	607a      	str	r2, [r7, #4]
2400aab2:	461a      	mov	r2, r3
2400aab4:	460b      	mov	r3, r1
2400aab6:	817b      	strh	r3, [r7, #10]
2400aab8:	4613      	mov	r3, r2
2400aaba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400aabc:	68fb      	ldr	r3, [r7, #12]
2400aabe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aac2:	b2db      	uxtb	r3, r3
2400aac4:	2b20      	cmp	r3, #32
2400aac6:	f040 80cd 	bne.w	2400ac64 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400aaca:	68fb      	ldr	r3, [r7, #12]
2400aacc:	681b      	ldr	r3, [r3, #0]
2400aace:	699b      	ldr	r3, [r3, #24]
2400aad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400aad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400aad8:	d101      	bne.n	2400aade <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
2400aada:	2302      	movs	r3, #2
2400aadc:	e0c3      	b.n	2400ac66 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400aade:	68fb      	ldr	r3, [r7, #12]
2400aae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400aae4:	2b01      	cmp	r3, #1
2400aae6:	d101      	bne.n	2400aaec <HAL_I2C_Master_Transmit_DMA+0x44>
2400aae8:	2302      	movs	r3, #2
2400aaea:	e0bc      	b.n	2400ac66 <HAL_I2C_Master_Transmit_DMA+0x1be>
2400aaec:	68fb      	ldr	r3, [r7, #12]
2400aaee:	2201      	movs	r2, #1
2400aaf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400aaf4:	68fb      	ldr	r3, [r7, #12]
2400aaf6:	2221      	movs	r2, #33	; 0x21
2400aaf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400aafc:	68fb      	ldr	r3, [r7, #12]
2400aafe:	2210      	movs	r2, #16
2400ab00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ab04:	68fb      	ldr	r3, [r7, #12]
2400ab06:	2200      	movs	r2, #0
2400ab08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ab0a:	68fb      	ldr	r3, [r7, #12]
2400ab0c:	687a      	ldr	r2, [r7, #4]
2400ab0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ab10:	68fb      	ldr	r3, [r7, #12]
2400ab12:	893a      	ldrh	r2, [r7, #8]
2400ab14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ab16:	68fb      	ldr	r3, [r7, #12]
2400ab18:	4a55      	ldr	r2, [pc, #340]	; (2400ac70 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
2400ab1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400ab1c:	68fb      	ldr	r3, [r7, #12]
2400ab1e:	4a55      	ldr	r2, [pc, #340]	; (2400ac74 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
2400ab20:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ab22:	68fb      	ldr	r3, [r7, #12]
2400ab24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ab26:	b29b      	uxth	r3, r3
2400ab28:	2bff      	cmp	r3, #255	; 0xff
2400ab2a:	d906      	bls.n	2400ab3a <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ab2c:	68fb      	ldr	r3, [r7, #12]
2400ab2e:	22ff      	movs	r2, #255	; 0xff
2400ab30:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400ab32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ab36:	617b      	str	r3, [r7, #20]
2400ab38:	e007      	b.n	2400ab4a <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ab3a:	68fb      	ldr	r3, [r7, #12]
2400ab3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ab3e:	b29a      	uxth	r2, r3
2400ab40:	68fb      	ldr	r3, [r7, #12]
2400ab42:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400ab44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ab48:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400ab4a:	68fb      	ldr	r3, [r7, #12]
2400ab4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ab4e:	2b00      	cmp	r3, #0
2400ab50:	d070      	beq.n	2400ac34 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
2400ab52:	68fb      	ldr	r3, [r7, #12]
2400ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ab56:	2b00      	cmp	r3, #0
2400ab58:	d020      	beq.n	2400ab9c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400ab5a:	68fb      	ldr	r3, [r7, #12]
2400ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ab5e:	4a46      	ldr	r2, [pc, #280]	; (2400ac78 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
2400ab60:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400ab62:	68fb      	ldr	r3, [r7, #12]
2400ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ab66:	4a45      	ldr	r2, [pc, #276]	; (2400ac7c <HAL_I2C_Master_Transmit_DMA+0x1d4>)
2400ab68:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400ab6a:	68fb      	ldr	r3, [r7, #12]
2400ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ab6e:	2200      	movs	r2, #0
2400ab70:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400ab72:	68fb      	ldr	r3, [r7, #12]
2400ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ab76:	2200      	movs	r2, #0
2400ab78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400ab7a:	68fb      	ldr	r3, [r7, #12]
2400ab7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400ab7e:	6879      	ldr	r1, [r7, #4]
2400ab80:	68fb      	ldr	r3, [r7, #12]
2400ab82:	681b      	ldr	r3, [r3, #0]
2400ab84:	3328      	adds	r3, #40	; 0x28
2400ab86:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400ab88:	68fb      	ldr	r3, [r7, #12]
2400ab8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400ab8c:	f7f9 f878 	bl	24003c80 <HAL_DMA_Start_IT>
2400ab90:	4603      	mov	r3, r0
2400ab92:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400ab94:	7cfb      	ldrb	r3, [r7, #19]
2400ab96:	2b00      	cmp	r3, #0
2400ab98:	d138      	bne.n	2400ac0c <HAL_I2C_Master_Transmit_DMA+0x164>
2400ab9a:	e013      	b.n	2400abc4 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400ab9c:	68fb      	ldr	r3, [r7, #12]
2400ab9e:	2220      	movs	r2, #32
2400aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400aba4:	68fb      	ldr	r3, [r7, #12]
2400aba6:	2200      	movs	r2, #0
2400aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400abac:	68fb      	ldr	r3, [r7, #12]
2400abae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400abb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400abb4:	68fb      	ldr	r3, [r7, #12]
2400abb6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400abb8:	68fb      	ldr	r3, [r7, #12]
2400abba:	2200      	movs	r2, #0
2400abbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400abc0:	2301      	movs	r3, #1
2400abc2:	e050      	b.n	2400ac66 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400abc4:	68fb      	ldr	r3, [r7, #12]
2400abc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400abc8:	b2da      	uxtb	r2, r3
2400abca:	8979      	ldrh	r1, [r7, #10]
2400abcc:	4b2c      	ldr	r3, [pc, #176]	; (2400ac80 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400abce:	9300      	str	r3, [sp, #0]
2400abd0:	697b      	ldr	r3, [r7, #20]
2400abd2:	68f8      	ldr	r0, [r7, #12]
2400abd4:	f004 f956 	bl	2400ee84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400abd8:	68fb      	ldr	r3, [r7, #12]
2400abda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400abdc:	b29a      	uxth	r2, r3
2400abde:	68fb      	ldr	r3, [r7, #12]
2400abe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400abe2:	1ad3      	subs	r3, r2, r3
2400abe4:	b29a      	uxth	r2, r3
2400abe6:	68fb      	ldr	r3, [r7, #12]
2400abe8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400abea:	68fb      	ldr	r3, [r7, #12]
2400abec:	2200      	movs	r2, #0
2400abee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400abf2:	2110      	movs	r1, #16
2400abf4:	68f8      	ldr	r0, [r7, #12]
2400abf6:	f004 f977 	bl	2400eee8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400abfa:	68fb      	ldr	r3, [r7, #12]
2400abfc:	681b      	ldr	r3, [r3, #0]
2400abfe:	681a      	ldr	r2, [r3, #0]
2400ac00:	68fb      	ldr	r3, [r7, #12]
2400ac02:	681b      	ldr	r3, [r3, #0]
2400ac04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400ac08:	601a      	str	r2, [r3, #0]
2400ac0a:	e029      	b.n	2400ac60 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400ac0c:	68fb      	ldr	r3, [r7, #12]
2400ac0e:	2220      	movs	r2, #32
2400ac10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ac14:	68fb      	ldr	r3, [r7, #12]
2400ac16:	2200      	movs	r2, #0
2400ac18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400ac1c:	68fb      	ldr	r3, [r7, #12]
2400ac1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ac20:	f043 0210 	orr.w	r2, r3, #16
2400ac24:	68fb      	ldr	r3, [r7, #12]
2400ac26:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ac28:	68fb      	ldr	r3, [r7, #12]
2400ac2a:	2200      	movs	r2, #0
2400ac2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ac30:	2301      	movs	r3, #1
2400ac32:	e018      	b.n	2400ac66 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400ac34:	68fb      	ldr	r3, [r7, #12]
2400ac36:	4a13      	ldr	r2, [pc, #76]	; (2400ac84 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
2400ac38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400ac3a:	68fb      	ldr	r3, [r7, #12]
2400ac3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ac3e:	b2da      	uxtb	r2, r3
2400ac40:	8979      	ldrh	r1, [r7, #10]
2400ac42:	4b0f      	ldr	r3, [pc, #60]	; (2400ac80 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400ac44:	9300      	str	r3, [sp, #0]
2400ac46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ac4a:	68f8      	ldr	r0, [r7, #12]
2400ac4c:	f004 f91a 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ac50:	68fb      	ldr	r3, [r7, #12]
2400ac52:	2200      	movs	r2, #0
2400ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ac58:	2101      	movs	r1, #1
2400ac5a:	68f8      	ldr	r0, [r7, #12]
2400ac5c:	f004 f944 	bl	2400eee8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400ac60:	2300      	movs	r3, #0
2400ac62:	e000      	b.n	2400ac66 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400ac64:	2302      	movs	r3, #2
  }
}
2400ac66:	4618      	mov	r0, r3
2400ac68:	3718      	adds	r7, #24
2400ac6a:	46bd      	mov	sp, r7
2400ac6c:	bd80      	pop	{r7, pc}
2400ac6e:	bf00      	nop
2400ac70:	ffff0000 	.word	0xffff0000
2400ac74:	2400d31d 	.word	0x2400d31d
2400ac78:	2400e4bf 	.word	0x2400e4bf
2400ac7c:	2400e791 	.word	0x2400e791
2400ac80:	80002000 	.word	0x80002000
2400ac84:	2400cec7 	.word	0x2400cec7

2400ac88 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400ac88:	b580      	push	{r7, lr}
2400ac8a:	b088      	sub	sp, #32
2400ac8c:	af02      	add	r7, sp, #8
2400ac8e:	60f8      	str	r0, [r7, #12]
2400ac90:	607a      	str	r2, [r7, #4]
2400ac92:	461a      	mov	r2, r3
2400ac94:	460b      	mov	r3, r1
2400ac96:	817b      	strh	r3, [r7, #10]
2400ac98:	4613      	mov	r3, r2
2400ac9a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ac9c:	68fb      	ldr	r3, [r7, #12]
2400ac9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aca2:	b2db      	uxtb	r3, r3
2400aca4:	2b20      	cmp	r3, #32
2400aca6:	f040 80cd 	bne.w	2400ae44 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400acaa:	68fb      	ldr	r3, [r7, #12]
2400acac:	681b      	ldr	r3, [r3, #0]
2400acae:	699b      	ldr	r3, [r3, #24]
2400acb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400acb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400acb8:	d101      	bne.n	2400acbe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2400acba:	2302      	movs	r3, #2
2400acbc:	e0c3      	b.n	2400ae46 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400acbe:	68fb      	ldr	r3, [r7, #12]
2400acc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400acc4:	2b01      	cmp	r3, #1
2400acc6:	d101      	bne.n	2400accc <HAL_I2C_Master_Receive_DMA+0x44>
2400acc8:	2302      	movs	r3, #2
2400acca:	e0bc      	b.n	2400ae46 <HAL_I2C_Master_Receive_DMA+0x1be>
2400accc:	68fb      	ldr	r3, [r7, #12]
2400acce:	2201      	movs	r2, #1
2400acd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400acd4:	68fb      	ldr	r3, [r7, #12]
2400acd6:	2222      	movs	r2, #34	; 0x22
2400acd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400acdc:	68fb      	ldr	r3, [r7, #12]
2400acde:	2210      	movs	r2, #16
2400ace0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ace4:	68fb      	ldr	r3, [r7, #12]
2400ace6:	2200      	movs	r2, #0
2400ace8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400acea:	68fb      	ldr	r3, [r7, #12]
2400acec:	687a      	ldr	r2, [r7, #4]
2400acee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400acf0:	68fb      	ldr	r3, [r7, #12]
2400acf2:	893a      	ldrh	r2, [r7, #8]
2400acf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400acf6:	68fb      	ldr	r3, [r7, #12]
2400acf8:	4a55      	ldr	r2, [pc, #340]	; (2400ae50 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2400acfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400acfc:	68fb      	ldr	r3, [r7, #12]
2400acfe:	4a55      	ldr	r2, [pc, #340]	; (2400ae54 <HAL_I2C_Master_Receive_DMA+0x1cc>)
2400ad00:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ad02:	68fb      	ldr	r3, [r7, #12]
2400ad04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ad06:	b29b      	uxth	r3, r3
2400ad08:	2bff      	cmp	r3, #255	; 0xff
2400ad0a:	d906      	bls.n	2400ad1a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ad0c:	68fb      	ldr	r3, [r7, #12]
2400ad0e:	22ff      	movs	r2, #255	; 0xff
2400ad10:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400ad12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ad16:	617b      	str	r3, [r7, #20]
2400ad18:	e007      	b.n	2400ad2a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ad1a:	68fb      	ldr	r3, [r7, #12]
2400ad1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ad1e:	b29a      	uxth	r2, r3
2400ad20:	68fb      	ldr	r3, [r7, #12]
2400ad22:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400ad24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ad28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400ad2a:	68fb      	ldr	r3, [r7, #12]
2400ad2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ad2e:	2b00      	cmp	r3, #0
2400ad30:	d070      	beq.n	2400ae14 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2400ad32:	68fb      	ldr	r3, [r7, #12]
2400ad34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ad36:	2b00      	cmp	r3, #0
2400ad38:	d020      	beq.n	2400ad7c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400ad3a:	68fb      	ldr	r3, [r7, #12]
2400ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ad3e:	4a46      	ldr	r2, [pc, #280]	; (2400ae58 <HAL_I2C_Master_Receive_DMA+0x1d0>)
2400ad40:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400ad42:	68fb      	ldr	r3, [r7, #12]
2400ad44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ad46:	4a45      	ldr	r2, [pc, #276]	; (2400ae5c <HAL_I2C_Master_Receive_DMA+0x1d4>)
2400ad48:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400ad4a:	68fb      	ldr	r3, [r7, #12]
2400ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ad4e:	2200      	movs	r2, #0
2400ad50:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400ad52:	68fb      	ldr	r3, [r7, #12]
2400ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ad56:	2200      	movs	r2, #0
2400ad58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ad5a:	68fb      	ldr	r3, [r7, #12]
2400ad5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400ad5e:	68fb      	ldr	r3, [r7, #12]
2400ad60:	681b      	ldr	r3, [r3, #0]
2400ad62:	3324      	adds	r3, #36	; 0x24
2400ad64:	4619      	mov	r1, r3
2400ad66:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400ad68:	68fb      	ldr	r3, [r7, #12]
2400ad6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ad6c:	f7f8 ff88 	bl	24003c80 <HAL_DMA_Start_IT>
2400ad70:	4603      	mov	r3, r0
2400ad72:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400ad74:	7cfb      	ldrb	r3, [r7, #19]
2400ad76:	2b00      	cmp	r3, #0
2400ad78:	d138      	bne.n	2400adec <HAL_I2C_Master_Receive_DMA+0x164>
2400ad7a:	e013      	b.n	2400ada4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400ad7c:	68fb      	ldr	r3, [r7, #12]
2400ad7e:	2220      	movs	r2, #32
2400ad80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ad84:	68fb      	ldr	r3, [r7, #12]
2400ad86:	2200      	movs	r2, #0
2400ad88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400ad8c:	68fb      	ldr	r3, [r7, #12]
2400ad8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ad90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400ad94:	68fb      	ldr	r3, [r7, #12]
2400ad96:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400ad98:	68fb      	ldr	r3, [r7, #12]
2400ad9a:	2200      	movs	r2, #0
2400ad9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400ada0:	2301      	movs	r3, #1
2400ada2:	e050      	b.n	2400ae46 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400ada4:	68fb      	ldr	r3, [r7, #12]
2400ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ada8:	b2da      	uxtb	r2, r3
2400adaa:	8979      	ldrh	r1, [r7, #10]
2400adac:	4b2c      	ldr	r3, [pc, #176]	; (2400ae60 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400adae:	9300      	str	r3, [sp, #0]
2400adb0:	697b      	ldr	r3, [r7, #20]
2400adb2:	68f8      	ldr	r0, [r7, #12]
2400adb4:	f004 f866 	bl	2400ee84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400adb8:	68fb      	ldr	r3, [r7, #12]
2400adba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400adbc:	b29a      	uxth	r2, r3
2400adbe:	68fb      	ldr	r3, [r7, #12]
2400adc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400adc2:	1ad3      	subs	r3, r2, r3
2400adc4:	b29a      	uxth	r2, r3
2400adc6:	68fb      	ldr	r3, [r7, #12]
2400adc8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400adca:	68fb      	ldr	r3, [r7, #12]
2400adcc:	2200      	movs	r2, #0
2400adce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400add2:	2110      	movs	r1, #16
2400add4:	68f8      	ldr	r0, [r7, #12]
2400add6:	f004 f887 	bl	2400eee8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400adda:	68fb      	ldr	r3, [r7, #12]
2400addc:	681b      	ldr	r3, [r3, #0]
2400adde:	681a      	ldr	r2, [r3, #0]
2400ade0:	68fb      	ldr	r3, [r7, #12]
2400ade2:	681b      	ldr	r3, [r3, #0]
2400ade4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ade8:	601a      	str	r2, [r3, #0]
2400adea:	e029      	b.n	2400ae40 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400adec:	68fb      	ldr	r3, [r7, #12]
2400adee:	2220      	movs	r2, #32
2400adf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400adf4:	68fb      	ldr	r3, [r7, #12]
2400adf6:	2200      	movs	r2, #0
2400adf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400adfc:	68fb      	ldr	r3, [r7, #12]
2400adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ae00:	f043 0210 	orr.w	r2, r3, #16
2400ae04:	68fb      	ldr	r3, [r7, #12]
2400ae06:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ae08:	68fb      	ldr	r3, [r7, #12]
2400ae0a:	2200      	movs	r2, #0
2400ae0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ae10:	2301      	movs	r3, #1
2400ae12:	e018      	b.n	2400ae46 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400ae14:	68fb      	ldr	r3, [r7, #12]
2400ae16:	4a13      	ldr	r2, [pc, #76]	; (2400ae64 <HAL_I2C_Master_Receive_DMA+0x1dc>)
2400ae18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400ae1a:	68fb      	ldr	r3, [r7, #12]
2400ae1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ae1e:	b2da      	uxtb	r2, r3
2400ae20:	8979      	ldrh	r1, [r7, #10]
2400ae22:	4b0f      	ldr	r3, [pc, #60]	; (2400ae60 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400ae24:	9300      	str	r3, [sp, #0]
2400ae26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ae2a:	68f8      	ldr	r0, [r7, #12]
2400ae2c:	f004 f82a 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ae30:	68fb      	ldr	r3, [r7, #12]
2400ae32:	2200      	movs	r2, #0
2400ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ae38:	2101      	movs	r1, #1
2400ae3a:	68f8      	ldr	r0, [r7, #12]
2400ae3c:	f004 f854 	bl	2400eee8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400ae40:	2300      	movs	r3, #0
2400ae42:	e000      	b.n	2400ae46 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400ae44:	2302      	movs	r3, #2
  }
}
2400ae46:	4618      	mov	r0, r3
2400ae48:	3718      	adds	r7, #24
2400ae4a:	46bd      	mov	sp, r7
2400ae4c:	bd80      	pop	{r7, pc}
2400ae4e:	bf00      	nop
2400ae50:	ffff0000 	.word	0xffff0000
2400ae54:	2400d31d 	.word	0x2400d31d
2400ae58:	2400e595 	.word	0x2400e595
2400ae5c:	2400e791 	.word	0x2400e791
2400ae60:	80002400 	.word	0x80002400
2400ae64:	2400cec7 	.word	0x2400cec7

2400ae68 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400ae68:	b580      	push	{r7, lr}
2400ae6a:	b086      	sub	sp, #24
2400ae6c:	af00      	add	r7, sp, #0
2400ae6e:	60f8      	str	r0, [r7, #12]
2400ae70:	60b9      	str	r1, [r7, #8]
2400ae72:	4613      	mov	r3, r2
2400ae74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ae76:	68fb      	ldr	r3, [r7, #12]
2400ae78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ae7c:	b2db      	uxtb	r3, r3
2400ae7e:	2b20      	cmp	r3, #32
2400ae80:	f040 809b 	bne.w	2400afba <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400ae84:	68bb      	ldr	r3, [r7, #8]
2400ae86:	2b00      	cmp	r3, #0
2400ae88:	d002      	beq.n	2400ae90 <HAL_I2C_Slave_Transmit_DMA+0x28>
2400ae8a:	88fb      	ldrh	r3, [r7, #6]
2400ae8c:	2b00      	cmp	r3, #0
2400ae8e:	d105      	bne.n	2400ae9c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400ae90:	68fb      	ldr	r3, [r7, #12]
2400ae92:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ae96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400ae98:	2301      	movs	r3, #1
2400ae9a:	e08f      	b.n	2400afbc <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ae9c:	68fb      	ldr	r3, [r7, #12]
2400ae9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400aea2:	2b01      	cmp	r3, #1
2400aea4:	d101      	bne.n	2400aeaa <HAL_I2C_Slave_Transmit_DMA+0x42>
2400aea6:	2302      	movs	r3, #2
2400aea8:	e088      	b.n	2400afbc <HAL_I2C_Slave_Transmit_DMA+0x154>
2400aeaa:	68fb      	ldr	r3, [r7, #12]
2400aeac:	2201      	movs	r2, #1
2400aeae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400aeb2:	68fb      	ldr	r3, [r7, #12]
2400aeb4:	2221      	movs	r2, #33	; 0x21
2400aeb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400aeba:	68fb      	ldr	r3, [r7, #12]
2400aebc:	2220      	movs	r2, #32
2400aebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400aec2:	68fb      	ldr	r3, [r7, #12]
2400aec4:	2200      	movs	r2, #0
2400aec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400aec8:	68fb      	ldr	r3, [r7, #12]
2400aeca:	68ba      	ldr	r2, [r7, #8]
2400aecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400aece:	68fb      	ldr	r3, [r7, #12]
2400aed0:	88fa      	ldrh	r2, [r7, #6]
2400aed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400aed4:	68fb      	ldr	r3, [r7, #12]
2400aed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aed8:	b29a      	uxth	r2, r3
2400aeda:	68fb      	ldr	r3, [r7, #12]
2400aedc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400aede:	68fb      	ldr	r3, [r7, #12]
2400aee0:	4a38      	ldr	r2, [pc, #224]	; (2400afc4 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
2400aee2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400aee4:	68fb      	ldr	r3, [r7, #12]
2400aee6:	4a38      	ldr	r2, [pc, #224]	; (2400afc8 <HAL_I2C_Slave_Transmit_DMA+0x160>)
2400aee8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400aeea:	68fb      	ldr	r3, [r7, #12]
2400aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400aeee:	2b00      	cmp	r3, #0
2400aef0:	d020      	beq.n	2400af34 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400aef2:	68fb      	ldr	r3, [r7, #12]
2400aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400aef6:	4a35      	ldr	r2, [pc, #212]	; (2400afcc <HAL_I2C_Slave_Transmit_DMA+0x164>)
2400aef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400aefa:	68fb      	ldr	r3, [r7, #12]
2400aefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400aefe:	4a34      	ldr	r2, [pc, #208]	; (2400afd0 <HAL_I2C_Slave_Transmit_DMA+0x168>)
2400af00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400af02:	68fb      	ldr	r3, [r7, #12]
2400af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400af06:	2200      	movs	r2, #0
2400af08:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400af0a:	68fb      	ldr	r3, [r7, #12]
2400af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400af0e:	2200      	movs	r2, #0
2400af10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400af12:	68fb      	ldr	r3, [r7, #12]
2400af14:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400af16:	68b9      	ldr	r1, [r7, #8]
2400af18:	68fb      	ldr	r3, [r7, #12]
2400af1a:	681b      	ldr	r3, [r3, #0]
2400af1c:	3328      	adds	r3, #40	; 0x28
2400af1e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400af20:	68fb      	ldr	r3, [r7, #12]
2400af22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400af24:	f7f8 feac 	bl	24003c80 <HAL_DMA_Start_IT>
2400af28:	4603      	mov	r3, r0
2400af2a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400af2c:	7dfb      	ldrb	r3, [r7, #23]
2400af2e:	2b00      	cmp	r3, #0
2400af30:	d12f      	bne.n	2400af92 <HAL_I2C_Slave_Transmit_DMA+0x12a>
2400af32:	e013      	b.n	2400af5c <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400af34:	68fb      	ldr	r3, [r7, #12]
2400af36:	2228      	movs	r2, #40	; 0x28
2400af38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400af3c:	68fb      	ldr	r3, [r7, #12]
2400af3e:	2200      	movs	r2, #0
2400af40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400af44:	68fb      	ldr	r3, [r7, #12]
2400af46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400af48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400af4c:	68fb      	ldr	r3, [r7, #12]
2400af4e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400af50:	68fb      	ldr	r3, [r7, #12]
2400af52:	2200      	movs	r2, #0
2400af54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400af58:	2301      	movs	r3, #1
2400af5a:	e02f      	b.n	2400afbc <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400af5c:	68fb      	ldr	r3, [r7, #12]
2400af5e:	681b      	ldr	r3, [r3, #0]
2400af60:	685a      	ldr	r2, [r3, #4]
2400af62:	68fb      	ldr	r3, [r7, #12]
2400af64:	681b      	ldr	r3, [r3, #0]
2400af66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400af6a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400af6c:	68fb      	ldr	r3, [r7, #12]
2400af6e:	2200      	movs	r2, #0
2400af70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400af74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400af78:	68f8      	ldr	r0, [r7, #12]
2400af7a:	f003 ffb5 	bl	2400eee8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400af7e:	68fb      	ldr	r3, [r7, #12]
2400af80:	681b      	ldr	r3, [r3, #0]
2400af82:	681a      	ldr	r2, [r3, #0]
2400af84:	68fb      	ldr	r3, [r7, #12]
2400af86:	681b      	ldr	r3, [r3, #0]
2400af88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400af8c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400af8e:	2300      	movs	r3, #0
2400af90:	e014      	b.n	2400afbc <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400af92:	68fb      	ldr	r3, [r7, #12]
2400af94:	2228      	movs	r2, #40	; 0x28
2400af96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400af9a:	68fb      	ldr	r3, [r7, #12]
2400af9c:	2200      	movs	r2, #0
2400af9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400afa2:	68fb      	ldr	r3, [r7, #12]
2400afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400afa6:	f043 0210 	orr.w	r2, r3, #16
2400afaa:	68fb      	ldr	r3, [r7, #12]
2400afac:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400afae:	68fb      	ldr	r3, [r7, #12]
2400afb0:	2200      	movs	r2, #0
2400afb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400afb6:	2301      	movs	r3, #1
2400afb8:	e000      	b.n	2400afbc <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400afba:	2302      	movs	r3, #2
  }
}
2400afbc:	4618      	mov	r0, r3
2400afbe:	3718      	adds	r7, #24
2400afc0:	46bd      	mov	sp, r7
2400afc2:	bd80      	pop	{r7, pc}
2400afc4:	ffff0000 	.word	0xffff0000
2400afc8:	2400d505 	.word	0x2400d505
2400afcc:	2400e555 	.word	0x2400e555
2400afd0:	2400e791 	.word	0x2400e791

2400afd4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400afd4:	b580      	push	{r7, lr}
2400afd6:	b086      	sub	sp, #24
2400afd8:	af00      	add	r7, sp, #0
2400afda:	60f8      	str	r0, [r7, #12]
2400afdc:	60b9      	str	r1, [r7, #8]
2400afde:	4613      	mov	r3, r2
2400afe0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400afe2:	68fb      	ldr	r3, [r7, #12]
2400afe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400afe8:	b2db      	uxtb	r3, r3
2400afea:	2b20      	cmp	r3, #32
2400afec:	f040 809b 	bne.w	2400b126 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400aff0:	68bb      	ldr	r3, [r7, #8]
2400aff2:	2b00      	cmp	r3, #0
2400aff4:	d002      	beq.n	2400affc <HAL_I2C_Slave_Receive_DMA+0x28>
2400aff6:	88fb      	ldrh	r3, [r7, #6]
2400aff8:	2b00      	cmp	r3, #0
2400affa:	d105      	bne.n	2400b008 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400affc:	68fb      	ldr	r3, [r7, #12]
2400affe:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b004:	2301      	movs	r3, #1
2400b006:	e08f      	b.n	2400b128 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b008:	68fb      	ldr	r3, [r7, #12]
2400b00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b00e:	2b01      	cmp	r3, #1
2400b010:	d101      	bne.n	2400b016 <HAL_I2C_Slave_Receive_DMA+0x42>
2400b012:	2302      	movs	r3, #2
2400b014:	e088      	b.n	2400b128 <HAL_I2C_Slave_Receive_DMA+0x154>
2400b016:	68fb      	ldr	r3, [r7, #12]
2400b018:	2201      	movs	r2, #1
2400b01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b01e:	68fb      	ldr	r3, [r7, #12]
2400b020:	2222      	movs	r2, #34	; 0x22
2400b022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b026:	68fb      	ldr	r3, [r7, #12]
2400b028:	2220      	movs	r2, #32
2400b02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b02e:	68fb      	ldr	r3, [r7, #12]
2400b030:	2200      	movs	r2, #0
2400b032:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b034:	68fb      	ldr	r3, [r7, #12]
2400b036:	68ba      	ldr	r2, [r7, #8]
2400b038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b03a:	68fb      	ldr	r3, [r7, #12]
2400b03c:	88fa      	ldrh	r2, [r7, #6]
2400b03e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b040:	68fb      	ldr	r3, [r7, #12]
2400b042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b044:	b29a      	uxth	r2, r3
2400b046:	68fb      	ldr	r3, [r7, #12]
2400b048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b04a:	68fb      	ldr	r3, [r7, #12]
2400b04c:	4a38      	ldr	r2, [pc, #224]	; (2400b130 <HAL_I2C_Slave_Receive_DMA+0x15c>)
2400b04e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400b050:	68fb      	ldr	r3, [r7, #12]
2400b052:	4a38      	ldr	r2, [pc, #224]	; (2400b134 <HAL_I2C_Slave_Receive_DMA+0x160>)
2400b054:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400b056:	68fb      	ldr	r3, [r7, #12]
2400b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b05a:	2b00      	cmp	r3, #0
2400b05c:	d020      	beq.n	2400b0a0 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400b05e:	68fb      	ldr	r3, [r7, #12]
2400b060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b062:	4a35      	ldr	r2, [pc, #212]	; (2400b138 <HAL_I2C_Slave_Receive_DMA+0x164>)
2400b064:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400b066:	68fb      	ldr	r3, [r7, #12]
2400b068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b06a:	4a34      	ldr	r2, [pc, #208]	; (2400b13c <HAL_I2C_Slave_Receive_DMA+0x168>)
2400b06c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400b06e:	68fb      	ldr	r3, [r7, #12]
2400b070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b072:	2200      	movs	r2, #0
2400b074:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400b076:	68fb      	ldr	r3, [r7, #12]
2400b078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b07a:	2200      	movs	r2, #0
2400b07c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b07e:	68fb      	ldr	r3, [r7, #12]
2400b080:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400b082:	68fb      	ldr	r3, [r7, #12]
2400b084:	681b      	ldr	r3, [r3, #0]
2400b086:	3324      	adds	r3, #36	; 0x24
2400b088:	4619      	mov	r1, r3
2400b08a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2400b08c:	68fb      	ldr	r3, [r7, #12]
2400b08e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b090:	f7f8 fdf6 	bl	24003c80 <HAL_DMA_Start_IT>
2400b094:	4603      	mov	r3, r0
2400b096:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b098:	7dfb      	ldrb	r3, [r7, #23]
2400b09a:	2b00      	cmp	r3, #0
2400b09c:	d12f      	bne.n	2400b0fe <HAL_I2C_Slave_Receive_DMA+0x12a>
2400b09e:	e013      	b.n	2400b0c8 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b0a0:	68fb      	ldr	r3, [r7, #12]
2400b0a2:	2228      	movs	r2, #40	; 0x28
2400b0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b0a8:	68fb      	ldr	r3, [r7, #12]
2400b0aa:	2200      	movs	r2, #0
2400b0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b0b0:	68fb      	ldr	r3, [r7, #12]
2400b0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b0b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b0b8:	68fb      	ldr	r3, [r7, #12]
2400b0ba:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b0bc:	68fb      	ldr	r3, [r7, #12]
2400b0be:	2200      	movs	r2, #0
2400b0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b0c4:	2301      	movs	r3, #1
2400b0c6:	e02f      	b.n	2400b128 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b0c8:	68fb      	ldr	r3, [r7, #12]
2400b0ca:	681b      	ldr	r3, [r3, #0]
2400b0cc:	685a      	ldr	r2, [r3, #4]
2400b0ce:	68fb      	ldr	r3, [r7, #12]
2400b0d0:	681b      	ldr	r3, [r3, #0]
2400b0d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b0d6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b0d8:	68fb      	ldr	r3, [r7, #12]
2400b0da:	2200      	movs	r2, #0
2400b0dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400b0e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b0e4:	68f8      	ldr	r0, [r7, #12]
2400b0e6:	f003 feff 	bl	2400eee8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400b0ea:	68fb      	ldr	r3, [r7, #12]
2400b0ec:	681b      	ldr	r3, [r3, #0]
2400b0ee:	681a      	ldr	r2, [r3, #0]
2400b0f0:	68fb      	ldr	r3, [r7, #12]
2400b0f2:	681b      	ldr	r3, [r3, #0]
2400b0f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400b0f8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b0fa:	2300      	movs	r3, #0
2400b0fc:	e014      	b.n	2400b128 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b0fe:	68fb      	ldr	r3, [r7, #12]
2400b100:	2228      	movs	r2, #40	; 0x28
2400b102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b106:	68fb      	ldr	r3, [r7, #12]
2400b108:	2200      	movs	r2, #0
2400b10a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b10e:	68fb      	ldr	r3, [r7, #12]
2400b110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b112:	f043 0210 	orr.w	r2, r3, #16
2400b116:	68fb      	ldr	r3, [r7, #12]
2400b118:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b11a:	68fb      	ldr	r3, [r7, #12]
2400b11c:	2200      	movs	r2, #0
2400b11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b122:	2301      	movs	r3, #1
2400b124:	e000      	b.n	2400b128 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400b126:	2302      	movs	r3, #2
  }
}
2400b128:	4618      	mov	r0, r3
2400b12a:	3718      	adds	r7, #24
2400b12c:	46bd      	mov	sp, r7
2400b12e:	bd80      	pop	{r7, pc}
2400b130:	ffff0000 	.word	0xffff0000
2400b134:	2400d505 	.word	0x2400d505
2400b138:	2400e62d 	.word	0x2400e62d
2400b13c:	2400e791 	.word	0x2400e791

2400b140 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400b140:	b580      	push	{r7, lr}
2400b142:	b088      	sub	sp, #32
2400b144:	af02      	add	r7, sp, #8
2400b146:	60f8      	str	r0, [r7, #12]
2400b148:	4608      	mov	r0, r1
2400b14a:	4611      	mov	r1, r2
2400b14c:	461a      	mov	r2, r3
2400b14e:	4603      	mov	r3, r0
2400b150:	817b      	strh	r3, [r7, #10]
2400b152:	460b      	mov	r3, r1
2400b154:	813b      	strh	r3, [r7, #8]
2400b156:	4613      	mov	r3, r2
2400b158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b15a:	68fb      	ldr	r3, [r7, #12]
2400b15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b160:	b2db      	uxtb	r3, r3
2400b162:	2b20      	cmp	r3, #32
2400b164:	f040 80f9 	bne.w	2400b35a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2400b168:	6a3b      	ldr	r3, [r7, #32]
2400b16a:	2b00      	cmp	r3, #0
2400b16c:	d002      	beq.n	2400b174 <HAL_I2C_Mem_Write+0x34>
2400b16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b170:	2b00      	cmp	r3, #0
2400b172:	d105      	bne.n	2400b180 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b174:	68fb      	ldr	r3, [r7, #12]
2400b176:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b17a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b17c:	2301      	movs	r3, #1
2400b17e:	e0ed      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b180:	68fb      	ldr	r3, [r7, #12]
2400b182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b186:	2b01      	cmp	r3, #1
2400b188:	d101      	bne.n	2400b18e <HAL_I2C_Mem_Write+0x4e>
2400b18a:	2302      	movs	r3, #2
2400b18c:	e0e6      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
2400b18e:	68fb      	ldr	r3, [r7, #12]
2400b190:	2201      	movs	r2, #1
2400b192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b196:	f7f6 ffd9 	bl	2400214c <HAL_GetTick>
2400b19a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b19c:	697b      	ldr	r3, [r7, #20]
2400b19e:	9300      	str	r3, [sp, #0]
2400b1a0:	2319      	movs	r3, #25
2400b1a2:	2201      	movs	r2, #1
2400b1a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b1a8:	68f8      	ldr	r0, [r7, #12]
2400b1aa:	f003 fc49 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400b1ae:	4603      	mov	r3, r0
2400b1b0:	2b00      	cmp	r3, #0
2400b1b2:	d001      	beq.n	2400b1b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2400b1b4:	2301      	movs	r3, #1
2400b1b6:	e0d1      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400b1b8:	68fb      	ldr	r3, [r7, #12]
2400b1ba:	2221      	movs	r2, #33	; 0x21
2400b1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400b1c0:	68fb      	ldr	r3, [r7, #12]
2400b1c2:	2240      	movs	r2, #64	; 0x40
2400b1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b1c8:	68fb      	ldr	r3, [r7, #12]
2400b1ca:	2200      	movs	r2, #0
2400b1cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b1ce:	68fb      	ldr	r3, [r7, #12]
2400b1d0:	6a3a      	ldr	r2, [r7, #32]
2400b1d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b1d4:	68fb      	ldr	r3, [r7, #12]
2400b1d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b1d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b1da:	68fb      	ldr	r3, [r7, #12]
2400b1dc:	2200      	movs	r2, #0
2400b1de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400b1e0:	88f8      	ldrh	r0, [r7, #6]
2400b1e2:	893a      	ldrh	r2, [r7, #8]
2400b1e4:	8979      	ldrh	r1, [r7, #10]
2400b1e6:	697b      	ldr	r3, [r7, #20]
2400b1e8:	9301      	str	r3, [sp, #4]
2400b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b1ec:	9300      	str	r3, [sp, #0]
2400b1ee:	4603      	mov	r3, r0
2400b1f0:	68f8      	ldr	r0, [r7, #12]
2400b1f2:	f002 fb69 	bl	2400d8c8 <I2C_RequestMemoryWrite>
2400b1f6:	4603      	mov	r3, r0
2400b1f8:	2b00      	cmp	r3, #0
2400b1fa:	d005      	beq.n	2400b208 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b1fc:	68fb      	ldr	r3, [r7, #12]
2400b1fe:	2200      	movs	r2, #0
2400b200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b204:	2301      	movs	r3, #1
2400b206:	e0a9      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b208:	68fb      	ldr	r3, [r7, #12]
2400b20a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b20c:	b29b      	uxth	r3, r3
2400b20e:	2bff      	cmp	r3, #255	; 0xff
2400b210:	d90e      	bls.n	2400b230 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b212:	68fb      	ldr	r3, [r7, #12]
2400b214:	22ff      	movs	r2, #255	; 0xff
2400b216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400b218:	68fb      	ldr	r3, [r7, #12]
2400b21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b21c:	b2da      	uxtb	r2, r3
2400b21e:	8979      	ldrh	r1, [r7, #10]
2400b220:	2300      	movs	r3, #0
2400b222:	9300      	str	r3, [sp, #0]
2400b224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b228:	68f8      	ldr	r0, [r7, #12]
2400b22a:	f003 fe2b 	bl	2400ee84 <I2C_TransferConfig>
2400b22e:	e00f      	b.n	2400b250 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b230:	68fb      	ldr	r3, [r7, #12]
2400b232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b234:	b29a      	uxth	r2, r3
2400b236:	68fb      	ldr	r3, [r7, #12]
2400b238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400b23a:	68fb      	ldr	r3, [r7, #12]
2400b23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b23e:	b2da      	uxtb	r2, r3
2400b240:	8979      	ldrh	r1, [r7, #10]
2400b242:	2300      	movs	r3, #0
2400b244:	9300      	str	r3, [sp, #0]
2400b246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b24a:	68f8      	ldr	r0, [r7, #12]
2400b24c:	f003 fe1a 	bl	2400ee84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b250:	697a      	ldr	r2, [r7, #20]
2400b252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b254:	68f8      	ldr	r0, [r7, #12]
2400b256:	f003 fc33 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400b25a:	4603      	mov	r3, r0
2400b25c:	2b00      	cmp	r3, #0
2400b25e:	d001      	beq.n	2400b264 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2400b260:	2301      	movs	r3, #1
2400b262:	e07b      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b264:	68fb      	ldr	r3, [r7, #12]
2400b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b268:	781a      	ldrb	r2, [r3, #0]
2400b26a:	68fb      	ldr	r3, [r7, #12]
2400b26c:	681b      	ldr	r3, [r3, #0]
2400b26e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b270:	68fb      	ldr	r3, [r7, #12]
2400b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b274:	1c5a      	adds	r2, r3, #1
2400b276:	68fb      	ldr	r3, [r7, #12]
2400b278:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400b27a:	68fb      	ldr	r3, [r7, #12]
2400b27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b27e:	b29b      	uxth	r3, r3
2400b280:	3b01      	subs	r3, #1
2400b282:	b29a      	uxth	r2, r3
2400b284:	68fb      	ldr	r3, [r7, #12]
2400b286:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400b288:	68fb      	ldr	r3, [r7, #12]
2400b28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b28c:	3b01      	subs	r3, #1
2400b28e:	b29a      	uxth	r2, r3
2400b290:	68fb      	ldr	r3, [r7, #12]
2400b292:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b294:	68fb      	ldr	r3, [r7, #12]
2400b296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b298:	b29b      	uxth	r3, r3
2400b29a:	2b00      	cmp	r3, #0
2400b29c:	d034      	beq.n	2400b308 <HAL_I2C_Mem_Write+0x1c8>
2400b29e:	68fb      	ldr	r3, [r7, #12]
2400b2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b2a2:	2b00      	cmp	r3, #0
2400b2a4:	d130      	bne.n	2400b308 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b2a6:	697b      	ldr	r3, [r7, #20]
2400b2a8:	9300      	str	r3, [sp, #0]
2400b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b2ac:	2200      	movs	r2, #0
2400b2ae:	2180      	movs	r1, #128	; 0x80
2400b2b0:	68f8      	ldr	r0, [r7, #12]
2400b2b2:	f003 fbc5 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400b2b6:	4603      	mov	r3, r0
2400b2b8:	2b00      	cmp	r3, #0
2400b2ba:	d001      	beq.n	2400b2c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400b2bc:	2301      	movs	r3, #1
2400b2be:	e04d      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b2c0:	68fb      	ldr	r3, [r7, #12]
2400b2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b2c4:	b29b      	uxth	r3, r3
2400b2c6:	2bff      	cmp	r3, #255	; 0xff
2400b2c8:	d90e      	bls.n	2400b2e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b2ca:	68fb      	ldr	r3, [r7, #12]
2400b2cc:	22ff      	movs	r2, #255	; 0xff
2400b2ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b2d0:	68fb      	ldr	r3, [r7, #12]
2400b2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b2d4:	b2da      	uxtb	r2, r3
2400b2d6:	8979      	ldrh	r1, [r7, #10]
2400b2d8:	2300      	movs	r3, #0
2400b2da:	9300      	str	r3, [sp, #0]
2400b2dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b2e0:	68f8      	ldr	r0, [r7, #12]
2400b2e2:	f003 fdcf 	bl	2400ee84 <I2C_TransferConfig>
2400b2e6:	e00f      	b.n	2400b308 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b2e8:	68fb      	ldr	r3, [r7, #12]
2400b2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b2ec:	b29a      	uxth	r2, r3
2400b2ee:	68fb      	ldr	r3, [r7, #12]
2400b2f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b2f2:	68fb      	ldr	r3, [r7, #12]
2400b2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b2f6:	b2da      	uxtb	r2, r3
2400b2f8:	8979      	ldrh	r1, [r7, #10]
2400b2fa:	2300      	movs	r3, #0
2400b2fc:	9300      	str	r3, [sp, #0]
2400b2fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b302:	68f8      	ldr	r0, [r7, #12]
2400b304:	f003 fdbe 	bl	2400ee84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2400b308:	68fb      	ldr	r3, [r7, #12]
2400b30a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b30c:	b29b      	uxth	r3, r3
2400b30e:	2b00      	cmp	r3, #0
2400b310:	d19e      	bne.n	2400b250 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b312:	697a      	ldr	r2, [r7, #20]
2400b314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b316:	68f8      	ldr	r0, [r7, #12]
2400b318:	f003 fc12 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b31c:	4603      	mov	r3, r0
2400b31e:	2b00      	cmp	r3, #0
2400b320:	d001      	beq.n	2400b326 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2400b322:	2301      	movs	r3, #1
2400b324:	e01a      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b326:	68fb      	ldr	r3, [r7, #12]
2400b328:	681b      	ldr	r3, [r3, #0]
2400b32a:	2220      	movs	r2, #32
2400b32c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b32e:	68fb      	ldr	r3, [r7, #12]
2400b330:	681b      	ldr	r3, [r3, #0]
2400b332:	6859      	ldr	r1, [r3, #4]
2400b334:	68fb      	ldr	r3, [r7, #12]
2400b336:	681a      	ldr	r2, [r3, #0]
2400b338:	4b0a      	ldr	r3, [pc, #40]	; (2400b364 <HAL_I2C_Mem_Write+0x224>)
2400b33a:	400b      	ands	r3, r1
2400b33c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b33e:	68fb      	ldr	r3, [r7, #12]
2400b340:	2220      	movs	r2, #32
2400b342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b346:	68fb      	ldr	r3, [r7, #12]
2400b348:	2200      	movs	r2, #0
2400b34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b34e:	68fb      	ldr	r3, [r7, #12]
2400b350:	2200      	movs	r2, #0
2400b352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b356:	2300      	movs	r3, #0
2400b358:	e000      	b.n	2400b35c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400b35a:	2302      	movs	r3, #2
  }
}
2400b35c:	4618      	mov	r0, r3
2400b35e:	3718      	adds	r7, #24
2400b360:	46bd      	mov	sp, r7
2400b362:	bd80      	pop	{r7, pc}
2400b364:	fe00e800 	.word	0xfe00e800

2400b368 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400b368:	b580      	push	{r7, lr}
2400b36a:	b088      	sub	sp, #32
2400b36c:	af02      	add	r7, sp, #8
2400b36e:	60f8      	str	r0, [r7, #12]
2400b370:	4608      	mov	r0, r1
2400b372:	4611      	mov	r1, r2
2400b374:	461a      	mov	r2, r3
2400b376:	4603      	mov	r3, r0
2400b378:	817b      	strh	r3, [r7, #10]
2400b37a:	460b      	mov	r3, r1
2400b37c:	813b      	strh	r3, [r7, #8]
2400b37e:	4613      	mov	r3, r2
2400b380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b382:	68fb      	ldr	r3, [r7, #12]
2400b384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b388:	b2db      	uxtb	r3, r3
2400b38a:	2b20      	cmp	r3, #32
2400b38c:	f040 80fd 	bne.w	2400b58a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2400b390:	6a3b      	ldr	r3, [r7, #32]
2400b392:	2b00      	cmp	r3, #0
2400b394:	d002      	beq.n	2400b39c <HAL_I2C_Mem_Read+0x34>
2400b396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b398:	2b00      	cmp	r3, #0
2400b39a:	d105      	bne.n	2400b3a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b39c:	68fb      	ldr	r3, [r7, #12]
2400b39e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b3a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b3a4:	2301      	movs	r3, #1
2400b3a6:	e0f1      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b3a8:	68fb      	ldr	r3, [r7, #12]
2400b3aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b3ae:	2b01      	cmp	r3, #1
2400b3b0:	d101      	bne.n	2400b3b6 <HAL_I2C_Mem_Read+0x4e>
2400b3b2:	2302      	movs	r3, #2
2400b3b4:	e0ea      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
2400b3b6:	68fb      	ldr	r3, [r7, #12]
2400b3b8:	2201      	movs	r2, #1
2400b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b3be:	f7f6 fec5 	bl	2400214c <HAL_GetTick>
2400b3c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b3c4:	697b      	ldr	r3, [r7, #20]
2400b3c6:	9300      	str	r3, [sp, #0]
2400b3c8:	2319      	movs	r3, #25
2400b3ca:	2201      	movs	r2, #1
2400b3cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b3d0:	68f8      	ldr	r0, [r7, #12]
2400b3d2:	f003 fb35 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400b3d6:	4603      	mov	r3, r0
2400b3d8:	2b00      	cmp	r3, #0
2400b3da:	d001      	beq.n	2400b3e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2400b3dc:	2301      	movs	r3, #1
2400b3de:	e0d5      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400b3e0:	68fb      	ldr	r3, [r7, #12]
2400b3e2:	2222      	movs	r2, #34	; 0x22
2400b3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400b3e8:	68fb      	ldr	r3, [r7, #12]
2400b3ea:	2240      	movs	r2, #64	; 0x40
2400b3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b3f0:	68fb      	ldr	r3, [r7, #12]
2400b3f2:	2200      	movs	r2, #0
2400b3f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b3f6:	68fb      	ldr	r3, [r7, #12]
2400b3f8:	6a3a      	ldr	r2, [r7, #32]
2400b3fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b3fc:	68fb      	ldr	r3, [r7, #12]
2400b3fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b402:	68fb      	ldr	r3, [r7, #12]
2400b404:	2200      	movs	r2, #0
2400b406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400b408:	88f8      	ldrh	r0, [r7, #6]
2400b40a:	893a      	ldrh	r2, [r7, #8]
2400b40c:	8979      	ldrh	r1, [r7, #10]
2400b40e:	697b      	ldr	r3, [r7, #20]
2400b410:	9301      	str	r3, [sp, #4]
2400b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b414:	9300      	str	r3, [sp, #0]
2400b416:	4603      	mov	r3, r0
2400b418:	68f8      	ldr	r0, [r7, #12]
2400b41a:	f002 faa9 	bl	2400d970 <I2C_RequestMemoryRead>
2400b41e:	4603      	mov	r3, r0
2400b420:	2b00      	cmp	r3, #0
2400b422:	d005      	beq.n	2400b430 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b424:	68fb      	ldr	r3, [r7, #12]
2400b426:	2200      	movs	r2, #0
2400b428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b42c:	2301      	movs	r3, #1
2400b42e:	e0ad      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b430:	68fb      	ldr	r3, [r7, #12]
2400b432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b434:	b29b      	uxth	r3, r3
2400b436:	2bff      	cmp	r3, #255	; 0xff
2400b438:	d90e      	bls.n	2400b458 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b43a:	68fb      	ldr	r3, [r7, #12]
2400b43c:	22ff      	movs	r2, #255	; 0xff
2400b43e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b440:	68fb      	ldr	r3, [r7, #12]
2400b442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b444:	b2da      	uxtb	r2, r3
2400b446:	8979      	ldrh	r1, [r7, #10]
2400b448:	4b52      	ldr	r3, [pc, #328]	; (2400b594 <HAL_I2C_Mem_Read+0x22c>)
2400b44a:	9300      	str	r3, [sp, #0]
2400b44c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b450:	68f8      	ldr	r0, [r7, #12]
2400b452:	f003 fd17 	bl	2400ee84 <I2C_TransferConfig>
2400b456:	e00f      	b.n	2400b478 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b458:	68fb      	ldr	r3, [r7, #12]
2400b45a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b45c:	b29a      	uxth	r2, r3
2400b45e:	68fb      	ldr	r3, [r7, #12]
2400b460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b462:	68fb      	ldr	r3, [r7, #12]
2400b464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b466:	b2da      	uxtb	r2, r3
2400b468:	8979      	ldrh	r1, [r7, #10]
2400b46a:	4b4a      	ldr	r3, [pc, #296]	; (2400b594 <HAL_I2C_Mem_Read+0x22c>)
2400b46c:	9300      	str	r3, [sp, #0]
2400b46e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b472:	68f8      	ldr	r0, [r7, #12]
2400b474:	f003 fd06 	bl	2400ee84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2400b478:	697b      	ldr	r3, [r7, #20]
2400b47a:	9300      	str	r3, [sp, #0]
2400b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b47e:	2200      	movs	r2, #0
2400b480:	2104      	movs	r1, #4
2400b482:	68f8      	ldr	r0, [r7, #12]
2400b484:	f003 fadc 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400b488:	4603      	mov	r3, r0
2400b48a:	2b00      	cmp	r3, #0
2400b48c:	d001      	beq.n	2400b492 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400b48e:	2301      	movs	r3, #1
2400b490:	e07c      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b492:	68fb      	ldr	r3, [r7, #12]
2400b494:	681b      	ldr	r3, [r3, #0]
2400b496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400b498:	68fb      	ldr	r3, [r7, #12]
2400b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b49c:	b2d2      	uxtb	r2, r2
2400b49e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b4a0:	68fb      	ldr	r3, [r7, #12]
2400b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b4a4:	1c5a      	adds	r2, r3, #1
2400b4a6:	68fb      	ldr	r3, [r7, #12]
2400b4a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400b4aa:	68fb      	ldr	r3, [r7, #12]
2400b4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b4ae:	3b01      	subs	r3, #1
2400b4b0:	b29a      	uxth	r2, r3
2400b4b2:	68fb      	ldr	r3, [r7, #12]
2400b4b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400b4b6:	68fb      	ldr	r3, [r7, #12]
2400b4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b4ba:	b29b      	uxth	r3, r3
2400b4bc:	3b01      	subs	r3, #1
2400b4be:	b29a      	uxth	r2, r3
2400b4c0:	68fb      	ldr	r3, [r7, #12]
2400b4c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b4c4:	68fb      	ldr	r3, [r7, #12]
2400b4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b4c8:	b29b      	uxth	r3, r3
2400b4ca:	2b00      	cmp	r3, #0
2400b4cc:	d034      	beq.n	2400b538 <HAL_I2C_Mem_Read+0x1d0>
2400b4ce:	68fb      	ldr	r3, [r7, #12]
2400b4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b4d2:	2b00      	cmp	r3, #0
2400b4d4:	d130      	bne.n	2400b538 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b4d6:	697b      	ldr	r3, [r7, #20]
2400b4d8:	9300      	str	r3, [sp, #0]
2400b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b4dc:	2200      	movs	r2, #0
2400b4de:	2180      	movs	r1, #128	; 0x80
2400b4e0:	68f8      	ldr	r0, [r7, #12]
2400b4e2:	f003 faad 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400b4e6:	4603      	mov	r3, r0
2400b4e8:	2b00      	cmp	r3, #0
2400b4ea:	d001      	beq.n	2400b4f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2400b4ec:	2301      	movs	r3, #1
2400b4ee:	e04d      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b4f0:	68fb      	ldr	r3, [r7, #12]
2400b4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b4f4:	b29b      	uxth	r3, r3
2400b4f6:	2bff      	cmp	r3, #255	; 0xff
2400b4f8:	d90e      	bls.n	2400b518 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b4fa:	68fb      	ldr	r3, [r7, #12]
2400b4fc:	22ff      	movs	r2, #255	; 0xff
2400b4fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2400b500:	68fb      	ldr	r3, [r7, #12]
2400b502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b504:	b2da      	uxtb	r2, r3
2400b506:	8979      	ldrh	r1, [r7, #10]
2400b508:	2300      	movs	r3, #0
2400b50a:	9300      	str	r3, [sp, #0]
2400b50c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b510:	68f8      	ldr	r0, [r7, #12]
2400b512:	f003 fcb7 	bl	2400ee84 <I2C_TransferConfig>
2400b516:	e00f      	b.n	2400b538 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b518:	68fb      	ldr	r3, [r7, #12]
2400b51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b51c:	b29a      	uxth	r2, r3
2400b51e:	68fb      	ldr	r3, [r7, #12]
2400b520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b522:	68fb      	ldr	r3, [r7, #12]
2400b524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b526:	b2da      	uxtb	r2, r3
2400b528:	8979      	ldrh	r1, [r7, #10]
2400b52a:	2300      	movs	r3, #0
2400b52c:	9300      	str	r3, [sp, #0]
2400b52e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b532:	68f8      	ldr	r0, [r7, #12]
2400b534:	f003 fca6 	bl	2400ee84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2400b538:	68fb      	ldr	r3, [r7, #12]
2400b53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b53c:	b29b      	uxth	r3, r3
2400b53e:	2b00      	cmp	r3, #0
2400b540:	d19a      	bne.n	2400b478 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b542:	697a      	ldr	r2, [r7, #20]
2400b544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b546:	68f8      	ldr	r0, [r7, #12]
2400b548:	f003 fafa 	bl	2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b54c:	4603      	mov	r3, r0
2400b54e:	2b00      	cmp	r3, #0
2400b550:	d001      	beq.n	2400b556 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2400b552:	2301      	movs	r3, #1
2400b554:	e01a      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b556:	68fb      	ldr	r3, [r7, #12]
2400b558:	681b      	ldr	r3, [r3, #0]
2400b55a:	2220      	movs	r2, #32
2400b55c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b55e:	68fb      	ldr	r3, [r7, #12]
2400b560:	681b      	ldr	r3, [r3, #0]
2400b562:	6859      	ldr	r1, [r3, #4]
2400b564:	68fb      	ldr	r3, [r7, #12]
2400b566:	681a      	ldr	r2, [r3, #0]
2400b568:	4b0b      	ldr	r3, [pc, #44]	; (2400b598 <HAL_I2C_Mem_Read+0x230>)
2400b56a:	400b      	ands	r3, r1
2400b56c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b56e:	68fb      	ldr	r3, [r7, #12]
2400b570:	2220      	movs	r2, #32
2400b572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b576:	68fb      	ldr	r3, [r7, #12]
2400b578:	2200      	movs	r2, #0
2400b57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b57e:	68fb      	ldr	r3, [r7, #12]
2400b580:	2200      	movs	r2, #0
2400b582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b586:	2300      	movs	r3, #0
2400b588:	e000      	b.n	2400b58c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400b58a:	2302      	movs	r3, #2
  }
}
2400b58c:	4618      	mov	r0, r3
2400b58e:	3718      	adds	r7, #24
2400b590:	46bd      	mov	sp, r7
2400b592:	bd80      	pop	{r7, pc}
2400b594:	80002400 	.word	0x80002400
2400b598:	fe00e800 	.word	0xfe00e800

2400b59c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b59c:	b580      	push	{r7, lr}
2400b59e:	b088      	sub	sp, #32
2400b5a0:	af02      	add	r7, sp, #8
2400b5a2:	60f8      	str	r0, [r7, #12]
2400b5a4:	4608      	mov	r0, r1
2400b5a6:	4611      	mov	r1, r2
2400b5a8:	461a      	mov	r2, r3
2400b5aa:	4603      	mov	r3, r0
2400b5ac:	817b      	strh	r3, [r7, #10]
2400b5ae:	460b      	mov	r3, r1
2400b5b0:	813b      	strh	r3, [r7, #8]
2400b5b2:	4613      	mov	r3, r2
2400b5b4:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b5b6:	68fb      	ldr	r3, [r7, #12]
2400b5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b5bc:	b2db      	uxtb	r3, r3
2400b5be:	2b20      	cmp	r3, #32
2400b5c0:	d176      	bne.n	2400b6b0 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400b5c2:	6a3b      	ldr	r3, [r7, #32]
2400b5c4:	2b00      	cmp	r3, #0
2400b5c6:	d002      	beq.n	2400b5ce <HAL_I2C_Mem_Write_IT+0x32>
2400b5c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b5ca:	2b00      	cmp	r3, #0
2400b5cc:	d105      	bne.n	2400b5da <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b5ce:	68fb      	ldr	r3, [r7, #12]
2400b5d0:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b5d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b5d6:	2301      	movs	r3, #1
2400b5d8:	e06b      	b.n	2400b6b2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b5da:	68fb      	ldr	r3, [r7, #12]
2400b5dc:	681b      	ldr	r3, [r3, #0]
2400b5de:	699b      	ldr	r3, [r3, #24]
2400b5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b5e8:	d101      	bne.n	2400b5ee <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2400b5ea:	2302      	movs	r3, #2
2400b5ec:	e061      	b.n	2400b6b2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b5ee:	68fb      	ldr	r3, [r7, #12]
2400b5f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b5f4:	2b01      	cmp	r3, #1
2400b5f6:	d101      	bne.n	2400b5fc <HAL_I2C_Mem_Write_IT+0x60>
2400b5f8:	2302      	movs	r3, #2
2400b5fa:	e05a      	b.n	2400b6b2 <HAL_I2C_Mem_Write_IT+0x116>
2400b5fc:	68fb      	ldr	r3, [r7, #12]
2400b5fe:	2201      	movs	r2, #1
2400b600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b604:	f7f6 fda2 	bl	2400214c <HAL_GetTick>
2400b608:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b60a:	68fb      	ldr	r3, [r7, #12]
2400b60c:	2221      	movs	r2, #33	; 0x21
2400b60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b612:	68fb      	ldr	r3, [r7, #12]
2400b614:	2240      	movs	r2, #64	; 0x40
2400b616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b61a:	68fb      	ldr	r3, [r7, #12]
2400b61c:	2200      	movs	r2, #0
2400b61e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b620:	68fb      	ldr	r3, [r7, #12]
2400b622:	6a3a      	ldr	r2, [r7, #32]
2400b624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b626:	68fb      	ldr	r3, [r7, #12]
2400b628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b62a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b62c:	68fb      	ldr	r3, [r7, #12]
2400b62e:	4a23      	ldr	r2, [pc, #140]	; (2400b6bc <HAL_I2C_Mem_Write_IT+0x120>)
2400b630:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b632:	68fb      	ldr	r3, [r7, #12]
2400b634:	4a22      	ldr	r2, [pc, #136]	; (2400b6c0 <HAL_I2C_Mem_Write_IT+0x124>)
2400b636:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b638:	68fb      	ldr	r3, [r7, #12]
2400b63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b63c:	b29b      	uxth	r3, r3
2400b63e:	2bff      	cmp	r3, #255	; 0xff
2400b640:	d906      	bls.n	2400b650 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b642:	68fb      	ldr	r3, [r7, #12]
2400b644:	22ff      	movs	r2, #255	; 0xff
2400b646:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b64c:	617b      	str	r3, [r7, #20]
2400b64e:	e007      	b.n	2400b660 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b650:	68fb      	ldr	r3, [r7, #12]
2400b652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b654:	b29a      	uxth	r2, r3
2400b656:	68fb      	ldr	r3, [r7, #12]
2400b658:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b65a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b65e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400b660:	88f8      	ldrh	r0, [r7, #6]
2400b662:	893a      	ldrh	r2, [r7, #8]
2400b664:	8979      	ldrh	r1, [r7, #10]
2400b666:	693b      	ldr	r3, [r7, #16]
2400b668:	9301      	str	r3, [sp, #4]
2400b66a:	2319      	movs	r3, #25
2400b66c:	9300      	str	r3, [sp, #0]
2400b66e:	4603      	mov	r3, r0
2400b670:	68f8      	ldr	r0, [r7, #12]
2400b672:	f002 f929 	bl	2400d8c8 <I2C_RequestMemoryWrite>
2400b676:	4603      	mov	r3, r0
2400b678:	2b00      	cmp	r3, #0
2400b67a:	d005      	beq.n	2400b688 <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b67c:	68fb      	ldr	r3, [r7, #12]
2400b67e:	2200      	movs	r2, #0
2400b680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b684:	2301      	movs	r3, #1
2400b686:	e014      	b.n	2400b6b2 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400b688:	68fb      	ldr	r3, [r7, #12]
2400b68a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b68c:	b2da      	uxtb	r2, r3
2400b68e:	8979      	ldrh	r1, [r7, #10]
2400b690:	2300      	movs	r3, #0
2400b692:	9300      	str	r3, [sp, #0]
2400b694:	697b      	ldr	r3, [r7, #20]
2400b696:	68f8      	ldr	r0, [r7, #12]
2400b698:	f003 fbf4 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b69c:	68fb      	ldr	r3, [r7, #12]
2400b69e:	2200      	movs	r2, #0
2400b6a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b6a4:	2101      	movs	r1, #1
2400b6a6:	68f8      	ldr	r0, [r7, #12]
2400b6a8:	f003 fc1e 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400b6ac:	2300      	movs	r3, #0
2400b6ae:	e000      	b.n	2400b6b2 <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400b6b0:	2302      	movs	r3, #2
  }
}
2400b6b2:	4618      	mov	r0, r3
2400b6b4:	3718      	adds	r7, #24
2400b6b6:	46bd      	mov	sp, r7
2400b6b8:	bd80      	pop	{r7, pc}
2400b6ba:	bf00      	nop
2400b6bc:	ffff0000 	.word	0xffff0000
2400b6c0:	2400cec7 	.word	0x2400cec7

2400b6c4 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b6c4:	b580      	push	{r7, lr}
2400b6c6:	b088      	sub	sp, #32
2400b6c8:	af02      	add	r7, sp, #8
2400b6ca:	60f8      	str	r0, [r7, #12]
2400b6cc:	4608      	mov	r0, r1
2400b6ce:	4611      	mov	r1, r2
2400b6d0:	461a      	mov	r2, r3
2400b6d2:	4603      	mov	r3, r0
2400b6d4:	817b      	strh	r3, [r7, #10]
2400b6d6:	460b      	mov	r3, r1
2400b6d8:	813b      	strh	r3, [r7, #8]
2400b6da:	4613      	mov	r3, r2
2400b6dc:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b6de:	68fb      	ldr	r3, [r7, #12]
2400b6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b6e4:	b2db      	uxtb	r3, r3
2400b6e6:	2b20      	cmp	r3, #32
2400b6e8:	d176      	bne.n	2400b7d8 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400b6ea:	6a3b      	ldr	r3, [r7, #32]
2400b6ec:	2b00      	cmp	r3, #0
2400b6ee:	d002      	beq.n	2400b6f6 <HAL_I2C_Mem_Read_IT+0x32>
2400b6f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b6f2:	2b00      	cmp	r3, #0
2400b6f4:	d105      	bne.n	2400b702 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b6f6:	68fb      	ldr	r3, [r7, #12]
2400b6f8:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b6fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b6fe:	2301      	movs	r3, #1
2400b700:	e06b      	b.n	2400b7da <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b702:	68fb      	ldr	r3, [r7, #12]
2400b704:	681b      	ldr	r3, [r3, #0]
2400b706:	699b      	ldr	r3, [r3, #24]
2400b708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b710:	d101      	bne.n	2400b716 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2400b712:	2302      	movs	r3, #2
2400b714:	e061      	b.n	2400b7da <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b716:	68fb      	ldr	r3, [r7, #12]
2400b718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b71c:	2b01      	cmp	r3, #1
2400b71e:	d101      	bne.n	2400b724 <HAL_I2C_Mem_Read_IT+0x60>
2400b720:	2302      	movs	r3, #2
2400b722:	e05a      	b.n	2400b7da <HAL_I2C_Mem_Read_IT+0x116>
2400b724:	68fb      	ldr	r3, [r7, #12]
2400b726:	2201      	movs	r2, #1
2400b728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b72c:	f7f6 fd0e 	bl	2400214c <HAL_GetTick>
2400b730:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b732:	68fb      	ldr	r3, [r7, #12]
2400b734:	2222      	movs	r2, #34	; 0x22
2400b736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b73a:	68fb      	ldr	r3, [r7, #12]
2400b73c:	2240      	movs	r2, #64	; 0x40
2400b73e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b742:	68fb      	ldr	r3, [r7, #12]
2400b744:	2200      	movs	r2, #0
2400b746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b748:	68fb      	ldr	r3, [r7, #12]
2400b74a:	6a3a      	ldr	r2, [r7, #32]
2400b74c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b74e:	68fb      	ldr	r3, [r7, #12]
2400b750:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b752:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b754:	68fb      	ldr	r3, [r7, #12]
2400b756:	4a23      	ldr	r2, [pc, #140]	; (2400b7e4 <HAL_I2C_Mem_Read_IT+0x120>)
2400b758:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b75a:	68fb      	ldr	r3, [r7, #12]
2400b75c:	4a22      	ldr	r2, [pc, #136]	; (2400b7e8 <HAL_I2C_Mem_Read_IT+0x124>)
2400b75e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b760:	68fb      	ldr	r3, [r7, #12]
2400b762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b764:	b29b      	uxth	r3, r3
2400b766:	2bff      	cmp	r3, #255	; 0xff
2400b768:	d906      	bls.n	2400b778 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b76a:	68fb      	ldr	r3, [r7, #12]
2400b76c:	22ff      	movs	r2, #255	; 0xff
2400b76e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b774:	617b      	str	r3, [r7, #20]
2400b776:	e007      	b.n	2400b788 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b778:	68fb      	ldr	r3, [r7, #12]
2400b77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b77c:	b29a      	uxth	r2, r3
2400b77e:	68fb      	ldr	r3, [r7, #12]
2400b780:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b786:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400b788:	88f8      	ldrh	r0, [r7, #6]
2400b78a:	893a      	ldrh	r2, [r7, #8]
2400b78c:	8979      	ldrh	r1, [r7, #10]
2400b78e:	693b      	ldr	r3, [r7, #16]
2400b790:	9301      	str	r3, [sp, #4]
2400b792:	2319      	movs	r3, #25
2400b794:	9300      	str	r3, [sp, #0]
2400b796:	4603      	mov	r3, r0
2400b798:	68f8      	ldr	r0, [r7, #12]
2400b79a:	f002 f8e9 	bl	2400d970 <I2C_RequestMemoryRead>
2400b79e:	4603      	mov	r3, r0
2400b7a0:	2b00      	cmp	r3, #0
2400b7a2:	d005      	beq.n	2400b7b0 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b7a4:	68fb      	ldr	r3, [r7, #12]
2400b7a6:	2200      	movs	r2, #0
2400b7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b7ac:	2301      	movs	r3, #1
2400b7ae:	e014      	b.n	2400b7da <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400b7b0:	68fb      	ldr	r3, [r7, #12]
2400b7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b7b4:	b2da      	uxtb	r2, r3
2400b7b6:	8979      	ldrh	r1, [r7, #10]
2400b7b8:	4b0c      	ldr	r3, [pc, #48]	; (2400b7ec <HAL_I2C_Mem_Read_IT+0x128>)
2400b7ba:	9300      	str	r3, [sp, #0]
2400b7bc:	697b      	ldr	r3, [r7, #20]
2400b7be:	68f8      	ldr	r0, [r7, #12]
2400b7c0:	f003 fb60 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b7c4:	68fb      	ldr	r3, [r7, #12]
2400b7c6:	2200      	movs	r2, #0
2400b7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400b7cc:	2102      	movs	r1, #2
2400b7ce:	68f8      	ldr	r0, [r7, #12]
2400b7d0:	f003 fb8a 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400b7d4:	2300      	movs	r3, #0
2400b7d6:	e000      	b.n	2400b7da <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400b7d8:	2302      	movs	r3, #2
  }
}
2400b7da:	4618      	mov	r0, r3
2400b7dc:	3718      	adds	r7, #24
2400b7de:	46bd      	mov	sp, r7
2400b7e0:	bd80      	pop	{r7, pc}
2400b7e2:	bf00      	nop
2400b7e4:	ffff0000 	.word	0xffff0000
2400b7e8:	2400cec7 	.word	0x2400cec7
2400b7ec:	80002400 	.word	0x80002400

2400b7f0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b7f0:	b580      	push	{r7, lr}
2400b7f2:	b08a      	sub	sp, #40	; 0x28
2400b7f4:	af02      	add	r7, sp, #8
2400b7f6:	60f8      	str	r0, [r7, #12]
2400b7f8:	4608      	mov	r0, r1
2400b7fa:	4611      	mov	r1, r2
2400b7fc:	461a      	mov	r2, r3
2400b7fe:	4603      	mov	r3, r0
2400b800:	817b      	strh	r3, [r7, #10]
2400b802:	460b      	mov	r3, r1
2400b804:	813b      	strh	r3, [r7, #8]
2400b806:	4613      	mov	r3, r2
2400b808:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b80a:	68fb      	ldr	r3, [r7, #12]
2400b80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b810:	b2db      	uxtb	r3, r3
2400b812:	2b20      	cmp	r3, #32
2400b814:	f040 80d5 	bne.w	2400b9c2 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b81a:	2b00      	cmp	r3, #0
2400b81c:	d002      	beq.n	2400b824 <HAL_I2C_Mem_Write_DMA+0x34>
2400b81e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400b820:	2b00      	cmp	r3, #0
2400b822:	d105      	bne.n	2400b830 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b824:	68fb      	ldr	r3, [r7, #12]
2400b826:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b82a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b82c:	2301      	movs	r3, #1
2400b82e:	e0c9      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b830:	68fb      	ldr	r3, [r7, #12]
2400b832:	681b      	ldr	r3, [r3, #0]
2400b834:	699b      	ldr	r3, [r3, #24]
2400b836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b83a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b83e:	d101      	bne.n	2400b844 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2400b840:	2302      	movs	r3, #2
2400b842:	e0bf      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b844:	68fb      	ldr	r3, [r7, #12]
2400b846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b84a:	2b01      	cmp	r3, #1
2400b84c:	d101      	bne.n	2400b852 <HAL_I2C_Mem_Write_DMA+0x62>
2400b84e:	2302      	movs	r3, #2
2400b850:	e0b8      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
2400b852:	68fb      	ldr	r3, [r7, #12]
2400b854:	2201      	movs	r2, #1
2400b856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b85a:	f7f6 fc77 	bl	2400214c <HAL_GetTick>
2400b85e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b860:	68fb      	ldr	r3, [r7, #12]
2400b862:	2221      	movs	r2, #33	; 0x21
2400b864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b868:	68fb      	ldr	r3, [r7, #12]
2400b86a:	2240      	movs	r2, #64	; 0x40
2400b86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b870:	68fb      	ldr	r3, [r7, #12]
2400b872:	2200      	movs	r2, #0
2400b874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b876:	68fb      	ldr	r3, [r7, #12]
2400b878:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400b87a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b87c:	68fb      	ldr	r3, [r7, #12]
2400b87e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400b880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b882:	68fb      	ldr	r3, [r7, #12]
2400b884:	4a51      	ldr	r2, [pc, #324]	; (2400b9cc <HAL_I2C_Mem_Write_DMA+0x1dc>)
2400b886:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400b888:	68fb      	ldr	r3, [r7, #12]
2400b88a:	4a51      	ldr	r2, [pc, #324]	; (2400b9d0 <HAL_I2C_Mem_Write_DMA+0x1e0>)
2400b88c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b88e:	68fb      	ldr	r3, [r7, #12]
2400b890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b892:	b29b      	uxth	r3, r3
2400b894:	2bff      	cmp	r3, #255	; 0xff
2400b896:	d906      	bls.n	2400b8a6 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b898:	68fb      	ldr	r3, [r7, #12]
2400b89a:	22ff      	movs	r2, #255	; 0xff
2400b89c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b89e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b8a2:	61fb      	str	r3, [r7, #28]
2400b8a4:	e007      	b.n	2400b8b6 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b8a6:	68fb      	ldr	r3, [r7, #12]
2400b8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b8aa:	b29a      	uxth	r2, r3
2400b8ac:	68fb      	ldr	r3, [r7, #12]
2400b8ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b8b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b8b4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400b8b6:	88f8      	ldrh	r0, [r7, #6]
2400b8b8:	893a      	ldrh	r2, [r7, #8]
2400b8ba:	8979      	ldrh	r1, [r7, #10]
2400b8bc:	69bb      	ldr	r3, [r7, #24]
2400b8be:	9301      	str	r3, [sp, #4]
2400b8c0:	2319      	movs	r3, #25
2400b8c2:	9300      	str	r3, [sp, #0]
2400b8c4:	4603      	mov	r3, r0
2400b8c6:	68f8      	ldr	r0, [r7, #12]
2400b8c8:	f001 fffe 	bl	2400d8c8 <I2C_RequestMemoryWrite>
2400b8cc:	4603      	mov	r3, r0
2400b8ce:	2b00      	cmp	r3, #0
2400b8d0:	d005      	beq.n	2400b8de <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b8d2:	68fb      	ldr	r3, [r7, #12]
2400b8d4:	2200      	movs	r2, #0
2400b8d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b8da:	2301      	movs	r3, #1
2400b8dc:	e072      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
2400b8de:	68fb      	ldr	r3, [r7, #12]
2400b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b8e2:	2b00      	cmp	r3, #0
2400b8e4:	d020      	beq.n	2400b928 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400b8e6:	68fb      	ldr	r3, [r7, #12]
2400b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b8ea:	4a3a      	ldr	r2, [pc, #232]	; (2400b9d4 <HAL_I2C_Mem_Write_DMA+0x1e4>)
2400b8ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400b8ee:	68fb      	ldr	r3, [r7, #12]
2400b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b8f2:	4a39      	ldr	r2, [pc, #228]	; (2400b9d8 <HAL_I2C_Mem_Write_DMA+0x1e8>)
2400b8f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400b8f6:	68fb      	ldr	r3, [r7, #12]
2400b8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b8fa:	2200      	movs	r2, #0
2400b8fc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400b8fe:	68fb      	ldr	r3, [r7, #12]
2400b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b902:	2200      	movs	r2, #0
2400b904:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b906:	68fb      	ldr	r3, [r7, #12]
2400b908:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400b90a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b90c:	68fb      	ldr	r3, [r7, #12]
2400b90e:	681b      	ldr	r3, [r3, #0]
2400b910:	3328      	adds	r3, #40	; 0x28
2400b912:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400b914:	68fb      	ldr	r3, [r7, #12]
2400b916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b918:	f7f8 f9b2 	bl	24003c80 <HAL_DMA_Start_IT>
2400b91c:	4603      	mov	r3, r0
2400b91e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b920:	7dfb      	ldrb	r3, [r7, #23]
2400b922:	2b00      	cmp	r3, #0
2400b924:	d139      	bne.n	2400b99a <HAL_I2C_Mem_Write_DMA+0x1aa>
2400b926:	e013      	b.n	2400b950 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400b928:	68fb      	ldr	r3, [r7, #12]
2400b92a:	2220      	movs	r2, #32
2400b92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b930:	68fb      	ldr	r3, [r7, #12]
2400b932:	2200      	movs	r2, #0
2400b934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b938:	68fb      	ldr	r3, [r7, #12]
2400b93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b93c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b940:	68fb      	ldr	r3, [r7, #12]
2400b942:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b944:	68fb      	ldr	r3, [r7, #12]
2400b946:	2200      	movs	r2, #0
2400b948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b94c:	2301      	movs	r3, #1
2400b94e:	e039      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400b950:	68fb      	ldr	r3, [r7, #12]
2400b952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b954:	b2da      	uxtb	r2, r3
2400b956:	8979      	ldrh	r1, [r7, #10]
2400b958:	2300      	movs	r3, #0
2400b95a:	9300      	str	r3, [sp, #0]
2400b95c:	69fb      	ldr	r3, [r7, #28]
2400b95e:	68f8      	ldr	r0, [r7, #12]
2400b960:	f003 fa90 	bl	2400ee84 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400b964:	68fb      	ldr	r3, [r7, #12]
2400b966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b968:	b29a      	uxth	r2, r3
2400b96a:	68fb      	ldr	r3, [r7, #12]
2400b96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b96e:	1ad3      	subs	r3, r2, r3
2400b970:	b29a      	uxth	r2, r3
2400b972:	68fb      	ldr	r3, [r7, #12]
2400b974:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b976:	68fb      	ldr	r3, [r7, #12]
2400b978:	2200      	movs	r2, #0
2400b97a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400b97e:	2110      	movs	r1, #16
2400b980:	68f8      	ldr	r0, [r7, #12]
2400b982:	f003 fab1 	bl	2400eee8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400b986:	68fb      	ldr	r3, [r7, #12]
2400b988:	681b      	ldr	r3, [r3, #0]
2400b98a:	681a      	ldr	r2, [r3, #0]
2400b98c:	68fb      	ldr	r3, [r7, #12]
2400b98e:	681b      	ldr	r3, [r3, #0]
2400b990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400b994:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b996:	2300      	movs	r3, #0
2400b998:	e014      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400b99a:	68fb      	ldr	r3, [r7, #12]
2400b99c:	2220      	movs	r2, #32
2400b99e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b9a2:	68fb      	ldr	r3, [r7, #12]
2400b9a4:	2200      	movs	r2, #0
2400b9a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b9aa:	68fb      	ldr	r3, [r7, #12]
2400b9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b9ae:	f043 0210 	orr.w	r2, r3, #16
2400b9b2:	68fb      	ldr	r3, [r7, #12]
2400b9b4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b9b6:	68fb      	ldr	r3, [r7, #12]
2400b9b8:	2200      	movs	r2, #0
2400b9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b9be:	2301      	movs	r3, #1
2400b9c0:	e000      	b.n	2400b9c4 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400b9c2:	2302      	movs	r3, #2
  }
}
2400b9c4:	4618      	mov	r0, r3
2400b9c6:	3720      	adds	r7, #32
2400b9c8:	46bd      	mov	sp, r7
2400b9ca:	bd80      	pop	{r7, pc}
2400b9cc:	ffff0000 	.word	0xffff0000
2400b9d0:	2400d31d 	.word	0x2400d31d
2400b9d4:	2400e4bf 	.word	0x2400e4bf
2400b9d8:	2400e791 	.word	0x2400e791

2400b9dc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b9dc:	b580      	push	{r7, lr}
2400b9de:	b08a      	sub	sp, #40	; 0x28
2400b9e0:	af02      	add	r7, sp, #8
2400b9e2:	60f8      	str	r0, [r7, #12]
2400b9e4:	4608      	mov	r0, r1
2400b9e6:	4611      	mov	r1, r2
2400b9e8:	461a      	mov	r2, r3
2400b9ea:	4603      	mov	r3, r0
2400b9ec:	817b      	strh	r3, [r7, #10]
2400b9ee:	460b      	mov	r3, r1
2400b9f0:	813b      	strh	r3, [r7, #8]
2400b9f2:	4613      	mov	r3, r2
2400b9f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b9f6:	68fb      	ldr	r3, [r7, #12]
2400b9f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b9fc:	b2db      	uxtb	r3, r3
2400b9fe:	2b20      	cmp	r3, #32
2400ba00:	f040 80d5 	bne.w	2400bbae <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400ba06:	2b00      	cmp	r3, #0
2400ba08:	d002      	beq.n	2400ba10 <HAL_I2C_Mem_Read_DMA+0x34>
2400ba0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400ba0c:	2b00      	cmp	r3, #0
2400ba0e:	d105      	bne.n	2400ba1c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400ba10:	68fb      	ldr	r3, [r7, #12]
2400ba12:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ba16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400ba18:	2301      	movs	r3, #1
2400ba1a:	e0c9      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400ba1c:	68fb      	ldr	r3, [r7, #12]
2400ba1e:	681b      	ldr	r3, [r3, #0]
2400ba20:	699b      	ldr	r3, [r3, #24]
2400ba22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ba26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ba2a:	d101      	bne.n	2400ba30 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2400ba2c:	2302      	movs	r3, #2
2400ba2e:	e0bf      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ba30:	68fb      	ldr	r3, [r7, #12]
2400ba32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ba36:	2b01      	cmp	r3, #1
2400ba38:	d101      	bne.n	2400ba3e <HAL_I2C_Mem_Read_DMA+0x62>
2400ba3a:	2302      	movs	r3, #2
2400ba3c:	e0b8      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
2400ba3e:	68fb      	ldr	r3, [r7, #12]
2400ba40:	2201      	movs	r2, #1
2400ba42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400ba46:	f7f6 fb81 	bl	2400214c <HAL_GetTick>
2400ba4a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400ba4c:	68fb      	ldr	r3, [r7, #12]
2400ba4e:	2222      	movs	r2, #34	; 0x22
2400ba50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400ba54:	68fb      	ldr	r3, [r7, #12]
2400ba56:	2240      	movs	r2, #64	; 0x40
2400ba58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ba5c:	68fb      	ldr	r3, [r7, #12]
2400ba5e:	2200      	movs	r2, #0
2400ba60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ba62:	68fb      	ldr	r3, [r7, #12]
2400ba64:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400ba66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ba68:	68fb      	ldr	r3, [r7, #12]
2400ba6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400ba6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ba6e:	68fb      	ldr	r3, [r7, #12]
2400ba70:	4a51      	ldr	r2, [pc, #324]	; (2400bbb8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
2400ba72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400ba74:	68fb      	ldr	r3, [r7, #12]
2400ba76:	4a51      	ldr	r2, [pc, #324]	; (2400bbbc <HAL_I2C_Mem_Read_DMA+0x1e0>)
2400ba78:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ba7a:	68fb      	ldr	r3, [r7, #12]
2400ba7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ba7e:	b29b      	uxth	r3, r3
2400ba80:	2bff      	cmp	r3, #255	; 0xff
2400ba82:	d906      	bls.n	2400ba92 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ba84:	68fb      	ldr	r3, [r7, #12]
2400ba86:	22ff      	movs	r2, #255	; 0xff
2400ba88:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400ba8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400ba8e:	61fb      	str	r3, [r7, #28]
2400ba90:	e007      	b.n	2400baa2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ba92:	68fb      	ldr	r3, [r7, #12]
2400ba94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ba96:	b29a      	uxth	r2, r3
2400ba98:	68fb      	ldr	r3, [r7, #12]
2400ba9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400ba9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400baa0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400baa2:	88f8      	ldrh	r0, [r7, #6]
2400baa4:	893a      	ldrh	r2, [r7, #8]
2400baa6:	8979      	ldrh	r1, [r7, #10]
2400baa8:	69bb      	ldr	r3, [r7, #24]
2400baaa:	9301      	str	r3, [sp, #4]
2400baac:	2319      	movs	r3, #25
2400baae:	9300      	str	r3, [sp, #0]
2400bab0:	4603      	mov	r3, r0
2400bab2:	68f8      	ldr	r0, [r7, #12]
2400bab4:	f001 ff5c 	bl	2400d970 <I2C_RequestMemoryRead>
2400bab8:	4603      	mov	r3, r0
2400baba:	2b00      	cmp	r3, #0
2400babc:	d005      	beq.n	2400baca <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400babe:	68fb      	ldr	r3, [r7, #12]
2400bac0:	2200      	movs	r2, #0
2400bac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bac6:	2301      	movs	r3, #1
2400bac8:	e072      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
2400baca:	68fb      	ldr	r3, [r7, #12]
2400bacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bace:	2b00      	cmp	r3, #0
2400bad0:	d020      	beq.n	2400bb14 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400bad2:	68fb      	ldr	r3, [r7, #12]
2400bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bad6:	4a3a      	ldr	r2, [pc, #232]	; (2400bbc0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
2400bad8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400bada:	68fb      	ldr	r3, [r7, #12]
2400badc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bade:	4a39      	ldr	r2, [pc, #228]	; (2400bbc4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
2400bae0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400bae2:	68fb      	ldr	r3, [r7, #12]
2400bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bae6:	2200      	movs	r2, #0
2400bae8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400baea:	68fb      	ldr	r3, [r7, #12]
2400baec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400baee:	2200      	movs	r2, #0
2400baf0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400baf2:	68fb      	ldr	r3, [r7, #12]
2400baf4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400baf6:	68fb      	ldr	r3, [r7, #12]
2400baf8:	681b      	ldr	r3, [r3, #0]
2400bafa:	3324      	adds	r3, #36	; 0x24
2400bafc:	4619      	mov	r1, r3
2400bafe:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
2400bb00:	68fb      	ldr	r3, [r7, #12]
2400bb02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400bb04:	f7f8 f8bc 	bl	24003c80 <HAL_DMA_Start_IT>
2400bb08:	4603      	mov	r3, r0
2400bb0a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400bb0c:	7dfb      	ldrb	r3, [r7, #23]
2400bb0e:	2b00      	cmp	r3, #0
2400bb10:	d139      	bne.n	2400bb86 <HAL_I2C_Mem_Read_DMA+0x1aa>
2400bb12:	e013      	b.n	2400bb3c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400bb14:	68fb      	ldr	r3, [r7, #12]
2400bb16:	2220      	movs	r2, #32
2400bb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bb1c:	68fb      	ldr	r3, [r7, #12]
2400bb1e:	2200      	movs	r2, #0
2400bb20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400bb24:	68fb      	ldr	r3, [r7, #12]
2400bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bb28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400bb2c:	68fb      	ldr	r3, [r7, #12]
2400bb2e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400bb30:	68fb      	ldr	r3, [r7, #12]
2400bb32:	2200      	movs	r2, #0
2400bb34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bb38:	2301      	movs	r3, #1
2400bb3a:	e039      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400bb3c:	68fb      	ldr	r3, [r7, #12]
2400bb3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bb40:	b2da      	uxtb	r2, r3
2400bb42:	8979      	ldrh	r1, [r7, #10]
2400bb44:	4b20      	ldr	r3, [pc, #128]	; (2400bbc8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
2400bb46:	9300      	str	r3, [sp, #0]
2400bb48:	69fb      	ldr	r3, [r7, #28]
2400bb4a:	68f8      	ldr	r0, [r7, #12]
2400bb4c:	f003 f99a 	bl	2400ee84 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400bb50:	68fb      	ldr	r3, [r7, #12]
2400bb52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb54:	b29a      	uxth	r2, r3
2400bb56:	68fb      	ldr	r3, [r7, #12]
2400bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bb5a:	1ad3      	subs	r3, r2, r3
2400bb5c:	b29a      	uxth	r2, r3
2400bb5e:	68fb      	ldr	r3, [r7, #12]
2400bb60:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bb62:	68fb      	ldr	r3, [r7, #12]
2400bb64:	2200      	movs	r2, #0
2400bb66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400bb6a:	2110      	movs	r1, #16
2400bb6c:	68f8      	ldr	r0, [r7, #12]
2400bb6e:	f003 f9bb 	bl	2400eee8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400bb72:	68fb      	ldr	r3, [r7, #12]
2400bb74:	681b      	ldr	r3, [r3, #0]
2400bb76:	681a      	ldr	r2, [r3, #0]
2400bb78:	68fb      	ldr	r3, [r7, #12]
2400bb7a:	681b      	ldr	r3, [r3, #0]
2400bb7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bb80:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400bb82:	2300      	movs	r3, #0
2400bb84:	e014      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400bb86:	68fb      	ldr	r3, [r7, #12]
2400bb88:	2220      	movs	r2, #32
2400bb8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bb8e:	68fb      	ldr	r3, [r7, #12]
2400bb90:	2200      	movs	r2, #0
2400bb92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400bb96:	68fb      	ldr	r3, [r7, #12]
2400bb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bb9a:	f043 0210 	orr.w	r2, r3, #16
2400bb9e:	68fb      	ldr	r3, [r7, #12]
2400bba0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400bba2:	68fb      	ldr	r3, [r7, #12]
2400bba4:	2200      	movs	r2, #0
2400bba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bbaa:	2301      	movs	r3, #1
2400bbac:	e000      	b.n	2400bbb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400bbae:	2302      	movs	r3, #2
  }
}
2400bbb0:	4618      	mov	r0, r3
2400bbb2:	3720      	adds	r7, #32
2400bbb4:	46bd      	mov	sp, r7
2400bbb6:	bd80      	pop	{r7, pc}
2400bbb8:	ffff0000 	.word	0xffff0000
2400bbbc:	2400d31d 	.word	0x2400d31d
2400bbc0:	2400e595 	.word	0x2400e595
2400bbc4:	2400e791 	.word	0x2400e791
2400bbc8:	80002400 	.word	0x80002400

2400bbcc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400bbcc:	b580      	push	{r7, lr}
2400bbce:	b08a      	sub	sp, #40	; 0x28
2400bbd0:	af02      	add	r7, sp, #8
2400bbd2:	60f8      	str	r0, [r7, #12]
2400bbd4:	607a      	str	r2, [r7, #4]
2400bbd6:	603b      	str	r3, [r7, #0]
2400bbd8:	460b      	mov	r3, r1
2400bbda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400bbdc:	2300      	movs	r3, #0
2400bbde:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bbe0:	68fb      	ldr	r3, [r7, #12]
2400bbe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bbe6:	b2db      	uxtb	r3, r3
2400bbe8:	2b20      	cmp	r3, #32
2400bbea:	f040 80ef 	bne.w	2400bdcc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bbee:	68fb      	ldr	r3, [r7, #12]
2400bbf0:	681b      	ldr	r3, [r3, #0]
2400bbf2:	699b      	ldr	r3, [r3, #24]
2400bbf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400bbf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bbfc:	d101      	bne.n	2400bc02 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2400bbfe:	2302      	movs	r3, #2
2400bc00:	e0e5      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bc02:	68fb      	ldr	r3, [r7, #12]
2400bc04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bc08:	2b01      	cmp	r3, #1
2400bc0a:	d101      	bne.n	2400bc10 <HAL_I2C_IsDeviceReady+0x44>
2400bc0c:	2302      	movs	r3, #2
2400bc0e:	e0de      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
2400bc10:	68fb      	ldr	r3, [r7, #12]
2400bc12:	2201      	movs	r2, #1
2400bc14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400bc18:	68fb      	ldr	r3, [r7, #12]
2400bc1a:	2224      	movs	r2, #36	; 0x24
2400bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bc20:	68fb      	ldr	r3, [r7, #12]
2400bc22:	2200      	movs	r2, #0
2400bc24:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2400bc26:	68fb      	ldr	r3, [r7, #12]
2400bc28:	68db      	ldr	r3, [r3, #12]
2400bc2a:	2b01      	cmp	r3, #1
2400bc2c:	d105      	bne.n	2400bc3a <HAL_I2C_IsDeviceReady+0x6e>
2400bc2e:	897b      	ldrh	r3, [r7, #10]
2400bc30:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400bc34:	4b68      	ldr	r3, [pc, #416]	; (2400bdd8 <HAL_I2C_IsDeviceReady+0x20c>)
2400bc36:	4313      	orrs	r3, r2
2400bc38:	e004      	b.n	2400bc44 <HAL_I2C_IsDeviceReady+0x78>
2400bc3a:	897b      	ldrh	r3, [r7, #10]
2400bc3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400bc40:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
2400bc44:	68fa      	ldr	r2, [r7, #12]
2400bc46:	6812      	ldr	r2, [r2, #0]
2400bc48:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2400bc4a:	f7f6 fa7f 	bl	2400214c <HAL_GetTick>
2400bc4e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400bc50:	68fb      	ldr	r3, [r7, #12]
2400bc52:	681b      	ldr	r3, [r3, #0]
2400bc54:	699b      	ldr	r3, [r3, #24]
2400bc56:	f003 0320 	and.w	r3, r3, #32
2400bc5a:	2b20      	cmp	r3, #32
2400bc5c:	bf0c      	ite	eq
2400bc5e:	2301      	moveq	r3, #1
2400bc60:	2300      	movne	r3, #0
2400bc62:	b2db      	uxtb	r3, r3
2400bc64:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400bc66:	68fb      	ldr	r3, [r7, #12]
2400bc68:	681b      	ldr	r3, [r3, #0]
2400bc6a:	699b      	ldr	r3, [r3, #24]
2400bc6c:	f003 0310 	and.w	r3, r3, #16
2400bc70:	2b10      	cmp	r3, #16
2400bc72:	bf0c      	ite	eq
2400bc74:	2301      	moveq	r3, #1
2400bc76:	2300      	movne	r3, #0
2400bc78:	b2db      	uxtb	r3, r3
2400bc7a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400bc7c:	e034      	b.n	2400bce8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400bc7e:	683b      	ldr	r3, [r7, #0]
2400bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
2400bc84:	d01a      	beq.n	2400bcbc <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400bc86:	f7f6 fa61 	bl	2400214c <HAL_GetTick>
2400bc8a:	4602      	mov	r2, r0
2400bc8c:	69bb      	ldr	r3, [r7, #24]
2400bc8e:	1ad3      	subs	r3, r2, r3
2400bc90:	683a      	ldr	r2, [r7, #0]
2400bc92:	429a      	cmp	r2, r3
2400bc94:	d302      	bcc.n	2400bc9c <HAL_I2C_IsDeviceReady+0xd0>
2400bc96:	683b      	ldr	r3, [r7, #0]
2400bc98:	2b00      	cmp	r3, #0
2400bc9a:	d10f      	bne.n	2400bcbc <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400bc9c:	68fb      	ldr	r3, [r7, #12]
2400bc9e:	2220      	movs	r2, #32
2400bca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400bca4:	68fb      	ldr	r3, [r7, #12]
2400bca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bca8:	f043 0220 	orr.w	r2, r3, #32
2400bcac:	68fb      	ldr	r3, [r7, #12]
2400bcae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2400bcb0:	68fb      	ldr	r3, [r7, #12]
2400bcb2:	2200      	movs	r2, #0
2400bcb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
2400bcb8:	2301      	movs	r3, #1
2400bcba:	e088      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400bcbc:	68fb      	ldr	r3, [r7, #12]
2400bcbe:	681b      	ldr	r3, [r3, #0]
2400bcc0:	699b      	ldr	r3, [r3, #24]
2400bcc2:	f003 0320 	and.w	r3, r3, #32
2400bcc6:	2b20      	cmp	r3, #32
2400bcc8:	bf0c      	ite	eq
2400bcca:	2301      	moveq	r3, #1
2400bccc:	2300      	movne	r3, #0
2400bcce:	b2db      	uxtb	r3, r3
2400bcd0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400bcd2:	68fb      	ldr	r3, [r7, #12]
2400bcd4:	681b      	ldr	r3, [r3, #0]
2400bcd6:	699b      	ldr	r3, [r3, #24]
2400bcd8:	f003 0310 	and.w	r3, r3, #16
2400bcdc:	2b10      	cmp	r3, #16
2400bcde:	bf0c      	ite	eq
2400bce0:	2301      	moveq	r3, #1
2400bce2:	2300      	movne	r3, #0
2400bce4:	b2db      	uxtb	r3, r3
2400bce6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2400bce8:	7ffb      	ldrb	r3, [r7, #31]
2400bcea:	2b00      	cmp	r3, #0
2400bcec:	d102      	bne.n	2400bcf4 <HAL_I2C_IsDeviceReady+0x128>
2400bcee:	7fbb      	ldrb	r3, [r7, #30]
2400bcf0:	2b00      	cmp	r3, #0
2400bcf2:	d0c4      	beq.n	2400bc7e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2400bcf4:	68fb      	ldr	r3, [r7, #12]
2400bcf6:	681b      	ldr	r3, [r3, #0]
2400bcf8:	699b      	ldr	r3, [r3, #24]
2400bcfa:	f003 0310 	and.w	r3, r3, #16
2400bcfe:	2b10      	cmp	r3, #16
2400bd00:	d01a      	beq.n	2400bd38 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400bd02:	69bb      	ldr	r3, [r7, #24]
2400bd04:	9300      	str	r3, [sp, #0]
2400bd06:	683b      	ldr	r3, [r7, #0]
2400bd08:	2200      	movs	r2, #0
2400bd0a:	2120      	movs	r1, #32
2400bd0c:	68f8      	ldr	r0, [r7, #12]
2400bd0e:	f002 fe97 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400bd12:	4603      	mov	r3, r0
2400bd14:	2b00      	cmp	r3, #0
2400bd16:	d001      	beq.n	2400bd1c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2400bd18:	2301      	movs	r3, #1
2400bd1a:	e058      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd1c:	68fb      	ldr	r3, [r7, #12]
2400bd1e:	681b      	ldr	r3, [r3, #0]
2400bd20:	2220      	movs	r2, #32
2400bd22:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2400bd24:	68fb      	ldr	r3, [r7, #12]
2400bd26:	2220      	movs	r2, #32
2400bd28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bd2c:	68fb      	ldr	r3, [r7, #12]
2400bd2e:	2200      	movs	r2, #0
2400bd30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
2400bd34:	2300      	movs	r3, #0
2400bd36:	e04a      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400bd38:	69bb      	ldr	r3, [r7, #24]
2400bd3a:	9300      	str	r3, [sp, #0]
2400bd3c:	683b      	ldr	r3, [r7, #0]
2400bd3e:	2200      	movs	r2, #0
2400bd40:	2120      	movs	r1, #32
2400bd42:	68f8      	ldr	r0, [r7, #12]
2400bd44:	f002 fe7c 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400bd48:	4603      	mov	r3, r0
2400bd4a:	2b00      	cmp	r3, #0
2400bd4c:	d001      	beq.n	2400bd52 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2400bd4e:	2301      	movs	r3, #1
2400bd50:	e03d      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400bd52:	68fb      	ldr	r3, [r7, #12]
2400bd54:	681b      	ldr	r3, [r3, #0]
2400bd56:	2210      	movs	r2, #16
2400bd58:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd5a:	68fb      	ldr	r3, [r7, #12]
2400bd5c:	681b      	ldr	r3, [r3, #0]
2400bd5e:	2220      	movs	r2, #32
2400bd60:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
2400bd62:	697b      	ldr	r3, [r7, #20]
2400bd64:	687a      	ldr	r2, [r7, #4]
2400bd66:	429a      	cmp	r2, r3
2400bd68:	d118      	bne.n	2400bd9c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400bd6a:	68fb      	ldr	r3, [r7, #12]
2400bd6c:	681b      	ldr	r3, [r3, #0]
2400bd6e:	685a      	ldr	r2, [r3, #4]
2400bd70:	68fb      	ldr	r3, [r7, #12]
2400bd72:	681b      	ldr	r3, [r3, #0]
2400bd74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400bd78:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400bd7a:	69bb      	ldr	r3, [r7, #24]
2400bd7c:	9300      	str	r3, [sp, #0]
2400bd7e:	683b      	ldr	r3, [r7, #0]
2400bd80:	2200      	movs	r2, #0
2400bd82:	2120      	movs	r1, #32
2400bd84:	68f8      	ldr	r0, [r7, #12]
2400bd86:	f002 fe5b 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400bd8a:	4603      	mov	r3, r0
2400bd8c:	2b00      	cmp	r3, #0
2400bd8e:	d001      	beq.n	2400bd94 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
2400bd90:	2301      	movs	r3, #1
2400bd92:	e01c      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd94:	68fb      	ldr	r3, [r7, #12]
2400bd96:	681b      	ldr	r3, [r3, #0]
2400bd98:	2220      	movs	r2, #32
2400bd9a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400bd9c:	697b      	ldr	r3, [r7, #20]
2400bd9e:	3301      	adds	r3, #1
2400bda0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2400bda2:	697b      	ldr	r3, [r7, #20]
2400bda4:	687a      	ldr	r2, [r7, #4]
2400bda6:	429a      	cmp	r2, r3
2400bda8:	f63f af3d 	bhi.w	2400bc26 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400bdac:	68fb      	ldr	r3, [r7, #12]
2400bdae:	2220      	movs	r2, #32
2400bdb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400bdb4:	68fb      	ldr	r3, [r7, #12]
2400bdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bdb8:	f043 0220 	orr.w	r2, r3, #32
2400bdbc:	68fb      	ldr	r3, [r7, #12]
2400bdbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bdc0:	68fb      	ldr	r3, [r7, #12]
2400bdc2:	2200      	movs	r2, #0
2400bdc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
2400bdc8:	2301      	movs	r3, #1
2400bdca:	e000      	b.n	2400bdce <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
2400bdcc:	2302      	movs	r3, #2
  }
}
2400bdce:	4618      	mov	r0, r3
2400bdd0:	3720      	adds	r7, #32
2400bdd2:	46bd      	mov	sp, r7
2400bdd4:	bd80      	pop	{r7, pc}
2400bdd6:	bf00      	nop
2400bdd8:	02002000 	.word	0x02002000

2400bddc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400bddc:	b580      	push	{r7, lr}
2400bdde:	b088      	sub	sp, #32
2400bde0:	af02      	add	r7, sp, #8
2400bde2:	60f8      	str	r0, [r7, #12]
2400bde4:	607a      	str	r2, [r7, #4]
2400bde6:	461a      	mov	r2, r3
2400bde8:	460b      	mov	r3, r1
2400bdea:	817b      	strh	r3, [r7, #10]
2400bdec:	4613      	mov	r3, r2
2400bdee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400bdf0:	4b3a      	ldr	r3, [pc, #232]	; (2400bedc <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
2400bdf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bdf4:	68fb      	ldr	r3, [r7, #12]
2400bdf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bdfa:	b2db      	uxtb	r3, r3
2400bdfc:	2b20      	cmp	r3, #32
2400bdfe:	d167      	bne.n	2400bed0 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400be00:	68fb      	ldr	r3, [r7, #12]
2400be02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400be06:	2b01      	cmp	r3, #1
2400be08:	d101      	bne.n	2400be0e <HAL_I2C_Master_Seq_Transmit_IT+0x32>
2400be0a:	2302      	movs	r3, #2
2400be0c:	e061      	b.n	2400bed2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
2400be0e:	68fb      	ldr	r3, [r7, #12]
2400be10:	2201      	movs	r2, #1
2400be12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400be16:	68fb      	ldr	r3, [r7, #12]
2400be18:	2221      	movs	r2, #33	; 0x21
2400be1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400be1e:	68fb      	ldr	r3, [r7, #12]
2400be20:	2210      	movs	r2, #16
2400be22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400be26:	68fb      	ldr	r3, [r7, #12]
2400be28:	2200      	movs	r2, #0
2400be2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400be2c:	68fb      	ldr	r3, [r7, #12]
2400be2e:	687a      	ldr	r2, [r7, #4]
2400be30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400be32:	68fb      	ldr	r3, [r7, #12]
2400be34:	893a      	ldrh	r2, [r7, #8]
2400be36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400be38:	68fb      	ldr	r3, [r7, #12]
2400be3a:	6a3a      	ldr	r2, [r7, #32]
2400be3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400be3e:	68fb      	ldr	r3, [r7, #12]
2400be40:	4a27      	ldr	r2, [pc, #156]	; (2400bee0 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
2400be42:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400be44:	68fb      	ldr	r3, [r7, #12]
2400be46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400be48:	b29b      	uxth	r3, r3
2400be4a:	2bff      	cmp	r3, #255	; 0xff
2400be4c:	d906      	bls.n	2400be5c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400be4e:	68fb      	ldr	r3, [r7, #12]
2400be50:	22ff      	movs	r2, #255	; 0xff
2400be52:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400be54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400be58:	617b      	str	r3, [r7, #20]
2400be5a:	e007      	b.n	2400be6c <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400be5c:	68fb      	ldr	r3, [r7, #12]
2400be5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400be60:	b29a      	uxth	r2, r3
2400be62:	68fb      	ldr	r3, [r7, #12]
2400be64:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400be66:	68fb      	ldr	r3, [r7, #12]
2400be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400be6a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400be6c:	68fb      	ldr	r3, [r7, #12]
2400be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400be70:	2b11      	cmp	r3, #17
2400be72:	d10e      	bne.n	2400be92 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400be74:	6a3b      	ldr	r3, [r7, #32]
2400be76:	2baa      	cmp	r3, #170	; 0xaa
2400be78:	d003      	beq.n	2400be82 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
2400be7a:	6a3b      	ldr	r3, [r7, #32]
2400be7c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400be80:	d101      	bne.n	2400be86 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
2400be82:	2301      	movs	r3, #1
2400be84:	e000      	b.n	2400be88 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2400be86:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400be88:	2b00      	cmp	r3, #0
2400be8a:	d102      	bne.n	2400be92 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400be8c:	2300      	movs	r3, #0
2400be8e:	613b      	str	r3, [r7, #16]
2400be90:	e00a      	b.n	2400bea8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400be92:	68f8      	ldr	r0, [r7, #12]
2400be94:	f003 f8ea 	bl	2400f06c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400be98:	68fb      	ldr	r3, [r7, #12]
2400be9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400be9c:	b29b      	uxth	r3, r3
2400be9e:	2bff      	cmp	r3, #255	; 0xff
2400bea0:	d802      	bhi.n	2400bea8 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400bea2:	68fb      	ldr	r3, [r7, #12]
2400bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400bea6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400bea8:	68fb      	ldr	r3, [r7, #12]
2400beaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400beac:	b2da      	uxtb	r2, r3
2400beae:	8979      	ldrh	r1, [r7, #10]
2400beb0:	693b      	ldr	r3, [r7, #16]
2400beb2:	9300      	str	r3, [sp, #0]
2400beb4:	697b      	ldr	r3, [r7, #20]
2400beb6:	68f8      	ldr	r0, [r7, #12]
2400beb8:	f002 ffe4 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bebc:	68fb      	ldr	r3, [r7, #12]
2400bebe:	2200      	movs	r2, #0
2400bec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400bec4:	2101      	movs	r1, #1
2400bec6:	68f8      	ldr	r0, [r7, #12]
2400bec8:	f003 f80e 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400becc:	2300      	movs	r3, #0
2400bece:	e000      	b.n	2400bed2 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400bed0:	2302      	movs	r3, #2
  }
}
2400bed2:	4618      	mov	r0, r3
2400bed4:	3718      	adds	r7, #24
2400bed6:	46bd      	mov	sp, r7
2400bed8:	bd80      	pop	{r7, pc}
2400beda:	bf00      	nop
2400bedc:	80002000 	.word	0x80002000
2400bee0:	2400cec7 	.word	0x2400cec7

2400bee4 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2400bee4:	b580      	push	{r7, lr}
2400bee6:	b08a      	sub	sp, #40	; 0x28
2400bee8:	af02      	add	r7, sp, #8
2400beea:	60f8      	str	r0, [r7, #12]
2400beec:	607a      	str	r2, [r7, #4]
2400beee:	461a      	mov	r2, r3
2400bef0:	460b      	mov	r3, r1
2400bef2:	817b      	strh	r3, [r7, #10]
2400bef4:	4613      	mov	r3, r2
2400bef6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400bef8:	4b77      	ldr	r3, [pc, #476]	; (2400c0d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400befa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400befc:	68fb      	ldr	r3, [r7, #12]
2400befe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bf02:	b2db      	uxtb	r3, r3
2400bf04:	2b20      	cmp	r3, #32
2400bf06:	f040 80e1 	bne.w	2400c0cc <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bf0a:	68fb      	ldr	r3, [r7, #12]
2400bf0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bf10:	2b01      	cmp	r3, #1
2400bf12:	d101      	bne.n	2400bf18 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
2400bf14:	2302      	movs	r3, #2
2400bf16:	e0da      	b.n	2400c0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
2400bf18:	68fb      	ldr	r3, [r7, #12]
2400bf1a:	2201      	movs	r2, #1
2400bf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400bf20:	68fb      	ldr	r3, [r7, #12]
2400bf22:	2221      	movs	r2, #33	; 0x21
2400bf24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400bf28:	68fb      	ldr	r3, [r7, #12]
2400bf2a:	2210      	movs	r2, #16
2400bf2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bf30:	68fb      	ldr	r3, [r7, #12]
2400bf32:	2200      	movs	r2, #0
2400bf34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bf36:	68fb      	ldr	r3, [r7, #12]
2400bf38:	687a      	ldr	r2, [r7, #4]
2400bf3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bf3c:	68fb      	ldr	r3, [r7, #12]
2400bf3e:	893a      	ldrh	r2, [r7, #8]
2400bf40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400bf42:	68fb      	ldr	r3, [r7, #12]
2400bf44:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400bf46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400bf48:	68fb      	ldr	r3, [r7, #12]
2400bf4a:	4a64      	ldr	r2, [pc, #400]	; (2400c0dc <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
2400bf4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bf4e:	68fb      	ldr	r3, [r7, #12]
2400bf50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf52:	b29b      	uxth	r3, r3
2400bf54:	2bff      	cmp	r3, #255	; 0xff
2400bf56:	d906      	bls.n	2400bf66 <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bf58:	68fb      	ldr	r3, [r7, #12]
2400bf5a:	22ff      	movs	r2, #255	; 0xff
2400bf5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bf5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bf62:	61fb      	str	r3, [r7, #28]
2400bf64:	e007      	b.n	2400bf76 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bf66:	68fb      	ldr	r3, [r7, #12]
2400bf68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf6a:	b29a      	uxth	r2, r3
2400bf6c:	68fb      	ldr	r3, [r7, #12]
2400bf6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400bf70:	68fb      	ldr	r3, [r7, #12]
2400bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400bf74:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400bf76:	68fb      	ldr	r3, [r7, #12]
2400bf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400bf7a:	2b11      	cmp	r3, #17
2400bf7c:	d10e      	bne.n	2400bf9c <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bf80:	2baa      	cmp	r3, #170	; 0xaa
2400bf82:	d003      	beq.n	2400bf8c <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
2400bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bf86:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400bf8a:	d101      	bne.n	2400bf90 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2400bf8c:	2301      	movs	r3, #1
2400bf8e:	e000      	b.n	2400bf92 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
2400bf90:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400bf92:	2b00      	cmp	r3, #0
2400bf94:	d102      	bne.n	2400bf9c <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400bf96:	2300      	movs	r3, #0
2400bf98:	61bb      	str	r3, [r7, #24]
2400bf9a:	e00a      	b.n	2400bfb2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400bf9c:	68f8      	ldr	r0, [r7, #12]
2400bf9e:	f003 f865 	bl	2400f06c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400bfa2:	68fb      	ldr	r3, [r7, #12]
2400bfa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bfa6:	b29b      	uxth	r3, r3
2400bfa8:	2bff      	cmp	r3, #255	; 0xff
2400bfaa:	d802      	bhi.n	2400bfb2 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400bfac:	68fb      	ldr	r3, [r7, #12]
2400bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400bfb0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400bfb2:	68fb      	ldr	r3, [r7, #12]
2400bfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bfb6:	2b00      	cmp	r3, #0
2400bfb8:	d070      	beq.n	2400c09c <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
2400bfba:	68fb      	ldr	r3, [r7, #12]
2400bfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400bfbe:	2b00      	cmp	r3, #0
2400bfc0:	d020      	beq.n	2400c004 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400bfc2:	68fb      	ldr	r3, [r7, #12]
2400bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400bfc6:	4a46      	ldr	r2, [pc, #280]	; (2400c0e0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
2400bfc8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400bfca:	68fb      	ldr	r3, [r7, #12]
2400bfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400bfce:	4a45      	ldr	r2, [pc, #276]	; (2400c0e4 <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
2400bfd0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400bfd2:	68fb      	ldr	r3, [r7, #12]
2400bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400bfd6:	2200      	movs	r2, #0
2400bfd8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400bfda:	68fb      	ldr	r3, [r7, #12]
2400bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400bfde:	2200      	movs	r2, #0
2400bfe0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400bfe2:	68fb      	ldr	r3, [r7, #12]
2400bfe4:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400bfe6:	6879      	ldr	r1, [r7, #4]
2400bfe8:	68fb      	ldr	r3, [r7, #12]
2400bfea:	681b      	ldr	r3, [r3, #0]
2400bfec:	3328      	adds	r3, #40	; 0x28
2400bfee:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400bff0:	68fb      	ldr	r3, [r7, #12]
2400bff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400bff4:	f7f7 fe44 	bl	24003c80 <HAL_DMA_Start_IT>
2400bff8:	4603      	mov	r3, r0
2400bffa:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400bffc:	7dfb      	ldrb	r3, [r7, #23]
2400bffe:	2b00      	cmp	r3, #0
2400c000:	d138      	bne.n	2400c074 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
2400c002:	e013      	b.n	2400c02c <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c004:	68fb      	ldr	r3, [r7, #12]
2400c006:	2220      	movs	r2, #32
2400c008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c00c:	68fb      	ldr	r3, [r7, #12]
2400c00e:	2200      	movs	r2, #0
2400c010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c014:	68fb      	ldr	r3, [r7, #12]
2400c016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c018:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c01c:	68fb      	ldr	r3, [r7, #12]
2400c01e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c020:	68fb      	ldr	r3, [r7, #12]
2400c022:	2200      	movs	r2, #0
2400c024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c028:	2301      	movs	r3, #1
2400c02a:	e050      	b.n	2400c0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c02c:	68fb      	ldr	r3, [r7, #12]
2400c02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c030:	b2da      	uxtb	r2, r3
2400c032:	8979      	ldrh	r1, [r7, #10]
2400c034:	69bb      	ldr	r3, [r7, #24]
2400c036:	9300      	str	r3, [sp, #0]
2400c038:	69fb      	ldr	r3, [r7, #28]
2400c03a:	68f8      	ldr	r0, [r7, #12]
2400c03c:	f002 ff22 	bl	2400ee84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c040:	68fb      	ldr	r3, [r7, #12]
2400c042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c044:	b29a      	uxth	r2, r3
2400c046:	68fb      	ldr	r3, [r7, #12]
2400c048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c04a:	1ad3      	subs	r3, r2, r3
2400c04c:	b29a      	uxth	r2, r3
2400c04e:	68fb      	ldr	r3, [r7, #12]
2400c050:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c052:	68fb      	ldr	r3, [r7, #12]
2400c054:	2200      	movs	r2, #0
2400c056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c05a:	2110      	movs	r1, #16
2400c05c:	68f8      	ldr	r0, [r7, #12]
2400c05e:	f002 ff43 	bl	2400eee8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c062:	68fb      	ldr	r3, [r7, #12]
2400c064:	681b      	ldr	r3, [r3, #0]
2400c066:	681a      	ldr	r2, [r3, #0]
2400c068:	68fb      	ldr	r3, [r7, #12]
2400c06a:	681b      	ldr	r3, [r3, #0]
2400c06c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c070:	601a      	str	r2, [r3, #0]
2400c072:	e029      	b.n	2400c0c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c074:	68fb      	ldr	r3, [r7, #12]
2400c076:	2220      	movs	r2, #32
2400c078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c07c:	68fb      	ldr	r3, [r7, #12]
2400c07e:	2200      	movs	r2, #0
2400c080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c084:	68fb      	ldr	r3, [r7, #12]
2400c086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c088:	f043 0210 	orr.w	r2, r3, #16
2400c08c:	68fb      	ldr	r3, [r7, #12]
2400c08e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c090:	68fb      	ldr	r3, [r7, #12]
2400c092:	2200      	movs	r2, #0
2400c094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c098:	2301      	movs	r3, #1
2400c09a:	e018      	b.n	2400c0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c09c:	68fb      	ldr	r3, [r7, #12]
2400c09e:	4a12      	ldr	r2, [pc, #72]	; (2400c0e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
2400c0a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c0a2:	68fb      	ldr	r3, [r7, #12]
2400c0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c0a6:	b2da      	uxtb	r2, r3
2400c0a8:	8979      	ldrh	r1, [r7, #10]
2400c0aa:	4b0b      	ldr	r3, [pc, #44]	; (2400c0d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400c0ac:	9300      	str	r3, [sp, #0]
2400c0ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c0b2:	68f8      	ldr	r0, [r7, #12]
2400c0b4:	f002 fee6 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c0b8:	68fb      	ldr	r3, [r7, #12]
2400c0ba:	2200      	movs	r2, #0
2400c0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c0c0:	2101      	movs	r1, #1
2400c0c2:	68f8      	ldr	r0, [r7, #12]
2400c0c4:	f002 ff10 	bl	2400eee8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c0c8:	2300      	movs	r3, #0
2400c0ca:	e000      	b.n	2400c0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400c0cc:	2302      	movs	r3, #2
  }
}
2400c0ce:	4618      	mov	r0, r3
2400c0d0:	3720      	adds	r7, #32
2400c0d2:	46bd      	mov	sp, r7
2400c0d4:	bd80      	pop	{r7, pc}
2400c0d6:	bf00      	nop
2400c0d8:	80002000 	.word	0x80002000
2400c0dc:	2400d31d 	.word	0x2400d31d
2400c0e0:	2400e4bf 	.word	0x2400e4bf
2400c0e4:	2400e791 	.word	0x2400e791
2400c0e8:	2400cec7 	.word	0x2400cec7

2400c0ec <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2400c0ec:	b580      	push	{r7, lr}
2400c0ee:	b088      	sub	sp, #32
2400c0f0:	af02      	add	r7, sp, #8
2400c0f2:	60f8      	str	r0, [r7, #12]
2400c0f4:	607a      	str	r2, [r7, #4]
2400c0f6:	461a      	mov	r2, r3
2400c0f8:	460b      	mov	r3, r1
2400c0fa:	817b      	strh	r3, [r7, #10]
2400c0fc:	4613      	mov	r3, r2
2400c0fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400c100:	4b3a      	ldr	r3, [pc, #232]	; (2400c1ec <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2400c102:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c104:	68fb      	ldr	r3, [r7, #12]
2400c106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c10a:	b2db      	uxtb	r3, r3
2400c10c:	2b20      	cmp	r3, #32
2400c10e:	d167      	bne.n	2400c1e0 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c110:	68fb      	ldr	r3, [r7, #12]
2400c112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c116:	2b01      	cmp	r3, #1
2400c118:	d101      	bne.n	2400c11e <HAL_I2C_Master_Seq_Receive_IT+0x32>
2400c11a:	2302      	movs	r3, #2
2400c11c:	e061      	b.n	2400c1e2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2400c11e:	68fb      	ldr	r3, [r7, #12]
2400c120:	2201      	movs	r2, #1
2400c122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c126:	68fb      	ldr	r3, [r7, #12]
2400c128:	2222      	movs	r2, #34	; 0x22
2400c12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c12e:	68fb      	ldr	r3, [r7, #12]
2400c130:	2210      	movs	r2, #16
2400c132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c136:	68fb      	ldr	r3, [r7, #12]
2400c138:	2200      	movs	r2, #0
2400c13a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c13c:	68fb      	ldr	r3, [r7, #12]
2400c13e:	687a      	ldr	r2, [r7, #4]
2400c140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c142:	68fb      	ldr	r3, [r7, #12]
2400c144:	893a      	ldrh	r2, [r7, #8]
2400c146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c148:	68fb      	ldr	r3, [r7, #12]
2400c14a:	6a3a      	ldr	r2, [r7, #32]
2400c14c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400c14e:	68fb      	ldr	r3, [r7, #12]
2400c150:	4a27      	ldr	r2, [pc, #156]	; (2400c1f0 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2400c152:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c154:	68fb      	ldr	r3, [r7, #12]
2400c156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c158:	b29b      	uxth	r3, r3
2400c15a:	2bff      	cmp	r3, #255	; 0xff
2400c15c:	d906      	bls.n	2400c16c <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c15e:	68fb      	ldr	r3, [r7, #12]
2400c160:	22ff      	movs	r2, #255	; 0xff
2400c162:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c168:	617b      	str	r3, [r7, #20]
2400c16a:	e007      	b.n	2400c17c <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c16c:	68fb      	ldr	r3, [r7, #12]
2400c16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c170:	b29a      	uxth	r2, r3
2400c172:	68fb      	ldr	r3, [r7, #12]
2400c174:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c176:	68fb      	ldr	r3, [r7, #12]
2400c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c17a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c17c:	68fb      	ldr	r3, [r7, #12]
2400c17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c180:	2b12      	cmp	r3, #18
2400c182:	d10e      	bne.n	2400c1a2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c184:	6a3b      	ldr	r3, [r7, #32]
2400c186:	2baa      	cmp	r3, #170	; 0xaa
2400c188:	d003      	beq.n	2400c192 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2400c18a:	6a3b      	ldr	r3, [r7, #32]
2400c18c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c190:	d101      	bne.n	2400c196 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2400c192:	2301      	movs	r3, #1
2400c194:	e000      	b.n	2400c198 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2400c196:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c198:	2b00      	cmp	r3, #0
2400c19a:	d102      	bne.n	2400c1a2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c19c:	2300      	movs	r3, #0
2400c19e:	613b      	str	r3, [r7, #16]
2400c1a0:	e00a      	b.n	2400c1b8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c1a2:	68f8      	ldr	r0, [r7, #12]
2400c1a4:	f002 ff62 	bl	2400f06c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c1a8:	68fb      	ldr	r3, [r7, #12]
2400c1aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c1ac:	b29b      	uxth	r3, r3
2400c1ae:	2bff      	cmp	r3, #255	; 0xff
2400c1b0:	d802      	bhi.n	2400c1b8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400c1b2:	68fb      	ldr	r3, [r7, #12]
2400c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c1b6:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c1b8:	68fb      	ldr	r3, [r7, #12]
2400c1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c1bc:	b2da      	uxtb	r2, r3
2400c1be:	8979      	ldrh	r1, [r7, #10]
2400c1c0:	693b      	ldr	r3, [r7, #16]
2400c1c2:	9300      	str	r3, [sp, #0]
2400c1c4:	697b      	ldr	r3, [r7, #20]
2400c1c6:	68f8      	ldr	r0, [r7, #12]
2400c1c8:	f002 fe5c 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c1cc:	68fb      	ldr	r3, [r7, #12]
2400c1ce:	2200      	movs	r2, #0
2400c1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c1d4:	2102      	movs	r1, #2
2400c1d6:	68f8      	ldr	r0, [r7, #12]
2400c1d8:	f002 fe86 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400c1dc:	2300      	movs	r3, #0
2400c1de:	e000      	b.n	2400c1e2 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400c1e0:	2302      	movs	r3, #2
  }
}
2400c1e2:	4618      	mov	r0, r3
2400c1e4:	3718      	adds	r7, #24
2400c1e6:	46bd      	mov	sp, r7
2400c1e8:	bd80      	pop	{r7, pc}
2400c1ea:	bf00      	nop
2400c1ec:	80002400 	.word	0x80002400
2400c1f0:	2400cec7 	.word	0x2400cec7

2400c1f4 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400c1f4:	b580      	push	{r7, lr}
2400c1f6:	b08a      	sub	sp, #40	; 0x28
2400c1f8:	af02      	add	r7, sp, #8
2400c1fa:	60f8      	str	r0, [r7, #12]
2400c1fc:	607a      	str	r2, [r7, #4]
2400c1fe:	461a      	mov	r2, r3
2400c200:	460b      	mov	r3, r1
2400c202:	817b      	strh	r3, [r7, #10]
2400c204:	4613      	mov	r3, r2
2400c206:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400c208:	4b77      	ldr	r3, [pc, #476]	; (2400c3e8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400c20a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c20c:	68fb      	ldr	r3, [r7, #12]
2400c20e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c212:	b2db      	uxtb	r3, r3
2400c214:	2b20      	cmp	r3, #32
2400c216:	f040 80e1 	bne.w	2400c3dc <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c21a:	68fb      	ldr	r3, [r7, #12]
2400c21c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c220:	2b01      	cmp	r3, #1
2400c222:	d101      	bne.n	2400c228 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2400c224:	2302      	movs	r3, #2
2400c226:	e0da      	b.n	2400c3de <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2400c228:	68fb      	ldr	r3, [r7, #12]
2400c22a:	2201      	movs	r2, #1
2400c22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c230:	68fb      	ldr	r3, [r7, #12]
2400c232:	2222      	movs	r2, #34	; 0x22
2400c234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c238:	68fb      	ldr	r3, [r7, #12]
2400c23a:	2210      	movs	r2, #16
2400c23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c240:	68fb      	ldr	r3, [r7, #12]
2400c242:	2200      	movs	r2, #0
2400c244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c246:	68fb      	ldr	r3, [r7, #12]
2400c248:	687a      	ldr	r2, [r7, #4]
2400c24a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c24c:	68fb      	ldr	r3, [r7, #12]
2400c24e:	893a      	ldrh	r2, [r7, #8]
2400c250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c252:	68fb      	ldr	r3, [r7, #12]
2400c254:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400c256:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c258:	68fb      	ldr	r3, [r7, #12]
2400c25a:	4a64      	ldr	r2, [pc, #400]	; (2400c3ec <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2400c25c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c25e:	68fb      	ldr	r3, [r7, #12]
2400c260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c262:	b29b      	uxth	r3, r3
2400c264:	2bff      	cmp	r3, #255	; 0xff
2400c266:	d906      	bls.n	2400c276 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c268:	68fb      	ldr	r3, [r7, #12]
2400c26a:	22ff      	movs	r2, #255	; 0xff
2400c26c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c26e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c272:	61fb      	str	r3, [r7, #28]
2400c274:	e007      	b.n	2400c286 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c276:	68fb      	ldr	r3, [r7, #12]
2400c278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c27a:	b29a      	uxth	r2, r3
2400c27c:	68fb      	ldr	r3, [r7, #12]
2400c27e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c280:	68fb      	ldr	r3, [r7, #12]
2400c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c284:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c286:	68fb      	ldr	r3, [r7, #12]
2400c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c28a:	2b12      	cmp	r3, #18
2400c28c:	d10e      	bne.n	2400c2ac <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c290:	2baa      	cmp	r3, #170	; 0xaa
2400c292:	d003      	beq.n	2400c29c <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2400c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c296:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c29a:	d101      	bne.n	2400c2a0 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2400c29c:	2301      	movs	r3, #1
2400c29e:	e000      	b.n	2400c2a2 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2400c2a0:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c2a2:	2b00      	cmp	r3, #0
2400c2a4:	d102      	bne.n	2400c2ac <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c2a6:	2300      	movs	r3, #0
2400c2a8:	61bb      	str	r3, [r7, #24]
2400c2aa:	e00a      	b.n	2400c2c2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c2ac:	68f8      	ldr	r0, [r7, #12]
2400c2ae:	f002 fedd 	bl	2400f06c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c2b2:	68fb      	ldr	r3, [r7, #12]
2400c2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c2b6:	b29b      	uxth	r3, r3
2400c2b8:	2bff      	cmp	r3, #255	; 0xff
2400c2ba:	d802      	bhi.n	2400c2c2 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400c2bc:	68fb      	ldr	r3, [r7, #12]
2400c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c2c0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400c2c2:	68fb      	ldr	r3, [r7, #12]
2400c2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c2c6:	2b00      	cmp	r3, #0
2400c2c8:	d070      	beq.n	2400c3ac <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2400c2ca:	68fb      	ldr	r3, [r7, #12]
2400c2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c2ce:	2b00      	cmp	r3, #0
2400c2d0:	d020      	beq.n	2400c314 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400c2d2:	68fb      	ldr	r3, [r7, #12]
2400c2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c2d6:	4a46      	ldr	r2, [pc, #280]	; (2400c3f0 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2400c2d8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c2da:	68fb      	ldr	r3, [r7, #12]
2400c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c2de:	4a45      	ldr	r2, [pc, #276]	; (2400c3f4 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2400c2e0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c2e2:	68fb      	ldr	r3, [r7, #12]
2400c2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c2e6:	2200      	movs	r2, #0
2400c2e8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400c2ea:	68fb      	ldr	r3, [r7, #12]
2400c2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c2ee:	2200      	movs	r2, #0
2400c2f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c2f2:	68fb      	ldr	r3, [r7, #12]
2400c2f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400c2f6:	68fb      	ldr	r3, [r7, #12]
2400c2f8:	681b      	ldr	r3, [r3, #0]
2400c2fa:	3324      	adds	r3, #36	; 0x24
2400c2fc:	4619      	mov	r1, r3
2400c2fe:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400c300:	68fb      	ldr	r3, [r7, #12]
2400c302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c304:	f7f7 fcbc 	bl	24003c80 <HAL_DMA_Start_IT>
2400c308:	4603      	mov	r3, r0
2400c30a:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c30c:	7dfb      	ldrb	r3, [r7, #23]
2400c30e:	2b00      	cmp	r3, #0
2400c310:	d138      	bne.n	2400c384 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2400c312:	e013      	b.n	2400c33c <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c314:	68fb      	ldr	r3, [r7, #12]
2400c316:	2220      	movs	r2, #32
2400c318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c31c:	68fb      	ldr	r3, [r7, #12]
2400c31e:	2200      	movs	r2, #0
2400c320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c324:	68fb      	ldr	r3, [r7, #12]
2400c326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c32c:	68fb      	ldr	r3, [r7, #12]
2400c32e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c330:	68fb      	ldr	r3, [r7, #12]
2400c332:	2200      	movs	r2, #0
2400c334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c338:	2301      	movs	r3, #1
2400c33a:	e050      	b.n	2400c3de <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c33c:	68fb      	ldr	r3, [r7, #12]
2400c33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c340:	b2da      	uxtb	r2, r3
2400c342:	8979      	ldrh	r1, [r7, #10]
2400c344:	69bb      	ldr	r3, [r7, #24]
2400c346:	9300      	str	r3, [sp, #0]
2400c348:	69fb      	ldr	r3, [r7, #28]
2400c34a:	68f8      	ldr	r0, [r7, #12]
2400c34c:	f002 fd9a 	bl	2400ee84 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c350:	68fb      	ldr	r3, [r7, #12]
2400c352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c354:	b29a      	uxth	r2, r3
2400c356:	68fb      	ldr	r3, [r7, #12]
2400c358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c35a:	1ad3      	subs	r3, r2, r3
2400c35c:	b29a      	uxth	r2, r3
2400c35e:	68fb      	ldr	r3, [r7, #12]
2400c360:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c362:	68fb      	ldr	r3, [r7, #12]
2400c364:	2200      	movs	r2, #0
2400c366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c36a:	2110      	movs	r1, #16
2400c36c:	68f8      	ldr	r0, [r7, #12]
2400c36e:	f002 fdbb 	bl	2400eee8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c372:	68fb      	ldr	r3, [r7, #12]
2400c374:	681b      	ldr	r3, [r3, #0]
2400c376:	681a      	ldr	r2, [r3, #0]
2400c378:	68fb      	ldr	r3, [r7, #12]
2400c37a:	681b      	ldr	r3, [r3, #0]
2400c37c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400c380:	601a      	str	r2, [r3, #0]
2400c382:	e029      	b.n	2400c3d8 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c384:	68fb      	ldr	r3, [r7, #12]
2400c386:	2220      	movs	r2, #32
2400c388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c38c:	68fb      	ldr	r3, [r7, #12]
2400c38e:	2200      	movs	r2, #0
2400c390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c394:	68fb      	ldr	r3, [r7, #12]
2400c396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c398:	f043 0210 	orr.w	r2, r3, #16
2400c39c:	68fb      	ldr	r3, [r7, #12]
2400c39e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c3a0:	68fb      	ldr	r3, [r7, #12]
2400c3a2:	2200      	movs	r2, #0
2400c3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c3a8:	2301      	movs	r3, #1
2400c3aa:	e018      	b.n	2400c3de <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c3ac:	68fb      	ldr	r3, [r7, #12]
2400c3ae:	4a12      	ldr	r2, [pc, #72]	; (2400c3f8 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2400c3b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c3b2:	68fb      	ldr	r3, [r7, #12]
2400c3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c3b6:	b2da      	uxtb	r2, r3
2400c3b8:	8979      	ldrh	r1, [r7, #10]
2400c3ba:	4b0b      	ldr	r3, [pc, #44]	; (2400c3e8 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400c3bc:	9300      	str	r3, [sp, #0]
2400c3be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c3c2:	68f8      	ldr	r0, [r7, #12]
2400c3c4:	f002 fd5e 	bl	2400ee84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c3c8:	68fb      	ldr	r3, [r7, #12]
2400c3ca:	2200      	movs	r2, #0
2400c3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c3d0:	2101      	movs	r1, #1
2400c3d2:	68f8      	ldr	r0, [r7, #12]
2400c3d4:	f002 fd88 	bl	2400eee8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c3d8:	2300      	movs	r3, #0
2400c3da:	e000      	b.n	2400c3de <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400c3dc:	2302      	movs	r3, #2
  }
}
2400c3de:	4618      	mov	r0, r3
2400c3e0:	3720      	adds	r7, #32
2400c3e2:	46bd      	mov	sp, r7
2400c3e4:	bd80      	pop	{r7, pc}
2400c3e6:	bf00      	nop
2400c3e8:	80002400 	.word	0x80002400
2400c3ec:	2400d31d 	.word	0x2400d31d
2400c3f0:	2400e595 	.word	0x2400e595
2400c3f4:	2400e791 	.word	0x2400e791
2400c3f8:	2400cec7 	.word	0x2400cec7

2400c3fc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400c3fc:	b580      	push	{r7, lr}
2400c3fe:	b084      	sub	sp, #16
2400c400:	af00      	add	r7, sp, #0
2400c402:	60f8      	str	r0, [r7, #12]
2400c404:	60b9      	str	r1, [r7, #8]
2400c406:	603b      	str	r3, [r7, #0]
2400c408:	4613      	mov	r3, r2
2400c40a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c40c:	68fb      	ldr	r3, [r7, #12]
2400c40e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c412:	b2db      	uxtb	r3, r3
2400c414:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c418:	2b28      	cmp	r3, #40	; 0x28
2400c41a:	f040 808a 	bne.w	2400c532 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400c41e:	68bb      	ldr	r3, [r7, #8]
2400c420:	2b00      	cmp	r3, #0
2400c422:	d002      	beq.n	2400c42a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2400c424:	88fb      	ldrh	r3, [r7, #6]
2400c426:	2b00      	cmp	r3, #0
2400c428:	d105      	bne.n	2400c436 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c42a:	68fb      	ldr	r3, [r7, #12]
2400c42c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c430:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c432:	2301      	movs	r3, #1
2400c434:	e07e      	b.n	2400c534 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400c436:	f248 0101 	movw	r1, #32769	; 0x8001
2400c43a:	68f8      	ldr	r0, [r7, #12]
2400c43c:	f002 fdb8 	bl	2400efb0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c440:	68fb      	ldr	r3, [r7, #12]
2400c442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c446:	2b01      	cmp	r3, #1
2400c448:	d101      	bne.n	2400c44e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2400c44a:	2302      	movs	r3, #2
2400c44c:	e072      	b.n	2400c534 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
2400c44e:	68fb      	ldr	r3, [r7, #12]
2400c450:	2201      	movs	r2, #1
2400c452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400c456:	68fb      	ldr	r3, [r7, #12]
2400c458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c45c:	b2db      	uxtb	r3, r3
2400c45e:	2b2a      	cmp	r3, #42	; 0x2a
2400c460:	d12a      	bne.n	2400c4b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c462:	2102      	movs	r1, #2
2400c464:	68f8      	ldr	r0, [r7, #12]
2400c466:	f002 fda3 	bl	2400efb0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400c46a:	68fb      	ldr	r3, [r7, #12]
2400c46c:	681b      	ldr	r3, [r3, #0]
2400c46e:	681b      	ldr	r3, [r3, #0]
2400c470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c478:	d11e      	bne.n	2400c4b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400c47a:	68fb      	ldr	r3, [r7, #12]
2400c47c:	681b      	ldr	r3, [r3, #0]
2400c47e:	681a      	ldr	r2, [r3, #0]
2400c480:	68fb      	ldr	r3, [r7, #12]
2400c482:	681b      	ldr	r3, [r3, #0]
2400c484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c488:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2400c48a:	68fb      	ldr	r3, [r7, #12]
2400c48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c48e:	2b00      	cmp	r3, #0
2400c490:	d012      	beq.n	2400c4b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400c492:	68fb      	ldr	r3, [r7, #12]
2400c494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c496:	4a29      	ldr	r2, [pc, #164]	; (2400c53c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
2400c498:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400c49a:	68fb      	ldr	r3, [r7, #12]
2400c49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c49e:	4618      	mov	r0, r3
2400c4a0:	f7f8 f976 	bl	24004790 <HAL_DMA_Abort_IT>
2400c4a4:	4603      	mov	r3, r0
2400c4a6:	2b00      	cmp	r3, #0
2400c4a8:	d006      	beq.n	2400c4b8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400c4aa:	68fb      	ldr	r3, [r7, #12]
2400c4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c4b0:	68fa      	ldr	r2, [r7, #12]
2400c4b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400c4b4:	4610      	mov	r0, r2
2400c4b6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400c4b8:	68fb      	ldr	r3, [r7, #12]
2400c4ba:	2229      	movs	r2, #41	; 0x29
2400c4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c4c0:	68fb      	ldr	r3, [r7, #12]
2400c4c2:	2220      	movs	r2, #32
2400c4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c4c8:	68fb      	ldr	r3, [r7, #12]
2400c4ca:	2200      	movs	r2, #0
2400c4cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c4ce:	68fb      	ldr	r3, [r7, #12]
2400c4d0:	681b      	ldr	r3, [r3, #0]
2400c4d2:	685a      	ldr	r2, [r3, #4]
2400c4d4:	68fb      	ldr	r3, [r7, #12]
2400c4d6:	681b      	ldr	r3, [r3, #0]
2400c4d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c4dc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c4de:	68fb      	ldr	r3, [r7, #12]
2400c4e0:	68ba      	ldr	r2, [r7, #8]
2400c4e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c4e4:	68fb      	ldr	r3, [r7, #12]
2400c4e6:	88fa      	ldrh	r2, [r7, #6]
2400c4e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c4ea:	68fb      	ldr	r3, [r7, #12]
2400c4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c4ee:	b29a      	uxth	r2, r3
2400c4f0:	68fb      	ldr	r3, [r7, #12]
2400c4f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c4f4:	68fb      	ldr	r3, [r7, #12]
2400c4f6:	683a      	ldr	r2, [r7, #0]
2400c4f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c4fa:	68fb      	ldr	r3, [r7, #12]
2400c4fc:	4a10      	ldr	r2, [pc, #64]	; (2400c540 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
2400c4fe:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400c500:	68fb      	ldr	r3, [r7, #12]
2400c502:	681b      	ldr	r3, [r3, #0]
2400c504:	699b      	ldr	r3, [r3, #24]
2400c506:	0c1b      	lsrs	r3, r3, #16
2400c508:	b2db      	uxtb	r3, r3
2400c50a:	f003 0301 	and.w	r3, r3, #1
2400c50e:	b2db      	uxtb	r3, r3
2400c510:	2b01      	cmp	r3, #1
2400c512:	d103      	bne.n	2400c51c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c514:	68fb      	ldr	r3, [r7, #12]
2400c516:	681b      	ldr	r3, [r3, #0]
2400c518:	2208      	movs	r2, #8
2400c51a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c51c:	68fb      	ldr	r3, [r7, #12]
2400c51e:	2200      	movs	r2, #0
2400c520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400c524:	f248 0101 	movw	r1, #32769	; 0x8001
2400c528:	68f8      	ldr	r0, [r7, #12]
2400c52a:	f002 fcdd 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400c52e:	2300      	movs	r3, #0
2400c530:	e000      	b.n	2400c534 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400c532:	2301      	movs	r3, #1
  }
}
2400c534:	4618      	mov	r0, r3
2400c536:	3710      	adds	r7, #16
2400c538:	46bd      	mov	sp, r7
2400c53a:	bd80      	pop	{r7, pc}
2400c53c:	2400ea05 	.word	0x2400ea05
2400c540:	2400d117 	.word	0x2400d117

2400c544 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2400c544:	b580      	push	{r7, lr}
2400c546:	b086      	sub	sp, #24
2400c548:	af00      	add	r7, sp, #0
2400c54a:	60f8      	str	r0, [r7, #12]
2400c54c:	60b9      	str	r1, [r7, #8]
2400c54e:	603b      	str	r3, [r7, #0]
2400c550:	4613      	mov	r3, r2
2400c552:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c554:	68fb      	ldr	r3, [r7, #12]
2400c556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c55a:	b2db      	uxtb	r3, r3
2400c55c:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c560:	2b28      	cmp	r3, #40	; 0x28
2400c562:	f040 811a 	bne.w	2400c79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400c566:	68bb      	ldr	r3, [r7, #8]
2400c568:	2b00      	cmp	r3, #0
2400c56a:	d002      	beq.n	2400c572 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2400c56c:	88fb      	ldrh	r3, [r7, #6]
2400c56e:	2b00      	cmp	r3, #0
2400c570:	d105      	bne.n	2400c57e <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c572:	68fb      	ldr	r3, [r7, #12]
2400c574:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c578:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c57a:	2301      	movs	r3, #1
2400c57c:	e10e      	b.n	2400c79c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c57e:	68fb      	ldr	r3, [r7, #12]
2400c580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c584:	2b01      	cmp	r3, #1
2400c586:	d101      	bne.n	2400c58c <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2400c588:	2302      	movs	r3, #2
2400c58a:	e107      	b.n	2400c79c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
2400c58c:	68fb      	ldr	r3, [r7, #12]
2400c58e:	2201      	movs	r2, #1
2400c590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400c594:	f248 0101 	movw	r1, #32769	; 0x8001
2400c598:	68f8      	ldr	r0, [r7, #12]
2400c59a:	f002 fd09 	bl	2400efb0 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400c59e:	68fb      	ldr	r3, [r7, #12]
2400c5a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c5a4:	b2db      	uxtb	r3, r3
2400c5a6:	2b2a      	cmp	r3, #42	; 0x2a
2400c5a8:	d12b      	bne.n	2400c602 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c5aa:	2102      	movs	r1, #2
2400c5ac:	68f8      	ldr	r0, [r7, #12]
2400c5ae:	f002 fcff 	bl	2400efb0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400c5b2:	68fb      	ldr	r3, [r7, #12]
2400c5b4:	681b      	ldr	r3, [r3, #0]
2400c5b6:	681b      	ldr	r3, [r3, #0]
2400c5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c5c0:	d14c      	bne.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400c5c2:	68fb      	ldr	r3, [r7, #12]
2400c5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c5c6:	2b00      	cmp	r3, #0
2400c5c8:	d048      	beq.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400c5ca:	68fb      	ldr	r3, [r7, #12]
2400c5cc:	681b      	ldr	r3, [r3, #0]
2400c5ce:	681a      	ldr	r2, [r3, #0]
2400c5d0:	68fb      	ldr	r3, [r7, #12]
2400c5d2:	681b      	ldr	r3, [r3, #0]
2400c5d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c5d8:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400c5da:	68fb      	ldr	r3, [r7, #12]
2400c5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c5de:	4a71      	ldr	r2, [pc, #452]	; (2400c7a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400c5e0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400c5e2:	68fb      	ldr	r3, [r7, #12]
2400c5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c5e6:	4618      	mov	r0, r3
2400c5e8:	f7f8 f8d2 	bl	24004790 <HAL_DMA_Abort_IT>
2400c5ec:	4603      	mov	r3, r0
2400c5ee:	2b00      	cmp	r3, #0
2400c5f0:	d034      	beq.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400c5f2:	68fb      	ldr	r3, [r7, #12]
2400c5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c5f8:	68fa      	ldr	r2, [r7, #12]
2400c5fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400c5fc:	4610      	mov	r0, r2
2400c5fe:	4798      	blx	r3
2400c600:	e02c      	b.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400c602:	68fb      	ldr	r3, [r7, #12]
2400c604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c608:	b2db      	uxtb	r3, r3
2400c60a:	2b29      	cmp	r3, #41	; 0x29
2400c60c:	d126      	bne.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400c60e:	68fb      	ldr	r3, [r7, #12]
2400c610:	681b      	ldr	r3, [r3, #0]
2400c612:	681b      	ldr	r3, [r3, #0]
2400c614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400c618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400c61c:	d11e      	bne.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400c61e:	68fb      	ldr	r3, [r7, #12]
2400c620:	681b      	ldr	r3, [r3, #0]
2400c622:	681a      	ldr	r2, [r3, #0]
2400c624:	68fb      	ldr	r3, [r7, #12]
2400c626:	681b      	ldr	r3, [r3, #0]
2400c628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400c62c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400c62e:	68fb      	ldr	r3, [r7, #12]
2400c630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c632:	2b00      	cmp	r3, #0
2400c634:	d012      	beq.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400c636:	68fb      	ldr	r3, [r7, #12]
2400c638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c63a:	4a5a      	ldr	r2, [pc, #360]	; (2400c7a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400c63c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400c63e:	68fb      	ldr	r3, [r7, #12]
2400c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c642:	4618      	mov	r0, r3
2400c644:	f7f8 f8a4 	bl	24004790 <HAL_DMA_Abort_IT>
2400c648:	4603      	mov	r3, r0
2400c64a:	2b00      	cmp	r3, #0
2400c64c:	d006      	beq.n	2400c65c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400c64e:	68fb      	ldr	r3, [r7, #12]
2400c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c654:	68fa      	ldr	r2, [r7, #12]
2400c656:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400c658:	4610      	mov	r0, r2
2400c65a:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400c65c:	68fb      	ldr	r3, [r7, #12]
2400c65e:	2229      	movs	r2, #41	; 0x29
2400c660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c664:	68fb      	ldr	r3, [r7, #12]
2400c666:	2220      	movs	r2, #32
2400c668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c66c:	68fb      	ldr	r3, [r7, #12]
2400c66e:	2200      	movs	r2, #0
2400c670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c672:	68fb      	ldr	r3, [r7, #12]
2400c674:	681b      	ldr	r3, [r3, #0]
2400c676:	685a      	ldr	r2, [r3, #4]
2400c678:	68fb      	ldr	r3, [r7, #12]
2400c67a:	681b      	ldr	r3, [r3, #0]
2400c67c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c680:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c682:	68fb      	ldr	r3, [r7, #12]
2400c684:	68ba      	ldr	r2, [r7, #8]
2400c686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c688:	68fb      	ldr	r3, [r7, #12]
2400c68a:	88fa      	ldrh	r2, [r7, #6]
2400c68c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c68e:	68fb      	ldr	r3, [r7, #12]
2400c690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c692:	b29a      	uxth	r2, r3
2400c694:	68fb      	ldr	r3, [r7, #12]
2400c696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c698:	68fb      	ldr	r3, [r7, #12]
2400c69a:	683a      	ldr	r2, [r7, #0]
2400c69c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400c69e:	68fb      	ldr	r3, [r7, #12]
2400c6a0:	4a41      	ldr	r2, [pc, #260]	; (2400c7a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x264>)
2400c6a2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400c6a4:	68fb      	ldr	r3, [r7, #12]
2400c6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6a8:	2b00      	cmp	r3, #0
2400c6aa:	d020      	beq.n	2400c6ee <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400c6ac:	68fb      	ldr	r3, [r7, #12]
2400c6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6b0:	4a3e      	ldr	r2, [pc, #248]	; (2400c7ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
2400c6b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c6b4:	68fb      	ldr	r3, [r7, #12]
2400c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6b8:	4a3d      	ldr	r2, [pc, #244]	; (2400c7b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
2400c6ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c6bc:	68fb      	ldr	r3, [r7, #12]
2400c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6c0:	2200      	movs	r2, #0
2400c6c2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400c6c4:	68fb      	ldr	r3, [r7, #12]
2400c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6c8:	2200      	movs	r2, #0
2400c6ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c6cc:	68fb      	ldr	r3, [r7, #12]
2400c6ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c6d0:	68b9      	ldr	r1, [r7, #8]
2400c6d2:	68fb      	ldr	r3, [r7, #12]
2400c6d4:	681b      	ldr	r3, [r3, #0]
2400c6d6:	3328      	adds	r3, #40	; 0x28
2400c6d8:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400c6da:	68fb      	ldr	r3, [r7, #12]
2400c6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c6de:	f7f7 facf 	bl	24003c80 <HAL_DMA_Start_IT>
2400c6e2:	4603      	mov	r3, r0
2400c6e4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c6e6:	7dfb      	ldrb	r3, [r7, #23]
2400c6e8:	2b00      	cmp	r3, #0
2400c6ea:	d12b      	bne.n	2400c744 <HAL_I2C_Slave_Seq_Transmit_DMA+0x200>
2400c6ec:	e013      	b.n	2400c716 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c6ee:	68fb      	ldr	r3, [r7, #12]
2400c6f0:	2228      	movs	r2, #40	; 0x28
2400c6f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c6f6:	68fb      	ldr	r3, [r7, #12]
2400c6f8:	2200      	movs	r2, #0
2400c6fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c6fe:	68fb      	ldr	r3, [r7, #12]
2400c700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c702:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c706:	68fb      	ldr	r3, [r7, #12]
2400c708:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c70a:	68fb      	ldr	r3, [r7, #12]
2400c70c:	2200      	movs	r2, #0
2400c70e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c712:	2301      	movs	r3, #1
2400c714:	e042      	b.n	2400c79c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400c716:	68fb      	ldr	r3, [r7, #12]
2400c718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c71a:	b29a      	uxth	r2, r3
2400c71c:	68fb      	ldr	r3, [r7, #12]
2400c71e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c720:	1ad3      	subs	r3, r2, r3
2400c722:	b29a      	uxth	r2, r3
2400c724:	68fb      	ldr	r3, [r7, #12]
2400c726:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400c728:	68fb      	ldr	r3, [r7, #12]
2400c72a:	2200      	movs	r2, #0
2400c72c:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400c72e:	68fb      	ldr	r3, [r7, #12]
2400c730:	681b      	ldr	r3, [r3, #0]
2400c732:	699b      	ldr	r3, [r3, #24]
2400c734:	0c1b      	lsrs	r3, r3, #16
2400c736:	b2db      	uxtb	r3, r3
2400c738:	f003 0301 	and.w	r3, r3, #1
2400c73c:	b2db      	uxtb	r3, r3
2400c73e:	2b01      	cmp	r3, #1
2400c740:	d118      	bne.n	2400c774 <HAL_I2C_Slave_Seq_Transmit_DMA+0x230>
2400c742:	e013      	b.n	2400c76c <HAL_I2C_Slave_Seq_Transmit_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c744:	68fb      	ldr	r3, [r7, #12]
2400c746:	2228      	movs	r2, #40	; 0x28
2400c748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c74c:	68fb      	ldr	r3, [r7, #12]
2400c74e:	2200      	movs	r2, #0
2400c750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c754:	68fb      	ldr	r3, [r7, #12]
2400c756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c758:	f043 0210 	orr.w	r2, r3, #16
2400c75c:	68fb      	ldr	r3, [r7, #12]
2400c75e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c760:	68fb      	ldr	r3, [r7, #12]
2400c762:	2200      	movs	r2, #0
2400c764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c768:	2301      	movs	r3, #1
2400c76a:	e017      	b.n	2400c79c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c76c:	68fb      	ldr	r3, [r7, #12]
2400c76e:	681b      	ldr	r3, [r3, #0]
2400c770:	2208      	movs	r2, #8
2400c772:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c774:	68fb      	ldr	r3, [r7, #12]
2400c776:	2200      	movs	r2, #0
2400c778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c77c:	68fb      	ldr	r3, [r7, #12]
2400c77e:	681b      	ldr	r3, [r3, #0]
2400c780:	681a      	ldr	r2, [r3, #0]
2400c782:	68fb      	ldr	r3, [r7, #12]
2400c784:	681b      	ldr	r3, [r3, #0]
2400c786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c78a:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c78c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c790:	68f8      	ldr	r0, [r7, #12]
2400c792:	f002 fba9 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400c796:	2300      	movs	r3, #0
2400c798:	e000      	b.n	2400c79c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400c79a:	2301      	movs	r3, #1
  }
}
2400c79c:	4618      	mov	r0, r3
2400c79e:	3718      	adds	r7, #24
2400c7a0:	46bd      	mov	sp, r7
2400c7a2:	bd80      	pop	{r7, pc}
2400c7a4:	2400ea05 	.word	0x2400ea05
2400c7a8:	2400d505 	.word	0x2400d505
2400c7ac:	2400e555 	.word	0x2400e555
2400c7b0:	2400e791 	.word	0x2400e791

2400c7b4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2400c7b4:	b580      	push	{r7, lr}
2400c7b6:	b084      	sub	sp, #16
2400c7b8:	af00      	add	r7, sp, #0
2400c7ba:	60f8      	str	r0, [r7, #12]
2400c7bc:	60b9      	str	r1, [r7, #8]
2400c7be:	603b      	str	r3, [r7, #0]
2400c7c0:	4613      	mov	r3, r2
2400c7c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c7c4:	68fb      	ldr	r3, [r7, #12]
2400c7c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c7ca:	b2db      	uxtb	r3, r3
2400c7cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c7d0:	2b28      	cmp	r3, #40	; 0x28
2400c7d2:	f040 808a 	bne.w	2400c8ea <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400c7d6:	68bb      	ldr	r3, [r7, #8]
2400c7d8:	2b00      	cmp	r3, #0
2400c7da:	d002      	beq.n	2400c7e2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2400c7dc:	88fb      	ldrh	r3, [r7, #6]
2400c7de:	2b00      	cmp	r3, #0
2400c7e0:	d105      	bne.n	2400c7ee <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c7e2:	68fb      	ldr	r3, [r7, #12]
2400c7e4:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c7e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c7ea:	2301      	movs	r3, #1
2400c7ec:	e07e      	b.n	2400c8ec <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400c7ee:	f248 0102 	movw	r1, #32770	; 0x8002
2400c7f2:	68f8      	ldr	r0, [r7, #12]
2400c7f4:	f002 fbdc 	bl	2400efb0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c7f8:	68fb      	ldr	r3, [r7, #12]
2400c7fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c7fe:	2b01      	cmp	r3, #1
2400c800:	d101      	bne.n	2400c806 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2400c802:	2302      	movs	r3, #2
2400c804:	e072      	b.n	2400c8ec <HAL_I2C_Slave_Seq_Receive_IT+0x138>
2400c806:	68fb      	ldr	r3, [r7, #12]
2400c808:	2201      	movs	r2, #1
2400c80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400c80e:	68fb      	ldr	r3, [r7, #12]
2400c810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c814:	b2db      	uxtb	r3, r3
2400c816:	2b29      	cmp	r3, #41	; 0x29
2400c818:	d12a      	bne.n	2400c870 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c81a:	2101      	movs	r1, #1
2400c81c:	68f8      	ldr	r0, [r7, #12]
2400c81e:	f002 fbc7 	bl	2400efb0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400c822:	68fb      	ldr	r3, [r7, #12]
2400c824:	681b      	ldr	r3, [r3, #0]
2400c826:	681b      	ldr	r3, [r3, #0]
2400c828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400c82c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400c830:	d11e      	bne.n	2400c870 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400c832:	68fb      	ldr	r3, [r7, #12]
2400c834:	681b      	ldr	r3, [r3, #0]
2400c836:	681a      	ldr	r2, [r3, #0]
2400c838:	68fb      	ldr	r3, [r7, #12]
2400c83a:	681b      	ldr	r3, [r3, #0]
2400c83c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400c840:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400c842:	68fb      	ldr	r3, [r7, #12]
2400c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c846:	2b00      	cmp	r3, #0
2400c848:	d012      	beq.n	2400c870 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400c84a:	68fb      	ldr	r3, [r7, #12]
2400c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c84e:	4a29      	ldr	r2, [pc, #164]	; (2400c8f4 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
2400c850:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400c852:	68fb      	ldr	r3, [r7, #12]
2400c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c856:	4618      	mov	r0, r3
2400c858:	f7f7 ff9a 	bl	24004790 <HAL_DMA_Abort_IT>
2400c85c:	4603      	mov	r3, r0
2400c85e:	2b00      	cmp	r3, #0
2400c860:	d006      	beq.n	2400c870 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400c862:	68fb      	ldr	r3, [r7, #12]
2400c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c868:	68fa      	ldr	r2, [r7, #12]
2400c86a:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400c86c:	4610      	mov	r0, r2
2400c86e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400c870:	68fb      	ldr	r3, [r7, #12]
2400c872:	222a      	movs	r2, #42	; 0x2a
2400c874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c878:	68fb      	ldr	r3, [r7, #12]
2400c87a:	2220      	movs	r2, #32
2400c87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c880:	68fb      	ldr	r3, [r7, #12]
2400c882:	2200      	movs	r2, #0
2400c884:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c886:	68fb      	ldr	r3, [r7, #12]
2400c888:	681b      	ldr	r3, [r3, #0]
2400c88a:	685a      	ldr	r2, [r3, #4]
2400c88c:	68fb      	ldr	r3, [r7, #12]
2400c88e:	681b      	ldr	r3, [r3, #0]
2400c890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c894:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c896:	68fb      	ldr	r3, [r7, #12]
2400c898:	68ba      	ldr	r2, [r7, #8]
2400c89a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c89c:	68fb      	ldr	r3, [r7, #12]
2400c89e:	88fa      	ldrh	r2, [r7, #6]
2400c8a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c8a2:	68fb      	ldr	r3, [r7, #12]
2400c8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c8a6:	b29a      	uxth	r2, r3
2400c8a8:	68fb      	ldr	r3, [r7, #12]
2400c8aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c8ac:	68fb      	ldr	r3, [r7, #12]
2400c8ae:	683a      	ldr	r2, [r7, #0]
2400c8b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c8b2:	68fb      	ldr	r3, [r7, #12]
2400c8b4:	4a10      	ldr	r2, [pc, #64]	; (2400c8f8 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
2400c8b6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400c8b8:	68fb      	ldr	r3, [r7, #12]
2400c8ba:	681b      	ldr	r3, [r3, #0]
2400c8bc:	699b      	ldr	r3, [r3, #24]
2400c8be:	0c1b      	lsrs	r3, r3, #16
2400c8c0:	b2db      	uxtb	r3, r3
2400c8c2:	f003 0301 	and.w	r3, r3, #1
2400c8c6:	b2db      	uxtb	r3, r3
2400c8c8:	2b00      	cmp	r3, #0
2400c8ca:	d103      	bne.n	2400c8d4 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c8cc:	68fb      	ldr	r3, [r7, #12]
2400c8ce:	681b      	ldr	r3, [r3, #0]
2400c8d0:	2208      	movs	r2, #8
2400c8d2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c8d4:	68fb      	ldr	r3, [r7, #12]
2400c8d6:	2200      	movs	r2, #0
2400c8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400c8dc:	f248 0102 	movw	r1, #32770	; 0x8002
2400c8e0:	68f8      	ldr	r0, [r7, #12]
2400c8e2:	f002 fb01 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400c8e6:	2300      	movs	r3, #0
2400c8e8:	e000      	b.n	2400c8ec <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400c8ea:	2301      	movs	r3, #1
  }
}
2400c8ec:	4618      	mov	r0, r3
2400c8ee:	3710      	adds	r7, #16
2400c8f0:	46bd      	mov	sp, r7
2400c8f2:	bd80      	pop	{r7, pc}
2400c8f4:	2400ea05 	.word	0x2400ea05
2400c8f8:	2400d117 	.word	0x2400d117

2400c8fc <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400c8fc:	b580      	push	{r7, lr}
2400c8fe:	b086      	sub	sp, #24
2400c900:	af00      	add	r7, sp, #0
2400c902:	60f8      	str	r0, [r7, #12]
2400c904:	60b9      	str	r1, [r7, #8]
2400c906:	603b      	str	r3, [r7, #0]
2400c908:	4613      	mov	r3, r2
2400c90a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c90c:	68fb      	ldr	r3, [r7, #12]
2400c90e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c912:	b2db      	uxtb	r3, r3
2400c914:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c918:	2b28      	cmp	r3, #40	; 0x28
2400c91a:	f040 811a 	bne.w	2400cb52 <HAL_I2C_Slave_Seq_Receive_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400c91e:	68bb      	ldr	r3, [r7, #8]
2400c920:	2b00      	cmp	r3, #0
2400c922:	d002      	beq.n	2400c92a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2400c924:	88fb      	ldrh	r3, [r7, #6]
2400c926:	2b00      	cmp	r3, #0
2400c928:	d105      	bne.n	2400c936 <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c92a:	68fb      	ldr	r3, [r7, #12]
2400c92c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c930:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c932:	2301      	movs	r3, #1
2400c934:	e10e      	b.n	2400cb54 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400c936:	f248 0102 	movw	r1, #32770	; 0x8002
2400c93a:	68f8      	ldr	r0, [r7, #12]
2400c93c:	f002 fb38 	bl	2400efb0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c940:	68fb      	ldr	r3, [r7, #12]
2400c942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c946:	2b01      	cmp	r3, #1
2400c948:	d101      	bne.n	2400c94e <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2400c94a:	2302      	movs	r3, #2
2400c94c:	e102      	b.n	2400cb54 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
2400c94e:	68fb      	ldr	r3, [r7, #12]
2400c950:	2201      	movs	r2, #1
2400c952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400c956:	68fb      	ldr	r3, [r7, #12]
2400c958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c95c:	b2db      	uxtb	r3, r3
2400c95e:	2b29      	cmp	r3, #41	; 0x29
2400c960:	d12b      	bne.n	2400c9ba <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c962:	2101      	movs	r1, #1
2400c964:	68f8      	ldr	r0, [r7, #12]
2400c966:	f002 fb23 	bl	2400efb0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400c96a:	68fb      	ldr	r3, [r7, #12]
2400c96c:	681b      	ldr	r3, [r3, #0]
2400c96e:	681b      	ldr	r3, [r3, #0]
2400c970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400c974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400c978:	d14c      	bne.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400c97a:	68fb      	ldr	r3, [r7, #12]
2400c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c97e:	2b00      	cmp	r3, #0
2400c980:	d048      	beq.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400c982:	68fb      	ldr	r3, [r7, #12]
2400c984:	681b      	ldr	r3, [r3, #0]
2400c986:	681a      	ldr	r2, [r3, #0]
2400c988:	68fb      	ldr	r3, [r7, #12]
2400c98a:	681b      	ldr	r3, [r3, #0]
2400c98c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400c990:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400c992:	68fb      	ldr	r3, [r7, #12]
2400c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c996:	4a71      	ldr	r2, [pc, #452]	; (2400cb5c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400c998:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400c99a:	68fb      	ldr	r3, [r7, #12]
2400c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c99e:	4618      	mov	r0, r3
2400c9a0:	f7f7 fef6 	bl	24004790 <HAL_DMA_Abort_IT>
2400c9a4:	4603      	mov	r3, r0
2400c9a6:	2b00      	cmp	r3, #0
2400c9a8:	d034      	beq.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400c9aa:	68fb      	ldr	r3, [r7, #12]
2400c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c9b0:	68fa      	ldr	r2, [r7, #12]
2400c9b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400c9b4:	4610      	mov	r0, r2
2400c9b6:	4798      	blx	r3
2400c9b8:	e02c      	b.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400c9ba:	68fb      	ldr	r3, [r7, #12]
2400c9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c9c0:	b2db      	uxtb	r3, r3
2400c9c2:	2b2a      	cmp	r3, #42	; 0x2a
2400c9c4:	d126      	bne.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400c9c6:	68fb      	ldr	r3, [r7, #12]
2400c9c8:	681b      	ldr	r3, [r3, #0]
2400c9ca:	681b      	ldr	r3, [r3, #0]
2400c9cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c9d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c9d4:	d11e      	bne.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400c9d6:	68fb      	ldr	r3, [r7, #12]
2400c9d8:	681b      	ldr	r3, [r3, #0]
2400c9da:	681a      	ldr	r2, [r3, #0]
2400c9dc:	68fb      	ldr	r3, [r7, #12]
2400c9de:	681b      	ldr	r3, [r3, #0]
2400c9e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c9e4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400c9e6:	68fb      	ldr	r3, [r7, #12]
2400c9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c9ea:	2b00      	cmp	r3, #0
2400c9ec:	d012      	beq.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400c9ee:	68fb      	ldr	r3, [r7, #12]
2400c9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c9f2:	4a5a      	ldr	r2, [pc, #360]	; (2400cb5c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400c9f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400c9f6:	68fb      	ldr	r3, [r7, #12]
2400c9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c9fa:	4618      	mov	r0, r3
2400c9fc:	f7f7 fec8 	bl	24004790 <HAL_DMA_Abort_IT>
2400ca00:	4603      	mov	r3, r0
2400ca02:	2b00      	cmp	r3, #0
2400ca04:	d006      	beq.n	2400ca14 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400ca06:	68fb      	ldr	r3, [r7, #12]
2400ca08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ca0c:	68fa      	ldr	r2, [r7, #12]
2400ca0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400ca10:	4610      	mov	r0, r2
2400ca12:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400ca14:	68fb      	ldr	r3, [r7, #12]
2400ca16:	222a      	movs	r2, #42	; 0x2a
2400ca18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400ca1c:	68fb      	ldr	r3, [r7, #12]
2400ca1e:	2220      	movs	r2, #32
2400ca20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ca24:	68fb      	ldr	r3, [r7, #12]
2400ca26:	2200      	movs	r2, #0
2400ca28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400ca2a:	68fb      	ldr	r3, [r7, #12]
2400ca2c:	681b      	ldr	r3, [r3, #0]
2400ca2e:	685a      	ldr	r2, [r3, #4]
2400ca30:	68fb      	ldr	r3, [r7, #12]
2400ca32:	681b      	ldr	r3, [r3, #0]
2400ca34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ca38:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ca3a:	68fb      	ldr	r3, [r7, #12]
2400ca3c:	68ba      	ldr	r2, [r7, #8]
2400ca3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ca40:	68fb      	ldr	r3, [r7, #12]
2400ca42:	88fa      	ldrh	r2, [r7, #6]
2400ca44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400ca46:	68fb      	ldr	r3, [r7, #12]
2400ca48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ca4a:	b29a      	uxth	r2, r3
2400ca4c:	68fb      	ldr	r3, [r7, #12]
2400ca4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400ca50:	68fb      	ldr	r3, [r7, #12]
2400ca52:	683a      	ldr	r2, [r7, #0]
2400ca54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400ca56:	68fb      	ldr	r3, [r7, #12]
2400ca58:	4a41      	ldr	r2, [pc, #260]	; (2400cb60 <HAL_I2C_Slave_Seq_Receive_DMA+0x264>)
2400ca5a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400ca5c:	68fb      	ldr	r3, [r7, #12]
2400ca5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca60:	2b00      	cmp	r3, #0
2400ca62:	d020      	beq.n	2400caa6 <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400ca64:	68fb      	ldr	r3, [r7, #12]
2400ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca68:	4a3e      	ldr	r2, [pc, #248]	; (2400cb64 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
2400ca6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400ca6c:	68fb      	ldr	r3, [r7, #12]
2400ca6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca70:	4a3d      	ldr	r2, [pc, #244]	; (2400cb68 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
2400ca72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400ca74:	68fb      	ldr	r3, [r7, #12]
2400ca76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca78:	2200      	movs	r2, #0
2400ca7a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400ca7c:	68fb      	ldr	r3, [r7, #12]
2400ca7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca80:	2200      	movs	r2, #0
2400ca82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400ca84:	68fb      	ldr	r3, [r7, #12]
2400ca86:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400ca88:	68fb      	ldr	r3, [r7, #12]
2400ca8a:	681b      	ldr	r3, [r3, #0]
2400ca8c:	3324      	adds	r3, #36	; 0x24
2400ca8e:	4619      	mov	r1, r3
2400ca90:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2400ca92:	68fb      	ldr	r3, [r7, #12]
2400ca94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400ca96:	f7f7 f8f3 	bl	24003c80 <HAL_DMA_Start_IT>
2400ca9a:	4603      	mov	r3, r0
2400ca9c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400ca9e:	7dfb      	ldrb	r3, [r7, #23]
2400caa0:	2b00      	cmp	r3, #0
2400caa2:	d12b      	bne.n	2400cafc <HAL_I2C_Slave_Seq_Receive_DMA+0x200>
2400caa4:	e013      	b.n	2400cace <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400caa6:	68fb      	ldr	r3, [r7, #12]
2400caa8:	2228      	movs	r2, #40	; 0x28
2400caaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400caae:	68fb      	ldr	r3, [r7, #12]
2400cab0:	2200      	movs	r2, #0
2400cab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400cab6:	68fb      	ldr	r3, [r7, #12]
2400cab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400caba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400cabe:	68fb      	ldr	r3, [r7, #12]
2400cac0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cac2:	68fb      	ldr	r3, [r7, #12]
2400cac4:	2200      	movs	r2, #0
2400cac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400caca:	2301      	movs	r3, #1
2400cacc:	e042      	b.n	2400cb54 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400cace:	68fb      	ldr	r3, [r7, #12]
2400cad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cad2:	b29a      	uxth	r2, r3
2400cad4:	68fb      	ldr	r3, [r7, #12]
2400cad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cad8:	1ad3      	subs	r3, r2, r3
2400cada:	b29a      	uxth	r2, r3
2400cadc:	68fb      	ldr	r3, [r7, #12]
2400cade:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400cae0:	68fb      	ldr	r3, [r7, #12]
2400cae2:	2200      	movs	r2, #0
2400cae4:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400cae6:	68fb      	ldr	r3, [r7, #12]
2400cae8:	681b      	ldr	r3, [r3, #0]
2400caea:	699b      	ldr	r3, [r3, #24]
2400caec:	0c1b      	lsrs	r3, r3, #16
2400caee:	b2db      	uxtb	r3, r3
2400caf0:	f003 0301 	and.w	r3, r3, #1
2400caf4:	b2db      	uxtb	r3, r3
2400caf6:	2b00      	cmp	r3, #0
2400caf8:	d118      	bne.n	2400cb2c <HAL_I2C_Slave_Seq_Receive_DMA+0x230>
2400cafa:	e013      	b.n	2400cb24 <HAL_I2C_Slave_Seq_Receive_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400cafc:	68fb      	ldr	r3, [r7, #12]
2400cafe:	2228      	movs	r2, #40	; 0x28
2400cb00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cb04:	68fb      	ldr	r3, [r7, #12]
2400cb06:	2200      	movs	r2, #0
2400cb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400cb0c:	68fb      	ldr	r3, [r7, #12]
2400cb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cb10:	f043 0210 	orr.w	r2, r3, #16
2400cb14:	68fb      	ldr	r3, [r7, #12]
2400cb16:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cb18:	68fb      	ldr	r3, [r7, #12]
2400cb1a:	2200      	movs	r2, #0
2400cb1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cb20:	2301      	movs	r3, #1
2400cb22:	e017      	b.n	2400cb54 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400cb24:	68fb      	ldr	r3, [r7, #12]
2400cb26:	681b      	ldr	r3, [r3, #0]
2400cb28:	2208      	movs	r2, #8
2400cb2a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cb2c:	68fb      	ldr	r3, [r7, #12]
2400cb2e:	2200      	movs	r2, #0
2400cb30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400cb34:	68fb      	ldr	r3, [r7, #12]
2400cb36:	681b      	ldr	r3, [r3, #0]
2400cb38:	681a      	ldr	r2, [r3, #0]
2400cb3a:	68fb      	ldr	r3, [r7, #12]
2400cb3c:	681b      	ldr	r3, [r3, #0]
2400cb3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400cb42:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400cb44:	f248 0102 	movw	r1, #32770	; 0x8002
2400cb48:	68f8      	ldr	r0, [r7, #12]
2400cb4a:	f002 f9cd 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400cb4e:	2300      	movs	r3, #0
2400cb50:	e000      	b.n	2400cb54 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400cb52:	2301      	movs	r3, #1
  }
}
2400cb54:	4618      	mov	r0, r3
2400cb56:	3718      	adds	r7, #24
2400cb58:	46bd      	mov	sp, r7
2400cb5a:	bd80      	pop	{r7, pc}
2400cb5c:	2400ea05 	.word	0x2400ea05
2400cb60:	2400d505 	.word	0x2400d505
2400cb64:	2400e62d 	.word	0x2400e62d
2400cb68:	2400e791 	.word	0x2400e791

2400cb6c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400cb6c:	b580      	push	{r7, lr}
2400cb6e:	b082      	sub	sp, #8
2400cb70:	af00      	add	r7, sp, #0
2400cb72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400cb74:	687b      	ldr	r3, [r7, #4]
2400cb76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cb7a:	b2db      	uxtb	r3, r3
2400cb7c:	2b20      	cmp	r3, #32
2400cb7e:	d10d      	bne.n	2400cb9c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2400cb80:	687b      	ldr	r3, [r7, #4]
2400cb82:	2228      	movs	r2, #40	; 0x28
2400cb84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2400cb88:	687b      	ldr	r3, [r7, #4]
2400cb8a:	4a07      	ldr	r2, [pc, #28]	; (2400cba8 <HAL_I2C_EnableListen_IT+0x3c>)
2400cb8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400cb8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400cb92:	6878      	ldr	r0, [r7, #4]
2400cb94:	f002 f9a8 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400cb98:	2300      	movs	r3, #0
2400cb9a:	e000      	b.n	2400cb9e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2400cb9c:	2302      	movs	r3, #2
  }
}
2400cb9e:	4618      	mov	r0, r3
2400cba0:	3708      	adds	r7, #8
2400cba2:	46bd      	mov	sp, r7
2400cba4:	bd80      	pop	{r7, pc}
2400cba6:	bf00      	nop
2400cba8:	2400d117 	.word	0x2400d117

2400cbac <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400cbac:	b580      	push	{r7, lr}
2400cbae:	b084      	sub	sp, #16
2400cbb0:	af00      	add	r7, sp, #0
2400cbb2:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400cbb4:	687b      	ldr	r3, [r7, #4]
2400cbb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cbba:	b2db      	uxtb	r3, r3
2400cbbc:	2b28      	cmp	r3, #40	; 0x28
2400cbbe:	d121      	bne.n	2400cc04 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2400cbc0:	687b      	ldr	r3, [r7, #4]
2400cbc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cbc6:	b2db      	uxtb	r3, r3
2400cbc8:	f003 0303 	and.w	r3, r3, #3
2400cbcc:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2400cbce:	687b      	ldr	r3, [r7, #4]
2400cbd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400cbd4:	b2db      	uxtb	r3, r3
2400cbd6:	461a      	mov	r2, r3
2400cbd8:	68fb      	ldr	r3, [r7, #12]
2400cbda:	431a      	orrs	r2, r3
2400cbdc:	687b      	ldr	r3, [r7, #4]
2400cbde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2400cbe0:	687b      	ldr	r3, [r7, #4]
2400cbe2:	2220      	movs	r2, #32
2400cbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400cbe8:	687b      	ldr	r3, [r7, #4]
2400cbea:	2200      	movs	r2, #0
2400cbec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
2400cbf0:	687b      	ldr	r3, [r7, #4]
2400cbf2:	2200      	movs	r2, #0
2400cbf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400cbf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400cbfa:	6878      	ldr	r0, [r7, #4]
2400cbfc:	f002 f9d8 	bl	2400efb0 <I2C_Disable_IRQ>

    return HAL_OK;
2400cc00:	2300      	movs	r3, #0
2400cc02:	e000      	b.n	2400cc06 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2400cc04:	2302      	movs	r3, #2
  }
}
2400cc06:	4618      	mov	r0, r3
2400cc08:	3710      	adds	r7, #16
2400cc0a:	46bd      	mov	sp, r7
2400cc0c:	bd80      	pop	{r7, pc}
	...

2400cc10 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2400cc10:	b580      	push	{r7, lr}
2400cc12:	b084      	sub	sp, #16
2400cc14:	af02      	add	r7, sp, #8
2400cc16:	6078      	str	r0, [r7, #4]
2400cc18:	460b      	mov	r3, r1
2400cc1a:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2400cc1c:	687b      	ldr	r3, [r7, #4]
2400cc1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400cc22:	b2db      	uxtb	r3, r3
2400cc24:	2b10      	cmp	r3, #16
2400cc26:	d13c      	bne.n	2400cca2 <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cc28:	687b      	ldr	r3, [r7, #4]
2400cc2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cc2e:	2b01      	cmp	r3, #1
2400cc30:	d101      	bne.n	2400cc36 <HAL_I2C_Master_Abort_IT+0x26>
2400cc32:	2302      	movs	r3, #2
2400cc34:	e036      	b.n	2400cca4 <HAL_I2C_Master_Abort_IT+0x94>
2400cc36:	687b      	ldr	r3, [r7, #4]
2400cc38:	2201      	movs	r2, #1
2400cc3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400cc3e:	687b      	ldr	r3, [r7, #4]
2400cc40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc44:	b2db      	uxtb	r3, r3
2400cc46:	2b21      	cmp	r3, #33	; 0x21
2400cc48:	d107      	bne.n	2400cc5a <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400cc4a:	2101      	movs	r1, #1
2400cc4c:	6878      	ldr	r0, [r7, #4]
2400cc4e:	f002 f9af 	bl	2400efb0 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400cc52:	687b      	ldr	r3, [r7, #4]
2400cc54:	2211      	movs	r2, #17
2400cc56:	631a      	str	r2, [r3, #48]	; 0x30
2400cc58:	e00c      	b.n	2400cc74 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400cc5a:	687b      	ldr	r3, [r7, #4]
2400cc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc60:	b2db      	uxtb	r3, r3
2400cc62:	2b22      	cmp	r3, #34	; 0x22
2400cc64:	d106      	bne.n	2400cc74 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400cc66:	2102      	movs	r1, #2
2400cc68:	6878      	ldr	r0, [r7, #4]
2400cc6a:	f002 f9a1 	bl	2400efb0 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400cc6e:	687b      	ldr	r3, [r7, #4]
2400cc70:	2212      	movs	r2, #18
2400cc72:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2400cc74:	687b      	ldr	r3, [r7, #4]
2400cc76:	2260      	movs	r2, #96	; 0x60
2400cc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2400cc7c:	8879      	ldrh	r1, [r7, #2]
2400cc7e:	4b0b      	ldr	r3, [pc, #44]	; (2400ccac <HAL_I2C_Master_Abort_IT+0x9c>)
2400cc80:	9300      	str	r3, [sp, #0]
2400cc82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cc86:	2201      	movs	r2, #1
2400cc88:	6878      	ldr	r0, [r7, #4]
2400cc8a:	f002 f8fb 	bl	2400ee84 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cc8e:	687b      	ldr	r3, [r7, #4]
2400cc90:	2200      	movs	r2, #0
2400cc92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400cc96:	2120      	movs	r1, #32
2400cc98:	6878      	ldr	r0, [r7, #4]
2400cc9a:	f002 f925 	bl	2400eee8 <I2C_Enable_IRQ>

    return HAL_OK;
2400cc9e:	2300      	movs	r3, #0
2400cca0:	e000      	b.n	2400cca4 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2400cca2:	2301      	movs	r3, #1
  }
}
2400cca4:	4618      	mov	r0, r3
2400cca6:	3708      	adds	r7, #8
2400cca8:	46bd      	mov	sp, r7
2400ccaa:	bd80      	pop	{r7, pc}
2400ccac:	80004000 	.word	0x80004000

2400ccb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400ccb0:	b580      	push	{r7, lr}
2400ccb2:	b084      	sub	sp, #16
2400ccb4:	af00      	add	r7, sp, #0
2400ccb6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400ccb8:	687b      	ldr	r3, [r7, #4]
2400ccba:	681b      	ldr	r3, [r3, #0]
2400ccbc:	699b      	ldr	r3, [r3, #24]
2400ccbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400ccc0:	687b      	ldr	r3, [r7, #4]
2400ccc2:	681b      	ldr	r3, [r3, #0]
2400ccc4:	681b      	ldr	r3, [r3, #0]
2400ccc6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2400ccc8:	687b      	ldr	r3, [r7, #4]
2400ccca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400cccc:	2b00      	cmp	r3, #0
2400ccce:	d005      	beq.n	2400ccdc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2400ccd0:	687b      	ldr	r3, [r7, #4]
2400ccd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400ccd4:	68ba      	ldr	r2, [r7, #8]
2400ccd6:	68f9      	ldr	r1, [r7, #12]
2400ccd8:	6878      	ldr	r0, [r7, #4]
2400ccda:	4798      	blx	r3
  }
}
2400ccdc:	bf00      	nop
2400ccde:	3710      	adds	r7, #16
2400cce0:	46bd      	mov	sp, r7
2400cce2:	bd80      	pop	{r7, pc}

2400cce4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400cce4:	b580      	push	{r7, lr}
2400cce6:	b086      	sub	sp, #24
2400cce8:	af00      	add	r7, sp, #0
2400ccea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400ccec:	687b      	ldr	r3, [r7, #4]
2400ccee:	681b      	ldr	r3, [r3, #0]
2400ccf0:	699b      	ldr	r3, [r3, #24]
2400ccf2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400ccf4:	687b      	ldr	r3, [r7, #4]
2400ccf6:	681b      	ldr	r3, [r3, #0]
2400ccf8:	681b      	ldr	r3, [r3, #0]
2400ccfa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400ccfc:	697b      	ldr	r3, [r7, #20]
2400ccfe:	0a1b      	lsrs	r3, r3, #8
2400cd00:	f003 0301 	and.w	r3, r3, #1
2400cd04:	2b00      	cmp	r3, #0
2400cd06:	d010      	beq.n	2400cd2a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400cd08:	693b      	ldr	r3, [r7, #16]
2400cd0a:	09db      	lsrs	r3, r3, #7
2400cd0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400cd10:	2b00      	cmp	r3, #0
2400cd12:	d00a      	beq.n	2400cd2a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400cd14:	687b      	ldr	r3, [r7, #4]
2400cd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cd18:	f043 0201 	orr.w	r2, r3, #1
2400cd1c:	687b      	ldr	r3, [r7, #4]
2400cd1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400cd20:	687b      	ldr	r3, [r7, #4]
2400cd22:	681b      	ldr	r3, [r3, #0]
2400cd24:	f44f 7280 	mov.w	r2, #256	; 0x100
2400cd28:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400cd2a:	697b      	ldr	r3, [r7, #20]
2400cd2c:	0a9b      	lsrs	r3, r3, #10
2400cd2e:	f003 0301 	and.w	r3, r3, #1
2400cd32:	2b00      	cmp	r3, #0
2400cd34:	d010      	beq.n	2400cd58 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400cd36:	693b      	ldr	r3, [r7, #16]
2400cd38:	09db      	lsrs	r3, r3, #7
2400cd3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400cd3e:	2b00      	cmp	r3, #0
2400cd40:	d00a      	beq.n	2400cd58 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400cd42:	687b      	ldr	r3, [r7, #4]
2400cd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cd46:	f043 0208 	orr.w	r2, r3, #8
2400cd4a:	687b      	ldr	r3, [r7, #4]
2400cd4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400cd4e:	687b      	ldr	r3, [r7, #4]
2400cd50:	681b      	ldr	r3, [r3, #0]
2400cd52:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400cd56:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400cd58:	697b      	ldr	r3, [r7, #20]
2400cd5a:	0a5b      	lsrs	r3, r3, #9
2400cd5c:	f003 0301 	and.w	r3, r3, #1
2400cd60:	2b00      	cmp	r3, #0
2400cd62:	d010      	beq.n	2400cd86 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400cd64:	693b      	ldr	r3, [r7, #16]
2400cd66:	09db      	lsrs	r3, r3, #7
2400cd68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400cd6c:	2b00      	cmp	r3, #0
2400cd6e:	d00a      	beq.n	2400cd86 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400cd70:	687b      	ldr	r3, [r7, #4]
2400cd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cd74:	f043 0202 	orr.w	r2, r3, #2
2400cd78:	687b      	ldr	r3, [r7, #4]
2400cd7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400cd7c:	687b      	ldr	r3, [r7, #4]
2400cd7e:	681b      	ldr	r3, [r3, #0]
2400cd80:	f44f 7200 	mov.w	r2, #512	; 0x200
2400cd84:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400cd86:	687b      	ldr	r3, [r7, #4]
2400cd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cd8a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400cd8c:	68fb      	ldr	r3, [r7, #12]
2400cd8e:	f003 030b 	and.w	r3, r3, #11
2400cd92:	2b00      	cmp	r3, #0
2400cd94:	d003      	beq.n	2400cd9e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
2400cd96:	68f9      	ldr	r1, [r7, #12]
2400cd98:	6878      	ldr	r0, [r7, #4]
2400cd9a:	f001 fa75 	bl	2400e288 <I2C_ITError>
  }
}
2400cd9e:	bf00      	nop
2400cda0:	3718      	adds	r7, #24
2400cda2:	46bd      	mov	sp, r7
2400cda4:	bd80      	pop	{r7, pc}

2400cda6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cda6:	b480      	push	{r7}
2400cda8:	b083      	sub	sp, #12
2400cdaa:	af00      	add	r7, sp, #0
2400cdac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2400cdae:	bf00      	nop
2400cdb0:	370c      	adds	r7, #12
2400cdb2:	46bd      	mov	sp, r7
2400cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cdb8:	4770      	bx	lr

2400cdba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cdba:	b480      	push	{r7}
2400cdbc:	b083      	sub	sp, #12
2400cdbe:	af00      	add	r7, sp, #0
2400cdc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2400cdc2:	bf00      	nop
2400cdc4:	370c      	adds	r7, #12
2400cdc6:	46bd      	mov	sp, r7
2400cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cdcc:	4770      	bx	lr

2400cdce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cdce:	b480      	push	{r7}
2400cdd0:	b083      	sub	sp, #12
2400cdd2:	af00      	add	r7, sp, #0
2400cdd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2400cdd6:	bf00      	nop
2400cdd8:	370c      	adds	r7, #12
2400cdda:	46bd      	mov	sp, r7
2400cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cde0:	4770      	bx	lr

2400cde2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cde2:	b480      	push	{r7}
2400cde4:	b083      	sub	sp, #12
2400cde6:	af00      	add	r7, sp, #0
2400cde8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2400cdea:	bf00      	nop
2400cdec:	370c      	adds	r7, #12
2400cdee:	46bd      	mov	sp, r7
2400cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cdf4:	4770      	bx	lr

2400cdf6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2400cdf6:	b480      	push	{r7}
2400cdf8:	b083      	sub	sp, #12
2400cdfa:	af00      	add	r7, sp, #0
2400cdfc:	6078      	str	r0, [r7, #4]
2400cdfe:	460b      	mov	r3, r1
2400ce00:	70fb      	strb	r3, [r7, #3]
2400ce02:	4613      	mov	r3, r2
2400ce04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2400ce06:	bf00      	nop
2400ce08:	370c      	adds	r7, #12
2400ce0a:	46bd      	mov	sp, r7
2400ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce10:	4770      	bx	lr

2400ce12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce12:	b480      	push	{r7}
2400ce14:	b083      	sub	sp, #12
2400ce16:	af00      	add	r7, sp, #0
2400ce18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2400ce1a:	bf00      	nop
2400ce1c:	370c      	adds	r7, #12
2400ce1e:	46bd      	mov	sp, r7
2400ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce24:	4770      	bx	lr

2400ce26 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce26:	b480      	push	{r7}
2400ce28:	b083      	sub	sp, #12
2400ce2a:	af00      	add	r7, sp, #0
2400ce2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2400ce2e:	bf00      	nop
2400ce30:	370c      	adds	r7, #12
2400ce32:	46bd      	mov	sp, r7
2400ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce38:	4770      	bx	lr

2400ce3a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce3a:	b480      	push	{r7}
2400ce3c:	b083      	sub	sp, #12
2400ce3e:	af00      	add	r7, sp, #0
2400ce40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2400ce42:	bf00      	nop
2400ce44:	370c      	adds	r7, #12
2400ce46:	46bd      	mov	sp, r7
2400ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce4c:	4770      	bx	lr

2400ce4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400ce4e:	b480      	push	{r7}
2400ce50:	b083      	sub	sp, #12
2400ce52:	af00      	add	r7, sp, #0
2400ce54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2400ce56:	bf00      	nop
2400ce58:	370c      	adds	r7, #12
2400ce5a:	46bd      	mov	sp, r7
2400ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce60:	4770      	bx	lr

2400ce62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce62:	b480      	push	{r7}
2400ce64:	b083      	sub	sp, #12
2400ce66:	af00      	add	r7, sp, #0
2400ce68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2400ce6a:	bf00      	nop
2400ce6c:	370c      	adds	r7, #12
2400ce6e:	46bd      	mov	sp, r7
2400ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce74:	4770      	bx	lr

2400ce76 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
2400ce76:	b480      	push	{r7}
2400ce78:	b083      	sub	sp, #12
2400ce7a:	af00      	add	r7, sp, #0
2400ce7c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2400ce7e:	687b      	ldr	r3, [r7, #4]
2400ce80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ce84:	b2db      	uxtb	r3, r3
}
2400ce86:	4618      	mov	r0, r3
2400ce88:	370c      	adds	r7, #12
2400ce8a:	46bd      	mov	sp, r7
2400ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce90:	4770      	bx	lr

2400ce92 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
2400ce92:	b480      	push	{r7}
2400ce94:	b083      	sub	sp, #12
2400ce96:	af00      	add	r7, sp, #0
2400ce98:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2400ce9a:	687b      	ldr	r3, [r7, #4]
2400ce9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400cea0:	b2db      	uxtb	r3, r3
}
2400cea2:	4618      	mov	r0, r3
2400cea4:	370c      	adds	r7, #12
2400cea6:	46bd      	mov	sp, r7
2400cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ceac:	4770      	bx	lr

2400ceae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
2400ceae:	b480      	push	{r7}
2400ceb0:	b083      	sub	sp, #12
2400ceb2:	af00      	add	r7, sp, #0
2400ceb4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2400ceb6:	687b      	ldr	r3, [r7, #4]
2400ceb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
2400ceba:	4618      	mov	r0, r3
2400cebc:	370c      	adds	r7, #12
2400cebe:	46bd      	mov	sp, r7
2400cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cec4:	4770      	bx	lr

2400cec6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400cec6:	b580      	push	{r7, lr}
2400cec8:	b088      	sub	sp, #32
2400ceca:	af02      	add	r7, sp, #8
2400cecc:	60f8      	str	r0, [r7, #12]
2400cece:	60b9      	str	r1, [r7, #8]
2400ced0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2400ced2:	68bb      	ldr	r3, [r7, #8]
2400ced4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400ced6:	68fb      	ldr	r3, [r7, #12]
2400ced8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cedc:	2b01      	cmp	r3, #1
2400cede:	d101      	bne.n	2400cee4 <I2C_Master_ISR_IT+0x1e>
2400cee0:	2302      	movs	r3, #2
2400cee2:	e114      	b.n	2400d10e <I2C_Master_ISR_IT+0x248>
2400cee4:	68fb      	ldr	r3, [r7, #12]
2400cee6:	2201      	movs	r2, #1
2400cee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400ceec:	697b      	ldr	r3, [r7, #20]
2400ceee:	091b      	lsrs	r3, r3, #4
2400cef0:	f003 0301 	and.w	r3, r3, #1
2400cef4:	2b00      	cmp	r3, #0
2400cef6:	d013      	beq.n	2400cf20 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400cef8:	687b      	ldr	r3, [r7, #4]
2400cefa:	091b      	lsrs	r3, r3, #4
2400cefc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400cf00:	2b00      	cmp	r3, #0
2400cf02:	d00d      	beq.n	2400cf20 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400cf04:	68fb      	ldr	r3, [r7, #12]
2400cf06:	681b      	ldr	r3, [r3, #0]
2400cf08:	2210      	movs	r2, #16
2400cf0a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400cf0c:	68fb      	ldr	r3, [r7, #12]
2400cf0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cf10:	f043 0204 	orr.w	r2, r3, #4
2400cf14:	68fb      	ldr	r3, [r7, #12]
2400cf16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400cf18:	68f8      	ldr	r0, [r7, #12]
2400cf1a:	f001 faac 	bl	2400e476 <I2C_Flush_TXDR>
2400cf1e:	e0e1      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400cf20:	697b      	ldr	r3, [r7, #20]
2400cf22:	089b      	lsrs	r3, r3, #2
2400cf24:	f003 0301 	and.w	r3, r3, #1
2400cf28:	2b00      	cmp	r3, #0
2400cf2a:	d023      	beq.n	2400cf74 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400cf2c:	687b      	ldr	r3, [r7, #4]
2400cf2e:	089b      	lsrs	r3, r3, #2
2400cf30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400cf34:	2b00      	cmp	r3, #0
2400cf36:	d01d      	beq.n	2400cf74 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400cf38:	697b      	ldr	r3, [r7, #20]
2400cf3a:	f023 0304 	bic.w	r3, r3, #4
2400cf3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400cf40:	68fb      	ldr	r3, [r7, #12]
2400cf42:	681b      	ldr	r3, [r3, #0]
2400cf44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400cf46:	68fb      	ldr	r3, [r7, #12]
2400cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cf4a:	b2d2      	uxtb	r2, r2
2400cf4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400cf4e:	68fb      	ldr	r3, [r7, #12]
2400cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cf52:	1c5a      	adds	r2, r3, #1
2400cf54:	68fb      	ldr	r3, [r7, #12]
2400cf56:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400cf58:	68fb      	ldr	r3, [r7, #12]
2400cf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cf5c:	3b01      	subs	r3, #1
2400cf5e:	b29a      	uxth	r2, r3
2400cf60:	68fb      	ldr	r3, [r7, #12]
2400cf62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400cf64:	68fb      	ldr	r3, [r7, #12]
2400cf66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cf68:	b29b      	uxth	r3, r3
2400cf6a:	3b01      	subs	r3, #1
2400cf6c:	b29a      	uxth	r2, r3
2400cf6e:	68fb      	ldr	r3, [r7, #12]
2400cf70:	855a      	strh	r2, [r3, #42]	; 0x2a
2400cf72:	e0b7      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400cf74:	697b      	ldr	r3, [r7, #20]
2400cf76:	085b      	lsrs	r3, r3, #1
2400cf78:	f003 0301 	and.w	r3, r3, #1
2400cf7c:	2b00      	cmp	r3, #0
2400cf7e:	d01e      	beq.n	2400cfbe <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400cf80:	687b      	ldr	r3, [r7, #4]
2400cf82:	085b      	lsrs	r3, r3, #1
2400cf84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400cf88:	2b00      	cmp	r3, #0
2400cf8a:	d018      	beq.n	2400cfbe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400cf8c:	68fb      	ldr	r3, [r7, #12]
2400cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cf90:	781a      	ldrb	r2, [r3, #0]
2400cf92:	68fb      	ldr	r3, [r7, #12]
2400cf94:	681b      	ldr	r3, [r3, #0]
2400cf96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400cf98:	68fb      	ldr	r3, [r7, #12]
2400cf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cf9c:	1c5a      	adds	r2, r3, #1
2400cf9e:	68fb      	ldr	r3, [r7, #12]
2400cfa0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400cfa2:	68fb      	ldr	r3, [r7, #12]
2400cfa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cfa6:	3b01      	subs	r3, #1
2400cfa8:	b29a      	uxth	r2, r3
2400cfaa:	68fb      	ldr	r3, [r7, #12]
2400cfac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400cfae:	68fb      	ldr	r3, [r7, #12]
2400cfb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cfb2:	b29b      	uxth	r3, r3
2400cfb4:	3b01      	subs	r3, #1
2400cfb6:	b29a      	uxth	r2, r3
2400cfb8:	68fb      	ldr	r3, [r7, #12]
2400cfba:	855a      	strh	r2, [r3, #42]	; 0x2a
2400cfbc:	e092      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400cfbe:	697b      	ldr	r3, [r7, #20]
2400cfc0:	09db      	lsrs	r3, r3, #7
2400cfc2:	f003 0301 	and.w	r3, r3, #1
2400cfc6:	2b00      	cmp	r3, #0
2400cfc8:	d05d      	beq.n	2400d086 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400cfca:	687b      	ldr	r3, [r7, #4]
2400cfcc:	099b      	lsrs	r3, r3, #6
2400cfce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400cfd2:	2b00      	cmp	r3, #0
2400cfd4:	d057      	beq.n	2400d086 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400cfd6:	68fb      	ldr	r3, [r7, #12]
2400cfd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cfda:	b29b      	uxth	r3, r3
2400cfdc:	2b00      	cmp	r3, #0
2400cfde:	d040      	beq.n	2400d062 <I2C_Master_ISR_IT+0x19c>
2400cfe0:	68fb      	ldr	r3, [r7, #12]
2400cfe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cfe4:	2b00      	cmp	r3, #0
2400cfe6:	d13c      	bne.n	2400d062 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400cfe8:	68fb      	ldr	r3, [r7, #12]
2400cfea:	681b      	ldr	r3, [r3, #0]
2400cfec:	685b      	ldr	r3, [r3, #4]
2400cfee:	b29b      	uxth	r3, r3
2400cff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400cff4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cff6:	68fb      	ldr	r3, [r7, #12]
2400cff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cffa:	b29b      	uxth	r3, r3
2400cffc:	2bff      	cmp	r3, #255	; 0xff
2400cffe:	d90e      	bls.n	2400d01e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400d000:	68fb      	ldr	r3, [r7, #12]
2400d002:	22ff      	movs	r2, #255	; 0xff
2400d004:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400d006:	68fb      	ldr	r3, [r7, #12]
2400d008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d00a:	b2da      	uxtb	r2, r3
2400d00c:	8a79      	ldrh	r1, [r7, #18]
2400d00e:	2300      	movs	r3, #0
2400d010:	9300      	str	r3, [sp, #0]
2400d012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d016:	68f8      	ldr	r0, [r7, #12]
2400d018:	f001 ff34 	bl	2400ee84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d01c:	e032      	b.n	2400d084 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400d01e:	68fb      	ldr	r3, [r7, #12]
2400d020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d022:	b29a      	uxth	r2, r3
2400d024:	68fb      	ldr	r3, [r7, #12]
2400d026:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400d028:	68fb      	ldr	r3, [r7, #12]
2400d02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d02c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d030:	d00b      	beq.n	2400d04a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d032:	68fb      	ldr	r3, [r7, #12]
2400d034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d036:	b2da      	uxtb	r2, r3
2400d038:	68fb      	ldr	r3, [r7, #12]
2400d03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d03c:	8a79      	ldrh	r1, [r7, #18]
2400d03e:	2000      	movs	r0, #0
2400d040:	9000      	str	r0, [sp, #0]
2400d042:	68f8      	ldr	r0, [r7, #12]
2400d044:	f001 ff1e 	bl	2400ee84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d048:	e01c      	b.n	2400d084 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d04a:	68fb      	ldr	r3, [r7, #12]
2400d04c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d04e:	b2da      	uxtb	r2, r3
2400d050:	8a79      	ldrh	r1, [r7, #18]
2400d052:	2300      	movs	r3, #0
2400d054:	9300      	str	r3, [sp, #0]
2400d056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d05a:	68f8      	ldr	r0, [r7, #12]
2400d05c:	f001 ff12 	bl	2400ee84 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d060:	e010      	b.n	2400d084 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d062:	68fb      	ldr	r3, [r7, #12]
2400d064:	681b      	ldr	r3, [r3, #0]
2400d066:	685b      	ldr	r3, [r3, #4]
2400d068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d06c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d070:	d003      	beq.n	2400d07a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400d072:	68f8      	ldr	r0, [r7, #12]
2400d074:	f000 fd54 	bl	2400db20 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d078:	e034      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d07a:	2140      	movs	r1, #64	; 0x40
2400d07c:	68f8      	ldr	r0, [r7, #12]
2400d07e:	f001 f903 	bl	2400e288 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d082:	e02f      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
2400d084:	e02e      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d086:	697b      	ldr	r3, [r7, #20]
2400d088:	099b      	lsrs	r3, r3, #6
2400d08a:	f003 0301 	and.w	r3, r3, #1
2400d08e:	2b00      	cmp	r3, #0
2400d090:	d028      	beq.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d092:	687b      	ldr	r3, [r7, #4]
2400d094:	099b      	lsrs	r3, r3, #6
2400d096:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d09a:	2b00      	cmp	r3, #0
2400d09c:	d022      	beq.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
2400d09e:	68fb      	ldr	r3, [r7, #12]
2400d0a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d0a2:	b29b      	uxth	r3, r3
2400d0a4:	2b00      	cmp	r3, #0
2400d0a6:	d119      	bne.n	2400d0dc <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d0a8:	68fb      	ldr	r3, [r7, #12]
2400d0aa:	681b      	ldr	r3, [r3, #0]
2400d0ac:	685b      	ldr	r3, [r3, #4]
2400d0ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d0b6:	d015      	beq.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400d0b8:	68fb      	ldr	r3, [r7, #12]
2400d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d0bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d0c0:	d108      	bne.n	2400d0d4 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d0c2:	68fb      	ldr	r3, [r7, #12]
2400d0c4:	681b      	ldr	r3, [r3, #0]
2400d0c6:	685a      	ldr	r2, [r3, #4]
2400d0c8:	68fb      	ldr	r3, [r7, #12]
2400d0ca:	681b      	ldr	r3, [r3, #0]
2400d0cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d0d0:	605a      	str	r2, [r3, #4]
2400d0d2:	e007      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400d0d4:	68f8      	ldr	r0, [r7, #12]
2400d0d6:	f000 fd23 	bl	2400db20 <I2C_ITMasterSeqCplt>
2400d0da:	e003      	b.n	2400d0e4 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d0dc:	2140      	movs	r1, #64	; 0x40
2400d0de:	68f8      	ldr	r0, [r7, #12]
2400d0e0:	f001 f8d2 	bl	2400e288 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d0e4:	697b      	ldr	r3, [r7, #20]
2400d0e6:	095b      	lsrs	r3, r3, #5
2400d0e8:	f003 0301 	and.w	r3, r3, #1
2400d0ec:	2b00      	cmp	r3, #0
2400d0ee:	d009      	beq.n	2400d104 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d0f0:	687b      	ldr	r3, [r7, #4]
2400d0f2:	095b      	lsrs	r3, r3, #5
2400d0f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d0f8:	2b00      	cmp	r3, #0
2400d0fa:	d003      	beq.n	2400d104 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400d0fc:	6979      	ldr	r1, [r7, #20]
2400d0fe:	68f8      	ldr	r0, [r7, #12]
2400d100:	f000 fdaa 	bl	2400dc58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d104:	68fb      	ldr	r3, [r7, #12]
2400d106:	2200      	movs	r2, #0
2400d108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d10c:	2300      	movs	r3, #0
}
2400d10e:	4618      	mov	r0, r3
2400d110:	3718      	adds	r7, #24
2400d112:	46bd      	mov	sp, r7
2400d114:	bd80      	pop	{r7, pc}

2400d116 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2400d116:	b580      	push	{r7, lr}
2400d118:	b086      	sub	sp, #24
2400d11a:	af00      	add	r7, sp, #0
2400d11c:	60f8      	str	r0, [r7, #12]
2400d11e:	60b9      	str	r1, [r7, #8]
2400d120:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400d122:	68fb      	ldr	r3, [r7, #12]
2400d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d126:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400d128:	68bb      	ldr	r3, [r7, #8]
2400d12a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2400d12c:	68fb      	ldr	r3, [r7, #12]
2400d12e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d132:	2b01      	cmp	r3, #1
2400d134:	d101      	bne.n	2400d13a <I2C_Slave_ISR_IT+0x24>
2400d136:	2302      	movs	r3, #2
2400d138:	e0ec      	b.n	2400d314 <I2C_Slave_ISR_IT+0x1fe>
2400d13a:	68fb      	ldr	r3, [r7, #12]
2400d13c:	2201      	movs	r2, #1
2400d13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d142:	693b      	ldr	r3, [r7, #16]
2400d144:	095b      	lsrs	r3, r3, #5
2400d146:	f003 0301 	and.w	r3, r3, #1
2400d14a:	2b00      	cmp	r3, #0
2400d14c:	d009      	beq.n	2400d162 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d14e:	687b      	ldr	r3, [r7, #4]
2400d150:	095b      	lsrs	r3, r3, #5
2400d152:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d156:	2b00      	cmp	r3, #0
2400d158:	d003      	beq.n	2400d162 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2400d15a:	6939      	ldr	r1, [r7, #16]
2400d15c:	68f8      	ldr	r0, [r7, #12]
2400d15e:	f000 fe45 	bl	2400ddec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d162:	693b      	ldr	r3, [r7, #16]
2400d164:	091b      	lsrs	r3, r3, #4
2400d166:	f003 0301 	and.w	r3, r3, #1
2400d16a:	2b00      	cmp	r3, #0
2400d16c:	d04d      	beq.n	2400d20a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d16e:	687b      	ldr	r3, [r7, #4]
2400d170:	091b      	lsrs	r3, r3, #4
2400d172:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d176:	2b00      	cmp	r3, #0
2400d178:	d047      	beq.n	2400d20a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400d17a:	68fb      	ldr	r3, [r7, #12]
2400d17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d17e:	b29b      	uxth	r3, r3
2400d180:	2b00      	cmp	r3, #0
2400d182:	d128      	bne.n	2400d1d6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400d184:	68fb      	ldr	r3, [r7, #12]
2400d186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d18a:	b2db      	uxtb	r3, r3
2400d18c:	2b28      	cmp	r3, #40	; 0x28
2400d18e:	d108      	bne.n	2400d1a2 <I2C_Slave_ISR_IT+0x8c>
2400d190:	697b      	ldr	r3, [r7, #20]
2400d192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d196:	d104      	bne.n	2400d1a2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400d198:	6939      	ldr	r1, [r7, #16]
2400d19a:	68f8      	ldr	r0, [r7, #12]
2400d19c:	f001 f81e 	bl	2400e1dc <I2C_ITListenCplt>
2400d1a0:	e032      	b.n	2400d208 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400d1a2:	68fb      	ldr	r3, [r7, #12]
2400d1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d1a8:	b2db      	uxtb	r3, r3
2400d1aa:	2b29      	cmp	r3, #41	; 0x29
2400d1ac:	d10e      	bne.n	2400d1cc <I2C_Slave_ISR_IT+0xb6>
2400d1ae:	697b      	ldr	r3, [r7, #20]
2400d1b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d1b4:	d00a      	beq.n	2400d1cc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d1b6:	68fb      	ldr	r3, [r7, #12]
2400d1b8:	681b      	ldr	r3, [r3, #0]
2400d1ba:	2210      	movs	r2, #16
2400d1bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400d1be:	68f8      	ldr	r0, [r7, #12]
2400d1c0:	f001 f959 	bl	2400e476 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400d1c4:	68f8      	ldr	r0, [r7, #12]
2400d1c6:	f000 fce8 	bl	2400db9a <I2C_ITSlaveSeqCplt>
2400d1ca:	e01d      	b.n	2400d208 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d1cc:	68fb      	ldr	r3, [r7, #12]
2400d1ce:	681b      	ldr	r3, [r3, #0]
2400d1d0:	2210      	movs	r2, #16
2400d1d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2400d1d4:	e096      	b.n	2400d304 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d1d6:	68fb      	ldr	r3, [r7, #12]
2400d1d8:	681b      	ldr	r3, [r3, #0]
2400d1da:	2210      	movs	r2, #16
2400d1dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d1de:	68fb      	ldr	r3, [r7, #12]
2400d1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d1e2:	f043 0204 	orr.w	r2, r3, #4
2400d1e6:	68fb      	ldr	r3, [r7, #12]
2400d1e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400d1ea:	697b      	ldr	r3, [r7, #20]
2400d1ec:	2b00      	cmp	r3, #0
2400d1ee:	d004      	beq.n	2400d1fa <I2C_Slave_ISR_IT+0xe4>
2400d1f0:	697b      	ldr	r3, [r7, #20]
2400d1f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d1f6:	f040 8085 	bne.w	2400d304 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400d1fa:	68fb      	ldr	r3, [r7, #12]
2400d1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d1fe:	4619      	mov	r1, r3
2400d200:	68f8      	ldr	r0, [r7, #12]
2400d202:	f001 f841 	bl	2400e288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400d206:	e07d      	b.n	2400d304 <I2C_Slave_ISR_IT+0x1ee>
2400d208:	e07c      	b.n	2400d304 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d20a:	693b      	ldr	r3, [r7, #16]
2400d20c:	089b      	lsrs	r3, r3, #2
2400d20e:	f003 0301 	and.w	r3, r3, #1
2400d212:	2b00      	cmp	r3, #0
2400d214:	d030      	beq.n	2400d278 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400d216:	687b      	ldr	r3, [r7, #4]
2400d218:	089b      	lsrs	r3, r3, #2
2400d21a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d21e:	2b00      	cmp	r3, #0
2400d220:	d02a      	beq.n	2400d278 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
2400d222:	68fb      	ldr	r3, [r7, #12]
2400d224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d226:	b29b      	uxth	r3, r3
2400d228:	2b00      	cmp	r3, #0
2400d22a:	d018      	beq.n	2400d25e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400d22c:	68fb      	ldr	r3, [r7, #12]
2400d22e:	681b      	ldr	r3, [r3, #0]
2400d230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400d232:	68fb      	ldr	r3, [r7, #12]
2400d234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d236:	b2d2      	uxtb	r2, r2
2400d238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400d23a:	68fb      	ldr	r3, [r7, #12]
2400d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d23e:	1c5a      	adds	r2, r3, #1
2400d240:	68fb      	ldr	r3, [r7, #12]
2400d242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400d244:	68fb      	ldr	r3, [r7, #12]
2400d246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d248:	3b01      	subs	r3, #1
2400d24a:	b29a      	uxth	r2, r3
2400d24c:	68fb      	ldr	r3, [r7, #12]
2400d24e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400d250:	68fb      	ldr	r3, [r7, #12]
2400d252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d254:	b29b      	uxth	r3, r3
2400d256:	3b01      	subs	r3, #1
2400d258:	b29a      	uxth	r2, r3
2400d25a:	68fb      	ldr	r3, [r7, #12]
2400d25c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2400d25e:	68fb      	ldr	r3, [r7, #12]
2400d260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d262:	b29b      	uxth	r3, r3
2400d264:	2b00      	cmp	r3, #0
2400d266:	d14f      	bne.n	2400d308 <I2C_Slave_ISR_IT+0x1f2>
2400d268:	697b      	ldr	r3, [r7, #20]
2400d26a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d26e:	d04b      	beq.n	2400d308 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2400d270:	68f8      	ldr	r0, [r7, #12]
2400d272:	f000 fc92 	bl	2400db9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2400d276:	e047      	b.n	2400d308 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d278:	693b      	ldr	r3, [r7, #16]
2400d27a:	08db      	lsrs	r3, r3, #3
2400d27c:	f003 0301 	and.w	r3, r3, #1
2400d280:	2b00      	cmp	r3, #0
2400d282:	d00a      	beq.n	2400d29a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400d284:	687b      	ldr	r3, [r7, #4]
2400d286:	08db      	lsrs	r3, r3, #3
2400d288:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d28c:	2b00      	cmp	r3, #0
2400d28e:	d004      	beq.n	2400d29a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2400d290:	6939      	ldr	r1, [r7, #16]
2400d292:	68f8      	ldr	r0, [r7, #12]
2400d294:	f000 fbc0 	bl	2400da18 <I2C_ITAddrCplt>
2400d298:	e037      	b.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d29a:	693b      	ldr	r3, [r7, #16]
2400d29c:	085b      	lsrs	r3, r3, #1
2400d29e:	f003 0301 	and.w	r3, r3, #1
2400d2a2:	2b00      	cmp	r3, #0
2400d2a4:	d031      	beq.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400d2a6:	687b      	ldr	r3, [r7, #4]
2400d2a8:	085b      	lsrs	r3, r3, #1
2400d2aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d2ae:	2b00      	cmp	r3, #0
2400d2b0:	d02b      	beq.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2400d2b2:	68fb      	ldr	r3, [r7, #12]
2400d2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d2b6:	b29b      	uxth	r3, r3
2400d2b8:	2b00      	cmp	r3, #0
2400d2ba:	d018      	beq.n	2400d2ee <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400d2bc:	68fb      	ldr	r3, [r7, #12]
2400d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d2c0:	781a      	ldrb	r2, [r3, #0]
2400d2c2:	68fb      	ldr	r3, [r7, #12]
2400d2c4:	681b      	ldr	r3, [r3, #0]
2400d2c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400d2c8:	68fb      	ldr	r3, [r7, #12]
2400d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d2cc:	1c5a      	adds	r2, r3, #1
2400d2ce:	68fb      	ldr	r3, [r7, #12]
2400d2d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400d2d2:	68fb      	ldr	r3, [r7, #12]
2400d2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d2d6:	b29b      	uxth	r3, r3
2400d2d8:	3b01      	subs	r3, #1
2400d2da:	b29a      	uxth	r2, r3
2400d2dc:	68fb      	ldr	r3, [r7, #12]
2400d2de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400d2e0:	68fb      	ldr	r3, [r7, #12]
2400d2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d2e4:	3b01      	subs	r3, #1
2400d2e6:	b29a      	uxth	r2, r3
2400d2e8:	68fb      	ldr	r3, [r7, #12]
2400d2ea:	851a      	strh	r2, [r3, #40]	; 0x28
2400d2ec:	e00d      	b.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400d2ee:	697b      	ldr	r3, [r7, #20]
2400d2f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d2f4:	d002      	beq.n	2400d2fc <I2C_Slave_ISR_IT+0x1e6>
2400d2f6:	697b      	ldr	r3, [r7, #20]
2400d2f8:	2b00      	cmp	r3, #0
2400d2fa:	d106      	bne.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400d2fc:	68f8      	ldr	r0, [r7, #12]
2400d2fe:	f000 fc4c 	bl	2400db9a <I2C_ITSlaveSeqCplt>
2400d302:	e002      	b.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
2400d304:	bf00      	nop
2400d306:	e000      	b.n	2400d30a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
2400d308:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d30a:	68fb      	ldr	r3, [r7, #12]
2400d30c:	2200      	movs	r2, #0
2400d30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d312:	2300      	movs	r3, #0
}
2400d314:	4618      	mov	r0, r3
2400d316:	3718      	adds	r7, #24
2400d318:	46bd      	mov	sp, r7
2400d31a:	bd80      	pop	{r7, pc}

2400d31c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2400d31c:	b580      	push	{r7, lr}
2400d31e:	b088      	sub	sp, #32
2400d320:	af02      	add	r7, sp, #8
2400d322:	60f8      	str	r0, [r7, #12]
2400d324:	60b9      	str	r1, [r7, #8]
2400d326:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400d328:	68fb      	ldr	r3, [r7, #12]
2400d32a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d32e:	2b01      	cmp	r3, #1
2400d330:	d101      	bne.n	2400d336 <I2C_Master_ISR_DMA+0x1a>
2400d332:	2302      	movs	r3, #2
2400d334:	e0e1      	b.n	2400d4fa <I2C_Master_ISR_DMA+0x1de>
2400d336:	68fb      	ldr	r3, [r7, #12]
2400d338:	2201      	movs	r2, #1
2400d33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d33e:	68bb      	ldr	r3, [r7, #8]
2400d340:	091b      	lsrs	r3, r3, #4
2400d342:	f003 0301 	and.w	r3, r3, #1
2400d346:	2b00      	cmp	r3, #0
2400d348:	d017      	beq.n	2400d37a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d34a:	687b      	ldr	r3, [r7, #4]
2400d34c:	091b      	lsrs	r3, r3, #4
2400d34e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d352:	2b00      	cmp	r3, #0
2400d354:	d011      	beq.n	2400d37a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d356:	68fb      	ldr	r3, [r7, #12]
2400d358:	681b      	ldr	r3, [r3, #0]
2400d35a:	2210      	movs	r2, #16
2400d35c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d35e:	68fb      	ldr	r3, [r7, #12]
2400d360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d362:	f043 0204 	orr.w	r2, r3, #4
2400d366:	68fb      	ldr	r3, [r7, #12]
2400d368:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400d36a:	2120      	movs	r1, #32
2400d36c:	68f8      	ldr	r0, [r7, #12]
2400d36e:	f001 fdbb 	bl	2400eee8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400d372:	68f8      	ldr	r0, [r7, #12]
2400d374:	f001 f87f 	bl	2400e476 <I2C_Flush_TXDR>
2400d378:	e0ba      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400d37a:	68bb      	ldr	r3, [r7, #8]
2400d37c:	09db      	lsrs	r3, r3, #7
2400d37e:	f003 0301 	and.w	r3, r3, #1
2400d382:	2b00      	cmp	r3, #0
2400d384:	d072      	beq.n	2400d46c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d386:	687b      	ldr	r3, [r7, #4]
2400d388:	099b      	lsrs	r3, r3, #6
2400d38a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400d38e:	2b00      	cmp	r3, #0
2400d390:	d06c      	beq.n	2400d46c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400d392:	68fb      	ldr	r3, [r7, #12]
2400d394:	681b      	ldr	r3, [r3, #0]
2400d396:	681a      	ldr	r2, [r3, #0]
2400d398:	68fb      	ldr	r3, [r7, #12]
2400d39a:	681b      	ldr	r3, [r3, #0]
2400d39c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2400d3a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2400d3a2:	68fb      	ldr	r3, [r7, #12]
2400d3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d3a6:	b29b      	uxth	r3, r3
2400d3a8:	2b00      	cmp	r3, #0
2400d3aa:	d04e      	beq.n	2400d44a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400d3ac:	68fb      	ldr	r3, [r7, #12]
2400d3ae:	681b      	ldr	r3, [r3, #0]
2400d3b0:	685b      	ldr	r3, [r3, #4]
2400d3b2:	b29b      	uxth	r3, r3
2400d3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400d3b8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d3ba:	68fb      	ldr	r3, [r7, #12]
2400d3bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d3be:	b29b      	uxth	r3, r3
2400d3c0:	2bff      	cmp	r3, #255	; 0xff
2400d3c2:	d906      	bls.n	2400d3d2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400d3c4:	68fb      	ldr	r3, [r7, #12]
2400d3c6:	22ff      	movs	r2, #255	; 0xff
2400d3c8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
2400d3ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d3ce:	617b      	str	r3, [r7, #20]
2400d3d0:	e010      	b.n	2400d3f4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400d3d2:	68fb      	ldr	r3, [r7, #12]
2400d3d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d3d6:	b29a      	uxth	r2, r3
2400d3d8:	68fb      	ldr	r3, [r7, #12]
2400d3da:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400d3dc:	68fb      	ldr	r3, [r7, #12]
2400d3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d3e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d3e4:	d003      	beq.n	2400d3ee <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
2400d3e6:	68fb      	ldr	r3, [r7, #12]
2400d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d3ea:	617b      	str	r3, [r7, #20]
2400d3ec:	e002      	b.n	2400d3f4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2400d3ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d3f2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400d3f4:	68fb      	ldr	r3, [r7, #12]
2400d3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d3f8:	b2da      	uxtb	r2, r3
2400d3fa:	8a79      	ldrh	r1, [r7, #18]
2400d3fc:	2300      	movs	r3, #0
2400d3fe:	9300      	str	r3, [sp, #0]
2400d400:	697b      	ldr	r3, [r7, #20]
2400d402:	68f8      	ldr	r0, [r7, #12]
2400d404:	f001 fd3e 	bl	2400ee84 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400d408:	68fb      	ldr	r3, [r7, #12]
2400d40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d40c:	b29a      	uxth	r2, r3
2400d40e:	68fb      	ldr	r3, [r7, #12]
2400d410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d412:	1ad3      	subs	r3, r2, r3
2400d414:	b29a      	uxth	r2, r3
2400d416:	68fb      	ldr	r3, [r7, #12]
2400d418:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400d41a:	68fb      	ldr	r3, [r7, #12]
2400d41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d420:	b2db      	uxtb	r3, r3
2400d422:	2b22      	cmp	r3, #34	; 0x22
2400d424:	d108      	bne.n	2400d438 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400d426:	68fb      	ldr	r3, [r7, #12]
2400d428:	681b      	ldr	r3, [r3, #0]
2400d42a:	681a      	ldr	r2, [r3, #0]
2400d42c:	68fb      	ldr	r3, [r7, #12]
2400d42e:	681b      	ldr	r3, [r3, #0]
2400d430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400d434:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400d436:	e05b      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400d438:	68fb      	ldr	r3, [r7, #12]
2400d43a:	681b      	ldr	r3, [r3, #0]
2400d43c:	681a      	ldr	r2, [r3, #0]
2400d43e:	68fb      	ldr	r3, [r7, #12]
2400d440:	681b      	ldr	r3, [r3, #0]
2400d442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d446:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400d448:	e052      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d44a:	68fb      	ldr	r3, [r7, #12]
2400d44c:	681b      	ldr	r3, [r3, #0]
2400d44e:	685b      	ldr	r3, [r3, #4]
2400d450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d458:	d003      	beq.n	2400d462 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400d45a:	68f8      	ldr	r0, [r7, #12]
2400d45c:	f000 fb60 	bl	2400db20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2400d460:	e046      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d462:	2140      	movs	r1, #64	; 0x40
2400d464:	68f8      	ldr	r0, [r7, #12]
2400d466:	f000 ff0f 	bl	2400e288 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400d46a:	e041      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400d46c:	68bb      	ldr	r3, [r7, #8]
2400d46e:	099b      	lsrs	r3, r3, #6
2400d470:	f003 0301 	and.w	r3, r3, #1
2400d474:	2b00      	cmp	r3, #0
2400d476:	d029      	beq.n	2400d4cc <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d478:	687b      	ldr	r3, [r7, #4]
2400d47a:	099b      	lsrs	r3, r3, #6
2400d47c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400d480:	2b00      	cmp	r3, #0
2400d482:	d023      	beq.n	2400d4cc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
2400d484:	68fb      	ldr	r3, [r7, #12]
2400d486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d488:	b29b      	uxth	r3, r3
2400d48a:	2b00      	cmp	r3, #0
2400d48c:	d119      	bne.n	2400d4c2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d48e:	68fb      	ldr	r3, [r7, #12]
2400d490:	681b      	ldr	r3, [r3, #0]
2400d492:	685b      	ldr	r3, [r3, #4]
2400d494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d49c:	d027      	beq.n	2400d4ee <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400d49e:	68fb      	ldr	r3, [r7, #12]
2400d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d4a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d4a6:	d108      	bne.n	2400d4ba <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d4a8:	68fb      	ldr	r3, [r7, #12]
2400d4aa:	681b      	ldr	r3, [r3, #0]
2400d4ac:	685a      	ldr	r2, [r3, #4]
2400d4ae:	68fb      	ldr	r3, [r7, #12]
2400d4b0:	681b      	ldr	r3, [r3, #0]
2400d4b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d4b6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2400d4b8:	e019      	b.n	2400d4ee <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400d4ba:	68f8      	ldr	r0, [r7, #12]
2400d4bc:	f000 fb30 	bl	2400db20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2400d4c0:	e015      	b.n	2400d4ee <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d4c2:	2140      	movs	r1, #64	; 0x40
2400d4c4:	68f8      	ldr	r0, [r7, #12]
2400d4c6:	f000 fedf 	bl	2400e288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400d4ca:	e010      	b.n	2400d4ee <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d4cc:	68bb      	ldr	r3, [r7, #8]
2400d4ce:	095b      	lsrs	r3, r3, #5
2400d4d0:	f003 0301 	and.w	r3, r3, #1
2400d4d4:	2b00      	cmp	r3, #0
2400d4d6:	d00b      	beq.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d4d8:	687b      	ldr	r3, [r7, #4]
2400d4da:	095b      	lsrs	r3, r3, #5
2400d4dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d4e0:	2b00      	cmp	r3, #0
2400d4e2:	d005      	beq.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400d4e4:	68b9      	ldr	r1, [r7, #8]
2400d4e6:	68f8      	ldr	r0, [r7, #12]
2400d4e8:	f000 fbb6 	bl	2400dc58 <I2C_ITMasterCplt>
2400d4ec:	e000      	b.n	2400d4f0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
2400d4ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d4f0:	68fb      	ldr	r3, [r7, #12]
2400d4f2:	2200      	movs	r2, #0
2400d4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d4f8:	2300      	movs	r3, #0
}
2400d4fa:	4618      	mov	r0, r3
2400d4fc:	3718      	adds	r7, #24
2400d4fe:	46bd      	mov	sp, r7
2400d500:	bd80      	pop	{r7, pc}
	...

2400d504 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400d504:	b580      	push	{r7, lr}
2400d506:	b088      	sub	sp, #32
2400d508:	af00      	add	r7, sp, #0
2400d50a:	60f8      	str	r0, [r7, #12]
2400d50c:	60b9      	str	r1, [r7, #8]
2400d50e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400d510:	68fb      	ldr	r3, [r7, #12]
2400d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d514:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2400d516:	2300      	movs	r3, #0
2400d518:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2400d51a:	68fb      	ldr	r3, [r7, #12]
2400d51c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d520:	2b01      	cmp	r3, #1
2400d522:	d101      	bne.n	2400d528 <I2C_Slave_ISR_DMA+0x24>
2400d524:	2302      	movs	r3, #2
2400d526:	e1ca      	b.n	2400d8be <I2C_Slave_ISR_DMA+0x3ba>
2400d528:	68fb      	ldr	r3, [r7, #12]
2400d52a:	2201      	movs	r2, #1
2400d52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d530:	68bb      	ldr	r3, [r7, #8]
2400d532:	095b      	lsrs	r3, r3, #5
2400d534:	f003 0301 	and.w	r3, r3, #1
2400d538:	2b00      	cmp	r3, #0
2400d53a:	d009      	beq.n	2400d550 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d53c:	687b      	ldr	r3, [r7, #4]
2400d53e:	095b      	lsrs	r3, r3, #5
2400d540:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d544:	2b00      	cmp	r3, #0
2400d546:	d003      	beq.n	2400d550 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400d548:	68b9      	ldr	r1, [r7, #8]
2400d54a:	68f8      	ldr	r0, [r7, #12]
2400d54c:	f000 fc4e 	bl	2400ddec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d550:	68bb      	ldr	r3, [r7, #8]
2400d552:	091b      	lsrs	r3, r3, #4
2400d554:	f003 0301 	and.w	r3, r3, #1
2400d558:	2b00      	cmp	r3, #0
2400d55a:	f000 819b 	beq.w	2400d894 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d55e:	687b      	ldr	r3, [r7, #4]
2400d560:	091b      	lsrs	r3, r3, #4
2400d562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d566:	2b00      	cmp	r3, #0
2400d568:	f000 8194 	beq.w	2400d894 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d56c:	687b      	ldr	r3, [r7, #4]
2400d56e:	0b9b      	lsrs	r3, r3, #14
2400d570:	f003 0301 	and.w	r3, r3, #1
2400d574:	2b00      	cmp	r3, #0
2400d576:	d106      	bne.n	2400d586 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2400d578:	687b      	ldr	r3, [r7, #4]
2400d57a:	0bdb      	lsrs	r3, r3, #15
2400d57c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d580:	2b00      	cmp	r3, #0
2400d582:	f000 8180 	beq.w	2400d886 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2400d586:	68fb      	ldr	r3, [r7, #12]
2400d588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d58a:	2b00      	cmp	r3, #0
2400d58c:	d07c      	beq.n	2400d688 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400d58e:	687b      	ldr	r3, [r7, #4]
2400d590:	0bdb      	lsrs	r3, r3, #15
2400d592:	f003 0301 	and.w	r3, r3, #1
2400d596:	2b00      	cmp	r3, #0
2400d598:	d076      	beq.n	2400d688 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400d59a:	68fb      	ldr	r3, [r7, #12]
2400d59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d59e:	681b      	ldr	r3, [r3, #0]
2400d5a0:	4a74      	ldr	r2, [pc, #464]	; (2400d774 <I2C_Slave_ISR_DMA+0x270>)
2400d5a2:	4293      	cmp	r3, r2
2400d5a4:	d059      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5a6:	68fb      	ldr	r3, [r7, #12]
2400d5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5aa:	681b      	ldr	r3, [r3, #0]
2400d5ac:	4a72      	ldr	r2, [pc, #456]	; (2400d778 <I2C_Slave_ISR_DMA+0x274>)
2400d5ae:	4293      	cmp	r3, r2
2400d5b0:	d053      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5b2:	68fb      	ldr	r3, [r7, #12]
2400d5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5b6:	681b      	ldr	r3, [r3, #0]
2400d5b8:	4a70      	ldr	r2, [pc, #448]	; (2400d77c <I2C_Slave_ISR_DMA+0x278>)
2400d5ba:	4293      	cmp	r3, r2
2400d5bc:	d04d      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5be:	68fb      	ldr	r3, [r7, #12]
2400d5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5c2:	681b      	ldr	r3, [r3, #0]
2400d5c4:	4a6e      	ldr	r2, [pc, #440]	; (2400d780 <I2C_Slave_ISR_DMA+0x27c>)
2400d5c6:	4293      	cmp	r3, r2
2400d5c8:	d047      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5ca:	68fb      	ldr	r3, [r7, #12]
2400d5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5ce:	681b      	ldr	r3, [r3, #0]
2400d5d0:	4a6c      	ldr	r2, [pc, #432]	; (2400d784 <I2C_Slave_ISR_DMA+0x280>)
2400d5d2:	4293      	cmp	r3, r2
2400d5d4:	d041      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5d6:	68fb      	ldr	r3, [r7, #12]
2400d5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5da:	681b      	ldr	r3, [r3, #0]
2400d5dc:	4a6a      	ldr	r2, [pc, #424]	; (2400d788 <I2C_Slave_ISR_DMA+0x284>)
2400d5de:	4293      	cmp	r3, r2
2400d5e0:	d03b      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5e2:	68fb      	ldr	r3, [r7, #12]
2400d5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5e6:	681b      	ldr	r3, [r3, #0]
2400d5e8:	4a68      	ldr	r2, [pc, #416]	; (2400d78c <I2C_Slave_ISR_DMA+0x288>)
2400d5ea:	4293      	cmp	r3, r2
2400d5ec:	d035      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5ee:	68fb      	ldr	r3, [r7, #12]
2400d5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5f2:	681b      	ldr	r3, [r3, #0]
2400d5f4:	4a66      	ldr	r2, [pc, #408]	; (2400d790 <I2C_Slave_ISR_DMA+0x28c>)
2400d5f6:	4293      	cmp	r3, r2
2400d5f8:	d02f      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d5fa:	68fb      	ldr	r3, [r7, #12]
2400d5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d5fe:	681b      	ldr	r3, [r3, #0]
2400d600:	4a64      	ldr	r2, [pc, #400]	; (2400d794 <I2C_Slave_ISR_DMA+0x290>)
2400d602:	4293      	cmp	r3, r2
2400d604:	d029      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d606:	68fb      	ldr	r3, [r7, #12]
2400d608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d60a:	681b      	ldr	r3, [r3, #0]
2400d60c:	4a62      	ldr	r2, [pc, #392]	; (2400d798 <I2C_Slave_ISR_DMA+0x294>)
2400d60e:	4293      	cmp	r3, r2
2400d610:	d023      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d612:	68fb      	ldr	r3, [r7, #12]
2400d614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d616:	681b      	ldr	r3, [r3, #0]
2400d618:	4a60      	ldr	r2, [pc, #384]	; (2400d79c <I2C_Slave_ISR_DMA+0x298>)
2400d61a:	4293      	cmp	r3, r2
2400d61c:	d01d      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d61e:	68fb      	ldr	r3, [r7, #12]
2400d620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d622:	681b      	ldr	r3, [r3, #0]
2400d624:	4a5e      	ldr	r2, [pc, #376]	; (2400d7a0 <I2C_Slave_ISR_DMA+0x29c>)
2400d626:	4293      	cmp	r3, r2
2400d628:	d017      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d62a:	68fb      	ldr	r3, [r7, #12]
2400d62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d62e:	681b      	ldr	r3, [r3, #0]
2400d630:	4a5c      	ldr	r2, [pc, #368]	; (2400d7a4 <I2C_Slave_ISR_DMA+0x2a0>)
2400d632:	4293      	cmp	r3, r2
2400d634:	d011      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d636:	68fb      	ldr	r3, [r7, #12]
2400d638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d63a:	681b      	ldr	r3, [r3, #0]
2400d63c:	4a5a      	ldr	r2, [pc, #360]	; (2400d7a8 <I2C_Slave_ISR_DMA+0x2a4>)
2400d63e:	4293      	cmp	r3, r2
2400d640:	d00b      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d642:	68fb      	ldr	r3, [r7, #12]
2400d644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d646:	681b      	ldr	r3, [r3, #0]
2400d648:	4a58      	ldr	r2, [pc, #352]	; (2400d7ac <I2C_Slave_ISR_DMA+0x2a8>)
2400d64a:	4293      	cmp	r3, r2
2400d64c:	d005      	beq.n	2400d65a <I2C_Slave_ISR_DMA+0x156>
2400d64e:	68fb      	ldr	r3, [r7, #12]
2400d650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d652:	681b      	ldr	r3, [r3, #0]
2400d654:	4a56      	ldr	r2, [pc, #344]	; (2400d7b0 <I2C_Slave_ISR_DMA+0x2ac>)
2400d656:	4293      	cmp	r3, r2
2400d658:	d109      	bne.n	2400d66e <I2C_Slave_ISR_DMA+0x16a>
2400d65a:	68fb      	ldr	r3, [r7, #12]
2400d65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d65e:	681b      	ldr	r3, [r3, #0]
2400d660:	685b      	ldr	r3, [r3, #4]
2400d662:	2b00      	cmp	r3, #0
2400d664:	bf0c      	ite	eq
2400d666:	2301      	moveq	r3, #1
2400d668:	2300      	movne	r3, #0
2400d66a:	b2db      	uxtb	r3, r3
2400d66c:	e008      	b.n	2400d680 <I2C_Slave_ISR_DMA+0x17c>
2400d66e:	68fb      	ldr	r3, [r7, #12]
2400d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d672:	681b      	ldr	r3, [r3, #0]
2400d674:	685b      	ldr	r3, [r3, #4]
2400d676:	2b00      	cmp	r3, #0
2400d678:	bf0c      	ite	eq
2400d67a:	2301      	moveq	r3, #1
2400d67c:	2300      	movne	r3, #0
2400d67e:	b2db      	uxtb	r3, r3
2400d680:	2b00      	cmp	r3, #0
2400d682:	d001      	beq.n	2400d688 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
2400d684:	2301      	movs	r3, #1
2400d686:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2400d688:	68fb      	ldr	r3, [r7, #12]
2400d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d68c:	2b00      	cmp	r3, #0
2400d68e:	f000 809e 	beq.w	2400d7ce <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400d692:	687b      	ldr	r3, [r7, #4]
2400d694:	0b9b      	lsrs	r3, r3, #14
2400d696:	f003 0301 	and.w	r3, r3, #1
2400d69a:	2b00      	cmp	r3, #0
2400d69c:	f000 8097 	beq.w	2400d7ce <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400d6a0:	68fb      	ldr	r3, [r7, #12]
2400d6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6a4:	681b      	ldr	r3, [r3, #0]
2400d6a6:	4a33      	ldr	r2, [pc, #204]	; (2400d774 <I2C_Slave_ISR_DMA+0x270>)
2400d6a8:	4293      	cmp	r3, r2
2400d6aa:	d059      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6ac:	68fb      	ldr	r3, [r7, #12]
2400d6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6b0:	681b      	ldr	r3, [r3, #0]
2400d6b2:	4a31      	ldr	r2, [pc, #196]	; (2400d778 <I2C_Slave_ISR_DMA+0x274>)
2400d6b4:	4293      	cmp	r3, r2
2400d6b6:	d053      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6b8:	68fb      	ldr	r3, [r7, #12]
2400d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6bc:	681b      	ldr	r3, [r3, #0]
2400d6be:	4a2f      	ldr	r2, [pc, #188]	; (2400d77c <I2C_Slave_ISR_DMA+0x278>)
2400d6c0:	4293      	cmp	r3, r2
2400d6c2:	d04d      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6c4:	68fb      	ldr	r3, [r7, #12]
2400d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6c8:	681b      	ldr	r3, [r3, #0]
2400d6ca:	4a2d      	ldr	r2, [pc, #180]	; (2400d780 <I2C_Slave_ISR_DMA+0x27c>)
2400d6cc:	4293      	cmp	r3, r2
2400d6ce:	d047      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6d0:	68fb      	ldr	r3, [r7, #12]
2400d6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6d4:	681b      	ldr	r3, [r3, #0]
2400d6d6:	4a2b      	ldr	r2, [pc, #172]	; (2400d784 <I2C_Slave_ISR_DMA+0x280>)
2400d6d8:	4293      	cmp	r3, r2
2400d6da:	d041      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6dc:	68fb      	ldr	r3, [r7, #12]
2400d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6e0:	681b      	ldr	r3, [r3, #0]
2400d6e2:	4a29      	ldr	r2, [pc, #164]	; (2400d788 <I2C_Slave_ISR_DMA+0x284>)
2400d6e4:	4293      	cmp	r3, r2
2400d6e6:	d03b      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6e8:	68fb      	ldr	r3, [r7, #12]
2400d6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6ec:	681b      	ldr	r3, [r3, #0]
2400d6ee:	4a27      	ldr	r2, [pc, #156]	; (2400d78c <I2C_Slave_ISR_DMA+0x288>)
2400d6f0:	4293      	cmp	r3, r2
2400d6f2:	d035      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d6f4:	68fb      	ldr	r3, [r7, #12]
2400d6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d6f8:	681b      	ldr	r3, [r3, #0]
2400d6fa:	4a25      	ldr	r2, [pc, #148]	; (2400d790 <I2C_Slave_ISR_DMA+0x28c>)
2400d6fc:	4293      	cmp	r3, r2
2400d6fe:	d02f      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d700:	68fb      	ldr	r3, [r7, #12]
2400d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d704:	681b      	ldr	r3, [r3, #0]
2400d706:	4a23      	ldr	r2, [pc, #140]	; (2400d794 <I2C_Slave_ISR_DMA+0x290>)
2400d708:	4293      	cmp	r3, r2
2400d70a:	d029      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d70c:	68fb      	ldr	r3, [r7, #12]
2400d70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d710:	681b      	ldr	r3, [r3, #0]
2400d712:	4a21      	ldr	r2, [pc, #132]	; (2400d798 <I2C_Slave_ISR_DMA+0x294>)
2400d714:	4293      	cmp	r3, r2
2400d716:	d023      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d718:	68fb      	ldr	r3, [r7, #12]
2400d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d71c:	681b      	ldr	r3, [r3, #0]
2400d71e:	4a1f      	ldr	r2, [pc, #124]	; (2400d79c <I2C_Slave_ISR_DMA+0x298>)
2400d720:	4293      	cmp	r3, r2
2400d722:	d01d      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d724:	68fb      	ldr	r3, [r7, #12]
2400d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d728:	681b      	ldr	r3, [r3, #0]
2400d72a:	4a1d      	ldr	r2, [pc, #116]	; (2400d7a0 <I2C_Slave_ISR_DMA+0x29c>)
2400d72c:	4293      	cmp	r3, r2
2400d72e:	d017      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d730:	68fb      	ldr	r3, [r7, #12]
2400d732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d734:	681b      	ldr	r3, [r3, #0]
2400d736:	4a1b      	ldr	r2, [pc, #108]	; (2400d7a4 <I2C_Slave_ISR_DMA+0x2a0>)
2400d738:	4293      	cmp	r3, r2
2400d73a:	d011      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d73c:	68fb      	ldr	r3, [r7, #12]
2400d73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d740:	681b      	ldr	r3, [r3, #0]
2400d742:	4a19      	ldr	r2, [pc, #100]	; (2400d7a8 <I2C_Slave_ISR_DMA+0x2a4>)
2400d744:	4293      	cmp	r3, r2
2400d746:	d00b      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d748:	68fb      	ldr	r3, [r7, #12]
2400d74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d74c:	681b      	ldr	r3, [r3, #0]
2400d74e:	4a17      	ldr	r2, [pc, #92]	; (2400d7ac <I2C_Slave_ISR_DMA+0x2a8>)
2400d750:	4293      	cmp	r3, r2
2400d752:	d005      	beq.n	2400d760 <I2C_Slave_ISR_DMA+0x25c>
2400d754:	68fb      	ldr	r3, [r7, #12]
2400d756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d758:	681b      	ldr	r3, [r3, #0]
2400d75a:	4a15      	ldr	r2, [pc, #84]	; (2400d7b0 <I2C_Slave_ISR_DMA+0x2ac>)
2400d75c:	4293      	cmp	r3, r2
2400d75e:	d129      	bne.n	2400d7b4 <I2C_Slave_ISR_DMA+0x2b0>
2400d760:	68fb      	ldr	r3, [r7, #12]
2400d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d764:	681b      	ldr	r3, [r3, #0]
2400d766:	685b      	ldr	r3, [r3, #4]
2400d768:	2b00      	cmp	r3, #0
2400d76a:	bf0c      	ite	eq
2400d76c:	2301      	moveq	r3, #1
2400d76e:	2300      	movne	r3, #0
2400d770:	b2db      	uxtb	r3, r3
2400d772:	e028      	b.n	2400d7c6 <I2C_Slave_ISR_DMA+0x2c2>
2400d774:	40020010 	.word	0x40020010
2400d778:	40020028 	.word	0x40020028
2400d77c:	40020040 	.word	0x40020040
2400d780:	40020058 	.word	0x40020058
2400d784:	40020070 	.word	0x40020070
2400d788:	40020088 	.word	0x40020088
2400d78c:	400200a0 	.word	0x400200a0
2400d790:	400200b8 	.word	0x400200b8
2400d794:	40020410 	.word	0x40020410
2400d798:	40020428 	.word	0x40020428
2400d79c:	40020440 	.word	0x40020440
2400d7a0:	40020458 	.word	0x40020458
2400d7a4:	40020470 	.word	0x40020470
2400d7a8:	40020488 	.word	0x40020488
2400d7ac:	400204a0 	.word	0x400204a0
2400d7b0:	400204b8 	.word	0x400204b8
2400d7b4:	68fb      	ldr	r3, [r7, #12]
2400d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7b8:	681b      	ldr	r3, [r3, #0]
2400d7ba:	685b      	ldr	r3, [r3, #4]
2400d7bc:	2b00      	cmp	r3, #0
2400d7be:	bf0c      	ite	eq
2400d7c0:	2301      	moveq	r3, #1
2400d7c2:	2300      	movne	r3, #0
2400d7c4:	b2db      	uxtb	r3, r3
2400d7c6:	2b00      	cmp	r3, #0
2400d7c8:	d001      	beq.n	2400d7ce <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
2400d7ca:	2301      	movs	r3, #1
2400d7cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2400d7ce:	69fb      	ldr	r3, [r7, #28]
2400d7d0:	2b01      	cmp	r3, #1
2400d7d2:	d128      	bne.n	2400d826 <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400d7d4:	68fb      	ldr	r3, [r7, #12]
2400d7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d7da:	b2db      	uxtb	r3, r3
2400d7dc:	2b28      	cmp	r3, #40	; 0x28
2400d7de:	d108      	bne.n	2400d7f2 <I2C_Slave_ISR_DMA+0x2ee>
2400d7e0:	69bb      	ldr	r3, [r7, #24]
2400d7e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d7e6:	d104      	bne.n	2400d7f2 <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2400d7e8:	68b9      	ldr	r1, [r7, #8]
2400d7ea:	68f8      	ldr	r0, [r7, #12]
2400d7ec:	f000 fcf6 	bl	2400e1dc <I2C_ITListenCplt>
2400d7f0:	e048      	b.n	2400d884 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400d7f2:	68fb      	ldr	r3, [r7, #12]
2400d7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d7f8:	b2db      	uxtb	r3, r3
2400d7fa:	2b29      	cmp	r3, #41	; 0x29
2400d7fc:	d10e      	bne.n	2400d81c <I2C_Slave_ISR_DMA+0x318>
2400d7fe:	69bb      	ldr	r3, [r7, #24]
2400d800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d804:	d00a      	beq.n	2400d81c <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d806:	68fb      	ldr	r3, [r7, #12]
2400d808:	681b      	ldr	r3, [r3, #0]
2400d80a:	2210      	movs	r2, #16
2400d80c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2400d80e:	68f8      	ldr	r0, [r7, #12]
2400d810:	f000 fe31 	bl	2400e476 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2400d814:	68f8      	ldr	r0, [r7, #12]
2400d816:	f000 f9c0 	bl	2400db9a <I2C_ITSlaveSeqCplt>
2400d81a:	e033      	b.n	2400d884 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d81c:	68fb      	ldr	r3, [r7, #12]
2400d81e:	681b      	ldr	r3, [r3, #0]
2400d820:	2210      	movs	r2, #16
2400d822:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2400d824:	e034      	b.n	2400d890 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d826:	68fb      	ldr	r3, [r7, #12]
2400d828:	681b      	ldr	r3, [r3, #0]
2400d82a:	2210      	movs	r2, #16
2400d82c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d82e:	68fb      	ldr	r3, [r7, #12]
2400d830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d832:	f043 0204 	orr.w	r2, r3, #4
2400d836:	68fb      	ldr	r3, [r7, #12]
2400d838:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2400d83a:	68fb      	ldr	r3, [r7, #12]
2400d83c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d840:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400d842:	69bb      	ldr	r3, [r7, #24]
2400d844:	2b00      	cmp	r3, #0
2400d846:	d003      	beq.n	2400d850 <I2C_Slave_ISR_DMA+0x34c>
2400d848:	69bb      	ldr	r3, [r7, #24]
2400d84a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d84e:	d11f      	bne.n	2400d890 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400d850:	7dfb      	ldrb	r3, [r7, #23]
2400d852:	2b21      	cmp	r3, #33	; 0x21
2400d854:	d002      	beq.n	2400d85c <I2C_Slave_ISR_DMA+0x358>
2400d856:	7dfb      	ldrb	r3, [r7, #23]
2400d858:	2b29      	cmp	r3, #41	; 0x29
2400d85a:	d103      	bne.n	2400d864 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400d85c:	68fb      	ldr	r3, [r7, #12]
2400d85e:	2221      	movs	r2, #33	; 0x21
2400d860:	631a      	str	r2, [r3, #48]	; 0x30
2400d862:	e008      	b.n	2400d876 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400d864:	7dfb      	ldrb	r3, [r7, #23]
2400d866:	2b22      	cmp	r3, #34	; 0x22
2400d868:	d002      	beq.n	2400d870 <I2C_Slave_ISR_DMA+0x36c>
2400d86a:	7dfb      	ldrb	r3, [r7, #23]
2400d86c:	2b2a      	cmp	r3, #42	; 0x2a
2400d86e:	d102      	bne.n	2400d876 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400d870:	68fb      	ldr	r3, [r7, #12]
2400d872:	2222      	movs	r2, #34	; 0x22
2400d874:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2400d876:	68fb      	ldr	r3, [r7, #12]
2400d878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d87a:	4619      	mov	r1, r3
2400d87c:	68f8      	ldr	r0, [r7, #12]
2400d87e:	f000 fd03 	bl	2400e288 <I2C_ITError>
      if (treatdmanack == 1U)
2400d882:	e005      	b.n	2400d890 <I2C_Slave_ISR_DMA+0x38c>
2400d884:	e004      	b.n	2400d890 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d886:	68fb      	ldr	r3, [r7, #12]
2400d888:	681b      	ldr	r3, [r3, #0]
2400d88a:	2210      	movs	r2, #16
2400d88c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d88e:	e011      	b.n	2400d8b4 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
2400d890:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d892:	e00f      	b.n	2400d8b4 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d894:	68bb      	ldr	r3, [r7, #8]
2400d896:	08db      	lsrs	r3, r3, #3
2400d898:	f003 0301 	and.w	r3, r3, #1
2400d89c:	2b00      	cmp	r3, #0
2400d89e:	d009      	beq.n	2400d8b4 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400d8a0:	687b      	ldr	r3, [r7, #4]
2400d8a2:	08db      	lsrs	r3, r3, #3
2400d8a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d8a8:	2b00      	cmp	r3, #0
2400d8aa:	d003      	beq.n	2400d8b4 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2400d8ac:	68b9      	ldr	r1, [r7, #8]
2400d8ae:	68f8      	ldr	r0, [r7, #12]
2400d8b0:	f000 f8b2 	bl	2400da18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d8b4:	68fb      	ldr	r3, [r7, #12]
2400d8b6:	2200      	movs	r2, #0
2400d8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d8bc:	2300      	movs	r3, #0
}
2400d8be:	4618      	mov	r0, r3
2400d8c0:	3720      	adds	r7, #32
2400d8c2:	46bd      	mov	sp, r7
2400d8c4:	bd80      	pop	{r7, pc}
2400d8c6:	bf00      	nop

2400d8c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400d8c8:	b580      	push	{r7, lr}
2400d8ca:	b086      	sub	sp, #24
2400d8cc:	af02      	add	r7, sp, #8
2400d8ce:	60f8      	str	r0, [r7, #12]
2400d8d0:	4608      	mov	r0, r1
2400d8d2:	4611      	mov	r1, r2
2400d8d4:	461a      	mov	r2, r3
2400d8d6:	4603      	mov	r3, r0
2400d8d8:	817b      	strh	r3, [r7, #10]
2400d8da:	460b      	mov	r3, r1
2400d8dc:	813b      	strh	r3, [r7, #8]
2400d8de:	4613      	mov	r3, r2
2400d8e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400d8e2:	88fb      	ldrh	r3, [r7, #6]
2400d8e4:	b2da      	uxtb	r2, r3
2400d8e6:	8979      	ldrh	r1, [r7, #10]
2400d8e8:	4b20      	ldr	r3, [pc, #128]	; (2400d96c <I2C_RequestMemoryWrite+0xa4>)
2400d8ea:	9300      	str	r3, [sp, #0]
2400d8ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d8f0:	68f8      	ldr	r0, [r7, #12]
2400d8f2:	f001 fac7 	bl	2400ee84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d8f6:	69fa      	ldr	r2, [r7, #28]
2400d8f8:	69b9      	ldr	r1, [r7, #24]
2400d8fa:	68f8      	ldr	r0, [r7, #12]
2400d8fc:	f001 f8e0 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400d900:	4603      	mov	r3, r0
2400d902:	2b00      	cmp	r3, #0
2400d904:	d001      	beq.n	2400d90a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2400d906:	2301      	movs	r3, #1
2400d908:	e02c      	b.n	2400d964 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400d90a:	88fb      	ldrh	r3, [r7, #6]
2400d90c:	2b01      	cmp	r3, #1
2400d90e:	d105      	bne.n	2400d91c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d910:	893b      	ldrh	r3, [r7, #8]
2400d912:	b2da      	uxtb	r2, r3
2400d914:	68fb      	ldr	r3, [r7, #12]
2400d916:	681b      	ldr	r3, [r3, #0]
2400d918:	629a      	str	r2, [r3, #40]	; 0x28
2400d91a:	e015      	b.n	2400d948 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400d91c:	893b      	ldrh	r3, [r7, #8]
2400d91e:	0a1b      	lsrs	r3, r3, #8
2400d920:	b29b      	uxth	r3, r3
2400d922:	b2da      	uxtb	r2, r3
2400d924:	68fb      	ldr	r3, [r7, #12]
2400d926:	681b      	ldr	r3, [r3, #0]
2400d928:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d92a:	69fa      	ldr	r2, [r7, #28]
2400d92c:	69b9      	ldr	r1, [r7, #24]
2400d92e:	68f8      	ldr	r0, [r7, #12]
2400d930:	f001 f8c6 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400d934:	4603      	mov	r3, r0
2400d936:	2b00      	cmp	r3, #0
2400d938:	d001      	beq.n	2400d93e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2400d93a:	2301      	movs	r3, #1
2400d93c:	e012      	b.n	2400d964 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d93e:	893b      	ldrh	r3, [r7, #8]
2400d940:	b2da      	uxtb	r2, r3
2400d942:	68fb      	ldr	r3, [r7, #12]
2400d944:	681b      	ldr	r3, [r3, #0]
2400d946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2400d948:	69fb      	ldr	r3, [r7, #28]
2400d94a:	9300      	str	r3, [sp, #0]
2400d94c:	69bb      	ldr	r3, [r7, #24]
2400d94e:	2200      	movs	r2, #0
2400d950:	2180      	movs	r1, #128	; 0x80
2400d952:	68f8      	ldr	r0, [r7, #12]
2400d954:	f001 f874 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400d958:	4603      	mov	r3, r0
2400d95a:	2b00      	cmp	r3, #0
2400d95c:	d001      	beq.n	2400d962 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2400d95e:	2301      	movs	r3, #1
2400d960:	e000      	b.n	2400d964 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2400d962:	2300      	movs	r3, #0
}
2400d964:	4618      	mov	r0, r3
2400d966:	3710      	adds	r7, #16
2400d968:	46bd      	mov	sp, r7
2400d96a:	bd80      	pop	{r7, pc}
2400d96c:	80002000 	.word	0x80002000

2400d970 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2400d970:	b580      	push	{r7, lr}
2400d972:	b086      	sub	sp, #24
2400d974:	af02      	add	r7, sp, #8
2400d976:	60f8      	str	r0, [r7, #12]
2400d978:	4608      	mov	r0, r1
2400d97a:	4611      	mov	r1, r2
2400d97c:	461a      	mov	r2, r3
2400d97e:	4603      	mov	r3, r0
2400d980:	817b      	strh	r3, [r7, #10]
2400d982:	460b      	mov	r3, r1
2400d984:	813b      	strh	r3, [r7, #8]
2400d986:	4613      	mov	r3, r2
2400d988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400d98a:	88fb      	ldrh	r3, [r7, #6]
2400d98c:	b2da      	uxtb	r2, r3
2400d98e:	8979      	ldrh	r1, [r7, #10]
2400d990:	4b20      	ldr	r3, [pc, #128]	; (2400da14 <I2C_RequestMemoryRead+0xa4>)
2400d992:	9300      	str	r3, [sp, #0]
2400d994:	2300      	movs	r3, #0
2400d996:	68f8      	ldr	r0, [r7, #12]
2400d998:	f001 fa74 	bl	2400ee84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d99c:	69fa      	ldr	r2, [r7, #28]
2400d99e:	69b9      	ldr	r1, [r7, #24]
2400d9a0:	68f8      	ldr	r0, [r7, #12]
2400d9a2:	f001 f88d 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400d9a6:	4603      	mov	r3, r0
2400d9a8:	2b00      	cmp	r3, #0
2400d9aa:	d001      	beq.n	2400d9b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2400d9ac:	2301      	movs	r3, #1
2400d9ae:	e02c      	b.n	2400da0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400d9b0:	88fb      	ldrh	r3, [r7, #6]
2400d9b2:	2b01      	cmp	r3, #1
2400d9b4:	d105      	bne.n	2400d9c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d9b6:	893b      	ldrh	r3, [r7, #8]
2400d9b8:	b2da      	uxtb	r2, r3
2400d9ba:	68fb      	ldr	r3, [r7, #12]
2400d9bc:	681b      	ldr	r3, [r3, #0]
2400d9be:	629a      	str	r2, [r3, #40]	; 0x28
2400d9c0:	e015      	b.n	2400d9ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400d9c2:	893b      	ldrh	r3, [r7, #8]
2400d9c4:	0a1b      	lsrs	r3, r3, #8
2400d9c6:	b29b      	uxth	r3, r3
2400d9c8:	b2da      	uxtb	r2, r3
2400d9ca:	68fb      	ldr	r3, [r7, #12]
2400d9cc:	681b      	ldr	r3, [r3, #0]
2400d9ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d9d0:	69fa      	ldr	r2, [r7, #28]
2400d9d2:	69b9      	ldr	r1, [r7, #24]
2400d9d4:	68f8      	ldr	r0, [r7, #12]
2400d9d6:	f001 f873 	bl	2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>
2400d9da:	4603      	mov	r3, r0
2400d9dc:	2b00      	cmp	r3, #0
2400d9de:	d001      	beq.n	2400d9e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2400d9e0:	2301      	movs	r3, #1
2400d9e2:	e012      	b.n	2400da0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d9e4:	893b      	ldrh	r3, [r7, #8]
2400d9e6:	b2da      	uxtb	r2, r3
2400d9e8:	68fb      	ldr	r3, [r7, #12]
2400d9ea:	681b      	ldr	r3, [r3, #0]
2400d9ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2400d9ee:	69fb      	ldr	r3, [r7, #28]
2400d9f0:	9300      	str	r3, [sp, #0]
2400d9f2:	69bb      	ldr	r3, [r7, #24]
2400d9f4:	2200      	movs	r2, #0
2400d9f6:	2140      	movs	r1, #64	; 0x40
2400d9f8:	68f8      	ldr	r0, [r7, #12]
2400d9fa:	f001 f821 	bl	2400ea40 <I2C_WaitOnFlagUntilTimeout>
2400d9fe:	4603      	mov	r3, r0
2400da00:	2b00      	cmp	r3, #0
2400da02:	d001      	beq.n	2400da08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2400da04:	2301      	movs	r3, #1
2400da06:	e000      	b.n	2400da0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2400da08:	2300      	movs	r3, #0
}
2400da0a:	4618      	mov	r0, r3
2400da0c:	3710      	adds	r7, #16
2400da0e:	46bd      	mov	sp, r7
2400da10:	bd80      	pop	{r7, pc}
2400da12:	bf00      	nop
2400da14:	80002000 	.word	0x80002000

2400da18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400da18:	b580      	push	{r7, lr}
2400da1a:	b084      	sub	sp, #16
2400da1c:	af00      	add	r7, sp, #0
2400da1e:	6078      	str	r0, [r7, #4]
2400da20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400da22:	687b      	ldr	r3, [r7, #4]
2400da24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400da28:	b2db      	uxtb	r3, r3
2400da2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400da2e:	2b28      	cmp	r3, #40	; 0x28
2400da30:	d16a      	bne.n	2400db08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2400da32:	687b      	ldr	r3, [r7, #4]
2400da34:	681b      	ldr	r3, [r3, #0]
2400da36:	699b      	ldr	r3, [r3, #24]
2400da38:	0c1b      	lsrs	r3, r3, #16
2400da3a:	b2db      	uxtb	r3, r3
2400da3c:	f003 0301 	and.w	r3, r3, #1
2400da40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2400da42:	687b      	ldr	r3, [r7, #4]
2400da44:	681b      	ldr	r3, [r3, #0]
2400da46:	699b      	ldr	r3, [r3, #24]
2400da48:	0c1b      	lsrs	r3, r3, #16
2400da4a:	b29b      	uxth	r3, r3
2400da4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400da50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400da52:	687b      	ldr	r3, [r7, #4]
2400da54:	681b      	ldr	r3, [r3, #0]
2400da56:	689b      	ldr	r3, [r3, #8]
2400da58:	b29b      	uxth	r3, r3
2400da5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400da5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2400da60:	687b      	ldr	r3, [r7, #4]
2400da62:	681b      	ldr	r3, [r3, #0]
2400da64:	68db      	ldr	r3, [r3, #12]
2400da66:	b29b      	uxth	r3, r3
2400da68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400da6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400da6e:	687b      	ldr	r3, [r7, #4]
2400da70:	68db      	ldr	r3, [r3, #12]
2400da72:	2b02      	cmp	r3, #2
2400da74:	d138      	bne.n	2400dae8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400da76:	897b      	ldrh	r3, [r7, #10]
2400da78:	09db      	lsrs	r3, r3, #7
2400da7a:	b29a      	uxth	r2, r3
2400da7c:	89bb      	ldrh	r3, [r7, #12]
2400da7e:	4053      	eors	r3, r2
2400da80:	b29b      	uxth	r3, r3
2400da82:	f003 0306 	and.w	r3, r3, #6
2400da86:	2b00      	cmp	r3, #0
2400da88:	d11c      	bne.n	2400dac4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2400da8a:	897b      	ldrh	r3, [r7, #10]
2400da8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2400da8e:	687b      	ldr	r3, [r7, #4]
2400da90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400da92:	1c5a      	adds	r2, r3, #1
2400da94:	687b      	ldr	r3, [r7, #4]
2400da96:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
2400da98:	687b      	ldr	r3, [r7, #4]
2400da9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400da9c:	2b02      	cmp	r3, #2
2400da9e:	d13b      	bne.n	2400db18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2400daa0:	687b      	ldr	r3, [r7, #4]
2400daa2:	2200      	movs	r2, #0
2400daa4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400daa6:	687b      	ldr	r3, [r7, #4]
2400daa8:	681b      	ldr	r3, [r3, #0]
2400daaa:	2208      	movs	r2, #8
2400daac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2400daae:	687b      	ldr	r3, [r7, #4]
2400dab0:	2200      	movs	r2, #0
2400dab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400dab6:	89ba      	ldrh	r2, [r7, #12]
2400dab8:	7bfb      	ldrb	r3, [r7, #15]
2400daba:	4619      	mov	r1, r3
2400dabc:	6878      	ldr	r0, [r7, #4]
2400dabe:	f7ff f99a 	bl	2400cdf6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2400dac2:	e029      	b.n	2400db18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2400dac4:	893b      	ldrh	r3, [r7, #8]
2400dac6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400dac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400dacc:	6878      	ldr	r0, [r7, #4]
2400dace:	f001 fa6f 	bl	2400efb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2400dad2:	687b      	ldr	r3, [r7, #4]
2400dad4:	2200      	movs	r2, #0
2400dad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400dada:	89ba      	ldrh	r2, [r7, #12]
2400dadc:	7bfb      	ldrb	r3, [r7, #15]
2400dade:	4619      	mov	r1, r3
2400dae0:	6878      	ldr	r0, [r7, #4]
2400dae2:	f7ff f988 	bl	2400cdf6 <HAL_I2C_AddrCallback>
}
2400dae6:	e017      	b.n	2400db18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400dae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400daec:	6878      	ldr	r0, [r7, #4]
2400daee:	f001 fa5f 	bl	2400efb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2400daf2:	687b      	ldr	r3, [r7, #4]
2400daf4:	2200      	movs	r2, #0
2400daf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400dafa:	89ba      	ldrh	r2, [r7, #12]
2400dafc:	7bfb      	ldrb	r3, [r7, #15]
2400dafe:	4619      	mov	r1, r3
2400db00:	6878      	ldr	r0, [r7, #4]
2400db02:	f7ff f978 	bl	2400cdf6 <HAL_I2C_AddrCallback>
}
2400db06:	e007      	b.n	2400db18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400db08:	687b      	ldr	r3, [r7, #4]
2400db0a:	681b      	ldr	r3, [r3, #0]
2400db0c:	2208      	movs	r2, #8
2400db0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400db10:	687b      	ldr	r3, [r7, #4]
2400db12:	2200      	movs	r2, #0
2400db14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
2400db18:	bf00      	nop
2400db1a:	3710      	adds	r7, #16
2400db1c:	46bd      	mov	sp, r7
2400db1e:	bd80      	pop	{r7, pc}

2400db20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400db20:	b580      	push	{r7, lr}
2400db22:	b082      	sub	sp, #8
2400db24:	af00      	add	r7, sp, #0
2400db26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400db28:	687b      	ldr	r3, [r7, #4]
2400db2a:	2200      	movs	r2, #0
2400db2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400db30:	687b      	ldr	r3, [r7, #4]
2400db32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400db36:	b2db      	uxtb	r3, r3
2400db38:	2b21      	cmp	r3, #33	; 0x21
2400db3a:	d115      	bne.n	2400db68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2400db3c:	687b      	ldr	r3, [r7, #4]
2400db3e:	2220      	movs	r2, #32
2400db40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400db44:	687b      	ldr	r3, [r7, #4]
2400db46:	2211      	movs	r2, #17
2400db48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400db4a:	687b      	ldr	r3, [r7, #4]
2400db4c:	2200      	movs	r2, #0
2400db4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400db50:	2101      	movs	r1, #1
2400db52:	6878      	ldr	r0, [r7, #4]
2400db54:	f001 fa2c 	bl	2400efb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400db58:	687b      	ldr	r3, [r7, #4]
2400db5a:	2200      	movs	r2, #0
2400db5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400db60:	6878      	ldr	r0, [r7, #4]
2400db62:	f7ff f920 	bl	2400cda6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400db66:	e014      	b.n	2400db92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2400db68:	687b      	ldr	r3, [r7, #4]
2400db6a:	2220      	movs	r2, #32
2400db6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400db70:	687b      	ldr	r3, [r7, #4]
2400db72:	2212      	movs	r2, #18
2400db74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400db76:	687b      	ldr	r3, [r7, #4]
2400db78:	2200      	movs	r2, #0
2400db7a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400db7c:	2102      	movs	r1, #2
2400db7e:	6878      	ldr	r0, [r7, #4]
2400db80:	f001 fa16 	bl	2400efb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400db84:	687b      	ldr	r3, [r7, #4]
2400db86:	2200      	movs	r2, #0
2400db88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2400db8c:	6878      	ldr	r0, [r7, #4]
2400db8e:	f7ff f914 	bl	2400cdba <HAL_I2C_MasterRxCpltCallback>
}
2400db92:	bf00      	nop
2400db94:	3708      	adds	r7, #8
2400db96:	46bd      	mov	sp, r7
2400db98:	bd80      	pop	{r7, pc}

2400db9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400db9a:	b580      	push	{r7, lr}
2400db9c:	b084      	sub	sp, #16
2400db9e:	af00      	add	r7, sp, #0
2400dba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400dba2:	687b      	ldr	r3, [r7, #4]
2400dba4:	681b      	ldr	r3, [r3, #0]
2400dba6:	681b      	ldr	r3, [r3, #0]
2400dba8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400dbaa:	687b      	ldr	r3, [r7, #4]
2400dbac:	2200      	movs	r2, #0
2400dbae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400dbb2:	68fb      	ldr	r3, [r7, #12]
2400dbb4:	0b9b      	lsrs	r3, r3, #14
2400dbb6:	f003 0301 	and.w	r3, r3, #1
2400dbba:	2b00      	cmp	r3, #0
2400dbbc:	d008      	beq.n	2400dbd0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400dbbe:	687b      	ldr	r3, [r7, #4]
2400dbc0:	681b      	ldr	r3, [r3, #0]
2400dbc2:	681a      	ldr	r2, [r3, #0]
2400dbc4:	687b      	ldr	r3, [r7, #4]
2400dbc6:	681b      	ldr	r3, [r3, #0]
2400dbc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400dbcc:	601a      	str	r2, [r3, #0]
2400dbce:	e00d      	b.n	2400dbec <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400dbd0:	68fb      	ldr	r3, [r7, #12]
2400dbd2:	0bdb      	lsrs	r3, r3, #15
2400dbd4:	f003 0301 	and.w	r3, r3, #1
2400dbd8:	2b00      	cmp	r3, #0
2400dbda:	d007      	beq.n	2400dbec <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400dbdc:	687b      	ldr	r3, [r7, #4]
2400dbde:	681b      	ldr	r3, [r3, #0]
2400dbe0:	681a      	ldr	r2, [r3, #0]
2400dbe2:	687b      	ldr	r3, [r7, #4]
2400dbe4:	681b      	ldr	r3, [r3, #0]
2400dbe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400dbea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400dbec:	687b      	ldr	r3, [r7, #4]
2400dbee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dbf2:	b2db      	uxtb	r3, r3
2400dbf4:	2b29      	cmp	r3, #41	; 0x29
2400dbf6:	d112      	bne.n	2400dc1e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400dbf8:	687b      	ldr	r3, [r7, #4]
2400dbfa:	2228      	movs	r2, #40	; 0x28
2400dbfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400dc00:	687b      	ldr	r3, [r7, #4]
2400dc02:	2221      	movs	r2, #33	; 0x21
2400dc04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dc06:	2101      	movs	r1, #1
2400dc08:	6878      	ldr	r0, [r7, #4]
2400dc0a:	f001 f9d1 	bl	2400efb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dc0e:	687b      	ldr	r3, [r7, #4]
2400dc10:	2200      	movs	r2, #0
2400dc12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400dc16:	6878      	ldr	r0, [r7, #4]
2400dc18:	f7ff f8d9 	bl	2400cdce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2400dc1c:	e017      	b.n	2400dc4e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400dc1e:	687b      	ldr	r3, [r7, #4]
2400dc20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dc24:	b2db      	uxtb	r3, r3
2400dc26:	2b2a      	cmp	r3, #42	; 0x2a
2400dc28:	d111      	bne.n	2400dc4e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400dc2a:	687b      	ldr	r3, [r7, #4]
2400dc2c:	2228      	movs	r2, #40	; 0x28
2400dc2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400dc32:	687b      	ldr	r3, [r7, #4]
2400dc34:	2222      	movs	r2, #34	; 0x22
2400dc36:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dc38:	2102      	movs	r1, #2
2400dc3a:	6878      	ldr	r0, [r7, #4]
2400dc3c:	f001 f9b8 	bl	2400efb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400dc40:	687b      	ldr	r3, [r7, #4]
2400dc42:	2200      	movs	r2, #0
2400dc44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400dc48:	6878      	ldr	r0, [r7, #4]
2400dc4a:	f7ff f8ca 	bl	2400cde2 <HAL_I2C_SlaveRxCpltCallback>
}
2400dc4e:	bf00      	nop
2400dc50:	3710      	adds	r7, #16
2400dc52:	46bd      	mov	sp, r7
2400dc54:	bd80      	pop	{r7, pc}
	...

2400dc58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400dc58:	b580      	push	{r7, lr}
2400dc5a:	b086      	sub	sp, #24
2400dc5c:	af00      	add	r7, sp, #0
2400dc5e:	6078      	str	r0, [r7, #4]
2400dc60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2400dc62:	683b      	ldr	r3, [r7, #0]
2400dc64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400dc66:	687b      	ldr	r3, [r7, #4]
2400dc68:	681b      	ldr	r3, [r3, #0]
2400dc6a:	2220      	movs	r2, #32
2400dc6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dc6e:	687b      	ldr	r3, [r7, #4]
2400dc70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dc74:	b2db      	uxtb	r3, r3
2400dc76:	2b21      	cmp	r3, #33	; 0x21
2400dc78:	d107      	bne.n	2400dc8a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dc7a:	2101      	movs	r1, #1
2400dc7c:	6878      	ldr	r0, [r7, #4]
2400dc7e:	f001 f997 	bl	2400efb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400dc82:	687b      	ldr	r3, [r7, #4]
2400dc84:	2211      	movs	r2, #17
2400dc86:	631a      	str	r2, [r3, #48]	; 0x30
2400dc88:	e00c      	b.n	2400dca4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400dc8a:	687b      	ldr	r3, [r7, #4]
2400dc8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dc90:	b2db      	uxtb	r3, r3
2400dc92:	2b22      	cmp	r3, #34	; 0x22
2400dc94:	d106      	bne.n	2400dca4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dc96:	2102      	movs	r1, #2
2400dc98:	6878      	ldr	r0, [r7, #4]
2400dc9a:	f001 f989 	bl	2400efb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400dc9e:	687b      	ldr	r3, [r7, #4]
2400dca0:	2212      	movs	r2, #18
2400dca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400dca4:	687b      	ldr	r3, [r7, #4]
2400dca6:	681b      	ldr	r3, [r3, #0]
2400dca8:	6859      	ldr	r1, [r3, #4]
2400dcaa:	687b      	ldr	r3, [r7, #4]
2400dcac:	681a      	ldr	r2, [r3, #0]
2400dcae:	4b4d      	ldr	r3, [pc, #308]	; (2400dde4 <I2C_ITMasterCplt+0x18c>)
2400dcb0:	400b      	ands	r3, r1
2400dcb2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2400dcb4:	687b      	ldr	r3, [r7, #4]
2400dcb6:	2200      	movs	r2, #0
2400dcb8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400dcba:	687b      	ldr	r3, [r7, #4]
2400dcbc:	4a4a      	ldr	r2, [pc, #296]	; (2400dde8 <I2C_ITMasterCplt+0x190>)
2400dcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2400dcc0:	697b      	ldr	r3, [r7, #20]
2400dcc2:	091b      	lsrs	r3, r3, #4
2400dcc4:	f003 0301 	and.w	r3, r3, #1
2400dcc8:	2b00      	cmp	r3, #0
2400dcca:	d009      	beq.n	2400dce0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400dccc:	687b      	ldr	r3, [r7, #4]
2400dcce:	681b      	ldr	r3, [r3, #0]
2400dcd0:	2210      	movs	r2, #16
2400dcd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400dcd4:	687b      	ldr	r3, [r7, #4]
2400dcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400dcd8:	f043 0204 	orr.w	r2, r3, #4
2400dcdc:	687b      	ldr	r3, [r7, #4]
2400dcde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400dce0:	687b      	ldr	r3, [r7, #4]
2400dce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dce6:	b2db      	uxtb	r3, r3
2400dce8:	2b60      	cmp	r3, #96	; 0x60
2400dcea:	d10b      	bne.n	2400dd04 <I2C_ITMasterCplt+0xac>
2400dcec:	697b      	ldr	r3, [r7, #20]
2400dcee:	089b      	lsrs	r3, r3, #2
2400dcf0:	f003 0301 	and.w	r3, r3, #1
2400dcf4:	2b00      	cmp	r3, #0
2400dcf6:	d005      	beq.n	2400dd04 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400dcf8:	687b      	ldr	r3, [r7, #4]
2400dcfa:	681b      	ldr	r3, [r3, #0]
2400dcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400dcfe:	b2db      	uxtb	r3, r3
2400dd00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2400dd02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400dd04:	6878      	ldr	r0, [r7, #4]
2400dd06:	f000 fbb6 	bl	2400e476 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400dd0a:	687b      	ldr	r3, [r7, #4]
2400dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400dd0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2400dd10:	687b      	ldr	r3, [r7, #4]
2400dd12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd16:	b2db      	uxtb	r3, r3
2400dd18:	2b60      	cmp	r3, #96	; 0x60
2400dd1a:	d002      	beq.n	2400dd22 <I2C_ITMasterCplt+0xca>
2400dd1c:	693b      	ldr	r3, [r7, #16]
2400dd1e:	2b00      	cmp	r3, #0
2400dd20:	d006      	beq.n	2400dd30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400dd22:	687b      	ldr	r3, [r7, #4]
2400dd24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400dd26:	4619      	mov	r1, r3
2400dd28:	6878      	ldr	r0, [r7, #4]
2400dd2a:	f000 faad 	bl	2400e288 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2400dd2e:	e054      	b.n	2400ddda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dd30:	687b      	ldr	r3, [r7, #4]
2400dd32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd36:	b2db      	uxtb	r3, r3
2400dd38:	2b21      	cmp	r3, #33	; 0x21
2400dd3a:	d124      	bne.n	2400dd86 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
2400dd3c:	687b      	ldr	r3, [r7, #4]
2400dd3e:	2220      	movs	r2, #32
2400dd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400dd44:	687b      	ldr	r3, [r7, #4]
2400dd46:	2200      	movs	r2, #0
2400dd48:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400dd4a:	687b      	ldr	r3, [r7, #4]
2400dd4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400dd50:	b2db      	uxtb	r3, r3
2400dd52:	2b40      	cmp	r3, #64	; 0x40
2400dd54:	d10b      	bne.n	2400dd6e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400dd56:	687b      	ldr	r3, [r7, #4]
2400dd58:	2200      	movs	r2, #0
2400dd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400dd5e:	687b      	ldr	r3, [r7, #4]
2400dd60:	2200      	movs	r2, #0
2400dd62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2400dd66:	6878      	ldr	r0, [r7, #4]
2400dd68:	f7ff f85d 	bl	2400ce26 <HAL_I2C_MemTxCpltCallback>
}
2400dd6c:	e035      	b.n	2400ddda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400dd6e:	687b      	ldr	r3, [r7, #4]
2400dd70:	2200      	movs	r2, #0
2400dd72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400dd76:	687b      	ldr	r3, [r7, #4]
2400dd78:	2200      	movs	r2, #0
2400dd7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2400dd7e:	6878      	ldr	r0, [r7, #4]
2400dd80:	f7ff f811 	bl	2400cda6 <HAL_I2C_MasterTxCpltCallback>
}
2400dd84:	e029      	b.n	2400ddda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400dd86:	687b      	ldr	r3, [r7, #4]
2400dd88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd8c:	b2db      	uxtb	r3, r3
2400dd8e:	2b22      	cmp	r3, #34	; 0x22
2400dd90:	d123      	bne.n	2400ddda <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
2400dd92:	687b      	ldr	r3, [r7, #4]
2400dd94:	2220      	movs	r2, #32
2400dd96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400dd9a:	687b      	ldr	r3, [r7, #4]
2400dd9c:	2200      	movs	r2, #0
2400dd9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400dda0:	687b      	ldr	r3, [r7, #4]
2400dda2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400dda6:	b2db      	uxtb	r3, r3
2400dda8:	2b40      	cmp	r3, #64	; 0x40
2400ddaa:	d10b      	bne.n	2400ddc4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400ddac:	687b      	ldr	r3, [r7, #4]
2400ddae:	2200      	movs	r2, #0
2400ddb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400ddb4:	687b      	ldr	r3, [r7, #4]
2400ddb6:	2200      	movs	r2, #0
2400ddb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2400ddbc:	6878      	ldr	r0, [r7, #4]
2400ddbe:	f7ff f83c 	bl	2400ce3a <HAL_I2C_MemRxCpltCallback>
}
2400ddc2:	e00a      	b.n	2400ddda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400ddc4:	687b      	ldr	r3, [r7, #4]
2400ddc6:	2200      	movs	r2, #0
2400ddc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400ddcc:	687b      	ldr	r3, [r7, #4]
2400ddce:	2200      	movs	r2, #0
2400ddd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400ddd4:	6878      	ldr	r0, [r7, #4]
2400ddd6:	f7fe fff0 	bl	2400cdba <HAL_I2C_MasterRxCpltCallback>
}
2400ddda:	bf00      	nop
2400dddc:	3718      	adds	r7, #24
2400ddde:	46bd      	mov	sp, r7
2400dde0:	bd80      	pop	{r7, pc}
2400dde2:	bf00      	nop
2400dde4:	fe00e800 	.word	0xfe00e800
2400dde8:	ffff0000 	.word	0xffff0000

2400ddec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400ddec:	b580      	push	{r7, lr}
2400ddee:	b086      	sub	sp, #24
2400ddf0:	af00      	add	r7, sp, #0
2400ddf2:	6078      	str	r0, [r7, #4]
2400ddf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400ddf6:	687b      	ldr	r3, [r7, #4]
2400ddf8:	681b      	ldr	r3, [r3, #0]
2400ddfa:	681b      	ldr	r3, [r3, #0]
2400ddfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2400ddfe:	683b      	ldr	r3, [r7, #0]
2400de00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400de02:	687b      	ldr	r3, [r7, #4]
2400de04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400de08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400de0a:	687b      	ldr	r3, [r7, #4]
2400de0c:	681b      	ldr	r3, [r3, #0]
2400de0e:	2220      	movs	r2, #32
2400de10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400de12:	7bfb      	ldrb	r3, [r7, #15]
2400de14:	2b21      	cmp	r3, #33	; 0x21
2400de16:	d002      	beq.n	2400de1e <I2C_ITSlaveCplt+0x32>
2400de18:	7bfb      	ldrb	r3, [r7, #15]
2400de1a:	2b29      	cmp	r3, #41	; 0x29
2400de1c:	d108      	bne.n	2400de30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400de1e:	f248 0101 	movw	r1, #32769	; 0x8001
2400de22:	6878      	ldr	r0, [r7, #4]
2400de24:	f001 f8c4 	bl	2400efb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400de28:	687b      	ldr	r3, [r7, #4]
2400de2a:	2221      	movs	r2, #33	; 0x21
2400de2c:	631a      	str	r2, [r3, #48]	; 0x30
2400de2e:	e00d      	b.n	2400de4c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400de30:	7bfb      	ldrb	r3, [r7, #15]
2400de32:	2b22      	cmp	r3, #34	; 0x22
2400de34:	d002      	beq.n	2400de3c <I2C_ITSlaveCplt+0x50>
2400de36:	7bfb      	ldrb	r3, [r7, #15]
2400de38:	2b2a      	cmp	r3, #42	; 0x2a
2400de3a:	d107      	bne.n	2400de4c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400de3c:	f248 0102 	movw	r1, #32770	; 0x8002
2400de40:	6878      	ldr	r0, [r7, #4]
2400de42:	f001 f8b5 	bl	2400efb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400de46:	687b      	ldr	r3, [r7, #4]
2400de48:	2222      	movs	r2, #34	; 0x22
2400de4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400de4c:	687b      	ldr	r3, [r7, #4]
2400de4e:	681b      	ldr	r3, [r3, #0]
2400de50:	685a      	ldr	r2, [r3, #4]
2400de52:	687b      	ldr	r3, [r7, #4]
2400de54:	681b      	ldr	r3, [r3, #0]
2400de56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400de5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400de5c:	687b      	ldr	r3, [r7, #4]
2400de5e:	681b      	ldr	r3, [r3, #0]
2400de60:	6859      	ldr	r1, [r3, #4]
2400de62:	687b      	ldr	r3, [r7, #4]
2400de64:	681a      	ldr	r2, [r3, #0]
2400de66:	4b80      	ldr	r3, [pc, #512]	; (2400e068 <I2C_ITSlaveCplt+0x27c>)
2400de68:	400b      	ands	r3, r1
2400de6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400de6c:	6878      	ldr	r0, [r7, #4]
2400de6e:	f000 fb02 	bl	2400e476 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400de72:	693b      	ldr	r3, [r7, #16]
2400de74:	0b9b      	lsrs	r3, r3, #14
2400de76:	f003 0301 	and.w	r3, r3, #1
2400de7a:	2b00      	cmp	r3, #0
2400de7c:	d07a      	beq.n	2400df74 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400de7e:	687b      	ldr	r3, [r7, #4]
2400de80:	681b      	ldr	r3, [r3, #0]
2400de82:	681a      	ldr	r2, [r3, #0]
2400de84:	687b      	ldr	r3, [r7, #4]
2400de86:	681b      	ldr	r3, [r3, #0]
2400de88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400de8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2400de8e:	687b      	ldr	r3, [r7, #4]
2400de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400de92:	2b00      	cmp	r3, #0
2400de94:	f000 8111 	beq.w	2400e0ba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2400de98:	687b      	ldr	r3, [r7, #4]
2400de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400de9c:	681b      	ldr	r3, [r3, #0]
2400de9e:	4a73      	ldr	r2, [pc, #460]	; (2400e06c <I2C_ITSlaveCplt+0x280>)
2400dea0:	4293      	cmp	r3, r2
2400dea2:	d059      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400dea4:	687b      	ldr	r3, [r7, #4]
2400dea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dea8:	681b      	ldr	r3, [r3, #0]
2400deaa:	4a71      	ldr	r2, [pc, #452]	; (2400e070 <I2C_ITSlaveCplt+0x284>)
2400deac:	4293      	cmp	r3, r2
2400deae:	d053      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400deb0:	687b      	ldr	r3, [r7, #4]
2400deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400deb4:	681b      	ldr	r3, [r3, #0]
2400deb6:	4a6f      	ldr	r2, [pc, #444]	; (2400e074 <I2C_ITSlaveCplt+0x288>)
2400deb8:	4293      	cmp	r3, r2
2400deba:	d04d      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400debc:	687b      	ldr	r3, [r7, #4]
2400debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dec0:	681b      	ldr	r3, [r3, #0]
2400dec2:	4a6d      	ldr	r2, [pc, #436]	; (2400e078 <I2C_ITSlaveCplt+0x28c>)
2400dec4:	4293      	cmp	r3, r2
2400dec6:	d047      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400dec8:	687b      	ldr	r3, [r7, #4]
2400deca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400decc:	681b      	ldr	r3, [r3, #0]
2400dece:	4a6b      	ldr	r2, [pc, #428]	; (2400e07c <I2C_ITSlaveCplt+0x290>)
2400ded0:	4293      	cmp	r3, r2
2400ded2:	d041      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400ded4:	687b      	ldr	r3, [r7, #4]
2400ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ded8:	681b      	ldr	r3, [r3, #0]
2400deda:	4a69      	ldr	r2, [pc, #420]	; (2400e080 <I2C_ITSlaveCplt+0x294>)
2400dedc:	4293      	cmp	r3, r2
2400dede:	d03b      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400dee0:	687b      	ldr	r3, [r7, #4]
2400dee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dee4:	681b      	ldr	r3, [r3, #0]
2400dee6:	4a67      	ldr	r2, [pc, #412]	; (2400e084 <I2C_ITSlaveCplt+0x298>)
2400dee8:	4293      	cmp	r3, r2
2400deea:	d035      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400deec:	687b      	ldr	r3, [r7, #4]
2400deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400def0:	681b      	ldr	r3, [r3, #0]
2400def2:	4a65      	ldr	r2, [pc, #404]	; (2400e088 <I2C_ITSlaveCplt+0x29c>)
2400def4:	4293      	cmp	r3, r2
2400def6:	d02f      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400def8:	687b      	ldr	r3, [r7, #4]
2400defa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400defc:	681b      	ldr	r3, [r3, #0]
2400defe:	4a63      	ldr	r2, [pc, #396]	; (2400e08c <I2C_ITSlaveCplt+0x2a0>)
2400df00:	4293      	cmp	r3, r2
2400df02:	d029      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df04:	687b      	ldr	r3, [r7, #4]
2400df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df08:	681b      	ldr	r3, [r3, #0]
2400df0a:	4a61      	ldr	r2, [pc, #388]	; (2400e090 <I2C_ITSlaveCplt+0x2a4>)
2400df0c:	4293      	cmp	r3, r2
2400df0e:	d023      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df10:	687b      	ldr	r3, [r7, #4]
2400df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df14:	681b      	ldr	r3, [r3, #0]
2400df16:	4a5f      	ldr	r2, [pc, #380]	; (2400e094 <I2C_ITSlaveCplt+0x2a8>)
2400df18:	4293      	cmp	r3, r2
2400df1a:	d01d      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df1c:	687b      	ldr	r3, [r7, #4]
2400df1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df20:	681b      	ldr	r3, [r3, #0]
2400df22:	4a5d      	ldr	r2, [pc, #372]	; (2400e098 <I2C_ITSlaveCplt+0x2ac>)
2400df24:	4293      	cmp	r3, r2
2400df26:	d017      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df28:	687b      	ldr	r3, [r7, #4]
2400df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df2c:	681b      	ldr	r3, [r3, #0]
2400df2e:	4a5b      	ldr	r2, [pc, #364]	; (2400e09c <I2C_ITSlaveCplt+0x2b0>)
2400df30:	4293      	cmp	r3, r2
2400df32:	d011      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df34:	687b      	ldr	r3, [r7, #4]
2400df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df38:	681b      	ldr	r3, [r3, #0]
2400df3a:	4a59      	ldr	r2, [pc, #356]	; (2400e0a0 <I2C_ITSlaveCplt+0x2b4>)
2400df3c:	4293      	cmp	r3, r2
2400df3e:	d00b      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df40:	687b      	ldr	r3, [r7, #4]
2400df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df44:	681b      	ldr	r3, [r3, #0]
2400df46:	4a57      	ldr	r2, [pc, #348]	; (2400e0a4 <I2C_ITSlaveCplt+0x2b8>)
2400df48:	4293      	cmp	r3, r2
2400df4a:	d005      	beq.n	2400df58 <I2C_ITSlaveCplt+0x16c>
2400df4c:	687b      	ldr	r3, [r7, #4]
2400df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df50:	681b      	ldr	r3, [r3, #0]
2400df52:	4a55      	ldr	r2, [pc, #340]	; (2400e0a8 <I2C_ITSlaveCplt+0x2bc>)
2400df54:	4293      	cmp	r3, r2
2400df56:	d105      	bne.n	2400df64 <I2C_ITSlaveCplt+0x178>
2400df58:	687b      	ldr	r3, [r7, #4]
2400df5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df5c:	681b      	ldr	r3, [r3, #0]
2400df5e:	685b      	ldr	r3, [r3, #4]
2400df60:	b29b      	uxth	r3, r3
2400df62:	e004      	b.n	2400df6e <I2C_ITSlaveCplt+0x182>
2400df64:	687b      	ldr	r3, [r7, #4]
2400df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df68:	681b      	ldr	r3, [r3, #0]
2400df6a:	685b      	ldr	r3, [r3, #4]
2400df6c:	b29b      	uxth	r3, r3
2400df6e:	687a      	ldr	r2, [r7, #4]
2400df70:	8553      	strh	r3, [r2, #42]	; 0x2a
2400df72:	e0a2      	b.n	2400e0ba <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400df74:	693b      	ldr	r3, [r7, #16]
2400df76:	0bdb      	lsrs	r3, r3, #15
2400df78:	f003 0301 	and.w	r3, r3, #1
2400df7c:	2b00      	cmp	r3, #0
2400df7e:	f000 809c 	beq.w	2400e0ba <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400df82:	687b      	ldr	r3, [r7, #4]
2400df84:	681b      	ldr	r3, [r3, #0]
2400df86:	681a      	ldr	r2, [r3, #0]
2400df88:	687b      	ldr	r3, [r7, #4]
2400df8a:	681b      	ldr	r3, [r3, #0]
2400df8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400df90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2400df92:	687b      	ldr	r3, [r7, #4]
2400df94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400df96:	2b00      	cmp	r3, #0
2400df98:	f000 808f 	beq.w	2400e0ba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400df9c:	687b      	ldr	r3, [r7, #4]
2400df9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfa0:	681b      	ldr	r3, [r3, #0]
2400dfa2:	4a32      	ldr	r2, [pc, #200]	; (2400e06c <I2C_ITSlaveCplt+0x280>)
2400dfa4:	4293      	cmp	r3, r2
2400dfa6:	d059      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfa8:	687b      	ldr	r3, [r7, #4]
2400dfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfac:	681b      	ldr	r3, [r3, #0]
2400dfae:	4a30      	ldr	r2, [pc, #192]	; (2400e070 <I2C_ITSlaveCplt+0x284>)
2400dfb0:	4293      	cmp	r3, r2
2400dfb2:	d053      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfb4:	687b      	ldr	r3, [r7, #4]
2400dfb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfb8:	681b      	ldr	r3, [r3, #0]
2400dfba:	4a2e      	ldr	r2, [pc, #184]	; (2400e074 <I2C_ITSlaveCplt+0x288>)
2400dfbc:	4293      	cmp	r3, r2
2400dfbe:	d04d      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfc0:	687b      	ldr	r3, [r7, #4]
2400dfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfc4:	681b      	ldr	r3, [r3, #0]
2400dfc6:	4a2c      	ldr	r2, [pc, #176]	; (2400e078 <I2C_ITSlaveCplt+0x28c>)
2400dfc8:	4293      	cmp	r3, r2
2400dfca:	d047      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfcc:	687b      	ldr	r3, [r7, #4]
2400dfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfd0:	681b      	ldr	r3, [r3, #0]
2400dfd2:	4a2a      	ldr	r2, [pc, #168]	; (2400e07c <I2C_ITSlaveCplt+0x290>)
2400dfd4:	4293      	cmp	r3, r2
2400dfd6:	d041      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfd8:	687b      	ldr	r3, [r7, #4]
2400dfda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfdc:	681b      	ldr	r3, [r3, #0]
2400dfde:	4a28      	ldr	r2, [pc, #160]	; (2400e080 <I2C_ITSlaveCplt+0x294>)
2400dfe0:	4293      	cmp	r3, r2
2400dfe2:	d03b      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dfe4:	687b      	ldr	r3, [r7, #4]
2400dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dfe8:	681b      	ldr	r3, [r3, #0]
2400dfea:	4a26      	ldr	r2, [pc, #152]	; (2400e084 <I2C_ITSlaveCplt+0x298>)
2400dfec:	4293      	cmp	r3, r2
2400dfee:	d035      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dff0:	687b      	ldr	r3, [r7, #4]
2400dff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400dff4:	681b      	ldr	r3, [r3, #0]
2400dff6:	4a24      	ldr	r2, [pc, #144]	; (2400e088 <I2C_ITSlaveCplt+0x29c>)
2400dff8:	4293      	cmp	r3, r2
2400dffa:	d02f      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400dffc:	687b      	ldr	r3, [r7, #4]
2400dffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e000:	681b      	ldr	r3, [r3, #0]
2400e002:	4a22      	ldr	r2, [pc, #136]	; (2400e08c <I2C_ITSlaveCplt+0x2a0>)
2400e004:	4293      	cmp	r3, r2
2400e006:	d029      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e008:	687b      	ldr	r3, [r7, #4]
2400e00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e00c:	681b      	ldr	r3, [r3, #0]
2400e00e:	4a20      	ldr	r2, [pc, #128]	; (2400e090 <I2C_ITSlaveCplt+0x2a4>)
2400e010:	4293      	cmp	r3, r2
2400e012:	d023      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e014:	687b      	ldr	r3, [r7, #4]
2400e016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e018:	681b      	ldr	r3, [r3, #0]
2400e01a:	4a1e      	ldr	r2, [pc, #120]	; (2400e094 <I2C_ITSlaveCplt+0x2a8>)
2400e01c:	4293      	cmp	r3, r2
2400e01e:	d01d      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e020:	687b      	ldr	r3, [r7, #4]
2400e022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e024:	681b      	ldr	r3, [r3, #0]
2400e026:	4a1c      	ldr	r2, [pc, #112]	; (2400e098 <I2C_ITSlaveCplt+0x2ac>)
2400e028:	4293      	cmp	r3, r2
2400e02a:	d017      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e02c:	687b      	ldr	r3, [r7, #4]
2400e02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e030:	681b      	ldr	r3, [r3, #0]
2400e032:	4a1a      	ldr	r2, [pc, #104]	; (2400e09c <I2C_ITSlaveCplt+0x2b0>)
2400e034:	4293      	cmp	r3, r2
2400e036:	d011      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e038:	687b      	ldr	r3, [r7, #4]
2400e03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e03c:	681b      	ldr	r3, [r3, #0]
2400e03e:	4a18      	ldr	r2, [pc, #96]	; (2400e0a0 <I2C_ITSlaveCplt+0x2b4>)
2400e040:	4293      	cmp	r3, r2
2400e042:	d00b      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e044:	687b      	ldr	r3, [r7, #4]
2400e046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e048:	681b      	ldr	r3, [r3, #0]
2400e04a:	4a16      	ldr	r2, [pc, #88]	; (2400e0a4 <I2C_ITSlaveCplt+0x2b8>)
2400e04c:	4293      	cmp	r3, r2
2400e04e:	d005      	beq.n	2400e05c <I2C_ITSlaveCplt+0x270>
2400e050:	687b      	ldr	r3, [r7, #4]
2400e052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e054:	681b      	ldr	r3, [r3, #0]
2400e056:	4a14      	ldr	r2, [pc, #80]	; (2400e0a8 <I2C_ITSlaveCplt+0x2bc>)
2400e058:	4293      	cmp	r3, r2
2400e05a:	d127      	bne.n	2400e0ac <I2C_ITSlaveCplt+0x2c0>
2400e05c:	687b      	ldr	r3, [r7, #4]
2400e05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e060:	681b      	ldr	r3, [r3, #0]
2400e062:	685b      	ldr	r3, [r3, #4]
2400e064:	b29b      	uxth	r3, r3
2400e066:	e026      	b.n	2400e0b6 <I2C_ITSlaveCplt+0x2ca>
2400e068:	fe00e800 	.word	0xfe00e800
2400e06c:	40020010 	.word	0x40020010
2400e070:	40020028 	.word	0x40020028
2400e074:	40020040 	.word	0x40020040
2400e078:	40020058 	.word	0x40020058
2400e07c:	40020070 	.word	0x40020070
2400e080:	40020088 	.word	0x40020088
2400e084:	400200a0 	.word	0x400200a0
2400e088:	400200b8 	.word	0x400200b8
2400e08c:	40020410 	.word	0x40020410
2400e090:	40020428 	.word	0x40020428
2400e094:	40020440 	.word	0x40020440
2400e098:	40020458 	.word	0x40020458
2400e09c:	40020470 	.word	0x40020470
2400e0a0:	40020488 	.word	0x40020488
2400e0a4:	400204a0 	.word	0x400204a0
2400e0a8:	400204b8 	.word	0x400204b8
2400e0ac:	687b      	ldr	r3, [r7, #4]
2400e0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0b0:	681b      	ldr	r3, [r3, #0]
2400e0b2:	685b      	ldr	r3, [r3, #4]
2400e0b4:	b29b      	uxth	r3, r3
2400e0b6:	687a      	ldr	r2, [r7, #4]
2400e0b8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2400e0ba:	697b      	ldr	r3, [r7, #20]
2400e0bc:	089b      	lsrs	r3, r3, #2
2400e0be:	f003 0301 	and.w	r3, r3, #1
2400e0c2:	2b00      	cmp	r3, #0
2400e0c4:	d020      	beq.n	2400e108 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e0c6:	697b      	ldr	r3, [r7, #20]
2400e0c8:	f023 0304 	bic.w	r3, r3, #4
2400e0cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e0ce:	687b      	ldr	r3, [r7, #4]
2400e0d0:	681b      	ldr	r3, [r3, #0]
2400e0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e0d4:	687b      	ldr	r3, [r7, #4]
2400e0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e0d8:	b2d2      	uxtb	r2, r2
2400e0da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e0dc:	687b      	ldr	r3, [r7, #4]
2400e0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e0e0:	1c5a      	adds	r2, r3, #1
2400e0e2:	687b      	ldr	r3, [r7, #4]
2400e0e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400e0e6:	687b      	ldr	r3, [r7, #4]
2400e0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e0ea:	2b00      	cmp	r3, #0
2400e0ec:	d00c      	beq.n	2400e108 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
2400e0ee:	687b      	ldr	r3, [r7, #4]
2400e0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e0f2:	3b01      	subs	r3, #1
2400e0f4:	b29a      	uxth	r2, r3
2400e0f6:	687b      	ldr	r3, [r7, #4]
2400e0f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e0fa:	687b      	ldr	r3, [r7, #4]
2400e0fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e0fe:	b29b      	uxth	r3, r3
2400e100:	3b01      	subs	r3, #1
2400e102:	b29a      	uxth	r2, r3
2400e104:	687b      	ldr	r3, [r7, #4]
2400e106:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2400e108:	687b      	ldr	r3, [r7, #4]
2400e10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e10c:	b29b      	uxth	r3, r3
2400e10e:	2b00      	cmp	r3, #0
2400e110:	d005      	beq.n	2400e11e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e112:	687b      	ldr	r3, [r7, #4]
2400e114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e116:	f043 0204 	orr.w	r2, r3, #4
2400e11a:	687b      	ldr	r3, [r7, #4]
2400e11c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e11e:	687b      	ldr	r3, [r7, #4]
2400e120:	2200      	movs	r2, #0
2400e122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400e126:	687b      	ldr	r3, [r7, #4]
2400e128:	2200      	movs	r2, #0
2400e12a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400e12c:	687b      	ldr	r3, [r7, #4]
2400e12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e130:	2b00      	cmp	r3, #0
2400e132:	d010      	beq.n	2400e156 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400e134:	687b      	ldr	r3, [r7, #4]
2400e136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e138:	4619      	mov	r1, r3
2400e13a:	6878      	ldr	r0, [r7, #4]
2400e13c:	f000 f8a4 	bl	2400e288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400e140:	687b      	ldr	r3, [r7, #4]
2400e142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e146:	b2db      	uxtb	r3, r3
2400e148:	2b28      	cmp	r3, #40	; 0x28
2400e14a:	d141      	bne.n	2400e1d0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2400e14c:	6979      	ldr	r1, [r7, #20]
2400e14e:	6878      	ldr	r0, [r7, #4]
2400e150:	f000 f844 	bl	2400e1dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e154:	e03c      	b.n	2400e1d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e156:	687b      	ldr	r3, [r7, #4]
2400e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e15a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e15e:	d014      	beq.n	2400e18a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
2400e160:	6878      	ldr	r0, [r7, #4]
2400e162:	f7ff fd1a 	bl	2400db9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400e166:	687b      	ldr	r3, [r7, #4]
2400e168:	4a1b      	ldr	r2, [pc, #108]	; (2400e1d8 <I2C_ITSlaveCplt+0x3ec>)
2400e16a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2400e16c:	687b      	ldr	r3, [r7, #4]
2400e16e:	2220      	movs	r2, #32
2400e170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e174:	687b      	ldr	r3, [r7, #4]
2400e176:	2200      	movs	r2, #0
2400e178:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e17a:	687b      	ldr	r3, [r7, #4]
2400e17c:	2200      	movs	r2, #0
2400e17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2400e182:	6878      	ldr	r0, [r7, #4]
2400e184:	f7fe fe45 	bl	2400ce12 <HAL_I2C_ListenCpltCallback>
}
2400e188:	e022      	b.n	2400e1d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e18a:	687b      	ldr	r3, [r7, #4]
2400e18c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e190:	b2db      	uxtb	r3, r3
2400e192:	2b22      	cmp	r3, #34	; 0x22
2400e194:	d10e      	bne.n	2400e1b4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
2400e196:	687b      	ldr	r3, [r7, #4]
2400e198:	2220      	movs	r2, #32
2400e19a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e19e:	687b      	ldr	r3, [r7, #4]
2400e1a0:	2200      	movs	r2, #0
2400e1a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e1a4:	687b      	ldr	r3, [r7, #4]
2400e1a6:	2200      	movs	r2, #0
2400e1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400e1ac:	6878      	ldr	r0, [r7, #4]
2400e1ae:	f7fe fe18 	bl	2400cde2 <HAL_I2C_SlaveRxCpltCallback>
}
2400e1b2:	e00d      	b.n	2400e1d0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
2400e1b4:	687b      	ldr	r3, [r7, #4]
2400e1b6:	2220      	movs	r2, #32
2400e1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e1bc:	687b      	ldr	r3, [r7, #4]
2400e1be:	2200      	movs	r2, #0
2400e1c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e1c2:	687b      	ldr	r3, [r7, #4]
2400e1c4:	2200      	movs	r2, #0
2400e1c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400e1ca:	6878      	ldr	r0, [r7, #4]
2400e1cc:	f7fe fdff 	bl	2400cdce <HAL_I2C_SlaveTxCpltCallback>
}
2400e1d0:	bf00      	nop
2400e1d2:	3718      	adds	r7, #24
2400e1d4:	46bd      	mov	sp, r7
2400e1d6:	bd80      	pop	{r7, pc}
2400e1d8:	ffff0000 	.word	0xffff0000

2400e1dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400e1dc:	b580      	push	{r7, lr}
2400e1de:	b082      	sub	sp, #8
2400e1e0:	af00      	add	r7, sp, #0
2400e1e2:	6078      	str	r0, [r7, #4]
2400e1e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400e1e6:	687b      	ldr	r3, [r7, #4]
2400e1e8:	4a26      	ldr	r2, [pc, #152]	; (2400e284 <I2C_ITListenCplt+0xa8>)
2400e1ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2400e1ec:	687b      	ldr	r3, [r7, #4]
2400e1ee:	2200      	movs	r2, #0
2400e1f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400e1f2:	687b      	ldr	r3, [r7, #4]
2400e1f4:	2220      	movs	r2, #32
2400e1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e1fa:	687b      	ldr	r3, [r7, #4]
2400e1fc:	2200      	movs	r2, #0
2400e1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400e202:	687b      	ldr	r3, [r7, #4]
2400e204:	2200      	movs	r2, #0
2400e206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400e208:	683b      	ldr	r3, [r7, #0]
2400e20a:	089b      	lsrs	r3, r3, #2
2400e20c:	f003 0301 	and.w	r3, r3, #1
2400e210:	2b00      	cmp	r3, #0
2400e212:	d022      	beq.n	2400e25a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e214:	687b      	ldr	r3, [r7, #4]
2400e216:	681b      	ldr	r3, [r3, #0]
2400e218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e21a:	687b      	ldr	r3, [r7, #4]
2400e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e21e:	b2d2      	uxtb	r2, r2
2400e220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e222:	687b      	ldr	r3, [r7, #4]
2400e224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e226:	1c5a      	adds	r2, r3, #1
2400e228:	687b      	ldr	r3, [r7, #4]
2400e22a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400e22c:	687b      	ldr	r3, [r7, #4]
2400e22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e230:	2b00      	cmp	r3, #0
2400e232:	d012      	beq.n	2400e25a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
2400e234:	687b      	ldr	r3, [r7, #4]
2400e236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e238:	3b01      	subs	r3, #1
2400e23a:	b29a      	uxth	r2, r3
2400e23c:	687b      	ldr	r3, [r7, #4]
2400e23e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e240:	687b      	ldr	r3, [r7, #4]
2400e242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e244:	b29b      	uxth	r3, r3
2400e246:	3b01      	subs	r3, #1
2400e248:	b29a      	uxth	r2, r3
2400e24a:	687b      	ldr	r3, [r7, #4]
2400e24c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e24e:	687b      	ldr	r3, [r7, #4]
2400e250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e252:	f043 0204 	orr.w	r2, r3, #4
2400e256:	687b      	ldr	r3, [r7, #4]
2400e258:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e25a:	f248 0103 	movw	r1, #32771	; 0x8003
2400e25e:	6878      	ldr	r0, [r7, #4]
2400e260:	f000 fea6 	bl	2400efb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e264:	687b      	ldr	r3, [r7, #4]
2400e266:	681b      	ldr	r3, [r3, #0]
2400e268:	2210      	movs	r2, #16
2400e26a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e26c:	687b      	ldr	r3, [r7, #4]
2400e26e:	2200      	movs	r2, #0
2400e270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2400e274:	6878      	ldr	r0, [r7, #4]
2400e276:	f7fe fdcc 	bl	2400ce12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2400e27a:	bf00      	nop
2400e27c:	3708      	adds	r7, #8
2400e27e:	46bd      	mov	sp, r7
2400e280:	bd80      	pop	{r7, pc}
2400e282:	bf00      	nop
2400e284:	ffff0000 	.word	0xffff0000

2400e288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2400e288:	b580      	push	{r7, lr}
2400e28a:	b084      	sub	sp, #16
2400e28c:	af00      	add	r7, sp, #0
2400e28e:	6078      	str	r0, [r7, #4]
2400e290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400e292:	687b      	ldr	r3, [r7, #4]
2400e294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400e29a:	687b      	ldr	r3, [r7, #4]
2400e29c:	2200      	movs	r2, #0
2400e29e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400e2a2:	687b      	ldr	r3, [r7, #4]
2400e2a4:	4a5d      	ldr	r2, [pc, #372]	; (2400e41c <I2C_ITError+0x194>)
2400e2a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
2400e2a8:	687b      	ldr	r3, [r7, #4]
2400e2aa:	2200      	movs	r2, #0
2400e2ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2400e2ae:	687b      	ldr	r3, [r7, #4]
2400e2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400e2b2:	683b      	ldr	r3, [r7, #0]
2400e2b4:	431a      	orrs	r2, r3
2400e2b6:	687b      	ldr	r3, [r7, #4]
2400e2b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400e2ba:	7bfb      	ldrb	r3, [r7, #15]
2400e2bc:	2b28      	cmp	r3, #40	; 0x28
2400e2be:	d005      	beq.n	2400e2cc <I2C_ITError+0x44>
2400e2c0:	7bfb      	ldrb	r3, [r7, #15]
2400e2c2:	2b29      	cmp	r3, #41	; 0x29
2400e2c4:	d002      	beq.n	2400e2cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2400e2c6:	7bfb      	ldrb	r3, [r7, #15]
2400e2c8:	2b2a      	cmp	r3, #42	; 0x2a
2400e2ca:	d10b      	bne.n	2400e2e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e2cc:	2103      	movs	r1, #3
2400e2ce:	6878      	ldr	r0, [r7, #4]
2400e2d0:	f000 fe6e 	bl	2400efb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400e2d4:	687b      	ldr	r3, [r7, #4]
2400e2d6:	2228      	movs	r2, #40	; 0x28
2400e2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2400e2dc:	687b      	ldr	r3, [r7, #4]
2400e2de:	4a50      	ldr	r2, [pc, #320]	; (2400e420 <I2C_ITError+0x198>)
2400e2e0:	635a      	str	r2, [r3, #52]	; 0x34
2400e2e2:	e011      	b.n	2400e308 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e2e4:	f248 0103 	movw	r1, #32771	; 0x8003
2400e2e8:	6878      	ldr	r0, [r7, #4]
2400e2ea:	f000 fe61 	bl	2400efb0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2400e2ee:	687b      	ldr	r3, [r7, #4]
2400e2f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e2f4:	b2db      	uxtb	r3, r3
2400e2f6:	2b60      	cmp	r3, #96	; 0x60
2400e2f8:	d003      	beq.n	2400e302 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2400e2fa:	687b      	ldr	r3, [r7, #4]
2400e2fc:	2220      	movs	r2, #32
2400e2fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
2400e302:	687b      	ldr	r3, [r7, #4]
2400e304:	2200      	movs	r2, #0
2400e306:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2400e308:	687b      	ldr	r3, [r7, #4]
2400e30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400e30c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2400e30e:	687b      	ldr	r3, [r7, #4]
2400e310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e312:	2b00      	cmp	r3, #0
2400e314:	d039      	beq.n	2400e38a <I2C_ITError+0x102>
2400e316:	68bb      	ldr	r3, [r7, #8]
2400e318:	2b11      	cmp	r3, #17
2400e31a:	d002      	beq.n	2400e322 <I2C_ITError+0x9a>
2400e31c:	68bb      	ldr	r3, [r7, #8]
2400e31e:	2b21      	cmp	r3, #33	; 0x21
2400e320:	d133      	bne.n	2400e38a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400e322:	687b      	ldr	r3, [r7, #4]
2400e324:	681b      	ldr	r3, [r3, #0]
2400e326:	681b      	ldr	r3, [r3, #0]
2400e328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400e32c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400e330:	d107      	bne.n	2400e342 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e332:	687b      	ldr	r3, [r7, #4]
2400e334:	681b      	ldr	r3, [r3, #0]
2400e336:	681a      	ldr	r2, [r3, #0]
2400e338:	687b      	ldr	r3, [r7, #4]
2400e33a:	681b      	ldr	r3, [r3, #0]
2400e33c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e340:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e342:	687b      	ldr	r3, [r7, #4]
2400e344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e346:	4618      	mov	r0, r3
2400e348:	f7f8 f804 	bl	24006354 <HAL_DMA_GetState>
2400e34c:	4603      	mov	r3, r0
2400e34e:	2b01      	cmp	r3, #1
2400e350:	d017      	beq.n	2400e382 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400e352:	687b      	ldr	r3, [r7, #4]
2400e354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e356:	4a33      	ldr	r2, [pc, #204]	; (2400e424 <I2C_ITError+0x19c>)
2400e358:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400e35a:	687b      	ldr	r3, [r7, #4]
2400e35c:	2200      	movs	r2, #0
2400e35e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400e362:	687b      	ldr	r3, [r7, #4]
2400e364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e366:	4618      	mov	r0, r3
2400e368:	f7f6 fa12 	bl	24004790 <HAL_DMA_Abort_IT>
2400e36c:	4603      	mov	r3, r0
2400e36e:	2b00      	cmp	r3, #0
2400e370:	d04d      	beq.n	2400e40e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400e372:	687b      	ldr	r3, [r7, #4]
2400e374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e378:	687a      	ldr	r2, [r7, #4]
2400e37a:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400e37c:	4610      	mov	r0, r2
2400e37e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e380:	e045      	b.n	2400e40e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400e382:	6878      	ldr	r0, [r7, #4]
2400e384:	f000 f850 	bl	2400e428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e388:	e041      	b.n	2400e40e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2400e38a:	687b      	ldr	r3, [r7, #4]
2400e38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e38e:	2b00      	cmp	r3, #0
2400e390:	d039      	beq.n	2400e406 <I2C_ITError+0x17e>
2400e392:	68bb      	ldr	r3, [r7, #8]
2400e394:	2b12      	cmp	r3, #18
2400e396:	d002      	beq.n	2400e39e <I2C_ITError+0x116>
2400e398:	68bb      	ldr	r3, [r7, #8]
2400e39a:	2b22      	cmp	r3, #34	; 0x22
2400e39c:	d133      	bne.n	2400e406 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400e39e:	687b      	ldr	r3, [r7, #4]
2400e3a0:	681b      	ldr	r3, [r3, #0]
2400e3a2:	681b      	ldr	r3, [r3, #0]
2400e3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400e3a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400e3ac:	d107      	bne.n	2400e3be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e3ae:	687b      	ldr	r3, [r7, #4]
2400e3b0:	681b      	ldr	r3, [r3, #0]
2400e3b2:	681a      	ldr	r2, [r3, #0]
2400e3b4:	687b      	ldr	r3, [r7, #4]
2400e3b6:	681b      	ldr	r3, [r3, #0]
2400e3b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e3bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e3be:	687b      	ldr	r3, [r7, #4]
2400e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e3c2:	4618      	mov	r0, r3
2400e3c4:	f7f7 ffc6 	bl	24006354 <HAL_DMA_GetState>
2400e3c8:	4603      	mov	r3, r0
2400e3ca:	2b01      	cmp	r3, #1
2400e3cc:	d017      	beq.n	2400e3fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400e3ce:	687b      	ldr	r3, [r7, #4]
2400e3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e3d2:	4a14      	ldr	r2, [pc, #80]	; (2400e424 <I2C_ITError+0x19c>)
2400e3d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400e3d6:	687b      	ldr	r3, [r7, #4]
2400e3d8:	2200      	movs	r2, #0
2400e3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400e3de:	687b      	ldr	r3, [r7, #4]
2400e3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e3e2:	4618      	mov	r0, r3
2400e3e4:	f7f6 f9d4 	bl	24004790 <HAL_DMA_Abort_IT>
2400e3e8:	4603      	mov	r3, r0
2400e3ea:	2b00      	cmp	r3, #0
2400e3ec:	d011      	beq.n	2400e412 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400e3ee:	687b      	ldr	r3, [r7, #4]
2400e3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e3f4:	687a      	ldr	r2, [r7, #4]
2400e3f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400e3f8:	4610      	mov	r0, r2
2400e3fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e3fc:	e009      	b.n	2400e412 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400e3fe:	6878      	ldr	r0, [r7, #4]
2400e400:	f000 f812 	bl	2400e428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e404:	e005      	b.n	2400e412 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2400e406:	6878      	ldr	r0, [r7, #4]
2400e408:	f000 f80e 	bl	2400e428 <I2C_TreatErrorCallback>
  }
}
2400e40c:	e002      	b.n	2400e414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e40e:	bf00      	nop
2400e410:	e000      	b.n	2400e414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e412:	bf00      	nop
}
2400e414:	bf00      	nop
2400e416:	3710      	adds	r7, #16
2400e418:	46bd      	mov	sp, r7
2400e41a:	bd80      	pop	{r7, pc}
2400e41c:	ffff0000 	.word	0xffff0000
2400e420:	2400d117 	.word	0x2400d117
2400e424:	2400ea05 	.word	0x2400ea05

2400e428 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400e428:	b580      	push	{r7, lr}
2400e42a:	b082      	sub	sp, #8
2400e42c:	af00      	add	r7, sp, #0
2400e42e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400e430:	687b      	ldr	r3, [r7, #4]
2400e432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e436:	b2db      	uxtb	r3, r3
2400e438:	2b60      	cmp	r3, #96	; 0x60
2400e43a:	d10e      	bne.n	2400e45a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2400e43c:	687b      	ldr	r3, [r7, #4]
2400e43e:	2220      	movs	r2, #32
2400e440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e444:	687b      	ldr	r3, [r7, #4]
2400e446:	2200      	movs	r2, #0
2400e448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e44a:	687b      	ldr	r3, [r7, #4]
2400e44c:	2200      	movs	r2, #0
2400e44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2400e452:	6878      	ldr	r0, [r7, #4]
2400e454:	f7fe fd05 	bl	2400ce62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e458:	e009      	b.n	2400e46e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2400e45a:	687b      	ldr	r3, [r7, #4]
2400e45c:	2200      	movs	r2, #0
2400e45e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e460:	687b      	ldr	r3, [r7, #4]
2400e462:	2200      	movs	r2, #0
2400e464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400e468:	6878      	ldr	r0, [r7, #4]
2400e46a:	f7fe fcf0 	bl	2400ce4e <HAL_I2C_ErrorCallback>
}
2400e46e:	bf00      	nop
2400e470:	3708      	adds	r7, #8
2400e472:	46bd      	mov	sp, r7
2400e474:	bd80      	pop	{r7, pc}

2400e476 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2400e476:	b480      	push	{r7}
2400e478:	b083      	sub	sp, #12
2400e47a:	af00      	add	r7, sp, #0
2400e47c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400e47e:	687b      	ldr	r3, [r7, #4]
2400e480:	681b      	ldr	r3, [r3, #0]
2400e482:	699b      	ldr	r3, [r3, #24]
2400e484:	f003 0302 	and.w	r3, r3, #2
2400e488:	2b02      	cmp	r3, #2
2400e48a:	d103      	bne.n	2400e494 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2400e48c:	687b      	ldr	r3, [r7, #4]
2400e48e:	681b      	ldr	r3, [r3, #0]
2400e490:	2200      	movs	r2, #0
2400e492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400e494:	687b      	ldr	r3, [r7, #4]
2400e496:	681b      	ldr	r3, [r3, #0]
2400e498:	699b      	ldr	r3, [r3, #24]
2400e49a:	f003 0301 	and.w	r3, r3, #1
2400e49e:	2b01      	cmp	r3, #1
2400e4a0:	d007      	beq.n	2400e4b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400e4a2:	687b      	ldr	r3, [r7, #4]
2400e4a4:	681b      	ldr	r3, [r3, #0]
2400e4a6:	699a      	ldr	r2, [r3, #24]
2400e4a8:	687b      	ldr	r3, [r7, #4]
2400e4aa:	681b      	ldr	r3, [r3, #0]
2400e4ac:	f042 0201 	orr.w	r2, r2, #1
2400e4b0:	619a      	str	r2, [r3, #24]
  }
}
2400e4b2:	bf00      	nop
2400e4b4:	370c      	adds	r7, #12
2400e4b6:	46bd      	mov	sp, r7
2400e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e4bc:	4770      	bx	lr

2400e4be <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400e4be:	b580      	push	{r7, lr}
2400e4c0:	b084      	sub	sp, #16
2400e4c2:	af00      	add	r7, sp, #0
2400e4c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e4c6:	687b      	ldr	r3, [r7, #4]
2400e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e4ca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e4cc:	68fb      	ldr	r3, [r7, #12]
2400e4ce:	681b      	ldr	r3, [r3, #0]
2400e4d0:	681a      	ldr	r2, [r3, #0]
2400e4d2:	68fb      	ldr	r3, [r7, #12]
2400e4d4:	681b      	ldr	r3, [r3, #0]
2400e4d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e4da:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400e4dc:	68fb      	ldr	r3, [r7, #12]
2400e4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e4e0:	b29b      	uxth	r3, r3
2400e4e2:	2b00      	cmp	r3, #0
2400e4e4:	d104      	bne.n	2400e4f0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e4e6:	2120      	movs	r1, #32
2400e4e8:	68f8      	ldr	r0, [r7, #12]
2400e4ea:	f000 fcfd 	bl	2400eee8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400e4ee:	e02d      	b.n	2400e54c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400e4f0:	68fb      	ldr	r3, [r7, #12]
2400e4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e4f4:	68fa      	ldr	r2, [r7, #12]
2400e4f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400e4f8:	441a      	add	r2, r3
2400e4fa:	68fb      	ldr	r3, [r7, #12]
2400e4fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e4fe:	68fb      	ldr	r3, [r7, #12]
2400e500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e502:	b29b      	uxth	r3, r3
2400e504:	2bff      	cmp	r3, #255	; 0xff
2400e506:	d903      	bls.n	2400e510 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e508:	68fb      	ldr	r3, [r7, #12]
2400e50a:	22ff      	movs	r2, #255	; 0xff
2400e50c:	851a      	strh	r2, [r3, #40]	; 0x28
2400e50e:	e004      	b.n	2400e51a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400e510:	68fb      	ldr	r3, [r7, #12]
2400e512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e514:	b29a      	uxth	r2, r3
2400e516:	68fb      	ldr	r3, [r7, #12]
2400e518:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400e51a:	68fb      	ldr	r3, [r7, #12]
2400e51c:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400e51e:	68fb      	ldr	r3, [r7, #12]
2400e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e522:	4619      	mov	r1, r3
2400e524:	68fb      	ldr	r3, [r7, #12]
2400e526:	681b      	ldr	r3, [r3, #0]
2400e528:	3328      	adds	r3, #40	; 0x28
2400e52a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400e52c:	68fb      	ldr	r3, [r7, #12]
2400e52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400e530:	f7f5 fba6 	bl	24003c80 <HAL_DMA_Start_IT>
2400e534:	4603      	mov	r3, r0
2400e536:	2b00      	cmp	r3, #0
2400e538:	d004      	beq.n	2400e544 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400e53a:	2110      	movs	r1, #16
2400e53c:	68f8      	ldr	r0, [r7, #12]
2400e53e:	f7ff fea3 	bl	2400e288 <I2C_ITError>
}
2400e542:	e003      	b.n	2400e54c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400e544:	2140      	movs	r1, #64	; 0x40
2400e546:	68f8      	ldr	r0, [r7, #12]
2400e548:	f000 fcce 	bl	2400eee8 <I2C_Enable_IRQ>
}
2400e54c:	bf00      	nop
2400e54e:	3710      	adds	r7, #16
2400e550:	46bd      	mov	sp, r7
2400e552:	bd80      	pop	{r7, pc}

2400e554 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400e554:	b580      	push	{r7, lr}
2400e556:	b084      	sub	sp, #16
2400e558:	af00      	add	r7, sp, #0
2400e55a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e55c:	687b      	ldr	r3, [r7, #4]
2400e55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e562:	68fb      	ldr	r3, [r7, #12]
2400e564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e566:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400e568:	68bb      	ldr	r3, [r7, #8]
2400e56a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400e56e:	d002      	beq.n	2400e576 <I2C_DMASlaveTransmitCplt+0x22>
2400e570:	68bb      	ldr	r3, [r7, #8]
2400e572:	2b00      	cmp	r3, #0
2400e574:	d10a      	bne.n	2400e58c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e576:	68fb      	ldr	r3, [r7, #12]
2400e578:	681b      	ldr	r3, [r3, #0]
2400e57a:	681a      	ldr	r2, [r3, #0]
2400e57c:	68fb      	ldr	r3, [r7, #12]
2400e57e:	681b      	ldr	r3, [r3, #0]
2400e580:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e584:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400e586:	68f8      	ldr	r0, [r7, #12]
2400e588:	f7ff fb07 	bl	2400db9a <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400e58c:	bf00      	nop
2400e58e:	3710      	adds	r7, #16
2400e590:	46bd      	mov	sp, r7
2400e592:	bd80      	pop	{r7, pc}

2400e594 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400e594:	b580      	push	{r7, lr}
2400e596:	b084      	sub	sp, #16
2400e598:	af00      	add	r7, sp, #0
2400e59a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e59c:	687b      	ldr	r3, [r7, #4]
2400e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e5a0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e5a2:	68fb      	ldr	r3, [r7, #12]
2400e5a4:	681b      	ldr	r3, [r3, #0]
2400e5a6:	681a      	ldr	r2, [r3, #0]
2400e5a8:	68fb      	ldr	r3, [r7, #12]
2400e5aa:	681b      	ldr	r3, [r3, #0]
2400e5ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e5b0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400e5b2:	68fb      	ldr	r3, [r7, #12]
2400e5b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e5b6:	b29b      	uxth	r3, r3
2400e5b8:	2b00      	cmp	r3, #0
2400e5ba:	d104      	bne.n	2400e5c6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e5bc:	2120      	movs	r1, #32
2400e5be:	68f8      	ldr	r0, [r7, #12]
2400e5c0:	f000 fc92 	bl	2400eee8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400e5c4:	e02d      	b.n	2400e622 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400e5c6:	68fb      	ldr	r3, [r7, #12]
2400e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e5ca:	68fa      	ldr	r2, [r7, #12]
2400e5cc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400e5ce:	441a      	add	r2, r3
2400e5d0:	68fb      	ldr	r3, [r7, #12]
2400e5d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e5d4:	68fb      	ldr	r3, [r7, #12]
2400e5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e5d8:	b29b      	uxth	r3, r3
2400e5da:	2bff      	cmp	r3, #255	; 0xff
2400e5dc:	d903      	bls.n	2400e5e6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e5de:	68fb      	ldr	r3, [r7, #12]
2400e5e0:	22ff      	movs	r2, #255	; 0xff
2400e5e2:	851a      	strh	r2, [r3, #40]	; 0x28
2400e5e4:	e004      	b.n	2400e5f0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400e5e6:	68fb      	ldr	r3, [r7, #12]
2400e5e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e5ea:	b29a      	uxth	r2, r3
2400e5ec:	68fb      	ldr	r3, [r7, #12]
2400e5ee:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400e5f0:	68fb      	ldr	r3, [r7, #12]
2400e5f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400e5f4:	68fb      	ldr	r3, [r7, #12]
2400e5f6:	681b      	ldr	r3, [r3, #0]
2400e5f8:	3324      	adds	r3, #36	; 0x24
2400e5fa:	4619      	mov	r1, r3
2400e5fc:	68fb      	ldr	r3, [r7, #12]
2400e5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e600:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400e602:	68fb      	ldr	r3, [r7, #12]
2400e604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400e606:	f7f5 fb3b 	bl	24003c80 <HAL_DMA_Start_IT>
2400e60a:	4603      	mov	r3, r0
2400e60c:	2b00      	cmp	r3, #0
2400e60e:	d004      	beq.n	2400e61a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400e610:	2110      	movs	r1, #16
2400e612:	68f8      	ldr	r0, [r7, #12]
2400e614:	f7ff fe38 	bl	2400e288 <I2C_ITError>
}
2400e618:	e003      	b.n	2400e622 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400e61a:	2140      	movs	r1, #64	; 0x40
2400e61c:	68f8      	ldr	r0, [r7, #12]
2400e61e:	f000 fc63 	bl	2400eee8 <I2C_Enable_IRQ>
}
2400e622:	bf00      	nop
2400e624:	3710      	adds	r7, #16
2400e626:	46bd      	mov	sp, r7
2400e628:	bd80      	pop	{r7, pc}
	...

2400e62c <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400e62c:	b580      	push	{r7, lr}
2400e62e:	b084      	sub	sp, #16
2400e630:	af00      	add	r7, sp, #0
2400e632:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e634:	687b      	ldr	r3, [r7, #4]
2400e636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e63a:	68fb      	ldr	r3, [r7, #12]
2400e63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e63e:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2400e640:	68fb      	ldr	r3, [r7, #12]
2400e642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e644:	681b      	ldr	r3, [r3, #0]
2400e646:	4a42      	ldr	r2, [pc, #264]	; (2400e750 <I2C_DMASlaveReceiveCplt+0x124>)
2400e648:	4293      	cmp	r3, r2
2400e64a:	d059      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e64c:	68fb      	ldr	r3, [r7, #12]
2400e64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e650:	681b      	ldr	r3, [r3, #0]
2400e652:	4a40      	ldr	r2, [pc, #256]	; (2400e754 <I2C_DMASlaveReceiveCplt+0x128>)
2400e654:	4293      	cmp	r3, r2
2400e656:	d053      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e658:	68fb      	ldr	r3, [r7, #12]
2400e65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e65c:	681b      	ldr	r3, [r3, #0]
2400e65e:	4a3e      	ldr	r2, [pc, #248]	; (2400e758 <I2C_DMASlaveReceiveCplt+0x12c>)
2400e660:	4293      	cmp	r3, r2
2400e662:	d04d      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e664:	68fb      	ldr	r3, [r7, #12]
2400e666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e668:	681b      	ldr	r3, [r3, #0]
2400e66a:	4a3c      	ldr	r2, [pc, #240]	; (2400e75c <I2C_DMASlaveReceiveCplt+0x130>)
2400e66c:	4293      	cmp	r3, r2
2400e66e:	d047      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e670:	68fb      	ldr	r3, [r7, #12]
2400e672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e674:	681b      	ldr	r3, [r3, #0]
2400e676:	4a3a      	ldr	r2, [pc, #232]	; (2400e760 <I2C_DMASlaveReceiveCplt+0x134>)
2400e678:	4293      	cmp	r3, r2
2400e67a:	d041      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e67c:	68fb      	ldr	r3, [r7, #12]
2400e67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e680:	681b      	ldr	r3, [r3, #0]
2400e682:	4a38      	ldr	r2, [pc, #224]	; (2400e764 <I2C_DMASlaveReceiveCplt+0x138>)
2400e684:	4293      	cmp	r3, r2
2400e686:	d03b      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e688:	68fb      	ldr	r3, [r7, #12]
2400e68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e68c:	681b      	ldr	r3, [r3, #0]
2400e68e:	4a36      	ldr	r2, [pc, #216]	; (2400e768 <I2C_DMASlaveReceiveCplt+0x13c>)
2400e690:	4293      	cmp	r3, r2
2400e692:	d035      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e694:	68fb      	ldr	r3, [r7, #12]
2400e696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e698:	681b      	ldr	r3, [r3, #0]
2400e69a:	4a34      	ldr	r2, [pc, #208]	; (2400e76c <I2C_DMASlaveReceiveCplt+0x140>)
2400e69c:	4293      	cmp	r3, r2
2400e69e:	d02f      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6a0:	68fb      	ldr	r3, [r7, #12]
2400e6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6a4:	681b      	ldr	r3, [r3, #0]
2400e6a6:	4a32      	ldr	r2, [pc, #200]	; (2400e770 <I2C_DMASlaveReceiveCplt+0x144>)
2400e6a8:	4293      	cmp	r3, r2
2400e6aa:	d029      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6ac:	68fb      	ldr	r3, [r7, #12]
2400e6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6b0:	681b      	ldr	r3, [r3, #0]
2400e6b2:	4a30      	ldr	r2, [pc, #192]	; (2400e774 <I2C_DMASlaveReceiveCplt+0x148>)
2400e6b4:	4293      	cmp	r3, r2
2400e6b6:	d023      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6b8:	68fb      	ldr	r3, [r7, #12]
2400e6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6bc:	681b      	ldr	r3, [r3, #0]
2400e6be:	4a2e      	ldr	r2, [pc, #184]	; (2400e778 <I2C_DMASlaveReceiveCplt+0x14c>)
2400e6c0:	4293      	cmp	r3, r2
2400e6c2:	d01d      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6c4:	68fb      	ldr	r3, [r7, #12]
2400e6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6c8:	681b      	ldr	r3, [r3, #0]
2400e6ca:	4a2c      	ldr	r2, [pc, #176]	; (2400e77c <I2C_DMASlaveReceiveCplt+0x150>)
2400e6cc:	4293      	cmp	r3, r2
2400e6ce:	d017      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6d0:	68fb      	ldr	r3, [r7, #12]
2400e6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6d4:	681b      	ldr	r3, [r3, #0]
2400e6d6:	4a2a      	ldr	r2, [pc, #168]	; (2400e780 <I2C_DMASlaveReceiveCplt+0x154>)
2400e6d8:	4293      	cmp	r3, r2
2400e6da:	d011      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6dc:	68fb      	ldr	r3, [r7, #12]
2400e6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6e0:	681b      	ldr	r3, [r3, #0]
2400e6e2:	4a28      	ldr	r2, [pc, #160]	; (2400e784 <I2C_DMASlaveReceiveCplt+0x158>)
2400e6e4:	4293      	cmp	r3, r2
2400e6e6:	d00b      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6e8:	68fb      	ldr	r3, [r7, #12]
2400e6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6ec:	681b      	ldr	r3, [r3, #0]
2400e6ee:	4a26      	ldr	r2, [pc, #152]	; (2400e788 <I2C_DMASlaveReceiveCplt+0x15c>)
2400e6f0:	4293      	cmp	r3, r2
2400e6f2:	d005      	beq.n	2400e700 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6f4:	68fb      	ldr	r3, [r7, #12]
2400e6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6f8:	681b      	ldr	r3, [r3, #0]
2400e6fa:	4a24      	ldr	r2, [pc, #144]	; (2400e78c <I2C_DMASlaveReceiveCplt+0x160>)
2400e6fc:	4293      	cmp	r3, r2
2400e6fe:	d109      	bne.n	2400e714 <I2C_DMASlaveReceiveCplt+0xe8>
2400e700:	68fb      	ldr	r3, [r7, #12]
2400e702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e704:	681b      	ldr	r3, [r3, #0]
2400e706:	685b      	ldr	r3, [r3, #4]
2400e708:	2b00      	cmp	r3, #0
2400e70a:	bf0c      	ite	eq
2400e70c:	2301      	moveq	r3, #1
2400e70e:	2300      	movne	r3, #0
2400e710:	b2db      	uxtb	r3, r3
2400e712:	e008      	b.n	2400e726 <I2C_DMASlaveReceiveCplt+0xfa>
2400e714:	68fb      	ldr	r3, [r7, #12]
2400e716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e718:	681b      	ldr	r3, [r3, #0]
2400e71a:	685b      	ldr	r3, [r3, #4]
2400e71c:	2b00      	cmp	r3, #0
2400e71e:	bf0c      	ite	eq
2400e720:	2301      	moveq	r3, #1
2400e722:	2300      	movne	r3, #0
2400e724:	b2db      	uxtb	r3, r3
2400e726:	2b00      	cmp	r3, #0
2400e728:	d00e      	beq.n	2400e748 <I2C_DMASlaveReceiveCplt+0x11c>
2400e72a:	68bb      	ldr	r3, [r7, #8]
2400e72c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e730:	d00a      	beq.n	2400e748 <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e732:	68fb      	ldr	r3, [r7, #12]
2400e734:	681b      	ldr	r3, [r3, #0]
2400e736:	681a      	ldr	r2, [r3, #0]
2400e738:	68fb      	ldr	r3, [r7, #12]
2400e73a:	681b      	ldr	r3, [r3, #0]
2400e73c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e740:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400e742:	68f8      	ldr	r0, [r7, #12]
2400e744:	f7ff fa29 	bl	2400db9a <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400e748:	bf00      	nop
2400e74a:	3710      	adds	r7, #16
2400e74c:	46bd      	mov	sp, r7
2400e74e:	bd80      	pop	{r7, pc}
2400e750:	40020010 	.word	0x40020010
2400e754:	40020028 	.word	0x40020028
2400e758:	40020040 	.word	0x40020040
2400e75c:	40020058 	.word	0x40020058
2400e760:	40020070 	.word	0x40020070
2400e764:	40020088 	.word	0x40020088
2400e768:	400200a0 	.word	0x400200a0
2400e76c:	400200b8 	.word	0x400200b8
2400e770:	40020410 	.word	0x40020410
2400e774:	40020428 	.word	0x40020428
2400e778:	40020440 	.word	0x40020440
2400e77c:	40020458 	.word	0x40020458
2400e780:	40020470 	.word	0x40020470
2400e784:	40020488 	.word	0x40020488
2400e788:	400204a0 	.word	0x400204a0
2400e78c:	400204b8 	.word	0x400204b8

2400e790 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2400e790:	b580      	push	{r7, lr}
2400e792:	b084      	sub	sp, #16
2400e794:	af00      	add	r7, sp, #0
2400e796:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2400e798:	2300      	movs	r3, #0
2400e79a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e79c:	687b      	ldr	r3, [r7, #4]
2400e79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2400e7a2:	68bb      	ldr	r3, [r7, #8]
2400e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7a6:	2b00      	cmp	r3, #0
2400e7a8:	d076      	beq.n	2400e898 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400e7aa:	68bb      	ldr	r3, [r7, #8]
2400e7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7ae:	681b      	ldr	r3, [r3, #0]
2400e7b0:	4a71      	ldr	r2, [pc, #452]	; (2400e978 <I2C_DMAError+0x1e8>)
2400e7b2:	4293      	cmp	r3, r2
2400e7b4:	d059      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7b6:	68bb      	ldr	r3, [r7, #8]
2400e7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7ba:	681b      	ldr	r3, [r3, #0]
2400e7bc:	4a6f      	ldr	r2, [pc, #444]	; (2400e97c <I2C_DMAError+0x1ec>)
2400e7be:	4293      	cmp	r3, r2
2400e7c0:	d053      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7c2:	68bb      	ldr	r3, [r7, #8]
2400e7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7c6:	681b      	ldr	r3, [r3, #0]
2400e7c8:	4a6d      	ldr	r2, [pc, #436]	; (2400e980 <I2C_DMAError+0x1f0>)
2400e7ca:	4293      	cmp	r3, r2
2400e7cc:	d04d      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7ce:	68bb      	ldr	r3, [r7, #8]
2400e7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7d2:	681b      	ldr	r3, [r3, #0]
2400e7d4:	4a6b      	ldr	r2, [pc, #428]	; (2400e984 <I2C_DMAError+0x1f4>)
2400e7d6:	4293      	cmp	r3, r2
2400e7d8:	d047      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7da:	68bb      	ldr	r3, [r7, #8]
2400e7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7de:	681b      	ldr	r3, [r3, #0]
2400e7e0:	4a69      	ldr	r2, [pc, #420]	; (2400e988 <I2C_DMAError+0x1f8>)
2400e7e2:	4293      	cmp	r3, r2
2400e7e4:	d041      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7e6:	68bb      	ldr	r3, [r7, #8]
2400e7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7ea:	681b      	ldr	r3, [r3, #0]
2400e7ec:	4a67      	ldr	r2, [pc, #412]	; (2400e98c <I2C_DMAError+0x1fc>)
2400e7ee:	4293      	cmp	r3, r2
2400e7f0:	d03b      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7f2:	68bb      	ldr	r3, [r7, #8]
2400e7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e7f6:	681b      	ldr	r3, [r3, #0]
2400e7f8:	4a65      	ldr	r2, [pc, #404]	; (2400e990 <I2C_DMAError+0x200>)
2400e7fa:	4293      	cmp	r3, r2
2400e7fc:	d035      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e7fe:	68bb      	ldr	r3, [r7, #8]
2400e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e802:	681b      	ldr	r3, [r3, #0]
2400e804:	4a63      	ldr	r2, [pc, #396]	; (2400e994 <I2C_DMAError+0x204>)
2400e806:	4293      	cmp	r3, r2
2400e808:	d02f      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e80a:	68bb      	ldr	r3, [r7, #8]
2400e80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e80e:	681b      	ldr	r3, [r3, #0]
2400e810:	4a61      	ldr	r2, [pc, #388]	; (2400e998 <I2C_DMAError+0x208>)
2400e812:	4293      	cmp	r3, r2
2400e814:	d029      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e816:	68bb      	ldr	r3, [r7, #8]
2400e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e81a:	681b      	ldr	r3, [r3, #0]
2400e81c:	4a5f      	ldr	r2, [pc, #380]	; (2400e99c <I2C_DMAError+0x20c>)
2400e81e:	4293      	cmp	r3, r2
2400e820:	d023      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e822:	68bb      	ldr	r3, [r7, #8]
2400e824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e826:	681b      	ldr	r3, [r3, #0]
2400e828:	4a5d      	ldr	r2, [pc, #372]	; (2400e9a0 <I2C_DMAError+0x210>)
2400e82a:	4293      	cmp	r3, r2
2400e82c:	d01d      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e82e:	68bb      	ldr	r3, [r7, #8]
2400e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e832:	681b      	ldr	r3, [r3, #0]
2400e834:	4a5b      	ldr	r2, [pc, #364]	; (2400e9a4 <I2C_DMAError+0x214>)
2400e836:	4293      	cmp	r3, r2
2400e838:	d017      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e83a:	68bb      	ldr	r3, [r7, #8]
2400e83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e83e:	681b      	ldr	r3, [r3, #0]
2400e840:	4a59      	ldr	r2, [pc, #356]	; (2400e9a8 <I2C_DMAError+0x218>)
2400e842:	4293      	cmp	r3, r2
2400e844:	d011      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e846:	68bb      	ldr	r3, [r7, #8]
2400e848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e84a:	681b      	ldr	r3, [r3, #0]
2400e84c:	4a57      	ldr	r2, [pc, #348]	; (2400e9ac <I2C_DMAError+0x21c>)
2400e84e:	4293      	cmp	r3, r2
2400e850:	d00b      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e852:	68bb      	ldr	r3, [r7, #8]
2400e854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e856:	681b      	ldr	r3, [r3, #0]
2400e858:	4a55      	ldr	r2, [pc, #340]	; (2400e9b0 <I2C_DMAError+0x220>)
2400e85a:	4293      	cmp	r3, r2
2400e85c:	d005      	beq.n	2400e86a <I2C_DMAError+0xda>
2400e85e:	68bb      	ldr	r3, [r7, #8]
2400e860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e862:	681b      	ldr	r3, [r3, #0]
2400e864:	4a53      	ldr	r2, [pc, #332]	; (2400e9b4 <I2C_DMAError+0x224>)
2400e866:	4293      	cmp	r3, r2
2400e868:	d109      	bne.n	2400e87e <I2C_DMAError+0xee>
2400e86a:	68bb      	ldr	r3, [r7, #8]
2400e86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e86e:	681b      	ldr	r3, [r3, #0]
2400e870:	685b      	ldr	r3, [r3, #4]
2400e872:	2b00      	cmp	r3, #0
2400e874:	bf0c      	ite	eq
2400e876:	2301      	moveq	r3, #1
2400e878:	2300      	movne	r3, #0
2400e87a:	b2db      	uxtb	r3, r3
2400e87c:	e008      	b.n	2400e890 <I2C_DMAError+0x100>
2400e87e:	68bb      	ldr	r3, [r7, #8]
2400e880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e882:	681b      	ldr	r3, [r3, #0]
2400e884:	685b      	ldr	r3, [r3, #4]
2400e886:	2b00      	cmp	r3, #0
2400e888:	bf0c      	ite	eq
2400e88a:	2301      	moveq	r3, #1
2400e88c:	2300      	movne	r3, #0
2400e88e:	b2db      	uxtb	r3, r3
2400e890:	2b00      	cmp	r3, #0
2400e892:	d001      	beq.n	2400e898 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
2400e894:	2301      	movs	r3, #1
2400e896:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2400e898:	68bb      	ldr	r3, [r7, #8]
2400e89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e89c:	2b00      	cmp	r3, #0
2400e89e:	f000 8098 	beq.w	2400e9d2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400e8a2:	68bb      	ldr	r3, [r7, #8]
2400e8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8a6:	681b      	ldr	r3, [r3, #0]
2400e8a8:	4a33      	ldr	r2, [pc, #204]	; (2400e978 <I2C_DMAError+0x1e8>)
2400e8aa:	4293      	cmp	r3, r2
2400e8ac:	d059      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8ae:	68bb      	ldr	r3, [r7, #8]
2400e8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8b2:	681b      	ldr	r3, [r3, #0]
2400e8b4:	4a31      	ldr	r2, [pc, #196]	; (2400e97c <I2C_DMAError+0x1ec>)
2400e8b6:	4293      	cmp	r3, r2
2400e8b8:	d053      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8ba:	68bb      	ldr	r3, [r7, #8]
2400e8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8be:	681b      	ldr	r3, [r3, #0]
2400e8c0:	4a2f      	ldr	r2, [pc, #188]	; (2400e980 <I2C_DMAError+0x1f0>)
2400e8c2:	4293      	cmp	r3, r2
2400e8c4:	d04d      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8c6:	68bb      	ldr	r3, [r7, #8]
2400e8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8ca:	681b      	ldr	r3, [r3, #0]
2400e8cc:	4a2d      	ldr	r2, [pc, #180]	; (2400e984 <I2C_DMAError+0x1f4>)
2400e8ce:	4293      	cmp	r3, r2
2400e8d0:	d047      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8d2:	68bb      	ldr	r3, [r7, #8]
2400e8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8d6:	681b      	ldr	r3, [r3, #0]
2400e8d8:	4a2b      	ldr	r2, [pc, #172]	; (2400e988 <I2C_DMAError+0x1f8>)
2400e8da:	4293      	cmp	r3, r2
2400e8dc:	d041      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8de:	68bb      	ldr	r3, [r7, #8]
2400e8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8e2:	681b      	ldr	r3, [r3, #0]
2400e8e4:	4a29      	ldr	r2, [pc, #164]	; (2400e98c <I2C_DMAError+0x1fc>)
2400e8e6:	4293      	cmp	r3, r2
2400e8e8:	d03b      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8ea:	68bb      	ldr	r3, [r7, #8]
2400e8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8ee:	681b      	ldr	r3, [r3, #0]
2400e8f0:	4a27      	ldr	r2, [pc, #156]	; (2400e990 <I2C_DMAError+0x200>)
2400e8f2:	4293      	cmp	r3, r2
2400e8f4:	d035      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e8f6:	68bb      	ldr	r3, [r7, #8]
2400e8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e8fa:	681b      	ldr	r3, [r3, #0]
2400e8fc:	4a25      	ldr	r2, [pc, #148]	; (2400e994 <I2C_DMAError+0x204>)
2400e8fe:	4293      	cmp	r3, r2
2400e900:	d02f      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e902:	68bb      	ldr	r3, [r7, #8]
2400e904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e906:	681b      	ldr	r3, [r3, #0]
2400e908:	4a23      	ldr	r2, [pc, #140]	; (2400e998 <I2C_DMAError+0x208>)
2400e90a:	4293      	cmp	r3, r2
2400e90c:	d029      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e90e:	68bb      	ldr	r3, [r7, #8]
2400e910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e912:	681b      	ldr	r3, [r3, #0]
2400e914:	4a21      	ldr	r2, [pc, #132]	; (2400e99c <I2C_DMAError+0x20c>)
2400e916:	4293      	cmp	r3, r2
2400e918:	d023      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e91a:	68bb      	ldr	r3, [r7, #8]
2400e91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e91e:	681b      	ldr	r3, [r3, #0]
2400e920:	4a1f      	ldr	r2, [pc, #124]	; (2400e9a0 <I2C_DMAError+0x210>)
2400e922:	4293      	cmp	r3, r2
2400e924:	d01d      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e926:	68bb      	ldr	r3, [r7, #8]
2400e928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e92a:	681b      	ldr	r3, [r3, #0]
2400e92c:	4a1d      	ldr	r2, [pc, #116]	; (2400e9a4 <I2C_DMAError+0x214>)
2400e92e:	4293      	cmp	r3, r2
2400e930:	d017      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e932:	68bb      	ldr	r3, [r7, #8]
2400e934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e936:	681b      	ldr	r3, [r3, #0]
2400e938:	4a1b      	ldr	r2, [pc, #108]	; (2400e9a8 <I2C_DMAError+0x218>)
2400e93a:	4293      	cmp	r3, r2
2400e93c:	d011      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e93e:	68bb      	ldr	r3, [r7, #8]
2400e940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e942:	681b      	ldr	r3, [r3, #0]
2400e944:	4a19      	ldr	r2, [pc, #100]	; (2400e9ac <I2C_DMAError+0x21c>)
2400e946:	4293      	cmp	r3, r2
2400e948:	d00b      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e94a:	68bb      	ldr	r3, [r7, #8]
2400e94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e94e:	681b      	ldr	r3, [r3, #0]
2400e950:	4a17      	ldr	r2, [pc, #92]	; (2400e9b0 <I2C_DMAError+0x220>)
2400e952:	4293      	cmp	r3, r2
2400e954:	d005      	beq.n	2400e962 <I2C_DMAError+0x1d2>
2400e956:	68bb      	ldr	r3, [r7, #8]
2400e958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e95a:	681b      	ldr	r3, [r3, #0]
2400e95c:	4a15      	ldr	r2, [pc, #84]	; (2400e9b4 <I2C_DMAError+0x224>)
2400e95e:	4293      	cmp	r3, r2
2400e960:	d12a      	bne.n	2400e9b8 <I2C_DMAError+0x228>
2400e962:	68bb      	ldr	r3, [r7, #8]
2400e964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e966:	681b      	ldr	r3, [r3, #0]
2400e968:	685b      	ldr	r3, [r3, #4]
2400e96a:	2b00      	cmp	r3, #0
2400e96c:	bf0c      	ite	eq
2400e96e:	2301      	moveq	r3, #1
2400e970:	2300      	movne	r3, #0
2400e972:	b2db      	uxtb	r3, r3
2400e974:	e029      	b.n	2400e9ca <I2C_DMAError+0x23a>
2400e976:	bf00      	nop
2400e978:	40020010 	.word	0x40020010
2400e97c:	40020028 	.word	0x40020028
2400e980:	40020040 	.word	0x40020040
2400e984:	40020058 	.word	0x40020058
2400e988:	40020070 	.word	0x40020070
2400e98c:	40020088 	.word	0x40020088
2400e990:	400200a0 	.word	0x400200a0
2400e994:	400200b8 	.word	0x400200b8
2400e998:	40020410 	.word	0x40020410
2400e99c:	40020428 	.word	0x40020428
2400e9a0:	40020440 	.word	0x40020440
2400e9a4:	40020458 	.word	0x40020458
2400e9a8:	40020470 	.word	0x40020470
2400e9ac:	40020488 	.word	0x40020488
2400e9b0:	400204a0 	.word	0x400204a0
2400e9b4:	400204b8 	.word	0x400204b8
2400e9b8:	68bb      	ldr	r3, [r7, #8]
2400e9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9bc:	681b      	ldr	r3, [r3, #0]
2400e9be:	685b      	ldr	r3, [r3, #4]
2400e9c0:	2b00      	cmp	r3, #0
2400e9c2:	bf0c      	ite	eq
2400e9c4:	2301      	moveq	r3, #1
2400e9c6:	2300      	movne	r3, #0
2400e9c8:	b2db      	uxtb	r3, r3
2400e9ca:	2b00      	cmp	r3, #0
2400e9cc:	d001      	beq.n	2400e9d2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
2400e9ce:	2301      	movs	r3, #1
2400e9d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2400e9d2:	6878      	ldr	r0, [r7, #4]
2400e9d4:	f7f7 fccc 	bl	24006370 <HAL_DMA_GetError>
2400e9d8:	4603      	mov	r3, r0
2400e9da:	2b02      	cmp	r3, #2
2400e9dc:	d00e      	beq.n	2400e9fc <I2C_DMAError+0x26c>
2400e9de:	68fb      	ldr	r3, [r7, #12]
2400e9e0:	2b00      	cmp	r3, #0
2400e9e2:	d00b      	beq.n	2400e9fc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400e9e4:	68bb      	ldr	r3, [r7, #8]
2400e9e6:	681b      	ldr	r3, [r3, #0]
2400e9e8:	685a      	ldr	r2, [r3, #4]
2400e9ea:	68bb      	ldr	r3, [r7, #8]
2400e9ec:	681b      	ldr	r3, [r3, #0]
2400e9ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400e9f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400e9f4:	2110      	movs	r1, #16
2400e9f6:	68b8      	ldr	r0, [r7, #8]
2400e9f8:	f7ff fc46 	bl	2400e288 <I2C_ITError>
  }
}
2400e9fc:	bf00      	nop
2400e9fe:	3710      	adds	r7, #16
2400ea00:	46bd      	mov	sp, r7
2400ea02:	bd80      	pop	{r7, pc}

2400ea04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2400ea04:	b580      	push	{r7, lr}
2400ea06:	b084      	sub	sp, #16
2400ea08:	af00      	add	r7, sp, #0
2400ea0a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400ea0c:	687b      	ldr	r3, [r7, #4]
2400ea0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ea10:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2400ea12:	68fb      	ldr	r3, [r7, #12]
2400ea14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ea16:	2b00      	cmp	r3, #0
2400ea18:	d003      	beq.n	2400ea22 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2400ea1a:	68fb      	ldr	r3, [r7, #12]
2400ea1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ea1e:	2200      	movs	r2, #0
2400ea20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
2400ea22:	68fb      	ldr	r3, [r7, #12]
2400ea24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ea26:	2b00      	cmp	r3, #0
2400ea28:	d003      	beq.n	2400ea32 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2400ea2a:	68fb      	ldr	r3, [r7, #12]
2400ea2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ea2e:	2200      	movs	r2, #0
2400ea30:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2400ea32:	68f8      	ldr	r0, [r7, #12]
2400ea34:	f7ff fcf8 	bl	2400e428 <I2C_TreatErrorCallback>
}
2400ea38:	bf00      	nop
2400ea3a:	3710      	adds	r7, #16
2400ea3c:	46bd      	mov	sp, r7
2400ea3e:	bd80      	pop	{r7, pc}

2400ea40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2400ea40:	b580      	push	{r7, lr}
2400ea42:	b084      	sub	sp, #16
2400ea44:	af00      	add	r7, sp, #0
2400ea46:	60f8      	str	r0, [r7, #12]
2400ea48:	60b9      	str	r1, [r7, #8]
2400ea4a:	603b      	str	r3, [r7, #0]
2400ea4c:	4613      	mov	r3, r2
2400ea4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400ea50:	e022      	b.n	2400ea98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400ea52:	683b      	ldr	r3, [r7, #0]
2400ea54:	f1b3 3fff 	cmp.w	r3, #4294967295
2400ea58:	d01e      	beq.n	2400ea98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400ea5a:	f7f3 fb77 	bl	2400214c <HAL_GetTick>
2400ea5e:	4602      	mov	r2, r0
2400ea60:	69bb      	ldr	r3, [r7, #24]
2400ea62:	1ad3      	subs	r3, r2, r3
2400ea64:	683a      	ldr	r2, [r7, #0]
2400ea66:	429a      	cmp	r2, r3
2400ea68:	d302      	bcc.n	2400ea70 <I2C_WaitOnFlagUntilTimeout+0x30>
2400ea6a:	683b      	ldr	r3, [r7, #0]
2400ea6c:	2b00      	cmp	r3, #0
2400ea6e:	d113      	bne.n	2400ea98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ea70:	68fb      	ldr	r3, [r7, #12]
2400ea72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ea74:	f043 0220 	orr.w	r2, r3, #32
2400ea78:	68fb      	ldr	r3, [r7, #12]
2400ea7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400ea7c:	68fb      	ldr	r3, [r7, #12]
2400ea7e:	2220      	movs	r2, #32
2400ea80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400ea84:	68fb      	ldr	r3, [r7, #12]
2400ea86:	2200      	movs	r2, #0
2400ea88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ea8c:	68fb      	ldr	r3, [r7, #12]
2400ea8e:	2200      	movs	r2, #0
2400ea90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400ea94:	2301      	movs	r3, #1
2400ea96:	e00f      	b.n	2400eab8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400ea98:	68fb      	ldr	r3, [r7, #12]
2400ea9a:	681b      	ldr	r3, [r3, #0]
2400ea9c:	699a      	ldr	r2, [r3, #24]
2400ea9e:	68bb      	ldr	r3, [r7, #8]
2400eaa0:	4013      	ands	r3, r2
2400eaa2:	68ba      	ldr	r2, [r7, #8]
2400eaa4:	429a      	cmp	r2, r3
2400eaa6:	bf0c      	ite	eq
2400eaa8:	2301      	moveq	r3, #1
2400eaaa:	2300      	movne	r3, #0
2400eaac:	b2db      	uxtb	r3, r3
2400eaae:	461a      	mov	r2, r3
2400eab0:	79fb      	ldrb	r3, [r7, #7]
2400eab2:	429a      	cmp	r2, r3
2400eab4:	d0cd      	beq.n	2400ea52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2400eab6:	2300      	movs	r3, #0
}
2400eab8:	4618      	mov	r0, r3
2400eaba:	3710      	adds	r7, #16
2400eabc:	46bd      	mov	sp, r7
2400eabe:	bd80      	pop	{r7, pc}

2400eac0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400eac0:	b580      	push	{r7, lr}
2400eac2:	b084      	sub	sp, #16
2400eac4:	af00      	add	r7, sp, #0
2400eac6:	60f8      	str	r0, [r7, #12]
2400eac8:	60b9      	str	r1, [r7, #8]
2400eaca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400eacc:	e02c      	b.n	2400eb28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400eace:	687a      	ldr	r2, [r7, #4]
2400ead0:	68b9      	ldr	r1, [r7, #8]
2400ead2:	68f8      	ldr	r0, [r7, #12]
2400ead4:	f000 f8ea 	bl	2400ecac <I2C_IsErrorOccurred>
2400ead8:	4603      	mov	r3, r0
2400eada:	2b00      	cmp	r3, #0
2400eadc:	d001      	beq.n	2400eae2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400eade:	2301      	movs	r3, #1
2400eae0:	e02a      	b.n	2400eb38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400eae2:	68bb      	ldr	r3, [r7, #8]
2400eae4:	f1b3 3fff 	cmp.w	r3, #4294967295
2400eae8:	d01e      	beq.n	2400eb28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400eaea:	f7f3 fb2f 	bl	2400214c <HAL_GetTick>
2400eaee:	4602      	mov	r2, r0
2400eaf0:	687b      	ldr	r3, [r7, #4]
2400eaf2:	1ad3      	subs	r3, r2, r3
2400eaf4:	68ba      	ldr	r2, [r7, #8]
2400eaf6:	429a      	cmp	r2, r3
2400eaf8:	d302      	bcc.n	2400eb00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
2400eafa:	68bb      	ldr	r3, [r7, #8]
2400eafc:	2b00      	cmp	r3, #0
2400eafe:	d113      	bne.n	2400eb28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400eb00:	68fb      	ldr	r3, [r7, #12]
2400eb02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eb04:	f043 0220 	orr.w	r2, r3, #32
2400eb08:	68fb      	ldr	r3, [r7, #12]
2400eb0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400eb0c:	68fb      	ldr	r3, [r7, #12]
2400eb0e:	2220      	movs	r2, #32
2400eb10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400eb14:	68fb      	ldr	r3, [r7, #12]
2400eb16:	2200      	movs	r2, #0
2400eb18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400eb1c:	68fb      	ldr	r3, [r7, #12]
2400eb1e:	2200      	movs	r2, #0
2400eb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400eb24:	2301      	movs	r3, #1
2400eb26:	e007      	b.n	2400eb38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400eb28:	68fb      	ldr	r3, [r7, #12]
2400eb2a:	681b      	ldr	r3, [r3, #0]
2400eb2c:	699b      	ldr	r3, [r3, #24]
2400eb2e:	f003 0302 	and.w	r3, r3, #2
2400eb32:	2b02      	cmp	r3, #2
2400eb34:	d1cb      	bne.n	2400eace <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
2400eb36:	2300      	movs	r3, #0
}
2400eb38:	4618      	mov	r0, r3
2400eb3a:	3710      	adds	r7, #16
2400eb3c:	46bd      	mov	sp, r7
2400eb3e:	bd80      	pop	{r7, pc}

2400eb40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400eb40:	b580      	push	{r7, lr}
2400eb42:	b084      	sub	sp, #16
2400eb44:	af00      	add	r7, sp, #0
2400eb46:	60f8      	str	r0, [r7, #12]
2400eb48:	60b9      	str	r1, [r7, #8]
2400eb4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400eb4c:	e028      	b.n	2400eba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400eb4e:	687a      	ldr	r2, [r7, #4]
2400eb50:	68b9      	ldr	r1, [r7, #8]
2400eb52:	68f8      	ldr	r0, [r7, #12]
2400eb54:	f000 f8aa 	bl	2400ecac <I2C_IsErrorOccurred>
2400eb58:	4603      	mov	r3, r0
2400eb5a:	2b00      	cmp	r3, #0
2400eb5c:	d001      	beq.n	2400eb62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400eb5e:	2301      	movs	r3, #1
2400eb60:	e026      	b.n	2400ebb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400eb62:	f7f3 faf3 	bl	2400214c <HAL_GetTick>
2400eb66:	4602      	mov	r2, r0
2400eb68:	687b      	ldr	r3, [r7, #4]
2400eb6a:	1ad3      	subs	r3, r2, r3
2400eb6c:	68ba      	ldr	r2, [r7, #8]
2400eb6e:	429a      	cmp	r2, r3
2400eb70:	d302      	bcc.n	2400eb78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2400eb72:	68bb      	ldr	r3, [r7, #8]
2400eb74:	2b00      	cmp	r3, #0
2400eb76:	d113      	bne.n	2400eba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400eb78:	68fb      	ldr	r3, [r7, #12]
2400eb7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eb7c:	f043 0220 	orr.w	r2, r3, #32
2400eb80:	68fb      	ldr	r3, [r7, #12]
2400eb82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400eb84:	68fb      	ldr	r3, [r7, #12]
2400eb86:	2220      	movs	r2, #32
2400eb88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400eb8c:	68fb      	ldr	r3, [r7, #12]
2400eb8e:	2200      	movs	r2, #0
2400eb90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400eb94:	68fb      	ldr	r3, [r7, #12]
2400eb96:	2200      	movs	r2, #0
2400eb98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400eb9c:	2301      	movs	r3, #1
2400eb9e:	e007      	b.n	2400ebb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400eba0:	68fb      	ldr	r3, [r7, #12]
2400eba2:	681b      	ldr	r3, [r3, #0]
2400eba4:	699b      	ldr	r3, [r3, #24]
2400eba6:	f003 0320 	and.w	r3, r3, #32
2400ebaa:	2b20      	cmp	r3, #32
2400ebac:	d1cf      	bne.n	2400eb4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400ebae:	2300      	movs	r3, #0
}
2400ebb0:	4618      	mov	r0, r3
2400ebb2:	3710      	adds	r7, #16
2400ebb4:	46bd      	mov	sp, r7
2400ebb6:	bd80      	pop	{r7, pc}

2400ebb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400ebb8:	b580      	push	{r7, lr}
2400ebba:	b084      	sub	sp, #16
2400ebbc:	af00      	add	r7, sp, #0
2400ebbe:	60f8      	str	r0, [r7, #12]
2400ebc0:	60b9      	str	r1, [r7, #8]
2400ebc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400ebc4:	e064      	b.n	2400ec90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400ebc6:	687a      	ldr	r2, [r7, #4]
2400ebc8:	68b9      	ldr	r1, [r7, #8]
2400ebca:	68f8      	ldr	r0, [r7, #12]
2400ebcc:	f000 f86e 	bl	2400ecac <I2C_IsErrorOccurred>
2400ebd0:	4603      	mov	r3, r0
2400ebd2:	2b00      	cmp	r3, #0
2400ebd4:	d001      	beq.n	2400ebda <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400ebd6:	2301      	movs	r3, #1
2400ebd8:	e062      	b.n	2400eca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400ebda:	68fb      	ldr	r3, [r7, #12]
2400ebdc:	681b      	ldr	r3, [r3, #0]
2400ebde:	699b      	ldr	r3, [r3, #24]
2400ebe0:	f003 0320 	and.w	r3, r3, #32
2400ebe4:	2b20      	cmp	r3, #32
2400ebe6:	d138      	bne.n	2400ec5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
2400ebe8:	68fb      	ldr	r3, [r7, #12]
2400ebea:	681b      	ldr	r3, [r3, #0]
2400ebec:	699b      	ldr	r3, [r3, #24]
2400ebee:	f003 0304 	and.w	r3, r3, #4
2400ebf2:	2b04      	cmp	r3, #4
2400ebf4:	d105      	bne.n	2400ec02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
2400ebf6:	68fb      	ldr	r3, [r7, #12]
2400ebf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ebfa:	2b00      	cmp	r3, #0
2400ebfc:	d001      	beq.n	2400ec02 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
2400ebfe:	2300      	movs	r3, #0
2400ec00:	e04e      	b.n	2400eca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2400ec02:	68fb      	ldr	r3, [r7, #12]
2400ec04:	681b      	ldr	r3, [r3, #0]
2400ec06:	699b      	ldr	r3, [r3, #24]
2400ec08:	f003 0310 	and.w	r3, r3, #16
2400ec0c:	2b10      	cmp	r3, #16
2400ec0e:	d107      	bne.n	2400ec20 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ec10:	68fb      	ldr	r3, [r7, #12]
2400ec12:	681b      	ldr	r3, [r3, #0]
2400ec14:	2210      	movs	r2, #16
2400ec16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2400ec18:	68fb      	ldr	r3, [r7, #12]
2400ec1a:	2204      	movs	r2, #4
2400ec1c:	645a      	str	r2, [r3, #68]	; 0x44
2400ec1e:	e002      	b.n	2400ec26 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ec20:	68fb      	ldr	r3, [r7, #12]
2400ec22:	2200      	movs	r2, #0
2400ec24:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400ec26:	68fb      	ldr	r3, [r7, #12]
2400ec28:	681b      	ldr	r3, [r3, #0]
2400ec2a:	2220      	movs	r2, #32
2400ec2c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2400ec2e:	68fb      	ldr	r3, [r7, #12]
2400ec30:	681b      	ldr	r3, [r3, #0]
2400ec32:	6859      	ldr	r1, [r3, #4]
2400ec34:	68fb      	ldr	r3, [r7, #12]
2400ec36:	681a      	ldr	r2, [r3, #0]
2400ec38:	4b1b      	ldr	r3, [pc, #108]	; (2400eca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
2400ec3a:	400b      	ands	r3, r1
2400ec3c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2400ec3e:	68fb      	ldr	r3, [r7, #12]
2400ec40:	2220      	movs	r2, #32
2400ec42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400ec46:	68fb      	ldr	r3, [r7, #12]
2400ec48:	2200      	movs	r2, #0
2400ec4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ec4e:	68fb      	ldr	r3, [r7, #12]
2400ec50:	2200      	movs	r2, #0
2400ec52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ec56:	2301      	movs	r3, #1
2400ec58:	e022      	b.n	2400eca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400ec5a:	f7f3 fa77 	bl	2400214c <HAL_GetTick>
2400ec5e:	4602      	mov	r2, r0
2400ec60:	687b      	ldr	r3, [r7, #4]
2400ec62:	1ad3      	subs	r3, r2, r3
2400ec64:	68ba      	ldr	r2, [r7, #8]
2400ec66:	429a      	cmp	r2, r3
2400ec68:	d302      	bcc.n	2400ec70 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
2400ec6a:	68bb      	ldr	r3, [r7, #8]
2400ec6c:	2b00      	cmp	r3, #0
2400ec6e:	d10f      	bne.n	2400ec90 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ec70:	68fb      	ldr	r3, [r7, #12]
2400ec72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ec74:	f043 0220 	orr.w	r2, r3, #32
2400ec78:	68fb      	ldr	r3, [r7, #12]
2400ec7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400ec7c:	68fb      	ldr	r3, [r7, #12]
2400ec7e:	2220      	movs	r2, #32
2400ec80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ec84:	68fb      	ldr	r3, [r7, #12]
2400ec86:	2200      	movs	r2, #0
2400ec88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400ec8c:	2301      	movs	r3, #1
2400ec8e:	e007      	b.n	2400eca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400ec90:	68fb      	ldr	r3, [r7, #12]
2400ec92:	681b      	ldr	r3, [r3, #0]
2400ec94:	699b      	ldr	r3, [r3, #24]
2400ec96:	f003 0304 	and.w	r3, r3, #4
2400ec9a:	2b04      	cmp	r3, #4
2400ec9c:	d193      	bne.n	2400ebc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400ec9e:	2300      	movs	r3, #0
}
2400eca0:	4618      	mov	r0, r3
2400eca2:	3710      	adds	r7, #16
2400eca4:	46bd      	mov	sp, r7
2400eca6:	bd80      	pop	{r7, pc}
2400eca8:	fe00e800 	.word	0xfe00e800

2400ecac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
2400ecac:	b580      	push	{r7, lr}
2400ecae:	b08a      	sub	sp, #40	; 0x28
2400ecb0:	af00      	add	r7, sp, #0
2400ecb2:	60f8      	str	r0, [r7, #12]
2400ecb4:	60b9      	str	r1, [r7, #8]
2400ecb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2400ecb8:	2300      	movs	r3, #0
2400ecba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
2400ecbe:	68fb      	ldr	r3, [r7, #12]
2400ecc0:	681b      	ldr	r3, [r3, #0]
2400ecc2:	699b      	ldr	r3, [r3, #24]
2400ecc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
2400ecc6:	2300      	movs	r3, #0
2400ecc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
2400ecca:	687b      	ldr	r3, [r7, #4]
2400eccc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2400ecce:	69bb      	ldr	r3, [r7, #24]
2400ecd0:	f003 0310 	and.w	r3, r3, #16
2400ecd4:	2b00      	cmp	r3, #0
2400ecd6:	d075      	beq.n	2400edc4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecd8:	68fb      	ldr	r3, [r7, #12]
2400ecda:	681b      	ldr	r3, [r3, #0]
2400ecdc:	2210      	movs	r2, #16
2400ecde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400ece0:	e056      	b.n	2400ed90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2400ece2:	68bb      	ldr	r3, [r7, #8]
2400ece4:	f1b3 3fff 	cmp.w	r3, #4294967295
2400ece8:	d052      	beq.n	2400ed90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400ecea:	f7f3 fa2f 	bl	2400214c <HAL_GetTick>
2400ecee:	4602      	mov	r2, r0
2400ecf0:	69fb      	ldr	r3, [r7, #28]
2400ecf2:	1ad3      	subs	r3, r2, r3
2400ecf4:	68ba      	ldr	r2, [r7, #8]
2400ecf6:	429a      	cmp	r2, r3
2400ecf8:	d302      	bcc.n	2400ed00 <I2C_IsErrorOccurred+0x54>
2400ecfa:	68bb      	ldr	r3, [r7, #8]
2400ecfc:	2b00      	cmp	r3, #0
2400ecfe:	d147      	bne.n	2400ed90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400ed00:	68fb      	ldr	r3, [r7, #12]
2400ed02:	681b      	ldr	r3, [r3, #0]
2400ed04:	685b      	ldr	r3, [r3, #4]
2400ed06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400ed0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2400ed0c:	68fb      	ldr	r3, [r7, #12]
2400ed0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400ed12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400ed14:	68fb      	ldr	r3, [r7, #12]
2400ed16:	681b      	ldr	r3, [r3, #0]
2400ed18:	699b      	ldr	r3, [r3, #24]
2400ed1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ed1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ed22:	d12e      	bne.n	2400ed82 <I2C_IsErrorOccurred+0xd6>
2400ed24:	697b      	ldr	r3, [r7, #20]
2400ed26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ed2a:	d02a      	beq.n	2400ed82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
2400ed2c:	7cfb      	ldrb	r3, [r7, #19]
2400ed2e:	2b20      	cmp	r3, #32
2400ed30:	d027      	beq.n	2400ed82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400ed32:	68fb      	ldr	r3, [r7, #12]
2400ed34:	681b      	ldr	r3, [r3, #0]
2400ed36:	685a      	ldr	r2, [r3, #4]
2400ed38:	68fb      	ldr	r3, [r7, #12]
2400ed3a:	681b      	ldr	r3, [r3, #0]
2400ed3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400ed40:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2400ed42:	f7f3 fa03 	bl	2400214c <HAL_GetTick>
2400ed46:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400ed48:	e01b      	b.n	2400ed82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400ed4a:	f7f3 f9ff 	bl	2400214c <HAL_GetTick>
2400ed4e:	4602      	mov	r2, r0
2400ed50:	69fb      	ldr	r3, [r7, #28]
2400ed52:	1ad3      	subs	r3, r2, r3
2400ed54:	2b19      	cmp	r3, #25
2400ed56:	d914      	bls.n	2400ed82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ed58:	68fb      	ldr	r3, [r7, #12]
2400ed5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ed5c:	f043 0220 	orr.w	r2, r3, #32
2400ed60:	68fb      	ldr	r3, [r7, #12]
2400ed62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
2400ed64:	68fb      	ldr	r3, [r7, #12]
2400ed66:	2220      	movs	r2, #32
2400ed68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
2400ed6c:	68fb      	ldr	r3, [r7, #12]
2400ed6e:	2200      	movs	r2, #0
2400ed70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
2400ed74:	68fb      	ldr	r3, [r7, #12]
2400ed76:	2200      	movs	r2, #0
2400ed78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
2400ed7c:	2301      	movs	r3, #1
2400ed7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400ed82:	68fb      	ldr	r3, [r7, #12]
2400ed84:	681b      	ldr	r3, [r3, #0]
2400ed86:	699b      	ldr	r3, [r3, #24]
2400ed88:	f003 0320 	and.w	r3, r3, #32
2400ed8c:	2b20      	cmp	r3, #32
2400ed8e:	d1dc      	bne.n	2400ed4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400ed90:	68fb      	ldr	r3, [r7, #12]
2400ed92:	681b      	ldr	r3, [r3, #0]
2400ed94:	699b      	ldr	r3, [r3, #24]
2400ed96:	f003 0320 	and.w	r3, r3, #32
2400ed9a:	2b20      	cmp	r3, #32
2400ed9c:	d003      	beq.n	2400eda6 <I2C_IsErrorOccurred+0xfa>
2400ed9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400eda2:	2b00      	cmp	r3, #0
2400eda4:	d09d      	beq.n	2400ece2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2400eda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400edaa:	2b00      	cmp	r3, #0
2400edac:	d103      	bne.n	2400edb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400edae:	68fb      	ldr	r3, [r7, #12]
2400edb0:	681b      	ldr	r3, [r3, #0]
2400edb2:	2220      	movs	r2, #32
2400edb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2400edb6:	6a3b      	ldr	r3, [r7, #32]
2400edb8:	f043 0304 	orr.w	r3, r3, #4
2400edbc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
2400edbe:	2301      	movs	r3, #1
2400edc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2400edc4:	68fb      	ldr	r3, [r7, #12]
2400edc6:	681b      	ldr	r3, [r3, #0]
2400edc8:	699b      	ldr	r3, [r3, #24]
2400edca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2400edcc:	69bb      	ldr	r3, [r7, #24]
2400edce:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400edd2:	2b00      	cmp	r3, #0
2400edd4:	d00b      	beq.n	2400edee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
2400edd6:	6a3b      	ldr	r3, [r7, #32]
2400edd8:	f043 0301 	orr.w	r3, r3, #1
2400eddc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400edde:	68fb      	ldr	r3, [r7, #12]
2400ede0:	681b      	ldr	r3, [r3, #0]
2400ede2:	f44f 7280 	mov.w	r2, #256	; 0x100
2400ede6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400ede8:	2301      	movs	r3, #1
2400edea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400edee:	69bb      	ldr	r3, [r7, #24]
2400edf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400edf4:	2b00      	cmp	r3, #0
2400edf6:	d00b      	beq.n	2400ee10 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2400edf8:	6a3b      	ldr	r3, [r7, #32]
2400edfa:	f043 0308 	orr.w	r3, r3, #8
2400edfe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400ee00:	68fb      	ldr	r3, [r7, #12]
2400ee02:	681b      	ldr	r3, [r3, #0]
2400ee04:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400ee08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400ee0a:	2301      	movs	r3, #1
2400ee0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400ee10:	69bb      	ldr	r3, [r7, #24]
2400ee12:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400ee16:	2b00      	cmp	r3, #0
2400ee18:	d00b      	beq.n	2400ee32 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2400ee1a:	6a3b      	ldr	r3, [r7, #32]
2400ee1c:	f043 0302 	orr.w	r3, r3, #2
2400ee20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400ee22:	68fb      	ldr	r3, [r7, #12]
2400ee24:	681b      	ldr	r3, [r3, #0]
2400ee26:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ee2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400ee2c:	2301      	movs	r3, #1
2400ee2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
2400ee32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400ee36:	2b00      	cmp	r3, #0
2400ee38:	d01c      	beq.n	2400ee74 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400ee3a:	68f8      	ldr	r0, [r7, #12]
2400ee3c:	f7ff fb1b 	bl	2400e476 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400ee40:	68fb      	ldr	r3, [r7, #12]
2400ee42:	681b      	ldr	r3, [r3, #0]
2400ee44:	6859      	ldr	r1, [r3, #4]
2400ee46:	68fb      	ldr	r3, [r7, #12]
2400ee48:	681a      	ldr	r2, [r3, #0]
2400ee4a:	4b0d      	ldr	r3, [pc, #52]	; (2400ee80 <I2C_IsErrorOccurred+0x1d4>)
2400ee4c:	400b      	ands	r3, r1
2400ee4e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
2400ee50:	68fb      	ldr	r3, [r7, #12]
2400ee52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400ee54:	6a3b      	ldr	r3, [r7, #32]
2400ee56:	431a      	orrs	r2, r3
2400ee58:	68fb      	ldr	r3, [r7, #12]
2400ee5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2400ee5c:	68fb      	ldr	r3, [r7, #12]
2400ee5e:	2220      	movs	r2, #32
2400ee60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400ee64:	68fb      	ldr	r3, [r7, #12]
2400ee66:	2200      	movs	r2, #0
2400ee68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ee6c:	68fb      	ldr	r3, [r7, #12]
2400ee6e:	2200      	movs	r2, #0
2400ee70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400ee74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2400ee78:	4618      	mov	r0, r3
2400ee7a:	3728      	adds	r7, #40	; 0x28
2400ee7c:	46bd      	mov	sp, r7
2400ee7e:	bd80      	pop	{r7, pc}
2400ee80:	fe00e800 	.word	0xfe00e800

2400ee84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
2400ee84:	b480      	push	{r7}
2400ee86:	b087      	sub	sp, #28
2400ee88:	af00      	add	r7, sp, #0
2400ee8a:	60f8      	str	r0, [r7, #12]
2400ee8c:	607b      	str	r3, [r7, #4]
2400ee8e:	460b      	mov	r3, r1
2400ee90:	817b      	strh	r3, [r7, #10]
2400ee92:	4613      	mov	r3, r2
2400ee94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400ee96:	897b      	ldrh	r3, [r7, #10]
2400ee98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400ee9c:	7a7b      	ldrb	r3, [r7, #9]
2400ee9e:	041b      	lsls	r3, r3, #16
2400eea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400eea4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400eea6:	687b      	ldr	r3, [r7, #4]
2400eea8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400eeaa:	6a3b      	ldr	r3, [r7, #32]
2400eeac:	4313      	orrs	r3, r2
2400eeae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400eeb2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2400eeb4:	68fb      	ldr	r3, [r7, #12]
2400eeb6:	681b      	ldr	r3, [r3, #0]
2400eeb8:	685a      	ldr	r2, [r3, #4]
2400eeba:	6a3b      	ldr	r3, [r7, #32]
2400eebc:	0d5b      	lsrs	r3, r3, #21
2400eebe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
2400eec2:	4b08      	ldr	r3, [pc, #32]	; (2400eee4 <I2C_TransferConfig+0x60>)
2400eec4:	430b      	orrs	r3, r1
2400eec6:	43db      	mvns	r3, r3
2400eec8:	ea02 0103 	and.w	r1, r2, r3
2400eecc:	68fb      	ldr	r3, [r7, #12]
2400eece:	681b      	ldr	r3, [r3, #0]
2400eed0:	697a      	ldr	r2, [r7, #20]
2400eed2:	430a      	orrs	r2, r1
2400eed4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400eed6:	bf00      	nop
2400eed8:	371c      	adds	r7, #28
2400eeda:	46bd      	mov	sp, r7
2400eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400eee0:	4770      	bx	lr
2400eee2:	bf00      	nop
2400eee4:	03ff63ff 	.word	0x03ff63ff

2400eee8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400eee8:	b480      	push	{r7}
2400eeea:	b085      	sub	sp, #20
2400eeec:	af00      	add	r7, sp, #0
2400eeee:	6078      	str	r0, [r7, #4]
2400eef0:	460b      	mov	r3, r1
2400eef2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400eef4:	2300      	movs	r3, #0
2400eef6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400eef8:	687b      	ldr	r3, [r7, #4]
2400eefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400eefc:	4a2a      	ldr	r2, [pc, #168]	; (2400efa8 <I2C_Enable_IRQ+0xc0>)
2400eefe:	4293      	cmp	r3, r2
2400ef00:	d004      	beq.n	2400ef0c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
2400ef02:	687b      	ldr	r3, [r7, #4]
2400ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400ef06:	4a29      	ldr	r2, [pc, #164]	; (2400efac <I2C_Enable_IRQ+0xc4>)
2400ef08:	4293      	cmp	r3, r2
2400ef0a:	d11d      	bne.n	2400ef48 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400ef0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400ef10:	2b00      	cmp	r3, #0
2400ef12:	da03      	bge.n	2400ef1c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400ef14:	68fb      	ldr	r3, [r7, #12]
2400ef16:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400ef1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2400ef1c:	887b      	ldrh	r3, [r7, #2]
2400ef1e:	2b10      	cmp	r3, #16
2400ef20:	d103      	bne.n	2400ef2a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400ef22:	68fb      	ldr	r3, [r7, #12]
2400ef24:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400ef28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400ef2a:	887b      	ldrh	r3, [r7, #2]
2400ef2c:	2b20      	cmp	r3, #32
2400ef2e:	d103      	bne.n	2400ef38 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
2400ef30:	68fb      	ldr	r3, [r7, #12]
2400ef32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2400ef36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400ef38:	887b      	ldrh	r3, [r7, #2]
2400ef3a:	2b40      	cmp	r3, #64	; 0x40
2400ef3c:	d125      	bne.n	2400ef8a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
2400ef3e:	68fb      	ldr	r3, [r7, #12]
2400ef40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400ef44:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400ef46:	e020      	b.n	2400ef8a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400ef48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400ef4c:	2b00      	cmp	r3, #0
2400ef4e:	da03      	bge.n	2400ef58 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400ef50:	68fb      	ldr	r3, [r7, #12]
2400ef52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400ef56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400ef58:	887b      	ldrh	r3, [r7, #2]
2400ef5a:	f003 0301 	and.w	r3, r3, #1
2400ef5e:	2b00      	cmp	r3, #0
2400ef60:	d003      	beq.n	2400ef6a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2400ef62:	68fb      	ldr	r3, [r7, #12]
2400ef64:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
2400ef68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400ef6a:	887b      	ldrh	r3, [r7, #2]
2400ef6c:	f003 0302 	and.w	r3, r3, #2
2400ef70:	2b00      	cmp	r3, #0
2400ef72:	d003      	beq.n	2400ef7c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2400ef74:	68fb      	ldr	r3, [r7, #12]
2400ef76:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
2400ef7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400ef7c:	887b      	ldrh	r3, [r7, #2]
2400ef7e:	2b20      	cmp	r3, #32
2400ef80:	d103      	bne.n	2400ef8a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
2400ef82:	68fb      	ldr	r3, [r7, #12]
2400ef84:	f043 0320 	orr.w	r3, r3, #32
2400ef88:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400ef8a:	687b      	ldr	r3, [r7, #4]
2400ef8c:	681b      	ldr	r3, [r3, #0]
2400ef8e:	6819      	ldr	r1, [r3, #0]
2400ef90:	687b      	ldr	r3, [r7, #4]
2400ef92:	681b      	ldr	r3, [r3, #0]
2400ef94:	68fa      	ldr	r2, [r7, #12]
2400ef96:	430a      	orrs	r2, r1
2400ef98:	601a      	str	r2, [r3, #0]
}
2400ef9a:	bf00      	nop
2400ef9c:	3714      	adds	r7, #20
2400ef9e:	46bd      	mov	sp, r7
2400efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400efa4:	4770      	bx	lr
2400efa6:	bf00      	nop
2400efa8:	2400d31d 	.word	0x2400d31d
2400efac:	2400d505 	.word	0x2400d505

2400efb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400efb0:	b480      	push	{r7}
2400efb2:	b085      	sub	sp, #20
2400efb4:	af00      	add	r7, sp, #0
2400efb6:	6078      	str	r0, [r7, #4]
2400efb8:	460b      	mov	r3, r1
2400efba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400efbc:	2300      	movs	r3, #0
2400efbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400efc0:	887b      	ldrh	r3, [r7, #2]
2400efc2:	f003 0301 	and.w	r3, r3, #1
2400efc6:	2b00      	cmp	r3, #0
2400efc8:	d00f      	beq.n	2400efea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2400efca:	68fb      	ldr	r3, [r7, #12]
2400efcc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
2400efd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400efd2:	687b      	ldr	r3, [r7, #4]
2400efd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400efd8:	b2db      	uxtb	r3, r3
2400efda:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400efde:	2b28      	cmp	r3, #40	; 0x28
2400efe0:	d003      	beq.n	2400efea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400efe2:	68fb      	ldr	r3, [r7, #12]
2400efe4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400efe8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400efea:	887b      	ldrh	r3, [r7, #2]
2400efec:	f003 0302 	and.w	r3, r3, #2
2400eff0:	2b00      	cmp	r3, #0
2400eff2:	d00f      	beq.n	2400f014 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
2400eff4:	68fb      	ldr	r3, [r7, #12]
2400eff6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
2400effa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400effc:	687b      	ldr	r3, [r7, #4]
2400effe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f002:	b2db      	uxtb	r3, r3
2400f004:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f008:	2b28      	cmp	r3, #40	; 0x28
2400f00a:	d003      	beq.n	2400f014 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f00c:	68fb      	ldr	r3, [r7, #12]
2400f00e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400f012:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400f014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400f018:	2b00      	cmp	r3, #0
2400f01a:	da03      	bge.n	2400f024 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f01c:	68fb      	ldr	r3, [r7, #12]
2400f01e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f022:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2400f024:	887b      	ldrh	r3, [r7, #2]
2400f026:	2b10      	cmp	r3, #16
2400f028:	d103      	bne.n	2400f032 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400f02a:	68fb      	ldr	r3, [r7, #12]
2400f02c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400f030:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f032:	887b      	ldrh	r3, [r7, #2]
2400f034:	2b20      	cmp	r3, #32
2400f036:	d103      	bne.n	2400f040 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2400f038:	68fb      	ldr	r3, [r7, #12]
2400f03a:	f043 0320 	orr.w	r3, r3, #32
2400f03e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400f040:	887b      	ldrh	r3, [r7, #2]
2400f042:	2b40      	cmp	r3, #64	; 0x40
2400f044:	d103      	bne.n	2400f04e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2400f046:	68fb      	ldr	r3, [r7, #12]
2400f048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400f04c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400f04e:	687b      	ldr	r3, [r7, #4]
2400f050:	681b      	ldr	r3, [r3, #0]
2400f052:	6819      	ldr	r1, [r3, #0]
2400f054:	68fb      	ldr	r3, [r7, #12]
2400f056:	43da      	mvns	r2, r3
2400f058:	687b      	ldr	r3, [r7, #4]
2400f05a:	681b      	ldr	r3, [r3, #0]
2400f05c:	400a      	ands	r2, r1
2400f05e:	601a      	str	r2, [r3, #0]
}
2400f060:	bf00      	nop
2400f062:	3714      	adds	r7, #20
2400f064:	46bd      	mov	sp, r7
2400f066:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f06a:	4770      	bx	lr

2400f06c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
2400f06c:	b480      	push	{r7}
2400f06e:	b083      	sub	sp, #12
2400f070:	af00      	add	r7, sp, #0
2400f072:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
2400f074:	687b      	ldr	r3, [r7, #4]
2400f076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f078:	2baa      	cmp	r3, #170	; 0xaa
2400f07a:	d103      	bne.n	2400f084 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
2400f07c:	687b      	ldr	r3, [r7, #4]
2400f07e:	2200      	movs	r2, #0
2400f080:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
2400f082:	e008      	b.n	2400f096 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
2400f084:	687b      	ldr	r3, [r7, #4]
2400f086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f088:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400f08c:	d103      	bne.n	2400f096 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
2400f08e:	687b      	ldr	r3, [r7, #4]
2400f090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
2400f094:	62da      	str	r2, [r3, #44]	; 0x2c
}
2400f096:	bf00      	nop
2400f098:	370c      	adds	r7, #12
2400f09a:	46bd      	mov	sp, r7
2400f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f0a0:	4770      	bx	lr

2400f0a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
2400f0a2:	b480      	push	{r7}
2400f0a4:	b083      	sub	sp, #12
2400f0a6:	af00      	add	r7, sp, #0
2400f0a8:	6078      	str	r0, [r7, #4]
2400f0aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f0ac:	687b      	ldr	r3, [r7, #4]
2400f0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f0b2:	b2db      	uxtb	r3, r3
2400f0b4:	2b20      	cmp	r3, #32
2400f0b6:	d138      	bne.n	2400f12a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f0b8:	687b      	ldr	r3, [r7, #4]
2400f0ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f0be:	2b01      	cmp	r3, #1
2400f0c0:	d101      	bne.n	2400f0c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
2400f0c2:	2302      	movs	r3, #2
2400f0c4:	e032      	b.n	2400f12c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2400f0c6:	687b      	ldr	r3, [r7, #4]
2400f0c8:	2201      	movs	r2, #1
2400f0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f0ce:	687b      	ldr	r3, [r7, #4]
2400f0d0:	2224      	movs	r2, #36	; 0x24
2400f0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f0d6:	687b      	ldr	r3, [r7, #4]
2400f0d8:	681b      	ldr	r3, [r3, #0]
2400f0da:	681a      	ldr	r2, [r3, #0]
2400f0dc:	687b      	ldr	r3, [r7, #4]
2400f0de:	681b      	ldr	r3, [r3, #0]
2400f0e0:	f022 0201 	bic.w	r2, r2, #1
2400f0e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2400f0e6:	687b      	ldr	r3, [r7, #4]
2400f0e8:	681b      	ldr	r3, [r3, #0]
2400f0ea:	681a      	ldr	r2, [r3, #0]
2400f0ec:	687b      	ldr	r3, [r7, #4]
2400f0ee:	681b      	ldr	r3, [r3, #0]
2400f0f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2400f0f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2400f0f6:	687b      	ldr	r3, [r7, #4]
2400f0f8:	681b      	ldr	r3, [r3, #0]
2400f0fa:	6819      	ldr	r1, [r3, #0]
2400f0fc:	687b      	ldr	r3, [r7, #4]
2400f0fe:	681b      	ldr	r3, [r3, #0]
2400f100:	683a      	ldr	r2, [r7, #0]
2400f102:	430a      	orrs	r2, r1
2400f104:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f106:	687b      	ldr	r3, [r7, #4]
2400f108:	681b      	ldr	r3, [r3, #0]
2400f10a:	681a      	ldr	r2, [r3, #0]
2400f10c:	687b      	ldr	r3, [r7, #4]
2400f10e:	681b      	ldr	r3, [r3, #0]
2400f110:	f042 0201 	orr.w	r2, r2, #1
2400f114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f116:	687b      	ldr	r3, [r7, #4]
2400f118:	2220      	movs	r2, #32
2400f11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f11e:	687b      	ldr	r3, [r7, #4]
2400f120:	2200      	movs	r2, #0
2400f122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f126:	2300      	movs	r3, #0
2400f128:	e000      	b.n	2400f12c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2400f12a:	2302      	movs	r3, #2
  }
}
2400f12c:	4618      	mov	r0, r3
2400f12e:	370c      	adds	r7, #12
2400f130:	46bd      	mov	sp, r7
2400f132:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f136:	4770      	bx	lr

2400f138 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2400f138:	b480      	push	{r7}
2400f13a:	b085      	sub	sp, #20
2400f13c:	af00      	add	r7, sp, #0
2400f13e:	6078      	str	r0, [r7, #4]
2400f140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f142:	687b      	ldr	r3, [r7, #4]
2400f144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f148:	b2db      	uxtb	r3, r3
2400f14a:	2b20      	cmp	r3, #32
2400f14c:	d139      	bne.n	2400f1c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f14e:	687b      	ldr	r3, [r7, #4]
2400f150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f154:	2b01      	cmp	r3, #1
2400f156:	d101      	bne.n	2400f15c <HAL_I2CEx_ConfigDigitalFilter+0x24>
2400f158:	2302      	movs	r3, #2
2400f15a:	e033      	b.n	2400f1c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
2400f15c:	687b      	ldr	r3, [r7, #4]
2400f15e:	2201      	movs	r2, #1
2400f160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f164:	687b      	ldr	r3, [r7, #4]
2400f166:	2224      	movs	r2, #36	; 0x24
2400f168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f16c:	687b      	ldr	r3, [r7, #4]
2400f16e:	681b      	ldr	r3, [r3, #0]
2400f170:	681a      	ldr	r2, [r3, #0]
2400f172:	687b      	ldr	r3, [r7, #4]
2400f174:	681b      	ldr	r3, [r3, #0]
2400f176:	f022 0201 	bic.w	r2, r2, #1
2400f17a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2400f17c:	687b      	ldr	r3, [r7, #4]
2400f17e:	681b      	ldr	r3, [r3, #0]
2400f180:	681b      	ldr	r3, [r3, #0]
2400f182:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2400f184:	68fb      	ldr	r3, [r7, #12]
2400f186:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2400f18a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2400f18c:	683b      	ldr	r3, [r7, #0]
2400f18e:	021b      	lsls	r3, r3, #8
2400f190:	68fa      	ldr	r2, [r7, #12]
2400f192:	4313      	orrs	r3, r2
2400f194:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
2400f196:	687b      	ldr	r3, [r7, #4]
2400f198:	681b      	ldr	r3, [r3, #0]
2400f19a:	68fa      	ldr	r2, [r7, #12]
2400f19c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f19e:	687b      	ldr	r3, [r7, #4]
2400f1a0:	681b      	ldr	r3, [r3, #0]
2400f1a2:	681a      	ldr	r2, [r3, #0]
2400f1a4:	687b      	ldr	r3, [r7, #4]
2400f1a6:	681b      	ldr	r3, [r3, #0]
2400f1a8:	f042 0201 	orr.w	r2, r2, #1
2400f1ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f1ae:	687b      	ldr	r3, [r7, #4]
2400f1b0:	2220      	movs	r2, #32
2400f1b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f1b6:	687b      	ldr	r3, [r7, #4]
2400f1b8:	2200      	movs	r2, #0
2400f1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f1be:	2300      	movs	r3, #0
2400f1c0:	e000      	b.n	2400f1c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2400f1c2:	2302      	movs	r3, #2
  }
}
2400f1c4:	4618      	mov	r0, r3
2400f1c6:	3714      	adds	r7, #20
2400f1c8:	46bd      	mov	sp, r7
2400f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f1ce:	4770      	bx	lr

2400f1d0 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400f1d0:	b480      	push	{r7}
2400f1d2:	b083      	sub	sp, #12
2400f1d4:	af00      	add	r7, sp, #0
2400f1d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f1d8:	687b      	ldr	r3, [r7, #4]
2400f1da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f1de:	b2db      	uxtb	r3, r3
2400f1e0:	2b20      	cmp	r3, #32
2400f1e2:	d130      	bne.n	2400f246 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f1e4:	687b      	ldr	r3, [r7, #4]
2400f1e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f1ea:	2b01      	cmp	r3, #1
2400f1ec:	d101      	bne.n	2400f1f2 <HAL_I2CEx_EnableWakeUp+0x22>
2400f1ee:	2302      	movs	r3, #2
2400f1f0:	e02a      	b.n	2400f248 <HAL_I2CEx_EnableWakeUp+0x78>
2400f1f2:	687b      	ldr	r3, [r7, #4]
2400f1f4:	2201      	movs	r2, #1
2400f1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f1fa:	687b      	ldr	r3, [r7, #4]
2400f1fc:	2224      	movs	r2, #36	; 0x24
2400f1fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f202:	687b      	ldr	r3, [r7, #4]
2400f204:	681b      	ldr	r3, [r3, #0]
2400f206:	681a      	ldr	r2, [r3, #0]
2400f208:	687b      	ldr	r3, [r7, #4]
2400f20a:	681b      	ldr	r3, [r3, #0]
2400f20c:	f022 0201 	bic.w	r2, r2, #1
2400f210:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
2400f212:	687b      	ldr	r3, [r7, #4]
2400f214:	681b      	ldr	r3, [r3, #0]
2400f216:	681a      	ldr	r2, [r3, #0]
2400f218:	687b      	ldr	r3, [r7, #4]
2400f21a:	681b      	ldr	r3, [r3, #0]
2400f21c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400f220:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f222:	687b      	ldr	r3, [r7, #4]
2400f224:	681b      	ldr	r3, [r3, #0]
2400f226:	681a      	ldr	r2, [r3, #0]
2400f228:	687b      	ldr	r3, [r7, #4]
2400f22a:	681b      	ldr	r3, [r3, #0]
2400f22c:	f042 0201 	orr.w	r2, r2, #1
2400f230:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f232:	687b      	ldr	r3, [r7, #4]
2400f234:	2220      	movs	r2, #32
2400f236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f23a:	687b      	ldr	r3, [r7, #4]
2400f23c:	2200      	movs	r2, #0
2400f23e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f242:	2300      	movs	r3, #0
2400f244:	e000      	b.n	2400f248 <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400f246:	2302      	movs	r3, #2
  }
}
2400f248:	4618      	mov	r0, r3
2400f24a:	370c      	adds	r7, #12
2400f24c:	46bd      	mov	sp, r7
2400f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f252:	4770      	bx	lr

2400f254 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400f254:	b480      	push	{r7}
2400f256:	b083      	sub	sp, #12
2400f258:	af00      	add	r7, sp, #0
2400f25a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f25c:	687b      	ldr	r3, [r7, #4]
2400f25e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f262:	b2db      	uxtb	r3, r3
2400f264:	2b20      	cmp	r3, #32
2400f266:	d130      	bne.n	2400f2ca <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f268:	687b      	ldr	r3, [r7, #4]
2400f26a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f26e:	2b01      	cmp	r3, #1
2400f270:	d101      	bne.n	2400f276 <HAL_I2CEx_DisableWakeUp+0x22>
2400f272:	2302      	movs	r3, #2
2400f274:	e02a      	b.n	2400f2cc <HAL_I2CEx_DisableWakeUp+0x78>
2400f276:	687b      	ldr	r3, [r7, #4]
2400f278:	2201      	movs	r2, #1
2400f27a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f27e:	687b      	ldr	r3, [r7, #4]
2400f280:	2224      	movs	r2, #36	; 0x24
2400f282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f286:	687b      	ldr	r3, [r7, #4]
2400f288:	681b      	ldr	r3, [r3, #0]
2400f28a:	681a      	ldr	r2, [r3, #0]
2400f28c:	687b      	ldr	r3, [r7, #4]
2400f28e:	681b      	ldr	r3, [r3, #0]
2400f290:	f022 0201 	bic.w	r2, r2, #1
2400f294:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
2400f296:	687b      	ldr	r3, [r7, #4]
2400f298:	681b      	ldr	r3, [r3, #0]
2400f29a:	681a      	ldr	r2, [r3, #0]
2400f29c:	687b      	ldr	r3, [r7, #4]
2400f29e:	681b      	ldr	r3, [r3, #0]
2400f2a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400f2a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f2a6:	687b      	ldr	r3, [r7, #4]
2400f2a8:	681b      	ldr	r3, [r3, #0]
2400f2aa:	681a      	ldr	r2, [r3, #0]
2400f2ac:	687b      	ldr	r3, [r7, #4]
2400f2ae:	681b      	ldr	r3, [r3, #0]
2400f2b0:	f042 0201 	orr.w	r2, r2, #1
2400f2b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f2b6:	687b      	ldr	r3, [r7, #4]
2400f2b8:	2220      	movs	r2, #32
2400f2ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f2be:	687b      	ldr	r3, [r7, #4]
2400f2c0:	2200      	movs	r2, #0
2400f2c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f2c6:	2300      	movs	r3, #0
2400f2c8:	e000      	b.n	2400f2cc <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400f2ca:	2302      	movs	r3, #2
  }
}
2400f2cc:	4618      	mov	r0, r3
2400f2ce:	370c      	adds	r7, #12
2400f2d0:	46bd      	mov	sp, r7
2400f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f2d6:	4770      	bx	lr

2400f2d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2400f2d8:	b480      	push	{r7}
2400f2da:	b085      	sub	sp, #20
2400f2dc:	af00      	add	r7, sp, #0
2400f2de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400f2e0:	4b0d      	ldr	r3, [pc, #52]	; (2400f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f2e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f2e6:	4a0c      	ldr	r2, [pc, #48]	; (2400f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f2e8:	f043 0302 	orr.w	r3, r3, #2
2400f2ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400f2f0:	4b09      	ldr	r3, [pc, #36]	; (2400f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f2f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f2f6:	f003 0302 	and.w	r3, r3, #2
2400f2fa:	60fb      	str	r3, [r7, #12]
2400f2fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400f2fe:	4b07      	ldr	r3, [pc, #28]	; (2400f31c <HAL_I2CEx_EnableFastModePlus+0x44>)
2400f300:	685a      	ldr	r2, [r3, #4]
2400f302:	4906      	ldr	r1, [pc, #24]	; (2400f31c <HAL_I2CEx_EnableFastModePlus+0x44>)
2400f304:	687b      	ldr	r3, [r7, #4]
2400f306:	4313      	orrs	r3, r2
2400f308:	604b      	str	r3, [r1, #4]
}
2400f30a:	bf00      	nop
2400f30c:	3714      	adds	r7, #20
2400f30e:	46bd      	mov	sp, r7
2400f310:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f314:	4770      	bx	lr
2400f316:	bf00      	nop
2400f318:	58024400 	.word	0x58024400
2400f31c:	58000400 	.word	0x58000400

2400f320 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
2400f320:	b480      	push	{r7}
2400f322:	b085      	sub	sp, #20
2400f324:	af00      	add	r7, sp, #0
2400f326:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400f328:	4b0d      	ldr	r3, [pc, #52]	; (2400f360 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f32a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f32e:	4a0c      	ldr	r2, [pc, #48]	; (2400f360 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f330:	f043 0302 	orr.w	r3, r3, #2
2400f334:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400f338:	4b09      	ldr	r3, [pc, #36]	; (2400f360 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f33a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f33e:	f003 0302 	and.w	r3, r3, #2
2400f342:	60fb      	str	r3, [r7, #12]
2400f344:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400f346:	4b07      	ldr	r3, [pc, #28]	; (2400f364 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400f348:	685a      	ldr	r2, [r3, #4]
2400f34a:	687b      	ldr	r3, [r7, #4]
2400f34c:	43db      	mvns	r3, r3
2400f34e:	4905      	ldr	r1, [pc, #20]	; (2400f364 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400f350:	4013      	ands	r3, r2
2400f352:	604b      	str	r3, [r1, #4]
}
2400f354:	bf00      	nop
2400f356:	3714      	adds	r7, #20
2400f358:	46bd      	mov	sp, r7
2400f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f35e:	4770      	bx	lr
2400f360:	58024400 	.word	0x58024400
2400f364:	58000400 	.word	0x58000400

2400f368 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
2400f368:	b580      	push	{r7, lr}
2400f36a:	b084      	sub	sp, #16
2400f36c:	af00      	add	r7, sp, #0
2400f36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2400f370:	f7f2 feec 	bl	2400214c <HAL_GetTick>
2400f374:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f376:	687b      	ldr	r3, [r7, #4]
2400f378:	2b00      	cmp	r3, #0
2400f37a:	d101      	bne.n	2400f380 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
2400f37c:	2301      	movs	r3, #1
2400f37e:	e03b      	b.n	2400f3f8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
2400f380:	687b      	ldr	r3, [r7, #4]
2400f382:	2200      	movs	r2, #0
2400f384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
2400f388:	687b      	ldr	r3, [r7, #4]
2400f38a:	2202      	movs	r2, #2
2400f38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
2400f390:	687b      	ldr	r3, [r7, #4]
2400f392:	681b      	ldr	r3, [r3, #0]
2400f394:	68da      	ldr	r2, [r3, #12]
2400f396:	687b      	ldr	r3, [r7, #4]
2400f398:	681b      	ldr	r3, [r3, #0]
2400f39a:	f022 0201 	bic.w	r2, r2, #1
2400f39e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400f3a0:	e00f      	b.n	2400f3c2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2400f3a2:	f7f2 fed3 	bl	2400214c <HAL_GetTick>
2400f3a6:	4602      	mov	r2, r0
2400f3a8:	68fb      	ldr	r3, [r7, #12]
2400f3aa:	1ad3      	subs	r3, r2, r3
2400f3ac:	2b05      	cmp	r3, #5
2400f3ae:	d908      	bls.n	2400f3c2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
2400f3b0:	687b      	ldr	r3, [r7, #4]
2400f3b2:	2240      	movs	r2, #64	; 0x40
2400f3b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
2400f3b6:	687b      	ldr	r3, [r7, #4]
2400f3b8:	2203      	movs	r2, #3
2400f3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
2400f3be:	2301      	movs	r3, #1
2400f3c0:	e01a      	b.n	2400f3f8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400f3c2:	687b      	ldr	r3, [r7, #4]
2400f3c4:	681b      	ldr	r3, [r3, #0]
2400f3c6:	68db      	ldr	r3, [r3, #12]
2400f3c8:	f003 0301 	and.w	r3, r3, #1
2400f3cc:	2b00      	cmp	r3, #0
2400f3ce:	d1e8      	bne.n	2400f3a2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
2400f3d0:	6878      	ldr	r0, [r7, #4]
2400f3d2:	f001 f899 	bl	24010508 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400f3d6:	687b      	ldr	r3, [r7, #4]
2400f3d8:	2200      	movs	r2, #0
2400f3da:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400f3dc:	687b      	ldr	r3, [r7, #4]
2400f3de:	2200      	movs	r2, #0
2400f3e0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400f3e2:	687b      	ldr	r3, [r7, #4]
2400f3e4:	2200      	movs	r2, #0
2400f3e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400f3e8:	687b      	ldr	r3, [r7, #4]
2400f3ea:	2200      	movs	r2, #0
2400f3ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
2400f3ee:	687b      	ldr	r3, [r7, #4]
2400f3f0:	2201      	movs	r2, #1
2400f3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
2400f3f6:	2300      	movs	r3, #0
}
2400f3f8:	4618      	mov	r0, r3
2400f3fa:	3710      	adds	r7, #16
2400f3fc:	46bd      	mov	sp, r7
2400f3fe:	bd80      	pop	{r7, pc}

2400f400 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
2400f400:	b480      	push	{r7}
2400f402:	b083      	sub	sp, #12
2400f404:	af00      	add	r7, sp, #0
2400f406:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f408:	687b      	ldr	r3, [r7, #4]
2400f40a:	2b00      	cmp	r3, #0
2400f40c:	d101      	bne.n	2400f412 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
2400f40e:	2301      	movs	r3, #1
2400f410:	e048      	b.n	2400f4a4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
2400f412:	687b      	ldr	r3, [r7, #4]
2400f414:	681b      	ldr	r3, [r3, #0]
2400f416:	68da      	ldr	r2, [r3, #12]
2400f418:	687b      	ldr	r3, [r7, #4]
2400f41a:	681b      	ldr	r3, [r3, #0]
2400f41c:	f022 0201 	bic.w	r2, r2, #1
2400f420:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
2400f422:	687b      	ldr	r3, [r7, #4]
2400f424:	681b      	ldr	r3, [r3, #0]
2400f426:	2200      	movs	r2, #0
2400f428:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
2400f42a:	687b      	ldr	r3, [r7, #4]
2400f42c:	681b      	ldr	r3, [r3, #0]
2400f42e:	2200      	movs	r2, #0
2400f430:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
2400f432:	687b      	ldr	r3, [r7, #4]
2400f434:	681b      	ldr	r3, [r3, #0]
2400f436:	2200      	movs	r2, #0
2400f438:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
2400f43a:	687b      	ldr	r3, [r7, #4]
2400f43c:	681b      	ldr	r3, [r3, #0]
2400f43e:	2200      	movs	r2, #0
2400f440:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
2400f442:	687b      	ldr	r3, [r7, #4]
2400f444:	681b      	ldr	r3, [r3, #0]
2400f446:	2200      	movs	r2, #0
2400f448:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
2400f44a:	687b      	ldr	r3, [r7, #4]
2400f44c:	681b      	ldr	r3, [r3, #0]
2400f44e:	2200      	movs	r2, #0
2400f450:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
2400f452:	687b      	ldr	r3, [r7, #4]
2400f454:	681b      	ldr	r3, [r3, #0]
2400f456:	2200      	movs	r2, #0
2400f458:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
2400f45a:	687b      	ldr	r3, [r7, #4]
2400f45c:	681b      	ldr	r3, [r3, #0]
2400f45e:	2200      	movs	r2, #0
2400f460:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
2400f462:	687b      	ldr	r3, [r7, #4]
2400f464:	681b      	ldr	r3, [r3, #0]
2400f466:	2200      	movs	r2, #0
2400f468:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
2400f46a:	687b      	ldr	r3, [r7, #4]
2400f46c:	681b      	ldr	r3, [r3, #0]
2400f46e:	2200      	movs	r2, #0
2400f470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
2400f472:	687b      	ldr	r3, [r7, #4]
2400f474:	681b      	ldr	r3, [r3, #0]
2400f476:	221f      	movs	r2, #31
2400f478:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400f47a:	687b      	ldr	r3, [r7, #4]
2400f47c:	2200      	movs	r2, #0
2400f47e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400f480:	687b      	ldr	r3, [r7, #4]
2400f482:	2200      	movs	r2, #0
2400f484:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400f486:	687b      	ldr	r3, [r7, #4]
2400f488:	2200      	movs	r2, #0
2400f48a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400f48c:	687b      	ldr	r3, [r7, #4]
2400f48e:	2200      	movs	r2, #0
2400f490:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
2400f492:	687b      	ldr	r3, [r7, #4]
2400f494:	2200      	movs	r2, #0
2400f496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f49a:	687b      	ldr	r3, [r7, #4]
2400f49c:	2200      	movs	r2, #0
2400f49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
2400f4a2:	2300      	movs	r3, #0
}
2400f4a4:	4618      	mov	r0, r3
2400f4a6:	370c      	adds	r7, #12
2400f4a8:	46bd      	mov	sp, r7
2400f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f4ae:	4770      	bx	lr

2400f4b0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
2400f4b0:	b480      	push	{r7}
2400f4b2:	b087      	sub	sp, #28
2400f4b4:	af00      	add	r7, sp, #0
2400f4b6:	60f8      	str	r0, [r7, #12]
2400f4b8:	60b9      	str	r1, [r7, #8]
2400f4ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
2400f4bc:	2300      	movs	r3, #0
2400f4be:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f4c0:	68fb      	ldr	r3, [r7, #12]
2400f4c2:	2b00      	cmp	r3, #0
2400f4c4:	d101      	bne.n	2400f4ca <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
2400f4c6:	2301      	movs	r3, #1
2400f4c8:	e03e      	b.n	2400f548 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f4ca:	68fb      	ldr	r3, [r7, #12]
2400f4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f4d0:	2b01      	cmp	r3, #1
2400f4d2:	d101      	bne.n	2400f4d8 <HAL_MDMA_ConfigPostRequestMask+0x28>
2400f4d4:	2302      	movs	r3, #2
2400f4d6:	e037      	b.n	2400f548 <HAL_MDMA_ConfigPostRequestMask+0x98>
2400f4d8:	68fb      	ldr	r3, [r7, #12]
2400f4da:	2201      	movs	r2, #1
2400f4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f4e0:	68fb      	ldr	r3, [r7, #12]
2400f4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f4e6:	b2db      	uxtb	r3, r3
2400f4e8:	2b01      	cmp	r3, #1
2400f4ea:	d126      	bne.n	2400f53a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
2400f4ec:	68fb      	ldr	r3, [r7, #12]
2400f4ee:	681b      	ldr	r3, [r3, #0]
2400f4f0:	691b      	ldr	r3, [r3, #16]
2400f4f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2400f4f6:	2b00      	cmp	r3, #0
2400f4f8:	d11c      	bne.n	2400f534 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
2400f4fa:	68fb      	ldr	r3, [r7, #12]
2400f4fc:	681b      	ldr	r3, [r3, #0]
2400f4fe:	68ba      	ldr	r2, [r7, #8]
2400f500:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
2400f502:	68fb      	ldr	r3, [r7, #12]
2400f504:	681b      	ldr	r3, [r3, #0]
2400f506:	687a      	ldr	r2, [r7, #4]
2400f508:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
2400f50a:	68bb      	ldr	r3, [r7, #8]
2400f50c:	2b00      	cmp	r3, #0
2400f50e:	d108      	bne.n	2400f522 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
2400f510:	68fb      	ldr	r3, [r7, #12]
2400f512:	681b      	ldr	r3, [r3, #0]
2400f514:	691a      	ldr	r2, [r3, #16]
2400f516:	68fb      	ldr	r3, [r7, #12]
2400f518:	681b      	ldr	r3, [r3, #0]
2400f51a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2400f51e:	611a      	str	r2, [r3, #16]
2400f520:	e00d      	b.n	2400f53e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
2400f522:	68fb      	ldr	r3, [r7, #12]
2400f524:	681b      	ldr	r3, [r3, #0]
2400f526:	691a      	ldr	r2, [r3, #16]
2400f528:	68fb      	ldr	r3, [r7, #12]
2400f52a:	681b      	ldr	r3, [r3, #0]
2400f52c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
2400f530:	611a      	str	r2, [r3, #16]
2400f532:	e004      	b.n	2400f53e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
2400f534:	2301      	movs	r3, #1
2400f536:	75fb      	strb	r3, [r7, #23]
2400f538:	e001      	b.n	2400f53e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400f53a:	2301      	movs	r3, #1
2400f53c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f53e:	68fb      	ldr	r3, [r7, #12]
2400f540:	2200      	movs	r2, #0
2400f542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f546:	7dfb      	ldrb	r3, [r7, #23]
}
2400f548:	4618      	mov	r0, r3
2400f54a:	371c      	adds	r7, #28
2400f54c:	46bd      	mov	sp, r7
2400f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f552:	4770      	bx	lr

2400f554 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
2400f554:	b480      	push	{r7}
2400f556:	b087      	sub	sp, #28
2400f558:	af00      	add	r7, sp, #0
2400f55a:	60f8      	str	r0, [r7, #12]
2400f55c:	460b      	mov	r3, r1
2400f55e:	607a      	str	r2, [r7, #4]
2400f560:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2400f562:	2300      	movs	r3, #0
2400f564:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f566:	68fb      	ldr	r3, [r7, #12]
2400f568:	2b00      	cmp	r3, #0
2400f56a:	d101      	bne.n	2400f570 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2400f56c:	2301      	movs	r3, #1
2400f56e:	e044      	b.n	2400f5fa <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f570:	68fb      	ldr	r3, [r7, #12]
2400f572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f576:	2b01      	cmp	r3, #1
2400f578:	d101      	bne.n	2400f57e <HAL_MDMA_RegisterCallback+0x2a>
2400f57a:	2302      	movs	r3, #2
2400f57c:	e03d      	b.n	2400f5fa <HAL_MDMA_RegisterCallback+0xa6>
2400f57e:	68fb      	ldr	r3, [r7, #12]
2400f580:	2201      	movs	r2, #1
2400f582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f586:	68fb      	ldr	r3, [r7, #12]
2400f588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f58c:	b2db      	uxtb	r3, r3
2400f58e:	2b01      	cmp	r3, #1
2400f590:	d12a      	bne.n	2400f5e8 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
2400f592:	7afb      	ldrb	r3, [r7, #11]
2400f594:	2b05      	cmp	r3, #5
2400f596:	d82a      	bhi.n	2400f5ee <HAL_MDMA_RegisterCallback+0x9a>
2400f598:	a201      	add	r2, pc, #4	; (adr r2, 2400f5a0 <HAL_MDMA_RegisterCallback+0x4c>)
2400f59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400f59e:	bf00      	nop
2400f5a0:	2400f5b9 	.word	0x2400f5b9
2400f5a4:	2400f5c1 	.word	0x2400f5c1
2400f5a8:	2400f5c9 	.word	0x2400f5c9
2400f5ac:	2400f5d1 	.word	0x2400f5d1
2400f5b0:	2400f5d9 	.word	0x2400f5d9
2400f5b4:	2400f5e1 	.word	0x2400f5e1
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
2400f5b8:	68fb      	ldr	r3, [r7, #12]
2400f5ba:	687a      	ldr	r2, [r7, #4]
2400f5bc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400f5be:	e017      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
2400f5c0:	68fb      	ldr	r3, [r7, #12]
2400f5c2:	687a      	ldr	r2, [r7, #4]
2400f5c4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400f5c6:	e013      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
2400f5c8:	68fb      	ldr	r3, [r7, #12]
2400f5ca:	687a      	ldr	r2, [r7, #4]
2400f5cc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400f5ce:	e00f      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
2400f5d0:	68fb      	ldr	r3, [r7, #12]
2400f5d2:	687a      	ldr	r2, [r7, #4]
2400f5d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400f5d6:	e00b      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
2400f5d8:	68fb      	ldr	r3, [r7, #12]
2400f5da:	687a      	ldr	r2, [r7, #4]
2400f5dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400f5de:	e007      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
2400f5e0:	68fb      	ldr	r3, [r7, #12]
2400f5e2:	687a      	ldr	r2, [r7, #4]
2400f5e4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f5e6:	e003      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400f5e8:	2301      	movs	r3, #1
2400f5ea:	75fb      	strb	r3, [r7, #23]
2400f5ec:	e000      	b.n	2400f5f0 <HAL_MDMA_RegisterCallback+0x9c>
      break;
2400f5ee:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f5f0:	68fb      	ldr	r3, [r7, #12]
2400f5f2:	2200      	movs	r2, #0
2400f5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f5f8:	7dfb      	ldrb	r3, [r7, #23]
}
2400f5fa:	4618      	mov	r0, r3
2400f5fc:	371c      	adds	r7, #28
2400f5fe:	46bd      	mov	sp, r7
2400f600:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f604:	4770      	bx	lr
2400f606:	bf00      	nop

2400f608 <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
2400f608:	b480      	push	{r7}
2400f60a:	b085      	sub	sp, #20
2400f60c:	af00      	add	r7, sp, #0
2400f60e:	6078      	str	r0, [r7, #4]
2400f610:	460b      	mov	r3, r1
2400f612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
2400f614:	2300      	movs	r3, #0
2400f616:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f618:	687b      	ldr	r3, [r7, #4]
2400f61a:	2b00      	cmp	r3, #0
2400f61c:	d101      	bne.n	2400f622 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2400f61e:	2301      	movs	r3, #1
2400f620:	e059      	b.n	2400f6d6 <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f622:	687b      	ldr	r3, [r7, #4]
2400f624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f628:	2b01      	cmp	r3, #1
2400f62a:	d101      	bne.n	2400f630 <HAL_MDMA_UnRegisterCallback+0x28>
2400f62c:	2302      	movs	r3, #2
2400f62e:	e052      	b.n	2400f6d6 <HAL_MDMA_UnRegisterCallback+0xce>
2400f630:	687b      	ldr	r3, [r7, #4]
2400f632:	2201      	movs	r2, #1
2400f634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f638:	687b      	ldr	r3, [r7, #4]
2400f63a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f63e:	b2db      	uxtb	r3, r3
2400f640:	2b01      	cmp	r3, #1
2400f642:	d141      	bne.n	2400f6c8 <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
2400f644:	78fb      	ldrb	r3, [r7, #3]
2400f646:	2b06      	cmp	r3, #6
2400f648:	d83b      	bhi.n	2400f6c2 <HAL_MDMA_UnRegisterCallback+0xba>
2400f64a:	a201      	add	r2, pc, #4	; (adr r2, 2400f650 <HAL_MDMA_UnRegisterCallback+0x48>)
2400f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400f650:	2400f66d 	.word	0x2400f66d
2400f654:	2400f675 	.word	0x2400f675
2400f658:	2400f67d 	.word	0x2400f67d
2400f65c:	2400f685 	.word	0x2400f685
2400f660:	2400f68d 	.word	0x2400f68d
2400f664:	2400f695 	.word	0x2400f695
2400f668:	2400f69d 	.word	0x2400f69d
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400f66c:	687b      	ldr	r3, [r7, #4]
2400f66e:	2200      	movs	r2, #0
2400f670:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400f672:	e02b      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
2400f674:	687b      	ldr	r3, [r7, #4]
2400f676:	2200      	movs	r2, #0
2400f678:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400f67a:	e027      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
2400f67c:	687b      	ldr	r3, [r7, #4]
2400f67e:	2200      	movs	r2, #0
2400f680:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400f682:	e023      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400f684:	687b      	ldr	r3, [r7, #4]
2400f686:	2200      	movs	r2, #0
2400f688:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400f68a:	e01f      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
2400f68c:	687b      	ldr	r3, [r7, #4]
2400f68e:	2200      	movs	r2, #0
2400f690:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400f692:	e01b      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
2400f694:	687b      	ldr	r3, [r7, #4]
2400f696:	2200      	movs	r2, #0
2400f698:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f69a:	e017      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400f69c:	687b      	ldr	r3, [r7, #4]
2400f69e:	2200      	movs	r2, #0
2400f6a0:	645a      	str	r2, [r3, #68]	; 0x44
      hmdma->XferBufferCpltCallback = NULL;
2400f6a2:	687b      	ldr	r3, [r7, #4]
2400f6a4:	2200      	movs	r2, #0
2400f6a6:	649a      	str	r2, [r3, #72]	; 0x48
      hmdma->XferBlockCpltCallback = NULL;
2400f6a8:	687b      	ldr	r3, [r7, #4]
2400f6aa:	2200      	movs	r2, #0
2400f6ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400f6ae:	687b      	ldr	r3, [r7, #4]
2400f6b0:	2200      	movs	r2, #0
2400f6b2:	651a      	str	r2, [r3, #80]	; 0x50
      hmdma->XferErrorCallback = NULL;
2400f6b4:	687b      	ldr	r3, [r7, #4]
2400f6b6:	2200      	movs	r2, #0
2400f6b8:	655a      	str	r2, [r3, #84]	; 0x54
      hmdma->XferAbortCallback = NULL;
2400f6ba:	687b      	ldr	r3, [r7, #4]
2400f6bc:	2200      	movs	r2, #0
2400f6be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f6c0:	e004      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2400f6c2:	2301      	movs	r3, #1
2400f6c4:	73fb      	strb	r3, [r7, #15]
      break;
2400f6c6:	e001      	b.n	2400f6cc <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
2400f6c8:	2301      	movs	r3, #1
2400f6ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f6cc:	687b      	ldr	r3, [r7, #4]
2400f6ce:	2200      	movs	r2, #0
2400f6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f6d4:	7bfb      	ldrb	r3, [r7, #15]
}
2400f6d6:	4618      	mov	r0, r3
2400f6d8:	3714      	adds	r7, #20
2400f6da:	46bd      	mov	sp, r7
2400f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f6e0:	4770      	bx	lr
2400f6e2:	bf00      	nop

2400f6e4 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
2400f6e4:	b480      	push	{r7}
2400f6e6:	b085      	sub	sp, #20
2400f6e8:	af00      	add	r7, sp, #0
2400f6ea:	6078      	str	r0, [r7, #4]
2400f6ec:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
2400f6ee:	687b      	ldr	r3, [r7, #4]
2400f6f0:	2b00      	cmp	r3, #0
2400f6f2:	d002      	beq.n	2400f6fa <HAL_MDMA_LinkedList_CreateNode+0x16>
2400f6f4:	683b      	ldr	r3, [r7, #0]
2400f6f6:	2b00      	cmp	r3, #0
2400f6f8:	d101      	bne.n	2400f6fe <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
2400f6fa:	2301      	movs	r3, #1
2400f6fc:	e0c8      	b.n	2400f890 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
2400f6fe:	687b      	ldr	r3, [r7, #4]
2400f700:	2200      	movs	r2, #0
2400f702:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
2400f704:	687b      	ldr	r3, [r7, #4]
2400f706:	2200      	movs	r2, #0
2400f708:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
2400f70a:	687b      	ldr	r3, [r7, #4]
2400f70c:	2200      	movs	r2, #0
2400f70e:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
2400f710:	687b      	ldr	r3, [r7, #4]
2400f712:	2200      	movs	r2, #0
2400f714:	625a      	str	r2, [r3, #36]	; 0x24
  pNode->Reserved = 0;
2400f716:	687b      	ldr	r3, [r7, #4]
2400f718:	2200      	movs	r2, #0
2400f71a:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f71c:	683b      	ldr	r3, [r7, #0]
2400f71e:	691a      	ldr	r2, [r3, #16]
2400f720:	683b      	ldr	r3, [r7, #0]
2400f722:	695b      	ldr	r3, [r3, #20]
2400f724:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f726:	683b      	ldr	r3, [r7, #0]
2400f728:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f72a:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f72c:	683b      	ldr	r3, [r7, #0]
2400f72e:	69db      	ldr	r3, [r3, #28]
2400f730:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f732:	683b      	ldr	r3, [r7, #0]
2400f734:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f736:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f738:	683b      	ldr	r3, [r7, #0]
2400f73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400f73c:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
2400f73e:	683b      	ldr	r3, [r7, #0]
2400f740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f742:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400f744:	683b      	ldr	r3, [r7, #0]
2400f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400f748:	3b01      	subs	r3, #1
2400f74a:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
2400f74c:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
2400f74e:	683b      	ldr	r3, [r7, #0]
2400f750:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400f752:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f754:	687b      	ldr	r3, [r7, #4]
2400f756:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
2400f758:	683b      	ldr	r3, [r7, #0]
2400f75a:	681b      	ldr	r3, [r3, #0]
2400f75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f760:	d105      	bne.n	2400f76e <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
2400f762:	687b      	ldr	r3, [r7, #4]
2400f764:	681b      	ldr	r3, [r3, #0]
2400f766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
2400f76a:	687b      	ldr	r3, [r7, #4]
2400f76c:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
2400f76e:	683b      	ldr	r3, [r7, #0]
2400f770:	681b      	ldr	r3, [r3, #0]
2400f772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f776:	d003      	beq.n	2400f780 <HAL_MDMA_LinkedList_CreateNode+0x9c>
2400f778:	683b      	ldr	r3, [r7, #0]
2400f77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400f77c:	2b00      	cmp	r3, #0
2400f77e:	d005      	beq.n	2400f78c <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
2400f780:	687b      	ldr	r3, [r7, #4]
2400f782:	681b      	ldr	r3, [r3, #0]
2400f784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2400f788:	687b      	ldr	r3, [r7, #4]
2400f78a:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
2400f78c:	683b      	ldr	r3, [r7, #0]
2400f78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f790:	3b01      	subs	r3, #1
2400f792:	051a      	lsls	r2, r3, #20
2400f794:	687b      	ldr	r3, [r7, #4]
2400f796:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
2400f798:	683b      	ldr	r3, [r7, #0]
2400f79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f79c:	2b00      	cmp	r3, #0
2400f79e:	da0e      	bge.n	2400f7be <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
2400f7a0:	687b      	ldr	r3, [r7, #4]
2400f7a2:	685b      	ldr	r3, [r3, #4]
2400f7a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
2400f7a8:	687b      	ldr	r3, [r7, #4]
2400f7aa:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
2400f7ac:	683b      	ldr	r3, [r7, #0]
2400f7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f7b0:	425b      	negs	r3, r3
2400f7b2:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
2400f7b4:	68fb      	ldr	r3, [r7, #12]
2400f7b6:	b29a      	uxth	r2, r3
2400f7b8:	687b      	ldr	r3, [r7, #4]
2400f7ba:	611a      	str	r2, [r3, #16]
2400f7bc:	e004      	b.n	2400f7c8 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2400f7be:	683b      	ldr	r3, [r7, #0]
2400f7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f7c2:	b29a      	uxth	r2, r3
2400f7c4:	687b      	ldr	r3, [r7, #4]
2400f7c6:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
2400f7c8:	683b      	ldr	r3, [r7, #0]
2400f7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f7cc:	2b00      	cmp	r3, #0
2400f7ce:	da11      	bge.n	2400f7f4 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
2400f7d0:	687b      	ldr	r3, [r7, #4]
2400f7d2:	685b      	ldr	r3, [r3, #4]
2400f7d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
2400f7d8:	687b      	ldr	r3, [r7, #4]
2400f7da:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
2400f7dc:	683b      	ldr	r3, [r7, #0]
2400f7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f7e0:	425b      	negs	r3, r3
2400f7e2:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2400f7e4:	687b      	ldr	r3, [r7, #4]
2400f7e6:	691a      	ldr	r2, [r3, #16]
2400f7e8:	68fb      	ldr	r3, [r7, #12]
2400f7ea:	041b      	lsls	r3, r3, #16
2400f7ec:	431a      	orrs	r2, r3
2400f7ee:	687b      	ldr	r3, [r7, #4]
2400f7f0:	611a      	str	r2, [r3, #16]
2400f7f2:	e007      	b.n	2400f804 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2400f7f4:	687b      	ldr	r3, [r7, #4]
2400f7f6:	691a      	ldr	r2, [r3, #16]
2400f7f8:	683b      	ldr	r3, [r7, #0]
2400f7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f7fc:	041b      	lsls	r3, r3, #16
2400f7fe:	431a      	orrs	r2, r3
2400f800:	687b      	ldr	r3, [r7, #4]
2400f802:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
2400f804:	687b      	ldr	r3, [r7, #4]
2400f806:	685a      	ldr	r2, [r3, #4]
2400f808:	683b      	ldr	r3, [r7, #0]
2400f80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400f80c:	431a      	orrs	r2, r3
2400f80e:	687b      	ldr	r3, [r7, #4]
2400f810:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
2400f812:	683b      	ldr	r3, [r7, #0]
2400f814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400f816:	687b      	ldr	r3, [r7, #4]
2400f818:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
2400f81a:	683b      	ldr	r3, [r7, #0]
2400f81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400f81e:	687b      	ldr	r3, [r7, #4]
2400f820:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
2400f822:	683b      	ldr	r3, [r7, #0]
2400f824:	681b      	ldr	r3, [r3, #0]
2400f826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f82a:	d00c      	beq.n	2400f846 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
2400f82c:	683b      	ldr	r3, [r7, #0]
2400f82e:	681b      	ldr	r3, [r3, #0]
2400f830:	b2da      	uxtb	r2, r3
2400f832:	687b      	ldr	r3, [r7, #4]
2400f834:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
2400f836:	683b      	ldr	r3, [r7, #0]
2400f838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400f83a:	687b      	ldr	r3, [r7, #4]
2400f83c:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
2400f83e:	683b      	ldr	r3, [r7, #0]
2400f840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400f842:	687b      	ldr	r3, [r7, #4]
2400f844:	625a      	str	r2, [r3, #36]	; 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
2400f846:	683b      	ldr	r3, [r7, #0]
2400f848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f84a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2400f84e:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2400f850:	68bb      	ldr	r3, [r7, #8]
2400f852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400f856:	d002      	beq.n	2400f85e <HAL_MDMA_LinkedList_CreateNode+0x17a>
2400f858:	68bb      	ldr	r3, [r7, #8]
2400f85a:	2b00      	cmp	r3, #0
2400f85c:	d105      	bne.n	2400f86a <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
2400f85e:	687b      	ldr	r3, [r7, #4]
2400f860:	699b      	ldr	r3, [r3, #24]
2400f862:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2400f866:	687b      	ldr	r3, [r7, #4]
2400f868:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
2400f86a:	683b      	ldr	r3, [r7, #0]
2400f86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f86e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2400f872:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2400f874:	68bb      	ldr	r3, [r7, #8]
2400f876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400f87a:	d002      	beq.n	2400f882 <HAL_MDMA_LinkedList_CreateNode+0x19e>
2400f87c:	68bb      	ldr	r3, [r7, #8]
2400f87e:	2b00      	cmp	r3, #0
2400f880:	d105      	bne.n	2400f88e <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
2400f882:	687b      	ldr	r3, [r7, #4]
2400f884:	699b      	ldr	r3, [r3, #24]
2400f886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
2400f88a:	687b      	ldr	r3, [r7, #4]
2400f88c:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
2400f88e:	2300      	movs	r3, #0
}
2400f890:	4618      	mov	r0, r3
2400f892:	3714      	adds	r7, #20
2400f894:	46bd      	mov	sp, r7
2400f896:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f89a:	4770      	bx	lr

2400f89c <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
2400f89c:	b480      	push	{r7}
2400f89e:	b089      	sub	sp, #36	; 0x24
2400f8a0:	af00      	add	r7, sp, #0
2400f8a2:	60f8      	str	r0, [r7, #12]
2400f8a4:	60b9      	str	r1, [r7, #8]
2400f8a6:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
2400f8a8:	2300      	movs	r3, #0
2400f8aa:	61bb      	str	r3, [r7, #24]
2400f8ac:	2300      	movs	r3, #0
2400f8ae:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400f8b0:	2300      	movs	r3, #0
2400f8b2:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
2400f8b4:	68fb      	ldr	r3, [r7, #12]
2400f8b6:	2b00      	cmp	r3, #0
2400f8b8:	d002      	beq.n	2400f8c0 <HAL_MDMA_LinkedList_AddNode+0x24>
2400f8ba:	68bb      	ldr	r3, [r7, #8]
2400f8bc:	2b00      	cmp	r3, #0
2400f8be:	d101      	bne.n	2400f8c4 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
2400f8c0:	2301      	movs	r3, #1
2400f8c2:	e0a9      	b.n	2400fa18 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f8c4:	68fb      	ldr	r3, [r7, #12]
2400f8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f8ca:	2b01      	cmp	r3, #1
2400f8cc:	d101      	bne.n	2400f8d2 <HAL_MDMA_LinkedList_AddNode+0x36>
2400f8ce:	2302      	movs	r3, #2
2400f8d0:	e0a2      	b.n	2400fa18 <HAL_MDMA_LinkedList_AddNode+0x17c>
2400f8d2:	68fb      	ldr	r3, [r7, #12]
2400f8d4:	2201      	movs	r2, #1
2400f8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f8da:	68fb      	ldr	r3, [r7, #12]
2400f8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f8e0:	b2db      	uxtb	r3, r3
2400f8e2:	2b01      	cmp	r3, #1
2400f8e4:	f040 8093 	bne.w	2400fa0e <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400f8e8:	68fb      	ldr	r3, [r7, #12]
2400f8ea:	2202      	movs	r2, #2
2400f8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
2400f8f0:	68fb      	ldr	r3, [r7, #12]
2400f8f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f8f4:	2b00      	cmp	r3, #0
2400f8f6:	d116      	bne.n	2400f926 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
2400f8f8:	687b      	ldr	r3, [r7, #4]
2400f8fa:	2b00      	cmp	r3, #0
2400f8fc:	d110      	bne.n	2400f920 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
2400f8fe:	68fb      	ldr	r3, [r7, #12]
2400f900:	681b      	ldr	r3, [r3, #0]
2400f902:	68ba      	ldr	r2, [r7, #8]
2400f904:	625a      	str	r2, [r3, #36]	; 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
2400f906:	68fb      	ldr	r3, [r7, #12]
2400f908:	68ba      	ldr	r2, [r7, #8]
2400f90a:	65da      	str	r2, [r3, #92]	; 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
2400f90c:	68bb      	ldr	r3, [r7, #8]
2400f90e:	2200      	movs	r2, #0
2400f910:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
2400f912:	68fb      	ldr	r3, [r7, #12]
2400f914:	68ba      	ldr	r2, [r7, #8]
2400f916:	661a      	str	r2, [r3, #96]	; 0x60

        hmdma->LinkedListNodeCounter = 1;
2400f918:	68fb      	ldr	r3, [r7, #12]
2400f91a:	2201      	movs	r2, #1
2400f91c:	665a      	str	r2, [r3, #100]	; 0x64
2400f91e:	e06c      	b.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
2400f920:	2301      	movs	r3, #1
2400f922:	74fb      	strb	r3, [r7, #19]
2400f924:	e069      	b.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
2400f926:	68fb      	ldr	r3, [r7, #12]
2400f928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f92a:	68ba      	ldr	r2, [r7, #8]
2400f92c:	429a      	cmp	r2, r3
2400f92e:	d062      	beq.n	2400f9f6 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
2400f930:	68fb      	ldr	r3, [r7, #12]
2400f932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f934:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
2400f936:	e00c      	b.n	2400f952 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
2400f938:	69fb      	ldr	r3, [r7, #28]
2400f93a:	695a      	ldr	r2, [r3, #20]
2400f93c:	68bb      	ldr	r3, [r7, #8]
2400f93e:	429a      	cmp	r2, r3
2400f940:	d101      	bne.n	2400f946 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
2400f942:	2301      	movs	r3, #1
2400f944:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
2400f946:	69fb      	ldr	r3, [r7, #28]
2400f948:	695b      	ldr	r3, [r3, #20]
2400f94a:	61fb      	str	r3, [r7, #28]
        counter++;
2400f94c:	69bb      	ldr	r3, [r7, #24]
2400f94e:	3301      	adds	r3, #1
2400f950:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
2400f952:	68fb      	ldr	r3, [r7, #12]
2400f954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400f956:	69ba      	ldr	r2, [r7, #24]
2400f958:	429a      	cmp	r2, r3
2400f95a:	d202      	bcs.n	2400f962 <HAL_MDMA_LinkedList_AddNode+0xc6>
2400f95c:	7cfb      	ldrb	r3, [r7, #19]
2400f95e:	2b00      	cmp	r3, #0
2400f960:	d0ea      	beq.n	2400f938 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
2400f962:	7cfb      	ldrb	r3, [r7, #19]
2400f964:	2b00      	cmp	r3, #0
2400f966:	d148      	bne.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
2400f968:	68fb      	ldr	r3, [r7, #12]
2400f96a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400f96c:	687a      	ldr	r2, [r7, #4]
2400f96e:	429a      	cmp	r2, r3
2400f970:	d002      	beq.n	2400f978 <HAL_MDMA_LinkedList_AddNode+0xdc>
2400f972:	687b      	ldr	r3, [r7, #4]
2400f974:	2b00      	cmp	r3, #0
2400f976:	d111      	bne.n	2400f99c <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
2400f978:	68fb      	ldr	r3, [r7, #12]
2400f97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400f97c:	695a      	ldr	r2, [r3, #20]
2400f97e:	68bb      	ldr	r3, [r7, #8]
2400f980:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
2400f982:	68fb      	ldr	r3, [r7, #12]
2400f984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400f986:	68ba      	ldr	r2, [r7, #8]
2400f988:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
2400f98a:	68fb      	ldr	r3, [r7, #12]
2400f98c:	68ba      	ldr	r2, [r7, #8]
2400f98e:	661a      	str	r2, [r3, #96]	; 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
2400f990:	68fb      	ldr	r3, [r7, #12]
2400f992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400f994:	1c5a      	adds	r2, r3, #1
2400f996:	68fb      	ldr	r3, [r7, #12]
2400f998:	665a      	str	r2, [r3, #100]	; 0x64
2400f99a:	e02e      	b.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
2400f99c:	68fb      	ldr	r3, [r7, #12]
2400f99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f9a0:	61fb      	str	r3, [r7, #28]
          counter = 0;
2400f9a2:	2300      	movs	r3, #0
2400f9a4:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2400f9a6:	e018      	b.n	2400f9da <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
2400f9a8:	69bb      	ldr	r3, [r7, #24]
2400f9aa:	3301      	adds	r3, #1
2400f9ac:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
2400f9ae:	69fa      	ldr	r2, [r7, #28]
2400f9b0:	687b      	ldr	r3, [r7, #4]
2400f9b2:	429a      	cmp	r2, r3
2400f9b4:	d10e      	bne.n	2400f9d4 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
2400f9b6:	69fb      	ldr	r3, [r7, #28]
2400f9b8:	695a      	ldr	r2, [r3, #20]
2400f9ba:	68bb      	ldr	r3, [r7, #8]
2400f9bc:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
2400f9be:	68ba      	ldr	r2, [r7, #8]
2400f9c0:	69fb      	ldr	r3, [r7, #28]
2400f9c2:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
2400f9c4:	68fb      	ldr	r3, [r7, #12]
2400f9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400f9c8:	1c5a      	adds	r2, r3, #1
2400f9ca:	68fb      	ldr	r3, [r7, #12]
2400f9cc:	665a      	str	r2, [r3, #100]	; 0x64
              nodeInserted = 1;
2400f9ce:	2301      	movs	r3, #1
2400f9d0:	617b      	str	r3, [r7, #20]
2400f9d2:	e002      	b.n	2400f9da <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
2400f9d4:	69fb      	ldr	r3, [r7, #28]
2400f9d6:	695b      	ldr	r3, [r3, #20]
2400f9d8:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2400f9da:	68fb      	ldr	r3, [r7, #12]
2400f9dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400f9de:	69ba      	ldr	r2, [r7, #24]
2400f9e0:	429a      	cmp	r2, r3
2400f9e2:	d202      	bcs.n	2400f9ea <HAL_MDMA_LinkedList_AddNode+0x14e>
2400f9e4:	697b      	ldr	r3, [r7, #20]
2400f9e6:	2b00      	cmp	r3, #0
2400f9e8:	d0de      	beq.n	2400f9a8 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
2400f9ea:	697b      	ldr	r3, [r7, #20]
2400f9ec:	2b00      	cmp	r3, #0
2400f9ee:	d104      	bne.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
2400f9f0:	2301      	movs	r3, #1
2400f9f2:	74fb      	strb	r3, [r7, #19]
2400f9f4:	e001      	b.n	2400f9fa <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
2400f9f6:	2301      	movs	r3, #1
2400f9f8:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400f9fa:	68fb      	ldr	r3, [r7, #12]
2400f9fc:	2200      	movs	r2, #0
2400f9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2400fa02:	68fb      	ldr	r3, [r7, #12]
2400fa04:	2201      	movs	r2, #1
2400fa06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2400fa0a:	7cfb      	ldrb	r3, [r7, #19]
2400fa0c:	e004      	b.n	2400fa18 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fa0e:	68fb      	ldr	r3, [r7, #12]
2400fa10:	2200      	movs	r2, #0
2400fa12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fa16:	2302      	movs	r3, #2
  }
}
2400fa18:	4618      	mov	r0, r3
2400fa1a:	3724      	adds	r7, #36	; 0x24
2400fa1c:	46bd      	mov	sp, r7
2400fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fa22:	4770      	bx	lr

2400fa24 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
2400fa24:	b480      	push	{r7}
2400fa26:	b087      	sub	sp, #28
2400fa28:	af00      	add	r7, sp, #0
2400fa2a:	6078      	str	r0, [r7, #4]
2400fa2c:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
2400fa2e:	2300      	movs	r3, #0
2400fa30:	613b      	str	r3, [r7, #16]
2400fa32:	2300      	movs	r3, #0
2400fa34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fa36:	2300      	movs	r3, #0
2400fa38:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
2400fa3a:	687b      	ldr	r3, [r7, #4]
2400fa3c:	2b00      	cmp	r3, #0
2400fa3e:	d002      	beq.n	2400fa46 <HAL_MDMA_LinkedList_RemoveNode+0x22>
2400fa40:	683b      	ldr	r3, [r7, #0]
2400fa42:	2b00      	cmp	r3, #0
2400fa44:	d101      	bne.n	2400fa4a <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
2400fa46:	2301      	movs	r3, #1
2400fa48:	e099      	b.n	2400fb7e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fa4a:	687b      	ldr	r3, [r7, #4]
2400fa4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fa50:	2b01      	cmp	r3, #1
2400fa52:	d101      	bne.n	2400fa58 <HAL_MDMA_LinkedList_RemoveNode+0x34>
2400fa54:	2302      	movs	r3, #2
2400fa56:	e092      	b.n	2400fb7e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
2400fa58:	687b      	ldr	r3, [r7, #4]
2400fa5a:	2201      	movs	r2, #1
2400fa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fa60:	687b      	ldr	r3, [r7, #4]
2400fa62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fa66:	b2db      	uxtb	r3, r3
2400fa68:	2b01      	cmp	r3, #1
2400fa6a:	f040 8083 	bne.w	2400fb74 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fa6e:	687b      	ldr	r3, [r7, #4]
2400fa70:	2202      	movs	r2, #2
2400fa72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fa76:	687b      	ldr	r3, [r7, #4]
2400fa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fa7a:	2b00      	cmp	r3, #0
2400fa7c:	d007      	beq.n	2400fa8e <HAL_MDMA_LinkedList_RemoveNode+0x6a>
2400fa7e:	687b      	ldr	r3, [r7, #4]
2400fa80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fa82:	2b00      	cmp	r3, #0
2400fa84:	d003      	beq.n	2400fa8e <HAL_MDMA_LinkedList_RemoveNode+0x6a>
2400fa86:	687b      	ldr	r3, [r7, #4]
2400fa88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fa8a:	2b00      	cmp	r3, #0
2400fa8c:	d102      	bne.n	2400fa94 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
2400fa8e:	2301      	movs	r3, #1
2400fa90:	72fb      	strb	r3, [r7, #11]
2400fa92:	e065      	b.n	2400fb60 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
2400fa94:	687b      	ldr	r3, [r7, #4]
2400fa96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fa98:	683a      	ldr	r2, [r7, #0]
2400fa9a:	429a      	cmp	r2, r3
2400fa9c:	d130      	bne.n	2400fb00 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
2400fa9e:	687b      	ldr	r3, [r7, #4]
2400faa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400faa2:	683a      	ldr	r2, [r7, #0]
2400faa4:	429a      	cmp	r2, r3
2400faa6:	d10d      	bne.n	2400fac4 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
2400faa8:	687b      	ldr	r3, [r7, #4]
2400faaa:	2200      	movs	r2, #0
2400faac:	65da      	str	r2, [r3, #92]	; 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
2400faae:	687b      	ldr	r3, [r7, #4]
2400fab0:	2200      	movs	r2, #0
2400fab2:	661a      	str	r2, [r3, #96]	; 0x60
        hmdma->LinkedListNodeCounter = 0;
2400fab4:	687b      	ldr	r3, [r7, #4]
2400fab6:	2200      	movs	r2, #0
2400fab8:	665a      	str	r2, [r3, #100]	; 0x64

        hmdma->Instance->CLAR = 0;
2400faba:	687b      	ldr	r3, [r7, #4]
2400fabc:	681b      	ldr	r3, [r3, #0]
2400fabe:	2200      	movs	r2, #0
2400fac0:	625a      	str	r2, [r3, #36]	; 0x24
2400fac2:	e04d      	b.n	2400fb60 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
2400fac4:	687b      	ldr	r3, [r7, #4]
2400fac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fac8:	461a      	mov	r2, r3
2400faca:	687b      	ldr	r3, [r7, #4]
2400facc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400face:	695b      	ldr	r3, [r3, #20]
2400fad0:	429a      	cmp	r2, r3
2400fad2:	d104      	bne.n	2400fade <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
2400fad4:	687b      	ldr	r3, [r7, #4]
2400fad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fad8:	683a      	ldr	r2, [r7, #0]
2400fada:	6952      	ldr	r2, [r2, #20]
2400fadc:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
2400fade:	687b      	ldr	r3, [r7, #4]
2400fae0:	681b      	ldr	r3, [r3, #0]
2400fae2:	683a      	ldr	r2, [r7, #0]
2400fae4:	6952      	ldr	r2, [r2, #20]
2400fae6:	625a      	str	r2, [r3, #36]	; 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
2400fae8:	687b      	ldr	r3, [r7, #4]
2400faea:	681b      	ldr	r3, [r3, #0]
2400faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400faee:	461a      	mov	r2, r3
2400faf0:	687b      	ldr	r3, [r7, #4]
2400faf2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
2400faf4:	687b      	ldr	r3, [r7, #4]
2400faf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400faf8:	1e5a      	subs	r2, r3, #1
2400fafa:	687b      	ldr	r3, [r7, #4]
2400fafc:	665a      	str	r2, [r3, #100]	; 0x64
2400fafe:	e02f      	b.n	2400fb60 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
2400fb00:	687b      	ldr	r3, [r7, #4]
2400fb02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fb04:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2400fb06:	e01e      	b.n	2400fb46 <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
2400fb08:	693b      	ldr	r3, [r7, #16]
2400fb0a:	3301      	adds	r3, #1
2400fb0c:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
2400fb0e:	697b      	ldr	r3, [r7, #20]
2400fb10:	695a      	ldr	r2, [r3, #20]
2400fb12:	683b      	ldr	r3, [r7, #0]
2400fb14:	429a      	cmp	r2, r3
2400fb16:	d113      	bne.n	2400fb40 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
2400fb18:	687b      	ldr	r3, [r7, #4]
2400fb1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fb1c:	683a      	ldr	r2, [r7, #0]
2400fb1e:	429a      	cmp	r2, r3
2400fb20:	d102      	bne.n	2400fb28 <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
2400fb22:	687b      	ldr	r3, [r7, #4]
2400fb24:	697a      	ldr	r2, [r7, #20]
2400fb26:	661a      	str	r2, [r3, #96]	; 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
2400fb28:	683b      	ldr	r3, [r7, #0]
2400fb2a:	695a      	ldr	r2, [r3, #20]
2400fb2c:	697b      	ldr	r3, [r7, #20]
2400fb2e:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
2400fb30:	2301      	movs	r3, #1
2400fb32:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
2400fb34:	687b      	ldr	r3, [r7, #4]
2400fb36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fb38:	1e5a      	subs	r2, r3, #1
2400fb3a:	687b      	ldr	r3, [r7, #4]
2400fb3c:	665a      	str	r2, [r3, #100]	; 0x64
2400fb3e:	e002      	b.n	2400fb46 <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
2400fb40:	697b      	ldr	r3, [r7, #20]
2400fb42:	695b      	ldr	r3, [r3, #20]
2400fb44:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2400fb46:	687b      	ldr	r3, [r7, #4]
2400fb48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fb4a:	693a      	ldr	r2, [r7, #16]
2400fb4c:	429a      	cmp	r2, r3
2400fb4e:	d202      	bcs.n	2400fb56 <HAL_MDMA_LinkedList_RemoveNode+0x132>
2400fb50:	68fb      	ldr	r3, [r7, #12]
2400fb52:	2b00      	cmp	r3, #0
2400fb54:	d0d8      	beq.n	2400fb08 <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
2400fb56:	68fb      	ldr	r3, [r7, #12]
2400fb58:	2b00      	cmp	r3, #0
2400fb5a:	d101      	bne.n	2400fb60 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
2400fb5c:	2301      	movs	r3, #1
2400fb5e:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fb60:	687b      	ldr	r3, [r7, #4]
2400fb62:	2200      	movs	r2, #0
2400fb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2400fb68:	687b      	ldr	r3, [r7, #4]
2400fb6a:	2201      	movs	r2, #1
2400fb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2400fb70:	7afb      	ldrb	r3, [r7, #11]
2400fb72:	e004      	b.n	2400fb7e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fb74:	687b      	ldr	r3, [r7, #4]
2400fb76:	2200      	movs	r2, #0
2400fb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fb7c:	2302      	movs	r3, #2
  }
}
2400fb7e:	4618      	mov	r0, r3
2400fb80:	371c      	adds	r7, #28
2400fb82:	46bd      	mov	sp, r7
2400fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fb88:	4770      	bx	lr

2400fb8a <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2400fb8a:	b480      	push	{r7}
2400fb8c:	b085      	sub	sp, #20
2400fb8e:	af00      	add	r7, sp, #0
2400fb90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fb92:	2300      	movs	r3, #0
2400fb94:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fb96:	687b      	ldr	r3, [r7, #4]
2400fb98:	2b00      	cmp	r3, #0
2400fb9a:	d101      	bne.n	2400fba0 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
2400fb9c:	2301      	movs	r3, #1
2400fb9e:	e031      	b.n	2400fc04 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fba0:	687b      	ldr	r3, [r7, #4]
2400fba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fba6:	2b01      	cmp	r3, #1
2400fba8:	d101      	bne.n	2400fbae <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
2400fbaa:	2302      	movs	r3, #2
2400fbac:	e02a      	b.n	2400fc04 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
2400fbae:	687b      	ldr	r3, [r7, #4]
2400fbb0:	2201      	movs	r2, #1
2400fbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fbb6:	687b      	ldr	r3, [r7, #4]
2400fbb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fbbc:	b2db      	uxtb	r3, r3
2400fbbe:	2b01      	cmp	r3, #1
2400fbc0:	d117      	bne.n	2400fbf2 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fbc2:	687b      	ldr	r3, [r7, #4]
2400fbc4:	2202      	movs	r2, #2
2400fbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fbca:	687b      	ldr	r3, [r7, #4]
2400fbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fbce:	2b00      	cmp	r3, #0
2400fbd0:	d007      	beq.n	2400fbe2 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2400fbd2:	687b      	ldr	r3, [r7, #4]
2400fbd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fbd6:	2b00      	cmp	r3, #0
2400fbd8:	d003      	beq.n	2400fbe2 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2400fbda:	687b      	ldr	r3, [r7, #4]
2400fbdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fbde:	2b00      	cmp	r3, #0
2400fbe0:	d102      	bne.n	2400fbe8 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2400fbe2:	2301      	movs	r3, #1
2400fbe4:	73fb      	strb	r3, [r7, #15]
2400fbe6:	e004      	b.n	2400fbf2 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
2400fbe8:	687b      	ldr	r3, [r7, #4]
2400fbea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2400fbec:	687b      	ldr	r3, [r7, #4]
2400fbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fbf0:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2400fbf2:	687b      	ldr	r3, [r7, #4]
2400fbf4:	2200      	movs	r2, #0
2400fbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2400fbfa:	687b      	ldr	r3, [r7, #4]
2400fbfc:	2201      	movs	r2, #1
2400fbfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2400fc02:	7bfb      	ldrb	r3, [r7, #15]
}
2400fc04:	4618      	mov	r0, r3
2400fc06:	3714      	adds	r7, #20
2400fc08:	46bd      	mov	sp, r7
2400fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fc0e:	4770      	bx	lr

2400fc10 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2400fc10:	b480      	push	{r7}
2400fc12:	b085      	sub	sp, #20
2400fc14:	af00      	add	r7, sp, #0
2400fc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fc18:	2300      	movs	r3, #0
2400fc1a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fc1c:	687b      	ldr	r3, [r7, #4]
2400fc1e:	2b00      	cmp	r3, #0
2400fc20:	d101      	bne.n	2400fc26 <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
2400fc22:	2301      	movs	r3, #1
2400fc24:	e030      	b.n	2400fc88 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fc26:	687b      	ldr	r3, [r7, #4]
2400fc28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fc2c:	2b01      	cmp	r3, #1
2400fc2e:	d101      	bne.n	2400fc34 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
2400fc30:	2302      	movs	r3, #2
2400fc32:	e029      	b.n	2400fc88 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
2400fc34:	687b      	ldr	r3, [r7, #4]
2400fc36:	2201      	movs	r2, #1
2400fc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fc3c:	687b      	ldr	r3, [r7, #4]
2400fc3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fc42:	b2db      	uxtb	r3, r3
2400fc44:	2b01      	cmp	r3, #1
2400fc46:	d116      	bne.n	2400fc76 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fc48:	687b      	ldr	r3, [r7, #4]
2400fc4a:	2202      	movs	r2, #2
2400fc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fc50:	687b      	ldr	r3, [r7, #4]
2400fc52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fc54:	2b00      	cmp	r3, #0
2400fc56:	d007      	beq.n	2400fc68 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
2400fc58:	687b      	ldr	r3, [r7, #4]
2400fc5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fc5c:	2b00      	cmp	r3, #0
2400fc5e:	d003      	beq.n	2400fc68 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
2400fc60:	687b      	ldr	r3, [r7, #4]
2400fc62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fc64:	2b00      	cmp	r3, #0
2400fc66:	d102      	bne.n	2400fc6e <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2400fc68:	2301      	movs	r3, #1
2400fc6a:	73fb      	strb	r3, [r7, #15]
2400fc6c:	e003      	b.n	2400fc76 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
2400fc6e:	687b      	ldr	r3, [r7, #4]
2400fc70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fc72:	2200      	movs	r2, #0
2400fc74:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2400fc76:	687b      	ldr	r3, [r7, #4]
2400fc78:	2200      	movs	r2, #0
2400fc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2400fc7e:	687b      	ldr	r3, [r7, #4]
2400fc80:	2201      	movs	r2, #1
2400fc82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2400fc86:	7bfb      	ldrb	r3, [r7, #15]
}
2400fc88:	4618      	mov	r0, r3
2400fc8a:	3714      	adds	r7, #20
2400fc8c:	46bd      	mov	sp, r7
2400fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fc92:	4770      	bx	lr

2400fc94 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2400fc94:	b580      	push	{r7, lr}
2400fc96:	b086      	sub	sp, #24
2400fc98:	af02      	add	r7, sp, #8
2400fc9a:	60f8      	str	r0, [r7, #12]
2400fc9c:	60b9      	str	r1, [r7, #8]
2400fc9e:	607a      	str	r2, [r7, #4]
2400fca0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fca2:	68fb      	ldr	r3, [r7, #12]
2400fca4:	2b00      	cmp	r3, #0
2400fca6:	d101      	bne.n	2400fcac <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
2400fca8:	2301      	movs	r3, #1
2400fcaa:	e044      	b.n	2400fd36 <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fcac:	68fb      	ldr	r3, [r7, #12]
2400fcae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fcb2:	2b01      	cmp	r3, #1
2400fcb4:	d101      	bne.n	2400fcba <HAL_MDMA_Start+0x26>
2400fcb6:	2302      	movs	r3, #2
2400fcb8:	e03d      	b.n	2400fd36 <HAL_MDMA_Start+0xa2>
2400fcba:	68fb      	ldr	r3, [r7, #12]
2400fcbc:	2201      	movs	r2, #1
2400fcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fcc2:	68fb      	ldr	r3, [r7, #12]
2400fcc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fcc8:	b2db      	uxtb	r3, r3
2400fcca:	2b01      	cmp	r3, #1
2400fccc:	d12c      	bne.n	2400fd28 <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fcce:	68fb      	ldr	r3, [r7, #12]
2400fcd0:	2202      	movs	r2, #2
2400fcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fcd6:	68fb      	ldr	r3, [r7, #12]
2400fcd8:	2200      	movs	r2, #0
2400fcda:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2400fcdc:	68fb      	ldr	r3, [r7, #12]
2400fcde:	681b      	ldr	r3, [r3, #0]
2400fce0:	68da      	ldr	r2, [r3, #12]
2400fce2:	68fb      	ldr	r3, [r7, #12]
2400fce4:	681b      	ldr	r3, [r3, #0]
2400fce6:	f022 0201 	bic.w	r2, r2, #1
2400fcea:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2400fcec:	69bb      	ldr	r3, [r7, #24]
2400fcee:	9300      	str	r3, [sp, #0]
2400fcf0:	683b      	ldr	r3, [r7, #0]
2400fcf2:	687a      	ldr	r2, [r7, #4]
2400fcf4:	68b9      	ldr	r1, [r7, #8]
2400fcf6:	68f8      	ldr	r0, [r7, #12]
2400fcf8:	f000 fb96 	bl	24010428 <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2400fcfc:	68fb      	ldr	r3, [r7, #12]
2400fcfe:	681b      	ldr	r3, [r3, #0]
2400fd00:	68da      	ldr	r2, [r3, #12]
2400fd02:	68fb      	ldr	r3, [r7, #12]
2400fd04:	681b      	ldr	r3, [r3, #0]
2400fd06:	f042 0201 	orr.w	r2, r2, #1
2400fd0a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2400fd0c:	68fb      	ldr	r3, [r7, #12]
2400fd0e:	685b      	ldr	r3, [r3, #4]
2400fd10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400fd14:	d10e      	bne.n	2400fd34 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2400fd16:	68fb      	ldr	r3, [r7, #12]
2400fd18:	681b      	ldr	r3, [r3, #0]
2400fd1a:	68da      	ldr	r2, [r3, #12]
2400fd1c:	68fb      	ldr	r3, [r7, #12]
2400fd1e:	681b      	ldr	r3, [r3, #0]
2400fd20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400fd24:	60da      	str	r2, [r3, #12]
2400fd26:	e005      	b.n	2400fd34 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fd28:	68fb      	ldr	r3, [r7, #12]
2400fd2a:	2200      	movs	r2, #0
2400fd2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fd30:	2302      	movs	r3, #2
2400fd32:	e000      	b.n	2400fd36 <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
2400fd34:	2300      	movs	r3, #0
}
2400fd36:	4618      	mov	r0, r3
2400fd38:	3710      	adds	r7, #16
2400fd3a:	46bd      	mov	sp, r7
2400fd3c:	bd80      	pop	{r7, pc}

2400fd3e <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2400fd3e:	b580      	push	{r7, lr}
2400fd40:	b086      	sub	sp, #24
2400fd42:	af02      	add	r7, sp, #8
2400fd44:	60f8      	str	r0, [r7, #12]
2400fd46:	60b9      	str	r1, [r7, #8]
2400fd48:	607a      	str	r2, [r7, #4]
2400fd4a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fd4c:	68fb      	ldr	r3, [r7, #12]
2400fd4e:	2b00      	cmp	r3, #0
2400fd50:	d101      	bne.n	2400fd56 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
2400fd52:	2301      	movs	r3, #1
2400fd54:	e070      	b.n	2400fe38 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fd56:	68fb      	ldr	r3, [r7, #12]
2400fd58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fd5c:	2b01      	cmp	r3, #1
2400fd5e:	d101      	bne.n	2400fd64 <HAL_MDMA_Start_IT+0x26>
2400fd60:	2302      	movs	r3, #2
2400fd62:	e069      	b.n	2400fe38 <HAL_MDMA_Start_IT+0xfa>
2400fd64:	68fb      	ldr	r3, [r7, #12]
2400fd66:	2201      	movs	r2, #1
2400fd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fd6c:	68fb      	ldr	r3, [r7, #12]
2400fd6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fd72:	b2db      	uxtb	r3, r3
2400fd74:	2b01      	cmp	r3, #1
2400fd76:	d158      	bne.n	2400fe2a <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fd78:	68fb      	ldr	r3, [r7, #12]
2400fd7a:	2202      	movs	r2, #2
2400fd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fd80:	68fb      	ldr	r3, [r7, #12]
2400fd82:	2200      	movs	r2, #0
2400fd84:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2400fd86:	68fb      	ldr	r3, [r7, #12]
2400fd88:	681b      	ldr	r3, [r3, #0]
2400fd8a:	68da      	ldr	r2, [r3, #12]
2400fd8c:	68fb      	ldr	r3, [r7, #12]
2400fd8e:	681b      	ldr	r3, [r3, #0]
2400fd90:	f022 0201 	bic.w	r2, r2, #1
2400fd94:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2400fd96:	69bb      	ldr	r3, [r7, #24]
2400fd98:	9300      	str	r3, [sp, #0]
2400fd9a:	683b      	ldr	r3, [r7, #0]
2400fd9c:	687a      	ldr	r2, [r7, #4]
2400fd9e:	68b9      	ldr	r1, [r7, #8]
2400fda0:	68f8      	ldr	r0, [r7, #12]
2400fda2:	f000 fb41 	bl	24010428 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
2400fda6:	68fb      	ldr	r3, [r7, #12]
2400fda8:	681b      	ldr	r3, [r3, #0]
2400fdaa:	68da      	ldr	r2, [r3, #12]
2400fdac:	68fb      	ldr	r3, [r7, #12]
2400fdae:	681b      	ldr	r3, [r3, #0]
2400fdb0:	f042 0206 	orr.w	r2, r2, #6
2400fdb4:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
2400fdb6:	68fb      	ldr	r3, [r7, #12]
2400fdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400fdba:	2b00      	cmp	r3, #0
2400fdbc:	d007      	beq.n	2400fdce <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
2400fdbe:	68fb      	ldr	r3, [r7, #12]
2400fdc0:	681b      	ldr	r3, [r3, #0]
2400fdc2:	68da      	ldr	r2, [r3, #12]
2400fdc4:	68fb      	ldr	r3, [r7, #12]
2400fdc6:	681b      	ldr	r3, [r3, #0]
2400fdc8:	f042 0210 	orr.w	r2, r2, #16
2400fdcc:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
2400fdce:	68fb      	ldr	r3, [r7, #12]
2400fdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400fdd2:	2b00      	cmp	r3, #0
2400fdd4:	d007      	beq.n	2400fde6 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
2400fdd6:	68fb      	ldr	r3, [r7, #12]
2400fdd8:	681b      	ldr	r3, [r3, #0]
2400fdda:	68da      	ldr	r2, [r3, #12]
2400fddc:	68fb      	ldr	r3, [r7, #12]
2400fdde:	681b      	ldr	r3, [r3, #0]
2400fde0:	f042 0208 	orr.w	r2, r2, #8
2400fde4:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
2400fde6:	68fb      	ldr	r3, [r7, #12]
2400fde8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400fdea:	2b00      	cmp	r3, #0
2400fdec:	d007      	beq.n	2400fdfe <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
2400fdee:	68fb      	ldr	r3, [r7, #12]
2400fdf0:	681b      	ldr	r3, [r3, #0]
2400fdf2:	68da      	ldr	r2, [r3, #12]
2400fdf4:	68fb      	ldr	r3, [r7, #12]
2400fdf6:	681b      	ldr	r3, [r3, #0]
2400fdf8:	f042 0220 	orr.w	r2, r2, #32
2400fdfc:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2400fdfe:	68fb      	ldr	r3, [r7, #12]
2400fe00:	681b      	ldr	r3, [r3, #0]
2400fe02:	68da      	ldr	r2, [r3, #12]
2400fe04:	68fb      	ldr	r3, [r7, #12]
2400fe06:	681b      	ldr	r3, [r3, #0]
2400fe08:	f042 0201 	orr.w	r2, r2, #1
2400fe0c:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2400fe0e:	68fb      	ldr	r3, [r7, #12]
2400fe10:	685b      	ldr	r3, [r3, #4]
2400fe12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400fe16:	d10e      	bne.n	2400fe36 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2400fe18:	68fb      	ldr	r3, [r7, #12]
2400fe1a:	681b      	ldr	r3, [r3, #0]
2400fe1c:	68da      	ldr	r2, [r3, #12]
2400fe1e:	68fb      	ldr	r3, [r7, #12]
2400fe20:	681b      	ldr	r3, [r3, #0]
2400fe22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400fe26:	60da      	str	r2, [r3, #12]
2400fe28:	e005      	b.n	2400fe36 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fe2a:	68fb      	ldr	r3, [r7, #12]
2400fe2c:	2200      	movs	r2, #0
2400fe2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fe32:	2302      	movs	r3, #2
2400fe34:	e000      	b.n	2400fe38 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
2400fe36:	2300      	movs	r3, #0
}
2400fe38:	4618      	mov	r0, r3
2400fe3a:	3710      	adds	r7, #16
2400fe3c:	46bd      	mov	sp, r7
2400fe3e:	bd80      	pop	{r7, pc}

2400fe40 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
2400fe40:	b580      	push	{r7, lr}
2400fe42:	b084      	sub	sp, #16
2400fe44:	af00      	add	r7, sp, #0
2400fe46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
2400fe48:	f7f2 f980 	bl	2400214c <HAL_GetTick>
2400fe4c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fe4e:	687b      	ldr	r3, [r7, #4]
2400fe50:	2b00      	cmp	r3, #0
2400fe52:	d101      	bne.n	2400fe58 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
2400fe54:	2301      	movs	r3, #1
2400fe56:	e04a      	b.n	2400feee <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2400fe58:	687b      	ldr	r3, [r7, #4]
2400fe5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fe5e:	b2db      	uxtb	r3, r3
2400fe60:	2b02      	cmp	r3, #2
2400fe62:	d008      	beq.n	2400fe76 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400fe64:	687b      	ldr	r3, [r7, #4]
2400fe66:	2280      	movs	r2, #128	; 0x80
2400fe68:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2400fe6a:	687b      	ldr	r3, [r7, #4]
2400fe6c:	2200      	movs	r2, #0
2400fe6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
2400fe72:	2301      	movs	r3, #1
2400fe74:	e03b      	b.n	2400feee <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
2400fe76:	687b      	ldr	r3, [r7, #4]
2400fe78:	681b      	ldr	r3, [r3, #0]
2400fe7a:	68da      	ldr	r2, [r3, #12]
2400fe7c:	687b      	ldr	r3, [r7, #4]
2400fe7e:	681b      	ldr	r3, [r3, #0]
2400fe80:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
2400fe84:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
2400fe86:	687b      	ldr	r3, [r7, #4]
2400fe88:	681b      	ldr	r3, [r3, #0]
2400fe8a:	68da      	ldr	r2, [r3, #12]
2400fe8c:	687b      	ldr	r3, [r7, #4]
2400fe8e:	681b      	ldr	r3, [r3, #0]
2400fe90:	f022 0201 	bic.w	r2, r2, #1
2400fe94:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400fe96:	e016      	b.n	2400fec6 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2400fe98:	f7f2 f958 	bl	2400214c <HAL_GetTick>
2400fe9c:	4602      	mov	r2, r0
2400fe9e:	68fb      	ldr	r3, [r7, #12]
2400fea0:	1ad3      	subs	r3, r2, r3
2400fea2:	2b05      	cmp	r3, #5
2400fea4:	d90f      	bls.n	2400fec6 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
2400fea6:	687b      	ldr	r3, [r7, #4]
2400fea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400feaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2400feae:	687b      	ldr	r3, [r7, #4]
2400feb0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
2400feb2:	687b      	ldr	r3, [r7, #4]
2400feb4:	2200      	movs	r2, #0
2400feb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
2400feba:	687b      	ldr	r3, [r7, #4]
2400febc:	2203      	movs	r2, #3
2400febe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
2400fec2:	2301      	movs	r3, #1
2400fec4:	e013      	b.n	2400feee <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400fec6:	687b      	ldr	r3, [r7, #4]
2400fec8:	681b      	ldr	r3, [r3, #0]
2400feca:	68db      	ldr	r3, [r3, #12]
2400fecc:	f003 0301 	and.w	r3, r3, #1
2400fed0:	2b00      	cmp	r3, #0
2400fed2:	d1e1      	bne.n	2400fe98 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
2400fed4:	687b      	ldr	r3, [r7, #4]
2400fed6:	681b      	ldr	r3, [r3, #0]
2400fed8:	221f      	movs	r2, #31
2400feda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2400fedc:	687b      	ldr	r3, [r7, #4]
2400fede:	2200      	movs	r2, #0
2400fee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
2400fee4:	687b      	ldr	r3, [r7, #4]
2400fee6:	2201      	movs	r2, #1
2400fee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
2400feec:	2300      	movs	r3, #0
}
2400feee:	4618      	mov	r0, r3
2400fef0:	3710      	adds	r7, #16
2400fef2:	46bd      	mov	sp, r7
2400fef4:	bd80      	pop	{r7, pc}

2400fef6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
2400fef6:	b480      	push	{r7}
2400fef8:	b083      	sub	sp, #12
2400fefa:	af00      	add	r7, sp, #0
2400fefc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fefe:	687b      	ldr	r3, [r7, #4]
2400ff00:	2b00      	cmp	r3, #0
2400ff02:	d101      	bne.n	2400ff08 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400ff04:	2301      	movs	r3, #1
2400ff06:	e017      	b.n	2400ff38 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2400ff08:	687b      	ldr	r3, [r7, #4]
2400ff0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400ff0e:	b2db      	uxtb	r3, r3
2400ff10:	2b02      	cmp	r3, #2
2400ff12:	d004      	beq.n	2400ff1e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400ff14:	687b      	ldr	r3, [r7, #4]
2400ff16:	2280      	movs	r2, #128	; 0x80
2400ff18:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2400ff1a:	2301      	movs	r3, #1
2400ff1c:	e00c      	b.n	2400ff38 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
2400ff1e:	687b      	ldr	r3, [r7, #4]
2400ff20:	2204      	movs	r2, #4
2400ff22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
2400ff26:	687b      	ldr	r3, [r7, #4]
2400ff28:	681b      	ldr	r3, [r3, #0]
2400ff2a:	68da      	ldr	r2, [r3, #12]
2400ff2c:	687b      	ldr	r3, [r7, #4]
2400ff2e:	681b      	ldr	r3, [r3, #0]
2400ff30:	f022 0201 	bic.w	r2, r2, #1
2400ff34:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2400ff36:	2300      	movs	r3, #0
}
2400ff38:	4618      	mov	r0, r3
2400ff3a:	370c      	adds	r7, #12
2400ff3c:	46bd      	mov	sp, r7
2400ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ff42:	4770      	bx	lr

2400ff44 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
2400ff44:	b580      	push	{r7, lr}
2400ff46:	b088      	sub	sp, #32
2400ff48:	af00      	add	r7, sp, #0
2400ff4a:	60f8      	str	r0, [r7, #12]
2400ff4c:	460b      	mov	r3, r1
2400ff4e:	607a      	str	r2, [r7, #4]
2400ff50:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400ff52:	68fb      	ldr	r3, [r7, #12]
2400ff54:	2b00      	cmp	r3, #0
2400ff56:	d101      	bne.n	2400ff5c <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
2400ff58:	2301      	movs	r3, #1
2400ff5a:	e0b9      	b.n	240100d0 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2400ff5c:	68fb      	ldr	r3, [r7, #12]
2400ff5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400ff62:	b2db      	uxtb	r3, r3
2400ff64:	2b02      	cmp	r3, #2
2400ff66:	d004      	beq.n	2400ff72 <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400ff68:	68fb      	ldr	r3, [r7, #12]
2400ff6a:	2280      	movs	r2, #128	; 0x80
2400ff6c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2400ff6e:	2301      	movs	r3, #1
2400ff70:	e0ae      	b.n	240100d0 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
2400ff72:	7afb      	ldrb	r3, [r7, #11]
2400ff74:	2b00      	cmp	r3, #0
2400ff76:	d00b      	beq.n	2400ff90 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
2400ff78:	7afb      	ldrb	r3, [r7, #11]
2400ff7a:	2b01      	cmp	r3, #1
2400ff7c:	d006      	beq.n	2400ff8c <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
2400ff7e:	7afb      	ldrb	r3, [r7, #11]
2400ff80:	2b02      	cmp	r3, #2
2400ff82:	d101      	bne.n	2400ff88 <HAL_MDMA_PollForTransfer+0x44>
2400ff84:	2308      	movs	r3, #8
2400ff86:	e004      	b.n	2400ff92 <HAL_MDMA_PollForTransfer+0x4e>
2400ff88:	2304      	movs	r3, #4
2400ff8a:	e002      	b.n	2400ff92 <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
2400ff8c:	2310      	movs	r3, #16
2400ff8e:	e000      	b.n	2400ff92 <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
2400ff90:	2302      	movs	r3, #2
2400ff92:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
2400ff94:	f7f2 f8da 	bl	2400214c <HAL_GetTick>
2400ff98:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
2400ff9a:	e067      	b.n	2401006c <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
2400ff9c:	68fb      	ldr	r3, [r7, #12]
2400ff9e:	681b      	ldr	r3, [r3, #0]
2400ffa0:	681b      	ldr	r3, [r3, #0]
2400ffa2:	f003 0301 	and.w	r3, r3, #1
2400ffa6:	2b00      	cmp	r3, #0
2400ffa8:	d046      	beq.n	24010038 <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
2400ffaa:	68fb      	ldr	r3, [r7, #12]
2400ffac:	681b      	ldr	r3, [r3, #0]
2400ffae:	689b      	ldr	r3, [r3, #8]
2400ffb0:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
2400ffb2:	697b      	ldr	r3, [r7, #20]
2400ffb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400ffb8:	2b00      	cmp	r3, #0
2400ffba:	d106      	bne.n	2400ffca <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
2400ffbc:	68fb      	ldr	r3, [r7, #12]
2400ffbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400ffc0:	f043 0201 	orr.w	r2, r3, #1
2400ffc4:	68fb      	ldr	r3, [r7, #12]
2400ffc6:	669a      	str	r2, [r3, #104]	; 0x68
2400ffc8:	e005      	b.n	2400ffd6 <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2400ffca:	68fb      	ldr	r3, [r7, #12]
2400ffcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400ffce:	f043 0202 	orr.w	r2, r3, #2
2400ffd2:	68fb      	ldr	r3, [r7, #12]
2400ffd4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
2400ffd6:	697b      	ldr	r3, [r7, #20]
2400ffd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400ffdc:	2b00      	cmp	r3, #0
2400ffde:	d005      	beq.n	2400ffec <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
2400ffe0:	68fb      	ldr	r3, [r7, #12]
2400ffe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400ffe4:	f043 0204 	orr.w	r2, r3, #4
2400ffe8:	68fb      	ldr	r3, [r7, #12]
2400ffea:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
2400ffec:	697b      	ldr	r3, [r7, #20]
2400ffee:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400fff2:	2b00      	cmp	r3, #0
2400fff4:	d005      	beq.n	24010002 <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
2400fff6:	68fb      	ldr	r3, [r7, #12]
2400fff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400fffa:	f043 0208 	orr.w	r2, r3, #8
2400fffe:	68fb      	ldr	r3, [r7, #12]
24010000:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24010002:	697b      	ldr	r3, [r7, #20]
24010004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24010008:	2b00      	cmp	r3, #0
2401000a:	d005      	beq.n	24010018 <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
2401000c:	68fb      	ldr	r3, [r7, #12]
2401000e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010010:	f043 0210 	orr.w	r2, r3, #16
24010014:	68fb      	ldr	r3, [r7, #12]
24010016:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24010018:	697b      	ldr	r3, [r7, #20]
2401001a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2401001e:	2b00      	cmp	r3, #0
24010020:	d005      	beq.n	2401002e <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24010022:	68fb      	ldr	r3, [r7, #12]
24010024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010026:	f043 0220 	orr.w	r2, r3, #32
2401002a:	68fb      	ldr	r3, [r7, #12]
2401002c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
2401002e:	68f8      	ldr	r0, [r7, #12]
24010030:	f7ff ff06 	bl	2400fe40 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
24010034:	2301      	movs	r3, #1
24010036:	e04b      	b.n	240100d0 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
24010038:	687b      	ldr	r3, [r7, #4]
2401003a:	f1b3 3fff 	cmp.w	r3, #4294967295
2401003e:	d015      	beq.n	2401006c <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
24010040:	f7f2 f884 	bl	2400214c <HAL_GetTick>
24010044:	4602      	mov	r2, r0
24010046:	69bb      	ldr	r3, [r7, #24]
24010048:	1ad3      	subs	r3, r2, r3
2401004a:	687a      	ldr	r2, [r7, #4]
2401004c:	429a      	cmp	r2, r3
2401004e:	d302      	bcc.n	24010056 <HAL_MDMA_PollForTransfer+0x112>
24010050:	687b      	ldr	r3, [r7, #4]
24010052:	2b00      	cmp	r3, #0
24010054:	d10a      	bne.n	2401006c <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
24010056:	68fb      	ldr	r3, [r7, #12]
24010058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401005a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2401005e:	68fb      	ldr	r3, [r7, #12]
24010060:	669a      	str	r2, [r3, #104]	; 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
24010062:	68f8      	ldr	r0, [r7, #12]
24010064:	f7ff feec 	bl	2400fe40 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
24010068:	2301      	movs	r3, #1
2401006a:	e031      	b.n	240100d0 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
2401006c:	68fb      	ldr	r3, [r7, #12]
2401006e:	681b      	ldr	r3, [r3, #0]
24010070:	681a      	ldr	r2, [r3, #0]
24010072:	69fb      	ldr	r3, [r7, #28]
24010074:	4013      	ands	r3, r2
24010076:	2b00      	cmp	r3, #0
24010078:	d090      	beq.n	2400ff9c <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
2401007a:	7afb      	ldrb	r3, [r7, #11]
2401007c:	2b01      	cmp	r3, #1
2401007e:	d104      	bne.n	2401008a <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24010080:	68fb      	ldr	r3, [r7, #12]
24010082:	681b      	ldr	r3, [r3, #0]
24010084:	2210      	movs	r2, #16
24010086:	605a      	str	r2, [r3, #4]
24010088:	e021      	b.n	240100ce <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
2401008a:	7afb      	ldrb	r3, [r7, #11]
2401008c:	2b02      	cmp	r3, #2
2401008e:	d104      	bne.n	2401009a <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
24010090:	68fb      	ldr	r3, [r7, #12]
24010092:	681b      	ldr	r3, [r3, #0]
24010094:	2218      	movs	r2, #24
24010096:	605a      	str	r2, [r3, #4]
24010098:	e019      	b.n	240100ce <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
2401009a:	7afb      	ldrb	r3, [r7, #11]
2401009c:	2b03      	cmp	r3, #3
2401009e:	d104      	bne.n	240100aa <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
240100a0:	68fb      	ldr	r3, [r7, #12]
240100a2:	681b      	ldr	r3, [r3, #0]
240100a4:	221c      	movs	r2, #28
240100a6:	605a      	str	r2, [r3, #4]
240100a8:	e011      	b.n	240100ce <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
240100aa:	7afb      	ldrb	r3, [r7, #11]
240100ac:	2b00      	cmp	r3, #0
240100ae:	d10c      	bne.n	240100ca <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
240100b0:	68fb      	ldr	r3, [r7, #12]
240100b2:	681b      	ldr	r3, [r3, #0]
240100b4:	221e      	movs	r2, #30
240100b6:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240100b8:	68fb      	ldr	r3, [r7, #12]
240100ba:	2200      	movs	r2, #0
240100bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
240100c0:	68fb      	ldr	r3, [r7, #12]
240100c2:	2201      	movs	r2, #1
240100c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
240100c8:	e001      	b.n	240100ce <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
240100ca:	2301      	movs	r3, #1
240100cc:	e000      	b.n	240100d0 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
240100ce:	2300      	movs	r3, #0
}
240100d0:	4618      	mov	r0, r3
240100d2:	3720      	adds	r7, #32
240100d4:	46bd      	mov	sp, r7
240100d6:	bd80      	pop	{r7, pc}

240100d8 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
240100d8:	b480      	push	{r7}
240100da:	b085      	sub	sp, #20
240100dc:	af00      	add	r7, sp, #0
240100de:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240100e0:	687b      	ldr	r3, [r7, #4]
240100e2:	2b00      	cmp	r3, #0
240100e4:	d101      	bne.n	240100ea <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
240100e6:	2301      	movs	r3, #1
240100e8:	e02a      	b.n	24010140 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
240100ea:	687b      	ldr	r3, [r7, #4]
240100ec:	681b      	ldr	r3, [r3, #0]
240100ee:	691b      	ldr	r3, [r3, #16]
240100f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240100f4:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
240100f6:	687b      	ldr	r3, [r7, #4]
240100f8:	681b      	ldr	r3, [r3, #0]
240100fa:	68db      	ldr	r3, [r3, #12]
240100fc:	f003 0301 	and.w	r3, r3, #1
24010100:	2b00      	cmp	r3, #0
24010102:	d104      	bne.n	2401010e <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24010104:	687b      	ldr	r3, [r7, #4]
24010106:	2280      	movs	r2, #128	; 0x80
24010108:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401010a:	2301      	movs	r3, #1
2401010c:	e018      	b.n	24010140 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
2401010e:	687b      	ldr	r3, [r7, #4]
24010110:	681b      	ldr	r3, [r3, #0]
24010112:	681b      	ldr	r3, [r3, #0]
24010114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24010118:	2b00      	cmp	r3, #0
2401011a:	d102      	bne.n	24010122 <HAL_MDMA_GenerateSWRequest+0x4a>
2401011c:	68fb      	ldr	r3, [r7, #12]
2401011e:	2b00      	cmp	r3, #0
24010120:	d105      	bne.n	2401012e <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
24010122:	687b      	ldr	r3, [r7, #4]
24010124:	f44f 7280 	mov.w	r2, #256	; 0x100
24010128:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401012a:	2301      	movs	r3, #1
2401012c:	e008      	b.n	24010140 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
2401012e:	687b      	ldr	r3, [r7, #4]
24010130:	681b      	ldr	r3, [r3, #0]
24010132:	68da      	ldr	r2, [r3, #12]
24010134:	687b      	ldr	r3, [r7, #4]
24010136:	681b      	ldr	r3, [r3, #0]
24010138:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2401013c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
2401013e:	2300      	movs	r3, #0
  }
}
24010140:	4618      	mov	r0, r3
24010142:	3714      	adds	r7, #20
24010144:	46bd      	mov	sp, r7
24010146:	f85d 7b04 	ldr.w	r7, [sp], #4
2401014a:	4770      	bx	lr

2401014c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
2401014c:	b580      	push	{r7, lr}
2401014e:	b086      	sub	sp, #24
24010150:	af00      	add	r7, sp, #0
24010152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
24010154:	2300      	movs	r3, #0
24010156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
24010158:	4b91      	ldr	r3, [pc, #580]	; (240103a0 <HAL_MDMA_IRQHandler+0x254>)
2401015a:	681b      	ldr	r3, [r3, #0]
2401015c:	4a91      	ldr	r2, [pc, #580]	; (240103a4 <HAL_MDMA_IRQHandler+0x258>)
2401015e:	fba2 2303 	umull	r2, r3, r2, r3
24010162:	0a9b      	lsrs	r3, r3, #10
24010164:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
24010166:	687b      	ldr	r3, [r7, #4]
24010168:	681b      	ldr	r3, [r3, #0]
2401016a:	461a      	mov	r2, r3
2401016c:	4b8e      	ldr	r3, [pc, #568]	; (240103a8 <HAL_MDMA_IRQHandler+0x25c>)
2401016e:	4413      	add	r3, r2
24010170:	099b      	lsrs	r3, r3, #6
24010172:	f003 031f 	and.w	r3, r3, #31
24010176:	2201      	movs	r2, #1
24010178:	fa02 f303 	lsl.w	r3, r2, r3
2401017c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
2401017e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
24010182:	681a      	ldr	r2, [r3, #0]
24010184:	693b      	ldr	r3, [r7, #16]
24010186:	4013      	ands	r3, r2
24010188:	2b00      	cmp	r3, #0
2401018a:	f000 812d 	beq.w	240103e8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
2401018e:	687b      	ldr	r3, [r7, #4]
24010190:	681b      	ldr	r3, [r3, #0]
24010192:	681b      	ldr	r3, [r3, #0]
24010194:	f003 0301 	and.w	r3, r3, #1
24010198:	2b00      	cmp	r3, #0
2401019a:	d054      	beq.n	24010246 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
2401019c:	687b      	ldr	r3, [r7, #4]
2401019e:	681b      	ldr	r3, [r3, #0]
240101a0:	68db      	ldr	r3, [r3, #12]
240101a2:	f003 0302 	and.w	r3, r3, #2
240101a6:	2b00      	cmp	r3, #0
240101a8:	d04d      	beq.n	24010246 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
240101aa:	687b      	ldr	r3, [r7, #4]
240101ac:	681b      	ldr	r3, [r3, #0]
240101ae:	68da      	ldr	r2, [r3, #12]
240101b0:	687b      	ldr	r3, [r7, #4]
240101b2:	681b      	ldr	r3, [r3, #0]
240101b4:	f022 0202 	bic.w	r2, r2, #2
240101b8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240101ba:	687b      	ldr	r3, [r7, #4]
240101bc:	681b      	ldr	r3, [r3, #0]
240101be:	689b      	ldr	r3, [r3, #8]
240101c0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
240101c2:	68fb      	ldr	r3, [r7, #12]
240101c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
240101c8:	2b00      	cmp	r3, #0
240101ca:	d106      	bne.n	240101da <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
240101cc:	687b      	ldr	r3, [r7, #4]
240101ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240101d0:	f043 0201 	orr.w	r2, r3, #1
240101d4:	687b      	ldr	r3, [r7, #4]
240101d6:	669a      	str	r2, [r3, #104]	; 0x68
240101d8:	e005      	b.n	240101e6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
240101da:	687b      	ldr	r3, [r7, #4]
240101dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240101de:	f043 0202 	orr.w	r2, r3, #2
240101e2:	687b      	ldr	r3, [r7, #4]
240101e4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
240101e6:	68fb      	ldr	r3, [r7, #12]
240101e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
240101ec:	2b00      	cmp	r3, #0
240101ee:	d005      	beq.n	240101fc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
240101f0:	687b      	ldr	r3, [r7, #4]
240101f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240101f4:	f043 0204 	orr.w	r2, r3, #4
240101f8:	687b      	ldr	r3, [r7, #4]
240101fa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
240101fc:	68fb      	ldr	r3, [r7, #12]
240101fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
24010202:	2b00      	cmp	r3, #0
24010204:	d005      	beq.n	24010212 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
24010206:	687b      	ldr	r3, [r7, #4]
24010208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401020a:	f043 0208 	orr.w	r2, r3, #8
2401020e:	687b      	ldr	r3, [r7, #4]
24010210:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24010212:	68fb      	ldr	r3, [r7, #12]
24010214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24010218:	2b00      	cmp	r3, #0
2401021a:	d005      	beq.n	24010228 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
2401021c:	687b      	ldr	r3, [r7, #4]
2401021e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010220:	f043 0210 	orr.w	r2, r3, #16
24010224:	687b      	ldr	r3, [r7, #4]
24010226:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24010228:	68fb      	ldr	r3, [r7, #12]
2401022a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2401022e:	2b00      	cmp	r3, #0
24010230:	d005      	beq.n	2401023e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24010232:	687b      	ldr	r3, [r7, #4]
24010234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010236:	f043 0220 	orr.w	r2, r3, #32
2401023a:	687b      	ldr	r3, [r7, #4]
2401023c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
2401023e:	687b      	ldr	r3, [r7, #4]
24010240:	681b      	ldr	r3, [r3, #0]
24010242:	2201      	movs	r2, #1
24010244:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
24010246:	687b      	ldr	r3, [r7, #4]
24010248:	681b      	ldr	r3, [r3, #0]
2401024a:	681b      	ldr	r3, [r3, #0]
2401024c:	f003 0310 	and.w	r3, r3, #16
24010250:	2b00      	cmp	r3, #0
24010252:	d012      	beq.n	2401027a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
24010254:	687b      	ldr	r3, [r7, #4]
24010256:	681b      	ldr	r3, [r3, #0]
24010258:	68db      	ldr	r3, [r3, #12]
2401025a:	f003 0320 	and.w	r3, r3, #32
2401025e:	2b00      	cmp	r3, #0
24010260:	d00b      	beq.n	2401027a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24010262:	687b      	ldr	r3, [r7, #4]
24010264:	681b      	ldr	r3, [r3, #0]
24010266:	2210      	movs	r2, #16
24010268:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
2401026a:	687b      	ldr	r3, [r7, #4]
2401026c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401026e:	2b00      	cmp	r3, #0
24010270:	d003      	beq.n	2401027a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
24010272:	687b      	ldr	r3, [r7, #4]
24010274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24010276:	6878      	ldr	r0, [r7, #4]
24010278:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
2401027a:	687b      	ldr	r3, [r7, #4]
2401027c:	681b      	ldr	r3, [r3, #0]
2401027e:	681b      	ldr	r3, [r3, #0]
24010280:	f003 0308 	and.w	r3, r3, #8
24010284:	2b00      	cmp	r3, #0
24010286:	d012      	beq.n	240102ae <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
24010288:	687b      	ldr	r3, [r7, #4]
2401028a:	681b      	ldr	r3, [r3, #0]
2401028c:	68db      	ldr	r3, [r3, #12]
2401028e:	f003 0310 	and.w	r3, r3, #16
24010292:	2b00      	cmp	r3, #0
24010294:	d00b      	beq.n	240102ae <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
24010296:	687b      	ldr	r3, [r7, #4]
24010298:	681b      	ldr	r3, [r3, #0]
2401029a:	2208      	movs	r2, #8
2401029c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
2401029e:	687b      	ldr	r3, [r7, #4]
240102a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240102a2:	2b00      	cmp	r3, #0
240102a4:	d003      	beq.n	240102ae <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
240102a6:	687b      	ldr	r3, [r7, #4]
240102a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240102aa:	6878      	ldr	r0, [r7, #4]
240102ac:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
240102ae:	687b      	ldr	r3, [r7, #4]
240102b0:	681b      	ldr	r3, [r3, #0]
240102b2:	681b      	ldr	r3, [r3, #0]
240102b4:	f003 0304 	and.w	r3, r3, #4
240102b8:	2b00      	cmp	r3, #0
240102ba:	d012      	beq.n	240102e2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
240102bc:	687b      	ldr	r3, [r7, #4]
240102be:	681b      	ldr	r3, [r3, #0]
240102c0:	68db      	ldr	r3, [r3, #12]
240102c2:	f003 0308 	and.w	r3, r3, #8
240102c6:	2b00      	cmp	r3, #0
240102c8:	d00b      	beq.n	240102e2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
240102ca:	687b      	ldr	r3, [r7, #4]
240102cc:	681b      	ldr	r3, [r3, #0]
240102ce:	2204      	movs	r2, #4
240102d0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
240102d2:	687b      	ldr	r3, [r7, #4]
240102d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240102d6:	2b00      	cmp	r3, #0
240102d8:	d003      	beq.n	240102e2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
240102da:	687b      	ldr	r3, [r7, #4]
240102dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240102de:	6878      	ldr	r0, [r7, #4]
240102e0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
240102e2:	687b      	ldr	r3, [r7, #4]
240102e4:	681b      	ldr	r3, [r3, #0]
240102e6:	681b      	ldr	r3, [r3, #0]
240102e8:	f003 0302 	and.w	r3, r3, #2
240102ec:	2b00      	cmp	r3, #0
240102ee:	d039      	beq.n	24010364 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
240102f0:	687b      	ldr	r3, [r7, #4]
240102f2:	681b      	ldr	r3, [r3, #0]
240102f4:	68db      	ldr	r3, [r3, #12]
240102f6:	f003 0304 	and.w	r3, r3, #4
240102fa:	2b00      	cmp	r3, #0
240102fc:	d032      	beq.n	24010364 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
240102fe:	687b      	ldr	r3, [r7, #4]
24010300:	681b      	ldr	r3, [r3, #0]
24010302:	68da      	ldr	r2, [r3, #12]
24010304:	687b      	ldr	r3, [r7, #4]
24010306:	681b      	ldr	r3, [r3, #0]
24010308:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
2401030c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
2401030e:	687b      	ldr	r3, [r7, #4]
24010310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010314:	b2db      	uxtb	r3, r3
24010316:	2b04      	cmp	r3, #4
24010318:	d110      	bne.n	2401033c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
2401031a:	687b      	ldr	r3, [r7, #4]
2401031c:	2200      	movs	r2, #0
2401031e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
24010322:	687b      	ldr	r3, [r7, #4]
24010324:	2201      	movs	r2, #1
24010326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
2401032a:	687b      	ldr	r3, [r7, #4]
2401032c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401032e:	2b00      	cmp	r3, #0
24010330:	d05c      	beq.n	240103ec <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
24010332:	687b      	ldr	r3, [r7, #4]
24010334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24010336:	6878      	ldr	r0, [r7, #4]
24010338:	4798      	blx	r3
        }
        return;
2401033a:	e057      	b.n	240103ec <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
2401033c:	687b      	ldr	r3, [r7, #4]
2401033e:	681b      	ldr	r3, [r3, #0]
24010340:	2202      	movs	r2, #2
24010342:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
24010344:	687b      	ldr	r3, [r7, #4]
24010346:	2200      	movs	r2, #0
24010348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
2401034c:	687b      	ldr	r3, [r7, #4]
2401034e:	2201      	movs	r2, #1
24010350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
24010354:	687b      	ldr	r3, [r7, #4]
24010356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010358:	2b00      	cmp	r3, #0
2401035a:	d003      	beq.n	24010364 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
2401035c:	687b      	ldr	r3, [r7, #4]
2401035e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010360:	6878      	ldr	r0, [r7, #4]
24010362:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
24010364:	687b      	ldr	r3, [r7, #4]
24010366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010368:	2b00      	cmp	r3, #0
2401036a:	d040      	beq.n	240103ee <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
2401036c:	687b      	ldr	r3, [r7, #4]
2401036e:	2204      	movs	r2, #4
24010370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
24010374:	687b      	ldr	r3, [r7, #4]
24010376:	681b      	ldr	r3, [r3, #0]
24010378:	68da      	ldr	r2, [r3, #12]
2401037a:	687b      	ldr	r3, [r7, #4]
2401037c:	681b      	ldr	r3, [r3, #0]
2401037e:	f022 0201 	bic.w	r2, r2, #1
24010382:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
24010384:	68bb      	ldr	r3, [r7, #8]
24010386:	3301      	adds	r3, #1
24010388:	60bb      	str	r3, [r7, #8]
2401038a:	697a      	ldr	r2, [r7, #20]
2401038c:	429a      	cmp	r2, r3
2401038e:	d30d      	bcc.n	240103ac <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
24010390:	687b      	ldr	r3, [r7, #4]
24010392:	681b      	ldr	r3, [r3, #0]
24010394:	68db      	ldr	r3, [r3, #12]
24010396:	f003 0301 	and.w	r3, r3, #1
2401039a:	2b00      	cmp	r3, #0
2401039c:	d1f2      	bne.n	24010384 <HAL_MDMA_IRQHandler+0x238>
2401039e:	e006      	b.n	240103ae <HAL_MDMA_IRQHandler+0x262>
240103a0:	240004c8 	.word	0x240004c8
240103a4:	1b4e81b5 	.word	0x1b4e81b5
240103a8:	adffffc0 	.word	0xadffffc0
        break;
240103ac:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
240103ae:	687b      	ldr	r3, [r7, #4]
240103b0:	2200      	movs	r2, #0
240103b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240103b6:	687b      	ldr	r3, [r7, #4]
240103b8:	681b      	ldr	r3, [r3, #0]
240103ba:	68db      	ldr	r3, [r3, #12]
240103bc:	f003 0301 	and.w	r3, r3, #1
240103c0:	2b00      	cmp	r3, #0
240103c2:	d004      	beq.n	240103ce <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
240103c4:	687b      	ldr	r3, [r7, #4]
240103c6:	2203      	movs	r2, #3
240103c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
240103cc:	e003      	b.n	240103d6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
240103ce:	687b      	ldr	r3, [r7, #4]
240103d0:	2201      	movs	r2, #1
240103d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
240103d6:	687b      	ldr	r3, [r7, #4]
240103d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240103da:	2b00      	cmp	r3, #0
240103dc:	d007      	beq.n	240103ee <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
240103de:	687b      	ldr	r3, [r7, #4]
240103e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240103e2:	6878      	ldr	r0, [r7, #4]
240103e4:	4798      	blx	r3
240103e6:	e002      	b.n	240103ee <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
240103e8:	bf00      	nop
240103ea:	e000      	b.n	240103ee <HAL_MDMA_IRQHandler+0x2a2>
        return;
240103ec:	bf00      	nop
    }
  }
}
240103ee:	3718      	adds	r7, #24
240103f0:	46bd      	mov	sp, r7
240103f2:	bd80      	pop	{r7, pc}

240103f4 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
240103f4:	b480      	push	{r7}
240103f6:	b083      	sub	sp, #12
240103f8:	af00      	add	r7, sp, #0
240103fa:	6078      	str	r0, [r7, #4]
  return hmdma->State;
240103fc:	687b      	ldr	r3, [r7, #4]
240103fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010402:	b2db      	uxtb	r3, r3
}
24010404:	4618      	mov	r0, r3
24010406:	370c      	adds	r7, #12
24010408:	46bd      	mov	sp, r7
2401040a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401040e:	4770      	bx	lr

24010410 <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
24010410:	b480      	push	{r7}
24010412:	b083      	sub	sp, #12
24010414:	af00      	add	r7, sp, #0
24010416:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
24010418:	687b      	ldr	r3, [r7, #4]
2401041a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
2401041c:	4618      	mov	r0, r3
2401041e:	370c      	adds	r7, #12
24010420:	46bd      	mov	sp, r7
24010422:	f85d 7b04 	ldr.w	r7, [sp], #4
24010426:	4770      	bx	lr

24010428 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24010428:	b480      	push	{r7}
2401042a:	b087      	sub	sp, #28
2401042c:	af00      	add	r7, sp, #0
2401042e:	60f8      	str	r0, [r7, #12]
24010430:	60b9      	str	r1, [r7, #8]
24010432:	607a      	str	r2, [r7, #4]
24010434:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
24010436:	68fb      	ldr	r3, [r7, #12]
24010438:	681b      	ldr	r3, [r3, #0]
2401043a:	695a      	ldr	r2, [r3, #20]
2401043c:	4b31      	ldr	r3, [pc, #196]	; (24010504 <MDMA_SetConfig+0xdc>)
2401043e:	4013      	ands	r3, r2
24010440:	683a      	ldr	r2, [r7, #0]
24010442:	f3c2 0110 	ubfx	r1, r2, #0, #17
24010446:	68fa      	ldr	r2, [r7, #12]
24010448:	6812      	ldr	r2, [r2, #0]
2401044a:	430b      	orrs	r3, r1
2401044c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
2401044e:	68fb      	ldr	r3, [r7, #12]
24010450:	681b      	ldr	r3, [r3, #0]
24010452:	695b      	ldr	r3, [r3, #20]
24010454:	f3c3 0113 	ubfx	r1, r3, #0, #20
24010458:	6a3b      	ldr	r3, [r7, #32]
2401045a:	3b01      	subs	r3, #1
2401045c:	051a      	lsls	r2, r3, #20
2401045e:	68fb      	ldr	r3, [r7, #12]
24010460:	681b      	ldr	r3, [r3, #0]
24010462:	430a      	orrs	r2, r1
24010464:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
24010466:	68fb      	ldr	r3, [r7, #12]
24010468:	681b      	ldr	r3, [r3, #0]
2401046a:	221f      	movs	r2, #31
2401046c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
2401046e:	68fb      	ldr	r3, [r7, #12]
24010470:	681b      	ldr	r3, [r3, #0]
24010472:	687a      	ldr	r2, [r7, #4]
24010474:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
24010476:	68fb      	ldr	r3, [r7, #12]
24010478:	681b      	ldr	r3, [r3, #0]
2401047a:	68ba      	ldr	r2, [r7, #8]
2401047c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
2401047e:	68bb      	ldr	r3, [r7, #8]
24010480:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24010484:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010486:	697b      	ldr	r3, [r7, #20]
24010488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401048c:	d002      	beq.n	24010494 <MDMA_SetConfig+0x6c>
2401048e:	697b      	ldr	r3, [r7, #20]
24010490:	2b00      	cmp	r3, #0
24010492:	d108      	bne.n	240104a6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
24010494:	68fb      	ldr	r3, [r7, #12]
24010496:	681b      	ldr	r3, [r3, #0]
24010498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2401049a:	68fb      	ldr	r3, [r7, #12]
2401049c:	681b      	ldr	r3, [r3, #0]
2401049e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240104a2:	629a      	str	r2, [r3, #40]	; 0x28
240104a4:	e007      	b.n	240104b6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
240104a6:	68fb      	ldr	r3, [r7, #12]
240104a8:	681b      	ldr	r3, [r3, #0]
240104aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240104ac:	68fb      	ldr	r3, [r7, #12]
240104ae:	681b      	ldr	r3, [r3, #0]
240104b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240104b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
240104b6:	687b      	ldr	r3, [r7, #4]
240104b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
240104bc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
240104be:	697b      	ldr	r3, [r7, #20]
240104c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240104c4:	d002      	beq.n	240104cc <MDMA_SetConfig+0xa4>
240104c6:	697b      	ldr	r3, [r7, #20]
240104c8:	2b00      	cmp	r3, #0
240104ca:	d108      	bne.n	240104de <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
240104cc:	68fb      	ldr	r3, [r7, #12]
240104ce:	681b      	ldr	r3, [r3, #0]
240104d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240104d2:	68fb      	ldr	r3, [r7, #12]
240104d4:	681b      	ldr	r3, [r3, #0]
240104d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240104da:	629a      	str	r2, [r3, #40]	; 0x28
240104dc:	e007      	b.n	240104ee <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
240104de:	68fb      	ldr	r3, [r7, #12]
240104e0:	681b      	ldr	r3, [r3, #0]
240104e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240104e4:	68fb      	ldr	r3, [r7, #12]
240104e6:	681b      	ldr	r3, [r3, #0]
240104e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240104ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
240104ee:	68fb      	ldr	r3, [r7, #12]
240104f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240104f2:	68fb      	ldr	r3, [r7, #12]
240104f4:	681b      	ldr	r3, [r3, #0]
240104f6:	625a      	str	r2, [r3, #36]	; 0x24
}
240104f8:	bf00      	nop
240104fa:	371c      	adds	r7, #28
240104fc:	46bd      	mov	sp, r7
240104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24010502:	4770      	bx	lr
24010504:	fffe0000 	.word	0xfffe0000

24010508 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
24010508:	b480      	push	{r7}
2401050a:	b085      	sub	sp, #20
2401050c:	af00      	add	r7, sp, #0
2401050e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
24010510:	687b      	ldr	r3, [r7, #4]
24010512:	68d9      	ldr	r1, [r3, #12]
24010514:	687b      	ldr	r3, [r7, #4]
24010516:	691a      	ldr	r2, [r3, #16]
24010518:	687b      	ldr	r3, [r7, #4]
2401051a:	681b      	ldr	r3, [r3, #0]
2401051c:	430a      	orrs	r2, r1
2401051e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010520:	687b      	ldr	r3, [r7, #4]
24010522:	695a      	ldr	r2, [r3, #20]
24010524:	687b      	ldr	r3, [r7, #4]
24010526:	699b      	ldr	r3, [r3, #24]
24010528:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
2401052a:	687b      	ldr	r3, [r7, #4]
2401052c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2401052e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24010530:	687b      	ldr	r3, [r7, #4]
24010532:	6a1b      	ldr	r3, [r3, #32]
24010534:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24010536:	687b      	ldr	r3, [r7, #4]
24010538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
2401053a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
2401053c:	687b      	ldr	r3, [r7, #4]
2401053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010540:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
24010542:	687b      	ldr	r3, [r7, #4]
24010544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24010546:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24010548:	687b      	ldr	r3, [r7, #4]
2401054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401054c:	3b01      	subs	r3, #1
2401054e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
24010550:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24010554:	687b      	ldr	r3, [r7, #4]
24010556:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010558:	687b      	ldr	r3, [r7, #4]
2401055a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2401055c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2401055e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
24010560:	687b      	ldr	r3, [r7, #4]
24010562:	685b      	ldr	r3, [r3, #4]
24010564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010568:	d107      	bne.n	2401057a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
2401056a:	687b      	ldr	r3, [r7, #4]
2401056c:	681b      	ldr	r3, [r3, #0]
2401056e:	691a      	ldr	r2, [r3, #16]
24010570:	687b      	ldr	r3, [r7, #4]
24010572:	681b      	ldr	r3, [r3, #0]
24010574:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
24010578:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
2401057a:	687b      	ldr	r3, [r7, #4]
2401057c:	681b      	ldr	r3, [r3, #0]
2401057e:	2200      	movs	r2, #0
24010580:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
24010582:	687b      	ldr	r3, [r7, #4]
24010584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010586:	2b00      	cmp	r3, #0
24010588:	da11      	bge.n	240105ae <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
2401058a:	687b      	ldr	r3, [r7, #4]
2401058c:	681b      	ldr	r3, [r3, #0]
2401058e:	695a      	ldr	r2, [r3, #20]
24010590:	687b      	ldr	r3, [r7, #4]
24010592:	681b      	ldr	r3, [r3, #0]
24010594:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24010598:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
2401059a:	687b      	ldr	r3, [r7, #4]
2401059c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401059e:	425b      	negs	r3, r3
240105a0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
240105a2:	687b      	ldr	r3, [r7, #4]
240105a4:	681b      	ldr	r3, [r3, #0]
240105a6:	68fa      	ldr	r2, [r7, #12]
240105a8:	b292      	uxth	r2, r2
240105aa:	621a      	str	r2, [r3, #32]
240105ac:	e006      	b.n	240105bc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
240105ae:	687b      	ldr	r3, [r7, #4]
240105b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240105b2:	461a      	mov	r2, r3
240105b4:	687b      	ldr	r3, [r7, #4]
240105b6:	681b      	ldr	r3, [r3, #0]
240105b8:	b292      	uxth	r2, r2
240105ba:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
240105bc:	687b      	ldr	r3, [r7, #4]
240105be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105c0:	2b00      	cmp	r3, #0
240105c2:	da15      	bge.n	240105f0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
240105c4:	687b      	ldr	r3, [r7, #4]
240105c6:	681b      	ldr	r3, [r3, #0]
240105c8:	695a      	ldr	r2, [r3, #20]
240105ca:	687b      	ldr	r3, [r7, #4]
240105cc:	681b      	ldr	r3, [r3, #0]
240105ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
240105d2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
240105d4:	687b      	ldr	r3, [r7, #4]
240105d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105d8:	425b      	negs	r3, r3
240105da:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240105dc:	687b      	ldr	r3, [r7, #4]
240105de:	681b      	ldr	r3, [r3, #0]
240105e0:	6a19      	ldr	r1, [r3, #32]
240105e2:	68fb      	ldr	r3, [r7, #12]
240105e4:	041a      	lsls	r2, r3, #16
240105e6:	687b      	ldr	r3, [r7, #4]
240105e8:	681b      	ldr	r3, [r3, #0]
240105ea:	430a      	orrs	r2, r1
240105ec:	621a      	str	r2, [r3, #32]
240105ee:	e009      	b.n	24010604 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240105f0:	687b      	ldr	r3, [r7, #4]
240105f2:	681b      	ldr	r3, [r3, #0]
240105f4:	6a19      	ldr	r1, [r3, #32]
240105f6:	687b      	ldr	r3, [r7, #4]
240105f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240105fa:	041a      	lsls	r2, r3, #16
240105fc:	687b      	ldr	r3, [r7, #4]
240105fe:	681b      	ldr	r3, [r3, #0]
24010600:	430a      	orrs	r2, r1
24010602:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
24010604:	687b      	ldr	r3, [r7, #4]
24010606:	685b      	ldr	r3, [r3, #4]
24010608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401060c:	d006      	beq.n	2401061c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
2401060e:	687b      	ldr	r3, [r7, #4]
24010610:	685a      	ldr	r2, [r3, #4]
24010612:	687b      	ldr	r3, [r7, #4]
24010614:	681b      	ldr	r3, [r3, #0]
24010616:	b2d2      	uxtb	r2, r2
24010618:	629a      	str	r2, [r3, #40]	; 0x28
2401061a:	e003      	b.n	24010624 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
2401061c:	687b      	ldr	r3, [r7, #4]
2401061e:	681b      	ldr	r3, [r3, #0]
24010620:	2200      	movs	r2, #0
24010622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
24010624:	687b      	ldr	r3, [r7, #4]
24010626:	681b      	ldr	r3, [r3, #0]
24010628:	2200      	movs	r2, #0
2401062a:	625a      	str	r2, [r3, #36]	; 0x24
}
2401062c:	bf00      	nop
2401062e:	3714      	adds	r7, #20
24010630:	46bd      	mov	sp, r7
24010632:	f85d 7b04 	ldr.w	r7, [sp], #4
24010636:	4770      	bx	lr

24010638 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
24010638:	b480      	push	{r7}
2401063a:	af00      	add	r7, sp, #0
}
2401063c:	bf00      	nop
2401063e:	46bd      	mov	sp, r7
24010640:	f85d 7b04 	ldr.w	r7, [sp], #4
24010644:	4770      	bx	lr
	...

24010648 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24010648:	b480      	push	{r7}
2401064a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
2401064c:	4b05      	ldr	r3, [pc, #20]	; (24010664 <HAL_PWR_EnableBkUpAccess+0x1c>)
2401064e:	681b      	ldr	r3, [r3, #0]
24010650:	4a04      	ldr	r2, [pc, #16]	; (24010664 <HAL_PWR_EnableBkUpAccess+0x1c>)
24010652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24010656:	6013      	str	r3, [r2, #0]
}
24010658:	bf00      	nop
2401065a:	46bd      	mov	sp, r7
2401065c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010660:	4770      	bx	lr
24010662:	bf00      	nop
24010664:	58024800 	.word	0x58024800

24010668 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
24010668:	b480      	push	{r7}
2401066a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
2401066c:	4b05      	ldr	r3, [pc, #20]	; (24010684 <HAL_PWR_DisableBkUpAccess+0x1c>)
2401066e:	681b      	ldr	r3, [r3, #0]
24010670:	4a04      	ldr	r2, [pc, #16]	; (24010684 <HAL_PWR_DisableBkUpAccess+0x1c>)
24010672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24010676:	6013      	str	r3, [r2, #0]
}
24010678:	bf00      	nop
2401067a:	46bd      	mov	sp, r7
2401067c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010680:	4770      	bx	lr
24010682:	bf00      	nop
24010684:	58024800 	.word	0x58024800

24010688 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
24010688:	b480      	push	{r7}
2401068a:	b083      	sub	sp, #12
2401068c:	af00      	add	r7, sp, #0
2401068e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
24010690:	687b      	ldr	r3, [r7, #4]
24010692:	2b00      	cmp	r3, #0
24010694:	d069      	beq.n	2401076a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
24010696:	4b38      	ldr	r3, [pc, #224]	; (24010778 <HAL_PWR_ConfigPVD+0xf0>)
24010698:	681b      	ldr	r3, [r3, #0]
2401069a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
2401069e:	687b      	ldr	r3, [r7, #4]
240106a0:	681b      	ldr	r3, [r3, #0]
240106a2:	4935      	ldr	r1, [pc, #212]	; (24010778 <HAL_PWR_ConfigPVD+0xf0>)
240106a4:	4313      	orrs	r3, r2
240106a6:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
240106a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240106ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240106b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240106b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240106b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
240106bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240106c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240106c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240106c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240106cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
240106d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240106d4:	681b      	ldr	r3, [r3, #0]
240106d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240106da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240106de:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
240106e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240106e4:	685b      	ldr	r3, [r3, #4]
240106e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240106ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240106ee:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
240106f0:	687b      	ldr	r3, [r7, #4]
240106f2:	685b      	ldr	r3, [r3, #4]
240106f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240106f8:	2b00      	cmp	r3, #0
240106fa:	d009      	beq.n	24010710 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
240106fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24010704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401070c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
24010710:	687b      	ldr	r3, [r7, #4]
24010712:	685b      	ldr	r3, [r3, #4]
24010714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24010718:	2b00      	cmp	r3, #0
2401071a:	d009      	beq.n	24010730 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
2401071c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24010724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401072c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
24010730:	687b      	ldr	r3, [r7, #4]
24010732:	685b      	ldr	r3, [r3, #4]
24010734:	f003 0301 	and.w	r3, r3, #1
24010738:	2b00      	cmp	r3, #0
2401073a:	d007      	beq.n	2401074c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
2401073c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010740:	681b      	ldr	r3, [r3, #0]
24010742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401074a:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
2401074c:	687b      	ldr	r3, [r7, #4]
2401074e:	685b      	ldr	r3, [r3, #4]
24010750:	f003 0302 	and.w	r3, r3, #2
24010754:	2b00      	cmp	r3, #0
24010756:	d009      	beq.n	2401076c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
24010758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401075c:	685b      	ldr	r3, [r3, #4]
2401075e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010766:	6053      	str	r3, [r2, #4]
24010768:	e000      	b.n	2401076c <HAL_PWR_ConfigPVD+0xe4>
    return;
2401076a:	bf00      	nop
  }
}
2401076c:	370c      	adds	r7, #12
2401076e:	46bd      	mov	sp, r7
24010770:	f85d 7b04 	ldr.w	r7, [sp], #4
24010774:	4770      	bx	lr
24010776:	bf00      	nop
24010778:	58024800 	.word	0x58024800

2401077c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
2401077c:	b480      	push	{r7}
2401077e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
24010780:	4b05      	ldr	r3, [pc, #20]	; (24010798 <HAL_PWR_EnablePVD+0x1c>)
24010782:	681b      	ldr	r3, [r3, #0]
24010784:	4a04      	ldr	r2, [pc, #16]	; (24010798 <HAL_PWR_EnablePVD+0x1c>)
24010786:	f043 0310 	orr.w	r3, r3, #16
2401078a:	6013      	str	r3, [r2, #0]
}
2401078c:	bf00      	nop
2401078e:	46bd      	mov	sp, r7
24010790:	f85d 7b04 	ldr.w	r7, [sp], #4
24010794:	4770      	bx	lr
24010796:	bf00      	nop
24010798:	58024800 	.word	0x58024800

2401079c <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
2401079c:	b480      	push	{r7}
2401079e:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
240107a0:	4b05      	ldr	r3, [pc, #20]	; (240107b8 <HAL_PWR_DisablePVD+0x1c>)
240107a2:	681b      	ldr	r3, [r3, #0]
240107a4:	4a04      	ldr	r2, [pc, #16]	; (240107b8 <HAL_PWR_DisablePVD+0x1c>)
240107a6:	f023 0310 	bic.w	r3, r3, #16
240107aa:	6013      	str	r3, [r2, #0]
}
240107ac:	bf00      	nop
240107ae:	46bd      	mov	sp, r7
240107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240107b4:	4770      	bx	lr
240107b6:	bf00      	nop
240107b8:	58024800 	.word	0x58024800

240107bc <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
240107bc:	b480      	push	{r7}
240107be:	b083      	sub	sp, #12
240107c0:	af00      	add	r7, sp, #0
240107c2:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
240107c4:	4b06      	ldr	r3, [pc, #24]	; (240107e0 <HAL_PWR_EnableWakeUpPin+0x24>)
240107c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240107c8:	4b06      	ldr	r3, [pc, #24]	; (240107e4 <HAL_PWR_EnableWakeUpPin+0x28>)
240107ca:	4013      	ands	r3, r2
240107cc:	4904      	ldr	r1, [pc, #16]	; (240107e0 <HAL_PWR_EnableWakeUpPin+0x24>)
240107ce:	687a      	ldr	r2, [r7, #4]
240107d0:	4313      	orrs	r3, r2
240107d2:	628b      	str	r3, [r1, #40]	; 0x28
}
240107d4:	bf00      	nop
240107d6:	370c      	adds	r7, #12
240107d8:	46bd      	mov	sp, r7
240107da:	f85d 7b04 	ldr.w	r7, [sp], #4
240107de:	4770      	bx	lr
240107e0:	58024800 	.word	0x58024800
240107e4:	f000c0c0 	.word	0xf000c0c0

240107e8 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
240107e8:	b480      	push	{r7}
240107ea:	b083      	sub	sp, #12
240107ec:	af00      	add	r7, sp, #0
240107ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
240107f0:	4b07      	ldr	r3, [pc, #28]	; (24010810 <HAL_PWR_DisableWakeUpPin+0x28>)
240107f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240107f4:	687b      	ldr	r3, [r7, #4]
240107f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240107fa:	43db      	mvns	r3, r3
240107fc:	4904      	ldr	r1, [pc, #16]	; (24010810 <HAL_PWR_DisableWakeUpPin+0x28>)
240107fe:	4013      	ands	r3, r2
24010800:	628b      	str	r3, [r1, #40]	; 0x28
}
24010802:	bf00      	nop
24010804:	370c      	adds	r7, #12
24010806:	46bd      	mov	sp, r7
24010808:	f85d 7b04 	ldr.w	r7, [sp], #4
2401080c:	4770      	bx	lr
2401080e:	bf00      	nop
24010810:	58024800 	.word	0x58024800

24010814 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
24010814:	b480      	push	{r7}
24010816:	b083      	sub	sp, #12
24010818:	af00      	add	r7, sp, #0
2401081a:	6078      	str	r0, [r7, #4]
2401081c:	460b      	mov	r3, r1
2401081e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010820:	4b08      	ldr	r3, [pc, #32]	; (24010844 <HAL_PWR_EnterSLEEPMode+0x30>)
24010822:	691b      	ldr	r3, [r3, #16]
24010824:	4a07      	ldr	r2, [pc, #28]	; (24010844 <HAL_PWR_EnterSLEEPMode+0x30>)
24010826:	f023 0304 	bic.w	r3, r3, #4
2401082a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
2401082c:	78fb      	ldrb	r3, [r7, #3]
2401082e:	2b01      	cmp	r3, #1
24010830:	d101      	bne.n	24010836 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24010832:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
24010834:	e000      	b.n	24010838 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
24010836:	bf20      	wfe
}
24010838:	bf00      	nop
2401083a:	370c      	adds	r7, #12
2401083c:	46bd      	mov	sp, r7
2401083e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010842:	4770      	bx	lr
24010844:	e000ed00 	.word	0xe000ed00

24010848 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
24010848:	b480      	push	{r7}
2401084a:	b083      	sub	sp, #12
2401084c:	af00      	add	r7, sp, #0
2401084e:	6078      	str	r0, [r7, #4]
24010850:	460b      	mov	r3, r1
24010852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24010854:	4b18      	ldr	r3, [pc, #96]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
24010856:	681b      	ldr	r3, [r3, #0]
24010858:	f023 0201 	bic.w	r2, r3, #1
2401085c:	4916      	ldr	r1, [pc, #88]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
2401085e:	687b      	ldr	r3, [r7, #4]
24010860:	4313      	orrs	r3, r2
24010862:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24010864:	4b14      	ldr	r3, [pc, #80]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
24010866:	691b      	ldr	r3, [r3, #16]
24010868:	4a13      	ldr	r2, [pc, #76]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
2401086a:	f023 0305 	bic.w	r3, r3, #5
2401086e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24010870:	4b11      	ldr	r3, [pc, #68]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
24010872:	691b      	ldr	r3, [r3, #16]
24010874:	4a10      	ldr	r2, [pc, #64]	; (240108b8 <HAL_PWR_EnterSTOPMode+0x70>)
24010876:	f023 0302 	bic.w	r3, r3, #2
2401087a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401087c:	4b0f      	ldr	r3, [pc, #60]	; (240108bc <HAL_PWR_EnterSTOPMode+0x74>)
2401087e:	691b      	ldr	r3, [r3, #16]
24010880:	4a0e      	ldr	r2, [pc, #56]	; (240108bc <HAL_PWR_EnterSTOPMode+0x74>)
24010882:	f043 0304 	orr.w	r3, r3, #4
24010886:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24010888:	f3bf 8f4f 	dsb	sy
}
2401088c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401088e:	f3bf 8f6f 	isb	sy
}
24010892:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
24010894:	78fb      	ldrb	r3, [r7, #3]
24010896:	2b01      	cmp	r3, #1
24010898:	d101      	bne.n	2401089e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
2401089a:	bf30      	wfi
2401089c:	e000      	b.n	240108a0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
2401089e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240108a0:	4b06      	ldr	r3, [pc, #24]	; (240108bc <HAL_PWR_EnterSTOPMode+0x74>)
240108a2:	691b      	ldr	r3, [r3, #16]
240108a4:	4a05      	ldr	r2, [pc, #20]	; (240108bc <HAL_PWR_EnterSTOPMode+0x74>)
240108a6:	f023 0304 	bic.w	r3, r3, #4
240108aa:	6113      	str	r3, [r2, #16]
}
240108ac:	bf00      	nop
240108ae:	370c      	adds	r7, #12
240108b0:	46bd      	mov	sp, r7
240108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240108b6:	4770      	bx	lr
240108b8:	58024800 	.word	0x58024800
240108bc:	e000ed00 	.word	0xe000ed00

240108c0 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
240108c0:	b480      	push	{r7}
240108c2:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
240108c4:	4b0e      	ldr	r3, [pc, #56]	; (24010900 <HAL_PWR_EnterSTANDBYMode+0x40>)
240108c6:	691b      	ldr	r3, [r3, #16]
240108c8:	4a0d      	ldr	r2, [pc, #52]	; (24010900 <HAL_PWR_EnterSTANDBYMode+0x40>)
240108ca:	f043 0305 	orr.w	r3, r3, #5
240108ce:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
240108d0:	4b0b      	ldr	r3, [pc, #44]	; (24010900 <HAL_PWR_EnterSTANDBYMode+0x40>)
240108d2:	691b      	ldr	r3, [r3, #16]
240108d4:	4a0a      	ldr	r2, [pc, #40]	; (24010900 <HAL_PWR_EnterSTANDBYMode+0x40>)
240108d6:	f043 0302 	orr.w	r3, r3, #2
240108da:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240108dc:	4b09      	ldr	r3, [pc, #36]	; (24010904 <HAL_PWR_EnterSTANDBYMode+0x44>)
240108de:	691b      	ldr	r3, [r3, #16]
240108e0:	4a08      	ldr	r2, [pc, #32]	; (24010904 <HAL_PWR_EnterSTANDBYMode+0x44>)
240108e2:	f043 0304 	orr.w	r3, r3, #4
240108e6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
240108e8:	f3bf 8f4f 	dsb	sy
}
240108ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240108ee:	f3bf 8f6f 	isb	sy
}
240108f2:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
240108f4:	bf30      	wfi
}
240108f6:	bf00      	nop
240108f8:	46bd      	mov	sp, r7
240108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240108fe:	4770      	bx	lr
24010900:	58024800 	.word	0x58024800
24010904:	e000ed00 	.word	0xe000ed00

24010908 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
24010908:	b480      	push	{r7}
2401090a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
2401090c:	4b05      	ldr	r3, [pc, #20]	; (24010924 <HAL_PWR_EnableSleepOnExit+0x1c>)
2401090e:	691b      	ldr	r3, [r3, #16]
24010910:	4a04      	ldr	r2, [pc, #16]	; (24010924 <HAL_PWR_EnableSleepOnExit+0x1c>)
24010912:	f043 0302 	orr.w	r3, r3, #2
24010916:	6113      	str	r3, [r2, #16]
}
24010918:	bf00      	nop
2401091a:	46bd      	mov	sp, r7
2401091c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010920:	4770      	bx	lr
24010922:	bf00      	nop
24010924:	e000ed00 	.word	0xe000ed00

24010928 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
24010928:	b480      	push	{r7}
2401092a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
2401092c:	4b05      	ldr	r3, [pc, #20]	; (24010944 <HAL_PWR_DisableSleepOnExit+0x1c>)
2401092e:	691b      	ldr	r3, [r3, #16]
24010930:	4a04      	ldr	r2, [pc, #16]	; (24010944 <HAL_PWR_DisableSleepOnExit+0x1c>)
24010932:	f023 0302 	bic.w	r3, r3, #2
24010936:	6113      	str	r3, [r2, #16]
}
24010938:	bf00      	nop
2401093a:	46bd      	mov	sp, r7
2401093c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010940:	4770      	bx	lr
24010942:	bf00      	nop
24010944:	e000ed00 	.word	0xe000ed00

24010948 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
24010948:	b480      	push	{r7}
2401094a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
2401094c:	4b05      	ldr	r3, [pc, #20]	; (24010964 <HAL_PWR_EnableSEVOnPend+0x1c>)
2401094e:	691b      	ldr	r3, [r3, #16]
24010950:	4a04      	ldr	r2, [pc, #16]	; (24010964 <HAL_PWR_EnableSEVOnPend+0x1c>)
24010952:	f043 0310 	orr.w	r3, r3, #16
24010956:	6113      	str	r3, [r2, #16]
}
24010958:	bf00      	nop
2401095a:	46bd      	mov	sp, r7
2401095c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010960:	4770      	bx	lr
24010962:	bf00      	nop
24010964:	e000ed00 	.word	0xe000ed00

24010968 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
24010968:	b480      	push	{r7}
2401096a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
2401096c:	4b05      	ldr	r3, [pc, #20]	; (24010984 <HAL_PWR_DisableSEVOnPend+0x1c>)
2401096e:	691b      	ldr	r3, [r3, #16]
24010970:	4a04      	ldr	r2, [pc, #16]	; (24010984 <HAL_PWR_DisableSEVOnPend+0x1c>)
24010972:	f023 0310 	bic.w	r3, r3, #16
24010976:	6113      	str	r3, [r2, #16]
}
24010978:	bf00      	nop
2401097a:	46bd      	mov	sp, r7
2401097c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010980:	4770      	bx	lr
24010982:	bf00      	nop
24010984:	e000ed00 	.word	0xe000ed00

24010988 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
24010988:	b580      	push	{r7, lr}
2401098a:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2401098c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24010994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24010998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2401099c:	d10b      	bne.n	240109b6 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2401099e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240109a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240109a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240109aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240109ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
240109b2:	f000 f802 	bl	240109ba <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
240109b6:	bf00      	nop
240109b8:	bd80      	pop	{r7, pc}

240109ba <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
240109ba:	b480      	push	{r7}
240109bc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
240109be:	bf00      	nop
240109c0:	46bd      	mov	sp, r7
240109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240109c6:	4770      	bx	lr

240109c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240109c8:	b580      	push	{r7, lr}
240109ca:	b084      	sub	sp, #16
240109cc:	af00      	add	r7, sp, #0
240109ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240109d0:	4b19      	ldr	r3, [pc, #100]	; (24010a38 <HAL_PWREx_ConfigSupply+0x70>)
240109d2:	68db      	ldr	r3, [r3, #12]
240109d4:	f003 0304 	and.w	r3, r3, #4
240109d8:	2b04      	cmp	r3, #4
240109da:	d00a      	beq.n	240109f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240109dc:	4b16      	ldr	r3, [pc, #88]	; (24010a38 <HAL_PWREx_ConfigSupply+0x70>)
240109de:	68db      	ldr	r3, [r3, #12]
240109e0:	f003 0307 	and.w	r3, r3, #7
240109e4:	687a      	ldr	r2, [r7, #4]
240109e6:	429a      	cmp	r2, r3
240109e8:	d001      	beq.n	240109ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240109ea:	2301      	movs	r3, #1
240109ec:	e01f      	b.n	24010a2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
240109ee:	2300      	movs	r3, #0
240109f0:	e01d      	b.n	24010a2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240109f2:	4b11      	ldr	r3, [pc, #68]	; (24010a38 <HAL_PWREx_ConfigSupply+0x70>)
240109f4:	68db      	ldr	r3, [r3, #12]
240109f6:	f023 0207 	bic.w	r2, r3, #7
240109fa:	490f      	ldr	r1, [pc, #60]	; (24010a38 <HAL_PWREx_ConfigSupply+0x70>)
240109fc:	687b      	ldr	r3, [r7, #4]
240109fe:	4313      	orrs	r3, r2
24010a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24010a02:	f7f1 fba3 	bl	2400214c <HAL_GetTick>
24010a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010a08:	e009      	b.n	24010a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010a0a:	f7f1 fb9f 	bl	2400214c <HAL_GetTick>
24010a0e:	4602      	mov	r2, r0
24010a10:	68fb      	ldr	r3, [r7, #12]
24010a12:	1ad3      	subs	r3, r2, r3
24010a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010a18:	d901      	bls.n	24010a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24010a1a:	2301      	movs	r3, #1
24010a1c:	e007      	b.n	24010a2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010a1e:	4b06      	ldr	r3, [pc, #24]	; (24010a38 <HAL_PWREx_ConfigSupply+0x70>)
24010a20:	685b      	ldr	r3, [r3, #4]
24010a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010a2a:	d1ee      	bne.n	24010a0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24010a2c:	2300      	movs	r3, #0
}
24010a2e:	4618      	mov	r0, r3
24010a30:	3710      	adds	r7, #16
24010a32:	46bd      	mov	sp, r7
24010a34:	bd80      	pop	{r7, pc}
24010a36:	bf00      	nop
24010a38:	58024800 	.word	0x58024800

24010a3c <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
24010a3c:	b480      	push	{r7}
24010a3e:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
24010a40:	4b04      	ldr	r3, [pc, #16]	; (24010a54 <HAL_PWREx_GetSupplyConfig+0x18>)
24010a42:	68db      	ldr	r3, [r3, #12]
24010a44:	f003 0307 	and.w	r3, r3, #7
}
24010a48:	4618      	mov	r0, r3
24010a4a:	46bd      	mov	sp, r7
24010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010a50:	4770      	bx	lr
24010a52:	bf00      	nop
24010a54:	58024800 	.word	0x58024800

24010a58 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
24010a58:	b580      	push	{r7, lr}
24010a5a:	b084      	sub	sp, #16
24010a5c:	af00      	add	r7, sp, #0
24010a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
24010a60:	4b3f      	ldr	r3, [pc, #252]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010a62:	685b      	ldr	r3, [r3, #4]
24010a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24010a68:	687a      	ldr	r2, [r7, #4]
24010a6a:	429a      	cmp	r2, r3
24010a6c:	d101      	bne.n	24010a72 <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
24010a6e:	2300      	movs	r3, #0
24010a70:	e072      	b.n	24010b58 <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
24010a72:	687b      	ldr	r3, [r7, #4]
24010a74:	2b00      	cmp	r3, #0
24010a76:	d129      	bne.n	24010acc <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
24010a78:	4b39      	ldr	r3, [pc, #228]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010a7a:	68db      	ldr	r3, [r3, #12]
24010a7c:	f003 0302 	and.w	r3, r3, #2
24010a80:	2b02      	cmp	r3, #2
24010a82:	d121      	bne.n	24010ac8 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
24010a84:	4b36      	ldr	r3, [pc, #216]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010a86:	699b      	ldr	r3, [r3, #24]
24010a88:	4a35      	ldr	r2, [pc, #212]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24010a8e:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
24010a90:	f7f1 fb5c 	bl	2400214c <HAL_GetTick>
24010a94:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010a96:	e009      	b.n	24010aac <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010a98:	f7f1 fb58 	bl	2400214c <HAL_GetTick>
24010a9c:	4602      	mov	r2, r0
24010a9e:	68fb      	ldr	r3, [r7, #12]
24010aa0:	1ad3      	subs	r3, r2, r3
24010aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010aa6:	d901      	bls.n	24010aac <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
24010aa8:	2301      	movs	r3, #1
24010aaa:	e055      	b.n	24010b58 <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010aac:	4b2c      	ldr	r3, [pc, #176]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010aae:	685b      	ldr	r3, [r3, #4]
24010ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010ab8:	d1ee      	bne.n	24010a98 <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24010aba:	4b2a      	ldr	r3, [pc, #168]	; (24010b64 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010abe:	4a29      	ldr	r2, [pc, #164]	; (24010b64 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010ac0:	f043 0301 	orr.w	r3, r3, #1
24010ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
24010ac6:	e031      	b.n	24010b2c <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
24010ac8:	2301      	movs	r3, #1
24010aca:	e045      	b.n	24010b58 <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
24010acc:	4b24      	ldr	r3, [pc, #144]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010ace:	685b      	ldr	r3, [r3, #4]
24010ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24010ad4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
24010ad8:	d120      	bne.n	24010b1c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
24010ada:	4b22      	ldr	r3, [pc, #136]	; (24010b64 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010ade:	f003 0301 	and.w	r3, r3, #1
24010ae2:	2b00      	cmp	r3, #0
24010ae4:	d01a      	beq.n	24010b1c <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24010ae6:	4b1f      	ldr	r3, [pc, #124]	; (24010b64 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010aea:	4a1e      	ldr	r2, [pc, #120]	; (24010b64 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010aec:	f023 0301 	bic.w	r3, r3, #1
24010af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
24010af2:	f7f1 fb2b 	bl	2400214c <HAL_GetTick>
24010af6:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010af8:	e009      	b.n	24010b0e <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010afa:	f7f1 fb27 	bl	2400214c <HAL_GetTick>
24010afe:	4602      	mov	r2, r0
24010b00:	68fb      	ldr	r3, [r7, #12]
24010b02:	1ad3      	subs	r3, r2, r3
24010b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010b08:	d901      	bls.n	24010b0e <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
24010b0a:	2301      	movs	r3, #1
24010b0c:	e024      	b.n	24010b58 <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010b0e:	4b14      	ldr	r3, [pc, #80]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b10:	685b      	ldr	r3, [r3, #4]
24010b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010b1a:	d1ee      	bne.n	24010afa <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
24010b1c:	4b10      	ldr	r3, [pc, #64]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b1e:	699b      	ldr	r3, [r3, #24]
24010b20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24010b24:	490e      	ldr	r1, [pc, #56]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b26:	687b      	ldr	r3, [r7, #4]
24010b28:	4313      	orrs	r3, r2
24010b2a:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
24010b2c:	f7f1 fb0e 	bl	2400214c <HAL_GetTick>
24010b30:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010b32:	e009      	b.n	24010b48 <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24010b34:	f7f1 fb0a 	bl	2400214c <HAL_GetTick>
24010b38:	4602      	mov	r2, r0
24010b3a:	68fb      	ldr	r3, [r7, #12]
24010b3c:	1ad3      	subs	r3, r2, r3
24010b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010b42:	d901      	bls.n	24010b48 <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
24010b44:	2301      	movs	r3, #1
24010b46:	e007      	b.n	24010b58 <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010b48:	4b05      	ldr	r3, [pc, #20]	; (24010b60 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b4a:	685b      	ldr	r3, [r3, #4]
24010b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010b54:	d1ee      	bne.n	24010b34 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
24010b56:	2300      	movs	r3, #0
}
24010b58:	4618      	mov	r0, r3
24010b5a:	3710      	adds	r7, #16
24010b5c:	46bd      	mov	sp, r7
24010b5e:	bd80      	pop	{r7, pc}
24010b60:	58024800 	.word	0x58024800
24010b64:	58000400 	.word	0x58000400

24010b68 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
24010b68:	b480      	push	{r7}
24010b6a:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
24010b6c:	4b04      	ldr	r3, [pc, #16]	; (24010b80 <HAL_PWREx_GetVoltageRange+0x18>)
24010b6e:	685b      	ldr	r3, [r3, #4]
24010b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24010b74:	4618      	mov	r0, r3
24010b76:	46bd      	mov	sp, r7
24010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
24010b7c:	4770      	bx	lr
24010b7e:	bf00      	nop
24010b80:	58024800 	.word	0x58024800

24010b84 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
24010b84:	b480      	push	{r7}
24010b86:	b083      	sub	sp, #12
24010b88:	af00      	add	r7, sp, #0
24010b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
24010b8c:	4b07      	ldr	r3, [pc, #28]	; (24010bac <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24010b8e:	681b      	ldr	r3, [r3, #0]
24010b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24010b94:	4905      	ldr	r1, [pc, #20]	; (24010bac <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24010b96:	687b      	ldr	r3, [r7, #4]
24010b98:	4313      	orrs	r3, r2
24010b9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
24010b9c:	2300      	movs	r3, #0
}
24010b9e:	4618      	mov	r0, r3
24010ba0:	370c      	adds	r7, #12
24010ba2:	46bd      	mov	sp, r7
24010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ba8:	4770      	bx	lr
24010baa:	bf00      	nop
24010bac:	58024800 	.word	0x58024800

24010bb0 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
24010bb0:	b480      	push	{r7}
24010bb2:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
24010bb4:	4b04      	ldr	r3, [pc, #16]	; (24010bc8 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
24010bb6:	681b      	ldr	r3, [r3, #0]
24010bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24010bbc:	4618      	mov	r0, r3
24010bbe:	46bd      	mov	sp, r7
24010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010bc4:	4770      	bx	lr
24010bc6:	bf00      	nop
24010bc8:	58024800 	.word	0x58024800

24010bcc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
24010bcc:	b480      	push	{r7}
24010bce:	b085      	sub	sp, #20
24010bd0:	af00      	add	r7, sp, #0
24010bd2:	60f8      	str	r0, [r7, #12]
24010bd4:	460b      	mov	r3, r1
24010bd6:	607a      	str	r2, [r7, #4]
24010bd8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24010bda:	4b20      	ldr	r3, [pc, #128]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010bdc:	681b      	ldr	r3, [r3, #0]
24010bde:	f023 0201 	bic.w	r2, r3, #1
24010be2:	491e      	ldr	r1, [pc, #120]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010be4:	68fb      	ldr	r3, [r7, #12]
24010be6:	4313      	orrs	r3, r2
24010be8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
24010bea:	687b      	ldr	r3, [r7, #4]
24010bec:	2b00      	cmp	r3, #0
24010bee:	d11e      	bne.n	24010c2e <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
24010bf0:	4b1a      	ldr	r3, [pc, #104]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010bf2:	691b      	ldr	r3, [r3, #16]
24010bf4:	4a19      	ldr	r2, [pc, #100]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010bf6:	f023 0301 	bic.w	r3, r3, #1
24010bfa:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010bfc:	4b18      	ldr	r3, [pc, #96]	; (24010c60 <HAL_PWREx_EnterSTOPMode+0x94>)
24010bfe:	691b      	ldr	r3, [r3, #16]
24010c00:	4a17      	ldr	r2, [pc, #92]	; (24010c60 <HAL_PWREx_EnterSTOPMode+0x94>)
24010c02:	f043 0304 	orr.w	r3, r3, #4
24010c06:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24010c08:	f3bf 8f4f 	dsb	sy
}
24010c0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24010c0e:	f3bf 8f6f 	isb	sy
}
24010c12:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24010c14:	7afb      	ldrb	r3, [r7, #11]
24010c16:	2b01      	cmp	r3, #1
24010c18:	d101      	bne.n	24010c1e <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
24010c1a:	bf30      	wfi
24010c1c:	e000      	b.n	24010c20 <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
24010c1e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010c20:	4b0f      	ldr	r3, [pc, #60]	; (24010c60 <HAL_PWREx_EnterSTOPMode+0x94>)
24010c22:	691b      	ldr	r3, [r3, #16]
24010c24:	4a0e      	ldr	r2, [pc, #56]	; (24010c60 <HAL_PWREx_EnterSTOPMode+0x94>)
24010c26:	f023 0304 	bic.w	r3, r3, #4
24010c2a:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
24010c2c:	e00f      	b.n	24010c4e <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
24010c2e:	687b      	ldr	r3, [r7, #4]
24010c30:	2b01      	cmp	r3, #1
24010c32:	d106      	bne.n	24010c42 <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24010c34:	4b09      	ldr	r3, [pc, #36]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c36:	691b      	ldr	r3, [r3, #16]
24010c38:	4a08      	ldr	r2, [pc, #32]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c3a:	f023 0302 	bic.w	r3, r3, #2
24010c3e:	6113      	str	r3, [r2, #16]
}
24010c40:	e005      	b.n	24010c4e <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24010c42:	4b06      	ldr	r3, [pc, #24]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c44:	691b      	ldr	r3, [r3, #16]
24010c46:	4a05      	ldr	r2, [pc, #20]	; (24010c5c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c48:	f023 0304 	bic.w	r3, r3, #4
24010c4c:	6113      	str	r3, [r2, #16]
}
24010c4e:	bf00      	nop
24010c50:	3714      	adds	r7, #20
24010c52:	46bd      	mov	sp, r7
24010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c58:	4770      	bx	lr
24010c5a:	bf00      	nop
24010c5c:	58024800 	.word	0x58024800
24010c60:	e000ed00 	.word	0xe000ed00

24010c64 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
24010c64:	b480      	push	{r7}
24010c66:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
24010c68:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
24010c6a:	bf00      	nop
24010c6c:	46bd      	mov	sp, r7
24010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c72:	4770      	bx	lr

24010c74 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
24010c74:	b480      	push	{r7}
24010c76:	b083      	sub	sp, #12
24010c78:	af00      	add	r7, sp, #0
24010c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
24010c7c:	687b      	ldr	r3, [r7, #4]
24010c7e:	2b00      	cmp	r3, #0
24010c80:	d10d      	bne.n	24010c9e <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
24010c82:	4b12      	ldr	r3, [pc, #72]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010c84:	691b      	ldr	r3, [r3, #16]
24010c86:	4a11      	ldr	r2, [pc, #68]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010c88:	f043 0301 	orr.w	r3, r3, #1
24010c8c:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010c8e:	4b10      	ldr	r3, [pc, #64]	; (24010cd0 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24010c90:	691b      	ldr	r3, [r3, #16]
24010c92:	4a0f      	ldr	r2, [pc, #60]	; (24010cd0 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24010c94:	f043 0304 	orr.w	r3, r3, #4
24010c98:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
24010c9a:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
24010c9c:	e00f      	b.n	24010cbe <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
24010c9e:	687b      	ldr	r3, [r7, #4]
24010ca0:	2b01      	cmp	r3, #1
24010ca2:	d106      	bne.n	24010cb2 <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
24010ca4:	4b09      	ldr	r3, [pc, #36]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010ca6:	691b      	ldr	r3, [r3, #16]
24010ca8:	4a08      	ldr	r2, [pc, #32]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010caa:	f043 0302 	orr.w	r3, r3, #2
24010cae:	6113      	str	r3, [r2, #16]
}
24010cb0:	e005      	b.n	24010cbe <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24010cb2:	4b06      	ldr	r3, [pc, #24]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010cb4:	691b      	ldr	r3, [r3, #16]
24010cb6:	4a05      	ldr	r2, [pc, #20]	; (24010ccc <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010cb8:	f043 0304 	orr.w	r3, r3, #4
24010cbc:	6113      	str	r3, [r2, #16]
}
24010cbe:	bf00      	nop
24010cc0:	370c      	adds	r7, #12
24010cc2:	46bd      	mov	sp, r7
24010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
24010cc8:	4770      	bx	lr
24010cca:	bf00      	nop
24010ccc:	58024800 	.word	0x58024800
24010cd0:	e000ed00 	.word	0xe000ed00

24010cd4 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
24010cd4:	b480      	push	{r7}
24010cd6:	b083      	sub	sp, #12
24010cd8:	af00      	add	r7, sp, #0
24010cda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
24010cdc:	4b06      	ldr	r3, [pc, #24]	; (24010cf8 <HAL_PWREx_ConfigD3Domain+0x24>)
24010cde:	691b      	ldr	r3, [r3, #16]
24010ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
24010ce4:	4904      	ldr	r1, [pc, #16]	; (24010cf8 <HAL_PWREx_ConfigD3Domain+0x24>)
24010ce6:	687b      	ldr	r3, [r7, #4]
24010ce8:	4313      	orrs	r3, r2
24010cea:	610b      	str	r3, [r1, #16]
}
24010cec:	bf00      	nop
24010cee:	370c      	adds	r7, #12
24010cf0:	46bd      	mov	sp, r7
24010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
24010cf6:	4770      	bx	lr
24010cf8:	58024800 	.word	0x58024800

24010cfc <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
24010cfc:	b480      	push	{r7}
24010cfe:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
24010d00:	4b05      	ldr	r3, [pc, #20]	; (24010d18 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24010d02:	681b      	ldr	r3, [r3, #0]
24010d04:	4a04      	ldr	r2, [pc, #16]	; (24010d18 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24010d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24010d0a:	6013      	str	r3, [r2, #0]
}
24010d0c:	bf00      	nop
24010d0e:	46bd      	mov	sp, r7
24010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d14:	4770      	bx	lr
24010d16:	bf00      	nop
24010d18:	58024800 	.word	0x58024800

24010d1c <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
24010d1c:	b480      	push	{r7}
24010d1e:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
24010d20:	4b05      	ldr	r3, [pc, #20]	; (24010d38 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24010d22:	681b      	ldr	r3, [r3, #0]
24010d24:	4a04      	ldr	r2, [pc, #16]	; (24010d38 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24010d26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24010d2a:	6013      	str	r3, [r2, #0]
}
24010d2c:	bf00      	nop
24010d2e:	46bd      	mov	sp, r7
24010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d34:	4770      	bx	lr
24010d36:	bf00      	nop
24010d38:	58024800 	.word	0x58024800

24010d3c <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
24010d3c:	b480      	push	{r7}
24010d3e:	b093      	sub	sp, #76	; 0x4c
24010d40:	af00      	add	r7, sp, #0
24010d42:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24010d44:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24010d48:	647b      	str	r3, [r7, #68]	; 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
24010d4a:	687b      	ldr	r3, [r7, #4]
24010d4c:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
24010d4e:	687b      	ldr	r3, [r7, #4]
24010d50:	6859      	ldr	r1, [r3, #4]
24010d52:	687b      	ldr	r3, [r7, #4]
24010d54:	681b      	ldr	r3, [r3, #0]
24010d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010d58:	693b      	ldr	r3, [r7, #16]
24010d5a:	fa93 f3a3 	rbit	r3, r3
24010d5e:	60fb      	str	r3, [r7, #12]
  return result;
24010d60:	68fb      	ldr	r3, [r7, #12]
24010d62:	617b      	str	r3, [r7, #20]
  if (value == 0U)
24010d64:	697b      	ldr	r3, [r7, #20]
24010d66:	2b00      	cmp	r3, #0
24010d68:	d101      	bne.n	24010d6e <HAL_PWREx_EnableWakeUpPin+0x32>
    return 32U;
24010d6a:	2320      	movs	r3, #32
24010d6c:	e003      	b.n	24010d76 <HAL_PWREx_EnableWakeUpPin+0x3a>
  return __builtin_clz(value);
24010d6e:	697b      	ldr	r3, [r7, #20]
24010d70:	fab3 f383 	clz	r3, r3
24010d74:	b2db      	uxtb	r3, r3
24010d76:	3308      	adds	r3, #8
24010d78:	f003 031f 	and.w	r3, r3, #31
24010d7c:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
24010d80:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
24010d82:	687b      	ldr	r3, [r7, #4]
24010d84:	6899      	ldr	r1, [r3, #8]
24010d86:	687b      	ldr	r3, [r7, #4]
24010d88:	681b      	ldr	r3, [r3, #0]
24010d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010d8c:	69fb      	ldr	r3, [r7, #28]
24010d8e:	fa93 f3a3 	rbit	r3, r3
24010d92:	61bb      	str	r3, [r7, #24]
  return result;
24010d94:	69bb      	ldr	r3, [r7, #24]
24010d96:	623b      	str	r3, [r7, #32]
  if (value == 0U)
24010d98:	6a3b      	ldr	r3, [r7, #32]
24010d9a:	2b00      	cmp	r3, #0
24010d9c:	d101      	bne.n	24010da2 <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
24010d9e:	2320      	movs	r3, #32
24010da0:	e003      	b.n	24010daa <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
24010da2:	6a3b      	ldr	r3, [r7, #32]
24010da4:	fab3 f383 	clz	r3, r3
24010da8:	b2db      	uxtb	r3, r3
24010daa:	3308      	adds	r3, #8
24010dac:	005b      	lsls	r3, r3, #1
24010dae:	f003 031e 	and.w	r3, r3, #30
24010db2:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
24010db6:	4313      	orrs	r3, r2
24010db8:	643b      	str	r3, [r7, #64]	; 0x40

  regMask   = sPinParams->WakeUpPin | \
24010dba:	687b      	ldr	r3, [r7, #4]
24010dbc:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
24010dbe:	687b      	ldr	r3, [r7, #4]
24010dc0:	681b      	ldr	r3, [r3, #0]
24010dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
24010dc6:	fa93 f3a3 	rbit	r3, r3
24010dca:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24010dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
24010dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24010dd2:	2b00      	cmp	r3, #0
24010dd4:	d101      	bne.n	24010dda <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
24010dd6:	2320      	movs	r3, #32
24010dd8:	e003      	b.n	24010de2 <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
24010dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24010ddc:	fab3 f383 	clz	r3, r3
24010de0:	b2db      	uxtb	r3, r3
24010de2:	f003 031f 	and.w	r3, r3, #31
24010de6:	f44f 7180 	mov.w	r1, #256	; 0x100
24010dea:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24010dee:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
24010df0:	687b      	ldr	r3, [r7, #4]
24010df2:	681b      	ldr	r3, [r3, #0]
24010df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24010df8:	fa93 f3a3 	rbit	r3, r3
24010dfc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
24010dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24010e00:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24010e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24010e04:	2b00      	cmp	r3, #0
24010e06:	d101      	bne.n	24010e0c <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
24010e08:	2320      	movs	r3, #32
24010e0a:	e003      	b.n	24010e14 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
24010e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24010e0e:	fab3 f383 	clz	r3, r3
24010e12:	b2db      	uxtb	r3, r3
24010e14:	005b      	lsls	r3, r3, #1
24010e16:	f003 031e 	and.w	r3, r3, #30
24010e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
24010e1c:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24010e20:	4313      	orrs	r3, r2
24010e22:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24010e24:	4b0e      	ldr	r3, [pc, #56]	; (24010e60 <HAL_PWREx_EnableWakeUpPin+0x124>)
24010e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24010e2a:	43db      	mvns	r3, r3
24010e2c:	401a      	ands	r2, r3
24010e2e:	490c      	ldr	r1, [pc, #48]	; (24010e60 <HAL_PWREx_EnableWakeUpPin+0x124>)
24010e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24010e32:	4313      	orrs	r3, r2
24010e34:	628b      	str	r3, [r1, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
24010e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24010e3e:	f023 52fc 	bic.w	r2, r3, #528482304	; 0x1f800000
24010e42:	687b      	ldr	r3, [r7, #4]
24010e44:	681b      	ldr	r3, [r3, #0]
24010e46:	05db      	lsls	r3, r3, #23
24010e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24010e4c:	4313      	orrs	r3, r2
24010e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
#endif /* !DUAL_CORE */
}
24010e52:	bf00      	nop
24010e54:	374c      	adds	r7, #76	; 0x4c
24010e56:	46bd      	mov	sp, r7
24010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
24010e5c:	4770      	bx	lr
24010e5e:	bf00      	nop
24010e60:	58024800 	.word	0x58024800

24010e64 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
24010e64:	b480      	push	{r7}
24010e66:	b083      	sub	sp, #12
24010e68:	af00      	add	r7, sp, #0
24010e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
24010e6c:	4b06      	ldr	r3, [pc, #24]	; (24010e88 <HAL_PWREx_DisableWakeUpPin+0x24>)
24010e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010e70:	687b      	ldr	r3, [r7, #4]
24010e72:	43db      	mvns	r3, r3
24010e74:	4904      	ldr	r1, [pc, #16]	; (24010e88 <HAL_PWREx_DisableWakeUpPin+0x24>)
24010e76:	4013      	ands	r3, r2
24010e78:	628b      	str	r3, [r1, #40]	; 0x28
}
24010e7a:	bf00      	nop
24010e7c:	370c      	adds	r7, #12
24010e7e:	46bd      	mov	sp, r7
24010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
24010e84:	4770      	bx	lr
24010e86:	bf00      	nop
24010e88:	58024800 	.word	0x58024800

24010e8c <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
24010e8c:	b480      	push	{r7}
24010e8e:	b083      	sub	sp, #12
24010e90:	af00      	add	r7, sp, #0
24010e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
24010e94:	4b04      	ldr	r3, [pc, #16]	; (24010ea8 <HAL_PWREx_GetWakeupFlag+0x1c>)
24010e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24010e98:	687b      	ldr	r3, [r7, #4]
24010e9a:	4013      	ands	r3, r2
}
24010e9c:	4618      	mov	r0, r3
24010e9e:	370c      	adds	r7, #12
24010ea0:	46bd      	mov	sp, r7
24010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ea6:	4770      	bx	lr
24010ea8:	58024800 	.word	0x58024800

24010eac <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
24010eac:	b480      	push	{r7}
24010eae:	b083      	sub	sp, #12
24010eb0:	af00      	add	r7, sp, #0
24010eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
24010eb4:	4b0a      	ldr	r3, [pc, #40]	; (24010ee0 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010eb6:	6a1a      	ldr	r2, [r3, #32]
24010eb8:	4909      	ldr	r1, [pc, #36]	; (24010ee0 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010eba:	687b      	ldr	r3, [r7, #4]
24010ebc:	4313      	orrs	r3, r2
24010ebe:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
24010ec0:	4b07      	ldr	r3, [pc, #28]	; (24010ee0 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24010ec4:	687b      	ldr	r3, [r7, #4]
24010ec6:	4013      	ands	r3, r2
24010ec8:	2b00      	cmp	r3, #0
24010eca:	d001      	beq.n	24010ed0 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
24010ecc:	2301      	movs	r3, #1
24010ece:	e000      	b.n	24010ed2 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
24010ed0:	2300      	movs	r3, #0
}
24010ed2:	4618      	mov	r0, r3
24010ed4:	370c      	adds	r7, #12
24010ed6:	46bd      	mov	sp, r7
24010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
24010edc:	4770      	bx	lr
24010ede:	bf00      	nop
24010ee0:	58024800 	.word	0x58024800

24010ee4 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
24010ee4:	b580      	push	{r7, lr}
24010ee6:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
24010ee8:	4b2a      	ldr	r3, [pc, #168]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010eec:	f003 0301 	and.w	r3, r3, #1
24010ef0:	2b00      	cmp	r3, #0
24010ef2:	d008      	beq.n	24010f06 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
24010ef4:	4b27      	ldr	r3, [pc, #156]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010ef6:	6a1b      	ldr	r3, [r3, #32]
24010ef8:	4a26      	ldr	r2, [pc, #152]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010efa:	f043 0301 	orr.w	r3, r3, #1
24010efe:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
24010f00:	f000 f84a 	bl	24010f98 <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
24010f04:	e043      	b.n	24010f8e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
24010f06:	4b23      	ldr	r3, [pc, #140]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010f0a:	f003 0302 	and.w	r3, r3, #2
24010f0e:	2b00      	cmp	r3, #0
24010f10:	d008      	beq.n	24010f24 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24010f12:	4b20      	ldr	r3, [pc, #128]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f14:	6a1b      	ldr	r3, [r3, #32]
24010f16:	4a1f      	ldr	r2, [pc, #124]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f18:	f043 0302 	orr.w	r3, r3, #2
24010f1c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
24010f1e:	f000 f842 	bl	24010fa6 <HAL_PWREx_WKUP2_Callback>
}
24010f22:	e034      	b.n	24010f8e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
24010f24:	4b1b      	ldr	r3, [pc, #108]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010f28:	f003 0304 	and.w	r3, r3, #4
24010f2c:	2b00      	cmp	r3, #0
24010f2e:	d008      	beq.n	24010f42 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
24010f30:	4b18      	ldr	r3, [pc, #96]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f32:	6a1b      	ldr	r3, [r3, #32]
24010f34:	4a17      	ldr	r2, [pc, #92]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f36:	f043 0304 	orr.w	r3, r3, #4
24010f3a:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
24010f3c:	f000 f83a 	bl	24010fb4 <HAL_PWREx_WKUP3_Callback>
}
24010f40:	e025      	b.n	24010f8e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24010f42:	4b14      	ldr	r3, [pc, #80]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010f46:	f003 0308 	and.w	r3, r3, #8
24010f4a:	2b00      	cmp	r3, #0
24010f4c:	d008      	beq.n	24010f60 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
24010f4e:	4b11      	ldr	r3, [pc, #68]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f50:	6a1b      	ldr	r3, [r3, #32]
24010f52:	4a10      	ldr	r2, [pc, #64]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f54:	f043 0308 	orr.w	r3, r3, #8
24010f58:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
24010f5a:	f000 f832 	bl	24010fc2 <HAL_PWREx_WKUP4_Callback>
}
24010f5e:	e016      	b.n	24010f8e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
24010f60:	4b0c      	ldr	r3, [pc, #48]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010f64:	f003 0310 	and.w	r3, r3, #16
24010f68:	2b00      	cmp	r3, #0
24010f6a:	d008      	beq.n	24010f7e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
24010f6c:	4b09      	ldr	r3, [pc, #36]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f6e:	6a1b      	ldr	r3, [r3, #32]
24010f70:	4a08      	ldr	r2, [pc, #32]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f72:	f043 0310 	orr.w	r3, r3, #16
24010f76:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
24010f78:	f000 f82a 	bl	24010fd0 <HAL_PWREx_WKUP5_Callback>
}
24010f7c:	e007      	b.n	24010f8e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
24010f7e:	4b05      	ldr	r3, [pc, #20]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f80:	6a1b      	ldr	r3, [r3, #32]
24010f82:	4a04      	ldr	r2, [pc, #16]	; (24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f84:	f043 0320 	orr.w	r3, r3, #32
24010f88:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
24010f8a:	f000 f828 	bl	24010fde <HAL_PWREx_WKUP6_Callback>
}
24010f8e:	bf00      	nop
24010f90:	bd80      	pop	{r7, pc}
24010f92:	bf00      	nop
24010f94:	58024800 	.word	0x58024800

24010f98 <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
24010f98:	b480      	push	{r7}
24010f9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
24010f9c:	bf00      	nop
24010f9e:	46bd      	mov	sp, r7
24010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fa4:	4770      	bx	lr

24010fa6 <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
24010fa6:	b480      	push	{r7}
24010fa8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
24010faa:	bf00      	nop
24010fac:	46bd      	mov	sp, r7
24010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fb2:	4770      	bx	lr

24010fb4 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
24010fb4:	b480      	push	{r7}
24010fb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
24010fb8:	bf00      	nop
24010fba:	46bd      	mov	sp, r7
24010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fc0:	4770      	bx	lr

24010fc2 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
24010fc2:	b480      	push	{r7}
24010fc4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
24010fc6:	bf00      	nop
24010fc8:	46bd      	mov	sp, r7
24010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fce:	4770      	bx	lr

24010fd0 <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
24010fd0:	b480      	push	{r7}
24010fd2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
24010fd4:	bf00      	nop
24010fd6:	46bd      	mov	sp, r7
24010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fdc:	4770      	bx	lr

24010fde <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
24010fde:	b480      	push	{r7}
24010fe0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
24010fe2:	bf00      	nop
24010fe4:	46bd      	mov	sp, r7
24010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
24010fea:	4770      	bx	lr

24010fec <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
24010fec:	b580      	push	{r7, lr}
24010fee:	b082      	sub	sp, #8
24010ff0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
24010ff2:	4b10      	ldr	r3, [pc, #64]	; (24011034 <HAL_PWREx_EnableBkUpReg+0x48>)
24010ff4:	689b      	ldr	r3, [r3, #8]
24010ff6:	4a0f      	ldr	r2, [pc, #60]	; (24011034 <HAL_PWREx_EnableBkUpReg+0x48>)
24010ff8:	f043 0301 	orr.w	r3, r3, #1
24010ffc:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
24010ffe:	f7f1 f8a5 	bl	2400214c <HAL_GetTick>
24011002:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
24011004:	e009      	b.n	2401101a <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24011006:	f7f1 f8a1 	bl	2400214c <HAL_GetTick>
2401100a:	4602      	mov	r2, r0
2401100c:	687b      	ldr	r3, [r7, #4]
2401100e:	1ad3      	subs	r3, r2, r3
24011010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011014:	d901      	bls.n	2401101a <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24011016:	2301      	movs	r3, #1
24011018:	e007      	b.n	2401102a <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
2401101a:	4b06      	ldr	r3, [pc, #24]	; (24011034 <HAL_PWREx_EnableBkUpReg+0x48>)
2401101c:	689b      	ldr	r3, [r3, #8]
2401101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011026:	d1ee      	bne.n	24011006 <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24011028:	2300      	movs	r3, #0
}
2401102a:	4618      	mov	r0, r3
2401102c:	3708      	adds	r7, #8
2401102e:	46bd      	mov	sp, r7
24011030:	bd80      	pop	{r7, pc}
24011032:	bf00      	nop
24011034:	58024800 	.word	0x58024800

24011038 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
24011038:	b580      	push	{r7, lr}
2401103a:	b082      	sub	sp, #8
2401103c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
2401103e:	4b10      	ldr	r3, [pc, #64]	; (24011080 <HAL_PWREx_DisableBkUpReg+0x48>)
24011040:	689b      	ldr	r3, [r3, #8]
24011042:	4a0f      	ldr	r2, [pc, #60]	; (24011080 <HAL_PWREx_DisableBkUpReg+0x48>)
24011044:	f023 0301 	bic.w	r3, r3, #1
24011048:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
2401104a:	f7f1 f87f 	bl	2400214c <HAL_GetTick>
2401104e:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24011050:	e009      	b.n	24011066 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24011052:	f7f1 f87b 	bl	2400214c <HAL_GetTick>
24011056:	4602      	mov	r2, r0
24011058:	687b      	ldr	r3, [r7, #4]
2401105a:	1ad3      	subs	r3, r2, r3
2401105c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011060:	d901      	bls.n	24011066 <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24011062:	2301      	movs	r3, #1
24011064:	e007      	b.n	24011076 <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24011066:	4b06      	ldr	r3, [pc, #24]	; (24011080 <HAL_PWREx_DisableBkUpReg+0x48>)
24011068:	689b      	ldr	r3, [r3, #8]
2401106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401106e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011072:	d0ee      	beq.n	24011052 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24011074:	2300      	movs	r3, #0
}
24011076:	4618      	mov	r0, r3
24011078:	3708      	adds	r7, #8
2401107a:	46bd      	mov	sp, r7
2401107c:	bd80      	pop	{r7, pc}
2401107e:	bf00      	nop
24011080:	58024800 	.word	0x58024800

24011084 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
24011084:	b580      	push	{r7, lr}
24011086:	b082      	sub	sp, #8
24011088:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
2401108a:	4b10      	ldr	r3, [pc, #64]	; (240110cc <HAL_PWREx_EnableUSBReg+0x48>)
2401108c:	68db      	ldr	r3, [r3, #12]
2401108e:	4a0f      	ldr	r2, [pc, #60]	; (240110cc <HAL_PWREx_EnableUSBReg+0x48>)
24011090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24011094:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24011096:	f7f1 f859 	bl	2400214c <HAL_GetTick>
2401109a:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
2401109c:	e009      	b.n	240110b2 <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
2401109e:	f7f1 f855 	bl	2400214c <HAL_GetTick>
240110a2:	4602      	mov	r2, r0
240110a4:	687b      	ldr	r3, [r7, #4]
240110a6:	1ad3      	subs	r3, r2, r3
240110a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240110ac:	d901      	bls.n	240110b2 <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
240110ae:	2301      	movs	r3, #1
240110b0:	e007      	b.n	240110c2 <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
240110b2:	4b06      	ldr	r3, [pc, #24]	; (240110cc <HAL_PWREx_EnableUSBReg+0x48>)
240110b4:	68db      	ldr	r3, [r3, #12]
240110b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
240110ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240110be:	d1ee      	bne.n	2401109e <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
240110c0:	2300      	movs	r3, #0
}
240110c2:	4618      	mov	r0, r3
240110c4:	3708      	adds	r7, #8
240110c6:	46bd      	mov	sp, r7
240110c8:	bd80      	pop	{r7, pc}
240110ca:	bf00      	nop
240110cc:	58024800 	.word	0x58024800

240110d0 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
240110d0:	b580      	push	{r7, lr}
240110d2:	b082      	sub	sp, #8
240110d4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
240110d6:	4b10      	ldr	r3, [pc, #64]	; (24011118 <HAL_PWREx_DisableUSBReg+0x48>)
240110d8:	68db      	ldr	r3, [r3, #12]
240110da:	4a0f      	ldr	r2, [pc, #60]	; (24011118 <HAL_PWREx_DisableUSBReg+0x48>)
240110dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
240110e0:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
240110e2:	f7f1 f833 	bl	2400214c <HAL_GetTick>
240110e6:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
240110e8:	e009      	b.n	240110fe <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240110ea:	f7f1 f82f 	bl	2400214c <HAL_GetTick>
240110ee:	4602      	mov	r2, r0
240110f0:	687b      	ldr	r3, [r7, #4]
240110f2:	1ad3      	subs	r3, r2, r3
240110f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240110f8:	d901      	bls.n	240110fe <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
240110fa:	2301      	movs	r3, #1
240110fc:	e007      	b.n	2401110e <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
240110fe:	4b06      	ldr	r3, [pc, #24]	; (24011118 <HAL_PWREx_DisableUSBReg+0x48>)
24011100:	68db      	ldr	r3, [r3, #12]
24011102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24011106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2401110a:	d0ee      	beq.n	240110ea <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
2401110c:	2300      	movs	r3, #0
}
2401110e:	4618      	mov	r0, r3
24011110:	3708      	adds	r7, #8
24011112:	46bd      	mov	sp, r7
24011114:	bd80      	pop	{r7, pc}
24011116:	bf00      	nop
24011118:	58024800 	.word	0x58024800

2401111c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
2401111c:	b480      	push	{r7}
2401111e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24011120:	4b05      	ldr	r3, [pc, #20]	; (24011138 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24011122:	68db      	ldr	r3, [r3, #12]
24011124:	4a04      	ldr	r2, [pc, #16]	; (24011138 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24011126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2401112a:	60d3      	str	r3, [r2, #12]
}
2401112c:	bf00      	nop
2401112e:	46bd      	mov	sp, r7
24011130:	f85d 7b04 	ldr.w	r7, [sp], #4
24011134:	4770      	bx	lr
24011136:	bf00      	nop
24011138:	58024800 	.word	0x58024800

2401113c <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
2401113c:	b480      	push	{r7}
2401113e:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24011140:	4b05      	ldr	r3, [pc, #20]	; (24011158 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24011142:	68db      	ldr	r3, [r3, #12]
24011144:	4a04      	ldr	r2, [pc, #16]	; (24011158 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24011146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2401114a:	60d3      	str	r3, [r2, #12]
}
2401114c:	bf00      	nop
2401114e:	46bd      	mov	sp, r7
24011150:	f85d 7b04 	ldr.w	r7, [sp], #4
24011154:	4770      	bx	lr
24011156:	bf00      	nop
24011158:	58024800 	.word	0x58024800

2401115c <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
2401115c:	b480      	push	{r7}
2401115e:	b083      	sub	sp, #12
24011160:	af00      	add	r7, sp, #0
24011162:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
24011164:	4b09      	ldr	r3, [pc, #36]	; (2401118c <HAL_PWREx_EnableBatteryCharging+0x30>)
24011166:	68db      	ldr	r3, [r3, #12]
24011168:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2401116c:	4907      	ldr	r1, [pc, #28]	; (2401118c <HAL_PWREx_EnableBatteryCharging+0x30>)
2401116e:	687b      	ldr	r3, [r7, #4]
24011170:	4313      	orrs	r3, r2
24011172:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
24011174:	4b05      	ldr	r3, [pc, #20]	; (2401118c <HAL_PWREx_EnableBatteryCharging+0x30>)
24011176:	68db      	ldr	r3, [r3, #12]
24011178:	4a04      	ldr	r2, [pc, #16]	; (2401118c <HAL_PWREx_EnableBatteryCharging+0x30>)
2401117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2401117e:	60d3      	str	r3, [r2, #12]
}
24011180:	bf00      	nop
24011182:	370c      	adds	r7, #12
24011184:	46bd      	mov	sp, r7
24011186:	f85d 7b04 	ldr.w	r7, [sp], #4
2401118a:	4770      	bx	lr
2401118c:	58024800 	.word	0x58024800

24011190 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
24011190:	b480      	push	{r7}
24011192:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
24011194:	4b05      	ldr	r3, [pc, #20]	; (240111ac <HAL_PWREx_DisableBatteryCharging+0x1c>)
24011196:	68db      	ldr	r3, [r3, #12]
24011198:	4a04      	ldr	r2, [pc, #16]	; (240111ac <HAL_PWREx_DisableBatteryCharging+0x1c>)
2401119a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2401119e:	60d3      	str	r3, [r2, #12]
}
240111a0:	bf00      	nop
240111a2:	46bd      	mov	sp, r7
240111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240111a8:	4770      	bx	lr
240111aa:	bf00      	nop
240111ac:	58024800 	.word	0x58024800

240111b0 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
240111b0:	b480      	push	{r7}
240111b2:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
240111b4:	4b05      	ldr	r3, [pc, #20]	; (240111cc <HAL_PWREx_EnableMonitoring+0x1c>)
240111b6:	689b      	ldr	r3, [r3, #8]
240111b8:	4a04      	ldr	r2, [pc, #16]	; (240111cc <HAL_PWREx_EnableMonitoring+0x1c>)
240111ba:	f043 0310 	orr.w	r3, r3, #16
240111be:	6093      	str	r3, [r2, #8]
}
240111c0:	bf00      	nop
240111c2:	46bd      	mov	sp, r7
240111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240111c8:	4770      	bx	lr
240111ca:	bf00      	nop
240111cc:	58024800 	.word	0x58024800

240111d0 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
240111d0:	b480      	push	{r7}
240111d2:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
240111d4:	4b05      	ldr	r3, [pc, #20]	; (240111ec <HAL_PWREx_DisableMonitoring+0x1c>)
240111d6:	689b      	ldr	r3, [r3, #8]
240111d8:	4a04      	ldr	r2, [pc, #16]	; (240111ec <HAL_PWREx_DisableMonitoring+0x1c>)
240111da:	f023 0310 	bic.w	r3, r3, #16
240111de:	6093      	str	r3, [r2, #8]
}
240111e0:	bf00      	nop
240111e2:	46bd      	mov	sp, r7
240111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240111e8:	4770      	bx	lr
240111ea:	bf00      	nop
240111ec:	58024800 	.word	0x58024800

240111f0 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
240111f0:	b480      	push	{r7}
240111f2:	b083      	sub	sp, #12
240111f4:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
240111f6:	4b0f      	ldr	r3, [pc, #60]	; (24011234 <HAL_PWREx_GetTemperatureLevel+0x44>)
240111f8:	689b      	ldr	r3, [r3, #8]
240111fa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
240111fe:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
24011200:	683b      	ldr	r3, [r7, #0]
24011202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24011206:	d103      	bne.n	24011210 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
24011208:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2401120c:	607b      	str	r3, [r7, #4]
2401120e:	e009      	b.n	24011224 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
24011210:	683b      	ldr	r3, [r7, #0]
24011212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24011216:	d103      	bne.n	24011220 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
24011218:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
2401121c:	607b      	str	r3, [r7, #4]
2401121e:	e001      	b.n	24011224 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
24011220:	2300      	movs	r3, #0
24011222:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
24011224:	687b      	ldr	r3, [r7, #4]
}
24011226:	4618      	mov	r0, r3
24011228:	370c      	adds	r7, #12
2401122a:	46bd      	mov	sp, r7
2401122c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011230:	4770      	bx	lr
24011232:	bf00      	nop
24011234:	58024800 	.word	0x58024800

24011238 <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
24011238:	b480      	push	{r7}
2401123a:	b083      	sub	sp, #12
2401123c:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
2401123e:	4b0f      	ldr	r3, [pc, #60]	; (2401127c <HAL_PWREx_GetVBATLevel+0x44>)
24011240:	689b      	ldr	r3, [r3, #8]
24011242:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24011246:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
24011248:	683b      	ldr	r3, [r7, #0]
2401124a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2401124e:	d103      	bne.n	24011258 <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24011250:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24011254:	607b      	str	r3, [r7, #4]
24011256:	e009      	b.n	2401126c <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
24011258:	683b      	ldr	r3, [r7, #0]
2401125a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2401125e:	d103      	bne.n	24011268 <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24011260:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24011264:	607b      	str	r3, [r7, #4]
24011266:	e001      	b.n	2401126c <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
24011268:	2300      	movs	r3, #0
2401126a:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
2401126c:	687b      	ldr	r3, [r7, #4]
}
2401126e:	4618      	mov	r0, r3
24011270:	370c      	adds	r7, #12
24011272:	46bd      	mov	sp, r7
24011274:	f85d 7b04 	ldr.w	r7, [sp], #4
24011278:	4770      	bx	lr
2401127a:	bf00      	nop
2401127c:	58024800 	.word	0x58024800

24011280 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24011280:	b480      	push	{r7}
24011282:	b083      	sub	sp, #12
24011284:	af00      	add	r7, sp, #0
24011286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
24011288:	4b37      	ldr	r3, [pc, #220]	; (24011368 <HAL_PWREx_ConfigAVD+0xe8>)
2401128a:	681b      	ldr	r3, [r3, #0]
2401128c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24011290:	687b      	ldr	r3, [r7, #4]
24011292:	681b      	ldr	r3, [r3, #0]
24011294:	4934      	ldr	r1, [pc, #208]	; (24011368 <HAL_PWREx_ConfigAVD+0xe8>)
24011296:	4313      	orrs	r3, r2
24011298:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
2401129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401129e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240112a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240112a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240112aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
240112ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240112b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240112b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240112ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240112be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
240112c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240112c6:	681b      	ldr	r3, [r3, #0]
240112c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240112cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240112d0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
240112d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240112d6:	685b      	ldr	r3, [r3, #4]
240112d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240112dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240112e0:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
240112e2:	687b      	ldr	r3, [r7, #4]
240112e4:	685b      	ldr	r3, [r3, #4]
240112e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240112ea:	2b00      	cmp	r3, #0
240112ec:	d009      	beq.n	24011302 <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
240112ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240112f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240112f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240112fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240112fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
24011302:	687b      	ldr	r3, [r7, #4]
24011304:	685b      	ldr	r3, [r3, #4]
24011306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2401130a:	2b00      	cmp	r3, #0
2401130c:	d009      	beq.n	24011322 <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
2401130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24011316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401131e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
24011322:	687b      	ldr	r3, [r7, #4]
24011324:	685b      	ldr	r3, [r3, #4]
24011326:	f003 0301 	and.w	r3, r3, #1
2401132a:	2b00      	cmp	r3, #0
2401132c:	d007      	beq.n	2401133e <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
2401132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011332:	681b      	ldr	r3, [r3, #0]
24011334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401133c:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
2401133e:	687b      	ldr	r3, [r7, #4]
24011340:	685b      	ldr	r3, [r3, #4]
24011342:	f003 0302 	and.w	r3, r3, #2
24011346:	2b00      	cmp	r3, #0
24011348:	d007      	beq.n	2401135a <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
2401134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401134e:	685b      	ldr	r3, [r3, #4]
24011350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011358:	6053      	str	r3, [r2, #4]
  }
}
2401135a:	bf00      	nop
2401135c:	370c      	adds	r7, #12
2401135e:	46bd      	mov	sp, r7
24011360:	f85d 7b04 	ldr.w	r7, [sp], #4
24011364:	4770      	bx	lr
24011366:	bf00      	nop
24011368:	58024800 	.word	0x58024800

2401136c <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
2401136c:	b480      	push	{r7}
2401136e:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011370:	4b05      	ldr	r3, [pc, #20]	; (24011388 <HAL_PWREx_EnableAVD+0x1c>)
24011372:	681b      	ldr	r3, [r3, #0]
24011374:	4a04      	ldr	r2, [pc, #16]	; (24011388 <HAL_PWREx_EnableAVD+0x1c>)
24011376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401137a:	6013      	str	r3, [r2, #0]
}
2401137c:	bf00      	nop
2401137e:	46bd      	mov	sp, r7
24011380:	f85d 7b04 	ldr.w	r7, [sp], #4
24011384:	4770      	bx	lr
24011386:	bf00      	nop
24011388:	58024800 	.word	0x58024800

2401138c <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
2401138c:	b480      	push	{r7}
2401138e:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011390:	4b05      	ldr	r3, [pc, #20]	; (240113a8 <HAL_PWREx_DisableAVD+0x1c>)
24011392:	681b      	ldr	r3, [r3, #0]
24011394:	4a04      	ldr	r2, [pc, #16]	; (240113a8 <HAL_PWREx_DisableAVD+0x1c>)
24011396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401139a:	6013      	str	r3, [r2, #0]
}
2401139c:	bf00      	nop
2401139e:	46bd      	mov	sp, r7
240113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240113a4:	4770      	bx	lr
240113a6:	bf00      	nop
240113a8:	58024800 	.word	0x58024800

240113ac <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
240113ac:	b580      	push	{r7, lr}
240113ae:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
240113b0:	4b1b      	ldr	r3, [pc, #108]	; (24011420 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
240113b2:	681b      	ldr	r3, [r3, #0]
240113b4:	f003 0310 	and.w	r3, r3, #16
240113b8:	2b00      	cmp	r3, #0
240113ba:	d014      	beq.n	240113e6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
240113bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240113c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240113c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240113cc:	d10b      	bne.n	240113e6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
240113ce:	f7ff faf4 	bl	240109ba <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
240113d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240113da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240113de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240113e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
240113e6:	4b0e      	ldr	r3, [pc, #56]	; (24011420 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
240113e8:	681b      	ldr	r3, [r3, #0]
240113ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240113ee:	2b00      	cmp	r3, #0
240113f0:	d014      	beq.n	2401141c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
240113f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240113fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240113fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011402:	d10b      	bne.n	2401141c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
24011404:	f000 f80e 	bl	24011424 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
24011408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401140c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
2401141c:	bf00      	nop
2401141e:	bd80      	pop	{r7, pc}
24011420:	58024800 	.word	0x58024800

24011424 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
24011424:	b480      	push	{r7}
24011426:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
24011428:	bf00      	nop
2401142a:	46bd      	mov	sp, r7
2401142c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011430:	4770      	bx	lr
	...

24011434 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24011434:	b580      	push	{r7, lr}
24011436:	b086      	sub	sp, #24
24011438:	af02      	add	r7, sp, #8
2401143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2401143c:	f7f0 fe86 	bl	2400214c <HAL_GetTick>
24011440:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24011442:	687b      	ldr	r3, [r7, #4]
24011444:	2b00      	cmp	r3, #0
24011446:	d101      	bne.n	2401144c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
24011448:	2301      	movs	r3, #1
2401144a:	e05f      	b.n	2401150c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
2401144c:	687b      	ldr	r3, [r7, #4]
2401144e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011452:	b2db      	uxtb	r3, r3
24011454:	2b00      	cmp	r3, #0
24011456:	d107      	bne.n	24011468 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
24011458:	6878      	ldr	r0, [r7, #4]
2401145a:	f7ef fd2b 	bl	24000eb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
2401145e:	f241 3188 	movw	r1, #5000	; 0x1388
24011462:	6878      	ldr	r0, [r7, #4]
24011464:	f001 f98e 	bl	24012784 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24011468:	687b      	ldr	r3, [r7, #4]
2401146a:	681b      	ldr	r3, [r3, #0]
2401146c:	681b      	ldr	r3, [r3, #0]
2401146e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24011472:	687b      	ldr	r3, [r7, #4]
24011474:	689b      	ldr	r3, [r3, #8]
24011476:	3b01      	subs	r3, #1
24011478:	021a      	lsls	r2, r3, #8
2401147a:	687b      	ldr	r3, [r7, #4]
2401147c:	681b      	ldr	r3, [r3, #0]
2401147e:	430a      	orrs	r2, r1
24011480:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24011482:	687b      	ldr	r3, [r7, #4]
24011484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011486:	9300      	str	r3, [sp, #0]
24011488:	68fb      	ldr	r3, [r7, #12]
2401148a:	2200      	movs	r2, #0
2401148c:	2120      	movs	r1, #32
2401148e:	6878      	ldr	r0, [r7, #4]
24011490:	f001 fa87 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011494:	4603      	mov	r3, r0
24011496:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
24011498:	7afb      	ldrb	r3, [r7, #11]
2401149a:	2b00      	cmp	r3, #0
2401149c:	d135      	bne.n	2401150a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
2401149e:	687b      	ldr	r3, [r7, #4]
240114a0:	681b      	ldr	r3, [r3, #0]
240114a2:	681a      	ldr	r2, [r3, #0]
240114a4:	4b1b      	ldr	r3, [pc, #108]	; (24011514 <HAL_QSPI_Init+0xe0>)
240114a6:	4013      	ands	r3, r2
240114a8:	687a      	ldr	r2, [r7, #4]
240114aa:	6852      	ldr	r2, [r2, #4]
240114ac:	0611      	lsls	r1, r2, #24
240114ae:	687a      	ldr	r2, [r7, #4]
240114b0:	68d2      	ldr	r2, [r2, #12]
240114b2:	4311      	orrs	r1, r2
240114b4:	687a      	ldr	r2, [r7, #4]
240114b6:	69d2      	ldr	r2, [r2, #28]
240114b8:	4311      	orrs	r1, r2
240114ba:	687a      	ldr	r2, [r7, #4]
240114bc:	6a12      	ldr	r2, [r2, #32]
240114be:	4311      	orrs	r1, r2
240114c0:	687a      	ldr	r2, [r7, #4]
240114c2:	6812      	ldr	r2, [r2, #0]
240114c4:	430b      	orrs	r3, r1
240114c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
240114c8:	687b      	ldr	r3, [r7, #4]
240114ca:	681b      	ldr	r3, [r3, #0]
240114cc:	685a      	ldr	r2, [r3, #4]
240114ce:	4b12      	ldr	r3, [pc, #72]	; (24011518 <HAL_QSPI_Init+0xe4>)
240114d0:	4013      	ands	r3, r2
240114d2:	687a      	ldr	r2, [r7, #4]
240114d4:	6912      	ldr	r2, [r2, #16]
240114d6:	0411      	lsls	r1, r2, #16
240114d8:	687a      	ldr	r2, [r7, #4]
240114da:	6952      	ldr	r2, [r2, #20]
240114dc:	4311      	orrs	r1, r2
240114de:	687a      	ldr	r2, [r7, #4]
240114e0:	6992      	ldr	r2, [r2, #24]
240114e2:	4311      	orrs	r1, r2
240114e4:	687a      	ldr	r2, [r7, #4]
240114e6:	6812      	ldr	r2, [r2, #0]
240114e8:	430b      	orrs	r3, r1
240114ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
240114ec:	687b      	ldr	r3, [r7, #4]
240114ee:	681b      	ldr	r3, [r3, #0]
240114f0:	681a      	ldr	r2, [r3, #0]
240114f2:	687b      	ldr	r3, [r7, #4]
240114f4:	681b      	ldr	r3, [r3, #0]
240114f6:	f042 0201 	orr.w	r2, r2, #1
240114fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240114fc:	687b      	ldr	r3, [r7, #4]
240114fe:	2200      	movs	r2, #0
24011500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
24011502:	687b      	ldr	r3, [r7, #4]
24011504:	2201      	movs	r2, #1
24011506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
2401150a:	7afb      	ldrb	r3, [r7, #11]
}
2401150c:	4618      	mov	r0, r3
2401150e:	3710      	adds	r7, #16
24011510:	46bd      	mov	sp, r7
24011512:	bd80      	pop	{r7, pc}
24011514:	00ffff2f 	.word	0x00ffff2f
24011518:	ffe0f8fe 	.word	0xffe0f8fe

2401151c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
2401151c:	b580      	push	{r7, lr}
2401151e:	b082      	sub	sp, #8
24011520:	af00      	add	r7, sp, #0
24011522:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24011524:	687b      	ldr	r3, [r7, #4]
24011526:	2b00      	cmp	r3, #0
24011528:	d101      	bne.n	2401152e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
2401152a:	2301      	movs	r3, #1
2401152c:	e012      	b.n	24011554 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
2401152e:	687b      	ldr	r3, [r7, #4]
24011530:	681b      	ldr	r3, [r3, #0]
24011532:	681a      	ldr	r2, [r3, #0]
24011534:	687b      	ldr	r3, [r7, #4]
24011536:	681b      	ldr	r3, [r3, #0]
24011538:	f022 0201 	bic.w	r2, r2, #1
2401153c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
2401153e:	6878      	ldr	r0, [r7, #4]
24011540:	f7ef fdb6 	bl	240010b0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011544:	687b      	ldr	r3, [r7, #4]
24011546:	2200      	movs	r2, #0
24011548:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
2401154a:	687b      	ldr	r3, [r7, #4]
2401154c:	2200      	movs	r2, #0
2401154e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
24011552:	2300      	movs	r3, #0
}
24011554:	4618      	mov	r0, r3
24011556:	3708      	adds	r7, #8
24011558:	46bd      	mov	sp, r7
2401155a:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
2401155c:	b480      	push	{r7}
2401155e:	b083      	sub	sp, #12
24011560:	af00      	add	r7, sp, #0
24011562:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
24011564:	bf00      	nop
24011566:	370c      	adds	r7, #12
24011568:	46bd      	mov	sp, r7
2401156a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401156e:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
24011570:	b480      	push	{r7}
24011572:	b083      	sub	sp, #12
24011574:	af00      	add	r7, sp, #0
24011576:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
24011578:	bf00      	nop
2401157a:	370c      	adds	r7, #12
2401157c:	46bd      	mov	sp, r7
2401157e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011582:	4770      	bx	lr

24011584 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
24011584:	b580      	push	{r7, lr}
24011586:	b086      	sub	sp, #24
24011588:	af00      	add	r7, sp, #0
2401158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
2401158c:	687b      	ldr	r3, [r7, #4]
2401158e:	681b      	ldr	r3, [r3, #0]
24011590:	689b      	ldr	r3, [r3, #8]
24011592:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
24011594:	687b      	ldr	r3, [r7, #4]
24011596:	681b      	ldr	r3, [r3, #0]
24011598:	681b      	ldr	r3, [r3, #0]
2401159a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
2401159c:	697b      	ldr	r3, [r7, #20]
2401159e:	f003 0304 	and.w	r3, r3, #4
240115a2:	2b00      	cmp	r3, #0
240115a4:	d064      	beq.n	24011670 <HAL_QSPI_IRQHandler+0xec>
240115a6:	693b      	ldr	r3, [r7, #16]
240115a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240115ac:	2b00      	cmp	r3, #0
240115ae:	d05f      	beq.n	24011670 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
240115b0:	687b      	ldr	r3, [r7, #4]
240115b2:	681b      	ldr	r3, [r3, #0]
240115b4:	3320      	adds	r3, #32
240115b6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240115b8:	687b      	ldr	r3, [r7, #4]
240115ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240115be:	b2db      	uxtb	r3, r3
240115c0:	2b12      	cmp	r3, #18
240115c2:	d125      	bne.n	24011610 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240115c4:	e01c      	b.n	24011600 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
240115c6:	687b      	ldr	r3, [r7, #4]
240115c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240115ca:	2b00      	cmp	r3, #0
240115cc:	d00f      	beq.n	240115ee <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
240115ce:	687b      	ldr	r3, [r7, #4]
240115d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240115d2:	781a      	ldrb	r2, [r3, #0]
240115d4:	68fb      	ldr	r3, [r7, #12]
240115d6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
240115d8:	687b      	ldr	r3, [r7, #4]
240115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240115dc:	1c5a      	adds	r2, r3, #1
240115de:	687b      	ldr	r3, [r7, #4]
240115e0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
240115e2:	687b      	ldr	r3, [r7, #4]
240115e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240115e6:	1e5a      	subs	r2, r3, #1
240115e8:	687b      	ldr	r3, [r7, #4]
240115ea:	62da      	str	r2, [r3, #44]	; 0x2c
240115ec:	e008      	b.n	24011600 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
240115ee:	687b      	ldr	r3, [r7, #4]
240115f0:	681b      	ldr	r3, [r3, #0]
240115f2:	681a      	ldr	r2, [r3, #0]
240115f4:	687b      	ldr	r3, [r7, #4]
240115f6:	681b      	ldr	r3, [r3, #0]
240115f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240115fc:	601a      	str	r2, [r3, #0]
          break;
240115fe:	e033      	b.n	24011668 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011600:	687b      	ldr	r3, [r7, #4]
24011602:	681b      	ldr	r3, [r3, #0]
24011604:	689b      	ldr	r3, [r3, #8]
24011606:	f003 0304 	and.w	r3, r3, #4
2401160a:	2b00      	cmp	r3, #0
2401160c:	d1db      	bne.n	240115c6 <HAL_QSPI_IRQHandler+0x42>
2401160e:	e02b      	b.n	24011668 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24011610:	687b      	ldr	r3, [r7, #4]
24011612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011616:	b2db      	uxtb	r3, r3
24011618:	2b22      	cmp	r3, #34	; 0x22
2401161a:	d125      	bne.n	24011668 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2401161c:	e01d      	b.n	2401165a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
2401161e:	687b      	ldr	r3, [r7, #4]
24011620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011622:	2b00      	cmp	r3, #0
24011624:	d010      	beq.n	24011648 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011626:	687b      	ldr	r3, [r7, #4]
24011628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401162a:	68fa      	ldr	r2, [r7, #12]
2401162c:	7812      	ldrb	r2, [r2, #0]
2401162e:	b2d2      	uxtb	r2, r2
24011630:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
24011632:	687b      	ldr	r3, [r7, #4]
24011634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011636:	1c5a      	adds	r2, r3, #1
24011638:	687b      	ldr	r3, [r7, #4]
2401163a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
2401163c:	687b      	ldr	r3, [r7, #4]
2401163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011640:	1e5a      	subs	r2, r3, #1
24011642:	687b      	ldr	r3, [r7, #4]
24011644:	639a      	str	r2, [r3, #56]	; 0x38
24011646:	e008      	b.n	2401165a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
24011648:	687b      	ldr	r3, [r7, #4]
2401164a:	681b      	ldr	r3, [r3, #0]
2401164c:	681a      	ldr	r2, [r3, #0]
2401164e:	687b      	ldr	r3, [r7, #4]
24011650:	681b      	ldr	r3, [r3, #0]
24011652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24011656:	601a      	str	r2, [r3, #0]
          break;
24011658:	e006      	b.n	24011668 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2401165a:	687b      	ldr	r3, [r7, #4]
2401165c:	681b      	ldr	r3, [r3, #0]
2401165e:	689b      	ldr	r3, [r3, #8]
24011660:	f003 0304 	and.w	r3, r3, #4
24011664:	2b00      	cmp	r3, #0
24011666:	d1da      	bne.n	2401161e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
24011668:	6878      	ldr	r0, [r7, #4]
2401166a:	f000 ff72 	bl	24012552 <HAL_QSPI_FifoThresholdCallback>
2401166e:	e13c      	b.n	240118ea <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
24011670:	697b      	ldr	r3, [r7, #20]
24011672:	f003 0302 	and.w	r3, r3, #2
24011676:	2b00      	cmp	r3, #0
24011678:	f000 80b0 	beq.w	240117dc <HAL_QSPI_IRQHandler+0x258>
2401167c:	693b      	ldr	r3, [r7, #16]
2401167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24011682:	2b00      	cmp	r3, #0
24011684:	f000 80aa 	beq.w	240117dc <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
24011688:	687b      	ldr	r3, [r7, #4]
2401168a:	681b      	ldr	r3, [r3, #0]
2401168c:	2202      	movs	r2, #2
2401168e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24011690:	687b      	ldr	r3, [r7, #4]
24011692:	681b      	ldr	r3, [r3, #0]
24011694:	681a      	ldr	r2, [r3, #0]
24011696:	687b      	ldr	r3, [r7, #4]
24011698:	681b      	ldr	r3, [r3, #0]
2401169a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
2401169e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240116a0:	687b      	ldr	r3, [r7, #4]
240116a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240116a6:	b2db      	uxtb	r3, r3
240116a8:	2b12      	cmp	r3, #18
240116aa:	d120      	bne.n	240116ee <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240116ac:	687b      	ldr	r3, [r7, #4]
240116ae:	681b      	ldr	r3, [r3, #0]
240116b0:	681b      	ldr	r3, [r3, #0]
240116b2:	f003 0304 	and.w	r3, r3, #4
240116b6:	2b00      	cmp	r3, #0
240116b8:	d011      	beq.n	240116de <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240116ba:	687b      	ldr	r3, [r7, #4]
240116bc:	681b      	ldr	r3, [r3, #0]
240116be:	681a      	ldr	r2, [r3, #0]
240116c0:	687b      	ldr	r3, [r7, #4]
240116c2:	681b      	ldr	r3, [r3, #0]
240116c4:	f022 0204 	bic.w	r2, r2, #4
240116c8:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
240116ca:	687b      	ldr	r3, [r7, #4]
240116cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240116ce:	681b      	ldr	r3, [r3, #0]
240116d0:	68da      	ldr	r2, [r3, #12]
240116d2:	687b      	ldr	r3, [r7, #4]
240116d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240116d6:	681b      	ldr	r3, [r3, #0]
240116d8:	f022 0201 	bic.w	r2, r2, #1
240116dc:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240116de:	687b      	ldr	r3, [r7, #4]
240116e0:	2201      	movs	r2, #1
240116e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
240116e6:	6878      	ldr	r0, [r7, #4]
240116e8:	f000 ff29 	bl	2401253e <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240116ec:	e0fa      	b.n	240118e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
240116ee:	687b      	ldr	r3, [r7, #4]
240116f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240116f4:	b2db      	uxtb	r3, r3
240116f6:	2b22      	cmp	r3, #34	; 0x22
240116f8:	d143      	bne.n	24011782 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240116fa:	687b      	ldr	r3, [r7, #4]
240116fc:	681b      	ldr	r3, [r3, #0]
240116fe:	681b      	ldr	r3, [r3, #0]
24011700:	f003 0304 	and.w	r3, r3, #4
24011704:	2b00      	cmp	r3, #0
24011706:	d012      	beq.n	2401172e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24011708:	687b      	ldr	r3, [r7, #4]
2401170a:	681b      	ldr	r3, [r3, #0]
2401170c:	681a      	ldr	r2, [r3, #0]
2401170e:	687b      	ldr	r3, [r7, #4]
24011710:	681b      	ldr	r3, [r3, #0]
24011712:	f022 0204 	bic.w	r2, r2, #4
24011716:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
24011718:	687b      	ldr	r3, [r7, #4]
2401171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401171c:	681b      	ldr	r3, [r3, #0]
2401171e:	68da      	ldr	r2, [r3, #12]
24011720:	687b      	ldr	r3, [r7, #4]
24011722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011724:	681b      	ldr	r3, [r3, #0]
24011726:	f022 0201 	bic.w	r2, r2, #1
2401172a:	60da      	str	r2, [r3, #12]
2401172c:	e021      	b.n	24011772 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
2401172e:	687b      	ldr	r3, [r7, #4]
24011730:	681b      	ldr	r3, [r3, #0]
24011732:	3320      	adds	r3, #32
24011734:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24011736:	e013      	b.n	24011760 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
24011738:	687b      	ldr	r3, [r7, #4]
2401173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401173c:	2b00      	cmp	r3, #0
2401173e:	d017      	beq.n	24011770 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011740:	687b      	ldr	r3, [r7, #4]
24011742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011744:	68fa      	ldr	r2, [r7, #12]
24011746:	7812      	ldrb	r2, [r2, #0]
24011748:	b2d2      	uxtb	r2, r2
2401174a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
2401174c:	687b      	ldr	r3, [r7, #4]
2401174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011750:	1c5a      	adds	r2, r3, #1
24011752:	687b      	ldr	r3, [r7, #4]
24011754:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
24011756:	687b      	ldr	r3, [r7, #4]
24011758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401175a:	1e5a      	subs	r2, r3, #1
2401175c:	687b      	ldr	r3, [r7, #4]
2401175e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24011760:	687b      	ldr	r3, [r7, #4]
24011762:	681b      	ldr	r3, [r3, #0]
24011764:	689b      	ldr	r3, [r3, #8]
24011766:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2401176a:	2b00      	cmp	r3, #0
2401176c:	d1e4      	bne.n	24011738 <HAL_QSPI_IRQHandler+0x1b4>
2401176e:	e000      	b.n	24011772 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
24011770:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011772:	687b      	ldr	r3, [r7, #4]
24011774:	2201      	movs	r2, #1
24011776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
2401177a:	6878      	ldr	r0, [r7, #4]
2401177c:	f000 fed5 	bl	2401252a <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011780:	e0b0      	b.n	240118e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
24011782:	687b      	ldr	r3, [r7, #4]
24011784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011788:	b2db      	uxtb	r3, r3
2401178a:	2b02      	cmp	r3, #2
2401178c:	d107      	bne.n	2401179e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2401178e:	687b      	ldr	r3, [r7, #4]
24011790:	2201      	movs	r2, #1
24011792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
24011796:	6878      	ldr	r0, [r7, #4]
24011798:	f000 febd 	bl	24012516 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2401179c:	e0a2      	b.n	240118e4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
2401179e:	687b      	ldr	r3, [r7, #4]
240117a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240117a4:	b2db      	uxtb	r3, r3
240117a6:	2b08      	cmp	r3, #8
240117a8:	f040 809c 	bne.w	240118e4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
240117ac:	687b      	ldr	r3, [r7, #4]
240117ae:	681b      	ldr	r3, [r3, #0]
240117b0:	695a      	ldr	r2, [r3, #20]
240117b2:	687b      	ldr	r3, [r7, #4]
240117b4:	681b      	ldr	r3, [r3, #0]
240117b6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
240117ba:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240117bc:	687b      	ldr	r3, [r7, #4]
240117be:	2201      	movs	r2, #1
240117c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
240117c4:	687b      	ldr	r3, [r7, #4]
240117c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240117c8:	2b00      	cmp	r3, #0
240117ca:	d103      	bne.n	240117d4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
240117cc:	6878      	ldr	r0, [r7, #4]
240117ce:	f000 fe98 	bl	24012502 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240117d2:	e087      	b.n	240118e4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
240117d4:	6878      	ldr	r0, [r7, #4]
240117d6:	f000 fe8a 	bl	240124ee <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240117da:	e083      	b.n	240118e4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
240117dc:	697b      	ldr	r3, [r7, #20]
240117de:	f003 0308 	and.w	r3, r3, #8
240117e2:	2b00      	cmp	r3, #0
240117e4:	d01f      	beq.n	24011826 <HAL_QSPI_IRQHandler+0x2a2>
240117e6:	693b      	ldr	r3, [r7, #16]
240117e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240117ec:	2b00      	cmp	r3, #0
240117ee:	d01a      	beq.n	24011826 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
240117f0:	687b      	ldr	r3, [r7, #4]
240117f2:	681b      	ldr	r3, [r3, #0]
240117f4:	2208      	movs	r2, #8
240117f6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
240117f8:	687b      	ldr	r3, [r7, #4]
240117fa:	681b      	ldr	r3, [r3, #0]
240117fc:	681b      	ldr	r3, [r3, #0]
240117fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24011802:	2b00      	cmp	r3, #0
24011804:	d00b      	beq.n	2401181e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
24011806:	687b      	ldr	r3, [r7, #4]
24011808:	681b      	ldr	r3, [r3, #0]
2401180a:	681a      	ldr	r2, [r3, #0]
2401180c:	687b      	ldr	r3, [r7, #4]
2401180e:	681b      	ldr	r3, [r3, #0]
24011810:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
24011814:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011816:	687b      	ldr	r3, [r7, #4]
24011818:	2201      	movs	r2, #1
2401181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
2401181e:	6878      	ldr	r0, [r7, #4]
24011820:	f000 fea1 	bl	24012566 <HAL_QSPI_StatusMatchCallback>
24011824:	e061      	b.n	240118ea <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
24011826:	697b      	ldr	r3, [r7, #20]
24011828:	f003 0301 	and.w	r3, r3, #1
2401182c:	2b00      	cmp	r3, #0
2401182e:	d047      	beq.n	240118c0 <HAL_QSPI_IRQHandler+0x33c>
24011830:	693b      	ldr	r3, [r7, #16]
24011832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011836:	2b00      	cmp	r3, #0
24011838:	d042      	beq.n	240118c0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
2401183a:	687b      	ldr	r3, [r7, #4]
2401183c:	681b      	ldr	r3, [r3, #0]
2401183e:	2201      	movs	r2, #1
24011840:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24011842:	687b      	ldr	r3, [r7, #4]
24011844:	681b      	ldr	r3, [r3, #0]
24011846:	681a      	ldr	r2, [r3, #0]
24011848:	687b      	ldr	r3, [r7, #4]
2401184a:	681b      	ldr	r3, [r3, #0]
2401184c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
24011850:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
24011852:	687b      	ldr	r3, [r7, #4]
24011854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011856:	f043 0202 	orr.w	r2, r3, #2
2401185a:	687b      	ldr	r3, [r7, #4]
2401185c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401185e:	687b      	ldr	r3, [r7, #4]
24011860:	681b      	ldr	r3, [r3, #0]
24011862:	681b      	ldr	r3, [r3, #0]
24011864:	f003 0304 	and.w	r3, r3, #4
24011868:	2b00      	cmp	r3, #0
2401186a:	d021      	beq.n	240118b0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401186c:	687b      	ldr	r3, [r7, #4]
2401186e:	681b      	ldr	r3, [r3, #0]
24011870:	681a      	ldr	r2, [r3, #0]
24011872:	687b      	ldr	r3, [r7, #4]
24011874:	681b      	ldr	r3, [r3, #0]
24011876:	f022 0204 	bic.w	r2, r2, #4
2401187a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
2401187c:	687b      	ldr	r3, [r7, #4]
2401187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011880:	4a1c      	ldr	r2, [pc, #112]	; (240118f4 <HAL_QSPI_IRQHandler+0x370>)
24011882:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24011884:	687b      	ldr	r3, [r7, #4]
24011886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011888:	4618      	mov	r0, r3
2401188a:	f7fe fb34 	bl	2400fef6 <HAL_MDMA_Abort_IT>
2401188e:	4603      	mov	r3, r0
24011890:	2b00      	cmp	r3, #0
24011892:	d029      	beq.n	240118e8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24011894:	687b      	ldr	r3, [r7, #4]
24011896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011898:	f043 0204 	orr.w	r2, r3, #4
2401189c:	687b      	ldr	r3, [r7, #4]
2401189e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
240118a0:	687b      	ldr	r3, [r7, #4]
240118a2:	2201      	movs	r2, #1
240118a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
240118a8:	6878      	ldr	r0, [r7, #4]
240118aa:	f000 fe20 	bl	240124ee <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240118ae:	e01b      	b.n	240118e8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240118b0:	687b      	ldr	r3, [r7, #4]
240118b2:	2201      	movs	r2, #1
240118b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
240118b8:	6878      	ldr	r0, [r7, #4]
240118ba:	f000 fe18 	bl	240124ee <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240118be:	e013      	b.n	240118e8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
240118c0:	697b      	ldr	r3, [r7, #20]
240118c2:	f003 0310 	and.w	r3, r3, #16
240118c6:	2b00      	cmp	r3, #0
240118c8:	d00f      	beq.n	240118ea <HAL_QSPI_IRQHandler+0x366>
240118ca:	693b      	ldr	r3, [r7, #16]
240118cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240118d0:	2b00      	cmp	r3, #0
240118d2:	d00a      	beq.n	240118ea <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
240118d4:	687b      	ldr	r3, [r7, #4]
240118d6:	681b      	ldr	r3, [r3, #0]
240118d8:	2210      	movs	r2, #16
240118da:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
240118dc:	6878      	ldr	r0, [r7, #4]
240118de:	f000 fe4c 	bl	2401257a <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
240118e2:	e002      	b.n	240118ea <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240118e4:	bf00      	nop
240118e6:	e000      	b.n	240118ea <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240118e8:	bf00      	nop
}
240118ea:	bf00      	nop
240118ec:	3718      	adds	r7, #24
240118ee:	46bd      	mov	sp, r7
240118f0:	bd80      	pop	{r7, pc}
240118f2:	bf00      	nop
240118f4:	2401293d 	.word	0x2401293d

240118f8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
240118f8:	b580      	push	{r7, lr}
240118fa:	b088      	sub	sp, #32
240118fc:	af02      	add	r7, sp, #8
240118fe:	60f8      	str	r0, [r7, #12]
24011900:	60b9      	str	r1, [r7, #8]
24011902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24011904:	f7f0 fc22 	bl	2400214c <HAL_GetTick>
24011908:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401190a:	68fb      	ldr	r3, [r7, #12]
2401190c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011910:	b2db      	uxtb	r3, r3
24011912:	2b01      	cmp	r3, #1
24011914:	d101      	bne.n	2401191a <HAL_QSPI_Command+0x22>
24011916:	2302      	movs	r3, #2
24011918:	e048      	b.n	240119ac <HAL_QSPI_Command+0xb4>
2401191a:	68fb      	ldr	r3, [r7, #12]
2401191c:	2201      	movs	r2, #1
2401191e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011922:	68fb      	ldr	r3, [r7, #12]
24011924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011928:	b2db      	uxtb	r3, r3
2401192a:	2b01      	cmp	r3, #1
2401192c:	d137      	bne.n	2401199e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2401192e:	68fb      	ldr	r3, [r7, #12]
24011930:	2200      	movs	r2, #0
24011932:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24011934:	68fb      	ldr	r3, [r7, #12]
24011936:	2202      	movs	r2, #2
24011938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2401193c:	687b      	ldr	r3, [r7, #4]
2401193e:	9300      	str	r3, [sp, #0]
24011940:	693b      	ldr	r3, [r7, #16]
24011942:	2200      	movs	r2, #0
24011944:	2120      	movs	r1, #32
24011946:	68f8      	ldr	r0, [r7, #12]
24011948:	f001 f82b 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
2401194c:	4603      	mov	r3, r0
2401194e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24011950:	7dfb      	ldrb	r3, [r7, #23]
24011952:	2b00      	cmp	r3, #0
24011954:	d125      	bne.n	240119a2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011956:	2200      	movs	r2, #0
24011958:	68b9      	ldr	r1, [r7, #8]
2401195a:	68f8      	ldr	r0, [r7, #12]
2401195c:	f001 f858 	bl	24012a10 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24011960:	68bb      	ldr	r3, [r7, #8]
24011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011964:	2b00      	cmp	r3, #0
24011966:	d115      	bne.n	24011994 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011968:	687b      	ldr	r3, [r7, #4]
2401196a:	9300      	str	r3, [sp, #0]
2401196c:	693b      	ldr	r3, [r7, #16]
2401196e:	2201      	movs	r2, #1
24011970:	2102      	movs	r1, #2
24011972:	68f8      	ldr	r0, [r7, #12]
24011974:	f001 f815 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011978:	4603      	mov	r3, r0
2401197a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
2401197c:	7dfb      	ldrb	r3, [r7, #23]
2401197e:	2b00      	cmp	r3, #0
24011980:	d10f      	bne.n	240119a2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011982:	68fb      	ldr	r3, [r7, #12]
24011984:	681b      	ldr	r3, [r3, #0]
24011986:	2202      	movs	r2, #2
24011988:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
2401198a:	68fb      	ldr	r3, [r7, #12]
2401198c:	2201      	movs	r2, #1
2401198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011992:	e006      	b.n	240119a2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24011994:	68fb      	ldr	r3, [r7, #12]
24011996:	2201      	movs	r2, #1
24011998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2401199c:	e001      	b.n	240119a2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
2401199e:	2302      	movs	r3, #2
240119a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240119a2:	68fb      	ldr	r3, [r7, #12]
240119a4:	2200      	movs	r2, #0
240119a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240119aa:	7dfb      	ldrb	r3, [r7, #23]
}
240119ac:	4618      	mov	r0, r3
240119ae:	3718      	adds	r7, #24
240119b0:	46bd      	mov	sp, r7
240119b2:	bd80      	pop	{r7, pc}

240119b4 <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
240119b4:	b580      	push	{r7, lr}
240119b6:	b086      	sub	sp, #24
240119b8:	af02      	add	r7, sp, #8
240119ba:	6078      	str	r0, [r7, #4]
240119bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240119be:	f7f0 fbc5 	bl	2400214c <HAL_GetTick>
240119c2:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
240119c4:	687b      	ldr	r3, [r7, #4]
240119c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240119ca:	b2db      	uxtb	r3, r3
240119cc:	2b01      	cmp	r3, #1
240119ce:	d101      	bne.n	240119d4 <HAL_QSPI_Command_IT+0x20>
240119d0:	2302      	movs	r3, #2
240119d2:	e051      	b.n	24011a78 <HAL_QSPI_Command_IT+0xc4>
240119d4:	687b      	ldr	r3, [r7, #4]
240119d6:	2201      	movs	r2, #1
240119d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240119dc:	687b      	ldr	r3, [r7, #4]
240119de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240119e2:	b2db      	uxtb	r3, r3
240119e4:	2b01      	cmp	r3, #1
240119e6:	d140      	bne.n	24011a6a <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240119e8:	687b      	ldr	r3, [r7, #4]
240119ea:	2200      	movs	r2, #0
240119ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
240119ee:	687b      	ldr	r3, [r7, #4]
240119f0:	2202      	movs	r2, #2
240119f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
240119f6:	687b      	ldr	r3, [r7, #4]
240119f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240119fa:	9300      	str	r3, [sp, #0]
240119fc:	68bb      	ldr	r3, [r7, #8]
240119fe:	2200      	movs	r2, #0
24011a00:	2120      	movs	r1, #32
24011a02:	6878      	ldr	r0, [r7, #4]
24011a04:	f000 ffcd 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011a08:	4603      	mov	r3, r0
24011a0a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24011a0c:	7bfb      	ldrb	r3, [r7, #15]
24011a0e:	2b00      	cmp	r3, #0
24011a10:	d126      	bne.n	24011a60 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
24011a12:	683b      	ldr	r3, [r7, #0]
24011a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011a16:	2b00      	cmp	r3, #0
24011a18:	d103      	bne.n	24011a22 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011a1a:	687b      	ldr	r3, [r7, #4]
24011a1c:	681b      	ldr	r3, [r3, #0]
24011a1e:	2203      	movs	r2, #3
24011a20:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011a22:	2200      	movs	r2, #0
24011a24:	6839      	ldr	r1, [r7, #0]
24011a26:	6878      	ldr	r0, [r7, #4]
24011a28:	f000 fff2 	bl	24012a10 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24011a2c:	683b      	ldr	r3, [r7, #0]
24011a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011a30:	2b00      	cmp	r3, #0
24011a32:	d10c      	bne.n	24011a4e <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24011a34:	687b      	ldr	r3, [r7, #4]
24011a36:	2200      	movs	r2, #0
24011a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
24011a3c:	687b      	ldr	r3, [r7, #4]
24011a3e:	681b      	ldr	r3, [r3, #0]
24011a40:	681a      	ldr	r2, [r3, #0]
24011a42:	687b      	ldr	r3, [r7, #4]
24011a44:	681b      	ldr	r3, [r3, #0]
24011a46:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
24011a4a:	601a      	str	r2, [r3, #0]
24011a4c:	e013      	b.n	24011a76 <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24011a4e:	687b      	ldr	r3, [r7, #4]
24011a50:	2201      	movs	r2, #1
24011a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24011a56:	687b      	ldr	r3, [r7, #4]
24011a58:	2200      	movs	r2, #0
24011a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011a5e:	e00a      	b.n	24011a76 <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011a60:	687b      	ldr	r3, [r7, #4]
24011a62:	2200      	movs	r2, #0
24011a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011a68:	e005      	b.n	24011a76 <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
24011a6a:	2302      	movs	r3, #2
24011a6c:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011a6e:	687b      	ldr	r3, [r7, #4]
24011a70:	2200      	movs	r2, #0
24011a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24011a76:	7bfb      	ldrb	r3, [r7, #15]
}
24011a78:	4618      	mov	r0, r3
24011a7a:	3710      	adds	r7, #16
24011a7c:	46bd      	mov	sp, r7
24011a7e:	bd80      	pop	{r7, pc}

24011a80 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24011a80:	b580      	push	{r7, lr}
24011a82:	b08a      	sub	sp, #40	; 0x28
24011a84:	af02      	add	r7, sp, #8
24011a86:	60f8      	str	r0, [r7, #12]
24011a88:	60b9      	str	r1, [r7, #8]
24011a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011a8c:	2300      	movs	r3, #0
24011a8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24011a90:	f7f0 fb5c 	bl	2400214c <HAL_GetTick>
24011a94:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24011a96:	68fb      	ldr	r3, [r7, #12]
24011a98:	681b      	ldr	r3, [r3, #0]
24011a9a:	3320      	adds	r3, #32
24011a9c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011a9e:	68fb      	ldr	r3, [r7, #12]
24011aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011aa4:	b2db      	uxtb	r3, r3
24011aa6:	2b01      	cmp	r3, #1
24011aa8:	d101      	bne.n	24011aae <HAL_QSPI_Transmit+0x2e>
24011aaa:	2302      	movs	r3, #2
24011aac:	e076      	b.n	24011b9c <HAL_QSPI_Transmit+0x11c>
24011aae:	68fb      	ldr	r3, [r7, #12]
24011ab0:	2201      	movs	r2, #1
24011ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011ab6:	68fb      	ldr	r3, [r7, #12]
24011ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011abc:	b2db      	uxtb	r3, r3
24011abe:	2b01      	cmp	r3, #1
24011ac0:	d165      	bne.n	24011b8e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011ac2:	68fb      	ldr	r3, [r7, #12]
24011ac4:	2200      	movs	r2, #0
24011ac6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011ac8:	68bb      	ldr	r3, [r7, #8]
24011aca:	2b00      	cmp	r3, #0
24011acc:	d056      	beq.n	24011b7c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011ace:	68fb      	ldr	r3, [r7, #12]
24011ad0:	2212      	movs	r2, #18
24011ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011ad6:	68fb      	ldr	r3, [r7, #12]
24011ad8:	681b      	ldr	r3, [r3, #0]
24011ada:	691b      	ldr	r3, [r3, #16]
24011adc:	1c5a      	adds	r2, r3, #1
24011ade:	68fb      	ldr	r3, [r7, #12]
24011ae0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011ae2:	68fb      	ldr	r3, [r7, #12]
24011ae4:	681b      	ldr	r3, [r3, #0]
24011ae6:	691b      	ldr	r3, [r3, #16]
24011ae8:	1c5a      	adds	r2, r3, #1
24011aea:	68fb      	ldr	r3, [r7, #12]
24011aec:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24011aee:	68fb      	ldr	r3, [r7, #12]
24011af0:	68ba      	ldr	r2, [r7, #8]
24011af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011af4:	68fb      	ldr	r3, [r7, #12]
24011af6:	681b      	ldr	r3, [r3, #0]
24011af8:	695a      	ldr	r2, [r3, #20]
24011afa:	68fb      	ldr	r3, [r7, #12]
24011afc:	681b      	ldr	r3, [r3, #0]
24011afe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011b02:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24011b04:	e01b      	b.n	24011b3e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
24011b06:	687b      	ldr	r3, [r7, #4]
24011b08:	9300      	str	r3, [sp, #0]
24011b0a:	69bb      	ldr	r3, [r7, #24]
24011b0c:	2201      	movs	r2, #1
24011b0e:	2104      	movs	r1, #4
24011b10:	68f8      	ldr	r0, [r7, #12]
24011b12:	f000 ff46 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011b16:	4603      	mov	r3, r0
24011b18:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
24011b1a:	7ffb      	ldrb	r3, [r7, #31]
24011b1c:	2b00      	cmp	r3, #0
24011b1e:	d113      	bne.n	24011b48 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24011b20:	68fb      	ldr	r3, [r7, #12]
24011b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011b24:	781a      	ldrb	r2, [r3, #0]
24011b26:	697b      	ldr	r3, [r7, #20]
24011b28:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
24011b2a:	68fb      	ldr	r3, [r7, #12]
24011b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011b2e:	1c5a      	adds	r2, r3, #1
24011b30:	68fb      	ldr	r3, [r7, #12]
24011b32:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24011b34:	68fb      	ldr	r3, [r7, #12]
24011b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011b38:	1e5a      	subs	r2, r3, #1
24011b3a:	68fb      	ldr	r3, [r7, #12]
24011b3c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
24011b3e:	68fb      	ldr	r3, [r7, #12]
24011b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011b42:	2b00      	cmp	r3, #0
24011b44:	d1df      	bne.n	24011b06 <HAL_QSPI_Transmit+0x86>
24011b46:	e000      	b.n	24011b4a <HAL_QSPI_Transmit+0xca>
          break;
24011b48:	bf00      	nop
      }

      if (status == HAL_OK)
24011b4a:	7ffb      	ldrb	r3, [r7, #31]
24011b4c:	2b00      	cmp	r3, #0
24011b4e:	d110      	bne.n	24011b72 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011b50:	687b      	ldr	r3, [r7, #4]
24011b52:	9300      	str	r3, [sp, #0]
24011b54:	69bb      	ldr	r3, [r7, #24]
24011b56:	2201      	movs	r2, #1
24011b58:	2102      	movs	r1, #2
24011b5a:	68f8      	ldr	r0, [r7, #12]
24011b5c:	f000 ff21 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011b60:	4603      	mov	r3, r0
24011b62:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
24011b64:	7ffb      	ldrb	r3, [r7, #31]
24011b66:	2b00      	cmp	r3, #0
24011b68:	d103      	bne.n	24011b72 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011b6a:	68fb      	ldr	r3, [r7, #12]
24011b6c:	681b      	ldr	r3, [r3, #0]
24011b6e:	2202      	movs	r2, #2
24011b70:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24011b72:	68fb      	ldr	r3, [r7, #12]
24011b74:	2201      	movs	r2, #1
24011b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011b7a:	e00a      	b.n	24011b92 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011b7c:	68fb      	ldr	r3, [r7, #12]
24011b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011b80:	f043 0208 	orr.w	r2, r3, #8
24011b84:	68fb      	ldr	r3, [r7, #12]
24011b86:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011b88:	2301      	movs	r3, #1
24011b8a:	77fb      	strb	r3, [r7, #31]
24011b8c:	e001      	b.n	24011b92 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
24011b8e:	2302      	movs	r3, #2
24011b90:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24011b92:	68fb      	ldr	r3, [r7, #12]
24011b94:	2200      	movs	r2, #0
24011b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24011b9a:	7ffb      	ldrb	r3, [r7, #31]
}
24011b9c:	4618      	mov	r0, r3
24011b9e:	3720      	adds	r7, #32
24011ba0:	46bd      	mov	sp, r7
24011ba2:	bd80      	pop	{r7, pc}

24011ba4 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24011ba4:	b580      	push	{r7, lr}
24011ba6:	b08a      	sub	sp, #40	; 0x28
24011ba8:	af02      	add	r7, sp, #8
24011baa:	60f8      	str	r0, [r7, #12]
24011bac:	60b9      	str	r1, [r7, #8]
24011bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011bb0:	2300      	movs	r3, #0
24011bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24011bb4:	f7f0 faca 	bl	2400214c <HAL_GetTick>
24011bb8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24011bba:	68fb      	ldr	r3, [r7, #12]
24011bbc:	681b      	ldr	r3, [r3, #0]
24011bbe:	699b      	ldr	r3, [r3, #24]
24011bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24011bc2:	68fb      	ldr	r3, [r7, #12]
24011bc4:	681b      	ldr	r3, [r3, #0]
24011bc6:	3320      	adds	r3, #32
24011bc8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011bca:	68fb      	ldr	r3, [r7, #12]
24011bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011bd0:	b2db      	uxtb	r3, r3
24011bd2:	2b01      	cmp	r3, #1
24011bd4:	d101      	bne.n	24011bda <HAL_QSPI_Receive+0x36>
24011bd6:	2302      	movs	r3, #2
24011bd8:	e07d      	b.n	24011cd6 <HAL_QSPI_Receive+0x132>
24011bda:	68fb      	ldr	r3, [r7, #12]
24011bdc:	2201      	movs	r2, #1
24011bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011be2:	68fb      	ldr	r3, [r7, #12]
24011be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011be8:	b2db      	uxtb	r3, r3
24011bea:	2b01      	cmp	r3, #1
24011bec:	d16c      	bne.n	24011cc8 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011bee:	68fb      	ldr	r3, [r7, #12]
24011bf0:	2200      	movs	r2, #0
24011bf2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011bf4:	68bb      	ldr	r3, [r7, #8]
24011bf6:	2b00      	cmp	r3, #0
24011bf8:	d05d      	beq.n	24011cb6 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24011bfa:	68fb      	ldr	r3, [r7, #12]
24011bfc:	2222      	movs	r2, #34	; 0x22
24011bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011c02:	68fb      	ldr	r3, [r7, #12]
24011c04:	681b      	ldr	r3, [r3, #0]
24011c06:	691b      	ldr	r3, [r3, #16]
24011c08:	1c5a      	adds	r2, r3, #1
24011c0a:	68fb      	ldr	r3, [r7, #12]
24011c0c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011c0e:	68fb      	ldr	r3, [r7, #12]
24011c10:	681b      	ldr	r3, [r3, #0]
24011c12:	691b      	ldr	r3, [r3, #16]
24011c14:	1c5a      	adds	r2, r3, #1
24011c16:	68fb      	ldr	r3, [r7, #12]
24011c18:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24011c1a:	68fb      	ldr	r3, [r7, #12]
24011c1c:	68ba      	ldr	r2, [r7, #8]
24011c1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24011c20:	68fb      	ldr	r3, [r7, #12]
24011c22:	681b      	ldr	r3, [r3, #0]
24011c24:	695b      	ldr	r3, [r3, #20]
24011c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24011c2a:	68fb      	ldr	r3, [r7, #12]
24011c2c:	681b      	ldr	r3, [r3, #0]
24011c2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24011c32:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24011c34:	68fb      	ldr	r3, [r7, #12]
24011c36:	681b      	ldr	r3, [r3, #0]
24011c38:	697a      	ldr	r2, [r7, #20]
24011c3a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
24011c3c:	e01c      	b.n	24011c78 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
24011c3e:	687b      	ldr	r3, [r7, #4]
24011c40:	9300      	str	r3, [sp, #0]
24011c42:	69bb      	ldr	r3, [r7, #24]
24011c44:	2201      	movs	r2, #1
24011c46:	2106      	movs	r1, #6
24011c48:	68f8      	ldr	r0, [r7, #12]
24011c4a:	f000 feaa 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011c4e:	4603      	mov	r3, r0
24011c50:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
24011c52:	7ffb      	ldrb	r3, [r7, #31]
24011c54:	2b00      	cmp	r3, #0
24011c56:	d114      	bne.n	24011c82 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011c58:	68fb      	ldr	r3, [r7, #12]
24011c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011c5c:	693a      	ldr	r2, [r7, #16]
24011c5e:	7812      	ldrb	r2, [r2, #0]
24011c60:	b2d2      	uxtb	r2, r2
24011c62:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
24011c64:	68fb      	ldr	r3, [r7, #12]
24011c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011c68:	1c5a      	adds	r2, r3, #1
24011c6a:	68fb      	ldr	r3, [r7, #12]
24011c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
24011c6e:	68fb      	ldr	r3, [r7, #12]
24011c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011c72:	1e5a      	subs	r2, r3, #1
24011c74:	68fb      	ldr	r3, [r7, #12]
24011c76:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
24011c78:	68fb      	ldr	r3, [r7, #12]
24011c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011c7c:	2b00      	cmp	r3, #0
24011c7e:	d1de      	bne.n	24011c3e <HAL_QSPI_Receive+0x9a>
24011c80:	e000      	b.n	24011c84 <HAL_QSPI_Receive+0xe0>
          break;
24011c82:	bf00      	nop
      }

      if (status == HAL_OK)
24011c84:	7ffb      	ldrb	r3, [r7, #31]
24011c86:	2b00      	cmp	r3, #0
24011c88:	d110      	bne.n	24011cac <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011c8a:	687b      	ldr	r3, [r7, #4]
24011c8c:	9300      	str	r3, [sp, #0]
24011c8e:	69bb      	ldr	r3, [r7, #24]
24011c90:	2201      	movs	r2, #1
24011c92:	2102      	movs	r1, #2
24011c94:	68f8      	ldr	r0, [r7, #12]
24011c96:	f000 fe84 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24011c9a:	4603      	mov	r3, r0
24011c9c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
24011c9e:	7ffb      	ldrb	r3, [r7, #31]
24011ca0:	2b00      	cmp	r3, #0
24011ca2:	d103      	bne.n	24011cac <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011ca4:	68fb      	ldr	r3, [r7, #12]
24011ca6:	681b      	ldr	r3, [r3, #0]
24011ca8:	2202      	movs	r2, #2
24011caa:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24011cac:	68fb      	ldr	r3, [r7, #12]
24011cae:	2201      	movs	r2, #1
24011cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011cb4:	e00a      	b.n	24011ccc <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011cb6:	68fb      	ldr	r3, [r7, #12]
24011cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011cba:	f043 0208 	orr.w	r2, r3, #8
24011cbe:	68fb      	ldr	r3, [r7, #12]
24011cc0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011cc2:	2301      	movs	r3, #1
24011cc4:	77fb      	strb	r3, [r7, #31]
24011cc6:	e001      	b.n	24011ccc <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
24011cc8:	2302      	movs	r3, #2
24011cca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24011ccc:	68fb      	ldr	r3, [r7, #12]
24011cce:	2200      	movs	r2, #0
24011cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24011cd4:	7ffb      	ldrb	r3, [r7, #31]
}
24011cd6:	4618      	mov	r0, r3
24011cd8:	3720      	adds	r7, #32
24011cda:	46bd      	mov	sp, r7
24011cdc:	bd80      	pop	{r7, pc}

24011cde <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011cde:	b480      	push	{r7}
24011ce0:	b085      	sub	sp, #20
24011ce2:	af00      	add	r7, sp, #0
24011ce4:	6078      	str	r0, [r7, #4]
24011ce6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011ce8:	2300      	movs	r3, #0
24011cea:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011cec:	687b      	ldr	r3, [r7, #4]
24011cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011cf2:	b2db      	uxtb	r3, r3
24011cf4:	2b01      	cmp	r3, #1
24011cf6:	d101      	bne.n	24011cfc <HAL_QSPI_Transmit_IT+0x1e>
24011cf8:	2302      	movs	r3, #2
24011cfa:	e04f      	b.n	24011d9c <HAL_QSPI_Transmit_IT+0xbe>
24011cfc:	687b      	ldr	r3, [r7, #4]
24011cfe:	2201      	movs	r2, #1
24011d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011d04:	687b      	ldr	r3, [r7, #4]
24011d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011d0a:	b2db      	uxtb	r3, r3
24011d0c:	2b01      	cmp	r3, #1
24011d0e:	d13e      	bne.n	24011d8e <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011d10:	687b      	ldr	r3, [r7, #4]
24011d12:	2200      	movs	r2, #0
24011d14:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011d16:	683b      	ldr	r3, [r7, #0]
24011d18:	2b00      	cmp	r3, #0
24011d1a:	d02b      	beq.n	24011d74 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011d1c:	687b      	ldr	r3, [r7, #4]
24011d1e:	2212      	movs	r2, #18
24011d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011d24:	687b      	ldr	r3, [r7, #4]
24011d26:	681b      	ldr	r3, [r3, #0]
24011d28:	691b      	ldr	r3, [r3, #16]
24011d2a:	1c5a      	adds	r2, r3, #1
24011d2c:	687b      	ldr	r3, [r7, #4]
24011d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011d30:	687b      	ldr	r3, [r7, #4]
24011d32:	681b      	ldr	r3, [r3, #0]
24011d34:	691b      	ldr	r3, [r3, #16]
24011d36:	1c5a      	adds	r2, r3, #1
24011d38:	687b      	ldr	r3, [r7, #4]
24011d3a:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24011d3c:	687b      	ldr	r3, [r7, #4]
24011d3e:	683a      	ldr	r2, [r7, #0]
24011d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011d42:	687b      	ldr	r3, [r7, #4]
24011d44:	681b      	ldr	r3, [r3, #0]
24011d46:	2203      	movs	r2, #3
24011d48:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011d4a:	687b      	ldr	r3, [r7, #4]
24011d4c:	681b      	ldr	r3, [r3, #0]
24011d4e:	695a      	ldr	r2, [r3, #20]
24011d50:	687b      	ldr	r3, [r7, #4]
24011d52:	681b      	ldr	r3, [r3, #0]
24011d54:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011d58:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011d5a:	687b      	ldr	r3, [r7, #4]
24011d5c:	2200      	movs	r2, #0
24011d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24011d62:	687b      	ldr	r3, [r7, #4]
24011d64:	681b      	ldr	r3, [r3, #0]
24011d66:	681a      	ldr	r2, [r3, #0]
24011d68:	687b      	ldr	r3, [r7, #4]
24011d6a:	681b      	ldr	r3, [r3, #0]
24011d6c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24011d70:	601a      	str	r2, [r3, #0]
24011d72:	e012      	b.n	24011d9a <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011d74:	687b      	ldr	r3, [r7, #4]
24011d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011d78:	f043 0208 	orr.w	r2, r3, #8
24011d7c:	687b      	ldr	r3, [r7, #4]
24011d7e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011d80:	2301      	movs	r3, #1
24011d82:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011d84:	687b      	ldr	r3, [r7, #4]
24011d86:	2200      	movs	r2, #0
24011d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011d8c:	e005      	b.n	24011d9a <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
24011d8e:	2302      	movs	r3, #2
24011d90:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011d92:	687b      	ldr	r3, [r7, #4]
24011d94:	2200      	movs	r2, #0
24011d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24011d9a:	7bfb      	ldrb	r3, [r7, #15]
}
24011d9c:	4618      	mov	r0, r3
24011d9e:	3714      	adds	r7, #20
24011da0:	46bd      	mov	sp, r7
24011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
24011da6:	4770      	bx	lr

24011da8 <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011da8:	b480      	push	{r7}
24011daa:	b085      	sub	sp, #20
24011dac:	af00      	add	r7, sp, #0
24011dae:	6078      	str	r0, [r7, #4]
24011db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011db2:	2300      	movs	r3, #0
24011db4:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24011db6:	687b      	ldr	r3, [r7, #4]
24011db8:	681b      	ldr	r3, [r3, #0]
24011dba:	699b      	ldr	r3, [r3, #24]
24011dbc:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011dbe:	687b      	ldr	r3, [r7, #4]
24011dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011dc4:	b2db      	uxtb	r3, r3
24011dc6:	2b01      	cmp	r3, #1
24011dc8:	d101      	bne.n	24011dce <HAL_QSPI_Receive_IT+0x26>
24011dca:	2302      	movs	r3, #2
24011dcc:	e055      	b.n	24011e7a <HAL_QSPI_Receive_IT+0xd2>
24011dce:	687b      	ldr	r3, [r7, #4]
24011dd0:	2201      	movs	r2, #1
24011dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011dd6:	687b      	ldr	r3, [r7, #4]
24011dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011ddc:	b2db      	uxtb	r3, r3
24011dde:	2b01      	cmp	r3, #1
24011de0:	d144      	bne.n	24011e6c <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011de2:	687b      	ldr	r3, [r7, #4]
24011de4:	2200      	movs	r2, #0
24011de6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011de8:	683b      	ldr	r3, [r7, #0]
24011dea:	2b00      	cmp	r3, #0
24011dec:	d031      	beq.n	24011e52 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24011dee:	687b      	ldr	r3, [r7, #4]
24011df0:	2222      	movs	r2, #34	; 0x22
24011df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011df6:	687b      	ldr	r3, [r7, #4]
24011df8:	681b      	ldr	r3, [r3, #0]
24011dfa:	691b      	ldr	r3, [r3, #16]
24011dfc:	1c5a      	adds	r2, r3, #1
24011dfe:	687b      	ldr	r3, [r7, #4]
24011e00:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011e02:	687b      	ldr	r3, [r7, #4]
24011e04:	681b      	ldr	r3, [r3, #0]
24011e06:	691b      	ldr	r3, [r3, #16]
24011e08:	1c5a      	adds	r2, r3, #1
24011e0a:	687b      	ldr	r3, [r7, #4]
24011e0c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24011e0e:	687b      	ldr	r3, [r7, #4]
24011e10:	683a      	ldr	r2, [r7, #0]
24011e12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011e14:	687b      	ldr	r3, [r7, #4]
24011e16:	681b      	ldr	r3, [r3, #0]
24011e18:	2203      	movs	r2, #3
24011e1a:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24011e1c:	687b      	ldr	r3, [r7, #4]
24011e1e:	681b      	ldr	r3, [r3, #0]
24011e20:	695b      	ldr	r3, [r3, #20]
24011e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24011e26:	687b      	ldr	r3, [r7, #4]
24011e28:	681b      	ldr	r3, [r3, #0]
24011e2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24011e2e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24011e30:	687b      	ldr	r3, [r7, #4]
24011e32:	681b      	ldr	r3, [r3, #0]
24011e34:	68ba      	ldr	r2, [r7, #8]
24011e36:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011e38:	687b      	ldr	r3, [r7, #4]
24011e3a:	2200      	movs	r2, #0
24011e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24011e40:	687b      	ldr	r3, [r7, #4]
24011e42:	681b      	ldr	r3, [r3, #0]
24011e44:	681a      	ldr	r2, [r3, #0]
24011e46:	687b      	ldr	r3, [r7, #4]
24011e48:	681b      	ldr	r3, [r3, #0]
24011e4a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24011e4e:	601a      	str	r2, [r3, #0]
24011e50:	e012      	b.n	24011e78 <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011e52:	687b      	ldr	r3, [r7, #4]
24011e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011e56:	f043 0208 	orr.w	r2, r3, #8
24011e5a:	687b      	ldr	r3, [r7, #4]
24011e5c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011e5e:	2301      	movs	r3, #1
24011e60:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011e62:	687b      	ldr	r3, [r7, #4]
24011e64:	2200      	movs	r2, #0
24011e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011e6a:	e005      	b.n	24011e78 <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
24011e6c:	2302      	movs	r3, #2
24011e6e:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011e70:	687b      	ldr	r3, [r7, #4]
24011e72:	2200      	movs	r2, #0
24011e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24011e78:	7bfb      	ldrb	r3, [r7, #15]
}
24011e7a:	4618      	mov	r0, r3
24011e7c:	3714      	adds	r7, #20
24011e7e:	46bd      	mov	sp, r7
24011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
24011e84:	4770      	bx	lr
	...

24011e88 <HAL_QSPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011e88:	b590      	push	{r4, r7, lr}
24011e8a:	b087      	sub	sp, #28
24011e8c:	af02      	add	r7, sp, #8
24011e8e:	6078      	str	r0, [r7, #4]
24011e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011e92:	2300      	movs	r3, #0
24011e94:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24011e96:	687b      	ldr	r3, [r7, #4]
24011e98:	681b      	ldr	r3, [r3, #0]
24011e9a:	691b      	ldr	r3, [r3, #16]
24011e9c:	3301      	adds	r3, #1
24011e9e:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011ea0:	687b      	ldr	r3, [r7, #4]
24011ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011ea6:	b2db      	uxtb	r3, r3
24011ea8:	2b01      	cmp	r3, #1
24011eaa:	d101      	bne.n	24011eb0 <HAL_QSPI_Transmit_DMA+0x28>
24011eac:	2302      	movs	r3, #2
24011eae:	e0cb      	b.n	24012048 <HAL_QSPI_Transmit_DMA+0x1c0>
24011eb0:	687b      	ldr	r3, [r7, #4]
24011eb2:	2201      	movs	r2, #1
24011eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011eb8:	687b      	ldr	r3, [r7, #4]
24011eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011ebe:	b2db      	uxtb	r3, r3
24011ec0:	2b01      	cmp	r3, #1
24011ec2:	f040 80ba 	bne.w	2401203a <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011ec6:	687b      	ldr	r3, [r7, #4]
24011ec8:	2200      	movs	r2, #0
24011eca:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011ecc:	683b      	ldr	r3, [r7, #0]
24011ece:	2b00      	cmp	r3, #0
24011ed0:	f000 80a6 	beq.w	24012020 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
24011ed4:	687b      	ldr	r3, [r7, #4]
24011ed6:	68ba      	ldr	r2, [r7, #8]
24011ed8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011eda:	687b      	ldr	r3, [r7, #4]
24011edc:	2212      	movs	r2, #18
24011ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24011ee2:	687b      	ldr	r3, [r7, #4]
24011ee4:	681b      	ldr	r3, [r3, #0]
24011ee6:	2203      	movs	r2, #3
24011ee8:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
24011eea:	687b      	ldr	r3, [r7, #4]
24011eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24011eee:	687b      	ldr	r3, [r7, #4]
24011ef0:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
24011ef2:	687b      	ldr	r3, [r7, #4]
24011ef4:	683a      	ldr	r2, [r7, #0]
24011ef6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011ef8:	687b      	ldr	r3, [r7, #4]
24011efa:	681b      	ldr	r3, [r3, #0]
24011efc:	695a      	ldr	r2, [r3, #20]
24011efe:	687b      	ldr	r3, [r7, #4]
24011f00:	681b      	ldr	r3, [r3, #0]
24011f02:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011f06:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
24011f08:	687b      	ldr	r3, [r7, #4]
24011f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f0c:	4a50      	ldr	r2, [pc, #320]	; (24012050 <HAL_QSPI_Transmit_DMA+0x1c8>)
24011f0e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24011f10:	687b      	ldr	r3, [r7, #4]
24011f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f14:	4a4f      	ldr	r2, [pc, #316]	; (24012054 <HAL_QSPI_Transmit_DMA+0x1cc>)
24011f16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24011f18:	687b      	ldr	r3, [r7, #4]
24011f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f1c:	2200      	movs	r2, #0
24011f1e:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
24011f20:	687b      	ldr	r3, [r7, #4]
24011f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f24:	681b      	ldr	r3, [r3, #0]
24011f26:	6919      	ldr	r1, [r3, #16]
24011f28:	687b      	ldr	r3, [r7, #4]
24011f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f2c:	681a      	ldr	r2, [r3, #0]
24011f2e:	4b4a      	ldr	r3, [pc, #296]	; (24012058 <HAL_QSPI_Transmit_DMA+0x1d0>)
24011f30:	400b      	ands	r3, r1
24011f32:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
24011f34:	687b      	ldr	r3, [r7, #4]
24011f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f38:	69db      	ldr	r3, [r3, #28]
24011f3a:	2b00      	cmp	r3, #0
24011f3c:	d10c      	bne.n	24011f58 <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
24011f3e:	687b      	ldr	r3, [r7, #4]
24011f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f42:	681b      	ldr	r3, [r3, #0]
24011f44:	691a      	ldr	r2, [r3, #16]
24011f46:	4b45      	ldr	r3, [pc, #276]	; (2401205c <HAL_QSPI_Transmit_DMA+0x1d4>)
24011f48:	4013      	ands	r3, r2
24011f4a:	687a      	ldr	r2, [r7, #4]
24011f4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24011f4e:	6812      	ldr	r2, [r2, #0]
24011f50:	f043 0302 	orr.w	r3, r3, #2
24011f54:	6113      	str	r3, [r2, #16]
24011f56:	e02c      	b.n	24011fb2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
24011f58:	687b      	ldr	r3, [r7, #4]
24011f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f5c:	69db      	ldr	r3, [r3, #28]
24011f5e:	2b10      	cmp	r3, #16
24011f60:	d10c      	bne.n	24011f7c <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
24011f62:	687b      	ldr	r3, [r7, #4]
24011f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f66:	681b      	ldr	r3, [r3, #0]
24011f68:	691a      	ldr	r2, [r3, #16]
24011f6a:	4b3c      	ldr	r3, [pc, #240]	; (2401205c <HAL_QSPI_Transmit_DMA+0x1d4>)
24011f6c:	4013      	ands	r3, r2
24011f6e:	687a      	ldr	r2, [r7, #4]
24011f70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24011f72:	6812      	ldr	r2, [r2, #0]
24011f74:	f443 7381 	orr.w	r3, r3, #258	; 0x102
24011f78:	6113      	str	r3, [r2, #16]
24011f7a:	e01a      	b.n	24011fb2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
24011f7c:	687b      	ldr	r3, [r7, #4]
24011f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f80:	69db      	ldr	r3, [r3, #28]
24011f82:	2b20      	cmp	r3, #32
24011f84:	d10d      	bne.n	24011fa2 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
24011f86:	687b      	ldr	r3, [r7, #4]
24011f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f8a:	681b      	ldr	r3, [r3, #0]
24011f8c:	691b      	ldr	r3, [r3, #16]
24011f8e:	4a33      	ldr	r2, [pc, #204]	; (2401205c <HAL_QSPI_Transmit_DMA+0x1d4>)
24011f90:	401a      	ands	r2, r3
24011f92:	687b      	ldr	r3, [r7, #4]
24011f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011f96:	6819      	ldr	r1, [r3, #0]
24011f98:	f240 2302 	movw	r3, #514	; 0x202
24011f9c:	4313      	orrs	r3, r2
24011f9e:	610b      	str	r3, [r1, #16]
24011fa0:	e007      	b.n	24011fb2 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24011fa2:	687b      	ldr	r3, [r7, #4]
24011fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011fa6:	f043 0204 	orr.w	r2, r3, #4
24011faa:	687b      	ldr	r3, [r7, #4]
24011fac:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
24011fae:	2301      	movs	r3, #1
24011fb0:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
24011fb2:	687b      	ldr	r3, [r7, #4]
24011fb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24011fb6:	6839      	ldr	r1, [r7, #0]
24011fb8:	687b      	ldr	r3, [r7, #4]
24011fba:	681b      	ldr	r3, [r3, #0]
24011fbc:	3320      	adds	r3, #32
24011fbe:	461c      	mov	r4, r3
24011fc0:	687b      	ldr	r3, [r7, #4]
24011fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24011fc4:	2201      	movs	r2, #1
24011fc6:	9200      	str	r2, [sp, #0]
24011fc8:	4622      	mov	r2, r4
24011fca:	f7fd feb8 	bl	2400fd3e <HAL_MDMA_Start_IT>
24011fce:	4603      	mov	r3, r0
24011fd0:	2b00      	cmp	r3, #0
24011fd2:	d114      	bne.n	24011ffe <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24011fd4:	687b      	ldr	r3, [r7, #4]
24011fd6:	2200      	movs	r2, #0
24011fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
24011fdc:	687b      	ldr	r3, [r7, #4]
24011fde:	681b      	ldr	r3, [r3, #0]
24011fe0:	681a      	ldr	r2, [r3, #0]
24011fe2:	687b      	ldr	r3, [r7, #4]
24011fe4:	681b      	ldr	r3, [r3, #0]
24011fe6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24011fea:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24011fec:	687b      	ldr	r3, [r7, #4]
24011fee:	681b      	ldr	r3, [r3, #0]
24011ff0:	681a      	ldr	r2, [r3, #0]
24011ff2:	687b      	ldr	r3, [r7, #4]
24011ff4:	681b      	ldr	r3, [r3, #0]
24011ff6:	f042 0204 	orr.w	r2, r2, #4
24011ffa:	601a      	str	r2, [r3, #0]
24011ffc:	e023      	b.n	24012046 <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
24011ffe:	2301      	movs	r3, #1
24012000:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012002:	687b      	ldr	r3, [r7, #4]
24012004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012006:	f043 0204 	orr.w	r2, r3, #4
2401200a:	687b      	ldr	r3, [r7, #4]
2401200c:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
2401200e:	687b      	ldr	r3, [r7, #4]
24012010:	2201      	movs	r2, #1
24012012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012016:	687b      	ldr	r3, [r7, #4]
24012018:	2200      	movs	r2, #0
2401201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2401201e:	e012      	b.n	24012046 <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24012020:	687b      	ldr	r3, [r7, #4]
24012022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012024:	f043 0208 	orr.w	r2, r3, #8
24012028:	687b      	ldr	r3, [r7, #4]
2401202a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2401202c:	2301      	movs	r3, #1
2401202e:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24012030:	687b      	ldr	r3, [r7, #4]
24012032:	2200      	movs	r2, #0
24012034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012038:	e005      	b.n	24012046 <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
2401203a:	2302      	movs	r3, #2
2401203c:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2401203e:	687b      	ldr	r3, [r7, #4]
24012040:	2200      	movs	r2, #0
24012042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24012046:	7bfb      	ldrb	r3, [r7, #15]
}
24012048:	4618      	mov	r0, r3
2401204a:	3714      	adds	r7, #20
2401204c:	46bd      	mov	sp, r7
2401204e:	bd90      	pop	{r4, r7, pc}
24012050:	240128c9 	.word	0x240128c9
24012054:	240128f9 	.word	0x240128f9
24012058:	fffff3f3 	.word	0xfffff3f3
2401205c:	fffffcfc 	.word	0xfffffcfc

24012060 <HAL_QSPI_Receive_DMA>:
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24012060:	b590      	push	{r4, r7, lr}
24012062:	b089      	sub	sp, #36	; 0x24
24012064:	af02      	add	r7, sp, #8
24012066:	6078      	str	r0, [r7, #4]
24012068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401206a:	2300      	movs	r3, #0
2401206c:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2401206e:	687b      	ldr	r3, [r7, #4]
24012070:	681b      	ldr	r3, [r3, #0]
24012072:	699b      	ldr	r3, [r3, #24]
24012074:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24012076:	687b      	ldr	r3, [r7, #4]
24012078:	681b      	ldr	r3, [r3, #0]
2401207a:	691b      	ldr	r3, [r3, #16]
2401207c:	3301      	adds	r3, #1
2401207e:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
24012080:	687b      	ldr	r3, [r7, #4]
24012082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012086:	b2db      	uxtb	r3, r3
24012088:	2b01      	cmp	r3, #1
2401208a:	d101      	bne.n	24012090 <HAL_QSPI_Receive_DMA+0x30>
2401208c:	2302      	movs	r3, #2
2401208e:	e0d1      	b.n	24012234 <HAL_QSPI_Receive_DMA+0x1d4>
24012090:	687b      	ldr	r3, [r7, #4]
24012092:	2201      	movs	r2, #1
24012094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012098:	687b      	ldr	r3, [r7, #4]
2401209a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401209e:	b2db      	uxtb	r3, r3
240120a0:	2b01      	cmp	r3, #1
240120a2:	f040 80c0 	bne.w	24012226 <HAL_QSPI_Receive_DMA+0x1c6>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240120a6:	687b      	ldr	r3, [r7, #4]
240120a8:	2200      	movs	r2, #0
240120aa:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240120ac:	683b      	ldr	r3, [r7, #0]
240120ae:	2b00      	cmp	r3, #0
240120b0:	f000 80ac 	beq.w	2401220c <HAL_QSPI_Receive_DMA+0x1ac>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
240120b4:	687b      	ldr	r3, [r7, #4]
240120b6:	68fa      	ldr	r2, [r7, #12]
240120b8:	639a      	str	r2, [r3, #56]	; 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240120ba:	687b      	ldr	r3, [r7, #4]
240120bc:	2222      	movs	r2, #34	; 0x22
240120be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
240120c2:	687b      	ldr	r3, [r7, #4]
240120c4:	681b      	ldr	r3, [r3, #0]
240120c6:	2203      	movs	r2, #3
240120c8:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
240120ca:	687b      	ldr	r3, [r7, #4]
240120cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
240120ce:	687b      	ldr	r3, [r7, #4]
240120d0:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
240120d2:	687b      	ldr	r3, [r7, #4]
240120d4:	683a      	ldr	r2, [r7, #0]
240120d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
240120d8:	687b      	ldr	r3, [r7, #4]
240120da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120dc:	4a57      	ldr	r2, [pc, #348]	; (2401223c <HAL_QSPI_Receive_DMA+0x1dc>)
240120de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
240120e0:	687b      	ldr	r3, [r7, #4]
240120e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120e4:	4a56      	ldr	r2, [pc, #344]	; (24012240 <HAL_QSPI_Receive_DMA+0x1e0>)
240120e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
240120e8:	687b      	ldr	r3, [r7, #4]
240120ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120ec:	2200      	movs	r2, #0
240120ee:	659a      	str	r2, [r3, #88]	; 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
240120f0:	687b      	ldr	r3, [r7, #4]
240120f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120f4:	681b      	ldr	r3, [r3, #0]
240120f6:	6919      	ldr	r1, [r3, #16]
240120f8:	687b      	ldr	r3, [r7, #4]
240120fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240120fc:	681a      	ldr	r2, [r3, #0]
240120fe:	4b51      	ldr	r3, [pc, #324]	; (24012244 <HAL_QSPI_Receive_DMA+0x1e4>)
24012100:	400b      	ands	r3, r1
24012102:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
24012104:	687b      	ldr	r3, [r7, #4]
24012106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012108:	6a1b      	ldr	r3, [r3, #32]
2401210a:	2b00      	cmp	r3, #0
2401210c:	d10c      	bne.n	24012128 <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
2401210e:	687b      	ldr	r3, [r7, #4]
24012110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012112:	681b      	ldr	r3, [r3, #0]
24012114:	691a      	ldr	r2, [r3, #16]
24012116:	4b4c      	ldr	r3, [pc, #304]	; (24012248 <HAL_QSPI_Receive_DMA+0x1e8>)
24012118:	4013      	ands	r3, r2
2401211a:	687a      	ldr	r2, [r7, #4]
2401211c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2401211e:	6812      	ldr	r2, [r2, #0]
24012120:	f043 0308 	orr.w	r3, r3, #8
24012124:	6113      	str	r3, [r2, #16]
24012126:	e02c      	b.n	24012182 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
24012128:	687b      	ldr	r3, [r7, #4]
2401212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401212c:	6a1b      	ldr	r3, [r3, #32]
2401212e:	2b40      	cmp	r3, #64	; 0x40
24012130:	d10c      	bne.n	2401214c <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
24012132:	687b      	ldr	r3, [r7, #4]
24012134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012136:	681b      	ldr	r3, [r3, #0]
24012138:	691a      	ldr	r2, [r3, #16]
2401213a:	4b43      	ldr	r3, [pc, #268]	; (24012248 <HAL_QSPI_Receive_DMA+0x1e8>)
2401213c:	4013      	ands	r3, r2
2401213e:	687a      	ldr	r2, [r7, #4]
24012140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24012142:	6812      	ldr	r2, [r2, #0]
24012144:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
24012148:	6113      	str	r3, [r2, #16]
2401214a:	e01a      	b.n	24012182 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
2401214c:	687b      	ldr	r3, [r7, #4]
2401214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012150:	6a1b      	ldr	r3, [r3, #32]
24012152:	2b80      	cmp	r3, #128	; 0x80
24012154:	d10d      	bne.n	24012172 <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
24012156:	687b      	ldr	r3, [r7, #4]
24012158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401215a:	681b      	ldr	r3, [r3, #0]
2401215c:	691b      	ldr	r3, [r3, #16]
2401215e:	4a3a      	ldr	r2, [pc, #232]	; (24012248 <HAL_QSPI_Receive_DMA+0x1e8>)
24012160:	401a      	ands	r2, r3
24012162:	687b      	ldr	r3, [r7, #4]
24012164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012166:	6819      	ldr	r1, [r3, #0]
24012168:	f640 0308 	movw	r3, #2056	; 0x808
2401216c:	4313      	orrs	r3, r2
2401216e:	610b      	str	r3, [r1, #16]
24012170:	e007      	b.n	24012182 <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012172:	687b      	ldr	r3, [r7, #4]
24012174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012176:	f043 0204 	orr.w	r2, r3, #4
2401217a:	687b      	ldr	r3, [r7, #4]
2401217c:	645a      	str	r2, [r3, #68]	; 0x44
        status = HAL_ERROR;
2401217e:	2301      	movs	r3, #1
24012180:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24012182:	687b      	ldr	r3, [r7, #4]
24012184:	681b      	ldr	r3, [r3, #0]
24012186:	695b      	ldr	r3, [r3, #20]
24012188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2401218c:	687b      	ldr	r3, [r7, #4]
2401218e:	681b      	ldr	r3, [r3, #0]
24012190:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24012194:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
24012196:	687b      	ldr	r3, [r7, #4]
24012198:	681b      	ldr	r3, [r3, #0]
2401219a:	693a      	ldr	r2, [r7, #16]
2401219c:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
2401219e:	687b      	ldr	r3, [r7, #4]
240121a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
240121a2:	687b      	ldr	r3, [r7, #4]
240121a4:	681b      	ldr	r3, [r3, #0]
240121a6:	3320      	adds	r3, #32
240121a8:	461c      	mov	r4, r3
240121aa:	683a      	ldr	r2, [r7, #0]
240121ac:	687b      	ldr	r3, [r7, #4]
240121ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240121b0:	2101      	movs	r1, #1
240121b2:	9100      	str	r1, [sp, #0]
240121b4:	4621      	mov	r1, r4
240121b6:	f7fd fdc2 	bl	2400fd3e <HAL_MDMA_Start_IT>
240121ba:	4603      	mov	r3, r0
240121bc:	2b00      	cmp	r3, #0
240121be:	d114      	bne.n	240121ea <HAL_QSPI_Receive_DMA+0x18a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240121c0:	687b      	ldr	r3, [r7, #4]
240121c2:	2200      	movs	r2, #0
240121c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
240121c8:	687b      	ldr	r3, [r7, #4]
240121ca:	681b      	ldr	r3, [r3, #0]
240121cc:	681a      	ldr	r2, [r3, #0]
240121ce:	687b      	ldr	r3, [r7, #4]
240121d0:	681b      	ldr	r3, [r3, #0]
240121d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240121d6:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240121d8:	687b      	ldr	r3, [r7, #4]
240121da:	681b      	ldr	r3, [r3, #0]
240121dc:	681a      	ldr	r2, [r3, #0]
240121de:	687b      	ldr	r3, [r7, #4]
240121e0:	681b      	ldr	r3, [r3, #0]
240121e2:	f042 0204 	orr.w	r2, r2, #4
240121e6:	601a      	str	r2, [r3, #0]
240121e8:	e023      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x1d2>
        }
        else
        {
          status = HAL_ERROR;
240121ea:	2301      	movs	r3, #1
240121ec:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240121ee:	687b      	ldr	r3, [r7, #4]
240121f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240121f2:	f043 0204 	orr.w	r2, r3, #4
240121f6:	687b      	ldr	r3, [r7, #4]
240121f8:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
240121fa:	687b      	ldr	r3, [r7, #4]
240121fc:	2201      	movs	r2, #1
240121fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012202:	687b      	ldr	r3, [r7, #4]
24012204:	2200      	movs	r2, #0
24012206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2401220a:	e012      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x1d2>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2401220c:	687b      	ldr	r3, [r7, #4]
2401220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012210:	f043 0208 	orr.w	r2, r3, #8
24012214:	687b      	ldr	r3, [r7, #4]
24012216:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24012218:	2301      	movs	r3, #1
2401221a:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2401221c:	687b      	ldr	r3, [r7, #4]
2401221e:	2200      	movs	r2, #0
24012220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012224:	e005      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x1d2>
    }
  }
  else
  {
    status = HAL_BUSY;
24012226:	2302      	movs	r3, #2
24012228:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2401222a:	687b      	ldr	r3, [r7, #4]
2401222c:	2200      	movs	r2, #0
2401222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24012232:	7dfb      	ldrb	r3, [r7, #23]
}
24012234:	4618      	mov	r0, r3
24012236:	371c      	adds	r7, #28
24012238:	46bd      	mov	sp, r7
2401223a:	bd90      	pop	{r4, r7, pc}
2401223c:	24012899 	.word	0x24012899
24012240:	240128f9 	.word	0x240128f9
24012244:	fffffcfc 	.word	0xfffffcfc
24012248:	fffff3f3 	.word	0xfffff3f3

2401224c <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
2401224c:	b580      	push	{r7, lr}
2401224e:	b088      	sub	sp, #32
24012250:	af02      	add	r7, sp, #8
24012252:	60f8      	str	r0, [r7, #12]
24012254:	60b9      	str	r1, [r7, #8]
24012256:	607a      	str	r2, [r7, #4]
24012258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2401225a:	f7ef ff77 	bl	2400214c <HAL_GetTick>
2401225e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012260:	68fb      	ldr	r3, [r7, #12]
24012262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012266:	b2db      	uxtb	r3, r3
24012268:	2b01      	cmp	r3, #1
2401226a:	d101      	bne.n	24012270 <HAL_QSPI_AutoPolling+0x24>
2401226c:	2302      	movs	r3, #2
2401226e:	e060      	b.n	24012332 <HAL_QSPI_AutoPolling+0xe6>
24012270:	68fb      	ldr	r3, [r7, #12]
24012272:	2201      	movs	r2, #1
24012274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012278:	68fb      	ldr	r3, [r7, #12]
2401227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401227e:	b2db      	uxtb	r3, r3
24012280:	2b01      	cmp	r3, #1
24012282:	d14f      	bne.n	24012324 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012284:	68fb      	ldr	r3, [r7, #12]
24012286:	2200      	movs	r2, #0
24012288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
2401228a:	68fb      	ldr	r3, [r7, #12]
2401228c:	2242      	movs	r2, #66	; 0x42
2401228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24012292:	683b      	ldr	r3, [r7, #0]
24012294:	9300      	str	r3, [sp, #0]
24012296:	693b      	ldr	r3, [r7, #16]
24012298:	2200      	movs	r2, #0
2401229a:	2120      	movs	r1, #32
2401229c:	68f8      	ldr	r0, [r7, #12]
2401229e:	f000 fb80 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
240122a2:	4603      	mov	r3, r0
240122a4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
240122a6:	7dfb      	ldrb	r3, [r7, #23]
240122a8:	2b00      	cmp	r3, #0
240122aa:	d13d      	bne.n	24012328 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
240122ac:	68fb      	ldr	r3, [r7, #12]
240122ae:	681b      	ldr	r3, [r3, #0]
240122b0:	687a      	ldr	r2, [r7, #4]
240122b2:	6812      	ldr	r2, [r2, #0]
240122b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
240122b6:	68fb      	ldr	r3, [r7, #12]
240122b8:	681b      	ldr	r3, [r3, #0]
240122ba:	687a      	ldr	r2, [r7, #4]
240122bc:	6852      	ldr	r2, [r2, #4]
240122be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
240122c0:	68fb      	ldr	r3, [r7, #12]
240122c2:	681b      	ldr	r3, [r3, #0]
240122c4:	687a      	ldr	r2, [r7, #4]
240122c6:	6892      	ldr	r2, [r2, #8]
240122c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240122ca:	68fb      	ldr	r3, [r7, #12]
240122cc:	681b      	ldr	r3, [r3, #0]
240122ce:	681b      	ldr	r3, [r3, #0]
240122d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
240122d4:	687b      	ldr	r3, [r7, #4]
240122d6:	691b      	ldr	r3, [r3, #16]
240122d8:	431a      	orrs	r2, r3
240122da:	68fb      	ldr	r3, [r7, #12]
240122dc:	681b      	ldr	r3, [r3, #0]
240122de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
240122e2:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
240122e4:	687b      	ldr	r3, [r7, #4]
240122e6:	68da      	ldr	r2, [r3, #12]
240122e8:	68bb      	ldr	r3, [r7, #8]
240122ea:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240122ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
240122f0:	68b9      	ldr	r1, [r7, #8]
240122f2:	68f8      	ldr	r0, [r7, #12]
240122f4:	f000 fb8c 	bl	24012a10 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
240122f8:	683b      	ldr	r3, [r7, #0]
240122fa:	9300      	str	r3, [sp, #0]
240122fc:	693b      	ldr	r3, [r7, #16]
240122fe:	2201      	movs	r2, #1
24012300:	2108      	movs	r1, #8
24012302:	68f8      	ldr	r0, [r7, #12]
24012304:	f000 fb4d 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24012308:	4603      	mov	r3, r0
2401230a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
2401230c:	7dfb      	ldrb	r3, [r7, #23]
2401230e:	2b00      	cmp	r3, #0
24012310:	d10a      	bne.n	24012328 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
24012312:	68fb      	ldr	r3, [r7, #12]
24012314:	681b      	ldr	r3, [r3, #0]
24012316:	2208      	movs	r2, #8
24012318:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
2401231a:	68fb      	ldr	r3, [r7, #12]
2401231c:	2201      	movs	r2, #1
2401231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24012322:	e001      	b.n	24012328 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24012324:	2302      	movs	r3, #2
24012326:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24012328:	68fb      	ldr	r3, [r7, #12]
2401232a:	2200      	movs	r2, #0
2401232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24012330:	7dfb      	ldrb	r3, [r7, #23]
}
24012332:	4618      	mov	r0, r3
24012334:	3718      	adds	r7, #24
24012336:	46bd      	mov	sp, r7
24012338:	bd80      	pop	{r7, pc}

2401233a <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
2401233a:	b580      	push	{r7, lr}
2401233c:	b088      	sub	sp, #32
2401233e:	af02      	add	r7, sp, #8
24012340:	60f8      	str	r0, [r7, #12]
24012342:	60b9      	str	r1, [r7, #8]
24012344:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012346:	f7ef ff01 	bl	2400214c <HAL_GetTick>
2401234a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401234c:	68fb      	ldr	r3, [r7, #12]
2401234e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012352:	b2db      	uxtb	r3, r3
24012354:	2b01      	cmp	r3, #1
24012356:	d101      	bne.n	2401235c <HAL_QSPI_AutoPolling_IT+0x22>
24012358:	2302      	movs	r3, #2
2401235a:	e062      	b.n	24012422 <HAL_QSPI_AutoPolling_IT+0xe8>
2401235c:	68fb      	ldr	r3, [r7, #12]
2401235e:	2201      	movs	r2, #1
24012360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012364:	68fb      	ldr	r3, [r7, #12]
24012366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401236a:	b2db      	uxtb	r3, r3
2401236c:	2b01      	cmp	r3, #1
2401236e:	d151      	bne.n	24012414 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012370:	68fb      	ldr	r3, [r7, #12]
24012372:	2200      	movs	r2, #0
24012374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24012376:	68fb      	ldr	r3, [r7, #12]
24012378:	2242      	movs	r2, #66	; 0x42
2401237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401237e:	68fb      	ldr	r3, [r7, #12]
24012380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012382:	9300      	str	r3, [sp, #0]
24012384:	693b      	ldr	r3, [r7, #16]
24012386:	2200      	movs	r2, #0
24012388:	2120      	movs	r1, #32
2401238a:	68f8      	ldr	r0, [r7, #12]
2401238c:	f000 fb09 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24012390:	4603      	mov	r3, r0
24012392:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012394:	7dfb      	ldrb	r3, [r7, #23]
24012396:	2b00      	cmp	r3, #0
24012398:	d137      	bne.n	2401240a <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
2401239a:	68fb      	ldr	r3, [r7, #12]
2401239c:	681b      	ldr	r3, [r3, #0]
2401239e:	687a      	ldr	r2, [r7, #4]
240123a0:	6812      	ldr	r2, [r2, #0]
240123a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
240123a4:	68fb      	ldr	r3, [r7, #12]
240123a6:	681b      	ldr	r3, [r3, #0]
240123a8:	687a      	ldr	r2, [r7, #4]
240123aa:	6852      	ldr	r2, [r2, #4]
240123ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
240123ae:	68fb      	ldr	r3, [r7, #12]
240123b0:	681b      	ldr	r3, [r3, #0]
240123b2:	687a      	ldr	r2, [r7, #4]
240123b4:	6892      	ldr	r2, [r2, #8]
240123b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240123b8:	68fb      	ldr	r3, [r7, #12]
240123ba:	681b      	ldr	r3, [r3, #0]
240123bc:	681b      	ldr	r3, [r3, #0]
240123be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
240123c2:	687b      	ldr	r3, [r7, #4]
240123c4:	691a      	ldr	r2, [r3, #16]
240123c6:	687b      	ldr	r3, [r7, #4]
240123c8:	695b      	ldr	r3, [r3, #20]
240123ca:	431a      	orrs	r2, r3
240123cc:	68fb      	ldr	r3, [r7, #12]
240123ce:	681b      	ldr	r3, [r3, #0]
240123d0:	430a      	orrs	r2, r1
240123d2:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
240123d4:	68fb      	ldr	r3, [r7, #12]
240123d6:	681b      	ldr	r3, [r3, #0]
240123d8:	2209      	movs	r2, #9
240123da:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
240123dc:	687b      	ldr	r3, [r7, #4]
240123de:	68da      	ldr	r2, [r3, #12]
240123e0:	68bb      	ldr	r3, [r7, #8]
240123e2:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240123e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
240123e8:	68b9      	ldr	r1, [r7, #8]
240123ea:	68f8      	ldr	r0, [r7, #12]
240123ec:	f000 fb10 	bl	24012a10 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240123f0:	68fb      	ldr	r3, [r7, #12]
240123f2:	2200      	movs	r2, #0
240123f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
240123f8:	68fb      	ldr	r3, [r7, #12]
240123fa:	681b      	ldr	r3, [r3, #0]
240123fc:	681a      	ldr	r2, [r3, #0]
240123fe:	68fb      	ldr	r3, [r7, #12]
24012400:	681b      	ldr	r3, [r3, #0]
24012402:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
24012406:	601a      	str	r2, [r3, #0]
24012408:	e00a      	b.n	24012420 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2401240a:	68fb      	ldr	r3, [r7, #12]
2401240c:	2200      	movs	r2, #0
2401240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24012412:	e005      	b.n	24012420 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
24012414:	2302      	movs	r3, #2
24012416:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012418:	68fb      	ldr	r3, [r7, #12]
2401241a:	2200      	movs	r2, #0
2401241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24012420:	7dfb      	ldrb	r3, [r7, #23]
}
24012422:	4618      	mov	r0, r3
24012424:	3718      	adds	r7, #24
24012426:	46bd      	mov	sp, r7
24012428:	bd80      	pop	{r7, pc}

2401242a <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
2401242a:	b580      	push	{r7, lr}
2401242c:	b088      	sub	sp, #32
2401242e:	af02      	add	r7, sp, #8
24012430:	60f8      	str	r0, [r7, #12]
24012432:	60b9      	str	r1, [r7, #8]
24012434:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012436:	f7ef fe89 	bl	2400214c <HAL_GetTick>
2401243a:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401243c:	68fb      	ldr	r3, [r7, #12]
2401243e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012442:	b2db      	uxtb	r3, r3
24012444:	2b01      	cmp	r3, #1
24012446:	d101      	bne.n	2401244c <HAL_QSPI_MemoryMapped+0x22>
24012448:	2302      	movs	r3, #2
2401244a:	e04c      	b.n	240124e6 <HAL_QSPI_MemoryMapped+0xbc>
2401244c:	68fb      	ldr	r3, [r7, #12]
2401244e:	2201      	movs	r2, #1
24012450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012454:	68fb      	ldr	r3, [r7, #12]
24012456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401245a:	b2db      	uxtb	r3, r3
2401245c:	2b01      	cmp	r3, #1
2401245e:	d13b      	bne.n	240124d8 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012460:	68fb      	ldr	r3, [r7, #12]
24012462:	2200      	movs	r2, #0
24012464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
24012466:	68fb      	ldr	r3, [r7, #12]
24012468:	2282      	movs	r2, #130	; 0x82
2401246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401246e:	68fb      	ldr	r3, [r7, #12]
24012470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012472:	9300      	str	r3, [sp, #0]
24012474:	693b      	ldr	r3, [r7, #16]
24012476:	2200      	movs	r2, #0
24012478:	2120      	movs	r1, #32
2401247a:	68f8      	ldr	r0, [r7, #12]
2401247c:	f000 fa91 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
24012480:	4603      	mov	r3, r0
24012482:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012484:	7dfb      	ldrb	r3, [r7, #23]
24012486:	2b00      	cmp	r3, #0
24012488:	d128      	bne.n	240124dc <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2401248a:	68fb      	ldr	r3, [r7, #12]
2401248c:	681b      	ldr	r3, [r3, #0]
2401248e:	681b      	ldr	r3, [r3, #0]
24012490:	f023 0108 	bic.w	r1, r3, #8
24012494:	687b      	ldr	r3, [r7, #4]
24012496:	685a      	ldr	r2, [r3, #4]
24012498:	68fb      	ldr	r3, [r7, #12]
2401249a:	681b      	ldr	r3, [r3, #0]
2401249c:	430a      	orrs	r2, r1
2401249e:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
240124a0:	687b      	ldr	r3, [r7, #4]
240124a2:	685b      	ldr	r3, [r3, #4]
240124a4:	2b08      	cmp	r3, #8
240124a6:	d110      	bne.n	240124ca <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
240124a8:	68fb      	ldr	r3, [r7, #12]
240124aa:	681b      	ldr	r3, [r3, #0]
240124ac:	687a      	ldr	r2, [r7, #4]
240124ae:	6812      	ldr	r2, [r2, #0]
240124b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
240124b2:	68fb      	ldr	r3, [r7, #12]
240124b4:	681b      	ldr	r3, [r3, #0]
240124b6:	2210      	movs	r2, #16
240124b8:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
240124ba:	68fb      	ldr	r3, [r7, #12]
240124bc:	681b      	ldr	r3, [r3, #0]
240124be:	681a      	ldr	r2, [r3, #0]
240124c0:	68fb      	ldr	r3, [r7, #12]
240124c2:	681b      	ldr	r3, [r3, #0]
240124c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
240124c8:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
240124ca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
240124ce:	68b9      	ldr	r1, [r7, #8]
240124d0:	68f8      	ldr	r0, [r7, #12]
240124d2:	f000 fa9d 	bl	24012a10 <QSPI_Config>
240124d6:	e001      	b.n	240124dc <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
240124d8:	2302      	movs	r3, #2
240124da:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240124dc:	68fb      	ldr	r3, [r7, #12]
240124de:	2200      	movs	r2, #0
240124e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240124e4:	7dfb      	ldrb	r3, [r7, #23]
}
240124e6:	4618      	mov	r0, r3
240124e8:	3718      	adds	r7, #24
240124ea:	46bd      	mov	sp, r7
240124ec:	bd80      	pop	{r7, pc}

240124ee <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
240124ee:	b480      	push	{r7}
240124f0:	b083      	sub	sp, #12
240124f2:	af00      	add	r7, sp, #0
240124f4:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
240124f6:	bf00      	nop
240124f8:	370c      	adds	r7, #12
240124fa:	46bd      	mov	sp, r7
240124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24012500:	4770      	bx	lr

24012502 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012502:	b480      	push	{r7}
24012504:	b083      	sub	sp, #12
24012506:	af00      	add	r7, sp, #0
24012508:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
2401250a:	bf00      	nop
2401250c:	370c      	adds	r7, #12
2401250e:	46bd      	mov	sp, r7
24012510:	f85d 7b04 	ldr.w	r7, [sp], #4
24012514:	4770      	bx	lr

24012516 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24012516:	b480      	push	{r7}
24012518:	b083      	sub	sp, #12
2401251a:	af00      	add	r7, sp, #0
2401251c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
2401251e:	bf00      	nop
24012520:	370c      	adds	r7, #12
24012522:	46bd      	mov	sp, r7
24012524:	f85d 7b04 	ldr.w	r7, [sp], #4
24012528:	4770      	bx	lr

2401252a <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2401252a:	b480      	push	{r7}
2401252c:	b083      	sub	sp, #12
2401252e:	af00      	add	r7, sp, #0
24012530:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
24012532:	bf00      	nop
24012534:	370c      	adds	r7, #12
24012536:	46bd      	mov	sp, r7
24012538:	f85d 7b04 	ldr.w	r7, [sp], #4
2401253c:	4770      	bx	lr

2401253e <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2401253e:	b480      	push	{r7}
24012540:	b083      	sub	sp, #12
24012542:	af00      	add	r7, sp, #0
24012544:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
24012546:	bf00      	nop
24012548:	370c      	adds	r7, #12
2401254a:	46bd      	mov	sp, r7
2401254c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012550:	4770      	bx	lr

24012552 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
24012552:	b480      	push	{r7}
24012554:	b083      	sub	sp, #12
24012556:	af00      	add	r7, sp, #0
24012558:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2401255a:	bf00      	nop
2401255c:	370c      	adds	r7, #12
2401255e:	46bd      	mov	sp, r7
24012560:	f85d 7b04 	ldr.w	r7, [sp], #4
24012564:	4770      	bx	lr

24012566 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
24012566:	b480      	push	{r7}
24012568:	b083      	sub	sp, #12
2401256a:	af00      	add	r7, sp, #0
2401256c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
2401256e:	bf00      	nop
24012570:	370c      	adds	r7, #12
24012572:	46bd      	mov	sp, r7
24012574:	f85d 7b04 	ldr.w	r7, [sp], #4
24012578:	4770      	bx	lr

2401257a <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
2401257a:	b480      	push	{r7}
2401257c:	b083      	sub	sp, #12
2401257e:	af00      	add	r7, sp, #0
24012580:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
24012582:	bf00      	nop
24012584:	370c      	adds	r7, #12
24012586:	46bd      	mov	sp, r7
24012588:	f85d 7b04 	ldr.w	r7, [sp], #4
2401258c:	4770      	bx	lr

2401258e <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
2401258e:	b480      	push	{r7}
24012590:	b083      	sub	sp, #12
24012592:	af00      	add	r7, sp, #0
24012594:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
24012596:	687b      	ldr	r3, [r7, #4]
24012598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401259c:	b2db      	uxtb	r3, r3
}
2401259e:	4618      	mov	r0, r3
240125a0:	370c      	adds	r7, #12
240125a2:	46bd      	mov	sp, r7
240125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240125a8:	4770      	bx	lr

240125aa <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
240125aa:	b480      	push	{r7}
240125ac:	b083      	sub	sp, #12
240125ae:	af00      	add	r7, sp, #0
240125b0:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
240125b2:	687b      	ldr	r3, [r7, #4]
240125b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
240125b6:	4618      	mov	r0, r3
240125b8:	370c      	adds	r7, #12
240125ba:	46bd      	mov	sp, r7
240125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240125c0:	4770      	bx	lr

240125c2 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
240125c2:	b580      	push	{r7, lr}
240125c4:	b086      	sub	sp, #24
240125c6:	af02      	add	r7, sp, #8
240125c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240125ca:	2300      	movs	r3, #0
240125cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
240125ce:	f7ef fdbd 	bl	2400214c <HAL_GetTick>
240125d2:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
240125d4:	687b      	ldr	r3, [r7, #4]
240125d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240125da:	b2db      	uxtb	r3, r3
240125dc:	f003 0302 	and.w	r3, r3, #2
240125e0:	2b00      	cmp	r3, #0
240125e2:	d062      	beq.n	240126aa <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240125e4:	687b      	ldr	r3, [r7, #4]
240125e6:	2200      	movs	r2, #0
240125e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240125ec:	687b      	ldr	r3, [r7, #4]
240125ee:	681b      	ldr	r3, [r3, #0]
240125f0:	681b      	ldr	r3, [r3, #0]
240125f2:	f003 0304 	and.w	r3, r3, #4
240125f6:	2b00      	cmp	r3, #0
240125f8:	d017      	beq.n	2401262a <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240125fa:	687b      	ldr	r3, [r7, #4]
240125fc:	681b      	ldr	r3, [r3, #0]
240125fe:	681a      	ldr	r2, [r3, #0]
24012600:	687b      	ldr	r3, [r7, #4]
24012602:	681b      	ldr	r3, [r3, #0]
24012604:	f022 0204 	bic.w	r2, r2, #4
24012608:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
2401260a:	687b      	ldr	r3, [r7, #4]
2401260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401260e:	4618      	mov	r0, r3
24012610:	f7fd fc16 	bl	2400fe40 <HAL_MDMA_Abort>
24012614:	4603      	mov	r3, r0
24012616:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
24012618:	7bfb      	ldrb	r3, [r7, #15]
2401261a:	2b00      	cmp	r3, #0
2401261c:	d005      	beq.n	2401262a <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2401261e:	687b      	ldr	r3, [r7, #4]
24012620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012622:	f043 0204 	orr.w	r2, r3, #4
24012626:	687b      	ldr	r3, [r7, #4]
24012628:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
2401262a:	687b      	ldr	r3, [r7, #4]
2401262c:	681b      	ldr	r3, [r3, #0]
2401262e:	689b      	ldr	r3, [r3, #8]
24012630:	f003 0320 	and.w	r3, r3, #32
24012634:	2b00      	cmp	r3, #0
24012636:	d034      	beq.n	240126a2 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24012638:	687b      	ldr	r3, [r7, #4]
2401263a:	681b      	ldr	r3, [r3, #0]
2401263c:	681a      	ldr	r2, [r3, #0]
2401263e:	687b      	ldr	r3, [r7, #4]
24012640:	681b      	ldr	r3, [r3, #0]
24012642:	f042 0202 	orr.w	r2, r2, #2
24012646:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
24012648:	687b      	ldr	r3, [r7, #4]
2401264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401264c:	9300      	str	r3, [sp, #0]
2401264e:	68bb      	ldr	r3, [r7, #8]
24012650:	2201      	movs	r2, #1
24012652:	2102      	movs	r1, #2
24012654:	6878      	ldr	r0, [r7, #4]
24012656:	f000 f9a4 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
2401265a:	4603      	mov	r3, r0
2401265c:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
2401265e:	7bfb      	ldrb	r3, [r7, #15]
24012660:	2b00      	cmp	r3, #0
24012662:	d10e      	bne.n	24012682 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012664:	687b      	ldr	r3, [r7, #4]
24012666:	681b      	ldr	r3, [r3, #0]
24012668:	2202      	movs	r2, #2
2401266a:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401266c:	687b      	ldr	r3, [r7, #4]
2401266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012670:	9300      	str	r3, [sp, #0]
24012672:	68bb      	ldr	r3, [r7, #8]
24012674:	2200      	movs	r2, #0
24012676:	2120      	movs	r1, #32
24012678:	6878      	ldr	r0, [r7, #4]
2401267a:	f000 f992 	bl	240129a2 <QSPI_WaitFlagStateUntilTimeout>
2401267e:	4603      	mov	r3, r0
24012680:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
24012682:	7bfb      	ldrb	r3, [r7, #15]
24012684:	2b00      	cmp	r3, #0
24012686:	d110      	bne.n	240126aa <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24012688:	687b      	ldr	r3, [r7, #4]
2401268a:	681b      	ldr	r3, [r3, #0]
2401268c:	695a      	ldr	r2, [r3, #20]
2401268e:	687b      	ldr	r3, [r7, #4]
24012690:	681b      	ldr	r3, [r3, #0]
24012692:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012696:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24012698:	687b      	ldr	r3, [r7, #4]
2401269a:	2201      	movs	r2, #1
2401269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240126a0:	e003      	b.n	240126aa <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
240126a2:	687b      	ldr	r3, [r7, #4]
240126a4:	2201      	movs	r2, #1
240126a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
240126aa:	7bfb      	ldrb	r3, [r7, #15]
}
240126ac:	4618      	mov	r0, r3
240126ae:	3710      	adds	r7, #16
240126b0:	46bd      	mov	sp, r7
240126b2:	bd80      	pop	{r7, pc}

240126b4 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
240126b4:	b580      	push	{r7, lr}
240126b6:	b084      	sub	sp, #16
240126b8:	af00      	add	r7, sp, #0
240126ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240126bc:	2300      	movs	r3, #0
240126be:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
240126c0:	687b      	ldr	r3, [r7, #4]
240126c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240126c6:	b2db      	uxtb	r3, r3
240126c8:	f003 0302 	and.w	r3, r3, #2
240126cc:	2b00      	cmp	r3, #0
240126ce:	d052      	beq.n	24012776 <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240126d0:	687b      	ldr	r3, [r7, #4]
240126d2:	2200      	movs	r2, #0
240126d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
240126d8:	687b      	ldr	r3, [r7, #4]
240126da:	2208      	movs	r2, #8
240126dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
240126e0:	687b      	ldr	r3, [r7, #4]
240126e2:	681b      	ldr	r3, [r3, #0]
240126e4:	681a      	ldr	r2, [r3, #0]
240126e6:	687b      	ldr	r3, [r7, #4]
240126e8:	681b      	ldr	r3, [r3, #0]
240126ea:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
240126ee:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240126f0:	687b      	ldr	r3, [r7, #4]
240126f2:	681b      	ldr	r3, [r3, #0]
240126f4:	681b      	ldr	r3, [r3, #0]
240126f6:	f003 0304 	and.w	r3, r3, #4
240126fa:	2b00      	cmp	r3, #0
240126fc:	d01b      	beq.n	24012736 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240126fe:	687b      	ldr	r3, [r7, #4]
24012700:	681b      	ldr	r3, [r3, #0]
24012702:	681a      	ldr	r2, [r3, #0]
24012704:	687b      	ldr	r3, [r7, #4]
24012706:	681b      	ldr	r3, [r3, #0]
24012708:	f022 0204 	bic.w	r2, r2, #4
2401270c:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
2401270e:	687b      	ldr	r3, [r7, #4]
24012710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012712:	4a1b      	ldr	r2, [pc, #108]	; (24012780 <HAL_QSPI_Abort_IT+0xcc>)
24012714:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24012716:	687b      	ldr	r3, [r7, #4]
24012718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401271a:	4618      	mov	r0, r3
2401271c:	f7fd fbeb 	bl	2400fef6 <HAL_MDMA_Abort_IT>
24012720:	4603      	mov	r3, r0
24012722:	2b00      	cmp	r3, #0
24012724:	d027      	beq.n	24012776 <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24012726:	687b      	ldr	r3, [r7, #4]
24012728:	2201      	movs	r2, #1
2401272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
2401272e:	6878      	ldr	r0, [r7, #4]
24012730:	f7ff fee7 	bl	24012502 <HAL_QSPI_AbortCpltCallback>
24012734:	e01f      	b.n	24012776 <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
24012736:	687b      	ldr	r3, [r7, #4]
24012738:	681b      	ldr	r3, [r3, #0]
2401273a:	689b      	ldr	r3, [r3, #8]
2401273c:	f003 0320 	and.w	r3, r3, #32
24012740:	2b00      	cmp	r3, #0
24012742:	d014      	beq.n	2401276e <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012744:	687b      	ldr	r3, [r7, #4]
24012746:	681b      	ldr	r3, [r3, #0]
24012748:	2202      	movs	r2, #2
2401274a:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401274c:	687b      	ldr	r3, [r7, #4]
2401274e:	681b      	ldr	r3, [r3, #0]
24012750:	681a      	ldr	r2, [r3, #0]
24012752:	687b      	ldr	r3, [r7, #4]
24012754:	681b      	ldr	r3, [r3, #0]
24012756:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401275a:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2401275c:	687b      	ldr	r3, [r7, #4]
2401275e:	681b      	ldr	r3, [r3, #0]
24012760:	681a      	ldr	r2, [r3, #0]
24012762:	687b      	ldr	r3, [r7, #4]
24012764:	681b      	ldr	r3, [r3, #0]
24012766:	f042 0202 	orr.w	r2, r2, #2
2401276a:	601a      	str	r2, [r3, #0]
2401276c:	e003      	b.n	24012776 <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2401276e:	687b      	ldr	r3, [r7, #4]
24012770:	2201      	movs	r2, #1
24012772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
24012776:	7bfb      	ldrb	r3, [r7, #15]
}
24012778:	4618      	mov	r0, r3
2401277a:	3710      	adds	r7, #16
2401277c:	46bd      	mov	sp, r7
2401277e:	bd80      	pop	{r7, pc}
24012780:	2401293d 	.word	0x2401293d

24012784 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
24012784:	b480      	push	{r7}
24012786:	b083      	sub	sp, #12
24012788:	af00      	add	r7, sp, #0
2401278a:	6078      	str	r0, [r7, #4]
2401278c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
2401278e:	687b      	ldr	r3, [r7, #4]
24012790:	683a      	ldr	r2, [r7, #0]
24012792:	649a      	str	r2, [r3, #72]	; 0x48
}
24012794:	bf00      	nop
24012796:	370c      	adds	r7, #12
24012798:	46bd      	mov	sp, r7
2401279a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401279e:	4770      	bx	lr

240127a0 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
240127a0:	b480      	push	{r7}
240127a2:	b085      	sub	sp, #20
240127a4:	af00      	add	r7, sp, #0
240127a6:	6078      	str	r0, [r7, #4]
240127a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240127aa:	2300      	movs	r3, #0
240127ac:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
240127ae:	687b      	ldr	r3, [r7, #4]
240127b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240127b4:	b2db      	uxtb	r3, r3
240127b6:	2b01      	cmp	r3, #1
240127b8:	d101      	bne.n	240127be <HAL_QSPI_SetFifoThreshold+0x1e>
240127ba:	2302      	movs	r3, #2
240127bc:	e021      	b.n	24012802 <HAL_QSPI_SetFifoThreshold+0x62>
240127be:	687b      	ldr	r3, [r7, #4]
240127c0:	2201      	movs	r2, #1
240127c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240127c6:	687b      	ldr	r3, [r7, #4]
240127c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240127cc:	b2db      	uxtb	r3, r3
240127ce:	2b01      	cmp	r3, #1
240127d0:	d110      	bne.n	240127f4 <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
240127d2:	687b      	ldr	r3, [r7, #4]
240127d4:	683a      	ldr	r2, [r7, #0]
240127d6:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
240127d8:	687b      	ldr	r3, [r7, #4]
240127da:	681b      	ldr	r3, [r3, #0]
240127dc:	681b      	ldr	r3, [r3, #0]
240127de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
240127e2:	687b      	ldr	r3, [r7, #4]
240127e4:	689b      	ldr	r3, [r3, #8]
240127e6:	3b01      	subs	r3, #1
240127e8:	021a      	lsls	r2, r3, #8
240127ea:	687b      	ldr	r3, [r7, #4]
240127ec:	681b      	ldr	r3, [r3, #0]
240127ee:	430a      	orrs	r2, r1
240127f0:	601a      	str	r2, [r3, #0]
240127f2:	e001      	b.n	240127f8 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
240127f4:	2302      	movs	r3, #2
240127f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240127f8:	687b      	ldr	r3, [r7, #4]
240127fa:	2200      	movs	r2, #0
240127fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24012800:	7bfb      	ldrb	r3, [r7, #15]
}
24012802:	4618      	mov	r0, r3
24012804:	3714      	adds	r7, #20
24012806:	46bd      	mov	sp, r7
24012808:	f85d 7b04 	ldr.w	r7, [sp], #4
2401280c:	4770      	bx	lr

2401280e <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
2401280e:	b480      	push	{r7}
24012810:	b083      	sub	sp, #12
24012812:	af00      	add	r7, sp, #0
24012814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
24012816:	687b      	ldr	r3, [r7, #4]
24012818:	681b      	ldr	r3, [r3, #0]
2401281a:	681b      	ldr	r3, [r3, #0]
2401281c:	0a1b      	lsrs	r3, r3, #8
2401281e:	f003 030f 	and.w	r3, r3, #15
24012822:	3301      	adds	r3, #1
}
24012824:	4618      	mov	r0, r3
24012826:	370c      	adds	r7, #12
24012828:	46bd      	mov	sp, r7
2401282a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401282e:	4770      	bx	lr

24012830 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
24012830:	b480      	push	{r7}
24012832:	b085      	sub	sp, #20
24012834:	af00      	add	r7, sp, #0
24012836:	6078      	str	r0, [r7, #4]
24012838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401283a:	2300      	movs	r3, #0
2401283c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
2401283e:	687b      	ldr	r3, [r7, #4]
24012840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012844:	b2db      	uxtb	r3, r3
24012846:	2b01      	cmp	r3, #1
24012848:	d101      	bne.n	2401284e <HAL_QSPI_SetFlashID+0x1e>
2401284a:	2302      	movs	r3, #2
2401284c:	e01e      	b.n	2401288c <HAL_QSPI_SetFlashID+0x5c>
2401284e:	687b      	ldr	r3, [r7, #4]
24012850:	2201      	movs	r2, #1
24012852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012856:	687b      	ldr	r3, [r7, #4]
24012858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401285c:	b2db      	uxtb	r3, r3
2401285e:	2b01      	cmp	r3, #1
24012860:	d10d      	bne.n	2401287e <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
24012862:	687b      	ldr	r3, [r7, #4]
24012864:	683a      	ldr	r2, [r7, #0]
24012866:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
24012868:	687b      	ldr	r3, [r7, #4]
2401286a:	681b      	ldr	r3, [r3, #0]
2401286c:	681b      	ldr	r3, [r3, #0]
2401286e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
24012872:	687b      	ldr	r3, [r7, #4]
24012874:	681b      	ldr	r3, [r3, #0]
24012876:	683a      	ldr	r2, [r7, #0]
24012878:	430a      	orrs	r2, r1
2401287a:	601a      	str	r2, [r3, #0]
2401287c:	e001      	b.n	24012882 <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
2401287e:	2302      	movs	r3, #2
24012880:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24012882:	687b      	ldr	r3, [r7, #4]
24012884:	2200      	movs	r2, #0
24012886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2401288a:	7bfb      	ldrb	r3, [r7, #15]
}
2401288c:	4618      	mov	r0, r3
2401288e:	3714      	adds	r7, #20
24012890:	46bd      	mov	sp, r7
24012892:	f85d 7b04 	ldr.w	r7, [sp], #4
24012896:	4770      	bx	lr

24012898 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
24012898:	b480      	push	{r7}
2401289a:	b085      	sub	sp, #20
2401289c:	af00      	add	r7, sp, #0
2401289e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
240128a0:	687b      	ldr	r3, [r7, #4]
240128a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240128a4:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
240128a6:	68fb      	ldr	r3, [r7, #12]
240128a8:	2200      	movs	r2, #0
240128aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240128ac:	68fb      	ldr	r3, [r7, #12]
240128ae:	681b      	ldr	r3, [r3, #0]
240128b0:	681a      	ldr	r2, [r3, #0]
240128b2:	68fb      	ldr	r3, [r7, #12]
240128b4:	681b      	ldr	r3, [r3, #0]
240128b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240128ba:	601a      	str	r2, [r3, #0]
}
240128bc:	bf00      	nop
240128be:	3714      	adds	r7, #20
240128c0:	46bd      	mov	sp, r7
240128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240128c6:	4770      	bx	lr

240128c8 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
240128c8:	b480      	push	{r7}
240128ca:	b085      	sub	sp, #20
240128cc:	af00      	add	r7, sp, #0
240128ce:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
240128d0:	687b      	ldr	r3, [r7, #4]
240128d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240128d4:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
240128d6:	68fb      	ldr	r3, [r7, #12]
240128d8:	2200      	movs	r2, #0
240128da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240128dc:	68fb      	ldr	r3, [r7, #12]
240128de:	681b      	ldr	r3, [r3, #0]
240128e0:	681a      	ldr	r2, [r3, #0]
240128e2:	68fb      	ldr	r3, [r7, #12]
240128e4:	681b      	ldr	r3, [r3, #0]
240128e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240128ea:	601a      	str	r2, [r3, #0]
}
240128ec:	bf00      	nop
240128ee:	3714      	adds	r7, #20
240128f0:	46bd      	mov	sp, r7
240128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240128f6:	4770      	bx	lr

240128f8 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
240128f8:	b580      	push	{r7, lr}
240128fa:	b084      	sub	sp, #16
240128fc:	af00      	add	r7, sp, #0
240128fe:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24012900:	687b      	ldr	r3, [r7, #4]
24012902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24012904:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
24012906:	68fb      	ldr	r3, [r7, #12]
24012908:	2200      	movs	r2, #0
2401290a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
2401290c:	68fb      	ldr	r3, [r7, #12]
2401290e:	2200      	movs	r2, #0
24012910:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
24012912:	68fb      	ldr	r3, [r7, #12]
24012914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012916:	f043 0204 	orr.w	r2, r3, #4
2401291a:	68fb      	ldr	r3, [r7, #12]
2401291c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401291e:	68fb      	ldr	r3, [r7, #12]
24012920:	681b      	ldr	r3, [r3, #0]
24012922:	681a      	ldr	r2, [r3, #0]
24012924:	68fb      	ldr	r3, [r7, #12]
24012926:	681b      	ldr	r3, [r3, #0]
24012928:	f022 0204 	bic.w	r2, r2, #4
2401292c:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
2401292e:	68f8      	ldr	r0, [r7, #12]
24012930:	f7ff fec0 	bl	240126b4 <HAL_QSPI_Abort_IT>

}
24012934:	bf00      	nop
24012936:	3710      	adds	r7, #16
24012938:	46bd      	mov	sp, r7
2401293a:	bd80      	pop	{r7, pc}

2401293c <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2401293c:	b580      	push	{r7, lr}
2401293e:	b084      	sub	sp, #16
24012940:	af00      	add	r7, sp, #0
24012942:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24012944:	687b      	ldr	r3, [r7, #4]
24012946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24012948:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2401294a:	68fb      	ldr	r3, [r7, #12]
2401294c:	2200      	movs	r2, #0
2401294e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24012950:	68fb      	ldr	r3, [r7, #12]
24012952:	2200      	movs	r2, #0
24012954:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
24012956:	68fb      	ldr	r3, [r7, #12]
24012958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401295c:	b2db      	uxtb	r3, r3
2401295e:	2b08      	cmp	r3, #8
24012960:	d114      	bne.n	2401298c <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012962:	68fb      	ldr	r3, [r7, #12]
24012964:	681b      	ldr	r3, [r3, #0]
24012966:	2202      	movs	r2, #2
24012968:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401296a:	68fb      	ldr	r3, [r7, #12]
2401296c:	681b      	ldr	r3, [r3, #0]
2401296e:	681a      	ldr	r2, [r3, #0]
24012970:	68fb      	ldr	r3, [r7, #12]
24012972:	681b      	ldr	r3, [r3, #0]
24012974:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24012978:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2401297a:	68fb      	ldr	r3, [r7, #12]
2401297c:	681b      	ldr	r3, [r3, #0]
2401297e:	681a      	ldr	r2, [r3, #0]
24012980:	68fb      	ldr	r3, [r7, #12]
24012982:	681b      	ldr	r3, [r3, #0]
24012984:	f042 0202 	orr.w	r2, r2, #2
24012988:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
2401298a:	e006      	b.n	2401299a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
2401298c:	68fb      	ldr	r3, [r7, #12]
2401298e:	2201      	movs	r2, #1
24012990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
24012994:	68f8      	ldr	r0, [r7, #12]
24012996:	f7ff fdaa 	bl	240124ee <HAL_QSPI_ErrorCallback>
}
2401299a:	bf00      	nop
2401299c:	3710      	adds	r7, #16
2401299e:	46bd      	mov	sp, r7
240129a0:	bd80      	pop	{r7, pc}

240129a2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
240129a2:	b580      	push	{r7, lr}
240129a4:	b084      	sub	sp, #16
240129a6:	af00      	add	r7, sp, #0
240129a8:	60f8      	str	r0, [r7, #12]
240129aa:	60b9      	str	r1, [r7, #8]
240129ac:	603b      	str	r3, [r7, #0]
240129ae:	4613      	mov	r3, r2
240129b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240129b2:	e01a      	b.n	240129ea <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
240129b4:	69bb      	ldr	r3, [r7, #24]
240129b6:	f1b3 3fff 	cmp.w	r3, #4294967295
240129ba:	d016      	beq.n	240129ea <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240129bc:	f7ef fbc6 	bl	2400214c <HAL_GetTick>
240129c0:	4602      	mov	r2, r0
240129c2:	683b      	ldr	r3, [r7, #0]
240129c4:	1ad3      	subs	r3, r2, r3
240129c6:	69ba      	ldr	r2, [r7, #24]
240129c8:	429a      	cmp	r2, r3
240129ca:	d302      	bcc.n	240129d2 <QSPI_WaitFlagStateUntilTimeout+0x30>
240129cc:	69bb      	ldr	r3, [r7, #24]
240129ce:	2b00      	cmp	r3, #0
240129d0:	d10b      	bne.n	240129ea <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
240129d2:	68fb      	ldr	r3, [r7, #12]
240129d4:	2204      	movs	r2, #4
240129d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
240129da:	68fb      	ldr	r3, [r7, #12]
240129dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240129de:	f043 0201 	orr.w	r2, r3, #1
240129e2:	68fb      	ldr	r3, [r7, #12]
240129e4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
240129e6:	2301      	movs	r3, #1
240129e8:	e00e      	b.n	24012a08 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
240129ea:	68fb      	ldr	r3, [r7, #12]
240129ec:	681b      	ldr	r3, [r3, #0]
240129ee:	689a      	ldr	r2, [r3, #8]
240129f0:	68bb      	ldr	r3, [r7, #8]
240129f2:	4013      	ands	r3, r2
240129f4:	2b00      	cmp	r3, #0
240129f6:	bf14      	ite	ne
240129f8:	2301      	movne	r3, #1
240129fa:	2300      	moveq	r3, #0
240129fc:	b2db      	uxtb	r3, r3
240129fe:	461a      	mov	r2, r3
24012a00:	79fb      	ldrb	r3, [r7, #7]
24012a02:	429a      	cmp	r2, r3
24012a04:	d1d6      	bne.n	240129b4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24012a06:	2300      	movs	r3, #0
}
24012a08:	4618      	mov	r0, r3
24012a0a:	3710      	adds	r7, #16
24012a0c:	46bd      	mov	sp, r7
24012a0e:	bd80      	pop	{r7, pc}

24012a10 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24012a10:	b480      	push	{r7}
24012a12:	b085      	sub	sp, #20
24012a14:	af00      	add	r7, sp, #0
24012a16:	60f8      	str	r0, [r7, #12]
24012a18:	60b9      	str	r1, [r7, #8]
24012a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24012a1c:	68bb      	ldr	r3, [r7, #8]
24012a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012a20:	2b00      	cmp	r3, #0
24012a22:	d009      	beq.n	24012a38 <QSPI_Config+0x28>
24012a24:	687b      	ldr	r3, [r7, #4]
24012a26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012a2a:	d005      	beq.n	24012a38 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24012a2c:	68bb      	ldr	r3, [r7, #8]
24012a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24012a30:	68fb      	ldr	r3, [r7, #12]
24012a32:	681b      	ldr	r3, [r3, #0]
24012a34:	3a01      	subs	r2, #1
24012a36:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24012a38:	68bb      	ldr	r3, [r7, #8]
24012a3a:	699b      	ldr	r3, [r3, #24]
24012a3c:	2b00      	cmp	r3, #0
24012a3e:	f000 80b9 	beq.w	24012bb4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24012a42:	68bb      	ldr	r3, [r7, #8]
24012a44:	6a1b      	ldr	r3, [r3, #32]
24012a46:	2b00      	cmp	r3, #0
24012a48:	d05f      	beq.n	24012b0a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24012a4a:	68fb      	ldr	r3, [r7, #12]
24012a4c:	681b      	ldr	r3, [r3, #0]
24012a4e:	68ba      	ldr	r2, [r7, #8]
24012a50:	6892      	ldr	r2, [r2, #8]
24012a52:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012a54:	68bb      	ldr	r3, [r7, #8]
24012a56:	69db      	ldr	r3, [r3, #28]
24012a58:	2b00      	cmp	r3, #0
24012a5a:	d031      	beq.n	24012ac0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012a5c:	68bb      	ldr	r3, [r7, #8]
24012a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012a60:	68bb      	ldr	r3, [r7, #8]
24012a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012a64:	431a      	orrs	r2, r3
24012a66:	68bb      	ldr	r3, [r7, #8]
24012a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012a6a:	431a      	orrs	r2, r3
24012a6c:	68bb      	ldr	r3, [r7, #8]
24012a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012a70:	431a      	orrs	r2, r3
24012a72:	68bb      	ldr	r3, [r7, #8]
24012a74:	695b      	ldr	r3, [r3, #20]
24012a76:	049b      	lsls	r3, r3, #18
24012a78:	431a      	orrs	r2, r3
24012a7a:	68bb      	ldr	r3, [r7, #8]
24012a7c:	691b      	ldr	r3, [r3, #16]
24012a7e:	431a      	orrs	r2, r3
24012a80:	68bb      	ldr	r3, [r7, #8]
24012a82:	6a1b      	ldr	r3, [r3, #32]
24012a84:	431a      	orrs	r2, r3
24012a86:	68bb      	ldr	r3, [r7, #8]
24012a88:	68db      	ldr	r3, [r3, #12]
24012a8a:	431a      	orrs	r2, r3
24012a8c:	68bb      	ldr	r3, [r7, #8]
24012a8e:	69db      	ldr	r3, [r3, #28]
24012a90:	431a      	orrs	r2, r3
24012a92:	68bb      	ldr	r3, [r7, #8]
24012a94:	699b      	ldr	r3, [r3, #24]
24012a96:	431a      	orrs	r2, r3
24012a98:	68bb      	ldr	r3, [r7, #8]
24012a9a:	681b      	ldr	r3, [r3, #0]
24012a9c:	ea42 0103 	orr.w	r1, r2, r3
24012aa0:	68fb      	ldr	r3, [r7, #12]
24012aa2:	681b      	ldr	r3, [r3, #0]
24012aa4:	687a      	ldr	r2, [r7, #4]
24012aa6:	430a      	orrs	r2, r1
24012aa8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012aaa:	687b      	ldr	r3, [r7, #4]
24012aac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012ab0:	f000 812e 	beq.w	24012d10 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012ab4:	68fb      	ldr	r3, [r7, #12]
24012ab6:	681b      	ldr	r3, [r3, #0]
24012ab8:	68ba      	ldr	r2, [r7, #8]
24012aba:	6852      	ldr	r2, [r2, #4]
24012abc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
24012abe:	e127      	b.n	24012d10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012ac0:	68bb      	ldr	r3, [r7, #8]
24012ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012ac4:	68bb      	ldr	r3, [r7, #8]
24012ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012ac8:	431a      	orrs	r2, r3
24012aca:	68bb      	ldr	r3, [r7, #8]
24012acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012ace:	431a      	orrs	r2, r3
24012ad0:	68bb      	ldr	r3, [r7, #8]
24012ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012ad4:	431a      	orrs	r2, r3
24012ad6:	68bb      	ldr	r3, [r7, #8]
24012ad8:	695b      	ldr	r3, [r3, #20]
24012ada:	049b      	lsls	r3, r3, #18
24012adc:	431a      	orrs	r2, r3
24012ade:	68bb      	ldr	r3, [r7, #8]
24012ae0:	691b      	ldr	r3, [r3, #16]
24012ae2:	431a      	orrs	r2, r3
24012ae4:	68bb      	ldr	r3, [r7, #8]
24012ae6:	6a1b      	ldr	r3, [r3, #32]
24012ae8:	431a      	orrs	r2, r3
24012aea:	68bb      	ldr	r3, [r7, #8]
24012aec:	69db      	ldr	r3, [r3, #28]
24012aee:	431a      	orrs	r2, r3
24012af0:	68bb      	ldr	r3, [r7, #8]
24012af2:	699b      	ldr	r3, [r3, #24]
24012af4:	431a      	orrs	r2, r3
24012af6:	68bb      	ldr	r3, [r7, #8]
24012af8:	681b      	ldr	r3, [r3, #0]
24012afa:	ea42 0103 	orr.w	r1, r2, r3
24012afe:	68fb      	ldr	r3, [r7, #12]
24012b00:	681b      	ldr	r3, [r3, #0]
24012b02:	687a      	ldr	r2, [r7, #4]
24012b04:	430a      	orrs	r2, r1
24012b06:	615a      	str	r2, [r3, #20]
}
24012b08:	e102      	b.n	24012d10 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012b0a:	68bb      	ldr	r3, [r7, #8]
24012b0c:	69db      	ldr	r3, [r3, #28]
24012b0e:	2b00      	cmp	r3, #0
24012b10:	d02e      	beq.n	24012b70 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012b12:	68bb      	ldr	r3, [r7, #8]
24012b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012b16:	68bb      	ldr	r3, [r7, #8]
24012b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012b1a:	431a      	orrs	r2, r3
24012b1c:	68bb      	ldr	r3, [r7, #8]
24012b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012b20:	431a      	orrs	r2, r3
24012b22:	68bb      	ldr	r3, [r7, #8]
24012b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b26:	431a      	orrs	r2, r3
24012b28:	68bb      	ldr	r3, [r7, #8]
24012b2a:	695b      	ldr	r3, [r3, #20]
24012b2c:	049b      	lsls	r3, r3, #18
24012b2e:	431a      	orrs	r2, r3
24012b30:	68bb      	ldr	r3, [r7, #8]
24012b32:	6a1b      	ldr	r3, [r3, #32]
24012b34:	431a      	orrs	r2, r3
24012b36:	68bb      	ldr	r3, [r7, #8]
24012b38:	68db      	ldr	r3, [r3, #12]
24012b3a:	431a      	orrs	r2, r3
24012b3c:	68bb      	ldr	r3, [r7, #8]
24012b3e:	69db      	ldr	r3, [r3, #28]
24012b40:	431a      	orrs	r2, r3
24012b42:	68bb      	ldr	r3, [r7, #8]
24012b44:	699b      	ldr	r3, [r3, #24]
24012b46:	431a      	orrs	r2, r3
24012b48:	68bb      	ldr	r3, [r7, #8]
24012b4a:	681b      	ldr	r3, [r3, #0]
24012b4c:	ea42 0103 	orr.w	r1, r2, r3
24012b50:	68fb      	ldr	r3, [r7, #12]
24012b52:	681b      	ldr	r3, [r3, #0]
24012b54:	687a      	ldr	r2, [r7, #4]
24012b56:	430a      	orrs	r2, r1
24012b58:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012b5a:	687b      	ldr	r3, [r7, #4]
24012b5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012b60:	f000 80d6 	beq.w	24012d10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012b64:	68fb      	ldr	r3, [r7, #12]
24012b66:	681b      	ldr	r3, [r3, #0]
24012b68:	68ba      	ldr	r2, [r7, #8]
24012b6a:	6852      	ldr	r2, [r2, #4]
24012b6c:	619a      	str	r2, [r3, #24]
}
24012b6e:	e0cf      	b.n	24012d10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012b70:	68bb      	ldr	r3, [r7, #8]
24012b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012b74:	68bb      	ldr	r3, [r7, #8]
24012b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012b78:	431a      	orrs	r2, r3
24012b7a:	68bb      	ldr	r3, [r7, #8]
24012b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012b7e:	431a      	orrs	r2, r3
24012b80:	68bb      	ldr	r3, [r7, #8]
24012b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b84:	431a      	orrs	r2, r3
24012b86:	68bb      	ldr	r3, [r7, #8]
24012b88:	695b      	ldr	r3, [r3, #20]
24012b8a:	049b      	lsls	r3, r3, #18
24012b8c:	431a      	orrs	r2, r3
24012b8e:	68bb      	ldr	r3, [r7, #8]
24012b90:	6a1b      	ldr	r3, [r3, #32]
24012b92:	431a      	orrs	r2, r3
24012b94:	68bb      	ldr	r3, [r7, #8]
24012b96:	69db      	ldr	r3, [r3, #28]
24012b98:	431a      	orrs	r2, r3
24012b9a:	68bb      	ldr	r3, [r7, #8]
24012b9c:	699b      	ldr	r3, [r3, #24]
24012b9e:	431a      	orrs	r2, r3
24012ba0:	68bb      	ldr	r3, [r7, #8]
24012ba2:	681b      	ldr	r3, [r3, #0]
24012ba4:	ea42 0103 	orr.w	r1, r2, r3
24012ba8:	68fb      	ldr	r3, [r7, #12]
24012baa:	681b      	ldr	r3, [r3, #0]
24012bac:	687a      	ldr	r2, [r7, #4]
24012bae:	430a      	orrs	r2, r1
24012bb0:	615a      	str	r2, [r3, #20]
}
24012bb2:	e0ad      	b.n	24012d10 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24012bb4:	68bb      	ldr	r3, [r7, #8]
24012bb6:	6a1b      	ldr	r3, [r3, #32]
24012bb8:	2b00      	cmp	r3, #0
24012bba:	d058      	beq.n	24012c6e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24012bbc:	68fb      	ldr	r3, [r7, #12]
24012bbe:	681b      	ldr	r3, [r3, #0]
24012bc0:	68ba      	ldr	r2, [r7, #8]
24012bc2:	6892      	ldr	r2, [r2, #8]
24012bc4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012bc6:	68bb      	ldr	r3, [r7, #8]
24012bc8:	69db      	ldr	r3, [r3, #28]
24012bca:	2b00      	cmp	r3, #0
24012bcc:	d02d      	beq.n	24012c2a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012bce:	68bb      	ldr	r3, [r7, #8]
24012bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012bd2:	68bb      	ldr	r3, [r7, #8]
24012bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012bd6:	431a      	orrs	r2, r3
24012bd8:	68bb      	ldr	r3, [r7, #8]
24012bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012bdc:	431a      	orrs	r2, r3
24012bde:	68bb      	ldr	r3, [r7, #8]
24012be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012be2:	431a      	orrs	r2, r3
24012be4:	68bb      	ldr	r3, [r7, #8]
24012be6:	695b      	ldr	r3, [r3, #20]
24012be8:	049b      	lsls	r3, r3, #18
24012bea:	431a      	orrs	r2, r3
24012bec:	68bb      	ldr	r3, [r7, #8]
24012bee:	691b      	ldr	r3, [r3, #16]
24012bf0:	431a      	orrs	r2, r3
24012bf2:	68bb      	ldr	r3, [r7, #8]
24012bf4:	6a1b      	ldr	r3, [r3, #32]
24012bf6:	431a      	orrs	r2, r3
24012bf8:	68bb      	ldr	r3, [r7, #8]
24012bfa:	68db      	ldr	r3, [r3, #12]
24012bfc:	431a      	orrs	r2, r3
24012bfe:	68bb      	ldr	r3, [r7, #8]
24012c00:	69db      	ldr	r3, [r3, #28]
24012c02:	431a      	orrs	r2, r3
24012c04:	68bb      	ldr	r3, [r7, #8]
24012c06:	699b      	ldr	r3, [r3, #24]
24012c08:	ea42 0103 	orr.w	r1, r2, r3
24012c0c:	68fb      	ldr	r3, [r7, #12]
24012c0e:	681b      	ldr	r3, [r3, #0]
24012c10:	687a      	ldr	r2, [r7, #4]
24012c12:	430a      	orrs	r2, r1
24012c14:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012c16:	687b      	ldr	r3, [r7, #4]
24012c18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012c1c:	d078      	beq.n	24012d10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012c1e:	68fb      	ldr	r3, [r7, #12]
24012c20:	681b      	ldr	r3, [r3, #0]
24012c22:	68ba      	ldr	r2, [r7, #8]
24012c24:	6852      	ldr	r2, [r2, #4]
24012c26:	619a      	str	r2, [r3, #24]
}
24012c28:	e072      	b.n	24012d10 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012c2a:	68bb      	ldr	r3, [r7, #8]
24012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012c2e:	68bb      	ldr	r3, [r7, #8]
24012c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012c32:	431a      	orrs	r2, r3
24012c34:	68bb      	ldr	r3, [r7, #8]
24012c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012c38:	431a      	orrs	r2, r3
24012c3a:	68bb      	ldr	r3, [r7, #8]
24012c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012c3e:	431a      	orrs	r2, r3
24012c40:	68bb      	ldr	r3, [r7, #8]
24012c42:	695b      	ldr	r3, [r3, #20]
24012c44:	049b      	lsls	r3, r3, #18
24012c46:	431a      	orrs	r2, r3
24012c48:	68bb      	ldr	r3, [r7, #8]
24012c4a:	691b      	ldr	r3, [r3, #16]
24012c4c:	431a      	orrs	r2, r3
24012c4e:	68bb      	ldr	r3, [r7, #8]
24012c50:	6a1b      	ldr	r3, [r3, #32]
24012c52:	431a      	orrs	r2, r3
24012c54:	68bb      	ldr	r3, [r7, #8]
24012c56:	69db      	ldr	r3, [r3, #28]
24012c58:	431a      	orrs	r2, r3
24012c5a:	68bb      	ldr	r3, [r7, #8]
24012c5c:	699b      	ldr	r3, [r3, #24]
24012c5e:	ea42 0103 	orr.w	r1, r2, r3
24012c62:	68fb      	ldr	r3, [r7, #12]
24012c64:	681b      	ldr	r3, [r3, #0]
24012c66:	687a      	ldr	r2, [r7, #4]
24012c68:	430a      	orrs	r2, r1
24012c6a:	615a      	str	r2, [r3, #20]
}
24012c6c:	e050      	b.n	24012d10 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012c6e:	68bb      	ldr	r3, [r7, #8]
24012c70:	69db      	ldr	r3, [r3, #28]
24012c72:	2b00      	cmp	r3, #0
24012c74:	d02a      	beq.n	24012ccc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012c76:	68bb      	ldr	r3, [r7, #8]
24012c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012c7a:	68bb      	ldr	r3, [r7, #8]
24012c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012c7e:	431a      	orrs	r2, r3
24012c80:	68bb      	ldr	r3, [r7, #8]
24012c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012c84:	431a      	orrs	r2, r3
24012c86:	68bb      	ldr	r3, [r7, #8]
24012c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012c8a:	431a      	orrs	r2, r3
24012c8c:	68bb      	ldr	r3, [r7, #8]
24012c8e:	695b      	ldr	r3, [r3, #20]
24012c90:	049b      	lsls	r3, r3, #18
24012c92:	431a      	orrs	r2, r3
24012c94:	68bb      	ldr	r3, [r7, #8]
24012c96:	6a1b      	ldr	r3, [r3, #32]
24012c98:	431a      	orrs	r2, r3
24012c9a:	68bb      	ldr	r3, [r7, #8]
24012c9c:	68db      	ldr	r3, [r3, #12]
24012c9e:	431a      	orrs	r2, r3
24012ca0:	68bb      	ldr	r3, [r7, #8]
24012ca2:	69db      	ldr	r3, [r3, #28]
24012ca4:	431a      	orrs	r2, r3
24012ca6:	68bb      	ldr	r3, [r7, #8]
24012ca8:	699b      	ldr	r3, [r3, #24]
24012caa:	ea42 0103 	orr.w	r1, r2, r3
24012cae:	68fb      	ldr	r3, [r7, #12]
24012cb0:	681b      	ldr	r3, [r3, #0]
24012cb2:	687a      	ldr	r2, [r7, #4]
24012cb4:	430a      	orrs	r2, r1
24012cb6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012cb8:	687b      	ldr	r3, [r7, #4]
24012cba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012cbe:	d027      	beq.n	24012d10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012cc0:	68fb      	ldr	r3, [r7, #12]
24012cc2:	681b      	ldr	r3, [r3, #0]
24012cc4:	68ba      	ldr	r2, [r7, #8]
24012cc6:	6852      	ldr	r2, [r2, #4]
24012cc8:	619a      	str	r2, [r3, #24]
}
24012cca:	e021      	b.n	24012d10 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
24012ccc:	68bb      	ldr	r3, [r7, #8]
24012cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012cd0:	2b00      	cmp	r3, #0
24012cd2:	d01d      	beq.n	24012d10 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012cd4:	68bb      	ldr	r3, [r7, #8]
24012cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012cd8:	68bb      	ldr	r3, [r7, #8]
24012cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012cdc:	431a      	orrs	r2, r3
24012cde:	68bb      	ldr	r3, [r7, #8]
24012ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012ce2:	431a      	orrs	r2, r3
24012ce4:	68bb      	ldr	r3, [r7, #8]
24012ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012ce8:	431a      	orrs	r2, r3
24012cea:	68bb      	ldr	r3, [r7, #8]
24012cec:	695b      	ldr	r3, [r3, #20]
24012cee:	049b      	lsls	r3, r3, #18
24012cf0:	431a      	orrs	r2, r3
24012cf2:	68bb      	ldr	r3, [r7, #8]
24012cf4:	6a1b      	ldr	r3, [r3, #32]
24012cf6:	431a      	orrs	r2, r3
24012cf8:	68bb      	ldr	r3, [r7, #8]
24012cfa:	69db      	ldr	r3, [r3, #28]
24012cfc:	431a      	orrs	r2, r3
24012cfe:	68bb      	ldr	r3, [r7, #8]
24012d00:	699b      	ldr	r3, [r3, #24]
24012d02:	ea42 0103 	orr.w	r1, r2, r3
24012d06:	68fb      	ldr	r3, [r7, #12]
24012d08:	681b      	ldr	r3, [r3, #0]
24012d0a:	687a      	ldr	r2, [r7, #4]
24012d0c:	430a      	orrs	r2, r1
24012d0e:	615a      	str	r2, [r3, #20]
}
24012d10:	bf00      	nop
24012d12:	3714      	adds	r7, #20
24012d14:	46bd      	mov	sp, r7
24012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d1a:	4770      	bx	lr

24012d1c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
24012d1c:	b580      	push	{r7, lr}
24012d1e:	b082      	sub	sp, #8
24012d20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
24012d22:	4b89      	ldr	r3, [pc, #548]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012d24:	681b      	ldr	r3, [r3, #0]
24012d26:	f003 030f 	and.w	r3, r3, #15
24012d2a:	2b06      	cmp	r3, #6
24012d2c:	d80f      	bhi.n	24012d4e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24012d2e:	4b86      	ldr	r3, [pc, #536]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012d30:	681b      	ldr	r3, [r3, #0]
24012d32:	f023 030f 	bic.w	r3, r3, #15
24012d36:	4a84      	ldr	r2, [pc, #528]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012d38:	f043 0307 	orr.w	r3, r3, #7
24012d3c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24012d3e:	4b82      	ldr	r3, [pc, #520]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012d40:	681b      	ldr	r3, [r3, #0]
24012d42:	f003 030f 	and.w	r3, r3, #15
24012d46:	2b07      	cmp	r3, #7
24012d48:	d001      	beq.n	24012d4e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
24012d4a:	2301      	movs	r3, #1
24012d4c:	e0f7      	b.n	24012f3e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012d4e:	f7ef f9fd 	bl	2400214c <HAL_GetTick>
24012d52:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
24012d54:	4b7d      	ldr	r3, [pc, #500]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d56:	681b      	ldr	r3, [r3, #0]
24012d58:	4a7c      	ldr	r2, [pc, #496]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d5a:	f043 0301 	orr.w	r3, r3, #1
24012d5e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24012d60:	e008      	b.n	24012d74 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24012d62:	f7ef f9f3 	bl	2400214c <HAL_GetTick>
24012d66:	4602      	mov	r2, r0
24012d68:	687b      	ldr	r3, [r7, #4]
24012d6a:	1ad3      	subs	r3, r2, r3
24012d6c:	2b02      	cmp	r3, #2
24012d6e:	d901      	bls.n	24012d74 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
24012d70:	2303      	movs	r3, #3
24012d72:	e0e4      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24012d74:	4b75      	ldr	r3, [pc, #468]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d76:	681b      	ldr	r3, [r3, #0]
24012d78:	f003 0304 	and.w	r3, r3, #4
24012d7c:	2b00      	cmp	r3, #0
24012d7e:	d0f0      	beq.n	24012d62 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
24012d80:	4b72      	ldr	r3, [pc, #456]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d82:	685b      	ldr	r3, [r3, #4]
24012d84:	4a71      	ldr	r2, [pc, #452]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24012d8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
24012d8c:	4b6f      	ldr	r3, [pc, #444]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012d8e:	2200      	movs	r2, #0
24012d90:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
24012d92:	4b6f      	ldr	r3, [pc, #444]	; (24012f50 <HAL_RCC_DeInit+0x234>)
24012d94:	4a6f      	ldr	r2, [pc, #444]	; (24012f54 <HAL_RCC_DeInit+0x238>)
24012d96:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
24012d98:	4b6f      	ldr	r3, [pc, #444]	; (24012f58 <HAL_RCC_DeInit+0x23c>)
24012d9a:	4a6e      	ldr	r2, [pc, #440]	; (24012f54 <HAL_RCC_DeInit+0x238>)
24012d9c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
24012d9e:	4b6f      	ldr	r3, [pc, #444]	; (24012f5c <HAL_RCC_DeInit+0x240>)
24012da0:	681b      	ldr	r3, [r3, #0]
24012da2:	4618      	mov	r0, r3
24012da4:	f7ef f988 	bl	240020b8 <HAL_InitTick>
24012da8:	4603      	mov	r3, r0
24012daa:	2b00      	cmp	r3, #0
24012dac:	d001      	beq.n	24012db2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
24012dae:	2301      	movs	r3, #1
24012db0:	e0c5      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012db2:	f7ef f9cb 	bl	2400214c <HAL_GetTick>
24012db6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24012db8:	e00a      	b.n	24012dd0 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24012dba:	f7ef f9c7 	bl	2400214c <HAL_GetTick>
24012dbe:	4602      	mov	r2, r0
24012dc0:	687b      	ldr	r3, [r7, #4]
24012dc2:	1ad3      	subs	r3, r2, r3
24012dc4:	f241 3288 	movw	r2, #5000	; 0x1388
24012dc8:	4293      	cmp	r3, r2
24012dca:	d901      	bls.n	24012dd0 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
24012dcc:	2303      	movs	r3, #3
24012dce:	e0b6      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24012dd0:	4b5e      	ldr	r3, [pc, #376]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012dd2:	691b      	ldr	r3, [r3, #16]
24012dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
24012dd8:	2b00      	cmp	r3, #0
24012dda:	d1ee      	bne.n	24012dba <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012ddc:	f7ef f9b6 	bl	2400214c <HAL_GetTick>
24012de0:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
24012de2:	4b5a      	ldr	r3, [pc, #360]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012de4:	681a      	ldr	r2, [r3, #0]
24012de6:	4959      	ldr	r1, [pc, #356]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012de8:	4b5d      	ldr	r3, [pc, #372]	; (24012f60 <HAL_RCC_DeInit+0x244>)
24012dea:	4013      	ands	r3, r2
24012dec:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24012dee:	e008      	b.n	24012e02 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24012df0:	f7ef f9ac 	bl	2400214c <HAL_GetTick>
24012df4:	4602      	mov	r2, r0
24012df6:	687b      	ldr	r3, [r7, #4]
24012df8:	1ad3      	subs	r3, r2, r3
24012dfa:	2b64      	cmp	r3, #100	; 0x64
24012dfc:	d901      	bls.n	24012e02 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
24012dfe:	2303      	movs	r3, #3
24012e00:	e09d      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24012e02:	4b52      	ldr	r3, [pc, #328]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e04:	681b      	ldr	r3, [r3, #0]
24012e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24012e0a:	2b00      	cmp	r3, #0
24012e0c:	d1f0      	bne.n	24012df0 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012e0e:	f7ef f99d 	bl	2400214c <HAL_GetTick>
24012e12:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
24012e14:	4b4d      	ldr	r3, [pc, #308]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e16:	681b      	ldr	r3, [r3, #0]
24012e18:	4a4c      	ldr	r2, [pc, #304]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24012e1e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24012e20:	e008      	b.n	24012e34 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012e22:	f7ef f993 	bl	2400214c <HAL_GetTick>
24012e26:	4602      	mov	r2, r0
24012e28:	687b      	ldr	r3, [r7, #4]
24012e2a:	1ad3      	subs	r3, r2, r3
24012e2c:	2b02      	cmp	r3, #2
24012e2e:	d901      	bls.n	24012e34 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
24012e30:	2303      	movs	r3, #3
24012e32:	e084      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24012e34:	4b45      	ldr	r3, [pc, #276]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e36:	681b      	ldr	r3, [r3, #0]
24012e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24012e3c:	2b00      	cmp	r3, #0
24012e3e:	d1f0      	bne.n	24012e22 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012e40:	f7ef f984 	bl	2400214c <HAL_GetTick>
24012e44:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
24012e46:	4b41      	ldr	r3, [pc, #260]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e48:	681b      	ldr	r3, [r3, #0]
24012e4a:	4a40      	ldr	r2, [pc, #256]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24012e50:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24012e52:	e008      	b.n	24012e66 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012e54:	f7ef f97a 	bl	2400214c <HAL_GetTick>
24012e58:	4602      	mov	r2, r0
24012e5a:	687b      	ldr	r3, [r7, #4]
24012e5c:	1ad3      	subs	r3, r2, r3
24012e5e:	2b02      	cmp	r3, #2
24012e60:	d901      	bls.n	24012e66 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
24012e62:	2303      	movs	r3, #3
24012e64:	e06b      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24012e66:	4b39      	ldr	r3, [pc, #228]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e68:	681b      	ldr	r3, [r3, #0]
24012e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24012e6e:	2b00      	cmp	r3, #0
24012e70:	d1f0      	bne.n	24012e54 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012e72:	f7ef f96b 	bl	2400214c <HAL_GetTick>
24012e76:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
24012e78:	4b34      	ldr	r3, [pc, #208]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e7a:	681b      	ldr	r3, [r3, #0]
24012e7c:	4a33      	ldr	r2, [pc, #204]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24012e82:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24012e84:	e008      	b.n	24012e98 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012e86:	f7ef f961 	bl	2400214c <HAL_GetTick>
24012e8a:	4602      	mov	r2, r0
24012e8c:	687b      	ldr	r3, [r7, #4]
24012e8e:	1ad3      	subs	r3, r2, r3
24012e90:	2b02      	cmp	r3, #2
24012e92:	d901      	bls.n	24012e98 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
24012e94:	2303      	movs	r3, #3
24012e96:	e052      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24012e98:	4b2c      	ldr	r3, [pc, #176]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012e9a:	681b      	ldr	r3, [r3, #0]
24012e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24012ea0:	2b00      	cmp	r3, #0
24012ea2:	d1f0      	bne.n	24012e86 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
24012ea4:	4b29      	ldr	r3, [pc, #164]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ea6:	2200      	movs	r2, #0
24012ea8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
24012eaa:	4b28      	ldr	r3, [pc, #160]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012eac:	2200      	movs	r2, #0
24012eae:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
24012eb0:	4b26      	ldr	r3, [pc, #152]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012eb2:	2200      	movs	r2, #0
24012eb4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
24012eb6:	4b25      	ldr	r3, [pc, #148]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012eb8:	4a2a      	ldr	r2, [pc, #168]	; (24012f64 <HAL_RCC_DeInit+0x248>)
24012eba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
24012ebc:	4b23      	ldr	r3, [pc, #140]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ebe:	4a2a      	ldr	r2, [pc, #168]	; (24012f68 <HAL_RCC_DeInit+0x24c>)
24012ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
24012ec2:	4b22      	ldr	r3, [pc, #136]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ec4:	4a29      	ldr	r2, [pc, #164]	; (24012f6c <HAL_RCC_DeInit+0x250>)
24012ec6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24012ec8:	4b20      	ldr	r3, [pc, #128]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012eca:	2200      	movs	r2, #0
24012ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
24012ece:	4b1f      	ldr	r3, [pc, #124]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ed0:	4a26      	ldr	r2, [pc, #152]	; (24012f6c <HAL_RCC_DeInit+0x250>)
24012ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
24012ed4:	4b1d      	ldr	r3, [pc, #116]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ed6:	2200      	movs	r2, #0
24012ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
24012eda:	4b1c      	ldr	r3, [pc, #112]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012edc:	4a23      	ldr	r2, [pc, #140]	; (24012f6c <HAL_RCC_DeInit+0x250>)
24012ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
24012ee0:	4b1a      	ldr	r3, [pc, #104]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ee2:	2200      	movs	r2, #0
24012ee4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
24012ee6:	4b19      	ldr	r3, [pc, #100]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ee8:	681b      	ldr	r3, [r3, #0]
24012eea:	4a18      	ldr	r2, [pc, #96]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24012ef0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
24012ef2:	4b16      	ldr	r3, [pc, #88]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012ef4:	2200      	movs	r2, #0
24012ef6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
24012ef8:	4b14      	ldr	r3, [pc, #80]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012efa:	f04f 32ff 	mov.w	r2, #4294967295
24012efe:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
24012f00:	4b12      	ldr	r3, [pc, #72]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012f02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
24012f06:	4a11      	ldr	r2, [pc, #68]	; (24012f4c <HAL_RCC_DeInit+0x230>)
24012f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012f0c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
24012f10:	4b0d      	ldr	r3, [pc, #52]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012f12:	681b      	ldr	r3, [r3, #0]
24012f14:	f003 0308 	and.w	r3, r3, #8
24012f18:	2b00      	cmp	r3, #0
24012f1a:	d00f      	beq.n	24012f3c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24012f1c:	4b0a      	ldr	r3, [pc, #40]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012f1e:	681b      	ldr	r3, [r3, #0]
24012f20:	f023 030f 	bic.w	r3, r3, #15
24012f24:	4a08      	ldr	r2, [pc, #32]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012f26:	f043 0307 	orr.w	r3, r3, #7
24012f2a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24012f2c:	4b06      	ldr	r3, [pc, #24]	; (24012f48 <HAL_RCC_DeInit+0x22c>)
24012f2e:	681b      	ldr	r3, [r3, #0]
24012f30:	f003 030f 	and.w	r3, r3, #15
24012f34:	2b07      	cmp	r3, #7
24012f36:	d001      	beq.n	24012f3c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24012f38:	2301      	movs	r3, #1
24012f3a:	e000      	b.n	24012f3e <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
24012f3c:	2300      	movs	r3, #0
}
24012f3e:	4618      	mov	r0, r3
24012f40:	3708      	adds	r7, #8
24012f42:	46bd      	mov	sp, r7
24012f44:	bd80      	pop	{r7, pc}
24012f46:	bf00      	nop
24012f48:	52002000 	.word	0x52002000
24012f4c:	58024400 	.word	0x58024400
24012f50:	240004c8 	.word	0x240004c8
24012f54:	03d09000 	.word	0x03d09000
24012f58:	240004cc 	.word	0x240004cc
24012f5c:	240004d0 	.word	0x240004d0
24012f60:	fff6ed45 	.word	0xfff6ed45
24012f64:	02020200 	.word	0x02020200
24012f68:	01ff0000 	.word	0x01ff0000
24012f6c:	01010280 	.word	0x01010280

24012f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24012f70:	b580      	push	{r7, lr}
24012f72:	b08c      	sub	sp, #48	; 0x30
24012f74:	af00      	add	r7, sp, #0
24012f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
24012f78:	687b      	ldr	r3, [r7, #4]
24012f7a:	2b00      	cmp	r3, #0
24012f7c:	d102      	bne.n	24012f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
24012f7e:	2301      	movs	r3, #1
24012f80:	f000 bc1d 	b.w	240137be <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24012f84:	687b      	ldr	r3, [r7, #4]
24012f86:	681b      	ldr	r3, [r3, #0]
24012f88:	f003 0301 	and.w	r3, r3, #1
24012f8c:	2b00      	cmp	r3, #0
24012f8e:	f000 8087 	beq.w	240130a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24012f92:	4b99      	ldr	r3, [pc, #612]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012f94:	691b      	ldr	r3, [r3, #16]
24012f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
24012f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24012f9c:	4b96      	ldr	r3, [pc, #600]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24012fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24012fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24012fa4:	2b10      	cmp	r3, #16
24012fa6:	d007      	beq.n	24012fb8 <HAL_RCC_OscConfig+0x48>
24012fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24012faa:	2b18      	cmp	r3, #24
24012fac:	d110      	bne.n	24012fd0 <HAL_RCC_OscConfig+0x60>
24012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
24012fb0:	f003 0303 	and.w	r3, r3, #3
24012fb4:	2b02      	cmp	r3, #2
24012fb6:	d10b      	bne.n	24012fd0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24012fb8:	4b8f      	ldr	r3, [pc, #572]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012fba:	681b      	ldr	r3, [r3, #0]
24012fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24012fc0:	2b00      	cmp	r3, #0
24012fc2:	d06c      	beq.n	2401309e <HAL_RCC_OscConfig+0x12e>
24012fc4:	687b      	ldr	r3, [r7, #4]
24012fc6:	685b      	ldr	r3, [r3, #4]
24012fc8:	2b00      	cmp	r3, #0
24012fca:	d168      	bne.n	2401309e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
24012fcc:	2301      	movs	r3, #1
24012fce:	e3f6      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24012fd0:	687b      	ldr	r3, [r7, #4]
24012fd2:	685b      	ldr	r3, [r3, #4]
24012fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24012fd8:	d106      	bne.n	24012fe8 <HAL_RCC_OscConfig+0x78>
24012fda:	4b87      	ldr	r3, [pc, #540]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012fdc:	681b      	ldr	r3, [r3, #0]
24012fde:	4a86      	ldr	r2, [pc, #536]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012fe4:	6013      	str	r3, [r2, #0]
24012fe6:	e02e      	b.n	24013046 <HAL_RCC_OscConfig+0xd6>
24012fe8:	687b      	ldr	r3, [r7, #4]
24012fea:	685b      	ldr	r3, [r3, #4]
24012fec:	2b00      	cmp	r3, #0
24012fee:	d10c      	bne.n	2401300a <HAL_RCC_OscConfig+0x9a>
24012ff0:	4b81      	ldr	r3, [pc, #516]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012ff2:	681b      	ldr	r3, [r3, #0]
24012ff4:	4a80      	ldr	r2, [pc, #512]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24012ffa:	6013      	str	r3, [r2, #0]
24012ffc:	4b7e      	ldr	r3, [pc, #504]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24012ffe:	681b      	ldr	r3, [r3, #0]
24013000:	4a7d      	ldr	r2, [pc, #500]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24013006:	6013      	str	r3, [r2, #0]
24013008:	e01d      	b.n	24013046 <HAL_RCC_OscConfig+0xd6>
2401300a:	687b      	ldr	r3, [r7, #4]
2401300c:	685b      	ldr	r3, [r3, #4]
2401300e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24013012:	d10c      	bne.n	2401302e <HAL_RCC_OscConfig+0xbe>
24013014:	4b78      	ldr	r3, [pc, #480]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013016:	681b      	ldr	r3, [r3, #0]
24013018:	4a77      	ldr	r2, [pc, #476]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401301a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2401301e:	6013      	str	r3, [r2, #0]
24013020:	4b75      	ldr	r3, [pc, #468]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013022:	681b      	ldr	r3, [r3, #0]
24013024:	4a74      	ldr	r2, [pc, #464]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401302a:	6013      	str	r3, [r2, #0]
2401302c:	e00b      	b.n	24013046 <HAL_RCC_OscConfig+0xd6>
2401302e:	4b72      	ldr	r3, [pc, #456]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013030:	681b      	ldr	r3, [r3, #0]
24013032:	4a71      	ldr	r2, [pc, #452]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24013038:	6013      	str	r3, [r2, #0]
2401303a:	4b6f      	ldr	r3, [pc, #444]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401303c:	681b      	ldr	r3, [r3, #0]
2401303e:	4a6e      	ldr	r2, [pc, #440]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24013044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24013046:	687b      	ldr	r3, [r7, #4]
24013048:	685b      	ldr	r3, [r3, #4]
2401304a:	2b00      	cmp	r3, #0
2401304c:	d013      	beq.n	24013076 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401304e:	f7ef f87d 	bl	2400214c <HAL_GetTick>
24013052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24013054:	e008      	b.n	24013068 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24013056:	f7ef f879 	bl	2400214c <HAL_GetTick>
2401305a:	4602      	mov	r2, r0
2401305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401305e:	1ad3      	subs	r3, r2, r3
24013060:	2b64      	cmp	r3, #100	; 0x64
24013062:	d901      	bls.n	24013068 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
24013064:	2303      	movs	r3, #3
24013066:	e3aa      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24013068:	4b63      	ldr	r3, [pc, #396]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401306a:	681b      	ldr	r3, [r3, #0]
2401306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013070:	2b00      	cmp	r3, #0
24013072:	d0f0      	beq.n	24013056 <HAL_RCC_OscConfig+0xe6>
24013074:	e014      	b.n	240130a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013076:	f7ef f869 	bl	2400214c <HAL_GetTick>
2401307a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2401307c:	e008      	b.n	24013090 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2401307e:	f7ef f865 	bl	2400214c <HAL_GetTick>
24013082:	4602      	mov	r2, r0
24013084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013086:	1ad3      	subs	r3, r2, r3
24013088:	2b64      	cmp	r3, #100	; 0x64
2401308a:	d901      	bls.n	24013090 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
2401308c:	2303      	movs	r3, #3
2401308e:	e396      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24013090:	4b59      	ldr	r3, [pc, #356]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013092:	681b      	ldr	r3, [r3, #0]
24013094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013098:	2b00      	cmp	r3, #0
2401309a:	d1f0      	bne.n	2401307e <HAL_RCC_OscConfig+0x10e>
2401309c:	e000      	b.n	240130a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2401309e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240130a0:	687b      	ldr	r3, [r7, #4]
240130a2:	681b      	ldr	r3, [r3, #0]
240130a4:	f003 0302 	and.w	r3, r3, #2
240130a8:	2b00      	cmp	r3, #0
240130aa:	f000 80cb 	beq.w	24013244 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240130ae:	4b52      	ldr	r3, [pc, #328]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240130b0:	691b      	ldr	r3, [r3, #16]
240130b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
240130b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240130b8:	4b4f      	ldr	r3, [pc, #316]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240130ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240130bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240130be:	6a3b      	ldr	r3, [r7, #32]
240130c0:	2b00      	cmp	r3, #0
240130c2:	d007      	beq.n	240130d4 <HAL_RCC_OscConfig+0x164>
240130c4:	6a3b      	ldr	r3, [r7, #32]
240130c6:	2b18      	cmp	r3, #24
240130c8:	d156      	bne.n	24013178 <HAL_RCC_OscConfig+0x208>
240130ca:	69fb      	ldr	r3, [r7, #28]
240130cc:	f003 0303 	and.w	r3, r3, #3
240130d0:	2b00      	cmp	r3, #0
240130d2:	d151      	bne.n	24013178 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240130d4:	4b48      	ldr	r3, [pc, #288]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240130d6:	681b      	ldr	r3, [r3, #0]
240130d8:	f003 0304 	and.w	r3, r3, #4
240130dc:	2b00      	cmp	r3, #0
240130de:	d005      	beq.n	240130ec <HAL_RCC_OscConfig+0x17c>
240130e0:	687b      	ldr	r3, [r7, #4]
240130e2:	68db      	ldr	r3, [r3, #12]
240130e4:	2b00      	cmp	r3, #0
240130e6:	d101      	bne.n	240130ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
240130e8:	2301      	movs	r3, #1
240130ea:	e368      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240130ec:	4b42      	ldr	r3, [pc, #264]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240130ee:	681b      	ldr	r3, [r3, #0]
240130f0:	f023 0219 	bic.w	r2, r3, #25
240130f4:	687b      	ldr	r3, [r7, #4]
240130f6:	68db      	ldr	r3, [r3, #12]
240130f8:	493f      	ldr	r1, [pc, #252]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240130fa:	4313      	orrs	r3, r2
240130fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
240130fe:	f7ef f825 	bl	2400214c <HAL_GetTick>
24013102:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013104:	e008      	b.n	24013118 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24013106:	f7ef f821 	bl	2400214c <HAL_GetTick>
2401310a:	4602      	mov	r2, r0
2401310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401310e:	1ad3      	subs	r3, r2, r3
24013110:	2b02      	cmp	r3, #2
24013112:	d901      	bls.n	24013118 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
24013114:	2303      	movs	r3, #3
24013116:	e352      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013118:	4b37      	ldr	r3, [pc, #220]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401311a:	681b      	ldr	r3, [r3, #0]
2401311c:	f003 0304 	and.w	r3, r3, #4
24013120:	2b00      	cmp	r3, #0
24013122:	d0f0      	beq.n	24013106 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24013124:	f7ef f8ac 	bl	24002280 <HAL_GetREVID>
24013128:	4603      	mov	r3, r0
2401312a:	f241 0203 	movw	r2, #4099	; 0x1003
2401312e:	4293      	cmp	r3, r2
24013130:	d817      	bhi.n	24013162 <HAL_RCC_OscConfig+0x1f2>
24013132:	687b      	ldr	r3, [r7, #4]
24013134:	691b      	ldr	r3, [r3, #16]
24013136:	2b40      	cmp	r3, #64	; 0x40
24013138:	d108      	bne.n	2401314c <HAL_RCC_OscConfig+0x1dc>
2401313a:	4b2f      	ldr	r3, [pc, #188]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401313c:	685b      	ldr	r3, [r3, #4]
2401313e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24013142:	4a2d      	ldr	r2, [pc, #180]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24013148:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2401314a:	e07b      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2401314c:	4b2a      	ldr	r3, [pc, #168]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401314e:	685b      	ldr	r3, [r3, #4]
24013150:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24013154:	687b      	ldr	r3, [r7, #4]
24013156:	691b      	ldr	r3, [r3, #16]
24013158:	031b      	lsls	r3, r3, #12
2401315a:	4927      	ldr	r1, [pc, #156]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401315c:	4313      	orrs	r3, r2
2401315e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013160:	e070      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24013162:	4b25      	ldr	r3, [pc, #148]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013164:	685b      	ldr	r3, [r3, #4]
24013166:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2401316a:	687b      	ldr	r3, [r7, #4]
2401316c:	691b      	ldr	r3, [r3, #16]
2401316e:	061b      	lsls	r3, r3, #24
24013170:	4921      	ldr	r1, [pc, #132]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013172:	4313      	orrs	r3, r2
24013174:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013176:	e065      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
24013178:	687b      	ldr	r3, [r7, #4]
2401317a:	68db      	ldr	r3, [r3, #12]
2401317c:	2b00      	cmp	r3, #0
2401317e:	d048      	beq.n	24013212 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24013180:	4b1d      	ldr	r3, [pc, #116]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
24013182:	681b      	ldr	r3, [r3, #0]
24013184:	f023 0219 	bic.w	r2, r3, #25
24013188:	687b      	ldr	r3, [r7, #4]
2401318a:	68db      	ldr	r3, [r3, #12]
2401318c:	491a      	ldr	r1, [pc, #104]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
2401318e:	4313      	orrs	r3, r2
24013190:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013192:	f7ee ffdb 	bl	2400214c <HAL_GetTick>
24013196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013198:	e008      	b.n	240131ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2401319a:	f7ee ffd7 	bl	2400214c <HAL_GetTick>
2401319e:	4602      	mov	r2, r0
240131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240131a2:	1ad3      	subs	r3, r2, r3
240131a4:	2b02      	cmp	r3, #2
240131a6:	d901      	bls.n	240131ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
240131a8:	2303      	movs	r3, #3
240131aa:	e308      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240131ac:	4b12      	ldr	r3, [pc, #72]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240131ae:	681b      	ldr	r3, [r3, #0]
240131b0:	f003 0304 	and.w	r3, r3, #4
240131b4:	2b00      	cmp	r3, #0
240131b6:	d0f0      	beq.n	2401319a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240131b8:	f7ef f862 	bl	24002280 <HAL_GetREVID>
240131bc:	4603      	mov	r3, r0
240131be:	f241 0203 	movw	r2, #4099	; 0x1003
240131c2:	4293      	cmp	r3, r2
240131c4:	d81a      	bhi.n	240131fc <HAL_RCC_OscConfig+0x28c>
240131c6:	687b      	ldr	r3, [r7, #4]
240131c8:	691b      	ldr	r3, [r3, #16]
240131ca:	2b40      	cmp	r3, #64	; 0x40
240131cc:	d108      	bne.n	240131e0 <HAL_RCC_OscConfig+0x270>
240131ce:	4b0a      	ldr	r3, [pc, #40]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240131d0:	685b      	ldr	r3, [r3, #4]
240131d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240131d6:	4a08      	ldr	r2, [pc, #32]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240131d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240131dc:	6053      	str	r3, [r2, #4]
240131de:	e031      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
240131e0:	4b05      	ldr	r3, [pc, #20]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240131e2:	685b      	ldr	r3, [r3, #4]
240131e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
240131e8:	687b      	ldr	r3, [r7, #4]
240131ea:	691b      	ldr	r3, [r3, #16]
240131ec:	031b      	lsls	r3, r3, #12
240131ee:	4902      	ldr	r1, [pc, #8]	; (240131f8 <HAL_RCC_OscConfig+0x288>)
240131f0:	4313      	orrs	r3, r2
240131f2:	604b      	str	r3, [r1, #4]
240131f4:	e026      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
240131f6:	bf00      	nop
240131f8:	58024400 	.word	0x58024400
240131fc:	4b9a      	ldr	r3, [pc, #616]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240131fe:	685b      	ldr	r3, [r3, #4]
24013200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24013204:	687b      	ldr	r3, [r7, #4]
24013206:	691b      	ldr	r3, [r3, #16]
24013208:	061b      	lsls	r3, r3, #24
2401320a:	4997      	ldr	r1, [pc, #604]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401320c:	4313      	orrs	r3, r2
2401320e:	604b      	str	r3, [r1, #4]
24013210:	e018      	b.n	24013244 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24013212:	4b95      	ldr	r3, [pc, #596]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013214:	681b      	ldr	r3, [r3, #0]
24013216:	4a94      	ldr	r2, [pc, #592]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013218:	f023 0301 	bic.w	r3, r3, #1
2401321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401321e:	f7ee ff95 	bl	2400214c <HAL_GetTick>
24013222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24013224:	e008      	b.n	24013238 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24013226:	f7ee ff91 	bl	2400214c <HAL_GetTick>
2401322a:	4602      	mov	r2, r0
2401322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401322e:	1ad3      	subs	r3, r2, r3
24013230:	2b02      	cmp	r3, #2
24013232:	d901      	bls.n	24013238 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
24013234:	2303      	movs	r3, #3
24013236:	e2c2      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24013238:	4b8b      	ldr	r3, [pc, #556]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401323a:	681b      	ldr	r3, [r3, #0]
2401323c:	f003 0304 	and.w	r3, r3, #4
24013240:	2b00      	cmp	r3, #0
24013242:	d1f0      	bne.n	24013226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24013244:	687b      	ldr	r3, [r7, #4]
24013246:	681b      	ldr	r3, [r3, #0]
24013248:	f003 0310 	and.w	r3, r3, #16
2401324c:	2b00      	cmp	r3, #0
2401324e:	f000 80a9 	beq.w	240133a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24013252:	4b85      	ldr	r3, [pc, #532]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013254:	691b      	ldr	r3, [r3, #16]
24013256:	f003 0338 	and.w	r3, r3, #56	; 0x38
2401325a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2401325c:	4b82      	ldr	r3, [pc, #520]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013260:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24013262:	69bb      	ldr	r3, [r7, #24]
24013264:	2b08      	cmp	r3, #8
24013266:	d007      	beq.n	24013278 <HAL_RCC_OscConfig+0x308>
24013268:	69bb      	ldr	r3, [r7, #24]
2401326a:	2b18      	cmp	r3, #24
2401326c:	d13a      	bne.n	240132e4 <HAL_RCC_OscConfig+0x374>
2401326e:	697b      	ldr	r3, [r7, #20]
24013270:	f003 0303 	and.w	r3, r3, #3
24013274:	2b01      	cmp	r3, #1
24013276:	d135      	bne.n	240132e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013278:	4b7b      	ldr	r3, [pc, #492]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401327a:	681b      	ldr	r3, [r3, #0]
2401327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013280:	2b00      	cmp	r3, #0
24013282:	d005      	beq.n	24013290 <HAL_RCC_OscConfig+0x320>
24013284:	687b      	ldr	r3, [r7, #4]
24013286:	69db      	ldr	r3, [r3, #28]
24013288:	2b80      	cmp	r3, #128	; 0x80
2401328a:	d001      	beq.n	24013290 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
2401328c:	2301      	movs	r3, #1
2401328e:	e296      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013290:	f7ee fff6 	bl	24002280 <HAL_GetREVID>
24013294:	4603      	mov	r3, r0
24013296:	f241 0203 	movw	r2, #4099	; 0x1003
2401329a:	4293      	cmp	r3, r2
2401329c:	d817      	bhi.n	240132ce <HAL_RCC_OscConfig+0x35e>
2401329e:	687b      	ldr	r3, [r7, #4]
240132a0:	6a1b      	ldr	r3, [r3, #32]
240132a2:	2b20      	cmp	r3, #32
240132a4:	d108      	bne.n	240132b8 <HAL_RCC_OscConfig+0x348>
240132a6:	4b70      	ldr	r3, [pc, #448]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132a8:	685b      	ldr	r3, [r3, #4]
240132aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240132ae:	4a6e      	ldr	r2, [pc, #440]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240132b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240132b6:	e075      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240132b8:	4b6b      	ldr	r3, [pc, #428]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132ba:	685b      	ldr	r3, [r3, #4]
240132bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
240132c0:	687b      	ldr	r3, [r7, #4]
240132c2:	6a1b      	ldr	r3, [r3, #32]
240132c4:	069b      	lsls	r3, r3, #26
240132c6:	4968      	ldr	r1, [pc, #416]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132c8:	4313      	orrs	r3, r2
240132ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240132cc:	e06a      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240132ce:	4b66      	ldr	r3, [pc, #408]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132d0:	68db      	ldr	r3, [r3, #12]
240132d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
240132d6:	687b      	ldr	r3, [r7, #4]
240132d8:	6a1b      	ldr	r3, [r3, #32]
240132da:	061b      	lsls	r3, r3, #24
240132dc:	4962      	ldr	r1, [pc, #392]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132de:	4313      	orrs	r3, r2
240132e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240132e2:	e05f      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
240132e4:	687b      	ldr	r3, [r7, #4]
240132e6:	69db      	ldr	r3, [r3, #28]
240132e8:	2b00      	cmp	r3, #0
240132ea:	d042      	beq.n	24013372 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
240132ec:	4b5e      	ldr	r3, [pc, #376]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132ee:	681b      	ldr	r3, [r3, #0]
240132f0:	4a5d      	ldr	r2, [pc, #372]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240132f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240132f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240132f8:	f7ee ff28 	bl	2400214c <HAL_GetTick>
240132fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240132fe:	e008      	b.n	24013312 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24013300:	f7ee ff24 	bl	2400214c <HAL_GetTick>
24013304:	4602      	mov	r2, r0
24013306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013308:	1ad3      	subs	r3, r2, r3
2401330a:	2b02      	cmp	r3, #2
2401330c:	d901      	bls.n	24013312 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
2401330e:	2303      	movs	r3, #3
24013310:	e255      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24013312:	4b55      	ldr	r3, [pc, #340]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013314:	681b      	ldr	r3, [r3, #0]
24013316:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401331a:	2b00      	cmp	r3, #0
2401331c:	d0f0      	beq.n	24013300 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2401331e:	f7ee ffaf 	bl	24002280 <HAL_GetREVID>
24013322:	4603      	mov	r3, r0
24013324:	f241 0203 	movw	r2, #4099	; 0x1003
24013328:	4293      	cmp	r3, r2
2401332a:	d817      	bhi.n	2401335c <HAL_RCC_OscConfig+0x3ec>
2401332c:	687b      	ldr	r3, [r7, #4]
2401332e:	6a1b      	ldr	r3, [r3, #32]
24013330:	2b20      	cmp	r3, #32
24013332:	d108      	bne.n	24013346 <HAL_RCC_OscConfig+0x3d6>
24013334:	4b4c      	ldr	r3, [pc, #304]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013336:	685b      	ldr	r3, [r3, #4]
24013338:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2401333c:	4a4a      	ldr	r2, [pc, #296]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401333e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24013342:	6053      	str	r3, [r2, #4]
24013344:	e02e      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
24013346:	4b48      	ldr	r3, [pc, #288]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013348:	685b      	ldr	r3, [r3, #4]
2401334a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
2401334e:	687b      	ldr	r3, [r7, #4]
24013350:	6a1b      	ldr	r3, [r3, #32]
24013352:	069b      	lsls	r3, r3, #26
24013354:	4944      	ldr	r1, [pc, #272]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013356:	4313      	orrs	r3, r2
24013358:	604b      	str	r3, [r1, #4]
2401335a:	e023      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
2401335c:	4b42      	ldr	r3, [pc, #264]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401335e:	68db      	ldr	r3, [r3, #12]
24013360:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24013364:	687b      	ldr	r3, [r7, #4]
24013366:	6a1b      	ldr	r3, [r3, #32]
24013368:	061b      	lsls	r3, r3, #24
2401336a:	493f      	ldr	r1, [pc, #252]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401336c:	4313      	orrs	r3, r2
2401336e:	60cb      	str	r3, [r1, #12]
24013370:	e018      	b.n	240133a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24013372:	4b3d      	ldr	r3, [pc, #244]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013374:	681b      	ldr	r3, [r3, #0]
24013376:	4a3c      	ldr	r2, [pc, #240]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2401337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401337e:	f7ee fee5 	bl	2400214c <HAL_GetTick>
24013382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013384:	e008      	b.n	24013398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24013386:	f7ee fee1 	bl	2400214c <HAL_GetTick>
2401338a:	4602      	mov	r2, r0
2401338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401338e:	1ad3      	subs	r3, r2, r3
24013390:	2b02      	cmp	r3, #2
24013392:	d901      	bls.n	24013398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
24013394:	2303      	movs	r3, #3
24013396:	e212      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013398:	4b33      	ldr	r3, [pc, #204]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401339a:	681b      	ldr	r3, [r3, #0]
2401339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
240133a0:	2b00      	cmp	r3, #0
240133a2:	d1f0      	bne.n	24013386 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240133a4:	687b      	ldr	r3, [r7, #4]
240133a6:	681b      	ldr	r3, [r3, #0]
240133a8:	f003 0308 	and.w	r3, r3, #8
240133ac:	2b00      	cmp	r3, #0
240133ae:	d036      	beq.n	2401341e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
240133b0:	687b      	ldr	r3, [r7, #4]
240133b2:	695b      	ldr	r3, [r3, #20]
240133b4:	2b00      	cmp	r3, #0
240133b6:	d019      	beq.n	240133ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
240133b8:	4b2b      	ldr	r3, [pc, #172]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240133ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240133bc:	4a2a      	ldr	r2, [pc, #168]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240133be:	f043 0301 	orr.w	r3, r3, #1
240133c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240133c4:	f7ee fec2 	bl	2400214c <HAL_GetTick>
240133c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240133ca:	e008      	b.n	240133de <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
240133cc:	f7ee febe 	bl	2400214c <HAL_GetTick>
240133d0:	4602      	mov	r2, r0
240133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240133d4:	1ad3      	subs	r3, r2, r3
240133d6:	2b02      	cmp	r3, #2
240133d8:	d901      	bls.n	240133de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
240133da:	2303      	movs	r3, #3
240133dc:	e1ef      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240133de:	4b22      	ldr	r3, [pc, #136]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240133e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240133e2:	f003 0302 	and.w	r3, r3, #2
240133e6:	2b00      	cmp	r3, #0
240133e8:	d0f0      	beq.n	240133cc <HAL_RCC_OscConfig+0x45c>
240133ea:	e018      	b.n	2401341e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
240133ec:	4b1e      	ldr	r3, [pc, #120]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240133ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240133f0:	4a1d      	ldr	r2, [pc, #116]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
240133f2:	f023 0301 	bic.w	r3, r3, #1
240133f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240133f8:	f7ee fea8 	bl	2400214c <HAL_GetTick>
240133fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240133fe:	e008      	b.n	24013412 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
24013400:	f7ee fea4 	bl	2400214c <HAL_GetTick>
24013404:	4602      	mov	r2, r0
24013406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013408:	1ad3      	subs	r3, r2, r3
2401340a:	2b02      	cmp	r3, #2
2401340c:	d901      	bls.n	24013412 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
2401340e:	2303      	movs	r3, #3
24013410:	e1d5      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24013412:	4b15      	ldr	r3, [pc, #84]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013416:	f003 0302 	and.w	r3, r3, #2
2401341a:	2b00      	cmp	r3, #0
2401341c:	d1f0      	bne.n	24013400 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2401341e:	687b      	ldr	r3, [r7, #4]
24013420:	681b      	ldr	r3, [r3, #0]
24013422:	f003 0320 	and.w	r3, r3, #32
24013426:	2b00      	cmp	r3, #0
24013428:	d039      	beq.n	2401349e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
2401342a:	687b      	ldr	r3, [r7, #4]
2401342c:	699b      	ldr	r3, [r3, #24]
2401342e:	2b00      	cmp	r3, #0
24013430:	d01c      	beq.n	2401346c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
24013432:	4b0d      	ldr	r3, [pc, #52]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013434:	681b      	ldr	r3, [r3, #0]
24013436:	4a0c      	ldr	r2, [pc, #48]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
24013438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2401343c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2401343e:	f7ee fe85 	bl	2400214c <HAL_GetTick>
24013442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24013444:	e008      	b.n	24013458 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24013446:	f7ee fe81 	bl	2400214c <HAL_GetTick>
2401344a:	4602      	mov	r2, r0
2401344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401344e:	1ad3      	subs	r3, r2, r3
24013450:	2b02      	cmp	r3, #2
24013452:	d901      	bls.n	24013458 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
24013454:	2303      	movs	r3, #3
24013456:	e1b2      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24013458:	4b03      	ldr	r3, [pc, #12]	; (24013468 <HAL_RCC_OscConfig+0x4f8>)
2401345a:	681b      	ldr	r3, [r3, #0]
2401345c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24013460:	2b00      	cmp	r3, #0
24013462:	d0f0      	beq.n	24013446 <HAL_RCC_OscConfig+0x4d6>
24013464:	e01b      	b.n	2401349e <HAL_RCC_OscConfig+0x52e>
24013466:	bf00      	nop
24013468:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2401346c:	4b9b      	ldr	r3, [pc, #620]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401346e:	681b      	ldr	r3, [r3, #0]
24013470:	4a9a      	ldr	r2, [pc, #616]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24013476:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24013478:	f7ee fe68 	bl	2400214c <HAL_GetTick>
2401347c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2401347e:	e008      	b.n	24013492 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24013480:	f7ee fe64 	bl	2400214c <HAL_GetTick>
24013484:	4602      	mov	r2, r0
24013486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013488:	1ad3      	subs	r3, r2, r3
2401348a:	2b02      	cmp	r3, #2
2401348c:	d901      	bls.n	24013492 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
2401348e:	2303      	movs	r3, #3
24013490:	e195      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24013492:	4b92      	ldr	r3, [pc, #584]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013494:	681b      	ldr	r3, [r3, #0]
24013496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2401349a:	2b00      	cmp	r3, #0
2401349c:	d1f0      	bne.n	24013480 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2401349e:	687b      	ldr	r3, [r7, #4]
240134a0:	681b      	ldr	r3, [r3, #0]
240134a2:	f003 0304 	and.w	r3, r3, #4
240134a6:	2b00      	cmp	r3, #0
240134a8:	f000 8081 	beq.w	240135ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
240134ac:	4b8c      	ldr	r3, [pc, #560]	; (240136e0 <HAL_RCC_OscConfig+0x770>)
240134ae:	681b      	ldr	r3, [r3, #0]
240134b0:	4a8b      	ldr	r2, [pc, #556]	; (240136e0 <HAL_RCC_OscConfig+0x770>)
240134b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240134b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
240134b8:	f7ee fe48 	bl	2400214c <HAL_GetTick>
240134bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
240134be:	e008      	b.n	240134d2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
240134c0:	f7ee fe44 	bl	2400214c <HAL_GetTick>
240134c4:	4602      	mov	r2, r0
240134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240134c8:	1ad3      	subs	r3, r2, r3
240134ca:	2b64      	cmp	r3, #100	; 0x64
240134cc:	d901      	bls.n	240134d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
240134ce:	2303      	movs	r3, #3
240134d0:	e175      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
240134d2:	4b83      	ldr	r3, [pc, #524]	; (240136e0 <HAL_RCC_OscConfig+0x770>)
240134d4:	681b      	ldr	r3, [r3, #0]
240134d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
240134da:	2b00      	cmp	r3, #0
240134dc:	d0f0      	beq.n	240134c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240134de:	687b      	ldr	r3, [r7, #4]
240134e0:	689b      	ldr	r3, [r3, #8]
240134e2:	2b01      	cmp	r3, #1
240134e4:	d106      	bne.n	240134f4 <HAL_RCC_OscConfig+0x584>
240134e6:	4b7d      	ldr	r3, [pc, #500]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240134e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240134ea:	4a7c      	ldr	r2, [pc, #496]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240134ec:	f043 0301 	orr.w	r3, r3, #1
240134f0:	6713      	str	r3, [r2, #112]	; 0x70
240134f2:	e02d      	b.n	24013550 <HAL_RCC_OscConfig+0x5e0>
240134f4:	687b      	ldr	r3, [r7, #4]
240134f6:	689b      	ldr	r3, [r3, #8]
240134f8:	2b00      	cmp	r3, #0
240134fa:	d10c      	bne.n	24013516 <HAL_RCC_OscConfig+0x5a6>
240134fc:	4b77      	ldr	r3, [pc, #476]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240134fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013500:	4a76      	ldr	r2, [pc, #472]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013502:	f023 0301 	bic.w	r3, r3, #1
24013506:	6713      	str	r3, [r2, #112]	; 0x70
24013508:	4b74      	ldr	r3, [pc, #464]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401350c:	4a73      	ldr	r2, [pc, #460]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401350e:	f023 0304 	bic.w	r3, r3, #4
24013512:	6713      	str	r3, [r2, #112]	; 0x70
24013514:	e01c      	b.n	24013550 <HAL_RCC_OscConfig+0x5e0>
24013516:	687b      	ldr	r3, [r7, #4]
24013518:	689b      	ldr	r3, [r3, #8]
2401351a:	2b05      	cmp	r3, #5
2401351c:	d10c      	bne.n	24013538 <HAL_RCC_OscConfig+0x5c8>
2401351e:	4b6f      	ldr	r3, [pc, #444]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013522:	4a6e      	ldr	r2, [pc, #440]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013524:	f043 0304 	orr.w	r3, r3, #4
24013528:	6713      	str	r3, [r2, #112]	; 0x70
2401352a:	4b6c      	ldr	r3, [pc, #432]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401352e:	4a6b      	ldr	r2, [pc, #428]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013530:	f043 0301 	orr.w	r3, r3, #1
24013534:	6713      	str	r3, [r2, #112]	; 0x70
24013536:	e00b      	b.n	24013550 <HAL_RCC_OscConfig+0x5e0>
24013538:	4b68      	ldr	r3, [pc, #416]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401353c:	4a67      	ldr	r2, [pc, #412]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401353e:	f023 0301 	bic.w	r3, r3, #1
24013542:	6713      	str	r3, [r2, #112]	; 0x70
24013544:	4b65      	ldr	r3, [pc, #404]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013548:	4a64      	ldr	r2, [pc, #400]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401354a:	f023 0304 	bic.w	r3, r3, #4
2401354e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24013550:	687b      	ldr	r3, [r7, #4]
24013552:	689b      	ldr	r3, [r3, #8]
24013554:	2b00      	cmp	r3, #0
24013556:	d015      	beq.n	24013584 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013558:	f7ee fdf8 	bl	2400214c <HAL_GetTick>
2401355c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401355e:	e00a      	b.n	24013576 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
24013560:	f7ee fdf4 	bl	2400214c <HAL_GetTick>
24013564:	4602      	mov	r2, r0
24013566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013568:	1ad3      	subs	r3, r2, r3
2401356a:	f241 3288 	movw	r2, #5000	; 0x1388
2401356e:	4293      	cmp	r3, r2
24013570:	d901      	bls.n	24013576 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
24013572:	2303      	movs	r3, #3
24013574:	e123      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24013576:	4b59      	ldr	r3, [pc, #356]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401357a:	f003 0302 	and.w	r3, r3, #2
2401357e:	2b00      	cmp	r3, #0
24013580:	d0ee      	beq.n	24013560 <HAL_RCC_OscConfig+0x5f0>
24013582:	e014      	b.n	240135ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013584:	f7ee fde2 	bl	2400214c <HAL_GetTick>
24013588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2401358a:	e00a      	b.n	240135a2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2401358c:	f7ee fdde 	bl	2400214c <HAL_GetTick>
24013590:	4602      	mov	r2, r0
24013592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013594:	1ad3      	subs	r3, r2, r3
24013596:	f241 3288 	movw	r2, #5000	; 0x1388
2401359a:	4293      	cmp	r3, r2
2401359c:	d901      	bls.n	240135a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
2401359e:	2303      	movs	r3, #3
240135a0:	e10d      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240135a2:	4b4e      	ldr	r3, [pc, #312]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240135a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135a6:	f003 0302 	and.w	r3, r3, #2
240135aa:	2b00      	cmp	r3, #0
240135ac:	d1ee      	bne.n	2401358c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240135ae:	687b      	ldr	r3, [r7, #4]
240135b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240135b2:	2b00      	cmp	r3, #0
240135b4:	f000 8102 	beq.w	240137bc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240135b8:	4b48      	ldr	r3, [pc, #288]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240135ba:	691b      	ldr	r3, [r3, #16]
240135bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
240135c0:	2b18      	cmp	r3, #24
240135c2:	f000 80bd 	beq.w	24013740 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240135c6:	687b      	ldr	r3, [r7, #4]
240135c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240135ca:	2b02      	cmp	r3, #2
240135cc:	f040 809e 	bne.w	2401370c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
240135d0:	4b42      	ldr	r3, [pc, #264]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240135d2:	681b      	ldr	r3, [r3, #0]
240135d4:	4a41      	ldr	r2, [pc, #260]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240135d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240135da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240135dc:	f7ee fdb6 	bl	2400214c <HAL_GetTick>
240135e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240135e2:	e008      	b.n	240135f6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
240135e4:	f7ee fdb2 	bl	2400214c <HAL_GetTick>
240135e8:	4602      	mov	r2, r0
240135ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240135ec:	1ad3      	subs	r3, r2, r3
240135ee:	2b02      	cmp	r3, #2
240135f0:	d901      	bls.n	240135f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
240135f2:	2303      	movs	r3, #3
240135f4:	e0e3      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240135f6:	4b39      	ldr	r3, [pc, #228]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240135f8:	681b      	ldr	r3, [r3, #0]
240135fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240135fe:	2b00      	cmp	r3, #0
24013600:	d1f0      	bne.n	240135e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24013602:	4b36      	ldr	r3, [pc, #216]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24013606:	4b37      	ldr	r3, [pc, #220]	; (240136e4 <HAL_RCC_OscConfig+0x774>)
24013608:	4013      	ands	r3, r2
2401360a:	687a      	ldr	r2, [r7, #4]
2401360c:	6a91      	ldr	r1, [r2, #40]	; 0x28
2401360e:	687a      	ldr	r2, [r7, #4]
24013610:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
24013612:	0112      	lsls	r2, r2, #4
24013614:	430a      	orrs	r2, r1
24013616:	4931      	ldr	r1, [pc, #196]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013618:	4313      	orrs	r3, r2
2401361a:	628b      	str	r3, [r1, #40]	; 0x28
2401361c:	687b      	ldr	r3, [r7, #4]
2401361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013620:	3b01      	subs	r3, #1
24013622:	f3c3 0208 	ubfx	r2, r3, #0, #9
24013626:	687b      	ldr	r3, [r7, #4]
24013628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401362a:	3b01      	subs	r3, #1
2401362c:	025b      	lsls	r3, r3, #9
2401362e:	b29b      	uxth	r3, r3
24013630:	431a      	orrs	r2, r3
24013632:	687b      	ldr	r3, [r7, #4]
24013634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013636:	3b01      	subs	r3, #1
24013638:	041b      	lsls	r3, r3, #16
2401363a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2401363e:	431a      	orrs	r2, r3
24013640:	687b      	ldr	r3, [r7, #4]
24013642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013644:	3b01      	subs	r3, #1
24013646:	061b      	lsls	r3, r3, #24
24013648:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2401364c:	4923      	ldr	r1, [pc, #140]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401364e:	4313      	orrs	r3, r2
24013650:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
24013652:	4b22      	ldr	r3, [pc, #136]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013656:	4a21      	ldr	r2, [pc, #132]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013658:	f023 0301 	bic.w	r3, r3, #1
2401365c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2401365e:	4b1f      	ldr	r3, [pc, #124]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24013662:	4b21      	ldr	r3, [pc, #132]	; (240136e8 <HAL_RCC_OscConfig+0x778>)
24013664:	4013      	ands	r3, r2
24013666:	687a      	ldr	r2, [r7, #4]
24013668:	6c92      	ldr	r2, [r2, #72]	; 0x48
2401366a:	00d2      	lsls	r2, r2, #3
2401366c:	491b      	ldr	r1, [pc, #108]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401366e:	4313      	orrs	r3, r2
24013670:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24013672:	4b1a      	ldr	r3, [pc, #104]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013676:	f023 020c 	bic.w	r2, r3, #12
2401367a:	687b      	ldr	r3, [r7, #4]
2401367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401367e:	4917      	ldr	r1, [pc, #92]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013680:	4313      	orrs	r3, r2
24013682:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24013684:	4b15      	ldr	r3, [pc, #84]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013688:	f023 0202 	bic.w	r2, r3, #2
2401368c:	687b      	ldr	r3, [r7, #4]
2401368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013690:	4912      	ldr	r1, [pc, #72]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013692:	4313      	orrs	r3, r2
24013694:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24013696:	4b11      	ldr	r3, [pc, #68]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
24013698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401369a:	4a10      	ldr	r2, [pc, #64]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
2401369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240136a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240136a2:	4b0e      	ldr	r3, [pc, #56]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240136a6:	4a0d      	ldr	r2, [pc, #52]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240136ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240136ae:	4b0b      	ldr	r3, [pc, #44]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240136b2:	4a0a      	ldr	r2, [pc, #40]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240136b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
240136ba:	4b08      	ldr	r3, [pc, #32]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240136be:	4a07      	ldr	r2, [pc, #28]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136c0:	f043 0301 	orr.w	r3, r3, #1
240136c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
240136c6:	4b05      	ldr	r3, [pc, #20]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136c8:	681b      	ldr	r3, [r3, #0]
240136ca:	4a04      	ldr	r2, [pc, #16]	; (240136dc <HAL_RCC_OscConfig+0x76c>)
240136cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240136d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240136d2:	f7ee fd3b 	bl	2400214c <HAL_GetTick>
240136d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240136d8:	e011      	b.n	240136fe <HAL_RCC_OscConfig+0x78e>
240136da:	bf00      	nop
240136dc:	58024400 	.word	0x58024400
240136e0:	58024800 	.word	0x58024800
240136e4:	fffffc0c 	.word	0xfffffc0c
240136e8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
240136ec:	f7ee fd2e 	bl	2400214c <HAL_GetTick>
240136f0:	4602      	mov	r2, r0
240136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240136f4:	1ad3      	subs	r3, r2, r3
240136f6:	2b02      	cmp	r3, #2
240136f8:	d901      	bls.n	240136fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
240136fa:	2303      	movs	r3, #3
240136fc:	e05f      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240136fe:	4b32      	ldr	r3, [pc, #200]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
24013700:	681b      	ldr	r3, [r3, #0]
24013702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24013706:	2b00      	cmp	r3, #0
24013708:	d0f0      	beq.n	240136ec <HAL_RCC_OscConfig+0x77c>
2401370a:	e057      	b.n	240137bc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2401370c:	4b2e      	ldr	r3, [pc, #184]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
2401370e:	681b      	ldr	r3, [r3, #0]
24013710:	4a2d      	ldr	r2, [pc, #180]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
24013712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24013716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013718:	f7ee fd18 	bl	2400214c <HAL_GetTick>
2401371c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2401371e:	e008      	b.n	24013732 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24013720:	f7ee fd14 	bl	2400214c <HAL_GetTick>
24013724:	4602      	mov	r2, r0
24013726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013728:	1ad3      	subs	r3, r2, r3
2401372a:	2b02      	cmp	r3, #2
2401372c:	d901      	bls.n	24013732 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
2401372e:	2303      	movs	r3, #3
24013730:	e045      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013732:	4b25      	ldr	r3, [pc, #148]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
24013734:	681b      	ldr	r3, [r3, #0]
24013736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401373a:	2b00      	cmp	r3, #0
2401373c:	d1f0      	bne.n	24013720 <HAL_RCC_OscConfig+0x7b0>
2401373e:	e03d      	b.n	240137bc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
24013740:	4b21      	ldr	r3, [pc, #132]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
24013742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
24013746:	4b20      	ldr	r3, [pc, #128]	; (240137c8 <HAL_RCC_OscConfig+0x858>)
24013748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401374a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2401374c:	687b      	ldr	r3, [r7, #4]
2401374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013750:	2b01      	cmp	r3, #1
24013752:	d031      	beq.n	240137b8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24013754:	693b      	ldr	r3, [r7, #16]
24013756:	f003 0203 	and.w	r2, r3, #3
2401375a:	687b      	ldr	r3, [r7, #4]
2401375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2401375e:	429a      	cmp	r2, r3
24013760:	d12a      	bne.n	240137b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24013762:	693b      	ldr	r3, [r7, #16]
24013764:	091b      	lsrs	r3, r3, #4
24013766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401376a:	687b      	ldr	r3, [r7, #4]
2401376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2401376e:	429a      	cmp	r2, r3
24013770:	d122      	bne.n	240137b8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013772:	68fb      	ldr	r3, [r7, #12]
24013774:	f3c3 0208 	ubfx	r2, r3, #0, #9
24013778:	687b      	ldr	r3, [r7, #4]
2401377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401377c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2401377e:	429a      	cmp	r2, r3
24013780:	d11a      	bne.n	240137b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24013782:	68fb      	ldr	r3, [r7, #12]
24013784:	0a5b      	lsrs	r3, r3, #9
24013786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401378a:	687b      	ldr	r3, [r7, #4]
2401378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401378e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013790:	429a      	cmp	r2, r3
24013792:	d111      	bne.n	240137b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24013794:	68fb      	ldr	r3, [r7, #12]
24013796:	0c1b      	lsrs	r3, r3, #16
24013798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401379c:	687b      	ldr	r3, [r7, #4]
2401379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240137a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240137a2:	429a      	cmp	r2, r3
240137a4:	d108      	bne.n	240137b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240137a6:	68fb      	ldr	r3, [r7, #12]
240137a8:	0e1b      	lsrs	r3, r3, #24
240137aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
240137ae:	687b      	ldr	r3, [r7, #4]
240137b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240137b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240137b4:	429a      	cmp	r2, r3
240137b6:	d001      	beq.n	240137bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
240137b8:	2301      	movs	r3, #1
240137ba:	e000      	b.n	240137be <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
240137bc:	2300      	movs	r3, #0
}
240137be:	4618      	mov	r0, r3
240137c0:	3730      	adds	r7, #48	; 0x30
240137c2:	46bd      	mov	sp, r7
240137c4:	bd80      	pop	{r7, pc}
240137c6:	bf00      	nop
240137c8:	58024400 	.word	0x58024400

240137cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
240137cc:	b580      	push	{r7, lr}
240137ce:	b086      	sub	sp, #24
240137d0:	af00      	add	r7, sp, #0
240137d2:	6078      	str	r0, [r7, #4]
240137d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
240137d6:	687b      	ldr	r3, [r7, #4]
240137d8:	2b00      	cmp	r3, #0
240137da:	d101      	bne.n	240137e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
240137dc:	2301      	movs	r3, #1
240137de:	e19c      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
240137e0:	4b8a      	ldr	r3, [pc, #552]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240137e2:	681b      	ldr	r3, [r3, #0]
240137e4:	f003 030f 	and.w	r3, r3, #15
240137e8:	683a      	ldr	r2, [r7, #0]
240137ea:	429a      	cmp	r2, r3
240137ec:	d910      	bls.n	24013810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
240137ee:	4b87      	ldr	r3, [pc, #540]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240137f0:	681b      	ldr	r3, [r3, #0]
240137f2:	f023 020f 	bic.w	r2, r3, #15
240137f6:	4985      	ldr	r1, [pc, #532]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240137f8:	683b      	ldr	r3, [r7, #0]
240137fa:	4313      	orrs	r3, r2
240137fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
240137fe:	4b83      	ldr	r3, [pc, #524]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
24013800:	681b      	ldr	r3, [r3, #0]
24013802:	f003 030f 	and.w	r3, r3, #15
24013806:	683a      	ldr	r2, [r7, #0]
24013808:	429a      	cmp	r2, r3
2401380a:	d001      	beq.n	24013810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2401380c:	2301      	movs	r3, #1
2401380e:	e184      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24013810:	687b      	ldr	r3, [r7, #4]
24013812:	681b      	ldr	r3, [r3, #0]
24013814:	f003 0304 	and.w	r3, r3, #4
24013818:	2b00      	cmp	r3, #0
2401381a:	d010      	beq.n	2401383e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2401381c:	687b      	ldr	r3, [r7, #4]
2401381e:	691a      	ldr	r2, [r3, #16]
24013820:	4b7b      	ldr	r3, [pc, #492]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013822:	699b      	ldr	r3, [r3, #24]
24013824:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013828:	429a      	cmp	r2, r3
2401382a:	d908      	bls.n	2401383e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2401382c:	4b78      	ldr	r3, [pc, #480]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401382e:	699b      	ldr	r3, [r3, #24]
24013830:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013834:	687b      	ldr	r3, [r7, #4]
24013836:	691b      	ldr	r3, [r3, #16]
24013838:	4975      	ldr	r1, [pc, #468]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401383a:	4313      	orrs	r3, r2
2401383c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2401383e:	687b      	ldr	r3, [r7, #4]
24013840:	681b      	ldr	r3, [r3, #0]
24013842:	f003 0308 	and.w	r3, r3, #8
24013846:	2b00      	cmp	r3, #0
24013848:	d010      	beq.n	2401386c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2401384a:	687b      	ldr	r3, [r7, #4]
2401384c:	695a      	ldr	r2, [r3, #20]
2401384e:	4b70      	ldr	r3, [pc, #448]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013850:	69db      	ldr	r3, [r3, #28]
24013852:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013856:	429a      	cmp	r2, r3
24013858:	d908      	bls.n	2401386c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2401385a:	4b6d      	ldr	r3, [pc, #436]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401385c:	69db      	ldr	r3, [r3, #28]
2401385e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013862:	687b      	ldr	r3, [r7, #4]
24013864:	695b      	ldr	r3, [r3, #20]
24013866:	496a      	ldr	r1, [pc, #424]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013868:	4313      	orrs	r3, r2
2401386a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2401386c:	687b      	ldr	r3, [r7, #4]
2401386e:	681b      	ldr	r3, [r3, #0]
24013870:	f003 0310 	and.w	r3, r3, #16
24013874:	2b00      	cmp	r3, #0
24013876:	d010      	beq.n	2401389a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24013878:	687b      	ldr	r3, [r7, #4]
2401387a:	699a      	ldr	r2, [r3, #24]
2401387c:	4b64      	ldr	r3, [pc, #400]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401387e:	69db      	ldr	r3, [r3, #28]
24013880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24013884:	429a      	cmp	r2, r3
24013886:	d908      	bls.n	2401389a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24013888:	4b61      	ldr	r3, [pc, #388]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401388a:	69db      	ldr	r3, [r3, #28]
2401388c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24013890:	687b      	ldr	r3, [r7, #4]
24013892:	699b      	ldr	r3, [r3, #24]
24013894:	495e      	ldr	r1, [pc, #376]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013896:	4313      	orrs	r3, r2
24013898:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2401389a:	687b      	ldr	r3, [r7, #4]
2401389c:	681b      	ldr	r3, [r3, #0]
2401389e:	f003 0320 	and.w	r3, r3, #32
240138a2:	2b00      	cmp	r3, #0
240138a4:	d010      	beq.n	240138c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
240138a6:	687b      	ldr	r3, [r7, #4]
240138a8:	69da      	ldr	r2, [r3, #28]
240138aa:	4b59      	ldr	r3, [pc, #356]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138ac:	6a1b      	ldr	r3, [r3, #32]
240138ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
240138b2:	429a      	cmp	r2, r3
240138b4:	d908      	bls.n	240138c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
240138b6:	4b56      	ldr	r3, [pc, #344]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138b8:	6a1b      	ldr	r3, [r3, #32]
240138ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240138be:	687b      	ldr	r3, [r7, #4]
240138c0:	69db      	ldr	r3, [r3, #28]
240138c2:	4953      	ldr	r1, [pc, #332]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138c4:	4313      	orrs	r3, r2
240138c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240138c8:	687b      	ldr	r3, [r7, #4]
240138ca:	681b      	ldr	r3, [r3, #0]
240138cc:	f003 0302 	and.w	r3, r3, #2
240138d0:	2b00      	cmp	r3, #0
240138d2:	d010      	beq.n	240138f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240138d4:	687b      	ldr	r3, [r7, #4]
240138d6:	68da      	ldr	r2, [r3, #12]
240138d8:	4b4d      	ldr	r3, [pc, #308]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138da:	699b      	ldr	r3, [r3, #24]
240138dc:	f003 030f 	and.w	r3, r3, #15
240138e0:	429a      	cmp	r2, r3
240138e2:	d908      	bls.n	240138f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240138e4:	4b4a      	ldr	r3, [pc, #296]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138e6:	699b      	ldr	r3, [r3, #24]
240138e8:	f023 020f 	bic.w	r2, r3, #15
240138ec:	687b      	ldr	r3, [r7, #4]
240138ee:	68db      	ldr	r3, [r3, #12]
240138f0:	4947      	ldr	r1, [pc, #284]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240138f2:	4313      	orrs	r3, r2
240138f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240138f6:	687b      	ldr	r3, [r7, #4]
240138f8:	681b      	ldr	r3, [r3, #0]
240138fa:	f003 0301 	and.w	r3, r3, #1
240138fe:	2b00      	cmp	r3, #0
24013900:	d055      	beq.n	240139ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24013902:	4b43      	ldr	r3, [pc, #268]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013904:	699b      	ldr	r3, [r3, #24]
24013906:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2401390a:	687b      	ldr	r3, [r7, #4]
2401390c:	689b      	ldr	r3, [r3, #8]
2401390e:	4940      	ldr	r1, [pc, #256]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013910:	4313      	orrs	r3, r2
24013912:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24013914:	687b      	ldr	r3, [r7, #4]
24013916:	685b      	ldr	r3, [r3, #4]
24013918:	2b02      	cmp	r3, #2
2401391a:	d107      	bne.n	2401392c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2401391c:	4b3c      	ldr	r3, [pc, #240]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401391e:	681b      	ldr	r3, [r3, #0]
24013920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013924:	2b00      	cmp	r3, #0
24013926:	d121      	bne.n	2401396c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013928:	2301      	movs	r3, #1
2401392a:	e0f6      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2401392c:	687b      	ldr	r3, [r7, #4]
2401392e:	685b      	ldr	r3, [r3, #4]
24013930:	2b03      	cmp	r3, #3
24013932:	d107      	bne.n	24013944 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24013934:	4b36      	ldr	r3, [pc, #216]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
24013936:	681b      	ldr	r3, [r3, #0]
24013938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401393c:	2b00      	cmp	r3, #0
2401393e:	d115      	bne.n	2401396c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013940:	2301      	movs	r3, #1
24013942:	e0ea      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24013944:	687b      	ldr	r3, [r7, #4]
24013946:	685b      	ldr	r3, [r3, #4]
24013948:	2b01      	cmp	r3, #1
2401394a:	d107      	bne.n	2401395c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2401394c:	4b30      	ldr	r3, [pc, #192]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401394e:	681b      	ldr	r3, [r3, #0]
24013950:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013954:	2b00      	cmp	r3, #0
24013956:	d109      	bne.n	2401396c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013958:	2301      	movs	r3, #1
2401395a:	e0de      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2401395c:	4b2c      	ldr	r3, [pc, #176]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401395e:	681b      	ldr	r3, [r3, #0]
24013960:	f003 0304 	and.w	r3, r3, #4
24013964:	2b00      	cmp	r3, #0
24013966:	d101      	bne.n	2401396c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013968:	2301      	movs	r3, #1
2401396a:	e0d6      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2401396c:	4b28      	ldr	r3, [pc, #160]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401396e:	691b      	ldr	r3, [r3, #16]
24013970:	f023 0207 	bic.w	r2, r3, #7
24013974:	687b      	ldr	r3, [r7, #4]
24013976:	685b      	ldr	r3, [r3, #4]
24013978:	4925      	ldr	r1, [pc, #148]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401397a:	4313      	orrs	r3, r2
2401397c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2401397e:	f7ee fbe5 	bl	2400214c <HAL_GetTick>
24013982:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24013984:	e00a      	b.n	2401399c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
24013986:	f7ee fbe1 	bl	2400214c <HAL_GetTick>
2401398a:	4602      	mov	r2, r0
2401398c:	697b      	ldr	r3, [r7, #20]
2401398e:	1ad3      	subs	r3, r2, r3
24013990:	f241 3288 	movw	r2, #5000	; 0x1388
24013994:	4293      	cmp	r3, r2
24013996:	d901      	bls.n	2401399c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
24013998:	2303      	movs	r3, #3
2401399a:	e0be      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2401399c:	4b1c      	ldr	r3, [pc, #112]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
2401399e:	691b      	ldr	r3, [r3, #16]
240139a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
240139a4:	687b      	ldr	r3, [r7, #4]
240139a6:	685b      	ldr	r3, [r3, #4]
240139a8:	00db      	lsls	r3, r3, #3
240139aa:	429a      	cmp	r2, r3
240139ac:	d1eb      	bne.n	24013986 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
240139ae:	687b      	ldr	r3, [r7, #4]
240139b0:	681b      	ldr	r3, [r3, #0]
240139b2:	f003 0302 	and.w	r3, r3, #2
240139b6:	2b00      	cmp	r3, #0
240139b8:	d010      	beq.n	240139dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
240139ba:	687b      	ldr	r3, [r7, #4]
240139bc:	68da      	ldr	r2, [r3, #12]
240139be:	4b14      	ldr	r3, [pc, #80]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240139c0:	699b      	ldr	r3, [r3, #24]
240139c2:	f003 030f 	and.w	r3, r3, #15
240139c6:	429a      	cmp	r2, r3
240139c8:	d208      	bcs.n	240139dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240139ca:	4b11      	ldr	r3, [pc, #68]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240139cc:	699b      	ldr	r3, [r3, #24]
240139ce:	f023 020f 	bic.w	r2, r3, #15
240139d2:	687b      	ldr	r3, [r7, #4]
240139d4:	68db      	ldr	r3, [r3, #12]
240139d6:	490e      	ldr	r1, [pc, #56]	; (24013a10 <HAL_RCC_ClockConfig+0x244>)
240139d8:	4313      	orrs	r3, r2
240139da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
240139dc:	4b0b      	ldr	r3, [pc, #44]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240139de:	681b      	ldr	r3, [r3, #0]
240139e0:	f003 030f 	and.w	r3, r3, #15
240139e4:	683a      	ldr	r2, [r7, #0]
240139e6:	429a      	cmp	r2, r3
240139e8:	d214      	bcs.n	24013a14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
240139ea:	4b08      	ldr	r3, [pc, #32]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240139ec:	681b      	ldr	r3, [r3, #0]
240139ee:	f023 020f 	bic.w	r2, r3, #15
240139f2:	4906      	ldr	r1, [pc, #24]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240139f4:	683b      	ldr	r3, [r7, #0]
240139f6:	4313      	orrs	r3, r2
240139f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
240139fa:	4b04      	ldr	r3, [pc, #16]	; (24013a0c <HAL_RCC_ClockConfig+0x240>)
240139fc:	681b      	ldr	r3, [r3, #0]
240139fe:	f003 030f 	and.w	r3, r3, #15
24013a02:	683a      	ldr	r2, [r7, #0]
24013a04:	429a      	cmp	r2, r3
24013a06:	d005      	beq.n	24013a14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24013a08:	2301      	movs	r3, #1
24013a0a:	e086      	b.n	24013b1a <HAL_RCC_ClockConfig+0x34e>
24013a0c:	52002000 	.word	0x52002000
24013a10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24013a14:	687b      	ldr	r3, [r7, #4]
24013a16:	681b      	ldr	r3, [r3, #0]
24013a18:	f003 0304 	and.w	r3, r3, #4
24013a1c:	2b00      	cmp	r3, #0
24013a1e:	d010      	beq.n	24013a42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24013a20:	687b      	ldr	r3, [r7, #4]
24013a22:	691a      	ldr	r2, [r3, #16]
24013a24:	4b3f      	ldr	r3, [pc, #252]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a26:	699b      	ldr	r3, [r3, #24]
24013a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013a2c:	429a      	cmp	r2, r3
24013a2e:	d208      	bcs.n	24013a42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24013a30:	4b3c      	ldr	r3, [pc, #240]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a32:	699b      	ldr	r3, [r3, #24]
24013a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013a38:	687b      	ldr	r3, [r7, #4]
24013a3a:	691b      	ldr	r3, [r3, #16]
24013a3c:	4939      	ldr	r1, [pc, #228]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a3e:	4313      	orrs	r3, r2
24013a40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24013a42:	687b      	ldr	r3, [r7, #4]
24013a44:	681b      	ldr	r3, [r3, #0]
24013a46:	f003 0308 	and.w	r3, r3, #8
24013a4a:	2b00      	cmp	r3, #0
24013a4c:	d010      	beq.n	24013a70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24013a4e:	687b      	ldr	r3, [r7, #4]
24013a50:	695a      	ldr	r2, [r3, #20]
24013a52:	4b34      	ldr	r3, [pc, #208]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a54:	69db      	ldr	r3, [r3, #28]
24013a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013a5a:	429a      	cmp	r2, r3
24013a5c:	d208      	bcs.n	24013a70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24013a5e:	4b31      	ldr	r3, [pc, #196]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a60:	69db      	ldr	r3, [r3, #28]
24013a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013a66:	687b      	ldr	r3, [r7, #4]
24013a68:	695b      	ldr	r3, [r3, #20]
24013a6a:	492e      	ldr	r1, [pc, #184]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a6c:	4313      	orrs	r3, r2
24013a6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24013a70:	687b      	ldr	r3, [r7, #4]
24013a72:	681b      	ldr	r3, [r3, #0]
24013a74:	f003 0310 	and.w	r3, r3, #16
24013a78:	2b00      	cmp	r3, #0
24013a7a:	d010      	beq.n	24013a9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24013a7c:	687b      	ldr	r3, [r7, #4]
24013a7e:	699a      	ldr	r2, [r3, #24]
24013a80:	4b28      	ldr	r3, [pc, #160]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a82:	69db      	ldr	r3, [r3, #28]
24013a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24013a88:	429a      	cmp	r2, r3
24013a8a:	d208      	bcs.n	24013a9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24013a8c:	4b25      	ldr	r3, [pc, #148]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a8e:	69db      	ldr	r3, [r3, #28]
24013a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24013a94:	687b      	ldr	r3, [r7, #4]
24013a96:	699b      	ldr	r3, [r3, #24]
24013a98:	4922      	ldr	r1, [pc, #136]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013a9a:	4313      	orrs	r3, r2
24013a9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24013a9e:	687b      	ldr	r3, [r7, #4]
24013aa0:	681b      	ldr	r3, [r3, #0]
24013aa2:	f003 0320 	and.w	r3, r3, #32
24013aa6:	2b00      	cmp	r3, #0
24013aa8:	d010      	beq.n	24013acc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24013aaa:	687b      	ldr	r3, [r7, #4]
24013aac:	69da      	ldr	r2, [r3, #28]
24013aae:	4b1d      	ldr	r3, [pc, #116]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013ab0:	6a1b      	ldr	r3, [r3, #32]
24013ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013ab6:	429a      	cmp	r2, r3
24013ab8:	d208      	bcs.n	24013acc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
24013aba:	4b1a      	ldr	r3, [pc, #104]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013abc:	6a1b      	ldr	r3, [r3, #32]
24013abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013ac2:	687b      	ldr	r3, [r7, #4]
24013ac4:	69db      	ldr	r3, [r3, #28]
24013ac6:	4917      	ldr	r1, [pc, #92]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013ac8:	4313      	orrs	r3, r2
24013aca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24013acc:	f000 f8be 	bl	24013c4c <HAL_RCC_GetSysClockFreq>
24013ad0:	4602      	mov	r2, r0
24013ad2:	4b14      	ldr	r3, [pc, #80]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013ad4:	699b      	ldr	r3, [r3, #24]
24013ad6:	0a1b      	lsrs	r3, r3, #8
24013ad8:	f003 030f 	and.w	r3, r3, #15
24013adc:	4912      	ldr	r1, [pc, #72]	; (24013b28 <HAL_RCC_ClockConfig+0x35c>)
24013ade:	5ccb      	ldrb	r3, [r1, r3]
24013ae0:	f003 031f 	and.w	r3, r3, #31
24013ae4:	fa22 f303 	lsr.w	r3, r2, r3
24013ae8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24013aea:	4b0e      	ldr	r3, [pc, #56]	; (24013b24 <HAL_RCC_ClockConfig+0x358>)
24013aec:	699b      	ldr	r3, [r3, #24]
24013aee:	f003 030f 	and.w	r3, r3, #15
24013af2:	4a0d      	ldr	r2, [pc, #52]	; (24013b28 <HAL_RCC_ClockConfig+0x35c>)
24013af4:	5cd3      	ldrb	r3, [r2, r3]
24013af6:	f003 031f 	and.w	r3, r3, #31
24013afa:	693a      	ldr	r2, [r7, #16]
24013afc:	fa22 f303 	lsr.w	r3, r2, r3
24013b00:	4a0a      	ldr	r2, [pc, #40]	; (24013b2c <HAL_RCC_ClockConfig+0x360>)
24013b02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24013b04:	4a0a      	ldr	r2, [pc, #40]	; (24013b30 <HAL_RCC_ClockConfig+0x364>)
24013b06:	693b      	ldr	r3, [r7, #16]
24013b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
24013b0a:	4b0a      	ldr	r3, [pc, #40]	; (24013b34 <HAL_RCC_ClockConfig+0x368>)
24013b0c:	681b      	ldr	r3, [r3, #0]
24013b0e:	4618      	mov	r0, r3
24013b10:	f7ee fad2 	bl	240020b8 <HAL_InitTick>
24013b14:	4603      	mov	r3, r0
24013b16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24013b18:	7bfb      	ldrb	r3, [r7, #15]
}
24013b1a:	4618      	mov	r0, r3
24013b1c:	3718      	adds	r7, #24
24013b1e:	46bd      	mov	sp, r7
24013b20:	bd80      	pop	{r7, pc}
24013b22:	bf00      	nop
24013b24:	58024400 	.word	0x58024400
24013b28:	24016f40 	.word	0x24016f40
24013b2c:	240004cc 	.word	0x240004cc
24013b30:	240004c8 	.word	0x240004c8
24013b34:	240004d0 	.word	0x240004d0

24013b38 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24013b38:	b580      	push	{r7, lr}
24013b3a:	b08c      	sub	sp, #48	; 0x30
24013b3c:	af00      	add	r7, sp, #0
24013b3e:	60f8      	str	r0, [r7, #12]
24013b40:	60b9      	str	r1, [r7, #8]
24013b42:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
24013b44:	68fb      	ldr	r3, [r7, #12]
24013b46:	2b00      	cmp	r3, #0
24013b48:	d12a      	bne.n	24013ba0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
24013b4a:	4b2d      	ldr	r3, [pc, #180]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013b50:	4a2b      	ldr	r2, [pc, #172]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013b52:	f043 0301 	orr.w	r3, r3, #1
24013b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24013b5a:	4b29      	ldr	r3, [pc, #164]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013b60:	f003 0301 	and.w	r3, r3, #1
24013b64:	61bb      	str	r3, [r7, #24]
24013b66:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
24013b68:	f44f 7380 	mov.w	r3, #256	; 0x100
24013b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24013b6e:	2302      	movs	r3, #2
24013b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24013b72:	2303      	movs	r3, #3
24013b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24013b76:	2300      	movs	r3, #0
24013b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24013b7a:	2300      	movs	r3, #0
24013b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
24013b7e:	f107 031c 	add.w	r3, r7, #28
24013b82:	4619      	mov	r1, r3
24013b84:	481f      	ldr	r0, [pc, #124]	; (24013c04 <HAL_RCC_MCOConfig+0xcc>)
24013b86:	f7f5 fce7 	bl	24009558 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
24013b8a:	4b1d      	ldr	r3, [pc, #116]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013b8c:	691b      	ldr	r3, [r3, #16]
24013b8e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
24013b92:	68b9      	ldr	r1, [r7, #8]
24013b94:	687b      	ldr	r3, [r7, #4]
24013b96:	430b      	orrs	r3, r1
24013b98:	4919      	ldr	r1, [pc, #100]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013b9a:	4313      	orrs	r3, r2
24013b9c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
24013b9e:	e02a      	b.n	24013bf6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
24013ba0:	4b17      	ldr	r3, [pc, #92]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013ba6:	4a16      	ldr	r2, [pc, #88]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013ba8:	f043 0304 	orr.w	r3, r3, #4
24013bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24013bb0:	4b13      	ldr	r3, [pc, #76]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013bb6:	f003 0304 	and.w	r3, r3, #4
24013bba:	617b      	str	r3, [r7, #20]
24013bbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
24013bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
24013bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24013bc4:	2302      	movs	r3, #2
24013bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24013bc8:	2303      	movs	r3, #3
24013bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24013bcc:	2300      	movs	r3, #0
24013bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24013bd0:	2300      	movs	r3, #0
24013bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24013bd4:	f107 031c 	add.w	r3, r7, #28
24013bd8:	4619      	mov	r1, r3
24013bda:	480b      	ldr	r0, [pc, #44]	; (24013c08 <HAL_RCC_MCOConfig+0xd0>)
24013bdc:	f7f5 fcbc 	bl	24009558 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
24013be0:	4b07      	ldr	r3, [pc, #28]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013be2:	691b      	ldr	r3, [r3, #16]
24013be4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
24013be8:	687b      	ldr	r3, [r7, #4]
24013bea:	01d9      	lsls	r1, r3, #7
24013bec:	68bb      	ldr	r3, [r7, #8]
24013bee:	430b      	orrs	r3, r1
24013bf0:	4903      	ldr	r1, [pc, #12]	; (24013c00 <HAL_RCC_MCOConfig+0xc8>)
24013bf2:	4313      	orrs	r3, r2
24013bf4:	610b      	str	r3, [r1, #16]
}
24013bf6:	bf00      	nop
24013bf8:	3730      	adds	r7, #48	; 0x30
24013bfa:	46bd      	mov	sp, r7
24013bfc:	bd80      	pop	{r7, pc}
24013bfe:	bf00      	nop
24013c00:	58024400 	.word	0x58024400
24013c04:	58020000 	.word	0x58020000
24013c08:	58020800 	.word	0x58020800

24013c0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
24013c0c:	b480      	push	{r7}
24013c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
24013c10:	4b05      	ldr	r3, [pc, #20]	; (24013c28 <HAL_RCC_EnableCSS+0x1c>)
24013c12:	681b      	ldr	r3, [r3, #0]
24013c14:	4a04      	ldr	r2, [pc, #16]	; (24013c28 <HAL_RCC_EnableCSS+0x1c>)
24013c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24013c1a:	6013      	str	r3, [r2, #0]
}
24013c1c:	bf00      	nop
24013c1e:	46bd      	mov	sp, r7
24013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
24013c24:	4770      	bx	lr
24013c26:	bf00      	nop
24013c28:	58024400 	.word	0x58024400

24013c2c <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
24013c2c:	b480      	push	{r7}
24013c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
24013c30:	4b05      	ldr	r3, [pc, #20]	; (24013c48 <HAL_RCC_DisableCSS+0x1c>)
24013c32:	681b      	ldr	r3, [r3, #0]
24013c34:	4a04      	ldr	r2, [pc, #16]	; (24013c48 <HAL_RCC_DisableCSS+0x1c>)
24013c36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
24013c3a:	6013      	str	r3, [r2, #0]
}
24013c3c:	bf00      	nop
24013c3e:	46bd      	mov	sp, r7
24013c40:	f85d 7b04 	ldr.w	r7, [sp], #4
24013c44:	4770      	bx	lr
24013c46:	bf00      	nop
24013c48:	58024400 	.word	0x58024400

24013c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24013c4c:	b480      	push	{r7}
24013c4e:	b089      	sub	sp, #36	; 0x24
24013c50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24013c52:	4bb3      	ldr	r3, [pc, #716]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013c54:	691b      	ldr	r3, [r3, #16]
24013c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013c5a:	2b18      	cmp	r3, #24
24013c5c:	f200 8155 	bhi.w	24013f0a <HAL_RCC_GetSysClockFreq+0x2be>
24013c60:	a201      	add	r2, pc, #4	; (adr r2, 24013c68 <HAL_RCC_GetSysClockFreq+0x1c>)
24013c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24013c66:	bf00      	nop
24013c68:	24013ccd 	.word	0x24013ccd
24013c6c:	24013f0b 	.word	0x24013f0b
24013c70:	24013f0b 	.word	0x24013f0b
24013c74:	24013f0b 	.word	0x24013f0b
24013c78:	24013f0b 	.word	0x24013f0b
24013c7c:	24013f0b 	.word	0x24013f0b
24013c80:	24013f0b 	.word	0x24013f0b
24013c84:	24013f0b 	.word	0x24013f0b
24013c88:	24013cf3 	.word	0x24013cf3
24013c8c:	24013f0b 	.word	0x24013f0b
24013c90:	24013f0b 	.word	0x24013f0b
24013c94:	24013f0b 	.word	0x24013f0b
24013c98:	24013f0b 	.word	0x24013f0b
24013c9c:	24013f0b 	.word	0x24013f0b
24013ca0:	24013f0b 	.word	0x24013f0b
24013ca4:	24013f0b 	.word	0x24013f0b
24013ca8:	24013cf9 	.word	0x24013cf9
24013cac:	24013f0b 	.word	0x24013f0b
24013cb0:	24013f0b 	.word	0x24013f0b
24013cb4:	24013f0b 	.word	0x24013f0b
24013cb8:	24013f0b 	.word	0x24013f0b
24013cbc:	24013f0b 	.word	0x24013f0b
24013cc0:	24013f0b 	.word	0x24013f0b
24013cc4:	24013f0b 	.word	0x24013f0b
24013cc8:	24013cff 	.word	0x24013cff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24013ccc:	4b94      	ldr	r3, [pc, #592]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013cce:	681b      	ldr	r3, [r3, #0]
24013cd0:	f003 0320 	and.w	r3, r3, #32
24013cd4:	2b00      	cmp	r3, #0
24013cd6:	d009      	beq.n	24013cec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24013cd8:	4b91      	ldr	r3, [pc, #580]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013cda:	681b      	ldr	r3, [r3, #0]
24013cdc:	08db      	lsrs	r3, r3, #3
24013cde:	f003 0303 	and.w	r3, r3, #3
24013ce2:	4a90      	ldr	r2, [pc, #576]	; (24013f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013ce4:	fa22 f303 	lsr.w	r3, r2, r3
24013ce8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
24013cea:	e111      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24013cec:	4b8d      	ldr	r3, [pc, #564]	; (24013f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013cee:	61bb      	str	r3, [r7, #24]
    break;
24013cf0:	e10e      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
24013cf2:	4b8d      	ldr	r3, [pc, #564]	; (24013f28 <HAL_RCC_GetSysClockFreq+0x2dc>)
24013cf4:	61bb      	str	r3, [r7, #24]
    break;
24013cf6:	e10b      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
24013cf8:	4b8c      	ldr	r3, [pc, #560]	; (24013f2c <HAL_RCC_GetSysClockFreq+0x2e0>)
24013cfa:	61bb      	str	r3, [r7, #24]
    break;
24013cfc:	e108      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24013cfe:	4b88      	ldr	r3, [pc, #544]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013d02:	f003 0303 	and.w	r3, r3, #3
24013d06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24013d08:	4b85      	ldr	r3, [pc, #532]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013d0c:	091b      	lsrs	r3, r3, #4
24013d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013d12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24013d14:	4b82      	ldr	r3, [pc, #520]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013d18:	f003 0301 	and.w	r3, r3, #1
24013d1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24013d1e:	4b80      	ldr	r3, [pc, #512]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013d22:	08db      	lsrs	r3, r3, #3
24013d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
24013d28:	68fa      	ldr	r2, [r7, #12]
24013d2a:	fb02 f303 	mul.w	r3, r2, r3
24013d2e:	ee07 3a90 	vmov	s15, r3
24013d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013d36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
24013d3a:	693b      	ldr	r3, [r7, #16]
24013d3c:	2b00      	cmp	r3, #0
24013d3e:	f000 80e1 	beq.w	24013f04 <HAL_RCC_GetSysClockFreq+0x2b8>
24013d42:	697b      	ldr	r3, [r7, #20]
24013d44:	2b02      	cmp	r3, #2
24013d46:	f000 8083 	beq.w	24013e50 <HAL_RCC_GetSysClockFreq+0x204>
24013d4a:	697b      	ldr	r3, [r7, #20]
24013d4c:	2b02      	cmp	r3, #2
24013d4e:	f200 80a1 	bhi.w	24013e94 <HAL_RCC_GetSysClockFreq+0x248>
24013d52:	697b      	ldr	r3, [r7, #20]
24013d54:	2b00      	cmp	r3, #0
24013d56:	d003      	beq.n	24013d60 <HAL_RCC_GetSysClockFreq+0x114>
24013d58:	697b      	ldr	r3, [r7, #20]
24013d5a:	2b01      	cmp	r3, #1
24013d5c:	d056      	beq.n	24013e0c <HAL_RCC_GetSysClockFreq+0x1c0>
24013d5e:	e099      	b.n	24013e94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24013d60:	4b6f      	ldr	r3, [pc, #444]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d62:	681b      	ldr	r3, [r3, #0]
24013d64:	f003 0320 	and.w	r3, r3, #32
24013d68:	2b00      	cmp	r3, #0
24013d6a:	d02d      	beq.n	24013dc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24013d6c:	4b6c      	ldr	r3, [pc, #432]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d6e:	681b      	ldr	r3, [r3, #0]
24013d70:	08db      	lsrs	r3, r3, #3
24013d72:	f003 0303 	and.w	r3, r3, #3
24013d76:	4a6b      	ldr	r2, [pc, #428]	; (24013f24 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013d78:	fa22 f303 	lsr.w	r3, r2, r3
24013d7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013d7e:	687b      	ldr	r3, [r7, #4]
24013d80:	ee07 3a90 	vmov	s15, r3
24013d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013d88:	693b      	ldr	r3, [r7, #16]
24013d8a:	ee07 3a90 	vmov	s15, r3
24013d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013d96:	4b62      	ldr	r3, [pc, #392]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013d9e:	ee07 3a90 	vmov	s15, r3
24013da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013da6:	ed97 6a02 	vldr	s12, [r7, #8]
24013daa:	eddf 5a61 	vldr	s11, [pc, #388]	; 24013f30 <HAL_RCC_GetSysClockFreq+0x2e4>
24013dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
24013dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
24013dc6:	e087      	b.n	24013ed8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013dc8:	693b      	ldr	r3, [r7, #16]
24013dca:	ee07 3a90 	vmov	s15, r3
24013dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013dd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 24013f34 <HAL_RCC_GetSysClockFreq+0x2e8>
24013dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013dda:	4b51      	ldr	r3, [pc, #324]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013de2:	ee07 3a90 	vmov	s15, r3
24013de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013dea:	ed97 6a02 	vldr	s12, [r7, #8]
24013dee:	eddf 5a50 	vldr	s11, [pc, #320]	; 24013f30 <HAL_RCC_GetSysClockFreq+0x2e4>
24013df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013e02:	ee67 7a27 	vmul.f32	s15, s14, s15
24013e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013e0a:	e065      	b.n	24013ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013e0c:	693b      	ldr	r3, [r7, #16]
24013e0e:	ee07 3a90 	vmov	s15, r3
24013e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013e16:	eddf 6a48 	vldr	s13, [pc, #288]	; 24013f38 <HAL_RCC_GetSysClockFreq+0x2ec>
24013e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013e1e:	4b40      	ldr	r3, [pc, #256]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013e26:	ee07 3a90 	vmov	s15, r3
24013e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013e2e:	ed97 6a02 	vldr	s12, [r7, #8]
24013e32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24013f30 <HAL_RCC_GetSysClockFreq+0x2e4>
24013e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013e46:	ee67 7a27 	vmul.f32	s15, s14, s15
24013e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013e4e:	e043      	b.n	24013ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013e50:	693b      	ldr	r3, [r7, #16]
24013e52:	ee07 3a90 	vmov	s15, r3
24013e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013e5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 24013f3c <HAL_RCC_GetSysClockFreq+0x2f0>
24013e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013e62:	4b2f      	ldr	r3, [pc, #188]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013e6a:	ee07 3a90 	vmov	s15, r3
24013e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013e72:	ed97 6a02 	vldr	s12, [r7, #8]
24013e76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24013f30 <HAL_RCC_GetSysClockFreq+0x2e4>
24013e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
24013e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013e92:	e021      	b.n	24013ed8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013e94:	693b      	ldr	r3, [r7, #16]
24013e96:	ee07 3a90 	vmov	s15, r3
24013e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013e9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 24013f38 <HAL_RCC_GetSysClockFreq+0x2ec>
24013ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013ea6:	4b1e      	ldr	r3, [pc, #120]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013eae:	ee07 3a90 	vmov	s15, r3
24013eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013eb6:	ed97 6a02 	vldr	s12, [r7, #8]
24013eba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24013f30 <HAL_RCC_GetSysClockFreq+0x2e4>
24013ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013ece:	ee67 7a27 	vmul.f32	s15, s14, s15
24013ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013ed6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24013ed8:	4b11      	ldr	r3, [pc, #68]	; (24013f20 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013edc:	0a5b      	lsrs	r3, r3, #9
24013ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24013ee2:	3301      	adds	r3, #1
24013ee4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24013ee6:	683b      	ldr	r3, [r7, #0]
24013ee8:	ee07 3a90 	vmov	s15, r3
24013eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24013ef0:	edd7 6a07 	vldr	s13, [r7, #28]
24013ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
24013ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013efc:	ee17 3a90 	vmov	r3, s15
24013f00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
24013f02:	e005      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
24013f04:	2300      	movs	r3, #0
24013f06:	61bb      	str	r3, [r7, #24]
    break;
24013f08:	e002      	b.n	24013f10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
24013f0a:	4b07      	ldr	r3, [pc, #28]	; (24013f28 <HAL_RCC_GetSysClockFreq+0x2dc>)
24013f0c:	61bb      	str	r3, [r7, #24]
    break;
24013f0e:	bf00      	nop
  }

  return sysclockfreq;
24013f10:	69bb      	ldr	r3, [r7, #24]
}
24013f12:	4618      	mov	r0, r3
24013f14:	3724      	adds	r7, #36	; 0x24
24013f16:	46bd      	mov	sp, r7
24013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
24013f1c:	4770      	bx	lr
24013f1e:	bf00      	nop
24013f20:	58024400 	.word	0x58024400
24013f24:	03d09000 	.word	0x03d09000
24013f28:	003d0900 	.word	0x003d0900
24013f2c:	016e3600 	.word	0x016e3600
24013f30:	46000000 	.word	0x46000000
24013f34:	4c742400 	.word	0x4c742400
24013f38:	4a742400 	.word	0x4a742400
24013f3c:	4bb71b00 	.word	0x4bb71b00

24013f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24013f40:	b580      	push	{r7, lr}
24013f42:	b082      	sub	sp, #8
24013f44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24013f46:	f7ff fe81 	bl	24013c4c <HAL_RCC_GetSysClockFreq>
24013f4a:	4602      	mov	r2, r0
24013f4c:	4b10      	ldr	r3, [pc, #64]	; (24013f90 <HAL_RCC_GetHCLKFreq+0x50>)
24013f4e:	699b      	ldr	r3, [r3, #24]
24013f50:	0a1b      	lsrs	r3, r3, #8
24013f52:	f003 030f 	and.w	r3, r3, #15
24013f56:	490f      	ldr	r1, [pc, #60]	; (24013f94 <HAL_RCC_GetHCLKFreq+0x54>)
24013f58:	5ccb      	ldrb	r3, [r1, r3]
24013f5a:	f003 031f 	and.w	r3, r3, #31
24013f5e:	fa22 f303 	lsr.w	r3, r2, r3
24013f62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24013f64:	4b0a      	ldr	r3, [pc, #40]	; (24013f90 <HAL_RCC_GetHCLKFreq+0x50>)
24013f66:	699b      	ldr	r3, [r3, #24]
24013f68:	f003 030f 	and.w	r3, r3, #15
24013f6c:	4a09      	ldr	r2, [pc, #36]	; (24013f94 <HAL_RCC_GetHCLKFreq+0x54>)
24013f6e:	5cd3      	ldrb	r3, [r2, r3]
24013f70:	f003 031f 	and.w	r3, r3, #31
24013f74:	687a      	ldr	r2, [r7, #4]
24013f76:	fa22 f303 	lsr.w	r3, r2, r3
24013f7a:	4a07      	ldr	r2, [pc, #28]	; (24013f98 <HAL_RCC_GetHCLKFreq+0x58>)
24013f7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24013f7e:	4a07      	ldr	r2, [pc, #28]	; (24013f9c <HAL_RCC_GetHCLKFreq+0x5c>)
24013f80:	687b      	ldr	r3, [r7, #4]
24013f82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
24013f84:	4b04      	ldr	r3, [pc, #16]	; (24013f98 <HAL_RCC_GetHCLKFreq+0x58>)
24013f86:	681b      	ldr	r3, [r3, #0]
}
24013f88:	4618      	mov	r0, r3
24013f8a:	3708      	adds	r7, #8
24013f8c:	46bd      	mov	sp, r7
24013f8e:	bd80      	pop	{r7, pc}
24013f90:	58024400 	.word	0x58024400
24013f94:	24016f40 	.word	0x24016f40
24013f98:	240004cc 	.word	0x240004cc
24013f9c:	240004c8 	.word	0x240004c8

24013fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24013fa0:	b580      	push	{r7, lr}
24013fa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24013fa4:	f7ff ffcc 	bl	24013f40 <HAL_RCC_GetHCLKFreq>
24013fa8:	4602      	mov	r2, r0
24013faa:	4b06      	ldr	r3, [pc, #24]	; (24013fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
24013fac:	69db      	ldr	r3, [r3, #28]
24013fae:	091b      	lsrs	r3, r3, #4
24013fb0:	f003 0307 	and.w	r3, r3, #7
24013fb4:	4904      	ldr	r1, [pc, #16]	; (24013fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
24013fb6:	5ccb      	ldrb	r3, [r1, r3]
24013fb8:	f003 031f 	and.w	r3, r3, #31
24013fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24013fc0:	4618      	mov	r0, r3
24013fc2:	bd80      	pop	{r7, pc}
24013fc4:	58024400 	.word	0x58024400
24013fc8:	24016f40 	.word	0x24016f40

24013fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
24013fcc:	b580      	push	{r7, lr}
24013fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
24013fd0:	f7ff ffb6 	bl	24013f40 <HAL_RCC_GetHCLKFreq>
24013fd4:	4602      	mov	r2, r0
24013fd6:	4b06      	ldr	r3, [pc, #24]	; (24013ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
24013fd8:	69db      	ldr	r3, [r3, #28]
24013fda:	0a1b      	lsrs	r3, r3, #8
24013fdc:	f003 0307 	and.w	r3, r3, #7
24013fe0:	4904      	ldr	r1, [pc, #16]	; (24013ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
24013fe2:	5ccb      	ldrb	r3, [r1, r3]
24013fe4:	f003 031f 	and.w	r3, r3, #31
24013fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
24013fec:	4618      	mov	r0, r3
24013fee:	bd80      	pop	{r7, pc}
24013ff0:	58024400 	.word	0x58024400
24013ff4:	24016f40 	.word	0x24016f40

24013ff8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24013ff8:	b580      	push	{r7, lr}
24013ffa:	b082      	sub	sp, #8
24013ffc:	af00      	add	r7, sp, #0
24013ffe:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
24014000:	687b      	ldr	r3, [r7, #4]
24014002:	223f      	movs	r2, #63	; 0x3f
24014004:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
24014006:	4b72      	ldr	r3, [pc, #456]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014008:	681b      	ldr	r3, [r3, #0]
2401400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2401400e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24014012:	d104      	bne.n	2401401e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
24014014:	687b      	ldr	r3, [r7, #4]
24014016:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
2401401a:	605a      	str	r2, [r3, #4]
2401401c:	e00e      	b.n	2401403c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
2401401e:	4b6c      	ldr	r3, [pc, #432]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014020:	681b      	ldr	r3, [r3, #0]
24014022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24014026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2401402a:	d104      	bne.n	24014036 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
2401402c:	687b      	ldr	r3, [r7, #4]
2401402e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24014032:	605a      	str	r2, [r3, #4]
24014034:	e002      	b.n	2401403c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
24014036:	687b      	ldr	r3, [r7, #4]
24014038:	2200      	movs	r2, #0
2401403a:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

   /* Get the CSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_CSION) == RCC_CR_CSION)
2401403c:	4b64      	ldr	r3, [pc, #400]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
2401403e:	681b      	ldr	r3, [r3, #0]
24014040:	f003 0380 	and.w	r3, r3, #128	; 0x80
24014044:	2b80      	cmp	r3, #128	; 0x80
24014046:	d103      	bne.n	24014050 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
24014048:	687b      	ldr	r3, [r7, #4]
2401404a:	2280      	movs	r2, #128	; 0x80
2401404c:	61da      	str	r2, [r3, #28]
2401404e:	e002      	b.n	24014056 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
24014050:	687b      	ldr	r3, [r7, #4]
24014052:	2200      	movs	r2, #0
24014054:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
24014056:	f7ee f913 	bl	24002280 <HAL_GetREVID>
2401405a:	4603      	mov	r3, r0
2401405c:	f241 0203 	movw	r2, #4099	; 0x1003
24014060:	4293      	cmp	r3, r2
24014062:	d807      	bhi.n	24014074 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
24014064:	4b5a      	ldr	r3, [pc, #360]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014066:	685b      	ldr	r3, [r3, #4]
24014068:	0e9b      	lsrs	r3, r3, #26
2401406a:	f003 021f 	and.w	r2, r3, #31
2401406e:	687b      	ldr	r3, [r7, #4]
24014070:	621a      	str	r2, [r3, #32]
24014072:	e006      	b.n	24014082 <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
24014074:	4b56      	ldr	r3, [pc, #344]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014076:	68db      	ldr	r3, [r3, #12]
24014078:	0e1b      	lsrs	r3, r3, #24
2401407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401407e:	687b      	ldr	r3, [r7, #4]
24014080:	621a      	str	r2, [r3, #32]
#else
 RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
24014082:	4b53      	ldr	r3, [pc, #332]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014084:	681b      	ldr	r3, [r3, #0]
24014086:	f003 0301 	and.w	r3, r3, #1
2401408a:	2b01      	cmp	r3, #1
2401408c:	d103      	bne.n	24014096 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
2401408e:	687b      	ldr	r3, [r7, #4]
24014090:	2201      	movs	r2, #1
24014092:	60da      	str	r2, [r3, #12]
24014094:	e002      	b.n	2401409c <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
24014096:	687b      	ldr	r3, [r7, #4]
24014098:	2200      	movs	r2, #0
2401409a:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
2401409c:	f7ee f8f0 	bl	24002280 <HAL_GetREVID>
240140a0:	4603      	mov	r3, r0
240140a2:	f241 0203 	movw	r2, #4099	; 0x1003
240140a6:	4293      	cmp	r3, r2
240140a8:	d807      	bhi.n	240140ba <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
240140aa:	4b49      	ldr	r3, [pc, #292]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240140ac:	685b      	ldr	r3, [r3, #4]
240140ae:	0b1b      	lsrs	r3, r3, #12
240140b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240140b4:	687b      	ldr	r3, [r7, #4]
240140b6:	611a      	str	r2, [r3, #16]
240140b8:	e006      	b.n	240140c8 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
240140ba:	4b45      	ldr	r3, [pc, #276]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240140bc:	685b      	ldr	r3, [r3, #4]
240140be:	0e1b      	lsrs	r3, r3, #24
240140c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
240140c4:	687b      	ldr	r3, [r7, #4]
240140c6:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
240140c8:	4b41      	ldr	r3, [pc, #260]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240140ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240140cc:	f003 0304 	and.w	r3, r3, #4
240140d0:	2b04      	cmp	r3, #4
240140d2:	d103      	bne.n	240140dc <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
240140d4:	687b      	ldr	r3, [r7, #4]
240140d6:	2205      	movs	r2, #5
240140d8:	609a      	str	r2, [r3, #8]
240140da:	e00c      	b.n	240140f6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
240140dc:	4b3c      	ldr	r3, [pc, #240]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240140de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240140e0:	f003 0301 	and.w	r3, r3, #1
240140e4:	2b01      	cmp	r3, #1
240140e6:	d103      	bne.n	240140f0 <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
240140e8:	687b      	ldr	r3, [r7, #4]
240140ea:	2201      	movs	r2, #1
240140ec:	609a      	str	r2, [r3, #8]
240140ee:	e002      	b.n	240140f6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
240140f0:	687b      	ldr	r3, [r7, #4]
240140f2:	2200      	movs	r2, #0
240140f4:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
240140f6:	4b36      	ldr	r3, [pc, #216]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240140f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240140fa:	f003 0301 	and.w	r3, r3, #1
240140fe:	2b01      	cmp	r3, #1
24014100:	d103      	bne.n	2401410a <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
24014102:	687b      	ldr	r3, [r7, #4]
24014104:	2201      	movs	r2, #1
24014106:	615a      	str	r2, [r3, #20]
24014108:	e002      	b.n	24014110 <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
2401410a:	687b      	ldr	r3, [r7, #4]
2401410c:	2200      	movs	r2, #0
2401410e:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
24014110:	4b2f      	ldr	r3, [pc, #188]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014112:	681b      	ldr	r3, [r3, #0]
24014114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24014118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2401411c:	d103      	bne.n	24014126 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
2401411e:	687b      	ldr	r3, [r7, #4]
24014120:	2201      	movs	r2, #1
24014122:	619a      	str	r2, [r3, #24]
24014124:	e002      	b.n	2401412c <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
24014126:	687b      	ldr	r3, [r7, #4]
24014128:	2200      	movs	r2, #0
2401412a:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
2401412c:	4b28      	ldr	r3, [pc, #160]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
2401412e:	681b      	ldr	r3, [r3, #0]
24014130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24014134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24014138:	d103      	bne.n	24014142 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
2401413a:	687b      	ldr	r3, [r7, #4]
2401413c:	2202      	movs	r2, #2
2401413e:	625a      	str	r2, [r3, #36]	; 0x24
24014140:	e002      	b.n	24014148 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
24014142:	687b      	ldr	r3, [r7, #4]
24014144:	2201      	movs	r2, #1
24014146:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24014148:	4b21      	ldr	r3, [pc, #132]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
2401414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401414c:	f003 0203 	and.w	r2, r3, #3
24014150:	687b      	ldr	r3, [r7, #4]
24014152:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> RCC_PLLCKSELR_DIVM1_Pos);
24014154:	4b1e      	ldr	r3, [pc, #120]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014158:	091b      	lsrs	r3, r3, #4
2401415a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401415e:	687b      	ldr	r3, [r7, #4]
24014160:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos)+ 1U;
24014162:	4b1b      	ldr	r3, [pc, #108]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014166:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401416a:	1c5a      	adds	r2, r3, #1
2401416c:	687b      	ldr	r3, [r7, #4]
2401416e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos)+ 1U;
24014170:	4b17      	ldr	r3, [pc, #92]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014174:	0e1b      	lsrs	r3, r3, #24
24014176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401417a:	1c5a      	adds	r2, r3, #1
2401417c:	687b      	ldr	r3, [r7, #4]
2401417e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos)+ 1U;
24014180:	4b13      	ldr	r3, [pc, #76]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014184:	0a5b      	lsrs	r3, r3, #9
24014186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401418a:	1c5a      	adds	r2, r3, #1
2401418c:	687b      	ldr	r3, [r7, #4]
2401418e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos)+ 1U;
24014190:	4b0f      	ldr	r3, [pc, #60]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
24014192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014194:	0c1b      	lsrs	r3, r3, #16
24014196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401419a:	1c5a      	adds	r2, r3, #1
2401419c:	687b      	ldr	r3, [r7, #4]
2401419e:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
240141a0:	4b0b      	ldr	r3, [pc, #44]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240141a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240141a4:	f003 020c 	and.w	r2, r3, #12
240141a8:	687b      	ldr	r3, [r7, #4]
240141aa:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
240141ac:	4b08      	ldr	r3, [pc, #32]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240141ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240141b0:	085b      	lsrs	r3, r3, #1
240141b2:	f003 0201 	and.w	r2, r3, #1
240141b6:	687b      	ldr	r3, [r7, #4]
240141b8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
240141ba:	4b05      	ldr	r3, [pc, #20]	; (240141d0 <HAL_RCC_GetOscConfig+0x1d8>)
240141bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240141be:	08db      	lsrs	r3, r3, #3
240141c0:	f3c3 020c 	ubfx	r2, r3, #0, #13
240141c4:	687b      	ldr	r3, [r7, #4]
240141c6:	649a      	str	r2, [r3, #72]	; 0x48
}
240141c8:	bf00      	nop
240141ca:	3708      	adds	r7, #8
240141cc:	46bd      	mov	sp, r7
240141ce:	bd80      	pop	{r7, pc}
240141d0:	58024400 	.word	0x58024400

240141d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
240141d4:	b480      	push	{r7}
240141d6:	b083      	sub	sp, #12
240141d8:	af00      	add	r7, sp, #0
240141da:	6078      	str	r0, [r7, #4]
240141dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
240141de:	687b      	ldr	r3, [r7, #4]
240141e0:	223f      	movs	r2, #63	; 0x3f
240141e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
240141e4:	4b1a      	ldr	r3, [pc, #104]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
240141e6:	691b      	ldr	r3, [r3, #16]
240141e8:	f003 0207 	and.w	r2, r3, #7
240141ec:	687b      	ldr	r3, [r7, #4]
240141ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
240141f0:	4b17      	ldr	r3, [pc, #92]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
240141f2:	699b      	ldr	r3, [r3, #24]
240141f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
240141f8:	687b      	ldr	r3, [r7, #4]
240141fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
240141fc:	4b14      	ldr	r3, [pc, #80]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
240141fe:	699b      	ldr	r3, [r3, #24]
24014200:	f003 020f 	and.w	r2, r3, #15
24014204:	687b      	ldr	r3, [r7, #4]
24014206:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
24014208:	4b11      	ldr	r3, [pc, #68]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
2401420a:	699b      	ldr	r3, [r3, #24]
2401420c:	f003 0270 	and.w	r2, r3, #112	; 0x70
24014210:	687b      	ldr	r3, [r7, #4]
24014212:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
24014214:	4b0e      	ldr	r3, [pc, #56]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
24014216:	69db      	ldr	r3, [r3, #28]
24014218:	f003 0270 	and.w	r2, r3, #112	; 0x70
2401421c:	687b      	ldr	r3, [r7, #4]
2401421e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
24014220:	4b0b      	ldr	r3, [pc, #44]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
24014222:	69db      	ldr	r3, [r3, #28]
24014224:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
24014228:	687b      	ldr	r3, [r7, #4]
2401422a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
2401422c:	4b08      	ldr	r3, [pc, #32]	; (24014250 <HAL_RCC_GetClockConfig+0x7c>)
2401422e:	6a1b      	ldr	r3, [r3, #32]
24014230:	f003 0270 	and.w	r2, r3, #112	; 0x70
24014234:	687b      	ldr	r3, [r7, #4]
24014236:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
24014238:	4b06      	ldr	r3, [pc, #24]	; (24014254 <HAL_RCC_GetClockConfig+0x80>)
2401423a:	681b      	ldr	r3, [r3, #0]
2401423c:	f003 020f 	and.w	r2, r3, #15
24014240:	683b      	ldr	r3, [r7, #0]
24014242:	601a      	str	r2, [r3, #0]
}
24014244:	bf00      	nop
24014246:	370c      	adds	r7, #12
24014248:	46bd      	mov	sp, r7
2401424a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401424e:	4770      	bx	lr
24014250:	58024400 	.word	0x58024400
24014254:	52002000 	.word	0x52002000

24014258 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
24014258:	b580      	push	{r7, lr}
2401425a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
2401425c:	4b07      	ldr	r3, [pc, #28]	; (2401427c <HAL_RCC_NMI_IRQHandler+0x24>)
2401425e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24014264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24014268:	d105      	bne.n	24014276 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
2401426a:	f000 f809 	bl	24014280 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
2401426e:	4b03      	ldr	r3, [pc, #12]	; (2401427c <HAL_RCC_NMI_IRQHandler+0x24>)
24014270:	f44f 6280 	mov.w	r2, #1024	; 0x400
24014274:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
24014276:	bf00      	nop
24014278:	bd80      	pop	{r7, pc}
2401427a:	bf00      	nop
2401427c:	58024400 	.word	0x58024400

24014280 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
24014280:	b480      	push	{r7}
24014282:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
24014284:	bf00      	nop
24014286:	46bd      	mov	sp, r7
24014288:	f85d 7b04 	ldr.w	r7, [sp], #4
2401428c:	4770      	bx	lr
	...

24014290 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24014290:	b580      	push	{r7, lr}
24014292:	b086      	sub	sp, #24
24014294:	af00      	add	r7, sp, #0
24014296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24014298:	2300      	movs	r3, #0
2401429a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2401429c:	2300      	movs	r3, #0
2401429e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
240142a0:	687b      	ldr	r3, [r7, #4]
240142a2:	681b      	ldr	r3, [r3, #0]
240142a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240142a8:	2b00      	cmp	r3, #0
240142aa:	d03f      	beq.n	2401432c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
240142ac:	687b      	ldr	r3, [r7, #4]
240142ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240142b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240142b4:	d02a      	beq.n	2401430c <HAL_RCCEx_PeriphCLKConfig+0x7c>
240142b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240142ba:	d824      	bhi.n	24014306 <HAL_RCCEx_PeriphCLKConfig+0x76>
240142bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240142c0:	d018      	beq.n	240142f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
240142c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240142c6:	d81e      	bhi.n	24014306 <HAL_RCCEx_PeriphCLKConfig+0x76>
240142c8:	2b00      	cmp	r3, #0
240142ca:	d003      	beq.n	240142d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
240142cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240142d0:	d007      	beq.n	240142e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
240142d2:	e018      	b.n	24014306 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240142d4:	4ba3      	ldr	r3, [pc, #652]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240142d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240142d8:	4aa2      	ldr	r2, [pc, #648]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240142da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240142de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
240142e0:	e015      	b.n	2401430e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
240142e2:	687b      	ldr	r3, [r7, #4]
240142e4:	3304      	adds	r3, #4
240142e6:	2102      	movs	r1, #2
240142e8:	4618      	mov	r0, r3
240142ea:	f002 fbbf 	bl	24016a6c <RCCEx_PLL2_Config>
240142ee:	4603      	mov	r3, r0
240142f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
240142f2:	e00c      	b.n	2401430e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
240142f4:	687b      	ldr	r3, [r7, #4]
240142f6:	3324      	adds	r3, #36	; 0x24
240142f8:	2102      	movs	r1, #2
240142fa:	4618      	mov	r0, r3
240142fc:	f002 fc68 	bl	24016bd0 <RCCEx_PLL3_Config>
24014300:	4603      	mov	r3, r0
24014302:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24014304:	e003      	b.n	2401430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014306:	2301      	movs	r3, #1
24014308:	75fb      	strb	r3, [r7, #23]
      break;
2401430a:	e000      	b.n	2401430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
2401430c:	bf00      	nop
    }

    if(ret == HAL_OK)
2401430e:	7dfb      	ldrb	r3, [r7, #23]
24014310:	2b00      	cmp	r3, #0
24014312:	d109      	bne.n	24014328 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24014314:	4b93      	ldr	r3, [pc, #588]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2401431c:	687b      	ldr	r3, [r7, #4]
2401431e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014320:	4990      	ldr	r1, [pc, #576]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014322:	4313      	orrs	r3, r2
24014324:	650b      	str	r3, [r1, #80]	; 0x50
24014326:	e001      	b.n	2401432c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014328:	7dfb      	ldrb	r3, [r7, #23]
2401432a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2401432c:	687b      	ldr	r3, [r7, #4]
2401432e:	681b      	ldr	r3, [r3, #0]
24014330:	f403 7380 	and.w	r3, r3, #256	; 0x100
24014334:	2b00      	cmp	r3, #0
24014336:	d03d      	beq.n	240143b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
24014338:	687b      	ldr	r3, [r7, #4]
2401433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401433c:	2b04      	cmp	r3, #4
2401433e:	d826      	bhi.n	2401438e <HAL_RCCEx_PeriphCLKConfig+0xfe>
24014340:	a201      	add	r2, pc, #4	; (adr r2, 24014348 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
24014342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014346:	bf00      	nop
24014348:	2401435d 	.word	0x2401435d
2401434c:	2401436b 	.word	0x2401436b
24014350:	2401437d 	.word	0x2401437d
24014354:	24014395 	.word	0x24014395
24014358:	24014395 	.word	0x24014395
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401435c:	4b81      	ldr	r3, [pc, #516]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014360:	4a80      	ldr	r2, [pc, #512]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014368:	e015      	b.n	24014396 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2401436a:	687b      	ldr	r3, [r7, #4]
2401436c:	3304      	adds	r3, #4
2401436e:	2100      	movs	r1, #0
24014370:	4618      	mov	r0, r3
24014372:	f002 fb7b 	bl	24016a6c <RCCEx_PLL2_Config>
24014376:	4603      	mov	r3, r0
24014378:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2401437a:	e00c      	b.n	24014396 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2401437c:	687b      	ldr	r3, [r7, #4]
2401437e:	3324      	adds	r3, #36	; 0x24
24014380:	2100      	movs	r1, #0
24014382:	4618      	mov	r0, r3
24014384:	f002 fc24 	bl	24016bd0 <RCCEx_PLL3_Config>
24014388:	4603      	mov	r3, r0
2401438a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2401438c:	e003      	b.n	24014396 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2401438e:	2301      	movs	r3, #1
24014390:	75fb      	strb	r3, [r7, #23]
      break;
24014392:	e000      	b.n	24014396 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
24014394:	bf00      	nop
    }

    if(ret == HAL_OK)
24014396:	7dfb      	ldrb	r3, [r7, #23]
24014398:	2b00      	cmp	r3, #0
2401439a:	d109      	bne.n	240143b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2401439c:	4b71      	ldr	r3, [pc, #452]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240143a0:	f023 0207 	bic.w	r2, r3, #7
240143a4:	687b      	ldr	r3, [r7, #4]
240143a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240143a8:	496e      	ldr	r1, [pc, #440]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240143aa:	4313      	orrs	r3, r2
240143ac:	650b      	str	r3, [r1, #80]	; 0x50
240143ae:	e001      	b.n	240143b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
240143b0:	7dfb      	ldrb	r3, [r7, #23]
240143b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240143b4:	687b      	ldr	r3, [r7, #4]
240143b6:	681b      	ldr	r3, [r3, #0]
240143b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
240143bc:	2b00      	cmp	r3, #0
240143be:	d042      	beq.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
240143c0:	687b      	ldr	r3, [r7, #4]
240143c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240143c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240143c8:	d02b      	beq.n	24014422 <HAL_RCCEx_PeriphCLKConfig+0x192>
240143ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240143ce:	d825      	bhi.n	2401441c <HAL_RCCEx_PeriphCLKConfig+0x18c>
240143d0:	2bc0      	cmp	r3, #192	; 0xc0
240143d2:	d028      	beq.n	24014426 <HAL_RCCEx_PeriphCLKConfig+0x196>
240143d4:	2bc0      	cmp	r3, #192	; 0xc0
240143d6:	d821      	bhi.n	2401441c <HAL_RCCEx_PeriphCLKConfig+0x18c>
240143d8:	2b80      	cmp	r3, #128	; 0x80
240143da:	d016      	beq.n	2401440a <HAL_RCCEx_PeriphCLKConfig+0x17a>
240143dc:	2b80      	cmp	r3, #128	; 0x80
240143de:	d81d      	bhi.n	2401441c <HAL_RCCEx_PeriphCLKConfig+0x18c>
240143e0:	2b00      	cmp	r3, #0
240143e2:	d002      	beq.n	240143ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
240143e4:	2b40      	cmp	r3, #64	; 0x40
240143e6:	d007      	beq.n	240143f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
240143e8:	e018      	b.n	2401441c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240143ea:	4b5e      	ldr	r3, [pc, #376]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240143ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240143ee:	4a5d      	ldr	r2, [pc, #372]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240143f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240143f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
240143f6:	e017      	b.n	24014428 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240143f8:	687b      	ldr	r3, [r7, #4]
240143fa:	3304      	adds	r3, #4
240143fc:	2100      	movs	r1, #0
240143fe:	4618      	mov	r0, r3
24014400:	f002 fb34 	bl	24016a6c <RCCEx_PLL2_Config>
24014404:	4603      	mov	r3, r0
24014406:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24014408:	e00e      	b.n	24014428 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2401440a:	687b      	ldr	r3, [r7, #4]
2401440c:	3324      	adds	r3, #36	; 0x24
2401440e:	2100      	movs	r1, #0
24014410:	4618      	mov	r0, r3
24014412:	f002 fbdd 	bl	24016bd0 <RCCEx_PLL3_Config>
24014416:	4603      	mov	r3, r0
24014418:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
2401441a:	e005      	b.n	24014428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2401441c:	2301      	movs	r3, #1
2401441e:	75fb      	strb	r3, [r7, #23]
      break;
24014420:	e002      	b.n	24014428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
24014422:	bf00      	nop
24014424:	e000      	b.n	24014428 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
24014426:	bf00      	nop
    }

    if(ret == HAL_OK)
24014428:	7dfb      	ldrb	r3, [r7, #23]
2401442a:	2b00      	cmp	r3, #0
2401442c:	d109      	bne.n	24014442 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
2401442e:	4b4d      	ldr	r3, [pc, #308]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014432:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
24014436:	687b      	ldr	r3, [r7, #4]
24014438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401443a:	494a      	ldr	r1, [pc, #296]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401443c:	4313      	orrs	r3, r2
2401443e:	650b      	str	r3, [r1, #80]	; 0x50
24014440:	e001      	b.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014442:	7dfb      	ldrb	r3, [r7, #23]
24014444:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24014446:	687b      	ldr	r3, [r7, #4]
24014448:	681b      	ldr	r3, [r3, #0]
2401444a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2401444e:	2b00      	cmp	r3, #0
24014450:	d049      	beq.n	240144e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
24014452:	687b      	ldr	r3, [r7, #4]
24014454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24014458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401445c:	d030      	beq.n	240144c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
2401445e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24014462:	d82a      	bhi.n	240144ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24014468:	d02c      	beq.n	240144c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
2401446a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2401446e:	d824      	bhi.n	240144ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24014474:	d018      	beq.n	240144a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
24014476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2401447a:	d81e      	bhi.n	240144ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
2401447c:	2b00      	cmp	r3, #0
2401447e:	d003      	beq.n	24014488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24014480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014484:	d007      	beq.n	24014496 <HAL_RCCEx_PeriphCLKConfig+0x206>
24014486:	e018      	b.n	240144ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014488:	4b36      	ldr	r3, [pc, #216]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401448c:	4a35      	ldr	r2, [pc, #212]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401448e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014494:	e017      	b.n	240144c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014496:	687b      	ldr	r3, [r7, #4]
24014498:	3304      	adds	r3, #4
2401449a:	2100      	movs	r1, #0
2401449c:	4618      	mov	r0, r3
2401449e:	f002 fae5 	bl	24016a6c <RCCEx_PLL2_Config>
240144a2:	4603      	mov	r3, r0
240144a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
240144a6:	e00e      	b.n	240144c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
240144a8:	687b      	ldr	r3, [r7, #4]
240144aa:	3324      	adds	r3, #36	; 0x24
240144ac:	2100      	movs	r1, #0
240144ae:	4618      	mov	r0, r3
240144b0:	f002 fb8e 	bl	24016bd0 <RCCEx_PLL3_Config>
240144b4:	4603      	mov	r3, r0
240144b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240144b8:	e005      	b.n	240144c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
240144ba:	2301      	movs	r3, #1
240144bc:	75fb      	strb	r3, [r7, #23]
      break;
240144be:	e002      	b.n	240144c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
240144c0:	bf00      	nop
240144c2:	e000      	b.n	240144c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
240144c4:	bf00      	nop
    }

    if(ret == HAL_OK)
240144c6:	7dfb      	ldrb	r3, [r7, #23]
240144c8:	2b00      	cmp	r3, #0
240144ca:	d10a      	bne.n	240144e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
240144cc:	4b25      	ldr	r3, [pc, #148]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240144ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240144d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
240144d4:	687b      	ldr	r3, [r7, #4]
240144d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
240144da:	4922      	ldr	r1, [pc, #136]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240144dc:	4313      	orrs	r3, r2
240144de:	658b      	str	r3, [r1, #88]	; 0x58
240144e0:	e001      	b.n	240144e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
240144e2:	7dfb      	ldrb	r3, [r7, #23]
240144e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
240144e6:	687b      	ldr	r3, [r7, #4]
240144e8:	681b      	ldr	r3, [r3, #0]
240144ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
240144ee:	2b00      	cmp	r3, #0
240144f0:	d04b      	beq.n	2401458a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
240144f2:	687b      	ldr	r3, [r7, #4]
240144f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
240144f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240144fc:	d030      	beq.n	24014560 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
240144fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24014502:	d82a      	bhi.n	2401455a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
24014504:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24014508:	d02e      	beq.n	24014568 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
2401450a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2401450e:	d824      	bhi.n	2401455a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
24014510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24014514:	d018      	beq.n	24014548 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
24014516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2401451a:	d81e      	bhi.n	2401455a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
2401451c:	2b00      	cmp	r3, #0
2401451e:	d003      	beq.n	24014528 <HAL_RCCEx_PeriphCLKConfig+0x298>
24014520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24014524:	d007      	beq.n	24014536 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24014526:	e018      	b.n	2401455a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014528:	4b0e      	ldr	r3, [pc, #56]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401452c:	4a0d      	ldr	r2, [pc, #52]	; (24014564 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401452e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014534:	e019      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014536:	687b      	ldr	r3, [r7, #4]
24014538:	3304      	adds	r3, #4
2401453a:	2100      	movs	r1, #0
2401453c:	4618      	mov	r0, r3
2401453e:	f002 fa95 	bl	24016a6c <RCCEx_PLL2_Config>
24014542:	4603      	mov	r3, r0
24014544:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
24014546:	e010      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24014548:	687b      	ldr	r3, [r7, #4]
2401454a:	3324      	adds	r3, #36	; 0x24
2401454c:	2100      	movs	r1, #0
2401454e:	4618      	mov	r0, r3
24014550:	f002 fb3e 	bl	24016bd0 <RCCEx_PLL3_Config>
24014554:	4603      	mov	r3, r0
24014556:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014558:	e007      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
2401455a:	2301      	movs	r3, #1
2401455c:	75fb      	strb	r3, [r7, #23]
      break;
2401455e:	e004      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
24014560:	bf00      	nop
24014562:	e002      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x2da>
24014564:	58024400 	.word	0x58024400
      break;
24014568:	bf00      	nop
    }

    if(ret == HAL_OK)
2401456a:	7dfb      	ldrb	r3, [r7, #23]
2401456c:	2b00      	cmp	r3, #0
2401456e:	d10a      	bne.n	24014586 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24014570:	4b99      	ldr	r3, [pc, #612]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014574:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24014578:	687b      	ldr	r3, [r7, #4]
2401457a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2401457e:	4996      	ldr	r1, [pc, #600]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014580:	4313      	orrs	r3, r2
24014582:	658b      	str	r3, [r1, #88]	; 0x58
24014584:	e001      	b.n	2401458a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014586:	7dfb      	ldrb	r3, [r7, #23]
24014588:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2401458a:	687b      	ldr	r3, [r7, #4]
2401458c:	681b      	ldr	r3, [r3, #0]
2401458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24014592:	2b00      	cmp	r3, #0
24014594:	d032      	beq.n	240145fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
24014596:	687b      	ldr	r3, [r7, #4]
24014598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401459a:	2b30      	cmp	r3, #48	; 0x30
2401459c:	d01c      	beq.n	240145d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
2401459e:	2b30      	cmp	r3, #48	; 0x30
240145a0:	d817      	bhi.n	240145d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
240145a2:	2b20      	cmp	r3, #32
240145a4:	d00c      	beq.n	240145c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
240145a6:	2b20      	cmp	r3, #32
240145a8:	d813      	bhi.n	240145d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
240145aa:	2b00      	cmp	r3, #0
240145ac:	d016      	beq.n	240145dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
240145ae:	2b10      	cmp	r3, #16
240145b0:	d10f      	bne.n	240145d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240145b2:	4b89      	ldr	r3, [pc, #548]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240145b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240145b6:	4a88      	ldr	r2, [pc, #544]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240145b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240145bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
240145be:	e00e      	b.n	240145de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
240145c0:	687b      	ldr	r3, [r7, #4]
240145c2:	3304      	adds	r3, #4
240145c4:	2102      	movs	r1, #2
240145c6:	4618      	mov	r0, r3
240145c8:	f002 fa50 	bl	24016a6c <RCCEx_PLL2_Config>
240145cc:	4603      	mov	r3, r0
240145ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
240145d0:	e005      	b.n	240145de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
240145d2:	2301      	movs	r3, #1
240145d4:	75fb      	strb	r3, [r7, #23]
      break;
240145d6:	e002      	b.n	240145de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
240145d8:	bf00      	nop
240145da:	e000      	b.n	240145de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
240145dc:	bf00      	nop
    }

    if(ret == HAL_OK)
240145de:	7dfb      	ldrb	r3, [r7, #23]
240145e0:	2b00      	cmp	r3, #0
240145e2:	d109      	bne.n	240145f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
240145e4:	4b7c      	ldr	r3, [pc, #496]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240145e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240145e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
240145ec:	687b      	ldr	r3, [r7, #4]
240145ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240145f0:	4979      	ldr	r1, [pc, #484]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240145f2:	4313      	orrs	r3, r2
240145f4:	64cb      	str	r3, [r1, #76]	; 0x4c
240145f6:	e001      	b.n	240145fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
240145f8:	7dfb      	ldrb	r3, [r7, #23]
240145fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240145fc:	687b      	ldr	r3, [r7, #4]
240145fe:	681b      	ldr	r3, [r3, #0]
24014600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24014604:	2b00      	cmp	r3, #0
24014606:	d047      	beq.n	24014698 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
24014608:	687b      	ldr	r3, [r7, #4]
2401460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014610:	d030      	beq.n	24014674 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
24014612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014616:	d82a      	bhi.n	2401466e <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2401461c:	d02c      	beq.n	24014678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
2401461e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24014622:	d824      	bhi.n	2401466e <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24014628:	d018      	beq.n	2401465c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
2401462a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401462e:	d81e      	bhi.n	2401466e <HAL_RCCEx_PeriphCLKConfig+0x3de>
24014630:	2b00      	cmp	r3, #0
24014632:	d003      	beq.n	2401463c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
24014634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014638:	d007      	beq.n	2401464a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
2401463a:	e018      	b.n	2401466e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401463c:	4b66      	ldr	r3, [pc, #408]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
2401463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014640:	4a65      	ldr	r2, [pc, #404]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
24014648:	e017      	b.n	2401467a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2401464a:	687b      	ldr	r3, [r7, #4]
2401464c:	3304      	adds	r3, #4
2401464e:	2100      	movs	r1, #0
24014650:	4618      	mov	r0, r3
24014652:	f002 fa0b 	bl	24016a6c <RCCEx_PLL2_Config>
24014656:	4603      	mov	r3, r0
24014658:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2401465a:	e00e      	b.n	2401467a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2401465c:	687b      	ldr	r3, [r7, #4]
2401465e:	3324      	adds	r3, #36	; 0x24
24014660:	2100      	movs	r1, #0
24014662:	4618      	mov	r0, r3
24014664:	f002 fab4 	bl	24016bd0 <RCCEx_PLL3_Config>
24014668:	4603      	mov	r3, r0
2401466a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2401466c:	e005      	b.n	2401467a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2401466e:	2301      	movs	r3, #1
24014670:	75fb      	strb	r3, [r7, #23]
      break;
24014672:	e002      	b.n	2401467a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014674:	bf00      	nop
24014676:	e000      	b.n	2401467a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014678:	bf00      	nop
    }

    if(ret == HAL_OK)
2401467a:	7dfb      	ldrb	r3, [r7, #23]
2401467c:	2b00      	cmp	r3, #0
2401467e:	d109      	bne.n	24014694 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24014680:	4b55      	ldr	r3, [pc, #340]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014684:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
24014688:	687b      	ldr	r3, [r7, #4]
2401468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401468c:	4952      	ldr	r1, [pc, #328]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
2401468e:	4313      	orrs	r3, r2
24014690:	650b      	str	r3, [r1, #80]	; 0x50
24014692:	e001      	b.n	24014698 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014694:	7dfb      	ldrb	r3, [r7, #23]
24014696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24014698:	687b      	ldr	r3, [r7, #4]
2401469a:	681b      	ldr	r3, [r3, #0]
2401469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240146a0:	2b00      	cmp	r3, #0
240146a2:	d049      	beq.n	24014738 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
240146a4:	687b      	ldr	r3, [r7, #4]
240146a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240146a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240146ac:	d02e      	beq.n	2401470c <HAL_RCCEx_PeriphCLKConfig+0x47c>
240146ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240146b2:	d828      	bhi.n	24014706 <HAL_RCCEx_PeriphCLKConfig+0x476>
240146b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240146b8:	d02a      	beq.n	24014710 <HAL_RCCEx_PeriphCLKConfig+0x480>
240146ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240146be:	d822      	bhi.n	24014706 <HAL_RCCEx_PeriphCLKConfig+0x476>
240146c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240146c4:	d026      	beq.n	24014714 <HAL_RCCEx_PeriphCLKConfig+0x484>
240146c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240146ca:	d81c      	bhi.n	24014706 <HAL_RCCEx_PeriphCLKConfig+0x476>
240146cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240146d0:	d010      	beq.n	240146f4 <HAL_RCCEx_PeriphCLKConfig+0x464>
240146d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240146d6:	d816      	bhi.n	24014706 <HAL_RCCEx_PeriphCLKConfig+0x476>
240146d8:	2b00      	cmp	r3, #0
240146da:	d01d      	beq.n	24014718 <HAL_RCCEx_PeriphCLKConfig+0x488>
240146dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240146e0:	d111      	bne.n	24014706 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
240146e2:	687b      	ldr	r3, [r7, #4]
240146e4:	3304      	adds	r3, #4
240146e6:	2101      	movs	r1, #1
240146e8:	4618      	mov	r0, r3
240146ea:	f002 f9bf 	bl	24016a6c <RCCEx_PLL2_Config>
240146ee:	4603      	mov	r3, r0
240146f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
240146f2:	e012      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
240146f4:	687b      	ldr	r3, [r7, #4]
240146f6:	3324      	adds	r3, #36	; 0x24
240146f8:	2101      	movs	r1, #1
240146fa:	4618      	mov	r0, r3
240146fc:	f002 fa68 	bl	24016bd0 <RCCEx_PLL3_Config>
24014700:	4603      	mov	r3, r0
24014702:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
24014704:	e009      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014706:	2301      	movs	r3, #1
24014708:	75fb      	strb	r3, [r7, #23]
      break;
2401470a:	e006      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
2401470c:	bf00      	nop
2401470e:	e004      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014710:	bf00      	nop
24014712:	e002      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014714:	bf00      	nop
24014716:	e000      	b.n	2401471a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
24014718:	bf00      	nop
    }

    if(ret == HAL_OK)
2401471a:	7dfb      	ldrb	r3, [r7, #23]
2401471c:	2b00      	cmp	r3, #0
2401471e:	d109      	bne.n	24014734 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24014720:	4b2d      	ldr	r3, [pc, #180]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014724:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24014728:	687b      	ldr	r3, [r7, #4]
2401472a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2401472c:	492a      	ldr	r1, [pc, #168]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
2401472e:	4313      	orrs	r3, r2
24014730:	650b      	str	r3, [r1, #80]	; 0x50
24014732:	e001      	b.n	24014738 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014734:	7dfb      	ldrb	r3, [r7, #23]
24014736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24014738:	687b      	ldr	r3, [r7, #4]
2401473a:	681b      	ldr	r3, [r3, #0]
2401473c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24014740:	2b00      	cmp	r3, #0
24014742:	d04d      	beq.n	240147e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
24014744:	687b      	ldr	r3, [r7, #4]
24014746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2401474a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2401474e:	d02e      	beq.n	240147ae <HAL_RCCEx_PeriphCLKConfig+0x51e>
24014750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014754:	d828      	bhi.n	240147a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401475a:	d02a      	beq.n	240147b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
2401475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014760:	d822      	bhi.n	240147a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014766:	d026      	beq.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x526>
24014768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2401476c:	d81c      	bhi.n	240147a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
2401476e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014772:	d010      	beq.n	24014796 <HAL_RCCEx_PeriphCLKConfig+0x506>
24014774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014778:	d816      	bhi.n	240147a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
2401477a:	2b00      	cmp	r3, #0
2401477c:	d01d      	beq.n	240147ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
2401477e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014782:	d111      	bne.n	240147a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014784:	687b      	ldr	r3, [r7, #4]
24014786:	3304      	adds	r3, #4
24014788:	2101      	movs	r1, #1
2401478a:	4618      	mov	r0, r3
2401478c:	f002 f96e 	bl	24016a6c <RCCEx_PLL2_Config>
24014790:	4603      	mov	r3, r0
24014792:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
24014794:	e012      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014796:	687b      	ldr	r3, [r7, #4]
24014798:	3324      	adds	r3, #36	; 0x24
2401479a:	2101      	movs	r1, #1
2401479c:	4618      	mov	r0, r3
2401479e:	f002 fa17 	bl	24016bd0 <RCCEx_PLL3_Config>
240147a2:	4603      	mov	r3, r0
240147a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
240147a6:	e009      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
240147a8:	2301      	movs	r3, #1
240147aa:	75fb      	strb	r3, [r7, #23]
      break;
240147ac:	e006      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
240147ae:	bf00      	nop
240147b0:	e004      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
240147b2:	bf00      	nop
240147b4:	e002      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
240147b6:	bf00      	nop
240147b8:	e000      	b.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
240147ba:	bf00      	nop
    }

    if(ret == HAL_OK)
240147bc:	7dfb      	ldrb	r3, [r7, #23]
240147be:	2b00      	cmp	r3, #0
240147c0:	d10c      	bne.n	240147dc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240147c2:	4b05      	ldr	r3, [pc, #20]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240147c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240147c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
240147ca:	687b      	ldr	r3, [r7, #4]
240147cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
240147d0:	4901      	ldr	r1, [pc, #4]	; (240147d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240147d2:	4313      	orrs	r3, r2
240147d4:	658b      	str	r3, [r1, #88]	; 0x58
240147d6:	e003      	b.n	240147e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
240147d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240147dc:	7dfb      	ldrb	r3, [r7, #23]
240147de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
240147e0:	687b      	ldr	r3, [r7, #4]
240147e2:	681b      	ldr	r3, [r3, #0]
240147e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
240147e8:	2b00      	cmp	r3, #0
240147ea:	d02f      	beq.n	2401484c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
240147ec:	687b      	ldr	r3, [r7, #4]
240147ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240147f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240147f4:	d00e      	beq.n	24014814 <HAL_RCCEx_PeriphCLKConfig+0x584>
240147f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240147fa:	d814      	bhi.n	24014826 <HAL_RCCEx_PeriphCLKConfig+0x596>
240147fc:	2b00      	cmp	r3, #0
240147fe:	d015      	beq.n	2401482c <HAL_RCCEx_PeriphCLKConfig+0x59c>
24014800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014804:	d10f      	bne.n	24014826 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014806:	4baf      	ldr	r3, [pc, #700]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401480a:	4aae      	ldr	r2, [pc, #696]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401480c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24014812:	e00c      	b.n	2401482e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014814:	687b      	ldr	r3, [r7, #4]
24014816:	3304      	adds	r3, #4
24014818:	2101      	movs	r1, #1
2401481a:	4618      	mov	r0, r3
2401481c:	f002 f926 	bl	24016a6c <RCCEx_PLL2_Config>
24014820:	4603      	mov	r3, r0
24014822:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24014824:	e003      	b.n	2401482e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014826:	2301      	movs	r3, #1
24014828:	75fb      	strb	r3, [r7, #23]
      break;
2401482a:	e000      	b.n	2401482e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
2401482c:	bf00      	nop
    }

    if(ret == HAL_OK)
2401482e:	7dfb      	ldrb	r3, [r7, #23]
24014830:	2b00      	cmp	r3, #0
24014832:	d109      	bne.n	24014848 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24014834:	4ba3      	ldr	r3, [pc, #652]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2401483c:	687b      	ldr	r3, [r7, #4]
2401483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24014840:	49a0      	ldr	r1, [pc, #640]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014842:	4313      	orrs	r3, r2
24014844:	650b      	str	r3, [r1, #80]	; 0x50
24014846:	e001      	b.n	2401484c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014848:	7dfb      	ldrb	r3, [r7, #23]
2401484a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2401484c:	687b      	ldr	r3, [r7, #4]
2401484e:	681b      	ldr	r3, [r3, #0]
24014850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24014854:	2b00      	cmp	r3, #0
24014856:	d032      	beq.n	240148be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
24014858:	687b      	ldr	r3, [r7, #4]
2401485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401485c:	2b03      	cmp	r3, #3
2401485e:	d81b      	bhi.n	24014898 <HAL_RCCEx_PeriphCLKConfig+0x608>
24014860:	a201      	add	r2, pc, #4	; (adr r2, 24014868 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
24014862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014866:	bf00      	nop
24014868:	2401489f 	.word	0x2401489f
2401486c:	24014879 	.word	0x24014879
24014870:	24014887 	.word	0x24014887
24014874:	2401489f 	.word	0x2401489f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014878:	4b92      	ldr	r3, [pc, #584]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401487c:	4a91      	ldr	r2, [pc, #580]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
24014884:	e00c      	b.n	240148a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014886:	687b      	ldr	r3, [r7, #4]
24014888:	3304      	adds	r3, #4
2401488a:	2102      	movs	r1, #2
2401488c:	4618      	mov	r0, r3
2401488e:	f002 f8ed 	bl	24016a6c <RCCEx_PLL2_Config>
24014892:	4603      	mov	r3, r0
24014894:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
24014896:	e003      	b.n	240148a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24014898:	2301      	movs	r3, #1
2401489a:	75fb      	strb	r3, [r7, #23]
      break;
2401489c:	e000      	b.n	240148a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
2401489e:	bf00      	nop
    }

    if(ret == HAL_OK)
240148a0:	7dfb      	ldrb	r3, [r7, #23]
240148a2:	2b00      	cmp	r3, #0
240148a4:	d109      	bne.n	240148ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240148a6:	4b87      	ldr	r3, [pc, #540]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240148aa:	f023 0203 	bic.w	r2, r3, #3
240148ae:	687b      	ldr	r3, [r7, #4]
240148b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240148b2:	4984      	ldr	r1, [pc, #528]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148b4:	4313      	orrs	r3, r2
240148b6:	64cb      	str	r3, [r1, #76]	; 0x4c
240148b8:	e001      	b.n	240148be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
240148ba:	7dfb      	ldrb	r3, [r7, #23]
240148bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240148be:	687b      	ldr	r3, [r7, #4]
240148c0:	681b      	ldr	r3, [r3, #0]
240148c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240148c6:	2b00      	cmp	r3, #0
240148c8:	f000 8086 	beq.w	240149d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
240148cc:	4b7e      	ldr	r3, [pc, #504]	; (24014ac8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
240148ce:	681b      	ldr	r3, [r3, #0]
240148d0:	4a7d      	ldr	r2, [pc, #500]	; (24014ac8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
240148d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240148d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
240148d8:	f7ed fc38 	bl	2400214c <HAL_GetTick>
240148dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
240148de:	e009      	b.n	240148f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240148e0:	f7ed fc34 	bl	2400214c <HAL_GetTick>
240148e4:	4602      	mov	r2, r0
240148e6:	693b      	ldr	r3, [r7, #16]
240148e8:	1ad3      	subs	r3, r2, r3
240148ea:	2b64      	cmp	r3, #100	; 0x64
240148ec:	d902      	bls.n	240148f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
240148ee:	2303      	movs	r3, #3
240148f0:	75fb      	strb	r3, [r7, #23]
        break;
240148f2:	e005      	b.n	24014900 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
240148f4:	4b74      	ldr	r3, [pc, #464]	; (24014ac8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
240148f6:	681b      	ldr	r3, [r3, #0]
240148f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
240148fc:	2b00      	cmp	r3, #0
240148fe:	d0ef      	beq.n	240148e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
24014900:	7dfb      	ldrb	r3, [r7, #23]
24014902:	2b00      	cmp	r3, #0
24014904:	d166      	bne.n	240149d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24014906:	4b6f      	ldr	r3, [pc, #444]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2401490a:	687b      	ldr	r3, [r7, #4]
2401490c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014910:	4053      	eors	r3, r2
24014912:	f403 7340 	and.w	r3, r3, #768	; 0x300
24014916:	2b00      	cmp	r3, #0
24014918:	d013      	beq.n	24014942 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2401491a:	4b6a      	ldr	r3, [pc, #424]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24014922:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
24014924:	4b67      	ldr	r3, [pc, #412]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014928:	4a66      	ldr	r2, [pc, #408]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401492e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24014930:	4b64      	ldr	r3, [pc, #400]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014934:	4a63      	ldr	r2, [pc, #396]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401493a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2401493c:	4a61      	ldr	r2, [pc, #388]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401493e:	68fb      	ldr	r3, [r7, #12]
24014940:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24014942:	687b      	ldr	r3, [r7, #4]
24014944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401494c:	d115      	bne.n	2401497a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401494e:	f7ed fbfd 	bl	2400214c <HAL_GetTick>
24014952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24014954:	e00b      	b.n	2401496e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24014956:	f7ed fbf9 	bl	2400214c <HAL_GetTick>
2401495a:	4602      	mov	r2, r0
2401495c:	693b      	ldr	r3, [r7, #16]
2401495e:	1ad3      	subs	r3, r2, r3
24014960:	f241 3288 	movw	r2, #5000	; 0x1388
24014964:	4293      	cmp	r3, r2
24014966:	d902      	bls.n	2401496e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
24014968:	2303      	movs	r3, #3
2401496a:	75fb      	strb	r3, [r7, #23]
            break;
2401496c:	e005      	b.n	2401497a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401496e:	4b55      	ldr	r3, [pc, #340]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014972:	f003 0302 	and.w	r3, r3, #2
24014976:	2b00      	cmp	r3, #0
24014978:	d0ed      	beq.n	24014956 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
2401497a:	7dfb      	ldrb	r3, [r7, #23]
2401497c:	2b00      	cmp	r3, #0
2401497e:	d126      	bne.n	240149ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24014980:	687b      	ldr	r3, [r7, #4]
24014982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014986:	f403 7340 	and.w	r3, r3, #768	; 0x300
2401498a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2401498e:	d10d      	bne.n	240149ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
24014990:	4b4c      	ldr	r3, [pc, #304]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014992:	691b      	ldr	r3, [r3, #16]
24014994:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24014998:	687b      	ldr	r3, [r7, #4]
2401499a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2401499e:	0919      	lsrs	r1, r3, #4
240149a0:	4b4a      	ldr	r3, [pc, #296]	; (24014acc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
240149a2:	400b      	ands	r3, r1
240149a4:	4947      	ldr	r1, [pc, #284]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149a6:	4313      	orrs	r3, r2
240149a8:	610b      	str	r3, [r1, #16]
240149aa:	e005      	b.n	240149b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
240149ac:	4b45      	ldr	r3, [pc, #276]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149ae:	691b      	ldr	r3, [r3, #16]
240149b0:	4a44      	ldr	r2, [pc, #272]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240149b6:	6113      	str	r3, [r2, #16]
240149b8:	4b42      	ldr	r3, [pc, #264]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240149bc:	687b      	ldr	r3, [r7, #4]
240149be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240149c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
240149c6:	493f      	ldr	r1, [pc, #252]	; (24014ac4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149c8:	4313      	orrs	r3, r2
240149ca:	670b      	str	r3, [r1, #112]	; 0x70
240149cc:	e004      	b.n	240149d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
240149ce:	7dfb      	ldrb	r3, [r7, #23]
240149d0:	75bb      	strb	r3, [r7, #22]
240149d2:	e001      	b.n	240149d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
240149d4:	7dfb      	ldrb	r3, [r7, #23]
240149d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240149d8:	687b      	ldr	r3, [r7, #4]
240149da:	681b      	ldr	r3, [r3, #0]
240149dc:	f003 0301 	and.w	r3, r3, #1
240149e0:	2b00      	cmp	r3, #0
240149e2:	f000 8085 	beq.w	24014af0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
240149e6:	687b      	ldr	r3, [r7, #4]
240149e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
240149ea:	2b28      	cmp	r3, #40	; 0x28
240149ec:	d866      	bhi.n	24014abc <HAL_RCCEx_PeriphCLKConfig+0x82c>
240149ee:	a201      	add	r2, pc, #4	; (adr r2, 240149f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
240149f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240149f4:	24014ad1 	.word	0x24014ad1
240149f8:	24014abd 	.word	0x24014abd
240149fc:	24014abd 	.word	0x24014abd
24014a00:	24014abd 	.word	0x24014abd
24014a04:	24014abd 	.word	0x24014abd
24014a08:	24014abd 	.word	0x24014abd
24014a0c:	24014abd 	.word	0x24014abd
24014a10:	24014abd 	.word	0x24014abd
24014a14:	24014a99 	.word	0x24014a99
24014a18:	24014abd 	.word	0x24014abd
24014a1c:	24014abd 	.word	0x24014abd
24014a20:	24014abd 	.word	0x24014abd
24014a24:	24014abd 	.word	0x24014abd
24014a28:	24014abd 	.word	0x24014abd
24014a2c:	24014abd 	.word	0x24014abd
24014a30:	24014abd 	.word	0x24014abd
24014a34:	24014aab 	.word	0x24014aab
24014a38:	24014abd 	.word	0x24014abd
24014a3c:	24014abd 	.word	0x24014abd
24014a40:	24014abd 	.word	0x24014abd
24014a44:	24014abd 	.word	0x24014abd
24014a48:	24014abd 	.word	0x24014abd
24014a4c:	24014abd 	.word	0x24014abd
24014a50:	24014abd 	.word	0x24014abd
24014a54:	24014ad1 	.word	0x24014ad1
24014a58:	24014abd 	.word	0x24014abd
24014a5c:	24014abd 	.word	0x24014abd
24014a60:	24014abd 	.word	0x24014abd
24014a64:	24014abd 	.word	0x24014abd
24014a68:	24014abd 	.word	0x24014abd
24014a6c:	24014abd 	.word	0x24014abd
24014a70:	24014abd 	.word	0x24014abd
24014a74:	24014ad1 	.word	0x24014ad1
24014a78:	24014abd 	.word	0x24014abd
24014a7c:	24014abd 	.word	0x24014abd
24014a80:	24014abd 	.word	0x24014abd
24014a84:	24014abd 	.word	0x24014abd
24014a88:	24014abd 	.word	0x24014abd
24014a8c:	24014abd 	.word	0x24014abd
24014a90:	24014abd 	.word	0x24014abd
24014a94:	24014ad1 	.word	0x24014ad1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014a98:	687b      	ldr	r3, [r7, #4]
24014a9a:	3304      	adds	r3, #4
24014a9c:	2101      	movs	r1, #1
24014a9e:	4618      	mov	r0, r3
24014aa0:	f001 ffe4 	bl	24016a6c <RCCEx_PLL2_Config>
24014aa4:	4603      	mov	r3, r0
24014aa6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24014aa8:	e013      	b.n	24014ad2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014aaa:	687b      	ldr	r3, [r7, #4]
24014aac:	3324      	adds	r3, #36	; 0x24
24014aae:	2101      	movs	r1, #1
24014ab0:	4618      	mov	r0, r3
24014ab2:	f002 f88d 	bl	24016bd0 <RCCEx_PLL3_Config>
24014ab6:	4603      	mov	r3, r0
24014ab8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24014aba:	e00a      	b.n	24014ad2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014abc:	2301      	movs	r3, #1
24014abe:	75fb      	strb	r3, [r7, #23]
      break;
24014ac0:	e007      	b.n	24014ad2 <HAL_RCCEx_PeriphCLKConfig+0x842>
24014ac2:	bf00      	nop
24014ac4:	58024400 	.word	0x58024400
24014ac8:	58024800 	.word	0x58024800
24014acc:	00ffffcf 	.word	0x00ffffcf
      break;
24014ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
24014ad2:	7dfb      	ldrb	r3, [r7, #23]
24014ad4:	2b00      	cmp	r3, #0
24014ad6:	d109      	bne.n	24014aec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24014ad8:	4b96      	ldr	r3, [pc, #600]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014adc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
24014ae0:	687b      	ldr	r3, [r7, #4]
24014ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24014ae4:	4993      	ldr	r1, [pc, #588]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014ae6:	4313      	orrs	r3, r2
24014ae8:	654b      	str	r3, [r1, #84]	; 0x54
24014aea:	e001      	b.n	24014af0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014aec:	7dfb      	ldrb	r3, [r7, #23]
24014aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24014af0:	687b      	ldr	r3, [r7, #4]
24014af2:	681b      	ldr	r3, [r3, #0]
24014af4:	f003 0302 	and.w	r3, r3, #2
24014af8:	2b00      	cmp	r3, #0
24014afa:	d038      	beq.n	24014b6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
24014afc:	687b      	ldr	r3, [r7, #4]
24014afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014b00:	2b05      	cmp	r3, #5
24014b02:	d821      	bhi.n	24014b48 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
24014b04:	a201      	add	r2, pc, #4	; (adr r2, 24014b0c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
24014b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014b0a:	bf00      	nop
24014b0c:	24014b4f 	.word	0x24014b4f
24014b10:	24014b25 	.word	0x24014b25
24014b14:	24014b37 	.word	0x24014b37
24014b18:	24014b4f 	.word	0x24014b4f
24014b1c:	24014b4f 	.word	0x24014b4f
24014b20:	24014b4f 	.word	0x24014b4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014b24:	687b      	ldr	r3, [r7, #4]
24014b26:	3304      	adds	r3, #4
24014b28:	2101      	movs	r1, #1
24014b2a:	4618      	mov	r0, r3
24014b2c:	f001 ff9e 	bl	24016a6c <RCCEx_PLL2_Config>
24014b30:	4603      	mov	r3, r0
24014b32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24014b34:	e00c      	b.n	24014b50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014b36:	687b      	ldr	r3, [r7, #4]
24014b38:	3324      	adds	r3, #36	; 0x24
24014b3a:	2101      	movs	r1, #1
24014b3c:	4618      	mov	r0, r3
24014b3e:	f002 f847 	bl	24016bd0 <RCCEx_PLL3_Config>
24014b42:	4603      	mov	r3, r0
24014b44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24014b46:	e003      	b.n	24014b50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014b48:	2301      	movs	r3, #1
24014b4a:	75fb      	strb	r3, [r7, #23]
      break;
24014b4c:	e000      	b.n	24014b50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
24014b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
24014b50:	7dfb      	ldrb	r3, [r7, #23]
24014b52:	2b00      	cmp	r3, #0
24014b54:	d109      	bne.n	24014b6a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24014b56:	4b77      	ldr	r3, [pc, #476]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014b5a:	f023 0207 	bic.w	r2, r3, #7
24014b5e:	687b      	ldr	r3, [r7, #4]
24014b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014b62:	4974      	ldr	r1, [pc, #464]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014b64:	4313      	orrs	r3, r2
24014b66:	654b      	str	r3, [r1, #84]	; 0x54
24014b68:	e001      	b.n	24014b6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014b6a:	7dfb      	ldrb	r3, [r7, #23]
24014b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24014b6e:	687b      	ldr	r3, [r7, #4]
24014b70:	681b      	ldr	r3, [r3, #0]
24014b72:	f003 0304 	and.w	r3, r3, #4
24014b76:	2b00      	cmp	r3, #0
24014b78:	d03a      	beq.n	24014bf0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
24014b7a:	687b      	ldr	r3, [r7, #4]
24014b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24014b80:	2b05      	cmp	r3, #5
24014b82:	d821      	bhi.n	24014bc8 <HAL_RCCEx_PeriphCLKConfig+0x938>
24014b84:	a201      	add	r2, pc, #4	; (adr r2, 24014b8c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
24014b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014b8a:	bf00      	nop
24014b8c:	24014bcf 	.word	0x24014bcf
24014b90:	24014ba5 	.word	0x24014ba5
24014b94:	24014bb7 	.word	0x24014bb7
24014b98:	24014bcf 	.word	0x24014bcf
24014b9c:	24014bcf 	.word	0x24014bcf
24014ba0:	24014bcf 	.word	0x24014bcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014ba4:	687b      	ldr	r3, [r7, #4]
24014ba6:	3304      	adds	r3, #4
24014ba8:	2101      	movs	r1, #1
24014baa:	4618      	mov	r0, r3
24014bac:	f001 ff5e 	bl	24016a6c <RCCEx_PLL2_Config>
24014bb0:	4603      	mov	r3, r0
24014bb2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24014bb4:	e00c      	b.n	24014bd0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014bb6:	687b      	ldr	r3, [r7, #4]
24014bb8:	3324      	adds	r3, #36	; 0x24
24014bba:	2101      	movs	r1, #1
24014bbc:	4618      	mov	r0, r3
24014bbe:	f002 f807 	bl	24016bd0 <RCCEx_PLL3_Config>
24014bc2:	4603      	mov	r3, r0
24014bc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24014bc6:	e003      	b.n	24014bd0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014bc8:	2301      	movs	r3, #1
24014bca:	75fb      	strb	r3, [r7, #23]
      break;
24014bcc:	e000      	b.n	24014bd0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
24014bce:	bf00      	nop
    }

    if(ret == HAL_OK)
24014bd0:	7dfb      	ldrb	r3, [r7, #23]
24014bd2:	2b00      	cmp	r3, #0
24014bd4:	d10a      	bne.n	24014bec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24014bd6:	4b57      	ldr	r3, [pc, #348]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014bda:	f023 0207 	bic.w	r2, r3, #7
24014bde:	687b      	ldr	r3, [r7, #4]
24014be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24014be4:	4953      	ldr	r1, [pc, #332]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014be6:	4313      	orrs	r3, r2
24014be8:	658b      	str	r3, [r1, #88]	; 0x58
24014bea:	e001      	b.n	24014bf0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014bec:	7dfb      	ldrb	r3, [r7, #23]
24014bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24014bf0:	687b      	ldr	r3, [r7, #4]
24014bf2:	681b      	ldr	r3, [r3, #0]
24014bf4:	f003 0320 	and.w	r3, r3, #32
24014bf8:	2b00      	cmp	r3, #0
24014bfa:	d04b      	beq.n	24014c94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
24014bfc:	687b      	ldr	r3, [r7, #4]
24014bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24014c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014c06:	d02e      	beq.n	24014c66 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
24014c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014c0c:	d828      	bhi.n	24014c60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014c12:	d02a      	beq.n	24014c6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
24014c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014c18:	d822      	bhi.n	24014c60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014c1e:	d026      	beq.n	24014c6e <HAL_RCCEx_PeriphCLKConfig+0x9de>
24014c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014c24:	d81c      	bhi.n	24014c60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014c2a:	d010      	beq.n	24014c4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
24014c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014c30:	d816      	bhi.n	24014c60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014c32:	2b00      	cmp	r3, #0
24014c34:	d01d      	beq.n	24014c72 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
24014c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014c3a:	d111      	bne.n	24014c60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014c3c:	687b      	ldr	r3, [r7, #4]
24014c3e:	3304      	adds	r3, #4
24014c40:	2100      	movs	r1, #0
24014c42:	4618      	mov	r0, r3
24014c44:	f001 ff12 	bl	24016a6c <RCCEx_PLL2_Config>
24014c48:	4603      	mov	r3, r0
24014c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24014c4c:	e012      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014c4e:	687b      	ldr	r3, [r7, #4]
24014c50:	3324      	adds	r3, #36	; 0x24
24014c52:	2102      	movs	r1, #2
24014c54:	4618      	mov	r0, r3
24014c56:	f001 ffbb 	bl	24016bd0 <RCCEx_PLL3_Config>
24014c5a:	4603      	mov	r3, r0
24014c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24014c5e:	e009      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014c60:	2301      	movs	r3, #1
24014c62:	75fb      	strb	r3, [r7, #23]
      break;
24014c64:	e006      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014c66:	bf00      	nop
24014c68:	e004      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014c6a:	bf00      	nop
24014c6c:	e002      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014c6e:	bf00      	nop
24014c70:	e000      	b.n	24014c74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014c72:	bf00      	nop
    }

    if(ret == HAL_OK)
24014c74:	7dfb      	ldrb	r3, [r7, #23]
24014c76:	2b00      	cmp	r3, #0
24014c78:	d10a      	bne.n	24014c90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24014c7a:	4b2e      	ldr	r3, [pc, #184]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014c7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
24014c82:	687b      	ldr	r3, [r7, #4]
24014c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24014c88:	492a      	ldr	r1, [pc, #168]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c8a:	4313      	orrs	r3, r2
24014c8c:	654b      	str	r3, [r1, #84]	; 0x54
24014c8e:	e001      	b.n	24014c94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014c90:	7dfb      	ldrb	r3, [r7, #23]
24014c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24014c94:	687b      	ldr	r3, [r7, #4]
24014c96:	681b      	ldr	r3, [r3, #0]
24014c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
24014c9c:	2b00      	cmp	r3, #0
24014c9e:	d04d      	beq.n	24014d3c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
24014ca0:	687b      	ldr	r3, [r7, #4]
24014ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24014ca6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24014caa:	d02e      	beq.n	24014d0a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
24014cac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24014cb0:	d828      	bhi.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014cb6:	d02a      	beq.n	24014d0e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
24014cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014cbc:	d822      	bhi.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24014cc2:	d026      	beq.n	24014d12 <HAL_RCCEx_PeriphCLKConfig+0xa82>
24014cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24014cc8:	d81c      	bhi.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24014cce:	d010      	beq.n	24014cf2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
24014cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24014cd4:	d816      	bhi.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014cd6:	2b00      	cmp	r3, #0
24014cd8:	d01d      	beq.n	24014d16 <HAL_RCCEx_PeriphCLKConfig+0xa86>
24014cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24014cde:	d111      	bne.n	24014d04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014ce0:	687b      	ldr	r3, [r7, #4]
24014ce2:	3304      	adds	r3, #4
24014ce4:	2100      	movs	r1, #0
24014ce6:	4618      	mov	r0, r3
24014ce8:	f001 fec0 	bl	24016a6c <RCCEx_PLL2_Config>
24014cec:	4603      	mov	r3, r0
24014cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24014cf0:	e012      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014cf2:	687b      	ldr	r3, [r7, #4]
24014cf4:	3324      	adds	r3, #36	; 0x24
24014cf6:	2102      	movs	r1, #2
24014cf8:	4618      	mov	r0, r3
24014cfa:	f001 ff69 	bl	24016bd0 <RCCEx_PLL3_Config>
24014cfe:	4603      	mov	r3, r0
24014d00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24014d02:	e009      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014d04:	2301      	movs	r3, #1
24014d06:	75fb      	strb	r3, [r7, #23]
      break;
24014d08:	e006      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014d0a:	bf00      	nop
24014d0c:	e004      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014d0e:	bf00      	nop
24014d10:	e002      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014d12:	bf00      	nop
24014d14:	e000      	b.n	24014d18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014d16:	bf00      	nop
    }

    if(ret == HAL_OK)
24014d18:	7dfb      	ldrb	r3, [r7, #23]
24014d1a:	2b00      	cmp	r3, #0
24014d1c:	d10c      	bne.n	24014d38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24014d1e:	4b05      	ldr	r3, [pc, #20]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014d22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
24014d26:	687b      	ldr	r3, [r7, #4]
24014d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24014d2c:	4901      	ldr	r1, [pc, #4]	; (24014d34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014d2e:	4313      	orrs	r3, r2
24014d30:	658b      	str	r3, [r1, #88]	; 0x58
24014d32:	e003      	b.n	24014d3c <HAL_RCCEx_PeriphCLKConfig+0xaac>
24014d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24014d38:	7dfb      	ldrb	r3, [r7, #23]
24014d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24014d3c:	687b      	ldr	r3, [r7, #4]
24014d3e:	681b      	ldr	r3, [r3, #0]
24014d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
24014d44:	2b00      	cmp	r3, #0
24014d46:	d04b      	beq.n	24014de0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
24014d48:	687b      	ldr	r3, [r7, #4]
24014d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24014d4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24014d52:	d02e      	beq.n	24014db2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
24014d54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24014d58:	d828      	bhi.n	24014dac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24014d5e:	d02a      	beq.n	24014db6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
24014d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24014d64:	d822      	bhi.n	24014dac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014d66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24014d6a:	d026      	beq.n	24014dba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
24014d6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24014d70:	d81c      	bhi.n	24014dac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014d76:	d010      	beq.n	24014d9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
24014d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014d7c:	d816      	bhi.n	24014dac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014d7e:	2b00      	cmp	r3, #0
24014d80:	d01d      	beq.n	24014dbe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
24014d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24014d86:	d111      	bne.n	24014dac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014d88:	687b      	ldr	r3, [r7, #4]
24014d8a:	3304      	adds	r3, #4
24014d8c:	2100      	movs	r1, #0
24014d8e:	4618      	mov	r0, r3
24014d90:	f001 fe6c 	bl	24016a6c <RCCEx_PLL2_Config>
24014d94:	4603      	mov	r3, r0
24014d96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
24014d98:	e012      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014d9a:	687b      	ldr	r3, [r7, #4]
24014d9c:	3324      	adds	r3, #36	; 0x24
24014d9e:	2102      	movs	r1, #2
24014da0:	4618      	mov	r0, r3
24014da2:	f001 ff15 	bl	24016bd0 <RCCEx_PLL3_Config>
24014da6:	4603      	mov	r3, r0
24014da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
24014daa:	e009      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014dac:	2301      	movs	r3, #1
24014dae:	75fb      	strb	r3, [r7, #23]
      break;
24014db0:	e006      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014db2:	bf00      	nop
24014db4:	e004      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014db6:	bf00      	nop
24014db8:	e002      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014dba:	bf00      	nop
24014dbc:	e000      	b.n	24014dc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
24014dc0:	7dfb      	ldrb	r3, [r7, #23]
24014dc2:	2b00      	cmp	r3, #0
24014dc4:	d10a      	bne.n	24014ddc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24014dc6:	4b9d      	ldr	r3, [pc, #628]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
24014dce:	687b      	ldr	r3, [r7, #4]
24014dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24014dd4:	4999      	ldr	r1, [pc, #612]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014dd6:	4313      	orrs	r3, r2
24014dd8:	658b      	str	r3, [r1, #88]	; 0x58
24014dda:	e001      	b.n	24014de0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014ddc:	7dfb      	ldrb	r3, [r7, #23]
24014dde:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24014de0:	687b      	ldr	r3, [r7, #4]
24014de2:	681b      	ldr	r3, [r3, #0]
24014de4:	f003 0308 	and.w	r3, r3, #8
24014de8:	2b00      	cmp	r3, #0
24014dea:	d01a      	beq.n	24014e22 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
24014dec:	687b      	ldr	r3, [r7, #4]
24014dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24014df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014df6:	d10a      	bne.n	24014e0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
24014df8:	687b      	ldr	r3, [r7, #4]
24014dfa:	3324      	adds	r3, #36	; 0x24
24014dfc:	2102      	movs	r1, #2
24014dfe:	4618      	mov	r0, r3
24014e00:	f001 fee6 	bl	24016bd0 <RCCEx_PLL3_Config>
24014e04:	4603      	mov	r3, r0
24014e06:	2b00      	cmp	r3, #0
24014e08:	d001      	beq.n	24014e0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
24014e0a:	2301      	movs	r3, #1
24014e0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24014e0e:	4b8b      	ldr	r3, [pc, #556]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014e12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
24014e16:	687b      	ldr	r3, [r7, #4]
24014e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24014e1c:	4987      	ldr	r1, [pc, #540]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e1e:	4313      	orrs	r3, r2
24014e20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24014e22:	687b      	ldr	r3, [r7, #4]
24014e24:	681b      	ldr	r3, [r3, #0]
24014e26:	f003 0310 	and.w	r3, r3, #16
24014e2a:	2b00      	cmp	r3, #0
24014e2c:	d01a      	beq.n	24014e64 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
24014e2e:	687b      	ldr	r3, [r7, #4]
24014e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24014e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24014e38:	d10a      	bne.n	24014e50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
24014e3a:	687b      	ldr	r3, [r7, #4]
24014e3c:	3324      	adds	r3, #36	; 0x24
24014e3e:	2102      	movs	r1, #2
24014e40:	4618      	mov	r0, r3
24014e42:	f001 fec5 	bl	24016bd0 <RCCEx_PLL3_Config>
24014e46:	4603      	mov	r3, r0
24014e48:	2b00      	cmp	r3, #0
24014e4a:	d001      	beq.n	24014e50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
24014e4c:	2301      	movs	r3, #1
24014e4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24014e50:	4b7a      	ldr	r3, [pc, #488]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24014e58:	687b      	ldr	r3, [r7, #4]
24014e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24014e5e:	4977      	ldr	r1, [pc, #476]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e60:	4313      	orrs	r3, r2
24014e62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24014e64:	687b      	ldr	r3, [r7, #4]
24014e66:	681b      	ldr	r3, [r3, #0]
24014e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24014e6c:	2b00      	cmp	r3, #0
24014e6e:	d034      	beq.n	24014eda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
24014e70:	687b      	ldr	r3, [r7, #4]
24014e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24014e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014e7a:	d01d      	beq.n	24014eb8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
24014e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014e80:	d817      	bhi.n	24014eb2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
24014e82:	2b00      	cmp	r3, #0
24014e84:	d003      	beq.n	24014e8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
24014e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014e8a:	d009      	beq.n	24014ea0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
24014e8c:	e011      	b.n	24014eb2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014e8e:	687b      	ldr	r3, [r7, #4]
24014e90:	3304      	adds	r3, #4
24014e92:	2100      	movs	r1, #0
24014e94:	4618      	mov	r0, r3
24014e96:	f001 fde9 	bl	24016a6c <RCCEx_PLL2_Config>
24014e9a:	4603      	mov	r3, r0
24014e9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
24014e9e:	e00c      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014ea0:	687b      	ldr	r3, [r7, #4]
24014ea2:	3324      	adds	r3, #36	; 0x24
24014ea4:	2102      	movs	r1, #2
24014ea6:	4618      	mov	r0, r3
24014ea8:	f001 fe92 	bl	24016bd0 <RCCEx_PLL3_Config>
24014eac:	4603      	mov	r3, r0
24014eae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
24014eb0:	e003      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014eb2:	2301      	movs	r3, #1
24014eb4:	75fb      	strb	r3, [r7, #23]
      break;
24014eb6:	e000      	b.n	24014eba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
24014eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
24014eba:	7dfb      	ldrb	r3, [r7, #23]
24014ebc:	2b00      	cmp	r3, #0
24014ebe:	d10a      	bne.n	24014ed6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24014ec0:	4b5e      	ldr	r3, [pc, #376]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
24014ec8:	687b      	ldr	r3, [r7, #4]
24014eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24014ece:	495b      	ldr	r1, [pc, #364]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014ed0:	4313      	orrs	r3, r2
24014ed2:	658b      	str	r3, [r1, #88]	; 0x58
24014ed4:	e001      	b.n	24014eda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014ed6:	7dfb      	ldrb	r3, [r7, #23]
24014ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24014eda:	687b      	ldr	r3, [r7, #4]
24014edc:	681b      	ldr	r3, [r3, #0]
24014ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24014ee2:	2b00      	cmp	r3, #0
24014ee4:	d033      	beq.n	24014f4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
24014ee6:	687b      	ldr	r3, [r7, #4]
24014ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24014eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014ef0:	d01c      	beq.n	24014f2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
24014ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014ef6:	d816      	bhi.n	24014f26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
24014ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24014efc:	d003      	beq.n	24014f06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
24014efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014f02:	d007      	beq.n	24014f14 <HAL_RCCEx_PeriphCLKConfig+0xc84>
24014f04:	e00f      	b.n	24014f26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014f06:	4b4d      	ldr	r3, [pc, #308]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014f0a:	4a4c      	ldr	r2, [pc, #304]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014f10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
24014f12:	e00c      	b.n	24014f2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014f14:	687b      	ldr	r3, [r7, #4]
24014f16:	3324      	adds	r3, #36	; 0x24
24014f18:	2101      	movs	r1, #1
24014f1a:	4618      	mov	r0, r3
24014f1c:	f001 fe58 	bl	24016bd0 <RCCEx_PLL3_Config>
24014f20:	4603      	mov	r3, r0
24014f22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
24014f24:	e003      	b.n	24014f2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014f26:	2301      	movs	r3, #1
24014f28:	75fb      	strb	r3, [r7, #23]
      break;
24014f2a:	e000      	b.n	24014f2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
24014f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
24014f2e:	7dfb      	ldrb	r3, [r7, #23]
24014f30:	2b00      	cmp	r3, #0
24014f32:	d10a      	bne.n	24014f4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24014f34:	4b41      	ldr	r3, [pc, #260]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
24014f3c:	687b      	ldr	r3, [r7, #4]
24014f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24014f42:	493e      	ldr	r1, [pc, #248]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f44:	4313      	orrs	r3, r2
24014f46:	654b      	str	r3, [r1, #84]	; 0x54
24014f48:	e001      	b.n	24014f4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014f4a:	7dfb      	ldrb	r3, [r7, #23]
24014f4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24014f4e:	687b      	ldr	r3, [r7, #4]
24014f50:	681b      	ldr	r3, [r3, #0]
24014f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24014f56:	2b00      	cmp	r3, #0
24014f58:	d029      	beq.n	24014fae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
24014f5a:	687b      	ldr	r3, [r7, #4]
24014f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24014f5e:	2b00      	cmp	r3, #0
24014f60:	d003      	beq.n	24014f6a <HAL_RCCEx_PeriphCLKConfig+0xcda>
24014f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014f66:	d007      	beq.n	24014f78 <HAL_RCCEx_PeriphCLKConfig+0xce8>
24014f68:	e00f      	b.n	24014f8a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014f6a:	4b34      	ldr	r3, [pc, #208]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014f6e:	4a33      	ldr	r2, [pc, #204]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
24014f76:	e00b      	b.n	24014f90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014f78:	687b      	ldr	r3, [r7, #4]
24014f7a:	3304      	adds	r3, #4
24014f7c:	2102      	movs	r1, #2
24014f7e:	4618      	mov	r0, r3
24014f80:	f001 fd74 	bl	24016a6c <RCCEx_PLL2_Config>
24014f84:	4603      	mov	r3, r0
24014f86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
24014f88:	e002      	b.n	24014f90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
24014f8a:	2301      	movs	r3, #1
24014f8c:	75fb      	strb	r3, [r7, #23]
      break;
24014f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
24014f90:	7dfb      	ldrb	r3, [r7, #23]
24014f92:	2b00      	cmp	r3, #0
24014f94:	d109      	bne.n	24014faa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24014f96:	4b29      	ldr	r3, [pc, #164]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24014f9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
24014f9e:	687b      	ldr	r3, [r7, #4]
24014fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24014fa2:	4926      	ldr	r1, [pc, #152]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014fa4:	4313      	orrs	r3, r2
24014fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
24014fa8:	e001      	b.n	24014fae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014faa:	7dfb      	ldrb	r3, [r7, #23]
24014fac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24014fae:	687b      	ldr	r3, [r7, #4]
24014fb0:	681b      	ldr	r3, [r3, #0]
24014fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24014fb6:	2b00      	cmp	r3, #0
24014fb8:	d00a      	beq.n	24014fd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
24014fba:	687b      	ldr	r3, [r7, #4]
24014fbc:	3324      	adds	r3, #36	; 0x24
24014fbe:	2102      	movs	r1, #2
24014fc0:	4618      	mov	r0, r3
24014fc2:	f001 fe05 	bl	24016bd0 <RCCEx_PLL3_Config>
24014fc6:	4603      	mov	r3, r0
24014fc8:	2b00      	cmp	r3, #0
24014fca:	d001      	beq.n	24014fd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
24014fcc:	2301      	movs	r3, #1
24014fce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24014fd0:	687b      	ldr	r3, [r7, #4]
24014fd2:	681b      	ldr	r3, [r3, #0]
24014fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24014fd8:	2b00      	cmp	r3, #0
24014fda:	d033      	beq.n	24015044 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
24014fdc:	687b      	ldr	r3, [r7, #4]
24014fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24014fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24014fe4:	d017      	beq.n	24015016 <HAL_RCCEx_PeriphCLKConfig+0xd86>
24014fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24014fea:	d811      	bhi.n	24015010 <HAL_RCCEx_PeriphCLKConfig+0xd80>
24014fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24014ff0:	d013      	beq.n	2401501a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
24014ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24014ff6:	d80b      	bhi.n	24015010 <HAL_RCCEx_PeriphCLKConfig+0xd80>
24014ff8:	2b00      	cmp	r3, #0
24014ffa:	d010      	beq.n	2401501e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
24014ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015000:	d106      	bne.n	24015010 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24015002:	4b0e      	ldr	r3, [pc, #56]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015006:	4a0d      	ldr	r2, [pc, #52]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401500c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
2401500e:	e007      	b.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24015010:	2301      	movs	r3, #1
24015012:	75fb      	strb	r3, [r7, #23]
      break;
24015014:	e004      	b.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
24015016:	bf00      	nop
24015018:	e002      	b.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
2401501a:	bf00      	nop
2401501c:	e000      	b.n	24015020 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
2401501e:	bf00      	nop
    }

    if(ret == HAL_OK)
24015020:	7dfb      	ldrb	r3, [r7, #23]
24015022:	2b00      	cmp	r3, #0
24015024:	d10c      	bne.n	24015040 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24015026:	4b05      	ldr	r3, [pc, #20]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401502a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2401502e:	687b      	ldr	r3, [r7, #4]
24015030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24015032:	4902      	ldr	r1, [pc, #8]	; (2401503c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015034:	4313      	orrs	r3, r2
24015036:	654b      	str	r3, [r1, #84]	; 0x54
24015038:	e004      	b.n	24015044 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
2401503a:	bf00      	nop
2401503c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24015040:	7dfb      	ldrb	r3, [r7, #23]
24015042:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24015044:	687b      	ldr	r3, [r7, #4]
24015046:	681b      	ldr	r3, [r3, #0]
24015048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2401504c:	2b00      	cmp	r3, #0
2401504e:	d008      	beq.n	24015062 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24015050:	4b31      	ldr	r3, [pc, #196]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24015058:	687b      	ldr	r3, [r7, #4]
2401505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401505c:	492e      	ldr	r1, [pc, #184]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401505e:	4313      	orrs	r3, r2
24015060:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24015062:	687b      	ldr	r3, [r7, #4]
24015064:	681b      	ldr	r3, [r3, #0]
24015066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2401506a:	2b00      	cmp	r3, #0
2401506c:	d009      	beq.n	24015082 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
2401506e:	4b2a      	ldr	r3, [pc, #168]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015070:	691b      	ldr	r3, [r3, #16]
24015072:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
24015076:	687b      	ldr	r3, [r7, #4]
24015078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2401507c:	4926      	ldr	r1, [pc, #152]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401507e:	4313      	orrs	r3, r2
24015080:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24015082:	687b      	ldr	r3, [r7, #4]
24015084:	681b      	ldr	r3, [r3, #0]
24015086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2401508a:	2b00      	cmp	r3, #0
2401508c:	d008      	beq.n	240150a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2401508e:	4b22      	ldr	r3, [pc, #136]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015092:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
24015096:	687b      	ldr	r3, [r7, #4]
24015098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401509a:	491f      	ldr	r1, [pc, #124]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401509c:	4313      	orrs	r3, r2
2401509e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240150a0:	687b      	ldr	r3, [r7, #4]
240150a2:	681b      	ldr	r3, [r3, #0]
240150a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240150a8:	2b00      	cmp	r3, #0
240150aa:	d00d      	beq.n	240150c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240150ac:	4b1a      	ldr	r3, [pc, #104]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150ae:	691b      	ldr	r3, [r3, #16]
240150b0:	4a19      	ldr	r2, [pc, #100]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240150b6:	6113      	str	r3, [r2, #16]
240150b8:	4b17      	ldr	r3, [pc, #92]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150ba:	691a      	ldr	r2, [r3, #16]
240150bc:	687b      	ldr	r3, [r7, #4]
240150be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
240150c2:	4915      	ldr	r1, [pc, #84]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150c4:	4313      	orrs	r3, r2
240150c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240150c8:	687b      	ldr	r3, [r7, #4]
240150ca:	681b      	ldr	r3, [r3, #0]
240150cc:	2b00      	cmp	r3, #0
240150ce:	da08      	bge.n	240150e2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240150d0:	4b11      	ldr	r3, [pc, #68]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240150d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
240150d8:	687b      	ldr	r3, [r7, #4]
240150da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240150dc:	490e      	ldr	r1, [pc, #56]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150de:	4313      	orrs	r3, r2
240150e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
240150e2:	687b      	ldr	r3, [r7, #4]
240150e4:	681b      	ldr	r3, [r3, #0]
240150e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
240150ea:	2b00      	cmp	r3, #0
240150ec:	d009      	beq.n	24015102 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
240150ee:	4b0a      	ldr	r3, [pc, #40]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240150f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
240150f6:	687b      	ldr	r3, [r7, #4]
240150f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240150fc:	4906      	ldr	r1, [pc, #24]	; (24015118 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240150fe:	4313      	orrs	r3, r2
24015100:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
24015102:	7dbb      	ldrb	r3, [r7, #22]
24015104:	2b00      	cmp	r3, #0
24015106:	d101      	bne.n	2401510c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
24015108:	2300      	movs	r3, #0
2401510a:	e000      	b.n	2401510e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
2401510c:	2301      	movs	r3, #1
}
2401510e:	4618      	mov	r0, r3
24015110:	3718      	adds	r7, #24
24015112:	46bd      	mov	sp, r7
24015114:	bd80      	pop	{r7, pc}
24015116:	bf00      	nop
24015118:	58024400 	.word	0x58024400

2401511c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2401511c:	b480      	push	{r7}
2401511e:	b083      	sub	sp, #12
24015120:	af00      	add	r7, sp, #0
24015122:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
24015124:	687b      	ldr	r3, [r7, #4]
24015126:	4aa3      	ldr	r2, [pc, #652]	; (240153b4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
24015128:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
2401512a:	687b      	ldr	r3, [r7, #4]
2401512c:	681b      	ldr	r3, [r3, #0]
2401512e:	f043 0208 	orr.w	r2, r3, #8
24015132:	687b      	ldr	r3, [r7, #4]
24015134:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
24015136:	687b      	ldr	r3, [r7, #4]
24015138:	681b      	ldr	r3, [r3, #0]
2401513a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
2401513e:	687b      	ldr	r3, [r7, #4]
24015140:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
24015142:	687b      	ldr	r3, [r7, #4]
24015144:	681b      	ldr	r3, [r3, #0]
24015146:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
2401514a:	687b      	ldr	r3, [r7, #4]
2401514c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
2401514e:	687b      	ldr	r3, [r7, #4]
24015150:	681b      	ldr	r3, [r3, #0]
24015152:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24015156:	687b      	ldr	r3, [r7, #4]
24015158:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
2401515a:	687b      	ldr	r3, [r7, #4]
2401515c:	681b      	ldr	r3, [r3, #0]
2401515e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
24015162:	687b      	ldr	r3, [r7, #4]
24015164:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
24015166:	687b      	ldr	r3, [r7, #4]
24015168:	681b      	ldr	r3, [r3, #0]
2401516a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
2401516e:	687b      	ldr	r3, [r7, #4]
24015170:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
24015172:	687b      	ldr	r3, [r7, #4]
24015174:	681b      	ldr	r3, [r3, #0]
24015176:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
2401517a:	687b      	ldr	r3, [r7, #4]
2401517c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
2401517e:	4b8e      	ldr	r3, [pc, #568]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015182:	0d1b      	lsrs	r3, r3, #20
24015184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015188:	687b      	ldr	r3, [r7, #4]
2401518a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
2401518c:	4b8a      	ldr	r3, [pc, #552]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24015190:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015194:	1c5a      	adds	r2, r3, #1
24015196:	687b      	ldr	r3, [r7, #4]
24015198:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
2401519a:	4b87      	ldr	r3, [pc, #540]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401519e:	0e1b      	lsrs	r3, r3, #24
240151a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240151a4:	1c5a      	adds	r2, r3, #1
240151a6:	687b      	ldr	r3, [r7, #4]
240151a8:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
240151aa:	4b83      	ldr	r3, [pc, #524]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240151ae:	0a5b      	lsrs	r3, r3, #9
240151b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240151b4:	1c5a      	adds	r2, r3, #1
240151b6:	687b      	ldr	r3, [r7, #4]
240151b8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
240151ba:	4b7f      	ldr	r3, [pc, #508]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240151be:	0c1b      	lsrs	r3, r3, #16
240151c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240151c4:	1c5a      	adds	r2, r3, #1
240151c6:	687b      	ldr	r3, [r7, #4]
240151c8:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
240151ca:	4b7b      	ldr	r3, [pc, #492]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240151ce:	0a9b      	lsrs	r3, r3, #10
240151d0:	f003 0203 	and.w	r2, r3, #3
240151d4:	687b      	ldr	r3, [r7, #4]
240151d6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
240151d8:	4b77      	ldr	r3, [pc, #476]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240151dc:	0a5b      	lsrs	r3, r3, #9
240151de:	f003 0201 	and.w	r2, r3, #1
240151e2:	687b      	ldr	r3, [r7, #4]
240151e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
240151e6:	4b74      	ldr	r3, [pc, #464]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240151ea:	0b1b      	lsrs	r3, r3, #12
240151ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240151f0:	687b      	ldr	r3, [r7, #4]
240151f2:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
240151f4:	4b70      	ldr	r3, [pc, #448]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240151f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240151f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240151fc:	1c5a      	adds	r2, r3, #1
240151fe:	687b      	ldr	r3, [r7, #4]
24015200:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
24015202:	4b6d      	ldr	r3, [pc, #436]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015206:	0e1b      	lsrs	r3, r3, #24
24015208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401520c:	1c5a      	adds	r2, r3, #1
2401520e:	687b      	ldr	r3, [r7, #4]
24015210:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
24015212:	4b69      	ldr	r3, [pc, #420]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015216:	0a5b      	lsrs	r3, r3, #9
24015218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401521c:	1c5a      	adds	r2, r3, #1
2401521e:	687b      	ldr	r3, [r7, #4]
24015220:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
24015222:	4b65      	ldr	r3, [pc, #404]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015226:	0c1b      	lsrs	r3, r3, #16
24015228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401522c:	1c5a      	adds	r2, r3, #1
2401522e:	687b      	ldr	r3, [r7, #4]
24015230:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
24015232:	4b61      	ldr	r3, [pc, #388]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015236:	099b      	lsrs	r3, r3, #6
24015238:	f003 0203 	and.w	r2, r3, #3
2401523c:	687b      	ldr	r3, [r7, #4]
2401523e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
24015240:	4b5d      	ldr	r3, [pc, #372]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015244:	095b      	lsrs	r3, r3, #5
24015246:	f003 0201 	and.w	r2, r3, #1
2401524a:	687b      	ldr	r3, [r7, #4]
2401524c:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
2401524e:	4b5a      	ldr	r3, [pc, #360]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015252:	f003 0238 	and.w	r2, r3, #56	; 0x38
24015256:	687b      	ldr	r3, [r7, #4]
24015258:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
2401525a:	4b57      	ldr	r3, [pc, #348]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401525e:	f003 0207 	and.w	r2, r3, #7
24015262:	687b      	ldr	r3, [r7, #4]
24015264:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
24015266:	4b54      	ldr	r3, [pc, #336]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401526a:	f003 0207 	and.w	r2, r3, #7
2401526e:	687b      	ldr	r3, [r7, #4]
24015270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
24015274:	4b50      	ldr	r3, [pc, #320]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015278:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
2401527c:	687b      	ldr	r3, [r7, #4]
2401527e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
24015282:	4b4d      	ldr	r3, [pc, #308]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015286:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
2401528a:	687b      	ldr	r3, [r7, #4]
2401528c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
24015290:	4b49      	ldr	r3, [pc, #292]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015294:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
24015298:	687b      	ldr	r3, [r7, #4]
2401529a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
2401529e:	4b46      	ldr	r3, [pc, #280]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240152a2:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
240152a6:	687b      	ldr	r3, [r7, #4]
240152a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
240152ac:	4b42      	ldr	r3, [pc, #264]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240152b0:	f003 0207 	and.w	r2, r3, #7
240152b4:	687b      	ldr	r3, [r7, #4]
240152b6:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
240152b8:	4b3f      	ldr	r3, [pc, #252]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240152bc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
240152c0:	687b      	ldr	r3, [r7, #4]
240152c2:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
240152c4:	4b3c      	ldr	r3, [pc, #240]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240152c8:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
240152cc:	687b      	ldr	r3, [r7, #4]
240152ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
240152d2:	4b39      	ldr	r3, [pc, #228]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240152d6:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
240152da:	687b      	ldr	r3, [r7, #4]
240152dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
240152e0:	4b35      	ldr	r3, [pc, #212]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240152e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
240152e8:	687b      	ldr	r3, [r7, #4]
240152ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
240152ee:	4b32      	ldr	r3, [pc, #200]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240152f2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
240152f6:	687b      	ldr	r3, [r7, #4]
240152f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
240152fc:	4b2e      	ldr	r3, [pc, #184]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
24015304:	687b      	ldr	r3, [r7, #4]
24015306:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
24015308:	4b2b      	ldr	r3, [pc, #172]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401530c:	f403 7240 	and.w	r2, r3, #768	; 0x300
24015310:	687b      	ldr	r3, [r7, #4]
24015312:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
24015314:	4b28      	ldr	r3, [pc, #160]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015316:	691b      	ldr	r3, [r3, #16]
24015318:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
2401531c:	687b      	ldr	r3, [r7, #4]
2401531e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
24015322:	4b25      	ldr	r3, [pc, #148]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2401532a:	687b      	ldr	r3, [r7, #4]
2401532c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
24015330:	4b21      	ldr	r3, [pc, #132]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015334:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24015338:	687b      	ldr	r3, [r7, #4]
2401533a:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
2401533c:	4b1e      	ldr	r3, [pc, #120]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015340:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
24015344:	687b      	ldr	r3, [r7, #4]
24015346:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
24015348:	4b1b      	ldr	r3, [pc, #108]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401534c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24015350:	687b      	ldr	r3, [r7, #4]
24015352:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24015354:	4b18      	ldr	r3, [pc, #96]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015358:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
2401535c:	687b      	ldr	r3, [r7, #4]
2401535e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
24015360:	4b15      	ldr	r3, [pc, #84]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015364:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
24015368:	687b      	ldr	r3, [r7, #4]
2401536a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
2401536c:	4b12      	ldr	r3, [pc, #72]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015370:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24015374:	687b      	ldr	r3, [r7, #4]
24015376:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
2401537a:	4b0f      	ldr	r3, [pc, #60]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401537e:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
24015382:	687b      	ldr	r3, [r7, #4]
24015384:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
24015386:	4b0c      	ldr	r3, [pc, #48]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401538a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2401538e:	687b      	ldr	r3, [r7, #4]
24015390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
24015394:	4b08      	ldr	r3, [pc, #32]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015398:	f003 0203 	and.w	r2, r3, #3
2401539c:	687b      	ldr	r3, [r7, #4]
2401539e:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
240153a0:	4b05      	ldr	r3, [pc, #20]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240153a4:	f003 0230 	and.w	r2, r3, #48	; 0x30
240153a8:	687b      	ldr	r3, [r7, #4]
240153aa:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
240153ac:	4b02      	ldr	r3, [pc, #8]	; (240153b8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240153b0:	e004      	b.n	240153bc <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
240153b2:	bf00      	nop
240153b4:	c9fff1f7 	.word	0xc9fff1f7
240153b8:	58024400 	.word	0x58024400
240153bc:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
240153c0:	687b      	ldr	r3, [r7, #4]
240153c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
240153c4:	4b0a      	ldr	r3, [pc, #40]	; (240153f0 <HAL_RCCEx_GetPeriphCLKConfig+0x2d4>)
240153c6:	691b      	ldr	r3, [r3, #16]
240153c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
240153cc:	2b00      	cmp	r3, #0
240153ce:	d104      	bne.n	240153da <HAL_RCCEx_GetPeriphCLKConfig+0x2be>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
240153d0:	687b      	ldr	r3, [r7, #4]
240153d2:	2200      	movs	r2, #0
240153d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
240153d8:	e004      	b.n	240153e4 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240153da:	687b      	ldr	r3, [r7, #4]
240153dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
240153e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
240153e4:	bf00      	nop
240153e6:	370c      	adds	r7, #12
240153e8:	46bd      	mov	sp, r7
240153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240153ee:	4770      	bx	lr
240153f0:	58024400 	.word	0x58024400

240153f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
240153f4:	b580      	push	{r7, lr}
240153f6:	b090      	sub	sp, #64	; 0x40
240153f8:	af00      	add	r7, sp, #0
240153fa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240153fc:	687b      	ldr	r3, [r7, #4]
240153fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015402:	f040 8095 	bne.w	24015530 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
24015406:	4b97      	ldr	r3, [pc, #604]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401540a:	f003 0307 	and.w	r3, r3, #7
2401540e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015412:	2b04      	cmp	r3, #4
24015414:	f200 8088 	bhi.w	24015528 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
24015418:	a201      	add	r2, pc, #4	; (adr r2, 24015420 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
2401541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2401541e:	bf00      	nop
24015420:	24015435 	.word	0x24015435
24015424:	2401545d 	.word	0x2401545d
24015428:	24015485 	.word	0x24015485
2401542c:	24015521 	.word	0x24015521
24015430:	240154ad 	.word	0x240154ad
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015434:	4b8b      	ldr	r3, [pc, #556]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015436:	681b      	ldr	r3, [r3, #0]
24015438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401543c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015440:	d108      	bne.n	24015454 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015442:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015446:	4618      	mov	r0, r3
24015448:	f000 ff7a 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
2401544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2401544e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015450:	f000 bc94 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015454:	2300      	movs	r3, #0
24015456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015458:	f000 bc90 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401545c:	4b81      	ldr	r3, [pc, #516]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401545e:	681b      	ldr	r3, [r3, #0]
24015460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015468:	d108      	bne.n	2401547c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401546a:	f107 0318 	add.w	r3, r7, #24
2401546e:	4618      	mov	r0, r3
24015470:	f000 fcbe 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015474:	69bb      	ldr	r3, [r7, #24]
24015476:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015478:	f000 bc80 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401547c:	2300      	movs	r3, #0
2401547e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015480:	f000 bc7c 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015484:	4b77      	ldr	r3, [pc, #476]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015486:	681b      	ldr	r3, [r3, #0]
24015488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401548c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015490:	d108      	bne.n	240154a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015492:	f107 030c 	add.w	r3, r7, #12
24015496:	4618      	mov	r0, r3
24015498:	f000 fdfe 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2401549c:	68fb      	ldr	r3, [r7, #12]
2401549e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240154a0:	f000 bc6c 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240154a4:	2300      	movs	r3, #0
240154a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240154a8:	f000 bc68 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240154ac:	4b6d      	ldr	r3, [pc, #436]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240154b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240154b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240154b6:	4b6b      	ldr	r3, [pc, #428]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154b8:	681b      	ldr	r3, [r3, #0]
240154ba:	f003 0304 	and.w	r3, r3, #4
240154be:	2b04      	cmp	r3, #4
240154c0:	d10c      	bne.n	240154dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
240154c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240154c4:	2b00      	cmp	r3, #0
240154c6:	d109      	bne.n	240154dc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240154c8:	4b66      	ldr	r3, [pc, #408]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154ca:	681b      	ldr	r3, [r3, #0]
240154cc:	08db      	lsrs	r3, r3, #3
240154ce:	f003 0303 	and.w	r3, r3, #3
240154d2:	4a65      	ldr	r2, [pc, #404]	; (24015668 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
240154d4:	fa22 f303 	lsr.w	r3, r2, r3
240154d8:	63fb      	str	r3, [r7, #60]	; 0x3c
240154da:	e01f      	b.n	2401551c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240154dc:	4b61      	ldr	r3, [pc, #388]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154de:	681b      	ldr	r3, [r3, #0]
240154e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
240154e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240154e8:	d106      	bne.n	240154f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
240154ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240154ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240154f0:	d102      	bne.n	240154f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
240154f2:	4b5e      	ldr	r3, [pc, #376]	; (2401566c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240154f4:	63fb      	str	r3, [r7, #60]	; 0x3c
240154f6:	e011      	b.n	2401551c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240154f8:	4b5a      	ldr	r3, [pc, #360]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154fa:	681b      	ldr	r3, [r3, #0]
240154fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015504:	d106      	bne.n	24015514 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
24015506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401550c:	d102      	bne.n	24015514 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2401550e:	4b58      	ldr	r3, [pc, #352]	; (24015670 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
24015510:	63fb      	str	r3, [r7, #60]	; 0x3c
24015512:	e003      	b.n	2401551c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015514:	2300      	movs	r3, #0
24015516:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015518:	f000 bc30 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2401551c:	f000 bc2e 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015520:	4b54      	ldr	r3, [pc, #336]	; (24015674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
24015522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015524:	f000 bc2a 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015528:	2300      	movs	r3, #0
2401552a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401552c:	f000 bc26 	b.w	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24015530:	687b      	ldr	r3, [r7, #4]
24015532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24015536:	f040 809f 	bne.w	24015678 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
2401553a:	4b4a      	ldr	r3, [pc, #296]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401553c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401553e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
24015542:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24015544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401554a:	d04d      	beq.n	240155e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
2401554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015552:	f200 8084 	bhi.w	2401565e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015558:	2bc0      	cmp	r3, #192	; 0xc0
2401555a:	d07d      	beq.n	24015658 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2401555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401555e:	2bc0      	cmp	r3, #192	; 0xc0
24015560:	d87d      	bhi.n	2401565e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015564:	2b80      	cmp	r3, #128	; 0x80
24015566:	d02d      	beq.n	240155c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
24015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401556a:	2b80      	cmp	r3, #128	; 0x80
2401556c:	d877      	bhi.n	2401565e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
2401556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015570:	2b00      	cmp	r3, #0
24015572:	d003      	beq.n	2401557c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24015574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015576:	2b40      	cmp	r3, #64	; 0x40
24015578:	d012      	beq.n	240155a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
2401557a:	e070      	b.n	2401565e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401557c:	4b39      	ldr	r3, [pc, #228]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401557e:	681b      	ldr	r3, [r3, #0]
24015580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015588:	d107      	bne.n	2401559a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2401558a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401558e:	4618      	mov	r0, r3
24015590:	f000 fed6 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015594:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015598:	e3f0      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401559a:	2300      	movs	r3, #0
2401559c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401559e:	e3ed      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240155a0:	4b30      	ldr	r3, [pc, #192]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155a2:	681b      	ldr	r3, [r3, #0]
240155a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240155a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240155ac:	d107      	bne.n	240155be <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240155ae:	f107 0318 	add.w	r3, r7, #24
240155b2:	4618      	mov	r0, r3
240155b4:	f000 fc1c 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240155b8:	69bb      	ldr	r3, [r7, #24]
240155ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240155bc:	e3de      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240155be:	2300      	movs	r3, #0
240155c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240155c2:	e3db      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240155c4:	4b27      	ldr	r3, [pc, #156]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155c6:	681b      	ldr	r3, [r3, #0]
240155c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240155cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240155d0:	d107      	bne.n	240155e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240155d2:	f107 030c 	add.w	r3, r7, #12
240155d6:	4618      	mov	r0, r3
240155d8:	f000 fd5e 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240155dc:	68fb      	ldr	r3, [r7, #12]
240155de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240155e0:	e3cc      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240155e2:	2300      	movs	r3, #0
240155e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240155e6:	e3c9      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240155e8:	4b1e      	ldr	r3, [pc, #120]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240155ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240155f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240155f2:	4b1c      	ldr	r3, [pc, #112]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155f4:	681b      	ldr	r3, [r3, #0]
240155f6:	f003 0304 	and.w	r3, r3, #4
240155fa:	2b04      	cmp	r3, #4
240155fc:	d10c      	bne.n	24015618 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
240155fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015600:	2b00      	cmp	r3, #0
24015602:	d109      	bne.n	24015618 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015604:	4b17      	ldr	r3, [pc, #92]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015606:	681b      	ldr	r3, [r3, #0]
24015608:	08db      	lsrs	r3, r3, #3
2401560a:	f003 0303 	and.w	r3, r3, #3
2401560e:	4a16      	ldr	r2, [pc, #88]	; (24015668 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
24015610:	fa22 f303 	lsr.w	r3, r2, r3
24015614:	63fb      	str	r3, [r7, #60]	; 0x3c
24015616:	e01e      	b.n	24015656 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015618:	4b12      	ldr	r3, [pc, #72]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401561a:	681b      	ldr	r3, [r3, #0]
2401561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015624:	d106      	bne.n	24015634 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
24015626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2401562c:	d102      	bne.n	24015634 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2401562e:	4b0f      	ldr	r3, [pc, #60]	; (2401566c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24015630:	63fb      	str	r3, [r7, #60]	; 0x3c
24015632:	e010      	b.n	24015656 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015634:	4b0b      	ldr	r3, [pc, #44]	; (24015664 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015636:	681b      	ldr	r3, [r3, #0]
24015638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2401563c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015640:	d106      	bne.n	24015650 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
24015642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015648:	d102      	bne.n	24015650 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2401564a:	4b09      	ldr	r3, [pc, #36]	; (24015670 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2401564c:	63fb      	str	r3, [r7, #60]	; 0x3c
2401564e:	e002      	b.n	24015656 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015650:	2300      	movs	r3, #0
24015652:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015654:	e392      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015656:	e391      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015658:	4b06      	ldr	r3, [pc, #24]	; (24015674 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2401565a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401565c:	e38e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
2401565e:	2300      	movs	r3, #0
24015660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015662:	e38b      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015664:	58024400 	.word	0x58024400
24015668:	03d09000 	.word	0x03d09000
2401566c:	003d0900 	.word	0x003d0900
24015670:	016e3600 	.word	0x016e3600
24015674:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24015678:	687b      	ldr	r3, [r7, #4]
2401567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401567e:	f040 809c 	bne.w	240157ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
24015682:	4b9d      	ldr	r3, [pc, #628]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015686:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
2401568a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2401568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401568e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24015692:	d054      	beq.n	2401573e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
24015694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401569a:	f200 808b 	bhi.w	240157b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
2401569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240156a4:	f000 8083 	beq.w	240157ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
240156a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240156ae:	f200 8081 	bhi.w	240157b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
240156b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240156b8:	d02f      	beq.n	2401571a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
240156ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240156c0:	d878      	bhi.n	240157b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
240156c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156c4:	2b00      	cmp	r3, #0
240156c6:	d004      	beq.n	240156d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
240156c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240156ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240156ce:	d012      	beq.n	240156f6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
240156d0:	e070      	b.n	240157b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240156d2:	4b89      	ldr	r3, [pc, #548]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240156d4:	681b      	ldr	r3, [r3, #0]
240156d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240156da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240156de:	d107      	bne.n	240156f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240156e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
240156e4:	4618      	mov	r0, r3
240156e6:	f000 fe2b 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240156ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
240156ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240156ee:	e345      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240156f0:	2300      	movs	r3, #0
240156f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240156f4:	e342      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240156f6:	4b80      	ldr	r3, [pc, #512]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240156f8:	681b      	ldr	r3, [r3, #0]
240156fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240156fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015702:	d107      	bne.n	24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015704:	f107 0318 	add.w	r3, r7, #24
24015708:	4618      	mov	r0, r3
2401570a:	f000 fb71 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2401570e:	69bb      	ldr	r3, [r7, #24]
24015710:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015712:	e333      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015714:	2300      	movs	r3, #0
24015716:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015718:	e330      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401571a:	4b77      	ldr	r3, [pc, #476]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401571c:	681b      	ldr	r3, [r3, #0]
2401571e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015726:	d107      	bne.n	24015738 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015728:	f107 030c 	add.w	r3, r7, #12
2401572c:	4618      	mov	r0, r3
2401572e:	f000 fcb3 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015732:	68fb      	ldr	r3, [r7, #12]
24015734:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015736:	e321      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015738:	2300      	movs	r3, #0
2401573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401573c:	e31e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2401573e:	4b6e      	ldr	r3, [pc, #440]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015746:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015748:	4b6b      	ldr	r3, [pc, #428]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401574a:	681b      	ldr	r3, [r3, #0]
2401574c:	f003 0304 	and.w	r3, r3, #4
24015750:	2b04      	cmp	r3, #4
24015752:	d10c      	bne.n	2401576e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
24015754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015756:	2b00      	cmp	r3, #0
24015758:	d109      	bne.n	2401576e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2401575a:	4b67      	ldr	r3, [pc, #412]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401575c:	681b      	ldr	r3, [r3, #0]
2401575e:	08db      	lsrs	r3, r3, #3
24015760:	f003 0303 	and.w	r3, r3, #3
24015764:	4a65      	ldr	r2, [pc, #404]	; (240158fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
24015766:	fa22 f303 	lsr.w	r3, r2, r3
2401576a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401576c:	e01e      	b.n	240157ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2401576e:	4b62      	ldr	r3, [pc, #392]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015770:	681b      	ldr	r3, [r3, #0]
24015772:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401577a:	d106      	bne.n	2401578a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
2401577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401577e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015782:	d102      	bne.n	2401578a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015784:	4b5e      	ldr	r3, [pc, #376]	; (24015900 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
24015786:	63fb      	str	r3, [r7, #60]	; 0x3c
24015788:	e010      	b.n	240157ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401578a:	4b5b      	ldr	r3, [pc, #364]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401578c:	681b      	ldr	r3, [r3, #0]
2401578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015796:	d106      	bne.n	240157a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
24015798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401579a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401579e:	d102      	bne.n	240157a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
240157a0:	4b58      	ldr	r3, [pc, #352]	; (24015904 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
240157a2:	63fb      	str	r3, [r7, #60]	; 0x3c
240157a4:	e002      	b.n	240157ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
240157a6:	2300      	movs	r3, #0
240157a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
240157aa:	e2e7      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240157ac:	e2e6      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
240157ae:	4b56      	ldr	r3, [pc, #344]	; (24015908 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240157b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240157b2:	e2e3      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
240157b4:	2300      	movs	r3, #0
240157b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240157b8:	e2e0      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
240157ba:	687b      	ldr	r3, [r7, #4]
240157bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
240157c0:	f040 80a7 	bne.w	24015912 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
240157c4:	4b4c      	ldr	r3, [pc, #304]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240157c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240157c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
240157cc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
240157ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240157d4:	d055      	beq.n	24015882 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
240157d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240157dc:	f200 8096 	bhi.w	2401590c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
240157e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240157e6:	f000 8084 	beq.w	240158f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
240157ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240157f0:	f200 808c 	bhi.w	2401590c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
240157f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240157fa:	d030      	beq.n	2401585e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
240157fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240157fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015802:	f200 8083 	bhi.w	2401590c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
24015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015808:	2b00      	cmp	r3, #0
2401580a:	d004      	beq.n	24015816 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
2401580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401580e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24015812:	d012      	beq.n	2401583a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
24015814:	e07a      	b.n	2401590c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015816:	4b38      	ldr	r3, [pc, #224]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015818:	681b      	ldr	r3, [r3, #0]
2401581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401581e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015822:	d107      	bne.n	24015834 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015824:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015828:	4618      	mov	r0, r3
2401582a:	f000 fd89 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2401582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015830:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015832:	e2a3      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015834:	2300      	movs	r3, #0
24015836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015838:	e2a0      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401583a:	4b2f      	ldr	r3, [pc, #188]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401583c:	681b      	ldr	r3, [r3, #0]
2401583e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015846:	d107      	bne.n	24015858 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015848:	f107 0318 	add.w	r3, r7, #24
2401584c:	4618      	mov	r0, r3
2401584e:	f000 facf 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015852:	69bb      	ldr	r3, [r7, #24]
24015854:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
24015856:	e291      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015858:	2300      	movs	r3, #0
2401585a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401585c:	e28e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401585e:	4b26      	ldr	r3, [pc, #152]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015860:	681b      	ldr	r3, [r3, #0]
24015862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401586a:	d107      	bne.n	2401587c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2401586c:	f107 030c 	add.w	r3, r7, #12
24015870:	4618      	mov	r0, r3
24015872:	f000 fc11 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015876:	68fb      	ldr	r3, [r7, #12]
24015878:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2401587a:	e27f      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401587c:	2300      	movs	r3, #0
2401587e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015880:	e27c      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015882:	4b1d      	ldr	r3, [pc, #116]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015886:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2401588a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2401588c:	4b1a      	ldr	r3, [pc, #104]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401588e:	681b      	ldr	r3, [r3, #0]
24015890:	f003 0304 	and.w	r3, r3, #4
24015894:	2b04      	cmp	r3, #4
24015896:	d10c      	bne.n	240158b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
24015898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401589a:	2b00      	cmp	r3, #0
2401589c:	d109      	bne.n	240158b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2401589e:	4b16      	ldr	r3, [pc, #88]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240158a0:	681b      	ldr	r3, [r3, #0]
240158a2:	08db      	lsrs	r3, r3, #3
240158a4:	f003 0303 	and.w	r3, r3, #3
240158a8:	4a14      	ldr	r2, [pc, #80]	; (240158fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
240158aa:	fa22 f303 	lsr.w	r3, r2, r3
240158ae:	63fb      	str	r3, [r7, #60]	; 0x3c
240158b0:	e01e      	b.n	240158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240158b2:	4b11      	ldr	r3, [pc, #68]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240158b4:	681b      	ldr	r3, [r3, #0]
240158b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
240158ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240158be:	d106      	bne.n	240158ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
240158c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240158c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240158c6:	d102      	bne.n	240158ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
240158c8:	4b0d      	ldr	r3, [pc, #52]	; (24015900 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
240158ca:	63fb      	str	r3, [r7, #60]	; 0x3c
240158cc:	e010      	b.n	240158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240158ce:	4b0a      	ldr	r3, [pc, #40]	; (240158f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240158d0:	681b      	ldr	r3, [r3, #0]
240158d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240158d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240158da:	d106      	bne.n	240158ea <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
240158dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240158de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240158e2:	d102      	bne.n	240158ea <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
240158e4:	4b07      	ldr	r3, [pc, #28]	; (24015904 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
240158e6:	63fb      	str	r3, [r7, #60]	; 0x3c
240158e8:	e002      	b.n	240158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
240158ea:	2300      	movs	r3, #0
240158ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
240158ee:	e245      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240158f0:	e244      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
240158f2:	4b05      	ldr	r3, [pc, #20]	; (24015908 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240158f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240158f6:	e241      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240158f8:	58024400 	.word	0x58024400
240158fc:	03d09000 	.word	0x03d09000
24015900:	003d0900 	.word	0x003d0900
24015904:	016e3600 	.word	0x016e3600
24015908:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
2401590c:	2300      	movs	r3, #0
2401590e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015910:	e234      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24015912:	687b      	ldr	r3, [r7, #4]
24015914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24015918:	f040 809c 	bne.w	24015a54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
2401591c:	4b9b      	ldr	r3, [pc, #620]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015920:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
24015924:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2401592c:	d054      	beq.n	240159d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
2401592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24015934:	f200 808b 	bhi.w	24015a4e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
24015938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401593a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2401593e:	f000 8083 	beq.w	24015a48 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
24015942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24015948:	f200 8081 	bhi.w	24015a4e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
2401594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401594e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24015952:	d02f      	beq.n	240159b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
24015954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2401595a:	d878      	bhi.n	24015a4e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
2401595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2401595e:	2b00      	cmp	r3, #0
24015960:	d004      	beq.n	2401596c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
24015962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24015968:	d012      	beq.n	24015990 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
2401596a:	e070      	b.n	24015a4e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401596c:	4b87      	ldr	r3, [pc, #540]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
2401596e:	681b      	ldr	r3, [r3, #0]
24015970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015978:	d107      	bne.n	2401598a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2401597a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401597e:	4618      	mov	r0, r3
24015980:	f000 fcde 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015984:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015988:	e1f8      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401598a:	2300      	movs	r3, #0
2401598c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401598e:	e1f5      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015990:	4b7e      	ldr	r3, [pc, #504]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015992:	681b      	ldr	r3, [r3, #0]
24015994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2401599c:	d107      	bne.n	240159ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401599e:	f107 0318 	add.w	r3, r7, #24
240159a2:	4618      	mov	r0, r3
240159a4:	f000 fa24 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240159a8:	69bb      	ldr	r3, [r7, #24]
240159aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240159ac:	e1e6      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240159ae:	2300      	movs	r3, #0
240159b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240159b2:	e1e3      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240159b4:	4b75      	ldr	r3, [pc, #468]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240159b6:	681b      	ldr	r3, [r3, #0]
240159b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240159bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240159c0:	d107      	bne.n	240159d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240159c2:	f107 030c 	add.w	r3, r7, #12
240159c6:	4618      	mov	r0, r3
240159c8:	f000 fb66 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240159cc:	68fb      	ldr	r3, [r7, #12]
240159ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240159d0:	e1d4      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240159d2:	2300      	movs	r3, #0
240159d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240159d6:	e1d1      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240159d8:	4b6c      	ldr	r3, [pc, #432]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240159da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240159dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240159e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240159e2:	4b6a      	ldr	r3, [pc, #424]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240159e4:	681b      	ldr	r3, [r3, #0]
240159e6:	f003 0304 	and.w	r3, r3, #4
240159ea:	2b04      	cmp	r3, #4
240159ec:	d10c      	bne.n	24015a08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
240159ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240159f0:	2b00      	cmp	r3, #0
240159f2:	d109      	bne.n	24015a08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240159f4:	4b65      	ldr	r3, [pc, #404]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240159f6:	681b      	ldr	r3, [r3, #0]
240159f8:	08db      	lsrs	r3, r3, #3
240159fa:	f003 0303 	and.w	r3, r3, #3
240159fe:	4a64      	ldr	r2, [pc, #400]	; (24015b90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24015a00:	fa22 f303 	lsr.w	r3, r2, r3
24015a04:	63fb      	str	r3, [r7, #60]	; 0x3c
24015a06:	e01e      	b.n	24015a46 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015a08:	4b60      	ldr	r3, [pc, #384]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a0a:	681b      	ldr	r3, [r3, #0]
24015a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015a14:	d106      	bne.n	24015a24 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
24015a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015a1c:	d102      	bne.n	24015a24 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015a1e:	4b5d      	ldr	r3, [pc, #372]	; (24015b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24015a20:	63fb      	str	r3, [r7, #60]	; 0x3c
24015a22:	e010      	b.n	24015a46 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015a24:	4b59      	ldr	r3, [pc, #356]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a26:	681b      	ldr	r3, [r3, #0]
24015a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015a30:	d106      	bne.n	24015a40 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
24015a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015a38:	d102      	bne.n	24015a40 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015a3a:	4b57      	ldr	r3, [pc, #348]	; (24015b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
24015a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
24015a3e:	e002      	b.n	24015a46 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015a40:	2300      	movs	r3, #0
24015a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015a44:	e19a      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015a46:	e199      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015a48:	4b54      	ldr	r3, [pc, #336]	; (24015b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24015a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015a4c:	e196      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015a4e:	2300      	movs	r3, #0
24015a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015a52:	e193      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24015a54:	687b      	ldr	r3, [r7, #4]
24015a56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24015a5a:	d173      	bne.n	24015b44 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
24015a5c:	4b4b      	ldr	r3, [pc, #300]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24015a64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015a6c:	d02f      	beq.n	24015ace <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
24015a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015a74:	d863      	bhi.n	24015b3e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
24015a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a78:	2b00      	cmp	r3, #0
24015a7a:	d004      	beq.n	24015a86 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
24015a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015a82:	d012      	beq.n	24015aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
24015a84:	e05b      	b.n	24015b3e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015a86:	4b41      	ldr	r3, [pc, #260]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a88:	681b      	ldr	r3, [r3, #0]
24015a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015a92:	d107      	bne.n	24015aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015a94:	f107 0318 	add.w	r3, r7, #24
24015a98:	4618      	mov	r0, r3
24015a9a:	f000 f9a9 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015a9e:	69bb      	ldr	r3, [r7, #24]
24015aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015aa2:	e16b      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015aa4:	2300      	movs	r3, #0
24015aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015aa8:	e168      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015aaa:	4b38      	ldr	r3, [pc, #224]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015aac:	681b      	ldr	r3, [r3, #0]
24015aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015ab6:	d107      	bne.n	24015ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015ab8:	f107 030c 	add.w	r3, r7, #12
24015abc:	4618      	mov	r0, r3
24015abe:	f000 faeb 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24015ac2:	697b      	ldr	r3, [r7, #20]
24015ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015ac6:	e159      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015ac8:	2300      	movs	r3, #0
24015aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015acc:	e156      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015ace:	4b2f      	ldr	r3, [pc, #188]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015ad6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015ad8:	4b2c      	ldr	r3, [pc, #176]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015ada:	681b      	ldr	r3, [r3, #0]
24015adc:	f003 0304 	and.w	r3, r3, #4
24015ae0:	2b04      	cmp	r3, #4
24015ae2:	d10c      	bne.n	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
24015ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015ae6:	2b00      	cmp	r3, #0
24015ae8:	d109      	bne.n	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015aea:	4b28      	ldr	r3, [pc, #160]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015aec:	681b      	ldr	r3, [r3, #0]
24015aee:	08db      	lsrs	r3, r3, #3
24015af0:	f003 0303 	and.w	r3, r3, #3
24015af4:	4a26      	ldr	r2, [pc, #152]	; (24015b90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24015af6:	fa22 f303 	lsr.w	r3, r2, r3
24015afa:	63fb      	str	r3, [r7, #60]	; 0x3c
24015afc:	e01e      	b.n	24015b3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015afe:	4b23      	ldr	r3, [pc, #140]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b00:	681b      	ldr	r3, [r3, #0]
24015b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015b0a:	d106      	bne.n	24015b1a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
24015b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015b12:	d102      	bne.n	24015b1a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015b14:	4b1f      	ldr	r3, [pc, #124]	; (24015b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24015b16:	63fb      	str	r3, [r7, #60]	; 0x3c
24015b18:	e010      	b.n	24015b3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015b1a:	4b1c      	ldr	r3, [pc, #112]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b1c:	681b      	ldr	r3, [r3, #0]
24015b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015b26:	d106      	bne.n	24015b36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
24015b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015b2e:	d102      	bne.n	24015b36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015b30:	4b19      	ldr	r3, [pc, #100]	; (24015b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
24015b32:	63fb      	str	r3, [r7, #60]	; 0x3c
24015b34:	e002      	b.n	24015b3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015b36:	2300      	movs	r3, #0
24015b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015b3a:	e11f      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015b3c:	e11e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015b3e:	2300      	movs	r3, #0
24015b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015b42:	e11b      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24015b44:	687b      	ldr	r3, [r7, #4]
24015b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015b4a:	d13e      	bne.n	24015bca <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
24015b4c:	4b0f      	ldr	r3, [pc, #60]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24015b54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b58:	2b00      	cmp	r3, #0
24015b5a:	d004      	beq.n	24015b66 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
24015b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015b62:	d01d      	beq.n	24015ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
24015b64:	e02e      	b.n	24015bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015b66:	4b09      	ldr	r3, [pc, #36]	; (24015b8c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b68:	681b      	ldr	r3, [r3, #0]
24015b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015b72:	d107      	bne.n	24015b84 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015b78:	4618      	mov	r0, r3
24015b7a:	f000 fbe1 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015b82:	e0fb      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015b84:	2300      	movs	r3, #0
24015b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015b88:	e0f8      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015b8a:	bf00      	nop
24015b8c:	58024400 	.word	0x58024400
24015b90:	03d09000 	.word	0x03d09000
24015b94:	003d0900 	.word	0x003d0900
24015b98:	016e3600 	.word	0x016e3600
24015b9c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015ba0:	4b79      	ldr	r3, [pc, #484]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015ba2:	681b      	ldr	r3, [r3, #0]
24015ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015bac:	d107      	bne.n	24015bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015bae:	f107 0318 	add.w	r3, r7, #24
24015bb2:	4618      	mov	r0, r3
24015bb4:	f000 f91c 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24015bb8:	6a3b      	ldr	r3, [r7, #32]
24015bba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015bbc:	e0de      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015bbe:	2300      	movs	r3, #0
24015bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015bc2:	e0db      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015bc4:	2300      	movs	r3, #0
24015bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015bc8:	e0d8      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24015bca:	687b      	ldr	r3, [r7, #4]
24015bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24015bd0:	f040 8085 	bne.w	24015cde <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
24015bd4:	4b6c      	ldr	r3, [pc, #432]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015bd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
24015bdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24015be4:	d06b      	beq.n	24015cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
24015be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24015bec:	d874      	bhi.n	24015cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015bf4:	d056      	beq.n	24015ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
24015bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015bfc:	d86c      	bhi.n	24015cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24015c04:	d03b      	beq.n	24015c7e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
24015c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24015c0c:	d864      	bhi.n	24015cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015c14:	d021      	beq.n	24015c5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
24015c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015c1c:	d85c      	bhi.n	24015cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c20:	2b00      	cmp	r3, #0
24015c22:	d004      	beq.n	24015c2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
24015c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015c2a:	d004      	beq.n	24015c36 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
24015c2c:	e054      	b.n	24015cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
24015c2e:	f000 f8c9 	bl	24015dc4 <HAL_RCCEx_GetD3PCLK1Freq>
24015c32:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
24015c34:	e0a2      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015c36:	4b54      	ldr	r3, [pc, #336]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c38:	681b      	ldr	r3, [r3, #0]
24015c3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015c42:	d107      	bne.n	24015c54 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015c44:	f107 0318 	add.w	r3, r7, #24
24015c48:	4618      	mov	r0, r3
24015c4a:	f000 f8d1 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24015c4e:	69fb      	ldr	r3, [r7, #28]
24015c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015c52:	e093      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015c54:	2300      	movs	r3, #0
24015c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c58:	e090      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015c5a:	4b4b      	ldr	r3, [pc, #300]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c5c:	681b      	ldr	r3, [r3, #0]
24015c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015c66:	d107      	bne.n	24015c78 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015c68:	f107 030c 	add.w	r3, r7, #12
24015c6c:	4618      	mov	r0, r3
24015c6e:	f000 fa13 	bl	24016098 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24015c72:	693b      	ldr	r3, [r7, #16]
24015c74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015c76:	e081      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015c78:	2300      	movs	r3, #0
24015c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c7c:	e07e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24015c7e:	4b42      	ldr	r3, [pc, #264]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c80:	681b      	ldr	r3, [r3, #0]
24015c82:	f003 0304 	and.w	r3, r3, #4
24015c86:	2b04      	cmp	r3, #4
24015c88:	d109      	bne.n	24015c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015c8a:	4b3f      	ldr	r3, [pc, #252]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c8c:	681b      	ldr	r3, [r3, #0]
24015c8e:	08db      	lsrs	r3, r3, #3
24015c90:	f003 0303 	and.w	r3, r3, #3
24015c94:	4a3d      	ldr	r2, [pc, #244]	; (24015d8c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
24015c96:	fa22 f303 	lsr.w	r3, r2, r3
24015c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015c9c:	e06e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015c9e:	2300      	movs	r3, #0
24015ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015ca2:	e06b      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24015ca4:	4b38      	ldr	r3, [pc, #224]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015ca6:	681b      	ldr	r3, [r3, #0]
24015ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015cb0:	d102      	bne.n	24015cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
24015cb2:	4b37      	ldr	r3, [pc, #220]	; (24015d90 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24015cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015cb6:	e061      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015cb8:	2300      	movs	r3, #0
24015cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015cbc:	e05e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24015cbe:	4b32      	ldr	r3, [pc, #200]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015cc0:	681b      	ldr	r3, [r3, #0]
24015cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015cca:	d102      	bne.n	24015cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
24015ccc:	4b31      	ldr	r3, [pc, #196]	; (24015d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24015cce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015cd0:	e054      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015cd2:	2300      	movs	r3, #0
24015cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015cd6:	e051      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
24015cd8:	2300      	movs	r3, #0
24015cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015cdc:	e04e      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24015cde:	687b      	ldr	r3, [r7, #4]
24015ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24015ce4:	d148      	bne.n	24015d78 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
24015ce6:	4b28      	ldr	r3, [pc, #160]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015cee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015cf6:	d02a      	beq.n	24015d4e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
24015cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015cfe:	d838      	bhi.n	24015d72 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
24015d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015d02:	2b00      	cmp	r3, #0
24015d04:	d004      	beq.n	24015d10 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
24015d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015d0c:	d00d      	beq.n	24015d2a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
24015d0e:	e030      	b.n	24015d72 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24015d10:	4b1d      	ldr	r3, [pc, #116]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d12:	681b      	ldr	r3, [r3, #0]
24015d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015d1c:	d102      	bne.n	24015d24 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
24015d1e:	4b1d      	ldr	r3, [pc, #116]	; (24015d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24015d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d22:	e02b      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d24:	2300      	movs	r3, #0
24015d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d28:	e028      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015d2a:	4b17      	ldr	r3, [pc, #92]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d2c:	681b      	ldr	r3, [r3, #0]
24015d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015d36:	d107      	bne.n	24015d48 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015d3c:	4618      	mov	r0, r3
24015d3e:	f000 faff 	bl	24016340 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015d44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d46:	e019      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d48:	2300      	movs	r3, #0
24015d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d4c:	e016      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015d4e:	4b0e      	ldr	r3, [pc, #56]	; (24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d50:	681b      	ldr	r3, [r3, #0]
24015d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015d5a:	d107      	bne.n	24015d6c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015d5c:	f107 0318 	add.w	r3, r7, #24
24015d60:	4618      	mov	r0, r3
24015d62:	f000 f845 	bl	24015df0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24015d66:	69fb      	ldr	r3, [r7, #28]
24015d68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d6a:	e007      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d6c:	2300      	movs	r3, #0
24015d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d70:	e004      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015d72:	2300      	movs	r3, #0
24015d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d76:	e001      	b.n	24015d7c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
24015d78:	2300      	movs	r3, #0
24015d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
24015d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
24015d7e:	4618      	mov	r0, r3
24015d80:	3740      	adds	r7, #64	; 0x40
24015d82:	46bd      	mov	sp, r7
24015d84:	bd80      	pop	{r7, pc}
24015d86:	bf00      	nop
24015d88:	58024400 	.word	0x58024400
24015d8c:	03d09000 	.word	0x03d09000
24015d90:	003d0900 	.word	0x003d0900
24015d94:	016e3600 	.word	0x016e3600

24015d98 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
24015d98:	b580      	push	{r7, lr}
24015d9a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE)>> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
24015d9c:	f7fe f8d0 	bl	24013f40 <HAL_RCC_GetHCLKFreq>
24015da0:	4602      	mov	r2, r0
24015da2:	4b06      	ldr	r3, [pc, #24]	; (24015dbc <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
24015da4:	699b      	ldr	r3, [r3, #24]
24015da6:	091b      	lsrs	r3, r3, #4
24015da8:	f003 0307 	and.w	r3, r3, #7
24015dac:	4904      	ldr	r1, [pc, #16]	; (24015dc0 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
24015dae:	5ccb      	ldrb	r3, [r1, r3]
24015db0:	f003 031f 	and.w	r3, r3, #31
24015db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
/* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE)>> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
24015db8:	4618      	mov	r0, r3
24015dba:	bd80      	pop	{r7, pc}
24015dbc:	58024400 	.word	0x58024400
24015dc0:	24016f40 	.word	0x24016f40

24015dc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24015dc4:	b580      	push	{r7, lr}
24015dc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24015dc8:	f7fe f8ba 	bl	24013f40 <HAL_RCC_GetHCLKFreq>
24015dcc:	4602      	mov	r2, r0
24015dce:	4b06      	ldr	r3, [pc, #24]	; (24015de8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
24015dd0:	6a1b      	ldr	r3, [r3, #32]
24015dd2:	091b      	lsrs	r3, r3, #4
24015dd4:	f003 0307 	and.w	r3, r3, #7
24015dd8:	4904      	ldr	r1, [pc, #16]	; (24015dec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
24015dda:	5ccb      	ldrb	r3, [r1, r3]
24015ddc:	f003 031f 	and.w	r3, r3, #31
24015de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
24015de4:	4618      	mov	r0, r3
24015de6:	bd80      	pop	{r7, pc}
24015de8:	58024400 	.word	0x58024400
24015dec:	24016f40 	.word	0x24016f40

24015df0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
24015df0:	b480      	push	{r7}
24015df2:	b089      	sub	sp, #36	; 0x24
24015df4:	af00      	add	r7, sp, #0
24015df6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24015df8:	4ba1      	ldr	r3, [pc, #644]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015dfc:	f003 0303 	and.w	r3, r3, #3
24015e00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
24015e02:	4b9f      	ldr	r3, [pc, #636]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015e06:	0b1b      	lsrs	r3, r3, #12
24015e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015e0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24015e0e:	4b9c      	ldr	r3, [pc, #624]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015e12:	091b      	lsrs	r3, r3, #4
24015e14:	f003 0301 	and.w	r3, r3, #1
24015e18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
24015e1a:	4b99      	ldr	r3, [pc, #612]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24015e1e:	08db      	lsrs	r3, r3, #3
24015e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
24015e24:	693a      	ldr	r2, [r7, #16]
24015e26:	fb02 f303 	mul.w	r3, r2, r3
24015e2a:	ee07 3a90 	vmov	s15, r3
24015e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015e32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
24015e36:	697b      	ldr	r3, [r7, #20]
24015e38:	2b00      	cmp	r3, #0
24015e3a:	f000 8111 	beq.w	24016060 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
24015e3e:	69bb      	ldr	r3, [r7, #24]
24015e40:	2b02      	cmp	r3, #2
24015e42:	f000 8083 	beq.w	24015f4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
24015e46:	69bb      	ldr	r3, [r7, #24]
24015e48:	2b02      	cmp	r3, #2
24015e4a:	f200 80a1 	bhi.w	24015f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
24015e4e:	69bb      	ldr	r3, [r7, #24]
24015e50:	2b00      	cmp	r3, #0
24015e52:	d003      	beq.n	24015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
24015e54:	69bb      	ldr	r3, [r7, #24]
24015e56:	2b01      	cmp	r3, #1
24015e58:	d056      	beq.n	24015f08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
24015e5a:	e099      	b.n	24015f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24015e5c:	4b88      	ldr	r3, [pc, #544]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e5e:	681b      	ldr	r3, [r3, #0]
24015e60:	f003 0320 	and.w	r3, r3, #32
24015e64:	2b00      	cmp	r3, #0
24015e66:	d02d      	beq.n	24015ec4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015e68:	4b85      	ldr	r3, [pc, #532]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e6a:	681b      	ldr	r3, [r3, #0]
24015e6c:	08db      	lsrs	r3, r3, #3
24015e6e:	f003 0303 	and.w	r3, r3, #3
24015e72:	4a84      	ldr	r2, [pc, #528]	; (24016084 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
24015e74:	fa22 f303 	lsr.w	r3, r2, r3
24015e78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015e7a:	68bb      	ldr	r3, [r7, #8]
24015e7c:	ee07 3a90 	vmov	s15, r3
24015e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015e84:	697b      	ldr	r3, [r7, #20]
24015e86:	ee07 3a90 	vmov	s15, r3
24015e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015e92:	4b7b      	ldr	r3, [pc, #492]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015e9a:	ee07 3a90 	vmov	s15, r3
24015e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015ea2:	ed97 6a03 	vldr	s12, [r7, #12]
24015ea6:	eddf 5a78 	vldr	s11, [pc, #480]	; 24016088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015eba:	ee67 7a27 	vmul.f32	s15, s14, s15
24015ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
24015ec2:	e087      	b.n	24015fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015ec4:	697b      	ldr	r3, [r7, #20]
24015ec6:	ee07 3a90 	vmov	s15, r3
24015eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015ece:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2401608c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
24015ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015ed6:	4b6a      	ldr	r3, [pc, #424]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015ede:	ee07 3a90 	vmov	s15, r3
24015ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015ee6:	ed97 6a03 	vldr	s12, [r7, #12]
24015eea:	eddf 5a67 	vldr	s11, [pc, #412]	; 24016088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015efe:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015f06:	e065      	b.n	24015fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015f08:	697b      	ldr	r3, [r7, #20]
24015f0a:	ee07 3a90 	vmov	s15, r3
24015f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 24016090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24015f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015f1a:	4b59      	ldr	r3, [pc, #356]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015f22:	ee07 3a90 	vmov	s15, r3
24015f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f2a:	ed97 6a03 	vldr	s12, [r7, #12]
24015f2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 24016088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015f42:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015f4a:	e043      	b.n	24015fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015f4c:	697b      	ldr	r3, [r7, #20]
24015f4e:	ee07 3a90 	vmov	s15, r3
24015f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 24016094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
24015f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015f5e:	4b48      	ldr	r3, [pc, #288]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015f66:	ee07 3a90 	vmov	s15, r3
24015f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f6e:	ed97 6a03 	vldr	s12, [r7, #12]
24015f72:	eddf 5a45 	vldr	s11, [pc, #276]	; 24016088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015f86:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015f8e:	e021      	b.n	24015fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015f90:	697b      	ldr	r3, [r7, #20]
24015f92:	ee07 3a90 	vmov	s15, r3
24015f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24016090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24015f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015fa2:	4b37      	ldr	r3, [pc, #220]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015faa:	ee07 3a90 	vmov	s15, r3
24015fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015fb2:	ed97 6a03 	vldr	s12, [r7, #12]
24015fb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 24016088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015fca:	ee67 7a27 	vmul.f32	s15, s14, s15
24015fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015fd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
24015fd4:	4b2a      	ldr	r3, [pc, #168]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015fd8:	0a5b      	lsrs	r3, r3, #9
24015fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015fde:	ee07 3a90 	vmov	s15, r3
24015fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015fea:	ee37 7a87 	vadd.f32	s14, s15, s14
24015fee:	edd7 6a07 	vldr	s13, [r7, #28]
24015ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
24015ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015ffa:	ee17 2a90 	vmov	r2, s15
24015ffe:	687b      	ldr	r3, [r7, #4]
24016000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
24016002:	4b1f      	ldr	r3, [pc, #124]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016006:	0c1b      	lsrs	r3, r3, #16
24016008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401600c:	ee07 3a90 	vmov	s15, r3
24016010:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016018:	ee37 7a87 	vadd.f32	s14, s15, s14
2401601c:	edd7 6a07 	vldr	s13, [r7, #28]
24016020:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016028:	ee17 2a90 	vmov	r2, s15
2401602c:	687b      	ldr	r3, [r7, #4]
2401602e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
24016030:	4b13      	ldr	r3, [pc, #76]	; (24016080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016034:	0e1b      	lsrs	r3, r3, #24
24016036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401603a:	ee07 3a90 	vmov	s15, r3
2401603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016046:	ee37 7a87 	vadd.f32	s14, s15, s14
2401604a:	edd7 6a07 	vldr	s13, [r7, #28]
2401604e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016056:	ee17 2a90 	vmov	r2, s15
2401605a:	687b      	ldr	r3, [r7, #4]
2401605c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2401605e:	e008      	b.n	24016072 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24016060:	687b      	ldr	r3, [r7, #4]
24016062:	2200      	movs	r2, #0
24016064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24016066:	687b      	ldr	r3, [r7, #4]
24016068:	2200      	movs	r2, #0
2401606a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2401606c:	687b      	ldr	r3, [r7, #4]
2401606e:	2200      	movs	r2, #0
24016070:	609a      	str	r2, [r3, #8]
}
24016072:	bf00      	nop
24016074:	3724      	adds	r7, #36	; 0x24
24016076:	46bd      	mov	sp, r7
24016078:	f85d 7b04 	ldr.w	r7, [sp], #4
2401607c:	4770      	bx	lr
2401607e:	bf00      	nop
24016080:	58024400 	.word	0x58024400
24016084:	03d09000 	.word	0x03d09000
24016088:	46000000 	.word	0x46000000
2401608c:	4c742400 	.word	0x4c742400
24016090:	4a742400 	.word	0x4a742400
24016094:	4bb71b00 	.word	0x4bb71b00

24016098 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
24016098:	b480      	push	{r7}
2401609a:	b089      	sub	sp, #36	; 0x24
2401609c:	af00      	add	r7, sp, #0
2401609e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240160a0:	4ba1      	ldr	r3, [pc, #644]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240160a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240160a4:	f003 0303 	and.w	r3, r3, #3
240160a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
240160aa:	4b9f      	ldr	r3, [pc, #636]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240160ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240160ae:	0d1b      	lsrs	r3, r3, #20
240160b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240160b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
240160b6:	4b9c      	ldr	r3, [pc, #624]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240160b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240160ba:	0a1b      	lsrs	r3, r3, #8
240160bc:	f003 0301 	and.w	r3, r3, #1
240160c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
240160c2:	4b99      	ldr	r3, [pc, #612]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240160c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240160c6:	08db      	lsrs	r3, r3, #3
240160c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
240160cc:	693a      	ldr	r2, [r7, #16]
240160ce:	fb02 f303 	mul.w	r3, r2, r3
240160d2:	ee07 3a90 	vmov	s15, r3
240160d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240160da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
240160de:	697b      	ldr	r3, [r7, #20]
240160e0:	2b00      	cmp	r3, #0
240160e2:	f000 8111 	beq.w	24016308 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
240160e6:	69bb      	ldr	r3, [r7, #24]
240160e8:	2b02      	cmp	r3, #2
240160ea:	f000 8083 	beq.w	240161f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
240160ee:	69bb      	ldr	r3, [r7, #24]
240160f0:	2b02      	cmp	r3, #2
240160f2:	f200 80a1 	bhi.w	24016238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
240160f6:	69bb      	ldr	r3, [r7, #24]
240160f8:	2b00      	cmp	r3, #0
240160fa:	d003      	beq.n	24016104 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
240160fc:	69bb      	ldr	r3, [r7, #24]
240160fe:	2b01      	cmp	r3, #1
24016100:	d056      	beq.n	240161b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
24016102:	e099      	b.n	24016238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24016104:	4b88      	ldr	r3, [pc, #544]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016106:	681b      	ldr	r3, [r3, #0]
24016108:	f003 0320 	and.w	r3, r3, #32
2401610c:	2b00      	cmp	r3, #0
2401610e:	d02d      	beq.n	2401616c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24016110:	4b85      	ldr	r3, [pc, #532]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016112:	681b      	ldr	r3, [r3, #0]
24016114:	08db      	lsrs	r3, r3, #3
24016116:	f003 0303 	and.w	r3, r3, #3
2401611a:	4a84      	ldr	r2, [pc, #528]	; (2401632c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2401611c:	fa22 f303 	lsr.w	r3, r2, r3
24016120:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016122:	68bb      	ldr	r3, [r7, #8]
24016124:	ee07 3a90 	vmov	s15, r3
24016128:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401612c:	697b      	ldr	r3, [r7, #20]
2401612e:	ee07 3a90 	vmov	s15, r3
24016132:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401613a:	4b7b      	ldr	r3, [pc, #492]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016142:	ee07 3a90 	vmov	s15, r3
24016146:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401614a:	ed97 6a03 	vldr	s12, [r7, #12]
2401614e:	eddf 5a78 	vldr	s11, [pc, #480]	; 24016330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016152:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016156:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401615a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401615e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016162:	ee67 7a27 	vmul.f32	s15, s14, s15
24016166:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
2401616a:	e087      	b.n	2401627c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2401616c:	697b      	ldr	r3, [r7, #20]
2401616e:	ee07 3a90 	vmov	s15, r3
24016172:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 24016334 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2401617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401617e:	4b6a      	ldr	r3, [pc, #424]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016182:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016186:	ee07 3a90 	vmov	s15, r3
2401618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401618e:	ed97 6a03 	vldr	s12, [r7, #12]
24016192:	eddf 5a67 	vldr	s11, [pc, #412]	; 24016330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016196:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401619e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240161a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240161a6:	ee67 7a27 	vmul.f32	s15, s14, s15
240161aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240161ae:	e065      	b.n	2401627c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240161b0:	697b      	ldr	r3, [r7, #20]
240161b2:	ee07 3a90 	vmov	s15, r3
240161b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240161ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 24016338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
240161be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240161c2:	4b59      	ldr	r3, [pc, #356]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240161c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240161c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
240161ca:	ee07 3a90 	vmov	s15, r3
240161ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
240161d2:	ed97 6a03 	vldr	s12, [r7, #12]
240161d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 24016330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240161da:	eec6 7a25 	vdiv.f32	s15, s12, s11
240161de:	ee76 7aa7 	vadd.f32	s15, s13, s15
240161e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240161e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
240161ea:	ee67 7a27 	vmul.f32	s15, s14, s15
240161ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240161f2:	e043      	b.n	2401627c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240161f4:	697b      	ldr	r3, [r7, #20]
240161f6:	ee07 3a90 	vmov	s15, r3
240161fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
240161fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2401633c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
24016202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016206:	4b48      	ldr	r3, [pc, #288]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401620e:	ee07 3a90 	vmov	s15, r3
24016212:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016216:	ed97 6a03 	vldr	s12, [r7, #12]
2401621a:	eddf 5a45 	vldr	s11, [pc, #276]	; 24016330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2401621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016222:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401622e:	ee67 7a27 	vmul.f32	s15, s14, s15
24016232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016236:	e021      	b.n	2401627c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016238:	697b      	ldr	r3, [r7, #20]
2401623a:	ee07 3a90 	vmov	s15, r3
2401623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24016338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
24016246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401624a:	4b37      	ldr	r3, [pc, #220]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016252:	ee07 3a90 	vmov	s15, r3
24016256:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401625a:	ed97 6a03 	vldr	s12, [r7, #12]
2401625e:	eddf 5a34 	vldr	s11, [pc, #208]	; 24016330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016262:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016266:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016272:	ee67 7a27 	vmul.f32	s15, s14, s15
24016276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401627a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
2401627c:	4b2a      	ldr	r3, [pc, #168]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016280:	0a5b      	lsrs	r3, r3, #9
24016282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016286:	ee07 3a90 	vmov	s15, r3
2401628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401628e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016292:	ee37 7a87 	vadd.f32	s14, s15, s14
24016296:	edd7 6a07 	vldr	s13, [r7, #28]
2401629a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401629e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240162a2:	ee17 2a90 	vmov	r2, s15
240162a6:	687b      	ldr	r3, [r7, #4]
240162a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
240162aa:	4b1f      	ldr	r3, [pc, #124]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240162ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240162ae:	0c1b      	lsrs	r3, r3, #16
240162b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240162b4:	ee07 3a90 	vmov	s15, r3
240162b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240162bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240162c0:	ee37 7a87 	vadd.f32	s14, s15, s14
240162c4:	edd7 6a07 	vldr	s13, [r7, #28]
240162c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
240162cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240162d0:	ee17 2a90 	vmov	r2, s15
240162d4:	687b      	ldr	r3, [r7, #4]
240162d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
240162d8:	4b13      	ldr	r3, [pc, #76]	; (24016328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240162da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240162dc:	0e1b      	lsrs	r3, r3, #24
240162de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240162e2:	ee07 3a90 	vmov	s15, r3
240162e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240162ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240162ee:	ee37 7a87 	vadd.f32	s14, s15, s14
240162f2:	edd7 6a07 	vldr	s13, [r7, #28]
240162f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
240162fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240162fe:	ee17 2a90 	vmov	r2, s15
24016302:	687b      	ldr	r3, [r7, #4]
24016304:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
24016306:	e008      	b.n	2401631a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
24016308:	687b      	ldr	r3, [r7, #4]
2401630a:	2200      	movs	r2, #0
2401630c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2401630e:	687b      	ldr	r3, [r7, #4]
24016310:	2200      	movs	r2, #0
24016312:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
24016314:	687b      	ldr	r3, [r7, #4]
24016316:	2200      	movs	r2, #0
24016318:	609a      	str	r2, [r3, #8]
}
2401631a:	bf00      	nop
2401631c:	3724      	adds	r7, #36	; 0x24
2401631e:	46bd      	mov	sp, r7
24016320:	f85d 7b04 	ldr.w	r7, [sp], #4
24016324:	4770      	bx	lr
24016326:	bf00      	nop
24016328:	58024400 	.word	0x58024400
2401632c:	03d09000 	.word	0x03d09000
24016330:	46000000 	.word	0x46000000
24016334:	4c742400 	.word	0x4c742400
24016338:	4a742400 	.word	0x4a742400
2401633c:	4bb71b00 	.word	0x4bb71b00

24016340 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
24016340:	b480      	push	{r7}
24016342:	b089      	sub	sp, #36	; 0x24
24016344:	af00      	add	r7, sp, #0
24016346:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24016348:	4ba0      	ldr	r3, [pc, #640]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401634c:	f003 0303 	and.w	r3, r3, #3
24016350:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
24016352:	4b9e      	ldr	r3, [pc, #632]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016356:	091b      	lsrs	r3, r3, #4
24016358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401635c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2401635e:	4b9b      	ldr	r3, [pc, #620]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016362:	f003 0301 	and.w	r3, r3, #1
24016366:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24016368:	4b98      	ldr	r3, [pc, #608]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401636c:	08db      	lsrs	r3, r3, #3
2401636e:	f3c3 030c 	ubfx	r3, r3, #0, #13
24016372:	693a      	ldr	r2, [r7, #16]
24016374:	fb02 f303 	mul.w	r3, r2, r3
24016378:	ee07 3a90 	vmov	s15, r3
2401637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016380:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
24016384:	697b      	ldr	r3, [r7, #20]
24016386:	2b00      	cmp	r3, #0
24016388:	f000 8111 	beq.w	240165ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2401638c:	69bb      	ldr	r3, [r7, #24]
2401638e:	2b02      	cmp	r3, #2
24016390:	f000 8083 	beq.w	2401649a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
24016394:	69bb      	ldr	r3, [r7, #24]
24016396:	2b02      	cmp	r3, #2
24016398:	f200 80a1 	bhi.w	240164de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2401639c:	69bb      	ldr	r3, [r7, #24]
2401639e:	2b00      	cmp	r3, #0
240163a0:	d003      	beq.n	240163aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
240163a2:	69bb      	ldr	r3, [r7, #24]
240163a4:	2b01      	cmp	r3, #1
240163a6:	d056      	beq.n	24016456 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
240163a8:	e099      	b.n	240164de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240163aa:	4b88      	ldr	r3, [pc, #544]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240163ac:	681b      	ldr	r3, [r3, #0]
240163ae:	f003 0320 	and.w	r3, r3, #32
240163b2:	2b00      	cmp	r3, #0
240163b4:	d02d      	beq.n	24016412 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240163b6:	4b85      	ldr	r3, [pc, #532]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240163b8:	681b      	ldr	r3, [r3, #0]
240163ba:	08db      	lsrs	r3, r3, #3
240163bc:	f003 0303 	and.w	r3, r3, #3
240163c0:	4a83      	ldr	r2, [pc, #524]	; (240165d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
240163c2:	fa22 f303 	lsr.w	r3, r2, r3
240163c6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240163c8:	68bb      	ldr	r3, [r7, #8]
240163ca:	ee07 3a90 	vmov	s15, r3
240163ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
240163d2:	697b      	ldr	r3, [r7, #20]
240163d4:	ee07 3a90 	vmov	s15, r3
240163d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240163dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240163e0:	4b7a      	ldr	r3, [pc, #488]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240163e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240163e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240163e8:	ee07 3a90 	vmov	s15, r3
240163ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
240163f0:	ed97 6a03 	vldr	s12, [r7, #12]
240163f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 240165d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240163f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
240163fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016404:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016408:	ee67 7a27 	vmul.f32	s15, s14, s15
2401640c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
24016410:	e087      	b.n	24016522 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016412:	697b      	ldr	r3, [r7, #20]
24016414:	ee07 3a90 	vmov	s15, r3
24016418:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401641c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 240165d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
24016420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016424:	4b69      	ldr	r3, [pc, #420]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016428:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401642c:	ee07 3a90 	vmov	s15, r3
24016430:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016434:	ed97 6a03 	vldr	s12, [r7, #12]
24016438:	eddf 5a66 	vldr	s11, [pc, #408]	; 240165d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2401643c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016440:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016448:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401644c:	ee67 7a27 	vmul.f32	s15, s14, s15
24016450:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016454:	e065      	b.n	24016522 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016456:	697b      	ldr	r3, [r7, #20]
24016458:	ee07 3a90 	vmov	s15, r3
2401645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016460:	eddf 6a5e 	vldr	s13, [pc, #376]	; 240165dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
24016464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016468:	4b58      	ldr	r3, [pc, #352]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016470:	ee07 3a90 	vmov	s15, r3
24016474:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016478:	ed97 6a03 	vldr	s12, [r7, #12]
2401647c:	eddf 5a55 	vldr	s11, [pc, #340]	; 240165d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016480:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016484:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401648c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016490:	ee67 7a27 	vmul.f32	s15, s14, s15
24016494:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016498:	e043      	b.n	24016522 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401649a:	697b      	ldr	r3, [r7, #20]
2401649c:	ee07 3a90 	vmov	s15, r3
240164a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240164a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 240165e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
240164a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240164ac:	4b47      	ldr	r3, [pc, #284]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240164ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240164b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
240164b4:	ee07 3a90 	vmov	s15, r3
240164b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
240164bc:	ed97 6a03 	vldr	s12, [r7, #12]
240164c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 240165d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240164c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
240164c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
240164cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240164d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
240164d4:	ee67 7a27 	vmul.f32	s15, s14, s15
240164d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240164dc:	e021      	b.n	24016522 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240164de:	697b      	ldr	r3, [r7, #20]
240164e0:	ee07 3a90 	vmov	s15, r3
240164e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240164e8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 240165d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240164ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240164f0:	4b36      	ldr	r3, [pc, #216]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240164f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240164f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240164f8:	ee07 3a90 	vmov	s15, r3
240164fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016500:	ed97 6a03 	vldr	s12, [r7, #12]
24016504:	eddf 5a33 	vldr	s11, [pc, #204]	; 240165d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016508:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401650c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016514:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016518:	ee67 7a27 	vmul.f32	s15, s14, s15
2401651c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016520:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
24016522:	4b2a      	ldr	r3, [pc, #168]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016526:	0a5b      	lsrs	r3, r3, #9
24016528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401652c:	ee07 3a90 	vmov	s15, r3
24016530:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016538:	ee37 7a87 	vadd.f32	s14, s15, s14
2401653c:	edd7 6a07 	vldr	s13, [r7, #28]
24016540:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016548:	ee17 2a90 	vmov	r2, s15
2401654c:	687b      	ldr	r3, [r7, #4]
2401654e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
24016550:	4b1e      	ldr	r3, [pc, #120]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016554:	0c1b      	lsrs	r3, r3, #16
24016556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401655a:	ee07 3a90 	vmov	s15, r3
2401655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016566:	ee37 7a87 	vadd.f32	s14, s15, s14
2401656a:	edd7 6a07 	vldr	s13, [r7, #28]
2401656e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016576:	ee17 2a90 	vmov	r2, s15
2401657a:	687b      	ldr	r3, [r7, #4]
2401657c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
2401657e:	4b13      	ldr	r3, [pc, #76]	; (240165cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016582:	0e1b      	lsrs	r3, r3, #24
24016584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016588:	ee07 3a90 	vmov	s15, r3
2401658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016594:	ee37 7a87 	vadd.f32	s14, s15, s14
24016598:	edd7 6a07 	vldr	s13, [r7, #28]
2401659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
240165a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240165a4:	ee17 2a90 	vmov	r2, s15
240165a8:	687b      	ldr	r3, [r7, #4]
240165aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
240165ac:	e008      	b.n	240165c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
240165ae:	687b      	ldr	r3, [r7, #4]
240165b0:	2200      	movs	r2, #0
240165b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
240165b4:	687b      	ldr	r3, [r7, #4]
240165b6:	2200      	movs	r2, #0
240165b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
240165ba:	687b      	ldr	r3, [r7, #4]
240165bc:	2200      	movs	r2, #0
240165be:	609a      	str	r2, [r3, #8]
}
240165c0:	bf00      	nop
240165c2:	3724      	adds	r7, #36	; 0x24
240165c4:	46bd      	mov	sp, r7
240165c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240165ca:	4770      	bx	lr
240165cc:	58024400 	.word	0x58024400
240165d0:	03d09000 	.word	0x03d09000
240165d4:	46000000 	.word	0x46000000
240165d8:	4c742400 	.word	0x4c742400
240165dc:	4a742400 	.word	0x4a742400
240165e0:	4bb71b00 	.word	0x4bb71b00

240165e4 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
240165e4:	b580      	push	{r7, lr}
240165e6:	b082      	sub	sp, #8
240165e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240165ea:	f7fd fb2f 	bl	24013c4c <HAL_RCC_GetSysClockFreq>
240165ee:	4602      	mov	r2, r0
240165f0:	4b10      	ldr	r3, [pc, #64]	; (24016634 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
240165f2:	699b      	ldr	r3, [r3, #24]
240165f4:	0a1b      	lsrs	r3, r3, #8
240165f6:	f003 030f 	and.w	r3, r3, #15
240165fa:	490f      	ldr	r1, [pc, #60]	; (24016638 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
240165fc:	5ccb      	ldrb	r3, [r1, r3]
240165fe:	f003 031f 	and.w	r3, r3, #31
24016602:	fa22 f303 	lsr.w	r3, r2, r3
24016606:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24016608:	4b0a      	ldr	r3, [pc, #40]	; (24016634 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
2401660a:	699b      	ldr	r3, [r3, #24]
2401660c:	f003 030f 	and.w	r3, r3, #15
24016610:	4a09      	ldr	r2, [pc, #36]	; (24016638 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24016612:	5cd3      	ldrb	r3, [r2, r3]
24016614:	f003 031f 	and.w	r3, r3, #31
24016618:	687a      	ldr	r2, [r7, #4]
2401661a:	fa22 f303 	lsr.w	r3, r2, r3
2401661e:	4a07      	ldr	r2, [pc, #28]	; (2401663c <HAL_RCCEx_GetD1SysClockFreq+0x58>)
24016620:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24016622:	4a07      	ldr	r2, [pc, #28]	; (24016640 <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
24016624:	687b      	ldr	r3, [r7, #4]
24016626:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
24016628:	687b      	ldr	r3, [r7, #4]
}
2401662a:	4618      	mov	r0, r3
2401662c:	3708      	adds	r7, #8
2401662e:	46bd      	mov	sp, r7
24016630:	bd80      	pop	{r7, pc}
24016632:	bf00      	nop
24016634:	58024400 	.word	0x58024400
24016638:	24016f40 	.word	0x24016f40
2401663c:	240004cc 	.word	0x240004cc
24016640:	240004c8 	.word	0x240004c8

24016644 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
24016644:	b480      	push	{r7}
24016646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016648:	4b05      	ldr	r3, [pc, #20]	; (24016660 <HAL_RCCEx_EnableLSECSS+0x1c>)
2401664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401664c:	4a04      	ldr	r2, [pc, #16]	; (24016660 <HAL_RCCEx_EnableLSECSS+0x1c>)
2401664e:	f043 0320 	orr.w	r3, r3, #32
24016652:	6713      	str	r3, [r2, #112]	; 0x70
}
24016654:	bf00      	nop
24016656:	46bd      	mov	sp, r7
24016658:	f85d 7b04 	ldr.w	r7, [sp], #4
2401665c:	4770      	bx	lr
2401665e:	bf00      	nop
24016660:	58024400 	.word	0x58024400

24016664 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
24016664:	b480      	push	{r7}
24016666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016668:	4b08      	ldr	r3, [pc, #32]	; (2401668c <HAL_RCCEx_DisableLSECSS+0x28>)
2401666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401666c:	4a07      	ldr	r2, [pc, #28]	; (2401668c <HAL_RCCEx_DisableLSECSS+0x28>)
2401666e:	f023 0320 	bic.w	r3, r3, #32
24016672:	6713      	str	r3, [r2, #112]	; 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
24016674:	4b05      	ldr	r3, [pc, #20]	; (2401668c <HAL_RCCEx_DisableLSECSS+0x28>)
24016676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016678:	4a04      	ldr	r2, [pc, #16]	; (2401668c <HAL_RCCEx_DisableLSECSS+0x28>)
2401667a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2401667e:	6613      	str	r3, [r2, #96]	; 0x60
}
24016680:	bf00      	nop
24016682:	46bd      	mov	sp, r7
24016684:	f85d 7b04 	ldr.w	r7, [sp], #4
24016688:	4770      	bx	lr
2401668a:	bf00      	nop
2401668c:	58024400 	.word	0x58024400

24016690 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
24016690:	b480      	push	{r7}
24016692:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016694:	4b11      	ldr	r3, [pc, #68]	; (240166dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016698:	4a10      	ldr	r2, [pc, #64]	; (240166dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2401669a:	f043 0320 	orr.w	r3, r3, #32
2401669e:	6713      	str	r3, [r2, #112]	; 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
240166a0:	4b0e      	ldr	r3, [pc, #56]	; (240166dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
240166a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240166a4:	4a0d      	ldr	r2, [pc, #52]	; (240166dc <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
240166a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240166aa:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
240166ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240166b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240166b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240166b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240166bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
240166c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240166c4:	681b      	ldr	r3, [r3, #0]
240166c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240166ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240166ce:	6013      	str	r3, [r2, #0]
}
240166d0:	bf00      	nop
240166d2:	46bd      	mov	sp, r7
240166d4:	f85d 7b04 	ldr.w	r7, [sp], #4
240166d8:	4770      	bx	lr
240166da:	bf00      	nop
240166dc:	58024400 	.word	0x58024400

240166e0 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
240166e0:	b480      	push	{r7}
240166e2:	b083      	sub	sp, #12
240166e4:	af00      	add	r7, sp, #0
240166e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
240166e8:	4b06      	ldr	r3, [pc, #24]	; (24016704 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
240166ea:	691b      	ldr	r3, [r3, #16]
240166ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
240166f0:	4904      	ldr	r1, [pc, #16]	; (24016704 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
240166f2:	687b      	ldr	r3, [r7, #4]
240166f4:	4313      	orrs	r3, r2
240166f6:	610b      	str	r3, [r1, #16]
}
240166f8:	bf00      	nop
240166fa:	370c      	adds	r7, #12
240166fc:	46bd      	mov	sp, r7
240166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24016702:	4770      	bx	lr
24016704:	58024400 	.word	0x58024400

24016708 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24016708:	b480      	push	{r7}
2401670a:	b083      	sub	sp, #12
2401670c:	af00      	add	r7, sp, #0
2401670e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24016710:	4b06      	ldr	r3, [pc, #24]	; (2401672c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24016712:	691b      	ldr	r3, [r3, #16]
24016714:	f023 0280 	bic.w	r2, r3, #128	; 0x80
24016718:	4904      	ldr	r1, [pc, #16]	; (2401672c <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
2401671a:	687b      	ldr	r3, [r7, #4]
2401671c:	4313      	orrs	r3, r2
2401671e:	610b      	str	r3, [r1, #16]
}
24016720:	bf00      	nop
24016722:	370c      	adds	r7, #12
24016724:	46bd      	mov	sp, r7
24016726:	f85d 7b04 	ldr.w	r7, [sp], #4
2401672a:	4770      	bx	lr
2401672c:	58024400 	.word	0x58024400

24016730 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
24016730:	b480      	push	{r7}
24016732:	b083      	sub	sp, #12
24016734:	af00      	add	r7, sp, #0
24016736:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
24016738:	4b06      	ldr	r3, [pc, #24]	; (24016754 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
2401673a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
2401673e:	4905      	ldr	r1, [pc, #20]	; (24016754 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24016740:	687b      	ldr	r3, [r7, #4]
24016742:	4313      	orrs	r3, r2
24016744:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
24016748:	bf00      	nop
2401674a:	370c      	adds	r7, #12
2401674c:	46bd      	mov	sp, r7
2401674e:	f85d 7b04 	ldr.w	r7, [sp], #4
24016752:	4770      	bx	lr
24016754:	58024400 	.word	0x58024400

24016758 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
24016758:	b580      	push	{r7, lr}
2401675a:	b084      	sub	sp, #16
2401675c:	af00      	add	r7, sp, #0
2401675e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
24016760:	4b26      	ldr	r3, [pc, #152]	; (240167fc <HAL_RCCEx_CRSConfig+0xa4>)
24016762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016766:	4a25      	ldr	r2, [pc, #148]	; (240167fc <HAL_RCCEx_CRSConfig+0xa4>)
24016768:	f043 0302 	orr.w	r3, r3, #2
2401676c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
24016770:	4b22      	ldr	r3, [pc, #136]	; (240167fc <HAL_RCCEx_CRSConfig+0xa4>)
24016772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016776:	4a21      	ldr	r2, [pc, #132]	; (240167fc <HAL_RCCEx_CRSConfig+0xa4>)
24016778:	f023 0302 	bic.w	r3, r3, #2
2401677c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
24016780:	f7eb fd7e 	bl	24002280 <HAL_GetREVID>
24016784:	4603      	mov	r3, r0
24016786:	f241 0203 	movw	r2, #4099	; 0x1003
2401678a:	4293      	cmp	r3, r2
2401678c:	d80b      	bhi.n	240167a6 <HAL_RCCEx_CRSConfig+0x4e>
2401678e:	687b      	ldr	r3, [r7, #4]
24016790:	685b      	ldr	r3, [r3, #4]
24016792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016796:	d106      	bne.n	240167a6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
24016798:	687b      	ldr	r3, [r7, #4]
2401679a:	681a      	ldr	r2, [r3, #0]
2401679c:	687b      	ldr	r3, [r7, #4]
2401679e:	689b      	ldr	r3, [r3, #8]
240167a0:	4313      	orrs	r3, r2
240167a2:	60fb      	str	r3, [r7, #12]
240167a4:	e008      	b.n	240167b8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
240167a6:	687b      	ldr	r3, [r7, #4]
240167a8:	681a      	ldr	r2, [r3, #0]
240167aa:	687b      	ldr	r3, [r7, #4]
240167ac:	685b      	ldr	r3, [r3, #4]
240167ae:	431a      	orrs	r2, r3
240167b0:	687b      	ldr	r3, [r7, #4]
240167b2:	689b      	ldr	r3, [r3, #8]
240167b4:	4313      	orrs	r3, r2
240167b6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
240167b8:	687b      	ldr	r3, [r7, #4]
240167ba:	68db      	ldr	r3, [r3, #12]
240167bc:	68fa      	ldr	r2, [r7, #12]
240167be:	4313      	orrs	r3, r2
240167c0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
240167c2:	687b      	ldr	r3, [r7, #4]
240167c4:	691b      	ldr	r3, [r3, #16]
240167c6:	041b      	lsls	r3, r3, #16
240167c8:	68fa      	ldr	r2, [r7, #12]
240167ca:	4313      	orrs	r3, r2
240167cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
240167ce:	4a0c      	ldr	r2, [pc, #48]	; (24016800 <HAL_RCCEx_CRSConfig+0xa8>)
240167d0:	68fb      	ldr	r3, [r7, #12]
240167d2:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
240167d4:	4b0a      	ldr	r3, [pc, #40]	; (24016800 <HAL_RCCEx_CRSConfig+0xa8>)
240167d6:	681b      	ldr	r3, [r3, #0]
240167d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
240167dc:	687b      	ldr	r3, [r7, #4]
240167de:	695b      	ldr	r3, [r3, #20]
240167e0:	021b      	lsls	r3, r3, #8
240167e2:	4907      	ldr	r1, [pc, #28]	; (24016800 <HAL_RCCEx_CRSConfig+0xa8>)
240167e4:	4313      	orrs	r3, r2
240167e6:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
240167e8:	4b05      	ldr	r3, [pc, #20]	; (24016800 <HAL_RCCEx_CRSConfig+0xa8>)
240167ea:	681b      	ldr	r3, [r3, #0]
240167ec:	4a04      	ldr	r2, [pc, #16]	; (24016800 <HAL_RCCEx_CRSConfig+0xa8>)
240167ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
240167f2:	6013      	str	r3, [r2, #0]
}
240167f4:	bf00      	nop
240167f6:	3710      	adds	r7, #16
240167f8:	46bd      	mov	sp, r7
240167fa:	bd80      	pop	{r7, pc}
240167fc:	58024400 	.word	0x58024400
24016800:	40008400 	.word	0x40008400

24016804 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
24016804:	b480      	push	{r7}
24016806:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
24016808:	4b05      	ldr	r3, [pc, #20]	; (24016820 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2401680a:	681b      	ldr	r3, [r3, #0]
2401680c:	4a04      	ldr	r2, [pc, #16]	; (24016820 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2401680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24016812:	6013      	str	r3, [r2, #0]
}
24016814:	bf00      	nop
24016816:	46bd      	mov	sp, r7
24016818:	f85d 7b04 	ldr.w	r7, [sp], #4
2401681c:	4770      	bx	lr
2401681e:	bf00      	nop
24016820:	40008400 	.word	0x40008400

24016824 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
24016824:	b480      	push	{r7}
24016826:	b083      	sub	sp, #12
24016828:	af00      	add	r7, sp, #0
2401682a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
2401682c:	4b0e      	ldr	r3, [pc, #56]	; (24016868 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2401682e:	685b      	ldr	r3, [r3, #4]
24016830:	b29a      	uxth	r2, r3
24016832:	687b      	ldr	r3, [r7, #4]
24016834:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
24016836:	4b0c      	ldr	r3, [pc, #48]	; (24016868 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24016838:	681b      	ldr	r3, [r3, #0]
2401683a:	0a1b      	lsrs	r3, r3, #8
2401683c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24016840:	687b      	ldr	r3, [r7, #4]
24016842:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
24016844:	4b08      	ldr	r3, [pc, #32]	; (24016868 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24016846:	689b      	ldr	r3, [r3, #8]
24016848:	0c1b      	lsrs	r3, r3, #16
2401684a:	b29a      	uxth	r2, r3
2401684c:	687b      	ldr	r3, [r7, #4]
2401684e:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
24016850:	4b05      	ldr	r3, [pc, #20]	; (24016868 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24016852:	689b      	ldr	r3, [r3, #8]
24016854:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
24016858:	687b      	ldr	r3, [r7, #4]
2401685a:	60da      	str	r2, [r3, #12]
}
2401685c:	bf00      	nop
2401685e:	370c      	adds	r7, #12
24016860:	46bd      	mov	sp, r7
24016862:	f85d 7b04 	ldr.w	r7, [sp], #4
24016866:	4770      	bx	lr
24016868:	40008400 	.word	0x40008400

2401686c <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
2401686c:	b580      	push	{r7, lr}
2401686e:	b084      	sub	sp, #16
24016870:	af00      	add	r7, sp, #0
24016872:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
24016874:	2300      	movs	r3, #0
24016876:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
24016878:	f7eb fc68 	bl	2400214c <HAL_GetTick>
2401687c:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
2401687e:	687b      	ldr	r3, [r7, #4]
24016880:	f1b3 3fff 	cmp.w	r3, #4294967295
24016884:	d00c      	beq.n	240168a0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24016886:	f7eb fc61 	bl	2400214c <HAL_GetTick>
2401688a:	4602      	mov	r2, r0
2401688c:	68bb      	ldr	r3, [r7, #8]
2401688e:	1ad3      	subs	r3, r2, r3
24016890:	687a      	ldr	r2, [r7, #4]
24016892:	429a      	cmp	r2, r3
24016894:	d302      	bcc.n	2401689c <HAL_RCCEx_CRSWaitSynchronization+0x30>
24016896:	687b      	ldr	r3, [r7, #4]
24016898:	2b00      	cmp	r3, #0
2401689a:	d101      	bne.n	240168a0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
2401689c:	2301      	movs	r3, #1
2401689e:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
240168a0:	4b2a      	ldr	r3, [pc, #168]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168a2:	689b      	ldr	r3, [r3, #8]
240168a4:	f003 0301 	and.w	r3, r3, #1
240168a8:	2b01      	cmp	r3, #1
240168aa:	d106      	bne.n	240168ba <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
240168ac:	68fb      	ldr	r3, [r7, #12]
240168ae:	f043 0302 	orr.w	r3, r3, #2
240168b2:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
240168b4:	4b25      	ldr	r3, [pc, #148]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168b6:	2201      	movs	r2, #1
240168b8:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
240168ba:	4b24      	ldr	r3, [pc, #144]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168bc:	689b      	ldr	r3, [r3, #8]
240168be:	f003 0302 	and.w	r3, r3, #2
240168c2:	2b02      	cmp	r3, #2
240168c4:	d106      	bne.n	240168d4 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
240168c6:	68fb      	ldr	r3, [r7, #12]
240168c8:	f043 0304 	orr.w	r3, r3, #4
240168cc:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
240168ce:	4b1f      	ldr	r3, [pc, #124]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168d0:	2202      	movs	r2, #2
240168d2:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
240168d4:	4b1d      	ldr	r3, [pc, #116]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168d6:	689b      	ldr	r3, [r3, #8]
240168d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240168dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
240168e0:	d106      	bne.n	240168f0 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
240168e2:	68fb      	ldr	r3, [r7, #12]
240168e4:	f043 0320 	orr.w	r3, r3, #32
240168e8:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
240168ea:	4b18      	ldr	r3, [pc, #96]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168ec:	2204      	movs	r2, #4
240168ee:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
240168f0:	4b16      	ldr	r3, [pc, #88]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240168f2:	689b      	ldr	r3, [r3, #8]
240168f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
240168f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240168fc:	d106      	bne.n	2401690c <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
240168fe:	68fb      	ldr	r3, [r7, #12]
24016900:	f043 0308 	orr.w	r3, r3, #8
24016904:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
24016906:	4b11      	ldr	r3, [pc, #68]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016908:	2204      	movs	r2, #4
2401690a:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
2401690c:	4b0f      	ldr	r3, [pc, #60]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401690e:	689b      	ldr	r3, [r3, #8]
24016910:	f403 7300 	and.w	r3, r3, #512	; 0x200
24016914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24016918:	d106      	bne.n	24016928 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
2401691a:	68fb      	ldr	r3, [r7, #12]
2401691c:	f043 0310 	orr.w	r3, r3, #16
24016920:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
24016922:	4b0a      	ldr	r3, [pc, #40]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016924:	2204      	movs	r2, #4
24016926:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
24016928:	4b08      	ldr	r3, [pc, #32]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401692a:	689b      	ldr	r3, [r3, #8]
2401692c:	f003 0308 	and.w	r3, r3, #8
24016930:	2b08      	cmp	r3, #8
24016932:	d102      	bne.n	2401693a <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
24016934:	4b05      	ldr	r3, [pc, #20]	; (2401694c <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016936:	2208      	movs	r2, #8
24016938:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
2401693a:	68fb      	ldr	r3, [r7, #12]
2401693c:	2b00      	cmp	r3, #0
2401693e:	d09e      	beq.n	2401687e <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
24016940:	68fb      	ldr	r3, [r7, #12]
}
24016942:	4618      	mov	r0, r3
24016944:	3710      	adds	r7, #16
24016946:	46bd      	mov	sp, r7
24016948:	bd80      	pop	{r7, pc}
2401694a:	bf00      	nop
2401694c:	40008400 	.word	0x40008400

24016950 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
24016950:	b580      	push	{r7, lr}
24016952:	b084      	sub	sp, #16
24016954:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
24016956:	2300      	movs	r3, #0
24016958:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
2401695a:	4b33      	ldr	r3, [pc, #204]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2401695c:	689b      	ldr	r3, [r3, #8]
2401695e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
24016960:	4b31      	ldr	r3, [pc, #196]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016962:	681b      	ldr	r3, [r3, #0]
24016964:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
24016966:	68bb      	ldr	r3, [r7, #8]
24016968:	f003 0301 	and.w	r3, r3, #1
2401696c:	2b00      	cmp	r3, #0
2401696e:	d00a      	beq.n	24016986 <HAL_RCCEx_CRS_IRQHandler+0x36>
24016970:	687b      	ldr	r3, [r7, #4]
24016972:	f003 0301 	and.w	r3, r3, #1
24016976:	2b00      	cmp	r3, #0
24016978:	d005      	beq.n	24016986 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
2401697a:	4b2b      	ldr	r3, [pc, #172]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2401697c:	2201      	movs	r2, #1
2401697e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
24016980:	f000 f854 	bl	24016a2c <HAL_RCCEx_CRS_SyncOkCallback>
24016984:	e04b      	b.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
24016986:	68bb      	ldr	r3, [r7, #8]
24016988:	f003 0302 	and.w	r3, r3, #2
2401698c:	2b00      	cmp	r3, #0
2401698e:	d00a      	beq.n	240169a6 <HAL_RCCEx_CRS_IRQHandler+0x56>
24016990:	687b      	ldr	r3, [r7, #4]
24016992:	f003 0302 	and.w	r3, r3, #2
24016996:	2b00      	cmp	r3, #0
24016998:	d005      	beq.n	240169a6 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
2401699a:	4b23      	ldr	r3, [pc, #140]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2401699c:	2202      	movs	r2, #2
2401699e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
240169a0:	f000 f84b 	bl	24016a3a <HAL_RCCEx_CRS_SyncWarnCallback>
240169a4:	e03b      	b.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
240169a6:	68bb      	ldr	r3, [r7, #8]
240169a8:	f003 0308 	and.w	r3, r3, #8
240169ac:	2b00      	cmp	r3, #0
240169ae:	d00a      	beq.n	240169c6 <HAL_RCCEx_CRS_IRQHandler+0x76>
240169b0:	687b      	ldr	r3, [r7, #4]
240169b2:	f003 0308 	and.w	r3, r3, #8
240169b6:	2b00      	cmp	r3, #0
240169b8:	d005      	beq.n	240169c6 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
240169ba:	4b1b      	ldr	r3, [pc, #108]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
240169bc:	2208      	movs	r2, #8
240169be:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
240169c0:	f000 f842 	bl	24016a48 <HAL_RCCEx_CRS_ExpectedSyncCallback>
240169c4:	e02b      	b.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
240169c6:	68bb      	ldr	r3, [r7, #8]
240169c8:	f003 0304 	and.w	r3, r3, #4
240169cc:	2b00      	cmp	r3, #0
240169ce:	d026      	beq.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
240169d0:	687b      	ldr	r3, [r7, #4]
240169d2:	f003 0304 	and.w	r3, r3, #4
240169d6:	2b00      	cmp	r3, #0
240169d8:	d021      	beq.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
240169da:	68bb      	ldr	r3, [r7, #8]
240169dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
240169e0:	2b00      	cmp	r3, #0
240169e2:	d003      	beq.n	240169ec <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
240169e4:	68fb      	ldr	r3, [r7, #12]
240169e6:	f043 0308 	orr.w	r3, r3, #8
240169ea:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
240169ec:	68bb      	ldr	r3, [r7, #8]
240169ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
240169f2:	2b00      	cmp	r3, #0
240169f4:	d003      	beq.n	240169fe <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
240169f6:	68fb      	ldr	r3, [r7, #12]
240169f8:	f043 0310 	orr.w	r3, r3, #16
240169fc:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
240169fe:	68bb      	ldr	r3, [r7, #8]
24016a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24016a04:	2b00      	cmp	r3, #0
24016a06:	d003      	beq.n	24016a10 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
24016a08:	68fb      	ldr	r3, [r7, #12]
24016a0a:	f043 0320 	orr.w	r3, r3, #32
24016a0e:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
24016a10:	4b05      	ldr	r3, [pc, #20]	; (24016a28 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a12:	2204      	movs	r2, #4
24016a14:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
24016a16:	68f8      	ldr	r0, [r7, #12]
24016a18:	f000 f81d 	bl	24016a56 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
24016a1c:	e7ff      	b.n	24016a1e <HAL_RCCEx_CRS_IRQHandler+0xce>
24016a1e:	bf00      	nop
24016a20:	3710      	adds	r7, #16
24016a22:	46bd      	mov	sp, r7
24016a24:	bd80      	pop	{r7, pc}
24016a26:	bf00      	nop
24016a28:	40008400 	.word	0x40008400

24016a2c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
24016a2c:	b480      	push	{r7}
24016a2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
24016a30:	bf00      	nop
24016a32:	46bd      	mov	sp, r7
24016a34:	f85d 7b04 	ldr.w	r7, [sp], #4
24016a38:	4770      	bx	lr

24016a3a <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
24016a3a:	b480      	push	{r7}
24016a3c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
24016a3e:	bf00      	nop
24016a40:	46bd      	mov	sp, r7
24016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
24016a46:	4770      	bx	lr

24016a48 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
24016a48:	b480      	push	{r7}
24016a4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
24016a4c:	bf00      	nop
24016a4e:	46bd      	mov	sp, r7
24016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
24016a54:	4770      	bx	lr

24016a56 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
24016a56:	b480      	push	{r7}
24016a58:	b083      	sub	sp, #12
24016a5a:	af00      	add	r7, sp, #0
24016a5c:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
24016a5e:	bf00      	nop
24016a60:	370c      	adds	r7, #12
24016a62:	46bd      	mov	sp, r7
24016a64:	f85d 7b04 	ldr.w	r7, [sp], #4
24016a68:	4770      	bx	lr
	...

24016a6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24016a6c:	b580      	push	{r7, lr}
24016a6e:	b084      	sub	sp, #16
24016a70:	af00      	add	r7, sp, #0
24016a72:	6078      	str	r0, [r7, #4]
24016a74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24016a76:	2300      	movs	r3, #0
24016a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24016a7a:	4b53      	ldr	r3, [pc, #332]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016a7e:	f003 0303 	and.w	r3, r3, #3
24016a82:	2b03      	cmp	r3, #3
24016a84:	d101      	bne.n	24016a8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
24016a86:	2301      	movs	r3, #1
24016a88:	e099      	b.n	24016bbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24016a8a:	4b4f      	ldr	r3, [pc, #316]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016a8c:	681b      	ldr	r3, [r3, #0]
24016a8e:	4a4e      	ldr	r2, [pc, #312]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24016a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016a96:	f7eb fb59 	bl	2400214c <HAL_GetTick>
24016a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24016a9c:	e008      	b.n	24016ab0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
24016a9e:	f7eb fb55 	bl	2400214c <HAL_GetTick>
24016aa2:	4602      	mov	r2, r0
24016aa4:	68bb      	ldr	r3, [r7, #8]
24016aa6:	1ad3      	subs	r3, r2, r3
24016aa8:	2b02      	cmp	r3, #2
24016aaa:	d901      	bls.n	24016ab0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
24016aac:	2303      	movs	r3, #3
24016aae:	e086      	b.n	24016bbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24016ab0:	4b45      	ldr	r3, [pc, #276]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016ab2:	681b      	ldr	r3, [r3, #0]
24016ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016ab8:	2b00      	cmp	r3, #0
24016aba:	d1f0      	bne.n	24016a9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24016abc:	4b42      	ldr	r3, [pc, #264]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016ac0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24016ac4:	687b      	ldr	r3, [r7, #4]
24016ac6:	681b      	ldr	r3, [r3, #0]
24016ac8:	031b      	lsls	r3, r3, #12
24016aca:	493f      	ldr	r1, [pc, #252]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016acc:	4313      	orrs	r3, r2
24016ace:	628b      	str	r3, [r1, #40]	; 0x28
24016ad0:	687b      	ldr	r3, [r7, #4]
24016ad2:	685b      	ldr	r3, [r3, #4]
24016ad4:	3b01      	subs	r3, #1
24016ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
24016ada:	687b      	ldr	r3, [r7, #4]
24016adc:	689b      	ldr	r3, [r3, #8]
24016ade:	3b01      	subs	r3, #1
24016ae0:	025b      	lsls	r3, r3, #9
24016ae2:	b29b      	uxth	r3, r3
24016ae4:	431a      	orrs	r2, r3
24016ae6:	687b      	ldr	r3, [r7, #4]
24016ae8:	68db      	ldr	r3, [r3, #12]
24016aea:	3b01      	subs	r3, #1
24016aec:	041b      	lsls	r3, r3, #16
24016aee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24016af2:	431a      	orrs	r2, r3
24016af4:	687b      	ldr	r3, [r7, #4]
24016af6:	691b      	ldr	r3, [r3, #16]
24016af8:	3b01      	subs	r3, #1
24016afa:	061b      	lsls	r3, r3, #24
24016afc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24016b00:	4931      	ldr	r1, [pc, #196]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b02:	4313      	orrs	r3, r2
24016b04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24016b06:	4b30      	ldr	r3, [pc, #192]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
24016b0e:	687b      	ldr	r3, [r7, #4]
24016b10:	695b      	ldr	r3, [r3, #20]
24016b12:	492d      	ldr	r1, [pc, #180]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b14:	4313      	orrs	r3, r2
24016b16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24016b18:	4b2b      	ldr	r3, [pc, #172]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b1c:	f023 0220 	bic.w	r2, r3, #32
24016b20:	687b      	ldr	r3, [r7, #4]
24016b22:	699b      	ldr	r3, [r3, #24]
24016b24:	4928      	ldr	r1, [pc, #160]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b26:	4313      	orrs	r3, r2
24016b28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24016b2a:	4b27      	ldr	r3, [pc, #156]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b2e:	4a26      	ldr	r2, [pc, #152]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b30:	f023 0310 	bic.w	r3, r3, #16
24016b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24016b36:	4b24      	ldr	r3, [pc, #144]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24016b3a:	4b24      	ldr	r3, [pc, #144]	; (24016bcc <RCCEx_PLL2_Config+0x160>)
24016b3c:	4013      	ands	r3, r2
24016b3e:	687a      	ldr	r2, [r7, #4]
24016b40:	69d2      	ldr	r2, [r2, #28]
24016b42:	00d2      	lsls	r2, r2, #3
24016b44:	4920      	ldr	r1, [pc, #128]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b46:	4313      	orrs	r3, r2
24016b48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24016b4a:	4b1f      	ldr	r3, [pc, #124]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b4e:	4a1e      	ldr	r2, [pc, #120]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b50:	f043 0310 	orr.w	r3, r3, #16
24016b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
24016b56:	683b      	ldr	r3, [r7, #0]
24016b58:	2b00      	cmp	r3, #0
24016b5a:	d106      	bne.n	24016b6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24016b5c:	4b1a      	ldr	r3, [pc, #104]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b60:	4a19      	ldr	r2, [pc, #100]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24016b66:	62d3      	str	r3, [r2, #44]	; 0x2c
24016b68:	e00f      	b.n	24016b8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
24016b6a:	683b      	ldr	r3, [r7, #0]
24016b6c:	2b01      	cmp	r3, #1
24016b6e:	d106      	bne.n	24016b7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24016b70:	4b15      	ldr	r3, [pc, #84]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b74:	4a14      	ldr	r2, [pc, #80]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24016b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
24016b7c:	e005      	b.n	24016b8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24016b7e:	4b12      	ldr	r3, [pc, #72]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016b82:	4a11      	ldr	r2, [pc, #68]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24016b88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24016b8a:	4b0f      	ldr	r3, [pc, #60]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b8c:	681b      	ldr	r3, [r3, #0]
24016b8e:	4a0e      	ldr	r2, [pc, #56]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24016b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016b96:	f7eb fad9 	bl	2400214c <HAL_GetTick>
24016b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24016b9c:	e008      	b.n	24016bb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
24016b9e:	f7eb fad5 	bl	2400214c <HAL_GetTick>
24016ba2:	4602      	mov	r2, r0
24016ba4:	68bb      	ldr	r3, [r7, #8]
24016ba6:	1ad3      	subs	r3, r2, r3
24016ba8:	2b02      	cmp	r3, #2
24016baa:	d901      	bls.n	24016bb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
24016bac:	2303      	movs	r3, #3
24016bae:	e006      	b.n	24016bbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24016bb0:	4b05      	ldr	r3, [pc, #20]	; (24016bc8 <RCCEx_PLL2_Config+0x15c>)
24016bb2:	681b      	ldr	r3, [r3, #0]
24016bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016bb8:	2b00      	cmp	r3, #0
24016bba:	d0f0      	beq.n	24016b9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
24016bbc:	7bfb      	ldrb	r3, [r7, #15]
}
24016bbe:	4618      	mov	r0, r3
24016bc0:	3710      	adds	r7, #16
24016bc2:	46bd      	mov	sp, r7
24016bc4:	bd80      	pop	{r7, pc}
24016bc6:	bf00      	nop
24016bc8:	58024400 	.word	0x58024400
24016bcc:	ffff0007 	.word	0xffff0007

24016bd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24016bd0:	b580      	push	{r7, lr}
24016bd2:	b084      	sub	sp, #16
24016bd4:	af00      	add	r7, sp, #0
24016bd6:	6078      	str	r0, [r7, #4]
24016bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24016bda:	2300      	movs	r3, #0
24016bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24016bde:	4b53      	ldr	r3, [pc, #332]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016be2:	f003 0303 	and.w	r3, r3, #3
24016be6:	2b03      	cmp	r3, #3
24016be8:	d101      	bne.n	24016bee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
24016bea:	2301      	movs	r3, #1
24016bec:	e099      	b.n	24016d22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24016bee:	4b4f      	ldr	r3, [pc, #316]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016bf0:	681b      	ldr	r3, [r3, #0]
24016bf2:	4a4e      	ldr	r2, [pc, #312]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24016bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016bfa:	f7eb faa7 	bl	2400214c <HAL_GetTick>
24016bfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24016c00:	e008      	b.n	24016c14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24016c02:	f7eb faa3 	bl	2400214c <HAL_GetTick>
24016c06:	4602      	mov	r2, r0
24016c08:	68bb      	ldr	r3, [r7, #8]
24016c0a:	1ad3      	subs	r3, r2, r3
24016c0c:	2b02      	cmp	r3, #2
24016c0e:	d901      	bls.n	24016c14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
24016c10:	2303      	movs	r3, #3
24016c12:	e086      	b.n	24016d22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24016c14:	4b45      	ldr	r3, [pc, #276]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c16:	681b      	ldr	r3, [r3, #0]
24016c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24016c1c:	2b00      	cmp	r3, #0
24016c1e:	d1f0      	bne.n	24016c02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24016c20:	4b42      	ldr	r3, [pc, #264]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016c24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
24016c28:	687b      	ldr	r3, [r7, #4]
24016c2a:	681b      	ldr	r3, [r3, #0]
24016c2c:	051b      	lsls	r3, r3, #20
24016c2e:	493f      	ldr	r1, [pc, #252]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c30:	4313      	orrs	r3, r2
24016c32:	628b      	str	r3, [r1, #40]	; 0x28
24016c34:	687b      	ldr	r3, [r7, #4]
24016c36:	685b      	ldr	r3, [r3, #4]
24016c38:	3b01      	subs	r3, #1
24016c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
24016c3e:	687b      	ldr	r3, [r7, #4]
24016c40:	689b      	ldr	r3, [r3, #8]
24016c42:	3b01      	subs	r3, #1
24016c44:	025b      	lsls	r3, r3, #9
24016c46:	b29b      	uxth	r3, r3
24016c48:	431a      	orrs	r2, r3
24016c4a:	687b      	ldr	r3, [r7, #4]
24016c4c:	68db      	ldr	r3, [r3, #12]
24016c4e:	3b01      	subs	r3, #1
24016c50:	041b      	lsls	r3, r3, #16
24016c52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24016c56:	431a      	orrs	r2, r3
24016c58:	687b      	ldr	r3, [r7, #4]
24016c5a:	691b      	ldr	r3, [r3, #16]
24016c5c:	3b01      	subs	r3, #1
24016c5e:	061b      	lsls	r3, r3, #24
24016c60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24016c64:	4931      	ldr	r1, [pc, #196]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c66:	4313      	orrs	r3, r2
24016c68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24016c6a:	4b30      	ldr	r3, [pc, #192]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
24016c72:	687b      	ldr	r3, [r7, #4]
24016c74:	695b      	ldr	r3, [r3, #20]
24016c76:	492d      	ldr	r1, [pc, #180]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c78:	4313      	orrs	r3, r2
24016c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24016c7c:	4b2b      	ldr	r3, [pc, #172]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24016c84:	687b      	ldr	r3, [r7, #4]
24016c86:	699b      	ldr	r3, [r3, #24]
24016c88:	4928      	ldr	r1, [pc, #160]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c8a:	4313      	orrs	r3, r2
24016c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24016c8e:	4b27      	ldr	r3, [pc, #156]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c92:	4a26      	ldr	r2, [pc, #152]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24016c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24016c9a:	4b24      	ldr	r3, [pc, #144]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24016c9e:	4b24      	ldr	r3, [pc, #144]	; (24016d30 <RCCEx_PLL3_Config+0x160>)
24016ca0:	4013      	ands	r3, r2
24016ca2:	687a      	ldr	r2, [r7, #4]
24016ca4:	69d2      	ldr	r2, [r2, #28]
24016ca6:	00d2      	lsls	r2, r2, #3
24016ca8:	4920      	ldr	r1, [pc, #128]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016caa:	4313      	orrs	r3, r2
24016cac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24016cae:	4b1f      	ldr	r3, [pc, #124]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016cb2:	4a1e      	ldr	r2, [pc, #120]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24016cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
24016cba:	683b      	ldr	r3, [r7, #0]
24016cbc:	2b00      	cmp	r3, #0
24016cbe:	d106      	bne.n	24016cce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24016cc0:	4b1a      	ldr	r3, [pc, #104]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016cc4:	4a19      	ldr	r2, [pc, #100]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24016cca:	62d3      	str	r3, [r2, #44]	; 0x2c
24016ccc:	e00f      	b.n	24016cee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
24016cce:	683b      	ldr	r3, [r7, #0]
24016cd0:	2b01      	cmp	r3, #1
24016cd2:	d106      	bne.n	24016ce2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24016cd4:	4b15      	ldr	r3, [pc, #84]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016cd8:	4a14      	ldr	r2, [pc, #80]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24016cde:	62d3      	str	r3, [r2, #44]	; 0x2c
24016ce0:	e005      	b.n	24016cee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24016ce2:	4b12      	ldr	r3, [pc, #72]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016ce6:	4a11      	ldr	r2, [pc, #68]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24016cec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24016cee:	4b0f      	ldr	r3, [pc, #60]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cf0:	681b      	ldr	r3, [r3, #0]
24016cf2:	4a0e      	ldr	r2, [pc, #56]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24016cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016cfa:	f7eb fa27 	bl	2400214c <HAL_GetTick>
24016cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24016d00:	e008      	b.n	24016d14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24016d02:	f7eb fa23 	bl	2400214c <HAL_GetTick>
24016d06:	4602      	mov	r2, r0
24016d08:	68bb      	ldr	r3, [r7, #8]
24016d0a:	1ad3      	subs	r3, r2, r3
24016d0c:	2b02      	cmp	r3, #2
24016d0e:	d901      	bls.n	24016d14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
24016d10:	2303      	movs	r3, #3
24016d12:	e006      	b.n	24016d22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24016d14:	4b05      	ldr	r3, [pc, #20]	; (24016d2c <RCCEx_PLL3_Config+0x15c>)
24016d16:	681b      	ldr	r3, [r3, #0]
24016d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24016d1c:	2b00      	cmp	r3, #0
24016d1e:	d0f0      	beq.n	24016d02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
24016d20:	7bfb      	ldrb	r3, [r7, #15]
}
24016d22:	4618      	mov	r0, r3
24016d24:	3710      	adds	r7, #16
24016d26:	46bd      	mov	sp, r7
24016d28:	bd80      	pop	{r7, pc}
24016d2a:	bf00      	nop
24016d2c:	58024400 	.word	0x58024400
24016d30:	ffff0007 	.word	0xffff0007

24016d34 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
24016d34:	b580      	push	{r7, lr}
24016d36:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
24016d38:	4b07      	ldr	r3, [pc, #28]	; (24016d58 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24016d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24016d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
24016d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24016d44:	d105      	bne.n	24016d52 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
24016d46:	4b04      	ldr	r3, [pc, #16]	; (24016d58 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24016d48:	f44f 7200 	mov.w	r2, #512	; 0x200
24016d4c:	669a      	str	r2, [r3, #104]	; 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
24016d4e:	f000 f805 	bl	24016d5c <HAL_RCCEx_LSECSS_Callback>

  }
}
24016d52:	bf00      	nop
24016d54:	bd80      	pop	{r7, pc}
24016d56:	bf00      	nop
24016d58:	58024400 	.word	0x58024400

24016d5c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
24016d5c:	b480      	push	{r7}
24016d5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
24016d60:	bf00      	nop
24016d62:	46bd      	mov	sp, r7
24016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
24016d68:	4770      	bx	lr
	...

24016d6c <__errno>:
24016d6c:	4b01      	ldr	r3, [pc, #4]	; (24016d74 <__errno+0x8>)
24016d6e:	6818      	ldr	r0, [r3, #0]
24016d70:	4770      	bx	lr
24016d72:	bf00      	nop
24016d74:	240004d8 	.word	0x240004d8

24016d78 <exit>:
24016d78:	b508      	push	{r3, lr}
24016d7a:	4b07      	ldr	r3, [pc, #28]	; (24016d98 <exit+0x20>)
24016d7c:	4604      	mov	r4, r0
24016d7e:	b113      	cbz	r3, 24016d86 <exit+0xe>
24016d80:	2100      	movs	r1, #0
24016d82:	f3af 8000 	nop.w
24016d86:	4b05      	ldr	r3, [pc, #20]	; (24016d9c <exit+0x24>)
24016d88:	6818      	ldr	r0, [r3, #0]
24016d8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
24016d8c:	b103      	cbz	r3, 24016d90 <exit+0x18>
24016d8e:	4798      	blx	r3
24016d90:	4620      	mov	r0, r4
24016d92:	f7ea fd9c 	bl	240018ce <_exit>
24016d96:	bf00      	nop
24016d98:	00000000 	.word	0x00000000
24016d9c:	24016f58 	.word	0x24016f58

24016da0 <__libc_init_array>:
24016da0:	b570      	push	{r4, r5, r6, lr}
24016da2:	4d0d      	ldr	r5, [pc, #52]	; (24016dd8 <__libc_init_array+0x38>)
24016da4:	4c0d      	ldr	r4, [pc, #52]	; (24016ddc <__libc_init_array+0x3c>)
24016da6:	1b64      	subs	r4, r4, r5
24016da8:	10a4      	asrs	r4, r4, #2
24016daa:	2600      	movs	r6, #0
24016dac:	42a6      	cmp	r6, r4
24016dae:	d109      	bne.n	24016dc4 <__libc_init_array+0x24>
24016db0:	4d0b      	ldr	r5, [pc, #44]	; (24016de0 <__libc_init_array+0x40>)
24016db2:	4c0c      	ldr	r4, [pc, #48]	; (24016de4 <__libc_init_array+0x44>)
24016db4:	f000 f830 	bl	24016e18 <_init>
24016db8:	1b64      	subs	r4, r4, r5
24016dba:	10a4      	asrs	r4, r4, #2
24016dbc:	2600      	movs	r6, #0
24016dbe:	42a6      	cmp	r6, r4
24016dc0:	d105      	bne.n	24016dce <__libc_init_array+0x2e>
24016dc2:	bd70      	pop	{r4, r5, r6, pc}
24016dc4:	f855 3b04 	ldr.w	r3, [r5], #4
24016dc8:	4798      	blx	r3
24016dca:	3601      	adds	r6, #1
24016dcc:	e7ee      	b.n	24016dac <__libc_init_array+0xc>
24016dce:	f855 3b04 	ldr.w	r3, [r5], #4
24016dd2:	4798      	blx	r3
24016dd4:	3601      	adds	r6, #1
24016dd6:	e7f2      	b.n	24016dbe <__libc_init_array+0x1e>
24016dd8:	240004a0 	.word	0x240004a0
24016ddc:	240004a0 	.word	0x240004a0
24016de0:	240004a0 	.word	0x240004a0
24016de4:	240004a4 	.word	0x240004a4

24016de8 <memcpy>:
24016de8:	440a      	add	r2, r1
24016dea:	4291      	cmp	r1, r2
24016dec:	f100 33ff 	add.w	r3, r0, #4294967295
24016df0:	d100      	bne.n	24016df4 <memcpy+0xc>
24016df2:	4770      	bx	lr
24016df4:	b510      	push	{r4, lr}
24016df6:	f811 4b01 	ldrb.w	r4, [r1], #1
24016dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
24016dfe:	4291      	cmp	r1, r2
24016e00:	d1f9      	bne.n	24016df6 <memcpy+0xe>
24016e02:	bd10      	pop	{r4, pc}

24016e04 <memset>:
24016e04:	4402      	add	r2, r0
24016e06:	4603      	mov	r3, r0
24016e08:	4293      	cmp	r3, r2
24016e0a:	d100      	bne.n	24016e0e <memset+0xa>
24016e0c:	4770      	bx	lr
24016e0e:	f803 1b01 	strb.w	r1, [r3], #1
24016e12:	e7f9      	b.n	24016e08 <memset+0x4>

24016e14 <__EH_FRAME_BEGIN__>:
24016e14:	0000 0000                                   ....

24016e18 <_init>:
24016e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016e1a:	bf00      	nop
24016e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
24016e1e:	bc08      	pop	{r3}
24016e20:	469e      	mov	lr, r3
24016e22:	4770      	bx	lr

24016e24 <_fini>:
24016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016e26:	bf00      	nop
24016e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
24016e2a:	bc08      	pop	{r3}
24016e2c:	469e      	mov	lr, r3
24016e2e:	4770      	bx	lr
