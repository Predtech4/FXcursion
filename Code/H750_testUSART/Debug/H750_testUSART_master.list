
H750_testUSART_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008834  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24002000  08008b1c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a0  24002014  08008b30  00022014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240021b4  08008b30  000221b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022014  2**0
                  CONTENTS, READONLY
 10 .ramd1dma     0000000c  24000000  24000000  00030000  2**2
                  ALLOC
 11 .ramd1        00000000  240027b8  240027b8  00022042  2**0
                  CONTENTS
 12 .ramd2        00000000  30000000  30000000  00022042  2**0
                  CONTENTS
 13 .ramd3        00000000  38000000  38000000  00022042  2**0
                  CONTENTS
 14 .dtcm         00000000  20004000  20004000  00022042  2**0
                  CONTENTS
 15 .itcm         00000000  00000000  00000000  00022042  2**0
                  CONTENTS
 16 .debug_info   00012585  00000000  00000000  00022042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002255  00000000  00000000  000345c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b00  00000000  00000000  00036820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000a28  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00036353  00000000  00000000  00037d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000117ec  00000000  00000000  0006e09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00157b78  00000000  00000000  0007f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001d73ff  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002bf4  00000000  00000000  001d7450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24002014 	.word	0x24002014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008ab4 	.word	0x08008ab4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002018 	.word	0x24002018
 80002d4:	08008ab4 	.word	0x08008ab4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_DMA_Init+0x4c>)
 80005e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_DMA_Init+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_DMA_Init+0x4c>)
 80005f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	200b      	movs	r0, #11
 8000606:	f000 fdda 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060a:	200b      	movs	r0, #11
 800060c:	f000 fdf1 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	200c      	movs	r0, #12
 8000616:	f000 fdd2 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061a:	200c      	movs	r0, #12
 800061c:	f000 fde9 	bl	80011f2 <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58024400 	.word	0x58024400

0800062c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <MX_GPIO_Init+0x6c>)
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	58024400 	.word	0x58024400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a2:	f000 f965 	bl	8000970 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <main+0x15c>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006be:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <main+0x15c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
}
 80006d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d2:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <main+0x15c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a48      	ldr	r2, [pc, #288]	; (80007f8 <main+0x15c>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
}
 80006e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
}
 80006e8:	e000      	b.n	80006ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <main+0x15c>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d138      	bne.n	800076a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006f8:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <main+0x15c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000700:	f3bf 8f4f 	dsb	sy
}
 8000704:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000706:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <main+0x15c>)
 8000708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800070c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	0b5b      	lsrs	r3, r3, #13
 8000712:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000716:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000720:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	015a      	lsls	r2, r3, #5
 8000726:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000730:	4931      	ldr	r1, [pc, #196]	; (80007f8 <main+0x15c>)
 8000732:	4313      	orrs	r3, r2
 8000734:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1ef      	bne.n	8000722 <main+0x86>
    } while(sets-- != 0U);
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	60ba      	str	r2, [r7, #8]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e5      	bne.n	8000718 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800074c:	f3bf 8f4f 	dsb	sy
}
 8000750:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <main+0x15c>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <main+0x15c>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800075e:	f3bf 8f4f 	dsb	sy
}
 8000762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
}
 8000768:	e000      	b.n	800076c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fb8a 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f84e 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ff5a 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000778:	f7ff ff30 	bl	80005dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800077c:	f000 fa16 	bl	8000bac <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  for(int i = 0 ; i < tx_size; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00b      	b.n	800079e <main+0x102>
  	bufMasterTx[i] = i+1;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b2d9      	uxtb	r1, r3
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <main+0x160>)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	4413      	add	r3, r2
 8000794:	460a      	mov	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < tx_size; i++) {
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <main+0x164>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4293      	cmp	r3, r2
 80007a8:	dbed      	blt.n	8000786 <main+0xea>
  }
  for(int i = 0 ; i < rx_size; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	e007      	b.n	80007c0 <main+0x124>
  	bufMasterRx[i] = 0;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <main+0x168>)
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < rx_size; i++) {
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	3301      	adds	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <main+0x16c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	dbf1      	blt.n	80007b0 <main+0x114>
  }


  HAL_UART_Receive_DMA(&huart2, bufMasterRx, rx_size);
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <main+0x16c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	490b      	ldr	r1, [pc, #44]	; (8000804 <main+0x168>)
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <main+0x170>)
 80007d8:	f006 f9f8 	bl	8006bcc <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fbe2 	bl	8000fa8 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, bufMasterTx, tx_size);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <main+0x164>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4903      	ldr	r1, [pc, #12]	; (80007fc <main+0x160>)
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <main+0x170>)
 80007f0:	f006 f95a 	bl	8006aa8 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80007f4:	e7f2      	b.n	80007dc <main+0x140>
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	24000000 	.word	0x24000000
 8000800:	24002000 	.word	0x24002000
 8000804:	24000008 	.word	0x24000008
 8000808:	24002001 	.word	0x24002001
 800080c:	24002030 	.word	0x24002030

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09e      	sub	sp, #120	; 0x78
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f008 f940 	bl	8008aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2220      	movs	r2, #32
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f008 f939 	bl	8008aa4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000832:	2002      	movs	r0, #2
 8000834:	f003 fd60 	bl	80042f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b49      	ldr	r3, [pc, #292]	; (8000964 <SystemClock_Config+0x154>)
 800083e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000840:	4a48      	ldr	r2, [pc, #288]	; (8000964 <SystemClock_Config+0x154>)
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <SystemClock_Config+0x154>)
 800084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <SystemClock_Config+0x158>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <SystemClock_Config+0x158>)
 8000858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <SystemClock_Config+0x158>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <SystemClock_Config+0x158>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <SystemClock_Config+0x15c>)
 800087c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <SystemClock_Config+0x15c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <SystemClock_Config+0x15c>)
 800088c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <SystemClock_Config+0x158>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a31      	ldr	r2, [pc, #196]	; (8000968 <SystemClock_Config+0x158>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <SystemClock_Config+0x158>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <SystemClock_Config+0x154>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <SystemClock_Config+0x154>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <SystemClock_Config+0x154>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ca:	bf00      	nop
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <SystemClock_Config+0x158>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d8:	d1f8      	bne.n	80008cc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	2302      	movs	r3, #2
 80008ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000900:	2308      	movs	r3, #8
 8000902:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000904:	2300      	movs	r3, #0
 8000906:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fd2b 	bl	800436c <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800091c:	f000 f855 	bl	80009ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	233f      	movs	r3, #63	; 0x3f
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2303      	movs	r3, #3
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092c:	2308      	movs	r3, #8
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f93d 	bl	8004bc8 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000954:	f000 f839 	bl	80009ca <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000958:	f004 faec 	bl	8004f34 <HAL_RCC_EnableCSS>
}
 800095c:	bf00      	nop
 800095e:	3778      	adds	r7, #120	; 0x78
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58000400 	.word	0x58000400
 8000968:	58024800 	.word	0x58024800
 800096c:	58024400 	.word	0x58024400

08000970 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000982:	f000 fc51 	bl	8001228 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000986:	2301      	movs	r3, #1
 8000988:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800098a:	2300      	movs	r3, #0
 800098c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800098e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000992:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000994:	230c      	movs	r3, #12
 8000996:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000998:	2300      	movs	r3, #0
 800099a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800099c:	2300      	movs	r3, #0
 800099e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009a0:	2303      	movs	r3, #3
 80009a2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b4:	463b      	mov	r3, r7
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fc6e 	bl	8001298 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009bc:	2004      	movs	r0, #4
 80009be:	f000 fc4b 	bl	8001258 <HAL_MPU_Enable>

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009ce:	b672      	cpsid	i
}
 80009d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x30>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x30>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58024400 	.word	0x58024400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a0c:	f004 fc78 	bl	8005300 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x8>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 fa86 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <DMA1_Stream0_IRQHandler+0x10>)
 8000a66:	f001 ff85 	bl	8002974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	240020c0 	.word	0x240020c0

08000a74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <DMA1_Stream1_IRQHandler+0x10>)
 8000a7a:	f001 ff7b 	bl	8002974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	24002138 	.word	0x24002138

08000a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <USART2_IRQHandler+0x10>)
 8000a8e:	f006 f8f3 	bl	8006c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	24002030 	.word	0x24002030

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <SystemInit+0xe4>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a36      	ldr	r2, [pc, #216]	; (8000b80 <SystemInit+0xe4>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <SystemInit+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	2b06      	cmp	r3, #6
 8000aba:	d807      	bhi.n	8000acc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <SystemInit+0xe8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <SystemInit+0xe8>)
 8000ac6:	f043 0307 	orr.w	r3, r3, #7
 8000aca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <SystemInit+0xec>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <SystemInit+0xec>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <SystemInit+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SystemInit+0xec>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4929      	ldr	r1, [pc, #164]	; (8000b88 <SystemInit+0xec>)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <SystemInit+0xf0>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <SystemInit+0xe8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <SystemInit+0xe8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 030f 	bic.w	r3, r3, #15
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemInit+0xe8>)
 8000b00:	f043 0307 	orr.w	r3, r3, #7
 8000b04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <SystemInit+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <SystemInit+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <SystemInit+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <SystemInit+0xec>)
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <SystemInit+0xf4>)
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <SystemInit+0xec>)
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <SystemInit+0xf8>)
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <SystemInit+0xec>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <SystemInit+0xfc>)
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <SystemInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SystemInit+0xec>)
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <SystemInit+0xfc>)
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <SystemInit+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <SystemInit+0xec>)
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <SystemInit+0xfc>)
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <SystemInit+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <SystemInit+0xec>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <SystemInit+0xec>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemInit+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <SystemInit+0x100>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <SystemInit+0x104>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b66:	d202      	bcs.n	8000b6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <SystemInit+0x108>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <SystemInit+0x10c>)
 8000b70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	52002000 	.word	0x52002000
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b90:	02020200 	.word	0x02020200
 8000b94:	01ff0000 	.word	0x01ff0000
 8000b98:	01010280 	.word	0x01010280
 8000b9c:	5c001000 	.word	0x5c001000
 8000ba0:	ffff0000 	.word	0xffff0000
 8000ba4:	51008108 	.word	0x51008108
 8000ba8:	52004000 	.word	0x52004000

08000bac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART2_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf6:	f005 ff07 	bl	8006a08 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f7ff fee3 	bl	80009ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c08:	f007 fe5e 	bl	80088c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f7ff feda 	bl	80009ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c1a:	f007 fe93 	bl	8008944 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f7ff fed1 	bl	80009ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c2a:	f007 fe14 	bl	8008856 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f7ff fec9 	bl	80009ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24002030 	.word	0x24002030
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ba      	sub	sp, #232	; 0xe8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	22bc      	movs	r2, #188	; 0xbc
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 ff1d 	bl	8008aa4 <memset>
  if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a68      	ldr	r2, [pc, #416]	; (8000e10 <HAL_UART_MspInit+0x1cc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f040 80c9 	bne.w	8000e08 <HAL_UART_MspInit+0x1c4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 fb57 	bl	8005338 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000c90:	f7ff fe9b 	bl	80009ca <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c94:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ca4:	4b5b      	ldr	r3, [pc, #364]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a56      	ldr	r2, [pc, #344]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b54      	ldr	r3, [pc, #336]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4841      	ldr	r0, [pc, #260]	; (8000e18 <HAL_UART_MspInit+0x1d4>)
 8000d14:	f003 f940 	bl	8003f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4837      	ldr	r0, [pc, #220]	; (8000e1c <HAL_UART_MspInit+0x1d8>)
 8000d3e:	f003 f92b 	bl	8003f98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d44:	4a37      	ldr	r2, [pc, #220]	; (8000e24 <HAL_UART_MspInit+0x1e0>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d4a:	222b      	movs	r2, #43	; 0x2b
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d82:	4827      	ldr	r0, [pc, #156]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d84:	f000 facc 	bl	8001320 <HAL_DMA_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000d8e:	f7ff fe1c 	bl	80009ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d96:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_UART_MspInit+0x1e8>)
 8000da2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000da6:	222c      	movs	r2, #44	; 0x2c
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000dde:	f000 fa9f 	bl	8001320 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8000de8:	f7ff fdef 	bl	80009ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000df0:	679a      	str	r2, [r3, #120]	; 0x78
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_UART_MspInit+0x1e4>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2026      	movs	r0, #38	; 0x26
 8000dfe:	f000 f9de 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e02:	2026      	movs	r0, #38	; 0x26
 8000e04:	f000 f9f5 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	37e8      	adds	r7, #232	; 0xe8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004400 	.word	0x40004400
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58020000 	.word	0x58020000
 8000e1c:	58020c00 	.word	0x58020c00
 8000e20:	240020c0 	.word	0x240020c0
 8000e24:	40020010 	.word	0x40020010
 8000e28:	24002138 	.word	0x24002138
 8000e2c:	40020028 	.word	0x40020028

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f7ff fe32 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fdfd 	bl	8008a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fc1b 	bl	800069c <main>
  bx  lr
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e6c:	24002000 	.word	0x24002000
  ldr r1, =_edata
 8000e70:	24002014 	.word	0x24002014
  ldr r2, =_sidata
 8000e74:	08008b1c 	.word	0x08008b1c
  ldr r2, =_sbss
 8000e78:	24002014 	.word	0x24002014
  ldr r4, =_ebss
 8000e7c:	240021b4 	.word	0x240021b4

08000e80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC3_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 f98c 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e90:	f004 f860 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8000e94:	4602      	mov	r2, r0
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_Init+0x68>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	4913      	ldr	r1, [pc, #76]	; (8000ef0 <HAL_Init+0x6c>)
 8000ea2:	5ccb      	ldrb	r3, [r1, r3]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_Init+0x6c>)
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x70>)
 8000ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x74>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f814 	bl	8000efc <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e002      	b.n	8000ee4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ede:	f7ff fd79 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	08008acc 	.word	0x08008acc
 8000ef4:	24002008 	.word	0x24002008
 8000ef8:	24002004 	.word	0x24002004

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_InitTick+0x60>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e021      	b.n	8000f54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_InitTick+0x64>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f971 	bl	800120e <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f93b 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x68>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24002010 	.word	0x24002010
 8000f60:	24002004 	.word	0x24002004
 8000f64:	2400200c 	.word	0x2400200c

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	24002010 	.word	0x24002010
 8000f8c:	240021b0 	.word	0x240021b0

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	240021b0 	.word	0x240021b0

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24002010 	.word	0x24002010

08000ff0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetREVID+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0c1b      	lsrs	r3, r3, #16
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	5c001000 	.word	0x5c001000

08001008 <__NVIC_SetPriorityGrouping>:
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	4313      	orrs	r3, r2
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x40>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	05fa0000 	.word	0x05fa0000

08001050 <__NVIC_GetPriorityGrouping>:
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff40 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff90 	bl	80010fc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5f 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff33 	bl	800106c <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa4 	bl	8001164 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800122c:	f3bf 8f5f 	dmb	sy
}
 8001230:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_MPU_Disable+0x28>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_MPU_Disable+0x28>)
 8001238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_MPU_Disable+0x2c>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	e000ed90 	.word	0xe000ed90

08001258 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_MPU_Enable+0x38>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_MPU_Enable+0x3c>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_MPU_Enable+0x3c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001276:	f3bf 8f4f 	dsb	sy
}
 800127a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127c:	f3bf 8f6f 	isb	sy
}
 8001280:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed90 	.word	0xe000ed90
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	785a      	ldrb	r2, [r3, #1]
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_MPU_ConfigRegion+0x84>)
 80012a6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d029      	beq.n	8001304 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <HAL_MPU_ConfigRegion+0x84>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7b1b      	ldrb	r3, [r3, #12]
 80012bc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7adb      	ldrb	r3, [r3, #11]
 80012c2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7a9b      	ldrb	r3, [r3, #10]
 80012ca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7b5b      	ldrb	r3, [r3, #13]
 80012d2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b9b      	ldrb	r3, [r3, #14]
 80012da:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7bdb      	ldrb	r3, [r3, #15]
 80012e2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012f4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001300:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001302:	e005      	b.n	8001310 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_MPU_ConfigRegion+0x84>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_MPU_ConfigRegion+0x84>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed90 	.word	0xe000ed90

08001320 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff fe32 	bl	8000f90 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e316      	b.n	8001966 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <HAL_DMA_Init+0x1b8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d04a      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <HAL_DMA_Init+0x1bc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d045      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_DMA_Init+0x1c0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d040      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a62      	ldr	r2, [pc, #392]	; (80014e4 <HAL_DMA_Init+0x1c4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d03b      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <HAL_DMA_Init+0x1c8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d036      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5f      	ldr	r2, [pc, #380]	; (80014ec <HAL_DMA_Init+0x1cc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d031      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <HAL_DMA_Init+0x1d0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02c      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5c      	ldr	r2, [pc, #368]	; (80014f4 <HAL_DMA_Init+0x1d4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d027      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <HAL_DMA_Init+0x1d8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d022      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <HAL_DMA_Init+0x1dc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d01d      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a57      	ldr	r2, [pc, #348]	; (8001500 <HAL_DMA_Init+0x1e0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d018      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a56      	ldr	r2, [pc, #344]	; (8001504 <HAL_DMA_Init+0x1e4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d013      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a54      	ldr	r2, [pc, #336]	; (8001508 <HAL_DMA_Init+0x1e8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00e      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a53      	ldr	r2, [pc, #332]	; (800150c <HAL_DMA_Init+0x1ec>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d009      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_DMA_Init+0x1f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_DMA_Init+0xb8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_DMA_Init+0x1f4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_DMA_Init+0xbc>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_DMA_Init+0xbe>
 80013dc:	2300      	movs	r3, #0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 813b 	beq.w	800165a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a37      	ldr	r2, [pc, #220]	; (80014d8 <HAL_DMA_Init+0x1b8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d04a      	beq.n	8001494 <HAL_DMA_Init+0x174>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a36      	ldr	r2, [pc, #216]	; (80014dc <HAL_DMA_Init+0x1bc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d045      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a34      	ldr	r2, [pc, #208]	; (80014e0 <HAL_DMA_Init+0x1c0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d040      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a33      	ldr	r2, [pc, #204]	; (80014e4 <HAL_DMA_Init+0x1c4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d03b      	beq.n	8001494 <HAL_DMA_Init+0x174>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <HAL_DMA_Init+0x1c8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d036      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_DMA_Init+0x1cc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d031      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_DMA_Init+0x1d0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02c      	beq.n	8001494 <HAL_DMA_Init+0x174>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2d      	ldr	r2, [pc, #180]	; (80014f4 <HAL_DMA_Init+0x1d4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d027      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <HAL_DMA_Init+0x1d8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d022      	beq.n	8001494 <HAL_DMA_Init+0x174>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <HAL_DMA_Init+0x1dc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d01d      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_DMA_Init+0x1e0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d018      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_DMA_Init+0x1e4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_DMA_Init+0x174>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_DMA_Init+0x1e8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00e      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_DMA_Init+0x1ec>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d009      	beq.n	8001494 <HAL_DMA_Init+0x174>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_DMA_Init+0x1f0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d004      	beq.n	8001494 <HAL_DMA_Init+0x174>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_DMA_Init+0x1f4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d108      	bne.n	80014a6 <HAL_DMA_Init+0x186>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e007      	b.n	80014b6 <HAL_DMA_Init+0x196>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014b6:	e02f      	b.n	8001518 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b8:	f7ff fd6a 	bl	8000f90 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d928      	bls.n	8001518 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e246      	b.n	8001966 <HAL_DMA_Init+0x646>
 80014d8:	40020010 	.word	0x40020010
 80014dc:	40020028 	.word	0x40020028
 80014e0:	40020040 	.word	0x40020040
 80014e4:	40020058 	.word	0x40020058
 80014e8:	40020070 	.word	0x40020070
 80014ec:	40020088 	.word	0x40020088
 80014f0:	400200a0 	.word	0x400200a0
 80014f4:	400200b8 	.word	0x400200b8
 80014f8:	40020410 	.word	0x40020410
 80014fc:	40020428 	.word	0x40020428
 8001500:	40020440 	.word	0x40020440
 8001504:	40020458 	.word	0x40020458
 8001508:	40020470 	.word	0x40020470
 800150c:	40020488 	.word	0x40020488
 8001510:	400204a0 	.word	0x400204a0
 8001514:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1c8      	bne.n	80014b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4b83      	ldr	r3, [pc, #524]	; (8001740 <HAL_DMA_Init+0x420>)
 8001532:	4013      	ands	r3, r2
 8001534:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800153e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2b04      	cmp	r3, #4
 800156a:	d107      	bne.n	800157c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	4313      	orrs	r3, r2
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800157c:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_DMA_Init+0x424>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b71      	ldr	r3, [pc, #452]	; (8001748 <HAL_DMA_Init+0x428>)
 8001582:	4013      	ands	r3, r2
 8001584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001588:	d328      	bcc.n	80015dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b28      	cmp	r3, #40	; 0x28
 8001590:	d903      	bls.n	800159a <HAL_DMA_Init+0x27a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b2e      	cmp	r3, #46	; 0x2e
 8001598:	d917      	bls.n	80015ca <HAL_DMA_Init+0x2aa>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b3e      	cmp	r3, #62	; 0x3e
 80015a0:	d903      	bls.n	80015aa <HAL_DMA_Init+0x28a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b42      	cmp	r3, #66	; 0x42
 80015a8:	d90f      	bls.n	80015ca <HAL_DMA_Init+0x2aa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b46      	cmp	r3, #70	; 0x46
 80015b0:	d903      	bls.n	80015ba <HAL_DMA_Init+0x29a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b48      	cmp	r3, #72	; 0x48
 80015b8:	d907      	bls.n	80015ca <HAL_DMA_Init+0x2aa>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b4e      	cmp	r3, #78	; 0x4e
 80015c0:	d905      	bls.n	80015ce <HAL_DMA_Init+0x2ae>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b52      	cmp	r3, #82	; 0x52
 80015c8:	d801      	bhi.n	80015ce <HAL_DMA_Init+0x2ae>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_DMA_Init+0x2b0>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f023 0307 	bic.w	r3, r3, #7
 80015f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	2b04      	cmp	r3, #4
 8001604:	d117      	bne.n	8001636 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f002 fb33 	bl	8003c84 <DMA_CheckFifoParam>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e197      	b.n	8001966 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f002 fa6e 	bl	8003b20 <DMA_CalcBaseAndBitshift>
 8001644:	4603      	mov	r3, r0
 8001646:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	223f      	movs	r2, #63	; 0x3f
 8001652:	409a      	lsls	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e0cd      	b.n	80017f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a3b      	ldr	r2, [pc, #236]	; (800174c <HAL_DMA_Init+0x42c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d022      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_DMA_Init+0x430>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01d      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HAL_DMA_Init+0x434>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d018      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a36      	ldr	r2, [pc, #216]	; (8001758 <HAL_DMA_Init+0x438>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <HAL_DMA_Init+0x43c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00e      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a33      	ldr	r2, [pc, #204]	; (8001760 <HAL_DMA_Init+0x440>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d009      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_DMA_Init+0x444>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d004      	beq.n	80016aa <HAL_DMA_Init+0x38a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_DMA_Init+0x448>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_DMA_Init+0x38e>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_DMA_Init+0x390>
 80016ae:	2300      	movs	r3, #0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8097 	beq.w	80017e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_DMA_Init+0x42c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d021      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_DMA_Init+0x430>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01c      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_DMA_Init+0x434>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d017      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_DMA_Init+0x438>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d012      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_DMA_Init+0x43c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_DMA_Init+0x440>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d008      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_DMA_Init+0x444>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d003      	beq.n	8001704 <HAL_DMA_Init+0x3e4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_DMA_Init+0x448>)
 8001702:	4293      	cmp	r3, r2
 8001704:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_DMA_Init+0x44c>)
 8001722:	4013      	ands	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d020      	beq.n	8001770 <HAL_DMA_Init+0x450>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d102      	bne.n	800173c <HAL_DMA_Init+0x41c>
 8001736:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173a:	e01a      	b.n	8001772 <HAL_DMA_Init+0x452>
 800173c:	2300      	movs	r3, #0
 800173e:	e018      	b.n	8001772 <HAL_DMA_Init+0x452>
 8001740:	fe10803f 	.word	0xfe10803f
 8001744:	5c001000 	.word	0x5c001000
 8001748:	ffff0000 	.word	0xffff0000
 800174c:	58025408 	.word	0x58025408
 8001750:	5802541c 	.word	0x5802541c
 8001754:	58025430 	.word	0x58025430
 8001758:	58025444 	.word	0x58025444
 800175c:	58025458 	.word	0x58025458
 8001760:	5802546c 	.word	0x5802546c
 8001764:	58025480 	.word	0x58025480
 8001768:	58025494 	.word	0x58025494
 800176c:	fffe000f 	.word	0xfffe000f
 8001770:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b6e      	ldr	r3, [pc, #440]	; (8001970 <HAL_DMA_Init+0x650>)
 80017b8:	4413      	add	r3, r2
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_DMA_Init+0x654>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f002 f9a9 	bl	8003b20 <DMA_CalcBaseAndBitshift>
 80017ce:	4603      	mov	r3, r0
 80017d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2201      	movs	r2, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e008      	b.n	80017f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0b7      	b.n	8001966 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_DMA_Init+0x658>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d072      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_DMA_Init+0x65c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d06d      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5c      	ldr	r2, [pc, #368]	; (8001980 <HAL_DMA_Init+0x660>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d068      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_DMA_Init+0x664>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d063      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_DMA_Init+0x668>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d05e      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_DMA_Init+0x66c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d059      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_DMA_Init+0x670>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d054      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_DMA_Init+0x674>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d04f      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a53      	ldr	r2, [pc, #332]	; (8001998 <HAL_DMA_Init+0x678>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04a      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_DMA_Init+0x67c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d045      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_DMA_Init+0x680>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d040      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <HAL_DMA_Init+0x684>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d03b      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4d      	ldr	r2, [pc, #308]	; (80019a8 <HAL_DMA_Init+0x688>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d036      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_DMA_Init+0x68c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d031      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_DMA_Init+0x690>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d02c      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_DMA_Init+0x694>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d027      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <HAL_DMA_Init+0x698>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a45      	ldr	r2, [pc, #276]	; (80019bc <HAL_DMA_Init+0x69c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01d      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <HAL_DMA_Init+0x6a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d018      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <HAL_DMA_Init+0x6a4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a41      	ldr	r2, [pc, #260]	; (80019c8 <HAL_DMA_Init+0x6a8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_DMA_Init+0x6ac>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d009      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <HAL_DMA_Init+0x6b0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d004      	beq.n	80018e6 <HAL_DMA_Init+0x5c6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <HAL_DMA_Init+0x6b4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_DMA_Init+0x5ca>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_DMA_Init+0x5cc>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d032      	beq.n	8001956 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f002 fa43 	bl	8003d7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b80      	cmp	r3, #128	; 0x80
 80018fc:	d102      	bne.n	8001904 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001918:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <HAL_DMA_Init+0x624>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d80c      	bhi.n	8001944 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f002 fac0 	bl	8003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	e008      	b.n	8001956 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	a7fdabf8 	.word	0xa7fdabf8
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	40020010 	.word	0x40020010
 800197c:	40020028 	.word	0x40020028
 8001980:	40020040 	.word	0x40020040
 8001984:	40020058 	.word	0x40020058
 8001988:	40020070 	.word	0x40020070
 800198c:	40020088 	.word	0x40020088
 8001990:	400200a0 	.word	0x400200a0
 8001994:	400200b8 	.word	0x400200b8
 8001998:	40020410 	.word	0x40020410
 800199c:	40020428 	.word	0x40020428
 80019a0:	40020440 	.word	0x40020440
 80019a4:	40020458 	.word	0x40020458
 80019a8:	40020470 	.word	0x40020470
 80019ac:	40020488 	.word	0x40020488
 80019b0:	400204a0 	.word	0x400204a0
 80019b4:	400204b8 	.word	0x400204b8
 80019b8:	58025408 	.word	0x58025408
 80019bc:	5802541c 	.word	0x5802541c
 80019c0:	58025430 	.word	0x58025430
 80019c4:	58025444 	.word	0x58025444
 80019c8:	58025458 	.word	0x58025458
 80019cc:	5802546c 	.word	0x5802546c
 80019d0:	58025480 	.word	0x58025480
 80019d4:	58025494 	.word	0x58025494

080019d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e226      	b.n	8001e42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Start_IT+0x2a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e21f      	b.n	8001e42 <HAL_DMA_Start_IT+0x46a>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 820a 	bne.w	8001e2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a68      	ldr	r2, [pc, #416]	; (8001bcc <HAL_DMA_Start_IT+0x1f4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04a      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a66      	ldr	r2, [pc, #408]	; (8001bd0 <HAL_DMA_Start_IT+0x1f8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d045      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_DMA_Start_IT+0x1fc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d040      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_DMA_Start_IT+0x200>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d03b      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a62      	ldr	r2, [pc, #392]	; (8001bdc <HAL_DMA_Start_IT+0x204>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d036      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a60      	ldr	r2, [pc, #384]	; (8001be0 <HAL_DMA_Start_IT+0x208>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d031      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5f      	ldr	r2, [pc, #380]	; (8001be4 <HAL_DMA_Start_IT+0x20c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5d      	ldr	r2, [pc, #372]	; (8001be8 <HAL_DMA_Start_IT+0x210>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d027      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_DMA_Start_IT+0x214>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5a      	ldr	r2, [pc, #360]	; (8001bf0 <HAL_DMA_Start_IT+0x218>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a59      	ldr	r2, [pc, #356]	; (8001bf4 <HAL_DMA_Start_IT+0x21c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_DMA_Start_IT+0x220>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_DMA_Start_IT+0x224>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <HAL_DMA_Start_IT+0x228>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a53      	ldr	r2, [pc, #332]	; (8001c04 <HAL_DMA_Start_IT+0x22c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_Start_IT+0xee>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a51      	ldr	r2, [pc, #324]	; (8001c08 <HAL_DMA_Start_IT+0x230>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d108      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x100>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e007      	b.n	8001ae8 <HAL_DMA_Start_IT+0x110>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f001 fe6a 	bl	80037c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_DMA_Start_IT+0x1f4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d04a      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_DMA_Start_IT+0x1f8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d045      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_DMA_Start_IT+0x1fc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d040      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_DMA_Start_IT+0x200>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d03b      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_DMA_Start_IT+0x204>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d036      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_DMA_Start_IT+0x208>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2b      	ldr	r2, [pc, #172]	; (8001be4 <HAL_DMA_Start_IT+0x20c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d02c      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_DMA_Start_IT+0x210>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d027      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_DMA_Start_IT+0x214>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_DMA_Start_IT+0x218>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d01d      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_DMA_Start_IT+0x21c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d018      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_DMA_Start_IT+0x220>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_DMA_Start_IT+0x224>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00e      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_DMA_Start_IT+0x228>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_DMA_Start_IT+0x22c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Start_IT+0x1bc>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_DMA_Start_IT+0x230>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Start_IT+0x1c0>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_Start_IT+0x1c2>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d036      	beq.n	8001c0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 021e 	bic.w	r2, r3, #30
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0216 	orr.w	r2, r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03e      	beq.n	8001c38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0208 	orr.w	r2, r2, #8
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e035      	b.n	8001c38 <HAL_DMA_Start_IT+0x260>
 8001bcc:	40020010 	.word	0x40020010
 8001bd0:	40020028 	.word	0x40020028
 8001bd4:	40020040 	.word	0x40020040
 8001bd8:	40020058 	.word	0x40020058
 8001bdc:	40020070 	.word	0x40020070
 8001be0:	40020088 	.word	0x40020088
 8001be4:	400200a0 	.word	0x400200a0
 8001be8:	400200b8 	.word	0x400200b8
 8001bec:	40020410 	.word	0x40020410
 8001bf0:	40020428 	.word	0x40020428
 8001bf4:	40020440 	.word	0x40020440
 8001bf8:	40020458 	.word	0x40020458
 8001bfc:	40020470 	.word	0x40020470
 8001c00:	40020488 	.word	0x40020488
 8001c04:	400204a0 	.word	0x400204a0
 8001c08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020e 	bic.w	r2, r3, #14
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 020a 	orr.w	r2, r2, #10
 8001c1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0204 	orr.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a83      	ldr	r2, [pc, #524]	; (8001e4c <HAL_DMA_Start_IT+0x474>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d072      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a82      	ldr	r2, [pc, #520]	; (8001e50 <HAL_DMA_Start_IT+0x478>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d06d      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a80      	ldr	r2, [pc, #512]	; (8001e54 <HAL_DMA_Start_IT+0x47c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d068      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_DMA_Start_IT+0x480>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d063      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a7d      	ldr	r2, [pc, #500]	; (8001e5c <HAL_DMA_Start_IT+0x484>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d05e      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <HAL_DMA_Start_IT+0x488>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d059      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a7a      	ldr	r2, [pc, #488]	; (8001e64 <HAL_DMA_Start_IT+0x48c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d054      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <HAL_DMA_Start_IT+0x490>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d04f      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_DMA_Start_IT+0x494>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04a      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a76      	ldr	r2, [pc, #472]	; (8001e70 <HAL_DMA_Start_IT+0x498>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d045      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <HAL_DMA_Start_IT+0x49c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d040      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_DMA_Start_IT+0x4a0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d03b      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_DMA_Start_IT+0x4a4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d036      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_DMA_Start_IT+0x4a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d031      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_DMA_Start_IT+0x4ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02c      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6d      	ldr	r2, [pc, #436]	; (8001e88 <HAL_DMA_Start_IT+0x4b0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_DMA_Start_IT+0x4b4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d022      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <HAL_DMA_Start_IT+0x4b8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d01d      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_DMA_Start_IT+0x4bc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d018      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_DMA_Start_IT+0x4c0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a65      	ldr	r2, [pc, #404]	; (8001e9c <HAL_DMA_Start_IT+0x4c4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a64      	ldr	r2, [pc, #400]	; (8001ea0 <HAL_DMA_Start_IT+0x4c8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a62      	ldr	r2, [pc, #392]	; (8001ea4 <HAL_DMA_Start_IT+0x4cc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Start_IT+0x350>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_DMA_Start_IT+0x4d0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Start_IT+0x354>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_DMA_Start_IT+0x356>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <HAL_DMA_Start_IT+0x474>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04a      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a36      	ldr	r2, [pc, #216]	; (8001e50 <HAL_DMA_Start_IT+0x478>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d045      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <HAL_DMA_Start_IT+0x47c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d040      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a33      	ldr	r2, [pc, #204]	; (8001e58 <HAL_DMA_Start_IT+0x480>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d03b      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_DMA_Start_IT+0x484>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d036      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_DMA_Start_IT+0x488>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d031      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2e      	ldr	r2, [pc, #184]	; (8001e64 <HAL_DMA_Start_IT+0x48c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02c      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_DMA_Start_IT+0x490>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d027      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <HAL_DMA_Start_IT+0x494>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <HAL_DMA_Start_IT+0x498>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01d      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_DMA_Start_IT+0x49c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_DMA_Start_IT+0x4a0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_DMA_Start_IT+0x4a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_DMA_Start_IT+0x4a8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <HAL_DMA_Start_IT+0x4ac>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_Start_IT+0x430>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_DMA_Start_IT+0x4b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d108      	bne.n	8001e1a <HAL_DMA_Start_IT+0x442>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e012      	b.n	8001e40 <HAL_DMA_Start_IT+0x468>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e009      	b.n	8001e40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40020010 	.word	0x40020010
 8001e50:	40020028 	.word	0x40020028
 8001e54:	40020040 	.word	0x40020040
 8001e58:	40020058 	.word	0x40020058
 8001e5c:	40020070 	.word	0x40020070
 8001e60:	40020088 	.word	0x40020088
 8001e64:	400200a0 	.word	0x400200a0
 8001e68:	400200b8 	.word	0x400200b8
 8001e6c:	40020410 	.word	0x40020410
 8001e70:	40020428 	.word	0x40020428
 8001e74:	40020440 	.word	0x40020440
 8001e78:	40020458 	.word	0x40020458
 8001e7c:	40020470 	.word	0x40020470
 8001e80:	40020488 	.word	0x40020488
 8001e84:	400204a0 	.word	0x400204a0
 8001e88:	400204b8 	.word	0x400204b8
 8001e8c:	58025408 	.word	0x58025408
 8001e90:	5802541c 	.word	0x5802541c
 8001e94:	58025430 	.word	0x58025430
 8001e98:	58025444 	.word	0x58025444
 8001e9c:	58025458 	.word	0x58025458
 8001ea0:	5802546c 	.word	0x5802546c
 8001ea4:	58025480 	.word	0x58025480
 8001ea8:	58025494 	.word	0x58025494

08001eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff f86c 	bl	8000f90 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e2dc      	b.n	800247e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d008      	beq.n	8001ee2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e2cd      	b.n	800247e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a76      	ldr	r2, [pc, #472]	; (80020c0 <HAL_DMA_Abort+0x214>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d04a      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a74      	ldr	r2, [pc, #464]	; (80020c4 <HAL_DMA_Abort+0x218>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d045      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a73      	ldr	r2, [pc, #460]	; (80020c8 <HAL_DMA_Abort+0x21c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d040      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a71      	ldr	r2, [pc, #452]	; (80020cc <HAL_DMA_Abort+0x220>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d03b      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a70      	ldr	r2, [pc, #448]	; (80020d0 <HAL_DMA_Abort+0x224>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d036      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_DMA_Abort+0x228>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6d      	ldr	r2, [pc, #436]	; (80020d8 <HAL_DMA_Abort+0x22c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d02c      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6b      	ldr	r2, [pc, #428]	; (80020dc <HAL_DMA_Abort+0x230>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d027      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_DMA_Abort+0x234>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a68      	ldr	r2, [pc, #416]	; (80020e4 <HAL_DMA_Abort+0x238>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01d      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a67      	ldr	r2, [pc, #412]	; (80020e8 <HAL_DMA_Abort+0x23c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d018      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_DMA_Abort+0x240>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a64      	ldr	r2, [pc, #400]	; (80020f0 <HAL_DMA_Abort+0x244>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a62      	ldr	r2, [pc, #392]	; (80020f4 <HAL_DMA_Abort+0x248>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a61      	ldr	r2, [pc, #388]	; (80020f8 <HAL_DMA_Abort+0x24c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <HAL_DMA_Abort+0x250>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Abort+0xda>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_DMA_Abort+0xdc>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 021e 	bic.w	r2, r2, #30
 8001f9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001faa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e00a      	b.n	8001fca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020e 	bic.w	r2, r2, #14
 8001fc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <HAL_DMA_Abort+0x214>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d072      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <HAL_DMA_Abort+0x218>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d06d      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a39      	ldr	r2, [pc, #228]	; (80020c8 <HAL_DMA_Abort+0x21c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d068      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a37      	ldr	r2, [pc, #220]	; (80020cc <HAL_DMA_Abort+0x220>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d063      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a36      	ldr	r2, [pc, #216]	; (80020d0 <HAL_DMA_Abort+0x224>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d05e      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_DMA_Abort+0x228>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d059      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <HAL_DMA_Abort+0x22c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d054      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_DMA_Abort+0x230>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04f      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_DMA_Abort+0x234>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_DMA_Abort+0x238>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d045      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_DMA_Abort+0x23c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d040      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <HAL_DMA_Abort+0x240>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03b      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <HAL_DMA_Abort+0x244>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d036      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a28      	ldr	r2, [pc, #160]	; (80020f4 <HAL_DMA_Abort+0x248>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_DMA_Abort+0x24c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d02c      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_DMA_Abort+0x250>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d027      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_DMA_Abort+0x254>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_DMA_Abort+0x258>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01d      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_DMA_Abort+0x25c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_DMA_Abort+0x260>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_DMA_Abort+0x264>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_DMA_Abort+0x268>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_DMA_Abort+0x26c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_DMA_Abort+0x270>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d132      	bne.n	8002120 <HAL_DMA_Abort+0x274>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e031      	b.n	8002122 <HAL_DMA_Abort+0x276>
 80020be:	bf00      	nop
 80020c0:	40020010 	.word	0x40020010
 80020c4:	40020028 	.word	0x40020028
 80020c8:	40020040 	.word	0x40020040
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020070 	.word	0x40020070
 80020d4:	40020088 	.word	0x40020088
 80020d8:	400200a0 	.word	0x400200a0
 80020dc:	400200b8 	.word	0x400200b8
 80020e0:	40020410 	.word	0x40020410
 80020e4:	40020428 	.word	0x40020428
 80020e8:	40020440 	.word	0x40020440
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020470 	.word	0x40020470
 80020f4:	40020488 	.word	0x40020488
 80020f8:	400204a0 	.word	0x400204a0
 80020fc:	400204b8 	.word	0x400204b8
 8002100:	58025408 	.word	0x58025408
 8002104:	5802541c 	.word	0x5802541c
 8002108:	58025430 	.word	0x58025430
 800210c:	58025444 	.word	0x58025444
 8002110:	58025458 	.word	0x58025458
 8002114:	5802546c 	.word	0x5802546c
 8002118:	58025480 	.word	0x58025480
 800211c:	58025494 	.word	0x58025494
 8002120:	2300      	movs	r3, #0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <HAL_DMA_Abort+0x444>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6b      	ldr	r2, [pc, #428]	; (80022f4 <HAL_DMA_Abort+0x448>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_DMA_Abort+0x44c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a68      	ldr	r2, [pc, #416]	; (80022fc <HAL_DMA_Abort+0x450>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a67      	ldr	r2, [pc, #412]	; (8002300 <HAL_DMA_Abort+0x454>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_DMA_Abort+0x458>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a64      	ldr	r2, [pc, #400]	; (8002308 <HAL_DMA_Abort+0x45c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a62      	ldr	r2, [pc, #392]	; (800230c <HAL_DMA_Abort+0x460>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a61      	ldr	r2, [pc, #388]	; (8002310 <HAL_DMA_Abort+0x464>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <HAL_DMA_Abort+0x468>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5e      	ldr	r2, [pc, #376]	; (8002318 <HAL_DMA_Abort+0x46c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_DMA_Abort+0x470>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_DMA_Abort+0x474>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_DMA_Abort+0x478>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_DMA_Abort+0x47c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_DMA_Abort+0x480>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <HAL_DMA_Abort+0x33c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_DMA_Abort+0x34c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021f8:	e013      	b.n	8002222 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7fe fec9 	bl	8000f90 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d90c      	bls.n	8002222 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e12d      	b.n	800247e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e5      	bne.n	80021fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <HAL_DMA_Abort+0x444>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04a      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_DMA_Abort+0x448>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d045      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_DMA_Abort+0x44c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d040      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_DMA_Abort+0x450>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d03b      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_DMA_Abort+0x454>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d036      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_DMA_Abort+0x458>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d031      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_DMA_Abort+0x45c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d02c      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_DMA_Abort+0x460>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d027      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_DMA_Abort+0x464>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_DMA_Abort+0x468>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01d      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_DMA_Abort+0x46c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_DMA_Abort+0x470>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_DMA_Abort+0x474>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_DMA_Abort+0x478>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_DMA_Abort+0x47c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_DMA_Abort+0x480>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Abort+0x426>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_DMA_Abort+0x428>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02b      	beq.n	8002330 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e02a      	b.n	8002346 <HAL_DMA_Abort+0x49a>
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <HAL_DMA_Abort+0x5dc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d072      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_DMA_Abort+0x5e0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d06d      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_DMA_Abort+0x5e4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d068      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <HAL_DMA_Abort+0x5e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d063      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a49      	ldr	r2, [pc, #292]	; (8002498 <HAL_DMA_Abort+0x5ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_DMA_Abort+0x5f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d059      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_DMA_Abort+0x5f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d054      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a44      	ldr	r2, [pc, #272]	; (80024a4 <HAL_DMA_Abort+0x5f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d04f      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <HAL_DMA_Abort+0x5fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d04a      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a41      	ldr	r2, [pc, #260]	; (80024ac <HAL_DMA_Abort+0x600>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d045      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_DMA_Abort+0x604>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d040      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3e      	ldr	r2, [pc, #248]	; (80024b4 <HAL_DMA_Abort+0x608>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d03b      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <HAL_DMA_Abort+0x60c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d036      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_DMA_Abort+0x610>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_DMA_Abort+0x614>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d02c      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <HAL_DMA_Abort+0x618>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d027      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <HAL_DMA_Abort+0x61c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a35      	ldr	r2, [pc, #212]	; (80024cc <HAL_DMA_Abort+0x620>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01d      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <HAL_DMA_Abort+0x624>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d018      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <HAL_DMA_Abort+0x628>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <HAL_DMA_Abort+0x62c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_DMA_Abort+0x630>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <HAL_DMA_Abort+0x634>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <HAL_DMA_Abort+0x638>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_DMA_Abort+0x58e>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_DMA_Abort+0x590>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002448:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00c      	beq.n	800246c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002460:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800246a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40020010 	.word	0x40020010
 800248c:	40020028 	.word	0x40020028
 8002490:	40020040 	.word	0x40020040
 8002494:	40020058 	.word	0x40020058
 8002498:	40020070 	.word	0x40020070
 800249c:	40020088 	.word	0x40020088
 80024a0:	400200a0 	.word	0x400200a0
 80024a4:	400200b8 	.word	0x400200b8
 80024a8:	40020410 	.word	0x40020410
 80024ac:	40020428 	.word	0x40020428
 80024b0:	40020440 	.word	0x40020440
 80024b4:	40020458 	.word	0x40020458
 80024b8:	40020470 	.word	0x40020470
 80024bc:	40020488 	.word	0x40020488
 80024c0:	400204a0 	.word	0x400204a0
 80024c4:	400204b8 	.word	0x400204b8
 80024c8:	58025408 	.word	0x58025408
 80024cc:	5802541c 	.word	0x5802541c
 80024d0:	58025430 	.word	0x58025430
 80024d4:	58025444 	.word	0x58025444
 80024d8:	58025458 	.word	0x58025458
 80024dc:	5802546c 	.word	0x5802546c
 80024e0:	58025480 	.word	0x58025480
 80024e4:	58025494 	.word	0x58025494

080024e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e237      	b.n	800296a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e22c      	b.n	800296a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5c      	ldr	r2, [pc, #368]	; (8002688 <HAL_DMA_Abort_IT+0x1a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d04a      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_DMA_Abort_IT+0x1a4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d045      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a59      	ldr	r2, [pc, #356]	; (8002690 <HAL_DMA_Abort_IT+0x1a8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d040      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_DMA_Abort_IT+0x1ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d03b      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_DMA_Abort_IT+0x1b0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d036      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a55      	ldr	r2, [pc, #340]	; (800269c <HAL_DMA_Abort_IT+0x1b4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d031      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_DMA_Abort_IT+0x1bc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <HAL_DMA_Abort_IT+0x1c0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a4f      	ldr	r2, [pc, #316]	; (80026ac <HAL_DMA_Abort_IT+0x1c4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <HAL_DMA_Abort_IT+0x1c8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_DMA_Abort_IT+0x1d0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_DMA_Abort_IT+0x1d4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_DMA_Abort_IT+0x1d8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a46      	ldr	r2, [pc, #280]	; (80026c4 <HAL_DMA_Abort_IT+0x1dc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Abort_IT+0xcc>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Abort_IT+0xce>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8086 	beq.w	80026c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_DMA_Abort_IT+0x1a0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04a      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_DMA_Abort_IT+0x1a4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d045      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <HAL_DMA_Abort_IT+0x1a8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <HAL_DMA_Abort_IT+0x1ac>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d03b      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a29      	ldr	r2, [pc, #164]	; (8002698 <HAL_DMA_Abort_IT+0x1b0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d036      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <HAL_DMA_Abort_IT+0x1b4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d031      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02c      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <HAL_DMA_Abort_IT+0x1bc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d027      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <HAL_DMA_Abort_IT+0x1c0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d022      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <HAL_DMA_Abort_IT+0x1c4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01d      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <HAL_DMA_Abort_IT+0x1c8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d018      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_DMA_Abort_IT+0x1d0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00e      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_DMA_Abort_IT+0x1d4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_DMA_Abort_IT+0x1d8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_Abort_IT+0x17c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_DMA_Abort_IT+0x1dc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <HAL_DMA_Abort_IT+0x18e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e178      	b.n	8002968 <HAL_DMA_Abort_IT+0x480>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e16f      	b.n	8002968 <HAL_DMA_Abort_IT+0x480>
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020e 	bic.w	r2, r2, #14
 80026d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6c      	ldr	r2, [pc, #432]	; (8002890 <HAL_DMA_Abort_IT+0x3a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d04a      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <HAL_DMA_Abort_IT+0x3ac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d045      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_DMA_Abort_IT+0x3b0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d040      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_DMA_Abort_IT+0x3b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d03b      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_DMA_Abort_IT+0x3b8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d036      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_DMA_Abort_IT+0x3bc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d031      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_DMA_Abort_IT+0x3c0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02c      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a62      	ldr	r2, [pc, #392]	; (80028ac <HAL_DMA_Abort_IT+0x3c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d027      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <HAL_DMA_Abort_IT+0x3c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d022      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5f      	ldr	r2, [pc, #380]	; (80028b4 <HAL_DMA_Abort_IT+0x3cc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01d      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d018      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <HAL_DMA_Abort_IT+0x3d4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a59      	ldr	r2, [pc, #356]	; (80028c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_DMA_Abort_IT+0x3e0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Abort_IT+0x290>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a56      	ldr	r2, [pc, #344]	; (80028cc <HAL_DMA_Abort_IT+0x3e4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <HAL_DMA_Abort_IT+0x2a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e007      	b.n	800279a <HAL_DMA_Abort_IT+0x2b2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <HAL_DMA_Abort_IT+0x3a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d072      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_DMA_Abort_IT+0x3ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d06d      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_DMA_Abort_IT+0x3b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d068      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a37      	ldr	r2, [pc, #220]	; (800289c <HAL_DMA_Abort_IT+0x3b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d063      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_DMA_Abort_IT+0x3b8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d05e      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <HAL_DMA_Abort_IT+0x3bc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d059      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_DMA_Abort_IT+0x3c0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d054      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_DMA_Abort_IT+0x3c4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d04f      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_DMA_Abort_IT+0x3c8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04a      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2e      	ldr	r2, [pc, #184]	; (80028b4 <HAL_DMA_Abort_IT+0x3cc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d045      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d040      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_DMA_Abort_IT+0x3d4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d03b      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d036      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <HAL_DMA_Abort_IT+0x3e0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d02c      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_DMA_Abort_IT+0x3e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d027      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_DMA_Abort_IT+0x3e8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d022      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Abort_IT+0x3ec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_DMA_Abort_IT+0x3f0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d018      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_DMA_Abort_IT+0x3f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_DMA_Abort_IT+0x3f8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_DMA_Abort_IT+0x3fc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_DMA_Abort_IT+0x400>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_DMA_Abort_IT+0x404>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d132      	bne.n	80028f0 <HAL_DMA_Abort_IT+0x408>
 800288a:	2301      	movs	r3, #1
 800288c:	e031      	b.n	80028f2 <HAL_DMA_Abort_IT+0x40a>
 800288e:	bf00      	nop
 8002890:	40020010 	.word	0x40020010
 8002894:	40020028 	.word	0x40020028
 8002898:	40020040 	.word	0x40020040
 800289c:	40020058 	.word	0x40020058
 80028a0:	40020070 	.word	0x40020070
 80028a4:	40020088 	.word	0x40020088
 80028a8:	400200a0 	.word	0x400200a0
 80028ac:	400200b8 	.word	0x400200b8
 80028b0:	40020410 	.word	0x40020410
 80028b4:	40020428 	.word	0x40020428
 80028b8:	40020440 	.word	0x40020440
 80028bc:	40020458 	.word	0x40020458
 80028c0:	40020470 	.word	0x40020470
 80028c4:	40020488 	.word	0x40020488
 80028c8:	400204a0 	.word	0x400204a0
 80028cc:	400204b8 	.word	0x400204b8
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d028      	beq.n	8002948 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002924:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002946:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop

08002974 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_DMA_IRQHandler+0x1ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a67      	ldr	r2, [pc, #412]	; (8002b24 <HAL_DMA_IRQHandler+0x1b0>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_DMA_IRQHandler+0x1b4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d04a      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5d      	ldr	r2, [pc, #372]	; (8002b2c <HAL_DMA_IRQHandler+0x1b8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d045      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5c      	ldr	r2, [pc, #368]	; (8002b30 <HAL_DMA_IRQHandler+0x1bc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5a      	ldr	r2, [pc, #360]	; (8002b34 <HAL_DMA_IRQHandler+0x1c0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d03b      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <HAL_DMA_IRQHandler+0x1c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d036      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_DMA_IRQHandler+0x1c8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_DMA_IRQHandler+0x1cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d02c      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a54      	ldr	r2, [pc, #336]	; (8002b44 <HAL_DMA_IRQHandler+0x1d0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d027      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a53      	ldr	r2, [pc, #332]	; (8002b48 <HAL_DMA_IRQHandler+0x1d4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_DMA_IRQHandler+0x1d8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_DMA_IRQHandler+0x1dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <HAL_DMA_IRQHandler+0x1e0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_DMA_IRQHandler+0x1e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_DMA_IRQHandler+0x1e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4a      	ldr	r2, [pc, #296]	; (8002b60 <HAL_DMA_IRQHandler+0x1ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xd2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_DMA_IRQHandler+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_IRQHandler+0xd6>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_DMA_IRQHandler+0xd8>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 842b 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a2 	beq.w	8002bac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2e      	ldr	r2, [pc, #184]	; (8002b28 <HAL_DMA_IRQHandler+0x1b4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d04a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2d      	ldr	r2, [pc, #180]	; (8002b2c <HAL_DMA_IRQHandler+0x1b8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d045      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_DMA_IRQHandler+0x1bc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d040      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <HAL_DMA_IRQHandler+0x1c0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d03b      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_DMA_IRQHandler+0x1c4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d036      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_DMA_IRQHandler+0x1c8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_DMA_IRQHandler+0x1cc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02c      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_DMA_IRQHandler+0x1d0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d027      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_DMA_IRQHandler+0x1d4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_DMA_IRQHandler+0x1d8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d01d      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_DMA_IRQHandler+0x1dc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_DMA_IRQHandler+0x1e0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_DMA_IRQHandler+0x1e4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_DMA_IRQHandler+0x1e8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_DMA_IRQHandler+0x1ec>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x194>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_DMA_IRQHandler+0x1f0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d12f      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x1f4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	e02e      	b.n	8002b7c <HAL_DMA_IRQHandler+0x208>
 8002b1e:	bf00      	nop
 8002b20:	24002004 	.word	0x24002004
 8002b24:	1b4e81b5 	.word	0x1b4e81b5
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2208      	movs	r2, #8
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d06e      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a69      	ldr	r2, [pc, #420]	; (8002d6c <HAL_DMA_IRQHandler+0x3f8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <HAL_DMA_IRQHandler+0x3fc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_DMA_IRQHandler+0x400>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a64      	ldr	r2, [pc, #400]	; (8002d78 <HAL_DMA_IRQHandler+0x404>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a63      	ldr	r2, [pc, #396]	; (8002d7c <HAL_DMA_IRQHandler+0x408>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a61      	ldr	r2, [pc, #388]	; (8002d80 <HAL_DMA_IRQHandler+0x40c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a60      	ldr	r2, [pc, #384]	; (8002d84 <HAL_DMA_IRQHandler+0x410>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	; (8002d88 <HAL_DMA_IRQHandler+0x414>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_DMA_IRQHandler+0x418>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5b      	ldr	r2, [pc, #364]	; (8002d90 <HAL_DMA_IRQHandler+0x41c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <HAL_DMA_IRQHandler+0x420>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_DMA_IRQHandler+0x424>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_DMA_IRQHandler+0x428>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_DMA_IRQHandler+0x42c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_DMA_IRQHandler+0x430>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x2ee>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_DMA_IRQHandler+0x434>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10a      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x304>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e003      	b.n	8002c80 <HAL_DMA_IRQHandler+0x30c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0202 	orr.w	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2204      	movs	r2, #4
 8002caa:	409a      	lsls	r2, r3
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 808f 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <HAL_DMA_IRQHandler+0x3f8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d04a      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_DMA_IRQHandler+0x3fc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d045      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_DMA_IRQHandler+0x400>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d040      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_DMA_IRQHandler+0x404>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d03b      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_DMA_IRQHandler+0x408>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d036      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <HAL_DMA_IRQHandler+0x40c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d031      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_DMA_IRQHandler+0x410>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d02c      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_DMA_IRQHandler+0x414>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d027      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_DMA_IRQHandler+0x418>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_DMA_IRQHandler+0x41c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01d      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_DMA_IRQHandler+0x420>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <HAL_DMA_IRQHandler+0x424>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_DMA_IRQHandler+0x428>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_DMA_IRQHandler+0x42c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <HAL_DMA_IRQHandler+0x430>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x3e2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_DMA_IRQHandler+0x434>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d12a      	bne.n	8002dac <HAL_DMA_IRQHandler+0x438>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e023      	b.n	8002db4 <HAL_DMA_IRQHandler+0x440>
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2210      	movs	r2, #16
 8002dde:	409a      	lsls	r2, r3
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a6 	beq.w	8002f36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a85      	ldr	r2, [pc, #532]	; (8003004 <HAL_DMA_IRQHandler+0x690>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04a      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_DMA_IRQHandler+0x694>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d045      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a82      	ldr	r2, [pc, #520]	; (800300c <HAL_DMA_IRQHandler+0x698>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d040      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a80      	ldr	r2, [pc, #512]	; (8003010 <HAL_DMA_IRQHandler+0x69c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d03b      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7f      	ldr	r2, [pc, #508]	; (8003014 <HAL_DMA_IRQHandler+0x6a0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d036      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7d      	ldr	r2, [pc, #500]	; (8003018 <HAL_DMA_IRQHandler+0x6a4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d031      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_DMA_IRQHandler+0x6a8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d02c      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7a      	ldr	r2, [pc, #488]	; (8003020 <HAL_DMA_IRQHandler+0x6ac>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d027      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a79      	ldr	r2, [pc, #484]	; (8003024 <HAL_DMA_IRQHandler+0x6b0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d022      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_DMA_IRQHandler+0x6b4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01d      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a76      	ldr	r2, [pc, #472]	; (800302c <HAL_DMA_IRQHandler+0x6b8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d018      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a74      	ldr	r2, [pc, #464]	; (8003030 <HAL_DMA_IRQHandler+0x6bc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a73      	ldr	r2, [pc, #460]	; (8003034 <HAL_DMA_IRQHandler+0x6c0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a71      	ldr	r2, [pc, #452]	; (8003038 <HAL_DMA_IRQHandler+0x6c4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a70      	ldr	r2, [pc, #448]	; (800303c <HAL_DMA_IRQHandler+0x6c8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x516>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_DMA_IRQHandler+0x6cc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10a      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x52c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e009      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x540>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03e      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d024      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
 8002ef4:	e01f      	b.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01b      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	e016      	b.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0208 	bic.w	r2, r2, #8
 8002f24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2220      	movs	r2, #32
 8002f40:	409a      	lsls	r2, r3
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8110 	beq.w	800316c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <HAL_DMA_IRQHandler+0x690>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <HAL_DMA_IRQHandler+0x694>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d045      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_DMA_IRQHandler+0x698>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a28      	ldr	r2, [pc, #160]	; (8003010 <HAL_DMA_IRQHandler+0x69c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03b      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_DMA_IRQHandler+0x6a0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_DMA_IRQHandler+0x6a4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_DMA_IRQHandler+0x6a8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_DMA_IRQHandler+0x6ac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d027      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_DMA_IRQHandler+0x6b0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_DMA_IRQHandler+0x6b4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_DMA_IRQHandler+0x6b8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_DMA_IRQHandler+0x6bc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_DMA_IRQHandler+0x6c0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_DMA_IRQHandler+0x6c4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_DMA_IRQHandler+0x6c8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_IRQHandler+0x678>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_DMA_IRQHandler+0x6cc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d12b      	bne.n	8003044 <HAL_DMA_IRQHandler+0x6d0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e02a      	b.n	8003058 <HAL_DMA_IRQHandler+0x6e4>
 8003002:	bf00      	nop
 8003004:	40020010 	.word	0x40020010
 8003008:	40020028 	.word	0x40020028
 800300c:	40020040 	.word	0x40020040
 8003010:	40020058 	.word	0x40020058
 8003014:	40020070 	.word	0x40020070
 8003018:	40020088 	.word	0x40020088
 800301c:	400200a0 	.word	0x400200a0
 8003020:	400200b8 	.word	0x400200b8
 8003024:	40020410 	.word	0x40020410
 8003028:	40020428 	.word	0x40020428
 800302c:	40020440 	.word	0x40020440
 8003030:	40020458 	.word	0x40020458
 8003034:	40020470 	.word	0x40020470
 8003038:	40020488 	.word	0x40020488
 800303c:	400204a0 	.word	0x400204a0
 8003040:	400204b8 	.word	0x400204b8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8087 	beq.w	800316c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2220      	movs	r2, #32
 8003068:	409a      	lsls	r2, r3
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b04      	cmp	r3, #4
 8003078:	d139      	bne.n	80030ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_IRQHandler+0x736>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	223f      	movs	r2, #63	; 0x3f
 80030c4:	409a      	lsls	r2, r3
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 834a 	beq.w	8003778 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
          }
          return;
 80030ec:	e344      	b.n	8003778 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d018      	beq.n	800312e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02c      	beq.n	800316c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e027      	b.n	800316c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
 800312c:	e01e      	b.n	800316c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10f      	bne.n	800315c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0210 	bic.w	r2, r2, #16
 800314a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8306 	beq.w	8003782 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8088 	beq.w	8003294 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2204      	movs	r2, #4
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_DMA_IRQHandler+0xa08>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a79      	ldr	r2, [pc, #484]	; (8003380 <HAL_DMA_IRQHandler+0xa0c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a77      	ldr	r2, [pc, #476]	; (8003384 <HAL_DMA_IRQHandler+0xa10>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a76      	ldr	r2, [pc, #472]	; (8003388 <HAL_DMA_IRQHandler+0xa14>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a74      	ldr	r2, [pc, #464]	; (800338c <HAL_DMA_IRQHandler+0xa18>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a73      	ldr	r2, [pc, #460]	; (8003390 <HAL_DMA_IRQHandler+0xa1c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a71      	ldr	r2, [pc, #452]	; (8003394 <HAL_DMA_IRQHandler+0xa20>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a70      	ldr	r2, [pc, #448]	; (8003398 <HAL_DMA_IRQHandler+0xa24>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_DMA_IRQHandler+0xa28>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6d      	ldr	r2, [pc, #436]	; (80033a0 <HAL_DMA_IRQHandler+0xa2c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6b      	ldr	r2, [pc, #428]	; (80033a4 <HAL_DMA_IRQHandler+0xa30>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6a      	ldr	r2, [pc, #424]	; (80033a8 <HAL_DMA_IRQHandler+0xa34>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_DMA_IRQHandler+0xa38>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a67      	ldr	r2, [pc, #412]	; (80033b0 <HAL_DMA_IRQHandler+0xa3c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_DMA_IRQHandler+0xa40>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x8b8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a64      	ldr	r2, [pc, #400]	; (80033b8 <HAL_DMA_IRQHandler+0xa44>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <HAL_DMA_IRQHandler+0x8ca>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e007      	b.n	800324e <HAL_DMA_IRQHandler+0x8da>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3301      	adds	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003256:	429a      	cmp	r2, r3
 8003258:	d307      	bcc.n	800326a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f2      	bne.n	800324e <HAL_DMA_IRQHandler+0x8da>
 8003268:	e000      	b.n	800326c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800326a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003282:	e003      	b.n	800328c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8272 	beq.w	8003782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
 80032a6:	e26c      	b.n	8003782 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a43      	ldr	r2, [pc, #268]	; (80033bc <HAL_DMA_IRQHandler+0xa48>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a42      	ldr	r2, [pc, #264]	; (80033c0 <HAL_DMA_IRQHandler+0xa4c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <HAL_DMA_IRQHandler+0xa50>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3f      	ldr	r2, [pc, #252]	; (80033c8 <HAL_DMA_IRQHandler+0xa54>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <HAL_DMA_IRQHandler+0xa58>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_DMA_IRQHandler+0xa5c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_DMA_IRQHandler+0xa60>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x984>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a39      	ldr	r2, [pc, #228]	; (80033d8 <HAL_DMA_IRQHandler+0xa64>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_DMA_IRQHandler+0x988>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_DMA_IRQHandler+0x98a>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 823f 	beq.w	8003782 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2204      	movs	r2, #4
 8003316:	409a      	lsls	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80cd 	beq.w	80034bc <HAL_DMA_IRQHandler+0xb48>
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80c7 	beq.w	80034bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2204      	movs	r2, #4
 8003338:	409a      	lsls	r2, r3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d049      	beq.n	80033dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8210 	beq.w	800377c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003364:	e20a      	b.n	800377c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8206 	beq.w	800377c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003378:	e200      	b.n	800377c <HAL_DMA_IRQHandler+0xe08>
 800337a:	bf00      	nop
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
 80033bc:	58025408 	.word	0x58025408
 80033c0:	5802541c 	.word	0x5802541c
 80033c4:	58025430 	.word	0x58025430
 80033c8:	58025444 	.word	0x58025444
 80033cc:	58025458 	.word	0x58025458
 80033d0:	5802546c 	.word	0x5802546c
 80033d4:	58025480 	.word	0x58025480
 80033d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d160      	bne.n	80034a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7f      	ldr	r2, [pc, #508]	; (80035e8 <HAL_DMA_IRQHandler+0xc74>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7d      	ldr	r2, [pc, #500]	; (80035ec <HAL_DMA_IRQHandler+0xc78>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7c      	ldr	r2, [pc, #496]	; (80035f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7a      	ldr	r2, [pc, #488]	; (80035f4 <HAL_DMA_IRQHandler+0xc80>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a79      	ldr	r2, [pc, #484]	; (80035f8 <HAL_DMA_IRQHandler+0xc84>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a77      	ldr	r2, [pc, #476]	; (80035fc <HAL_DMA_IRQHandler+0xc88>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a76      	ldr	r2, [pc, #472]	; (8003600 <HAL_DMA_IRQHandler+0xc8c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a74      	ldr	r2, [pc, #464]	; (8003604 <HAL_DMA_IRQHandler+0xc90>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a73      	ldr	r2, [pc, #460]	; (8003608 <HAL_DMA_IRQHandler+0xc94>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a71      	ldr	r2, [pc, #452]	; (800360c <HAL_DMA_IRQHandler+0xc98>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a70      	ldr	r2, [pc, #448]	; (8003610 <HAL_DMA_IRQHandler+0xc9c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_DMA_IRQHandler+0xca0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6d      	ldr	r2, [pc, #436]	; (8003618 <HAL_DMA_IRQHandler+0xca4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_DMA_IRQHandler+0xca8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6a      	ldr	r2, [pc, #424]	; (8003620 <HAL_DMA_IRQHandler+0xcac>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_IRQHandler+0xb12>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_DMA_IRQHandler+0xcb0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0xb24>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0208 	bic.w	r2, r2, #8
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_DMA_IRQHandler+0xb34>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8165 	beq.w	800377c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ba:	e15f      	b.n	800377c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2202      	movs	r2, #2
 80034c6:	409a      	lsls	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80c5 	beq.w	800365c <HAL_DMA_IRQHandler+0xce8>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80bf 	beq.w	800365c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2202      	movs	r2, #2
 80034e8:	409a      	lsls	r2, r3
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d018      	beq.n	800352a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 813a 	beq.w	8003780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003514:	e134      	b.n	8003780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8130 	beq.w	8003780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003528:	e12a      	b.n	8003780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8089 	bne.w	8003648 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <HAL_DMA_IRQHandler+0xc74>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_DMA_IRQHandler+0xc78>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_DMA_IRQHandler+0xc80>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <HAL_DMA_IRQHandler+0xc84>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <HAL_DMA_IRQHandler+0xc88>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_DMA_IRQHandler+0xc8c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_DMA_IRQHandler+0xc90>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <HAL_DMA_IRQHandler+0xc94>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_DMA_IRQHandler+0xc98>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_DMA_IRQHandler+0xc9c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_DMA_IRQHandler+0xca0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_DMA_IRQHandler+0xca4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_DMA_IRQHandler+0xca8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_DMA_IRQHandler+0xcac>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_IRQHandler+0xc62>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_DMA_IRQHandler+0xcb0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d128      	bne.n	8003628 <HAL_DMA_IRQHandler+0xcb4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0214 	bic.w	r2, r2, #20
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e027      	b.n	8003638 <HAL_DMA_IRQHandler+0xcc4>
 80035e8:	40020010 	.word	0x40020010
 80035ec:	40020028 	.word	0x40020028
 80035f0:	40020040 	.word	0x40020040
 80035f4:	40020058 	.word	0x40020058
 80035f8:	40020070 	.word	0x40020070
 80035fc:	40020088 	.word	0x40020088
 8003600:	400200a0 	.word	0x400200a0
 8003604:	400200b8 	.word	0x400200b8
 8003608:	40020410 	.word	0x40020410
 800360c:	40020428 	.word	0x40020428
 8003610:	40020440 	.word	0x40020440
 8003614:	40020458 	.word	0x40020458
 8003618:	40020470 	.word	0x40020470
 800361c:	40020488 	.word	0x40020488
 8003620:	400204a0 	.word	0x400204a0
 8003624:	400204b8 	.word	0x400204b8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 020a 	bic.w	r2, r2, #10
 8003636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8097 	beq.w	8003780 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800365a:	e091      	b.n	8003780 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2208      	movs	r2, #8
 8003666:	409a      	lsls	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8088 	beq.w	8003782 <HAL_DMA_IRQHandler+0xe0e>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8082 	beq.w	8003782 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a41      	ldr	r2, [pc, #260]	; (8003788 <HAL_DMA_IRQHandler+0xe14>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04a      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3f      	ldr	r2, [pc, #252]	; (800378c <HAL_DMA_IRQHandler+0xe18>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d045      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3e      	ldr	r2, [pc, #248]	; (8003790 <HAL_DMA_IRQHandler+0xe1c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d040      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <HAL_DMA_IRQHandler+0xe20>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d03b      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_DMA_IRQHandler+0xe24>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d036      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a39      	ldr	r2, [pc, #228]	; (800379c <HAL_DMA_IRQHandler+0xe28>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_DMA_IRQHandler+0xe2c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d02c      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_DMA_IRQHandler+0xe30>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <HAL_DMA_IRQHandler+0xe34>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a33      	ldr	r2, [pc, #204]	; (80037ac <HAL_DMA_IRQHandler+0xe38>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a32      	ldr	r2, [pc, #200]	; (80037b0 <HAL_DMA_IRQHandler+0xe3c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a30      	ldr	r2, [pc, #192]	; (80037b4 <HAL_DMA_IRQHandler+0xe40>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <HAL_DMA_IRQHandler+0xe44>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_DMA_IRQHandler+0xe48>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <HAL_DMA_IRQHandler+0xe4c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_DMA_IRQHandler+0xdaa>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <HAL_DMA_IRQHandler+0xe50>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <HAL_DMA_IRQHandler+0xdbc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 021c 	bic.w	r2, r2, #28
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <HAL_DMA_IRQHandler+0xdcc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 020e 	bic.w	r2, r2, #14
 800373e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2201      	movs	r2, #1
 800374a:	409a      	lsls	r2, r3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
 8003776:	e004      	b.n	8003782 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003778:	bf00      	nop
 800377a:	e002      	b.n	8003782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003780:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40020010 	.word	0x40020010
 800378c:	40020028 	.word	0x40020028
 8003790:	40020040 	.word	0x40020040
 8003794:	40020058 	.word	0x40020058
 8003798:	40020070 	.word	0x40020070
 800379c:	40020088 	.word	0x40020088
 80037a0:	400200a0 	.word	0x400200a0
 80037a4:	400200b8 	.word	0x400200b8
 80037a8:	40020410 	.word	0x40020410
 80037ac:	40020428 	.word	0x40020428
 80037b0:	40020440 	.word	0x40020440
 80037b4:	40020458 	.word	0x40020458
 80037b8:	40020470 	.word	0x40020470
 80037bc:	40020488 	.word	0x40020488
 80037c0:	400204a0 	.word	0x400204a0
 80037c4:	400204b8 	.word	0x400204b8

080037c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7f      	ldr	r2, [pc, #508]	; (80039e4 <DMA_SetConfig+0x21c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d072      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7d      	ldr	r2, [pc, #500]	; (80039e8 <DMA_SetConfig+0x220>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d06d      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7c      	ldr	r2, [pc, #496]	; (80039ec <DMA_SetConfig+0x224>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d068      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <DMA_SetConfig+0x228>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d063      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a79      	ldr	r2, [pc, #484]	; (80039f4 <DMA_SetConfig+0x22c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d05e      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <DMA_SetConfig+0x230>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d059      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a76      	ldr	r2, [pc, #472]	; (80039fc <DMA_SetConfig+0x234>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d054      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a74      	ldr	r2, [pc, #464]	; (8003a00 <DMA_SetConfig+0x238>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d04f      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a73      	ldr	r2, [pc, #460]	; (8003a04 <DMA_SetConfig+0x23c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04a      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <DMA_SetConfig+0x240>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a70      	ldr	r2, [pc, #448]	; (8003a0c <DMA_SetConfig+0x244>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d040      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <DMA_SetConfig+0x248>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03b      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6d      	ldr	r2, [pc, #436]	; (8003a14 <DMA_SetConfig+0x24c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d036      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6b      	ldr	r2, [pc, #428]	; (8003a18 <DMA_SetConfig+0x250>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d031      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6a      	ldr	r2, [pc, #424]	; (8003a1c <DMA_SetConfig+0x254>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02c      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a68      	ldr	r2, [pc, #416]	; (8003a20 <DMA_SetConfig+0x258>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d027      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a67      	ldr	r2, [pc, #412]	; (8003a24 <DMA_SetConfig+0x25c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <DMA_SetConfig+0x260>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a64      	ldr	r2, [pc, #400]	; (8003a2c <DMA_SetConfig+0x264>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a62      	ldr	r2, [pc, #392]	; (8003a30 <DMA_SetConfig+0x268>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a61      	ldr	r2, [pc, #388]	; (8003a34 <DMA_SetConfig+0x26c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5f      	ldr	r2, [pc, #380]	; (8003a38 <DMA_SetConfig+0x270>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5e      	ldr	r2, [pc, #376]	; (8003a3c <DMA_SetConfig+0x274>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <DMA_SetConfig+0x10a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <DMA_SetConfig+0x278>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <DMA_SetConfig+0x10e>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <DMA_SetConfig+0x110>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <DMA_SetConfig+0x21c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a38      	ldr	r2, [pc, #224]	; (80039e8 <DMA_SetConfig+0x220>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d045      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a36      	ldr	r2, [pc, #216]	; (80039ec <DMA_SetConfig+0x224>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d040      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <DMA_SetConfig+0x228>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d03b      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <DMA_SetConfig+0x22c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d036      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <DMA_SetConfig+0x230>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d031      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a30      	ldr	r2, [pc, #192]	; (80039fc <DMA_SetConfig+0x234>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02c      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2f      	ldr	r2, [pc, #188]	; (8003a00 <DMA_SetConfig+0x238>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d027      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <DMA_SetConfig+0x23c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d022      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <DMA_SetConfig+0x240>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01d      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <DMA_SetConfig+0x244>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <DMA_SetConfig+0x248>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <DMA_SetConfig+0x24c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <DMA_SetConfig+0x250>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <DMA_SetConfig+0x254>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <DMA_SetConfig+0x1d0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <DMA_SetConfig+0x258>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <DMA_SetConfig+0x1d4>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <DMA_SetConfig+0x1d6>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d059      	beq.n	8003a56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	223f      	movs	r2, #63	; 0x3f
 80039ac:	409a      	lsls	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d138      	bne.n	8003a44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039e2:	e086      	b.n	8003af2 <DMA_SetConfig+0x32a>
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	58025408 	.word	0x58025408
 8003a28:	5802541c 	.word	0x5802541c
 8003a2c:	58025430 	.word	0x58025430
 8003a30:	58025444 	.word	0x58025444
 8003a34:	58025458 	.word	0x58025458
 8003a38:	5802546c 	.word	0x5802546c
 8003a3c:	58025480 	.word	0x58025480
 8003a40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
}
 8003a54:	e04d      	b.n	8003af2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <DMA_SetConfig+0x338>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <DMA_SetConfig+0x33c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <DMA_SetConfig+0x340>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <DMA_SetConfig+0x344>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <DMA_SetConfig+0x348>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <DMA_SetConfig+0x34c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <DMA_SetConfig+0x350>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <DMA_SetConfig+0x2de>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <DMA_SetConfig+0x354>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <DMA_SetConfig+0x2e2>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <DMA_SetConfig+0x2e4>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d108      	bne.n	8003ae2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	60da      	str	r2, [r3, #12]
}
 8003ae0:	e007      	b.n	8003af2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	60da      	str	r2, [r3, #12]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	58025408 	.word	0x58025408
 8003b04:	5802541c 	.word	0x5802541c
 8003b08:	58025430 	.word	0x58025430
 8003b0c:	58025444 	.word	0x58025444
 8003b10:	58025458 	.word	0x58025458
 8003b14:	5802546c 	.word	0x5802546c
 8003b18:	58025480 	.word	0x58025480
 8003b1c:	58025494 	.word	0x58025494

08003b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <DMA_CalcBaseAndBitshift+0x118>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a41      	ldr	r2, [pc, #260]	; (8003c3c <DMA_CalcBaseAndBitshift+0x11c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <DMA_CalcBaseAndBitshift+0x120>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <DMA_CalcBaseAndBitshift+0x124>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3c      	ldr	r2, [pc, #240]	; (8003c48 <DMA_CalcBaseAndBitshift+0x128>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3b      	ldr	r2, [pc, #236]	; (8003c4c <DMA_CalcBaseAndBitshift+0x12c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <DMA_CalcBaseAndBitshift+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <DMA_CalcBaseAndBitshift+0x134>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a36      	ldr	r2, [pc, #216]	; (8003c58 <DMA_CalcBaseAndBitshift+0x138>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a35      	ldr	r2, [pc, #212]	; (8003c5c <DMA_CalcBaseAndBitshift+0x13c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a33      	ldr	r2, [pc, #204]	; (8003c60 <DMA_CalcBaseAndBitshift+0x140>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <DMA_CalcBaseAndBitshift+0x144>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <DMA_CalcBaseAndBitshift+0x148>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <DMA_CalcBaseAndBitshift+0x14c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <DMA_CalcBaseAndBitshift+0x150>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <DMA_CalcBaseAndBitshift+0x154>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <DMA_CalcBaseAndBitshift+0xac>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <DMA_CalcBaseAndBitshift+0xae>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d024      	beq.n	8003c1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3b10      	subs	r3, #16
 8003bda:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <DMA_CalcBaseAndBitshift+0x158>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <DMA_CalcBaseAndBitshift+0x15c>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d908      	bls.n	8003c0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <DMA_CalcBaseAndBitshift+0x160>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	1d1a      	adds	r2, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	659a      	str	r2, [r3, #88]	; 0x58
 8003c0a:	e00d      	b.n	8003c28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <DMA_CalcBaseAndBitshift+0x160>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1a:	e005      	b.n	8003c28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
 8003c78:	aaaaaaab 	.word	0xaaaaaaab
 8003c7c:	08008adc 	.word	0x08008adc
 8003c80:	fffffc00 	.word	0xfffffc00

08003c84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d858      	bhi.n	8003d52 <DMA_CheckFifoParam+0xce>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x24>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003ccb 	.word	0x08003ccb
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003d53 	.word	0x08003d53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d048      	beq.n	8003d56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cc8:	e045      	b.n	8003d56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd2:	d142      	bne.n	8003d5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cd8:	e03f      	b.n	8003d5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	d123      	bne.n	8003d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d838      	bhi.n	8003d5e <DMA_CheckFifoParam+0xda>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <DMA_CheckFifoParam+0x70>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d0b 	.word	0x08003d0b
 8003cfc:	08003d05 	.word	0x08003d05
 8003d00:	08003d1d 	.word	0x08003d1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
        break;
 8003d08:	e030      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d025      	beq.n	8003d62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d1a:	e022      	b.n	8003d62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d24:	d11f      	bne.n	8003d66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d2a:	e01c      	b.n	8003d66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d902      	bls.n	8003d3a <DMA_CheckFifoParam+0xb6>
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d003      	beq.n	8003d40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d38:	e018      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d3e:	e015      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8003d50:	e00b      	b.n	8003d6a <DMA_CheckFifoParam+0xe6>
        break;
 8003d52:	bf00      	nop
 8003d54:	e00a      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        break;
 8003d56:	bf00      	nop
 8003d58:	e008      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e006      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e004      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
        break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <DMA_CheckFifoParam+0xe8>
    break;
 8003d6a:	bf00      	nop
    }
  }

  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop

08003d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a38      	ldr	r2, [pc, #224]	; (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d022      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a36      	ldr	r2, [pc, #216]	; (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01d      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a35      	ldr	r2, [pc, #212]	; (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d018      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a32      	ldr	r2, [pc, #200]	; (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00e      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d009      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01a      	beq.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3b08      	subs	r3, #8
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e18:	e024      	b.n	8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b10      	subs	r3, #16
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d806      	bhi.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d902      	bls.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	58025408 	.word	0x58025408
 8003e74:	5802541c 	.word	0x5802541c
 8003e78:	58025430 	.word	0x58025430
 8003e7c:	58025444 	.word	0x58025444
 8003e80:	58025458 	.word	0x58025458
 8003e84:	5802546c 	.word	0x5802546c
 8003e88:	58025480 	.word	0x58025480
 8003e8c:	58025494 	.word	0x58025494
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	16009600 	.word	0x16009600
 8003e98:	58025880 	.word	0x58025880
 8003e9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ea0:	400204b8 	.word	0x400204b8
 8003ea4:	4002040f 	.word	0x4002040f
 8003ea8:	10008200 	.word	0x10008200
 8003eac:	40020880 	.word	0x40020880

08003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04a      	beq.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d847      	bhi.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f38:	671a      	str	r2, [r3, #112]	; 0x70
 8003f3a:	e009      	b.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	58025408 	.word	0x58025408
 8003f6c:	5802541c 	.word	0x5802541c
 8003f70:	58025430 	.word	0x58025430
 8003f74:	58025444 	.word	0x58025444
 8003f78:	58025458 	.word	0x58025458
 8003f7c:	5802546c 	.word	0x5802546c
 8003f80:	58025480 	.word	0x58025480
 8003f84:	58025494 	.word	0x58025494
 8003f88:	1600963f 	.word	0x1600963f
 8003f8c:	58025940 	.word	0x58025940
 8003f90:	1000823f 	.word	0x1000823f
 8003f94:	40020940 	.word	0x40020940

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fa6:	4b89      	ldr	r3, [pc, #548]	; (80041cc <HAL_GPIO_Init+0x234>)
 8003fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003faa:	e194      	b.n	80042d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8186 	beq.w	80042d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d005      	beq.n	8003fdc <HAL_GPIO_Init+0x44>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d130      	bne.n	800403e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004012:	2201      	movs	r2, #1
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0201 	and.w	r2, r3, #1
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b03      	cmp	r3, #3
 8004048:	d017      	beq.n	800407a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d123      	bne.n	80040ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0203 	and.w	r2, r3, #3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80e0 	beq.w	80042d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004110:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_GPIO_Init+0x238>)
 8004112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004116:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <HAL_GPIO_Init+0x238>)
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_GPIO_Init+0x238>)
 8004122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412e:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <HAL_GPIO_Init+0x23c>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <HAL_GPIO_Init+0x240>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d052      	beq.n	8004200 <HAL_GPIO_Init+0x268>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_GPIO_Init+0x244>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_GPIO_Init+0x22e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_GPIO_Init+0x248>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02b      	beq.n	80041c2 <HAL_GPIO_Init+0x22a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_GPIO_Init+0x24c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d025      	beq.n	80041be <HAL_GPIO_Init+0x226>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_GPIO_Init+0x250>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <HAL_GPIO_Init+0x222>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_GPIO_Init+0x254>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d019      	beq.n	80041b6 <HAL_GPIO_Init+0x21e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1a      	ldr	r2, [pc, #104]	; (80041f0 <HAL_GPIO_Init+0x258>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_GPIO_Init+0x21a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_GPIO_Init+0x25c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00d      	beq.n	80041ae <HAL_GPIO_Init+0x216>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_GPIO_Init+0x260>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <HAL_GPIO_Init+0x212>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_GPIO_Init+0x264>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_GPIO_Init+0x20e>
 80041a2:	2309      	movs	r3, #9
 80041a4:	e02d      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041a6:	230a      	movs	r3, #10
 80041a8:	e02b      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041aa:	2308      	movs	r3, #8
 80041ac:	e029      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041ae:	2307      	movs	r3, #7
 80041b0:	e027      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041b2:	2306      	movs	r3, #6
 80041b4:	e025      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041b6:	2305      	movs	r3, #5
 80041b8:	e023      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041ba:	2304      	movs	r3, #4
 80041bc:	e021      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041be:	2303      	movs	r3, #3
 80041c0:	e01f      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e01d      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01b      	b.n	8004202 <HAL_GPIO_Init+0x26a>
 80041ca:	bf00      	nop
 80041cc:	58000080 	.word	0x58000080
 80041d0:	58024400 	.word	0x58024400
 80041d4:	58000400 	.word	0x58000400
 80041d8:	58020000 	.word	0x58020000
 80041dc:	58020400 	.word	0x58020400
 80041e0:	58020800 	.word	0x58020800
 80041e4:	58020c00 	.word	0x58020c00
 80041e8:	58021000 	.word	0x58021000
 80041ec:	58021400 	.word	0x58021400
 80041f0:	58021800 	.word	0x58021800
 80041f4:	58021c00 	.word	0x58021c00
 80041f8:	58022000 	.word	0x58022000
 80041fc:	58022400 	.word	0x58022400
 8004200:	2300      	movs	r3, #0
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	f002 0203 	and.w	r2, r2, #3
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	4093      	lsls	r3, r2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004212:	4938      	ldr	r1, [pc, #224]	; (80042f4 <HAL_GPIO_Init+0x35c>)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f ae63 	bne.w	8003fac <HAL_GPIO_Init+0x14>
  }
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3724      	adds	r7, #36	; 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58000400 	.word	0x58000400

080042f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_PWREx_ConfigSupply+0x70>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d00a      	beq.n	8004322 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800430c:	4b16      	ldr	r3, [pc, #88]	; (8004368 <HAL_PWREx_ConfigSupply+0x70>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d001      	beq.n	800431e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e01f      	b.n	800435e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e01d      	b.n	800435e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_PWREx_ConfigSupply+0x70>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f023 0207 	bic.w	r2, r3, #7
 800432a:	490f      	ldr	r1, [pc, #60]	; (8004368 <HAL_PWREx_ConfigSupply+0x70>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4313      	orrs	r3, r2
 8004330:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004332:	f7fc fe2d 	bl	8000f90 <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004338:	e009      	b.n	800434e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800433a:	f7fc fe29 	bl	8000f90 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004348:	d901      	bls.n	800434e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e007      	b.n	800435e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_PWREx_ConfigSupply+0x70>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	d1ee      	bne.n	800433a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	58024800 	.word	0x58024800

0800436c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f000 bc1d 	b.w	8004bba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8087 	beq.w	800449c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438e:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004398:	4b96      	ldr	r3, [pc, #600]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d007      	beq.n	80043b4 <HAL_RCC_OscConfig+0x48>
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b18      	cmp	r3, #24
 80043a8:	d110      	bne.n	80043cc <HAL_RCC_OscConfig+0x60>
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d06c      	beq.n	800449a <HAL_RCC_OscConfig+0x12e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d168      	bne.n	800449a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e3f6      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x78>
 80043d6:	4b87      	ldr	r3, [pc, #540]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a86      	ldr	r2, [pc, #536]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e02e      	b.n	8004442 <HAL_RCC_OscConfig+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10c      	bne.n	8004406 <HAL_RCC_OscConfig+0x9a>
 80043ec:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a80      	ldr	r2, [pc, #512]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7d      	ldr	r2, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e01d      	b.n	8004442 <HAL_RCC_OscConfig+0xd6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0xbe>
 8004410:	4b78      	ldr	r3, [pc, #480]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a77      	ldr	r2, [pc, #476]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b75      	ldr	r3, [pc, #468]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a74      	ldr	r2, [pc, #464]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0xd6>
 800442a:	4b72      	ldr	r3, [pc, #456]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a71      	ldr	r2, [pc, #452]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6e      	ldr	r2, [pc, #440]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800443c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d013      	beq.n	8004472 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fc fda1 	bl	8000f90 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004452:	f7fc fd9d 	bl	8000f90 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	; 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e3aa      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004464:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0xe6>
 8004470:	e014      	b.n	800449c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fc fd8d 	bl	8000f90 <HAL_GetTick>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447a:	f7fc fd89 	bl	8000f90 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e396      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x10e>
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80cb 	beq.w	8004640 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_OscConfig+0x164>
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	d156      	bne.n	8004574 <HAL_RCC_OscConfig+0x208>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d151      	bne.n	8004574 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x17c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e368      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044e8:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 0219 	bic.w	r2, r3, #25
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	493f      	ldr	r1, [pc, #252]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044fa:	f7fc fd49 	bl	8000f90 <HAL_GetTick>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7fc fd45 	bl	8000f90 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e352      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004514:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	f7fc fd66 	bl	8000ff0 <HAL_GetREVID>
 8004524:	4603      	mov	r3, r0
 8004526:	f241 0203 	movw	r2, #4099	; 0x1003
 800452a:	4293      	cmp	r3, r2
 800452c:	d817      	bhi.n	800455e <HAL_RCC_OscConfig+0x1f2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d108      	bne.n	8004548 <HAL_RCC_OscConfig+0x1dc>
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800453e:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004546:	e07b      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	4927      	ldr	r1, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800455c:	e070      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	4921      	ldr	r1, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004572:	e065      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d048      	beq.n	800460e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 0219 	bic.w	r2, r3, #25
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	491a      	ldr	r1, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fc fcff 	bl	8000f90 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004596:	f7fc fcfb 	bl	8000f90 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e308      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	f7fc fd1c 	bl	8000ff0 <HAL_GetREVID>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80045be:	4293      	cmp	r3, r2
 80045c0:	d81a      	bhi.n	80045f8 <HAL_RCC_OscConfig+0x28c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d108      	bne.n	80045dc <HAL_RCC_OscConfig+0x270>
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045d2:	4a08      	ldr	r2, [pc, #32]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	6053      	str	r3, [r2, #4]
 80045da:	e031      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	4902      	ldr	r1, [pc, #8]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e026      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	4b9a      	ldr	r3, [pc, #616]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	4997      	ldr	r1, [pc, #604]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	e018      	b.n	8004640 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b95      	ldr	r3, [pc, #596]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a94      	ldr	r2, [pc, #592]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fc fcb9 	bl	8000f90 <HAL_GetTick>
 800461e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fc fcb5 	bl	8000f90 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e2c2      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004634:	4b8b      	ldr	r3, [pc, #556]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a9 	beq.w	80047a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464e:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004656:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004658:	4b82      	ldr	r3, [pc, #520]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d007      	beq.n	8004674 <HAL_RCC_OscConfig+0x308>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b18      	cmp	r3, #24
 8004668:	d13a      	bne.n	80046e0 <HAL_RCC_OscConfig+0x374>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d135      	bne.n	80046e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x320>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e296      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800468c:	f7fc fcb0 	bl	8000ff0 <HAL_GetREVID>
 8004690:	4603      	mov	r3, r0
 8004692:	f241 0203 	movw	r2, #4099	; 0x1003
 8004696:	4293      	cmp	r3, r2
 8004698:	d817      	bhi.n	80046ca <HAL_RCC_OscConfig+0x35e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d108      	bne.n	80046b4 <HAL_RCC_OscConfig+0x348>
 80046a2:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046aa:	4a6e      	ldr	r2, [pc, #440]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b2:	e075      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046b4:	4b6b      	ldr	r3, [pc, #428]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	069b      	lsls	r3, r3, #26
 80046c2:	4968      	ldr	r1, [pc, #416]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046c8:	e06a      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ca:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	4962      	ldr	r1, [pc, #392]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046de:	e05f      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d042      	beq.n	800476e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046e8:	4b5e      	ldr	r3, [pc, #376]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5d      	ldr	r2, [pc, #372]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fc fc4c 	bl	8000f90 <HAL_GetTick>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046fc:	f7fc fc48 	bl	8000f90 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e255      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800470e:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800471a:	f7fc fc69 	bl	8000ff0 <HAL_GetREVID>
 800471e:	4603      	mov	r3, r0
 8004720:	f241 0203 	movw	r2, #4099	; 0x1003
 8004724:	4293      	cmp	r3, r2
 8004726:	d817      	bhi.n	8004758 <HAL_RCC_OscConfig+0x3ec>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	2b20      	cmp	r3, #32
 800472e:	d108      	bne.n	8004742 <HAL_RCC_OscConfig+0x3d6>
 8004730:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004738:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473e:	6053      	str	r3, [r2, #4]
 8004740:	e02e      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
 8004742:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	069b      	lsls	r3, r3, #26
 8004750:	4944      	ldr	r1, [pc, #272]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
 8004756:	e023      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	493f      	ldr	r1, [pc, #252]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	60cb      	str	r3, [r1, #12]
 800476c:	e018      	b.n	80047a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a3c      	ldr	r2, [pc, #240]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fc fc09 	bl	8000f90 <HAL_GetTick>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004782:	f7fc fc05 	bl	8000f90 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e212      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004794:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f0      	bne.n	8004782 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d036      	beq.n	800481a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d019      	beq.n	80047e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fc fbe6 	bl	8000f90 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fc fbe2 	bl	8000f90 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1ef      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x45c>
 80047e6:	e018      	b.n	800481a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fc fbcc 	bl	8000f90 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fc fbc8 	bl	8000f90 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1d5      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d039      	beq.n	800489a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01c      	beq.n	8004868 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800483a:	f7fc fba9 	bl	8000f90 <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004842:	f7fc fba5 	bl	8000f90 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1b2      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x4d6>
 8004860:	e01b      	b.n	800489a <HAL_RCC_OscConfig+0x52e>
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004868:	4b9b      	ldr	r3, [pc, #620]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a9a      	ldr	r2, [pc, #616]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800486e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004872:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004874:	f7fc fb8c 	bl	8000f90 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800487c:	f7fc fb88 	bl	8000f90 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e195      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800488e:	4b92      	ldr	r3, [pc, #584]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8081 	beq.w	80049aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048a8:	4b8c      	ldr	r3, [pc, #560]	; (8004adc <HAL_RCC_OscConfig+0x770>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a8b      	ldr	r2, [pc, #556]	; (8004adc <HAL_RCC_OscConfig+0x770>)
 80048ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b4:	f7fc fb6c 	bl	8000f90 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048bc:	f7fc fb68 	bl	8000f90 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e175      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ce:	4b83      	ldr	r3, [pc, #524]	; (8004adc <HAL_RCC_OscConfig+0x770>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x584>
 80048e2:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a7c      	ldr	r2, [pc, #496]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	e02d      	b.n	800494c <HAL_RCC_OscConfig+0x5e0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10c      	bne.n	8004912 <HAL_RCC_OscConfig+0x5a6>
 80048f8:	4b77      	ldr	r3, [pc, #476]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a76      	ldr	r2, [pc, #472]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	4b74      	ldr	r3, [pc, #464]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a73      	ldr	r2, [pc, #460]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	e01c      	b.n	800494c <HAL_RCC_OscConfig+0x5e0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b05      	cmp	r3, #5
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x5c8>
 800491a:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a6e      	ldr	r2, [pc, #440]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
 8004926:	4b6c      	ldr	r3, [pc, #432]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a6b      	ldr	r2, [pc, #428]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0x5e0>
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a67      	ldr	r2, [pc, #412]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
 8004940:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a64      	ldr	r2, [pc, #400]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004946:	f023 0304 	bic.w	r3, r3, #4
 800494a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fc fb1c 	bl	8000f90 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fc fb18 	bl	8000f90 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e123      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004972:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ee      	beq.n	800495c <HAL_RCC_OscConfig+0x5f0>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fc fb06 	bl	8000f90 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fc fb02 	bl	8000f90 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e10d      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800499e:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ee      	bne.n	8004988 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8102 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049b4:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049bc:	2b18      	cmp	r3, #24
 80049be:	f000 80bd 	beq.w	8004b3c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	f040 809e 	bne.w	8004b08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049cc:	4b42      	ldr	r3, [pc, #264]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc fada 	bl	8000f90 <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fc fad6 	bl	8000f90 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e0e3      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a02:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <HAL_RCC_OscConfig+0x774>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a0e:	0112      	lsls	r2, r2, #4
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4931      	ldr	r1, [pc, #196]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	628b      	str	r3, [r1, #40]	; 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	3b01      	subs	r3, #1
 8004a28:	025b      	lsls	r3, r3, #9
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	3b01      	subs	r3, #1
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	3b01      	subs	r3, #1
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a48:	4923      	ldr	r1, [pc, #140]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCC_OscConfig+0x778>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a66:	00d2      	lsls	r2, r2, #3
 8004a68:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f023 020c 	bic.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a80:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f023 0202 	bic.w	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	4912      	ldr	r1, [pc, #72]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a10      	ldr	r2, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a0d      	ldr	r2, [pc, #52]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004ab6:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fc fa5f 	bl	8000f90 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ad4:	e011      	b.n	8004afa <HAL_RCC_OscConfig+0x78e>
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	58024800 	.word	0x58024800
 8004ae0:	fffffc0c 	.word	0xfffffc0c
 8004ae4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fc fa52 	bl	8000f90 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e05f      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004afa:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x77c>
 8004b06:	e057      	b.n	8004bb8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fc fa3c 	bl	8000f90 <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fc fa38 	bl	8000f90 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e045      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b2e:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x7b0>
 8004b3a:	e03d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_OscConfig+0x858>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d031      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f003 0203 	and.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d12a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d122      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0a5b      	lsrs	r3, r3, #9
 8004b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d108      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3730      	adds	r7, #48	; 0x30
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400

08004bc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e19c      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b8a      	ldr	r3, [pc, #552]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d910      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b87      	ldr	r3, [pc, #540]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 020f 	bic.w	r2, r3, #15
 8004bf2:	4985      	ldr	r1, [pc, #532]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b83      	ldr	r3, [pc, #524]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e184      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	4b7b      	ldr	r3, [pc, #492]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d908      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c28:	4b78      	ldr	r3, [pc, #480]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4975      	ldr	r1, [pc, #468]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	4b70      	ldr	r3, [pc, #448]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d908      	bls.n	8004c68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c56:	4b6d      	ldr	r3, [pc, #436]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	496a      	ldr	r1, [pc, #424]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	4b64      	ldr	r3, [pc, #400]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d908      	bls.n	8004c96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c84:	4b61      	ldr	r3, [pc, #388]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	495e      	ldr	r1, [pc, #376]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d010      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d908      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004cb2:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4953      	ldr	r1, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	4b4d      	ldr	r3, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d908      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b4a      	ldr	r3, [pc, #296]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f023 020f 	bic.w	r2, r3, #15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4947      	ldr	r1, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d055      	beq.n	8004daa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cfe:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	4940      	ldr	r1, [pc, #256]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d18:	4b3c      	ldr	r3, [pc, #240]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d121      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0f6      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d115      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0ea      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0de      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d58:	4b2c      	ldr	r3, [pc, #176]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0d6      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d68:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f023 0207 	bic.w	r2, r3, #7
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4925      	ldr	r1, [pc, #148]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fc f909 	bl	8000f90 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d82:	f7fc f905 	bl	8000f90 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e0be      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d1eb      	bne.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d208      	bcs.n	8004dd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d214      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	4906      	ldr	r1, [pc, #24]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <HAL_RCC_ClockConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e086      	b.n	8004f16 <HAL_RCC_ClockConfig+0x34e>
 8004e08:	52002000 	.word	0x52002000
 8004e0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d208      	bcs.n	8004e3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e2c:	4b3c      	ldr	r3, [pc, #240]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	4939      	ldr	r1, [pc, #228]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d208      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e5a:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	492e      	ldr	r1, [pc, #184]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d010      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d208      	bcs.n	8004e9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	4922      	ldr	r1, [pc, #136]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d010      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d208      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4917      	ldr	r1, [pc, #92]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ec8:	f000 f844 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	4912      	ldr	r1, [pc, #72]	; (8004f24 <HAL_RCC_ClockConfig+0x35c>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <HAL_RCC_ClockConfig+0x358>)
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	4a0d      	ldr	r2, [pc, #52]	; (8004f24 <HAL_RCC_ClockConfig+0x35c>)
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <HAL_RCC_ClockConfig+0x360>)
 8004efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f00:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x364>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x368>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fff6 	bl	8000efc <HAL_InitTick>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	58024400 	.word	0x58024400
 8004f24:	08008acc 	.word	0x08008acc
 8004f28:	24002008 	.word	0x24002008
 8004f2c:	24002004 	.word	0x24002004
 8004f30:	2400200c 	.word	0x2400200c

08004f34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCC_EnableCSS+0x1c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_RCC_EnableCSS+0x1c>)
 8004f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f42:	6013      	str	r3, [r2, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	; 0x24
 8004f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4bb3      	ldr	r3, [pc, #716]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f62:	2b18      	cmp	r3, #24
 8004f64:	f200 8155 	bhi.w	8005212 <HAL_RCC_GetSysClockFreq+0x2be>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004fd5 	.word	0x08004fd5
 8004f74:	08005213 	.word	0x08005213
 8004f78:	08005213 	.word	0x08005213
 8004f7c:	08005213 	.word	0x08005213
 8004f80:	08005213 	.word	0x08005213
 8004f84:	08005213 	.word	0x08005213
 8004f88:	08005213 	.word	0x08005213
 8004f8c:	08005213 	.word	0x08005213
 8004f90:	08004ffb 	.word	0x08004ffb
 8004f94:	08005213 	.word	0x08005213
 8004f98:	08005213 	.word	0x08005213
 8004f9c:	08005213 	.word	0x08005213
 8004fa0:	08005213 	.word	0x08005213
 8004fa4:	08005213 	.word	0x08005213
 8004fa8:	08005213 	.word	0x08005213
 8004fac:	08005213 	.word	0x08005213
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005213 	.word	0x08005213
 8004fb8:	08005213 	.word	0x08005213
 8004fbc:	08005213 	.word	0x08005213
 8004fc0:	08005213 	.word	0x08005213
 8004fc4:	08005213 	.word	0x08005213
 8004fc8:	08005213 	.word	0x08005213
 8004fcc:	08005213 	.word	0x08005213
 8004fd0:	08005007 	.word	0x08005007
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd4:	4b94      	ldr	r3, [pc, #592]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe0:	4b91      	ldr	r3, [pc, #580]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a90      	ldr	r2, [pc, #576]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ff2:	e111      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ff4:	4b8d      	ldr	r3, [pc, #564]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff6:	61bb      	str	r3, [r7, #24]
    break;
 8004ff8:	e10e      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004ffa:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ffc:	61bb      	str	r3, [r7, #24]
    break;
 8004ffe:	e10b      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005000:	4b8c      	ldr	r3, [pc, #560]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005002:	61bb      	str	r3, [r7, #24]
    break;
 8005004:	e108      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005010:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800501c:	4b82      	ldr	r3, [pc, #520]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005026:	4b80      	ldr	r3, [pc, #512]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	08db      	lsrs	r3, r3, #3
 800502c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80e1 	beq.w	800520c <HAL_RCC_GetSysClockFreq+0x2b8>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f000 8083 	beq.w	8005158 <HAL_RCC_GetSysClockFreq+0x204>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b02      	cmp	r3, #2
 8005056:	f200 80a1 	bhi.w	800519c <HAL_RCC_GetSysClockFreq+0x248>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x114>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d056      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005066:	e099      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005068:	4b6f      	ldr	r3, [pc, #444]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02d      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005074:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	4a6b      	ldr	r2, [pc, #428]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
 8005084:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b62      	ldr	r3, [pc, #392]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80050ce:	e087      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800523c <HAL_RCC_GetSysClockFreq+0x2e8>
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b51      	ldr	r3, [pc, #324]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005112:	e065      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005126:	4b40      	ldr	r3, [pc, #256]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005136:	ed97 6a02 	vldr	s12, [r7, #8]
 800513a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005156:	e043      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a02 	vldr	s12, [r7, #8]
 800517e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800519a:	e021      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	0a5b      	lsrs	r3, r3, #9
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	3301      	adds	r3, #1
 80051ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005204:	ee17 3a90 	vmov	r3, s15
 8005208:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800520a:	e005      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
    break;
 8005210:	e002      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005214:	61bb      	str	r3, [r7, #24]
    break;
 8005216:	bf00      	nop
  }

  return sysclockfreq;
 8005218:	69bb      	ldr	r3, [r7, #24]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	03d09000 	.word	0x03d09000
 8005230:	003d0900 	.word	0x003d0900
 8005234:	016e3600 	.word	0x016e3600
 8005238:	46000000 	.word	0x46000000
 800523c:	4c742400 	.word	0x4c742400
 8005240:	4a742400 	.word	0x4a742400
 8005244:	4bb71b00 	.word	0x4bb71b00

08005248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800524e:	f7ff fe81 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	490f      	ldr	r1, [pc, #60]	; (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005286:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	08008acc 	.word	0x08008acc
 80052a0:	24002008 	.word	0x24002008
 80052a4:	24002004 	.word	0x24002004

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052ac:	f7ff ffcc 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4904      	ldr	r1, [pc, #16]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	58024400 	.word	0x58024400
 80052d0:	08008acc 	.word	0x08008acc

080052d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052d8:	f7ff ffb6 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4904      	ldr	r1, [pc, #16]	; (80052fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	58024400 	.word	0x58024400
 80052fc:	08008acc 	.word	0x08008acc

08005300 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d105      	bne.n	800531e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8005312:	f000 f809 	bl	8005328 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005316:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800531c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400

08005328 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005344:	2300      	movs	r3, #0
 8005346:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800535c:	d02a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800535e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005362:	d824      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005368:	d018      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800536a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536e:	d81e      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005378:	d007      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800537a:	e018      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4ba3      	ldr	r3, [pc, #652]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4aa2      	ldr	r2, [pc, #648]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005388:	e015      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f9d5 	bl	8006740 <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800539a:	e00c      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fa7e 	bl	80068a4 <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053ac:	e003      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
      break;
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053bc:	4b93      	ldr	r3, [pc, #588]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c8:	4990      	ldr	r1, [pc, #576]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	650b      	str	r3, [r1, #80]	; 0x50
 80053ce:	e001      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03d      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d826      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005405 	.word	0x08005405
 80053f4:	08005413 	.word	0x08005413
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	0800543d 	.word	0x0800543d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005404:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4a80      	ldr	r2, [pc, #512]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800540a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005410:	e015      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f001 f991 	bl	8006740 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005422:	e00c      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3324      	adds	r3, #36	; 0x24
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fa3a 	bl	80068a4 <RCCEx_PLL3_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
      break;
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800543c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005444:	4b71      	ldr	r3, [pc, #452]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005448:	f023 0207 	bic.w	r2, r3, #7
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	496e      	ldr	r1, [pc, #440]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	650b      	str	r3, [r1, #80]	; 0x50
 8005456:	e001      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005464:	2b00      	cmp	r3, #0
 8005466:	d042      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005470:	d02b      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d825      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005478:	2bc0      	cmp	r3, #192	; 0xc0
 800547a:	d028      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800547c:	2bc0      	cmp	r3, #192	; 0xc0
 800547e:	d821      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d016      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d81d      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d007      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005490:	e018      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005492:	4b5e      	ldr	r3, [pc, #376]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	4a5d      	ldr	r2, [pc, #372]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800549e:	e017      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f94a 	bl	8006740 <RCCEx_PLL2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054b0:	e00e      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3324      	adds	r3, #36	; 0x24
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f9f3 	bl	80068a4 <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054c2:	e005      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054d6:	4b4d      	ldr	r3, [pc, #308]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	494a      	ldr	r1, [pc, #296]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	650b      	str	r3, [r1, #80]	; 0x50
 80054e8:	e001      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d049      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005504:	d030      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800550a:	d82a      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800550c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005510:	d02c      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005512:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005516:	d824      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551c:	d018      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800551e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005522:	d81e      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552c:	d007      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800552e:	e018      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4b36      	ldr	r3, [pc, #216]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a35      	ldr	r2, [pc, #212]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800553c:	e017      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f8fb 	bl	8006740 <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800554e:	e00e      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f9a4 	bl	80068a4 <RCCEx_PLL3_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005560:	e005      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
      break;
 8005566:	e002      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800556c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005582:	4922      	ldr	r1, [pc, #136]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	658b      	str	r3, [r1, #88]	; 0x58
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a4:	d030      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80055a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055aa:	d82a      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055b0:	d02e      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80055b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055b6:	d824      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055bc:	d018      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80055be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c2:	d81e      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80055c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055cc:	d007      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80055ce:	e018      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a0d      	ldr	r2, [pc, #52]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055dc:	e019      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 f8ab 	bl	8006740 <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80055ee:	e010      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f954 	bl	80068a4 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005600:	e007      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	e004      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005608:	bf00      	nop
 800560a:	e002      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800560c:	58024400 	.word	0x58024400
      break;
 8005610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005618:	4b99      	ldr	r3, [pc, #612]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005626:	4996      	ldr	r1, [pc, #600]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005628:	4313      	orrs	r3, r2
 800562a:	658b      	str	r3, [r1, #88]	; 0x58
 800562c:	e001      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d032      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	2b30      	cmp	r3, #48	; 0x30
 8005644:	d01c      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005646:	2b30      	cmp	r3, #48	; 0x30
 8005648:	d817      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d00c      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800564e:	2b20      	cmp	r3, #32
 8005650:	d813      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005656:	2b10      	cmp	r3, #16
 8005658:	d10f      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565a:	4b89      	ldr	r3, [pc, #548]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a88      	ldr	r2, [pc, #544]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005666:	e00e      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2102      	movs	r1, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f001 f866 	bl	8006740 <RCCEx_PLL2_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005678:	e005      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
      break;
 800567e:	e002      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005680:	bf00      	nop
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800568c:	4b7c      	ldr	r3, [pc, #496]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005698:	4979      	ldr	r1, [pc, #484]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800569a:	4313      	orrs	r3, r2
 800569c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800569e:	e001      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d047      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b8:	d030      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056be:	d82a      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056c4:	d02c      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80056c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ca:	d824      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d0:	d018      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d81e      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d007      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80056e2:	e018      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e4:	4b66      	ldr	r3, [pc, #408]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4a65      	ldr	r2, [pc, #404]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056f0:	e017      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f821 	bl	8006740 <RCCEx_PLL2_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005702:	e00e      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3324      	adds	r3, #36	; 0x24
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f001 f8ca 	bl	80068a4 <RCCEx_PLL3_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005714:	e005      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	75fb      	strb	r3, [r7, #23]
      break;
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005728:	4b55      	ldr	r3, [pc, #340]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	4952      	ldr	r1, [pc, #328]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005736:	4313      	orrs	r3, r2
 8005738:	650b      	str	r3, [r1, #80]	; 0x50
 800573a:	e001      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d049      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005754:	d02e      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800575a:	d828      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800575c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005760:	d02a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005766:	d822      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800576c:	d026      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800576e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005772:	d81c      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005778:	d010      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800577a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577e:	d816      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01d      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d111      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 ffd5 	bl	8006740 <RCCEx_PLL2_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800579a:	e012      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 f87e 	bl	80068a4 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057ac:	e009      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
      break;
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057b4:	bf00      	nop
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	492a      	ldr	r1, [pc, #168]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	650b      	str	r3, [r1, #80]	; 0x50
 80057da:	e001      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d04d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f6:	d02e      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80057f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057fc:	d828      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d02a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d822      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800580a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800580e:	d026      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005814:	d81c      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581a:	d010      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005820:	d816      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01d      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800582a:	d111      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ff84 	bl	8006740 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800583c:	e012      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3324      	adds	r3, #36	; 0x24
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f82d 	bl	80068a4 <RCCEx_PLL3_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800584e:	e009      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
      break;
 8005854:	e006      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005878:	4901      	ldr	r1, [pc, #4]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800587a:	4313      	orrs	r3, r2
 800587c:	658b      	str	r3, [r1, #88]	; 0x58
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d02f      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800589c:	d00e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800589e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a2:	d814      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80058a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ac:	d10f      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4baf      	ldr	r3, [pc, #700]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	4aae      	ldr	r2, [pc, #696]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058ba:	e00c      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 ff3c 	bl	8006740 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
      break;
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80058d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058dc:	4ba3      	ldr	r3, [pc, #652]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e8:	49a0      	ldr	r1, [pc, #640]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	650b      	str	r3, [r1, #80]	; 0x50
 80058ee:	e001      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d032      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	2b03      	cmp	r3, #3
 8005906:	d81b      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005947 	.word	0x08005947
 8005914:	08005921 	.word	0x08005921
 8005918:	0800592f 	.word	0x0800592f
 800591c:	08005947 	.word	0x08005947
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4b92      	ldr	r3, [pc, #584]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a91      	ldr	r2, [pc, #580]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800592c:	e00c      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f000 ff03 	bl	8006740 <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800593e:	e003      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75fb      	strb	r3, [r7, #23]
      break;
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800594e:	4b87      	ldr	r3, [pc, #540]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4984      	ldr	r1, [pc, #528]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800595c:	4313      	orrs	r3, r2
 800595e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005960:	e001      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8086 	beq.w	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005974:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7d      	ldr	r2, [pc, #500]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800597a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005980:	f7fb fb06 	bl	8000f90 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005986:	e009      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005988:	f7fb fb02 	bl	8000f90 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d902      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	75fb      	strb	r3, [r7, #23]
        break;
 800599a:	e005      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800599c:	4b74      	ldr	r3, [pc, #464]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ef      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d166      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059ae:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b8:	4053      	eors	r3, r2
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d013      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c2:	4b6a      	ldr	r3, [pc, #424]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059cc:	4b67      	ldr	r3, [pc, #412]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a66      	ldr	r2, [pc, #408]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d8:	4b64      	ldr	r3, [pc, #400]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a63      	ldr	r2, [pc, #396]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059e4:	4a61      	ldr	r2, [pc, #388]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f4:	d115      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fb facb 	bl	8000f90 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fc:	e00b      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fb fac7 	bl	8000f90 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d902      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	75fb      	strb	r3, [r7, #23]
            break;
 8005a14:	e005      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a16:	4b55      	ldr	r3, [pc, #340]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ed      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d126      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a36:	d10d      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a38:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a46:	0919      	lsrs	r1, r3, #4
 8005a48:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	4947      	ldr	r1, [pc, #284]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	610b      	str	r3, [r1, #16]
 8005a52:	e005      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a54:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a5e:	6113      	str	r3, [r2, #16]
 8005a60:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6e:	493f      	ldr	r1, [pc, #252]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	670b      	str	r3, [r1, #112]	; 0x70
 8005a74:	e004      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	75bb      	strb	r3, [r7, #22]
 8005a7a:	e001      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8085 	beq.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a92:	2b28      	cmp	r3, #40	; 0x28
 8005a94:	d866      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b79 	.word	0x08005b79
 8005aa0:	08005b65 	.word	0x08005b65
 8005aa4:	08005b65 	.word	0x08005b65
 8005aa8:	08005b65 	.word	0x08005b65
 8005aac:	08005b65 	.word	0x08005b65
 8005ab0:	08005b65 	.word	0x08005b65
 8005ab4:	08005b65 	.word	0x08005b65
 8005ab8:	08005b65 	.word	0x08005b65
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b65 	.word	0x08005b65
 8005ac4:	08005b65 	.word	0x08005b65
 8005ac8:	08005b65 	.word	0x08005b65
 8005acc:	08005b65 	.word	0x08005b65
 8005ad0:	08005b65 	.word	0x08005b65
 8005ad4:	08005b65 	.word	0x08005b65
 8005ad8:	08005b65 	.word	0x08005b65
 8005adc:	08005b53 	.word	0x08005b53
 8005ae0:	08005b65 	.word	0x08005b65
 8005ae4:	08005b65 	.word	0x08005b65
 8005ae8:	08005b65 	.word	0x08005b65
 8005aec:	08005b65 	.word	0x08005b65
 8005af0:	08005b65 	.word	0x08005b65
 8005af4:	08005b65 	.word	0x08005b65
 8005af8:	08005b65 	.word	0x08005b65
 8005afc:	08005b79 	.word	0x08005b79
 8005b00:	08005b65 	.word	0x08005b65
 8005b04:	08005b65 	.word	0x08005b65
 8005b08:	08005b65 	.word	0x08005b65
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005b65 	.word	0x08005b65
 8005b18:	08005b65 	.word	0x08005b65
 8005b1c:	08005b79 	.word	0x08005b79
 8005b20:	08005b65 	.word	0x08005b65
 8005b24:	08005b65 	.word	0x08005b65
 8005b28:	08005b65 	.word	0x08005b65
 8005b2c:	08005b65 	.word	0x08005b65
 8005b30:	08005b65 	.word	0x08005b65
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b79 	.word	0x08005b79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fdfa 	bl	8006740 <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b50:	e013      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	2101      	movs	r1, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fea3 	bl	80068a4 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b62:	e00a      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
      break;
 8005b68:	e007      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	58024800 	.word	0x58024800
 8005b74:	00ffffcf 	.word	0x00ffffcf
      break;
 8005b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b80:	4b96      	ldr	r3, [pc, #600]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b8c:	4993      	ldr	r1, [pc, #588]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	654b      	str	r3, [r1, #84]	; 0x54
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d038      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d821      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bf7 	.word	0x08005bf7
 8005bb8:	08005bcd 	.word	0x08005bcd
 8005bbc:	08005bdf 	.word	0x08005bdf
 8005bc0:	08005bf7 	.word	0x08005bf7
 8005bc4:	08005bf7 	.word	0x08005bf7
 8005bc8:	08005bf7 	.word	0x08005bf7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fdb4 	bl	8006740 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bdc:	e00c      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3324      	adds	r3, #36	; 0x24
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fe5d 	bl	80068a4 <RCCEx_PLL3_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005bfe:	4b77      	ldr	r3, [pc, #476]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	4974      	ldr	r1, [pc, #464]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	654b      	str	r3, [r1, #84]	; 0x54
 8005c10:	e001      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d03a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	d821      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005c2c:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c77 	.word	0x08005c77
 8005c38:	08005c4d 	.word	0x08005c4d
 8005c3c:	08005c5f 	.word	0x08005c5f
 8005c40:	08005c77 	.word	0x08005c77
 8005c44:	08005c77 	.word	0x08005c77
 8005c48:	08005c77 	.word	0x08005c77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	2101      	movs	r1, #1
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fd74 	bl	8006740 <RCCEx_PLL2_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c5c:	e00c      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	; 0x24
 8005c62:	2101      	movs	r1, #1
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fe1d 	bl	80068a4 <RCCEx_PLL3_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c6e:	e003      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
      break;
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c7e:	4b57      	ldr	r3, [pc, #348]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f023 0207 	bic.w	r2, r3, #7
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	4953      	ldr	r1, [pc, #332]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	658b      	str	r3, [r1, #88]	; 0x58
 8005c92:	e001      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d04b      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cae:	d02e      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cb4:	d828      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d02a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d822      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cc6:	d026      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ccc:	d81c      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd8:	d816      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01d      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ce2:	d111      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd28 	bl	8006740 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e012      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fdd1 	bl	80068a4 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d06:	e009      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d22:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d30:	492a      	ldr	r1, [pc, #168]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	654b      	str	r3, [r1, #84]	; 0x54
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d04d      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d52:	d02e      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d58:	d828      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d02a      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d64:	d822      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6a:	d026      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d70:	d81c      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d76:	d010      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7c:	d816      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01d      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d86:	d111      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fcd6 	bl	8006740 <RCCEx_PLL2_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d98:	e012      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3324      	adds	r3, #36	; 0x24
 8005d9e:	2102      	movs	r1, #2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fd7f 	bl	80068a4 <RCCEx_PLL3_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005daa:	e009      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
      break;
 8005db0:	e006      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dd4:	4901      	ldr	r1, [pc, #4]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d04b      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dfa:	d02e      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005dfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e00:	d828      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e06:	d02a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0c:	d822      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e12:	d026      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e18:	d81c      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e1e:	d010      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e24:	d816      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01d      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2e:	d111      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fc82 	bl	8006740 <RCCEx_PLL2_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e40:	e012      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3324      	adds	r3, #36	; 0x24
 8005e46:	2102      	movs	r1, #2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd2b 	bl	80068a4 <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e52:	e009      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75fb      	strb	r3, [r7, #23]
      break;
 8005e58:	e006      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e002      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e6e:	4b9d      	ldr	r3, [pc, #628]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e7c:	4999      	ldr	r1, [pc, #612]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	658b      	str	r3, [r1, #88]	; 0x58
 8005e82:	e001      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d10a      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3324      	adds	r3, #36	; 0x24
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fcfc 	bl	80068a4 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005eb6:	4b8b      	ldr	r3, [pc, #556]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec4:	4987      	ldr	r1, [pc, #540]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3324      	adds	r3, #36	; 0x24
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fcdb 	bl	80068a4 <RCCEx_PLL3_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ef8:	4b7a      	ldr	r3, [pc, #488]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f06:	4977      	ldr	r1, [pc, #476]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d034      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f22:	d01d      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f28:	d817      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d009      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005f34:	e011      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fbff 	bl	8006740 <RCCEx_PLL2_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f46:	e00c      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3324      	adds	r3, #36	; 0x24
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fca8 	bl	80068a4 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f58:	e003      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f68:	4b5e      	ldr	r3, [pc, #376]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f76:	495b      	ldr	r1, [pc, #364]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8005f7c:	e001      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d033      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f98:	d01c      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f9e:	d816      	bhi.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa4:	d003      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005faa:	d007      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005fac:	e00f      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fae:	4b4d      	ldr	r3, [pc, #308]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a4c      	ldr	r2, [pc, #304]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fba:	e00c      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3324      	adds	r3, #36	; 0x24
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fc6e 	bl	80068a4 <RCCEx_PLL3_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fcc:	e003      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd2:	e000      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fdc:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fea:	493e      	ldr	r1, [pc, #248]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	654b      	str	r3, [r1, #84]	; 0x54
 8005ff0:	e001      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d029      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d007      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006010:	e00f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006012:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	4a33      	ldr	r2, [pc, #204]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800601e:	e00b      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	2102      	movs	r1, #2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fb8a 	bl	8006740 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006030:	e002      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
      break;
 8006036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	4926      	ldr	r1, [pc, #152]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800604c:	4313      	orrs	r3, r2
 800604e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006050:	e001      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3324      	adds	r3, #36	; 0x24
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fc1b 	bl	80068a4 <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d033      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608c:	d017      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800608e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006092:	d811      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d013      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800609a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609e:	d80b      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d010      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d106      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060aa:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80060b6:	e007      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
      break;
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060da:	4902      	ldr	r1, [pc, #8]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	654b      	str	r3, [r1, #84]	; 0x54
 80060e0:	e004      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80060e2:	bf00      	nop
 80060e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060f8:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	492e      	ldr	r1, [pc, #184]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006106:	4313      	orrs	r3, r2
 8006108:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006116:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006124:	4926      	ldr	r1, [pc, #152]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006126:	4313      	orrs	r3, r2
 8006128:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006136:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006142:	491f      	ldr	r1, [pc, #124]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006144:	4313      	orrs	r3, r2
 8006146:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4a19      	ldr	r2, [pc, #100]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800615a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800615e:	6113      	str	r3, [r2, #16]
 8006160:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800616a:	4915      	ldr	r1, [pc, #84]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800616c:	4313      	orrs	r3, r2
 800616e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	da08      	bge.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800617a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	490e      	ldr	r1, [pc, #56]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006186:	4313      	orrs	r3, r2
 8006188:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	4906      	ldr	r1, [pc, #24]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80061aa:	7dbb      	ldrb	r3, [r7, #22]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400

080061c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061c8:	f7ff f83e 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	091b      	lsrs	r3, r3, #4
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	4904      	ldr	r1, [pc, #16]	; (80061ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	58024400 	.word	0x58024400
 80061ec:	08008acc 	.word	0x08008acc

080061f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061f8:	4ba1      	ldr	r3, [pc, #644]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006202:	4b9f      	ldr	r3, [pc, #636]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	0b1b      	lsrs	r3, r3, #12
 8006208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800620e:	4b9c      	ldr	r3, [pc, #624]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800621a:	4b99      	ldr	r3, [pc, #612]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621e:	08db      	lsrs	r3, r3, #3
 8006220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8111 	beq.w	8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b02      	cmp	r3, #2
 8006242:	f000 8083 	beq.w	800634c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b02      	cmp	r3, #2
 800624a:	f200 80a1 	bhi.w	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d056      	beq.n	8006308 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800625a:	e099      	b.n	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625c:	4b88      	ldr	r3, [pc, #544]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d02d      	beq.n	80062c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006268:	4b85      	ldr	r3, [pc, #532]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	4a84      	ldr	r2, [pc, #528]	; (8006484 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
 8006278:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062c2:	e087      	b.n	80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800648c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b6a      	ldr	r3, [pc, #424]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006306:	e065      	b.n	80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b59      	ldr	r3, [pc, #356]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800634a:	e043      	b.n	80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800638e:	e021      	b.n	80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b37      	ldr	r3, [pc, #220]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80063d4:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	0a5b      	lsrs	r3, r3, #9
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fa:	ee17 2a90 	vmov	r2, s15
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800641c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006428:	ee17 2a90 	vmov	r2, s15
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	0e1b      	lsrs	r3, r3, #24
 8006436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800644a:	edd7 6a07 	vldr	s13, [r7, #28]
 800644e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006456:	ee17 2a90 	vmov	r2, s15
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800645e:	e008      	b.n	8006472 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	609a      	str	r2, [r3, #8]
}
 8006472:	bf00      	nop
 8006474:	3724      	adds	r7, #36	; 0x24
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
 8006484:	03d09000 	.word	0x03d09000
 8006488:	46000000 	.word	0x46000000
 800648c:	4c742400 	.word	0x4c742400
 8006490:	4a742400 	.word	0x4a742400
 8006494:	4bb71b00 	.word	0x4bb71b00

08006498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006498:	b480      	push	{r7}
 800649a:	b089      	sub	sp, #36	; 0x24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064a0:	4ba1      	ldr	r3, [pc, #644]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80064aa:	4b9f      	ldr	r3, [pc, #636]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	0d1b      	lsrs	r3, r3, #20
 80064b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064b6:	4b9c      	ldr	r3, [pc, #624]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80064c2:	4b99      	ldr	r3, [pc, #612]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8111 	beq.w	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f000 8083 	beq.w	80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f200 80a1 	bhi.w	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d056      	beq.n	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006502:	e099      	b.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006504:	4b88      	ldr	r3, [pc, #544]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02d      	beq.n	800656c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006510:	4b85      	ldr	r3, [pc, #532]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	08db      	lsrs	r3, r3, #3
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	4a84      	ldr	r2, [pc, #528]	; (800672c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b7b      	ldr	r3, [pc, #492]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a03 	vldr	s12, [r7, #12]
 800654e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800656a:	e087      	b.n	800667c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006734 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b6a      	ldr	r3, [pc, #424]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006592:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ae:	e065      	b.n	800667c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b59      	ldr	r3, [pc, #356]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065f2:	e043      	b.n	800667c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006606:	4b48      	ldr	r3, [pc, #288]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a03 	vldr	s12, [r7, #12]
 800661a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006636:	e021      	b.n	800667c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664a:	4b37      	ldr	r3, [pc, #220]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665a:	ed97 6a03 	vldr	s12, [r7, #12]
 800665e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800666e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800667a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800667c:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006696:	edd7 6a07 	vldr	s13, [r7, #28]
 800669a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a2:	ee17 2a90 	vmov	r2, s15
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80066aa:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d0:	ee17 2a90 	vmov	r2, s15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	0e1b      	lsrs	r3, r3, #24
 80066de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fe:	ee17 2a90 	vmov	r2, s15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006706:	e008      	b.n	800671a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
}
 800671a:	bf00      	nop
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	58024400 	.word	0x58024400
 800672c:	03d09000 	.word	0x03d09000
 8006730:	46000000 	.word	0x46000000
 8006734:	4c742400 	.word	0x4c742400
 8006738:	4a742400 	.word	0x4a742400
 800673c:	4bb71b00 	.word	0x4bb71b00

08006740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800674e:	4b53      	ldr	r3, [pc, #332]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d101      	bne.n	800675e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e099      	b.n	8006892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800675e:	4b4f      	ldr	r3, [pc, #316]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a4e      	ldr	r2, [pc, #312]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fa fc11 	bl	8000f90 <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006770:	e008      	b.n	8006784 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006772:	f7fa fc0d 	bl	8000f90 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e086      	b.n	8006892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006784:	4b45      	ldr	r3, [pc, #276]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006790:	4b42      	ldr	r3, [pc, #264]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	031b      	lsls	r3, r3, #12
 800679e:	493f      	ldr	r1, [pc, #252]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	628b      	str	r3, [r1, #40]	; 0x28
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	025b      	lsls	r3, r3, #9
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	3b01      	subs	r3, #1
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067d4:	4931      	ldr	r1, [pc, #196]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	492d      	ldr	r1, [pc, #180]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	f023 0220 	bic.w	r2, r3, #32
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	4928      	ldr	r1, [pc, #160]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067fe:	4b27      	ldr	r3, [pc, #156]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	4a26      	ldr	r2, [pc, #152]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 800680c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <RCCEx_PLL2_Config+0x160>)
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	69d2      	ldr	r2, [r2, #28]
 8006816:	00d2      	lsls	r2, r2, #3
 8006818:	4920      	ldr	r1, [pc, #128]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	4a1e      	ldr	r2, [pc, #120]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006824:	f043 0310 	orr.w	r3, r3, #16
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a19      	ldr	r2, [pc, #100]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800683a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800683c:	e00f      	b.n	800685e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d106      	bne.n	8006852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006844:	4b15      	ldr	r3, [pc, #84]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a14      	ldr	r2, [pc, #80]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 800684a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006850:	e005      	b.n	800685e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800685c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686a:	f7fa fb91 	bl	8000f90 <HAL_GetTick>
 800686e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006870:	e008      	b.n	8006884 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006872:	f7fa fb8d 	bl	8000f90 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e006      	b.n	8006892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <RCCEx_PLL2_Config+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
 80068a0:	ffff0007 	.word	0xffff0007

080068a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068b2:	4b53      	ldr	r3, [pc, #332]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d101      	bne.n	80068c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e099      	b.n	80069f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068c2:	4b4f      	ldr	r3, [pc, #316]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a4e      	ldr	r2, [pc, #312]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80068c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ce:	f7fa fb5f 	bl	8000f90 <HAL_GetTick>
 80068d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068d4:	e008      	b.n	80068e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068d6:	f7fa fb5b 	bl	8000f90 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e086      	b.n	80069f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068e8:	4b45      	ldr	r3, [pc, #276]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f0      	bne.n	80068d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068f4:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	051b      	lsls	r3, r3, #20
 8006902:	493f      	ldr	r1, [pc, #252]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	628b      	str	r3, [r1, #40]	; 0x28
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	3b01      	subs	r3, #1
 800690e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	3b01      	subs	r3, #1
 8006918:	025b      	lsls	r3, r3, #9
 800691a:	b29b      	uxth	r3, r3
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	3b01      	subs	r3, #1
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	3b01      	subs	r3, #1
 8006932:	061b      	lsls	r3, r3, #24
 8006934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006938:	4931      	ldr	r1, [pc, #196]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	492d      	ldr	r1, [pc, #180]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 800694c:	4313      	orrs	r3, r2
 800694e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	4928      	ldr	r1, [pc, #160]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 800695e:	4313      	orrs	r3, r2
 8006960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006962:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800696c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800696e:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006972:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <RCCEx_PLL3_Config+0x160>)
 8006974:	4013      	ands	r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	69d2      	ldr	r2, [r2, #28]
 800697a:	00d2      	lsls	r2, r2, #3
 800697c:	4920      	ldr	r1, [pc, #128]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 800697e:	4313      	orrs	r3, r2
 8006980:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006982:	4b1f      	ldr	r3, [pc, #124]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 800699a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800699e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069a0:	e00f      	b.n	80069c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d106      	bne.n	80069b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069b4:	e005      	b.n	80069c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069b6:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	4a11      	ldr	r2, [pc, #68]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a0e      	ldr	r2, [pc, #56]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ce:	f7fa fadf 	bl	8000f90 <HAL_GetTick>
 80069d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069d4:	e008      	b.n	80069e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069d6:	f7fa fadb 	bl	8000f90 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <RCCEx_PLL3_Config+0x15c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	58024400 	.word	0x58024400
 8006a04:	ffff0007 	.word	0xffff0007

08006a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e042      	b.n	8006aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fa f909 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fcf0 	bl	8007430 <UART_SetConfig>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e022      	b.n	8006aa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fa4c 	bl	8007f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fad3 	bl	8008044 <UART_CheckIdleState>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d17a      	bne.n	8006bb6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Transmit_DMA+0x24>
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e073      	b.n	8006bb8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_UART_Transmit_DMA+0x36>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e06c      	b.n	8006bb8 <HAL_UART_Transmit_DMA+0x110>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2221      	movs	r2, #33	; 0x21
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d02c      	beq.n	8006b6e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b18:	4a29      	ldr	r2, [pc, #164]	; (8006bc0 <HAL_UART_Transmit_DMA+0x118>)
 8006b1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b20:	4a28      	ldr	r2, [pc, #160]	; (8006bc4 <HAL_UART_Transmit_DMA+0x11c>)
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b28:	4a27      	ldr	r2, [pc, #156]	; (8006bc8 <HAL_UART_Transmit_DMA+0x120>)
 8006b2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b30:	2200      	movs	r2, #0
 8006b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3328      	adds	r3, #40	; 0x28
 8006b44:	461a      	mov	r2, r3
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	f7fa ff46 	bl	80019d8 <HAL_DMA_Start_IT>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2210      	movs	r2, #16
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e024      	b.n	8006bb8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9e:	623a      	str	r2, [r7, #32]
 8006ba0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	69f9      	ldr	r1, [r7, #28]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006bb6:	2302      	movs	r3, #2
  }
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	; 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	0800850d 	.word	0x0800850d
 8006bc4:	080085a3 	.word	0x080085a3
 8006bc8:	08008719 	.word	0x08008719

08006bcc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d142      	bne.n	8006c6a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_UART_Receive_DMA+0x24>
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e03b      	b.n	8006c6c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Receive_DMA+0x36>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e034      	b.n	8006c6c <HAL_UART_Receive_DMA+0xa0>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <HAL_UART_Receive_DMA+0xa8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01f      	beq.n	8006c5a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d018      	beq.n	8006c5a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	613b      	str	r3, [r7, #16]
   return(result);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69f9      	ldr	r1, [r7, #28]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f001 fb03 	bl	800826c <UART_Start_Receive_DMA>
 8006c66:	4603      	mov	r3, r0
 8006c68:	e000      	b.n	8006c6c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58000c00 	.word	0x58000c00

08006c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b0ba      	sub	sp, #232	; 0xe8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ca2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11b      	bne.n	8006cec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 835a 	beq.w	8007396 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
      }
      return;
 8006cea:	e354      	b.n	8007396 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 811f 	beq.w	8006f34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cfa:	4b8b      	ldr	r3, [pc, #556]	; (8006f28 <HAL_UART_IRQHandler+0x2b0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d06:	4b89      	ldr	r3, [pc, #548]	; (8006f2c <HAL_UART_IRQHandler+0x2b4>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8112 	beq.w	8006f34 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d011      	beq.n	8006d40 <HAL_UART_IRQHandler+0xc8>
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d011      	beq.n	8006d70 <HAL_UART_IRQHandler+0xf8>
 8006d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d011      	beq.n	8006da0 <HAL_UART_IRQHandler+0x128>
 8006d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006db8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006dbc:	4b5a      	ldr	r3, [pc, #360]	; (8006f28 <HAL_UART_IRQHandler+0x2b0>)
 8006dbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd2:	f043 0208 	orr.w	r2, r3, #8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <HAL_UART_IRQHandler+0x196>
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 82c0 	beq.w	800739a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d013      	beq.n	8006e4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d005      	beq.n	8006e72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d04f      	beq.n	8006f12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fae4 	bl	8008440 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d141      	bne.n	8006f0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1d9      	bne.n	8006e86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <HAL_UART_IRQHandler+0x2b8>)
 8006ee0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fb fafe 	bl	80024e8 <HAL_DMA_Abort_IT>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d017      	beq.n	8006f22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00f      	b.n	8006f22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa7e 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e00b      	b.n	8006f22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa7a 	bl	8007404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	e007      	b.n	8006f22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa76 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006f20:	e23b      	b.n	800739a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f22:	bf00      	nop
    return;
 8006f24:	e239      	b.n	800739a <HAL_UART_IRQHandler+0x722>
 8006f26:	bf00      	nop
 8006f28:	10000001 	.word	0x10000001
 8006f2c:	04000120 	.word	0x04000120
 8006f30:	08008799 	.word	0x08008799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	f040 81ce 	bne.w	80072da <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 81c7 	beq.w	80072da <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 81c0 	beq.w	80072da <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2210      	movs	r2, #16
 8006f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	f040 813b 	bne.w	80071e8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a8b      	ldr	r2, [pc, #556]	; (80071a8 <HAL_UART_IRQHandler+0x530>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d059      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a89      	ldr	r2, [pc, #548]	; (80071ac <HAL_UART_IRQHandler+0x534>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d053      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a87      	ldr	r2, [pc, #540]	; (80071b0 <HAL_UART_IRQHandler+0x538>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04d      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a85      	ldr	r2, [pc, #532]	; (80071b4 <HAL_UART_IRQHandler+0x53c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d047      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a83      	ldr	r2, [pc, #524]	; (80071b8 <HAL_UART_IRQHandler+0x540>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d041      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a81      	ldr	r2, [pc, #516]	; (80071bc <HAL_UART_IRQHandler+0x544>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7f      	ldr	r2, [pc, #508]	; (80071c0 <HAL_UART_IRQHandler+0x548>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d035      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a7d      	ldr	r2, [pc, #500]	; (80071c4 <HAL_UART_IRQHandler+0x54c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02f      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a7b      	ldr	r2, [pc, #492]	; (80071c8 <HAL_UART_IRQHandler+0x550>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d029      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a79      	ldr	r2, [pc, #484]	; (80071cc <HAL_UART_IRQHandler+0x554>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d023      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a77      	ldr	r2, [pc, #476]	; (80071d0 <HAL_UART_IRQHandler+0x558>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a75      	ldr	r2, [pc, #468]	; (80071d4 <HAL_UART_IRQHandler+0x55c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d017      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a73      	ldr	r2, [pc, #460]	; (80071d8 <HAL_UART_IRQHandler+0x560>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d011      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a71      	ldr	r2, [pc, #452]	; (80071dc <HAL_UART_IRQHandler+0x564>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a6f      	ldr	r2, [pc, #444]	; (80071e0 <HAL_UART_IRQHandler+0x568>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0x3ba>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <HAL_UART_IRQHandler+0x56c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d105      	bne.n	800703e <HAL_UART_IRQHandler+0x3c6>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b29b      	uxth	r3, r3
 800703c:	e004      	b.n	8007048 <HAL_UART_IRQHandler+0x3d0>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800704c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 81a4 	beq.w	800739e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800705c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007060:	429a      	cmp	r2, r3
 8007062:	f080 819c 	bcs.w	800739e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	f000 8086 	beq.w	800718a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1da      	bne.n	800707e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e1      	bne.n	80070c8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800712a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800712e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800716c:	65bb      	str	r3, [r7, #88]	; 0x58
 800716e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800717a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	4618      	mov	r0, r3
 8007186:	f7fa fe91 	bl	8001eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007196:	b29b      	uxth	r3, r3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	b29b      	uxth	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f93a 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a4:	e0fb      	b.n	800739e <HAL_UART_IRQHandler+0x726>
 80071a6:	bf00      	nop
 80071a8:	40020010 	.word	0x40020010
 80071ac:	40020028 	.word	0x40020028
 80071b0:	40020040 	.word	0x40020040
 80071b4:	40020058 	.word	0x40020058
 80071b8:	40020070 	.word	0x40020070
 80071bc:	40020088 	.word	0x40020088
 80071c0:	400200a0 	.word	0x400200a0
 80071c4:	400200b8 	.word	0x400200b8
 80071c8:	40020410 	.word	0x40020410
 80071cc:	40020428 	.word	0x40020428
 80071d0:	40020440 	.word	0x40020440
 80071d4:	40020458 	.word	0x40020458
 80071d8:	40020470 	.word	0x40020470
 80071dc:	40020488 	.word	0x40020488
 80071e0:	400204a0 	.word	0x400204a0
 80071e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80cc 	beq.w	80073a2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800720a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80c7 	beq.w	80073a2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007236:	647b      	str	r3, [r7, #68]	; 0x44
 8007238:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800723c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e4      	bne.n	8007214 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	623b      	str	r3, [r7, #32]
   return(result);
 800725a:	6a3a      	ldr	r2, [r7, #32]
 800725c:	4b54      	ldr	r3, [pc, #336]	; (80073b0 <HAL_UART_IRQHandler+0x738>)
 800725e:	4013      	ands	r3, r2
 8007260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800726e:	633a      	str	r2, [r7, #48]	; 0x30
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e3      	bne.n	800724a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0310 	bic.w	r3, r3, #16
 80072aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	69b9      	ldr	r1, [r7, #24]
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	617b      	str	r3, [r7, #20]
   return(result);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e4      	bne.n	8007296 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f8a0 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072d8:	e063      	b.n	80073a2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <HAL_UART_IRQHandler+0x68c>
 80072e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fa8c 	bl	800881a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007302:	e051      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b00      	cmp	r3, #0
 800730e:	d014      	beq.n	800733a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800731c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732c:	2b00      	cmp	r3, #0
 800732e:	d03a      	beq.n	80073a6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
    }
    return;
 8007338:	e035      	b.n	80073a6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_UART_IRQHandler+0x6e2>
 8007346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fa36 	bl	80087c4 <UART_EndTransmit_IT>
    return;
 8007358:	e026      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_UART_IRQHandler+0x702>
 8007366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fa65 	bl	8008842 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007378:	e016      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d010      	beq.n	80073a8 <HAL_UART_IRQHandler+0x730>
 8007386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738a:	2b00      	cmp	r3, #0
 800738c:	da0c      	bge.n	80073a8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fa4d 	bl	800882e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007394:	e008      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
      return;
 8007396:	bf00      	nop
 8007398:	e006      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
    return;
 800739a:	bf00      	nop
 800739c:	e004      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
      return;
 800739e:	bf00      	nop
 80073a0:	e002      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
      return;
 80073a2:	bf00      	nop
 80073a4:	e000      	b.n	80073a8 <HAL_UART_IRQHandler+0x730>
    return;
 80073a6:	bf00      	nop
  }
}
 80073a8:	37e8      	adds	r7, #232	; 0xe8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	effffffe 	.word	0xeffffffe

080073b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b092      	sub	sp, #72	; 0x48
 8007436:	af00      	add	r7, sp, #0
 8007438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4bbe      	ldr	r3, [pc, #760]	; (8007758 <UART_SetConfig+0x328>)
 8007460:	4013      	ands	r3, r2
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4ab3      	ldr	r2, [pc, #716]	; (800775c <UART_SetConfig+0x32c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007498:	4313      	orrs	r3, r2
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	4baf      	ldr	r3, [pc, #700]	; (8007760 <UART_SetConfig+0x330>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	f023 010f 	bic.w	r1, r3, #15
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4aa6      	ldr	r2, [pc, #664]	; (8007764 <UART_SetConfig+0x334>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d177      	bne.n	80075c0 <UART_SetConfig+0x190>
 80074d0:	4ba5      	ldr	r3, [pc, #660]	; (8007768 <UART_SetConfig+0x338>)
 80074d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d8:	2b28      	cmp	r3, #40	; 0x28
 80074da:	d86d      	bhi.n	80075b8 <UART_SetConfig+0x188>
 80074dc:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <UART_SetConfig+0xb4>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	08007589 	.word	0x08007589
 80074e8:	080075b9 	.word	0x080075b9
 80074ec:	080075b9 	.word	0x080075b9
 80074f0:	080075b9 	.word	0x080075b9
 80074f4:	080075b9 	.word	0x080075b9
 80074f8:	080075b9 	.word	0x080075b9
 80074fc:	080075b9 	.word	0x080075b9
 8007500:	080075b9 	.word	0x080075b9
 8007504:	08007591 	.word	0x08007591
 8007508:	080075b9 	.word	0x080075b9
 800750c:	080075b9 	.word	0x080075b9
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075b9 	.word	0x080075b9
 8007518:	080075b9 	.word	0x080075b9
 800751c:	080075b9 	.word	0x080075b9
 8007520:	080075b9 	.word	0x080075b9
 8007524:	08007599 	.word	0x08007599
 8007528:	080075b9 	.word	0x080075b9
 800752c:	080075b9 	.word	0x080075b9
 8007530:	080075b9 	.word	0x080075b9
 8007534:	080075b9 	.word	0x080075b9
 8007538:	080075b9 	.word	0x080075b9
 800753c:	080075b9 	.word	0x080075b9
 8007540:	080075b9 	.word	0x080075b9
 8007544:	080075a1 	.word	0x080075a1
 8007548:	080075b9 	.word	0x080075b9
 800754c:	080075b9 	.word	0x080075b9
 8007550:	080075b9 	.word	0x080075b9
 8007554:	080075b9 	.word	0x080075b9
 8007558:	080075b9 	.word	0x080075b9
 800755c:	080075b9 	.word	0x080075b9
 8007560:	080075b9 	.word	0x080075b9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075b9 	.word	0x080075b9
 800756c:	080075b9 	.word	0x080075b9
 8007570:	080075b9 	.word	0x080075b9
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075b9 	.word	0x080075b9
 800757c:	080075b9 	.word	0x080075b9
 8007580:	080075b9 	.word	0x080075b9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2301      	movs	r3, #1
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e222      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e21e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e21a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a6:	e216      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ae:	e212      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b6:	e20e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e20a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a69      	ldr	r2, [pc, #420]	; (800776c <UART_SetConfig+0x33c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x1fc>
 80075ca:	4b67      	ldr	r3, [pc, #412]	; (8007768 <UART_SetConfig+0x338>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d826      	bhi.n	8007624 <UART_SetConfig+0x1f4>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x1ac>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	08007605 	.word	0x08007605
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e1ec      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e1e8      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e1e4      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e1e0      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e1dc      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800761c:	2340      	movs	r3, #64	; 0x40
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007622:	e1d8      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e1d4      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a4f      	ldr	r2, [pc, #316]	; (8007770 <UART_SetConfig+0x340>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d130      	bne.n	8007698 <UART_SetConfig+0x268>
 8007636:	4b4c      	ldr	r3, [pc, #304]	; (8007768 <UART_SetConfig+0x338>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d826      	bhi.n	8007690 <UART_SetConfig+0x260>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x218>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e1b6      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e1b2      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e1ae      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e1aa      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007680:	2320      	movs	r3, #32
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e1a6      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768e:	e1a2      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007696:	e19e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a35      	ldr	r2, [pc, #212]	; (8007774 <UART_SetConfig+0x344>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d130      	bne.n	8007704 <UART_SetConfig+0x2d4>
 80076a2:	4b31      	ldr	r3, [pc, #196]	; (8007768 <UART_SetConfig+0x338>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d826      	bhi.n	80076fc <UART_SetConfig+0x2cc>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <UART_SetConfig+0x284>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e180      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076d4:	2304      	movs	r3, #4
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e17c      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076dc:	2308      	movs	r3, #8
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e178      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076e4:	2310      	movs	r3, #16
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e174      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076ec:	2320      	movs	r3, #32
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e170      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076f4:	2340      	movs	r3, #64	; 0x40
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e16c      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80076fc:	2380      	movs	r3, #128	; 0x80
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e168      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <UART_SetConfig+0x348>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d142      	bne.n	8007794 <UART_SetConfig+0x364>
 800770e:	4b16      	ldr	r3, [pc, #88]	; (8007768 <UART_SetConfig+0x338>)
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b05      	cmp	r3, #5
 8007718:	d838      	bhi.n	800778c <UART_SetConfig+0x35c>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <UART_SetConfig+0x2f0>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007739 	.word	0x08007739
 8007724:	08007741 	.word	0x08007741
 8007728:	08007749 	.word	0x08007749
 800772c:	08007751 	.word	0x08007751
 8007730:	0800777d 	.word	0x0800777d
 8007734:	08007785 	.word	0x08007785
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773e:	e14a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e146      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e142      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e13e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007758:	cfff69f3 	.word	0xcfff69f3
 800775c:	58000c00 	.word	0x58000c00
 8007760:	11fff4ff 	.word	0x11fff4ff
 8007764:	40011000 	.word	0x40011000
 8007768:	58024400 	.word	0x58024400
 800776c:	40004400 	.word	0x40004400
 8007770:	40004800 	.word	0x40004800
 8007774:	40004c00 	.word	0x40004c00
 8007778:	40005000 	.word	0x40005000
 800777c:	2320      	movs	r3, #32
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e128      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e124      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800778c:	2380      	movs	r3, #128	; 0x80
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007792:	e120      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4acb      	ldr	r2, [pc, #812]	; (8007ac8 <UART_SetConfig+0x698>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d176      	bne.n	800788c <UART_SetConfig+0x45c>
 800779e:	4bcb      	ldr	r3, [pc, #812]	; (8007acc <UART_SetConfig+0x69c>)
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a6:	2b28      	cmp	r3, #40	; 0x28
 80077a8:	d86c      	bhi.n	8007884 <UART_SetConfig+0x454>
 80077aa:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <UART_SetConfig+0x380>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	08007855 	.word	0x08007855
 80077b4:	08007885 	.word	0x08007885
 80077b8:	08007885 	.word	0x08007885
 80077bc:	08007885 	.word	0x08007885
 80077c0:	08007885 	.word	0x08007885
 80077c4:	08007885 	.word	0x08007885
 80077c8:	08007885 	.word	0x08007885
 80077cc:	08007885 	.word	0x08007885
 80077d0:	0800785d 	.word	0x0800785d
 80077d4:	08007885 	.word	0x08007885
 80077d8:	08007885 	.word	0x08007885
 80077dc:	08007885 	.word	0x08007885
 80077e0:	08007885 	.word	0x08007885
 80077e4:	08007885 	.word	0x08007885
 80077e8:	08007885 	.word	0x08007885
 80077ec:	08007885 	.word	0x08007885
 80077f0:	08007865 	.word	0x08007865
 80077f4:	08007885 	.word	0x08007885
 80077f8:	08007885 	.word	0x08007885
 80077fc:	08007885 	.word	0x08007885
 8007800:	08007885 	.word	0x08007885
 8007804:	08007885 	.word	0x08007885
 8007808:	08007885 	.word	0x08007885
 800780c:	08007885 	.word	0x08007885
 8007810:	0800786d 	.word	0x0800786d
 8007814:	08007885 	.word	0x08007885
 8007818:	08007885 	.word	0x08007885
 800781c:	08007885 	.word	0x08007885
 8007820:	08007885 	.word	0x08007885
 8007824:	08007885 	.word	0x08007885
 8007828:	08007885 	.word	0x08007885
 800782c:	08007885 	.word	0x08007885
 8007830:	08007875 	.word	0x08007875
 8007834:	08007885 	.word	0x08007885
 8007838:	08007885 	.word	0x08007885
 800783c:	08007885 	.word	0x08007885
 8007840:	08007885 	.word	0x08007885
 8007844:	08007885 	.word	0x08007885
 8007848:	08007885 	.word	0x08007885
 800784c:	08007885 	.word	0x08007885
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e0bc      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e0b8      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e0b4      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e0b0      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787a:	e0ac      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007882:	e0a8      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e0a4      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a8f      	ldr	r2, [pc, #572]	; (8007ad0 <UART_SetConfig+0x6a0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x4c8>
 8007896:	4b8d      	ldr	r3, [pc, #564]	; (8007acc <UART_SetConfig+0x69c>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x4c0>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x478>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e086      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e082      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e07e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e07a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e076      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e072      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e06e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a75      	ldr	r2, [pc, #468]	; (8007ad4 <UART_SetConfig+0x6a4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d130      	bne.n	8007964 <UART_SetConfig+0x534>
 8007902:	4b72      	ldr	r3, [pc, #456]	; (8007acc <UART_SetConfig+0x69c>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d826      	bhi.n	800795c <UART_SetConfig+0x52c>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x4e4>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e050      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e04c      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e048      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e044      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e040      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e03c      	b.n	80079d6 <UART_SetConfig+0x5a6>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e038      	b.n	80079d6 <UART_SetConfig+0x5a6>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a5b      	ldr	r2, [pc, #364]	; (8007ad8 <UART_SetConfig+0x6a8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d130      	bne.n	80079d0 <UART_SetConfig+0x5a0>
 800796e:	4b57      	ldr	r3, [pc, #348]	; (8007acc <UART_SetConfig+0x69c>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b05      	cmp	r3, #5
 8007978:	d826      	bhi.n	80079c8 <UART_SetConfig+0x598>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0x550>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007999 	.word	0x08007999
 8007984:	080079a1 	.word	0x080079a1
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079c1 	.word	0x080079c1
 8007998:	2302      	movs	r3, #2
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e01a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e016      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e012      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b6:	e00e      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079b8:	2320      	movs	r3, #32
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e00a      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c6:	e006      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ce:	e002      	b.n	80079d6 <UART_SetConfig+0x5a6>
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <UART_SetConfig+0x6a8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	f040 80f8 	bne.w	8007bd2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	dc46      	bgt.n	8007a78 <UART_SetConfig+0x648>
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	f2c0 8082 	blt.w	8007af4 <UART_SetConfig+0x6c4>
 80079f0:	3b02      	subs	r3, #2
 80079f2:	2b1e      	cmp	r3, #30
 80079f4:	d87e      	bhi.n	8007af4 <UART_SetConfig+0x6c4>
 80079f6:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <UART_SetConfig+0x5cc>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a7f 	.word	0x08007a7f
 8007a00:	08007af5 	.word	0x08007af5
 8007a04:	08007a87 	.word	0x08007a87
 8007a08:	08007af5 	.word	0x08007af5
 8007a0c:	08007af5 	.word	0x08007af5
 8007a10:	08007af5 	.word	0x08007af5
 8007a14:	08007a97 	.word	0x08007a97
 8007a18:	08007af5 	.word	0x08007af5
 8007a1c:	08007af5 	.word	0x08007af5
 8007a20:	08007af5 	.word	0x08007af5
 8007a24:	08007af5 	.word	0x08007af5
 8007a28:	08007af5 	.word	0x08007af5
 8007a2c:	08007af5 	.word	0x08007af5
 8007a30:	08007af5 	.word	0x08007af5
 8007a34:	08007aa7 	.word	0x08007aa7
 8007a38:	08007af5 	.word	0x08007af5
 8007a3c:	08007af5 	.word	0x08007af5
 8007a40:	08007af5 	.word	0x08007af5
 8007a44:	08007af5 	.word	0x08007af5
 8007a48:	08007af5 	.word	0x08007af5
 8007a4c:	08007af5 	.word	0x08007af5
 8007a50:	08007af5 	.word	0x08007af5
 8007a54:	08007af5 	.word	0x08007af5
 8007a58:	08007af5 	.word	0x08007af5
 8007a5c:	08007af5 	.word	0x08007af5
 8007a60:	08007af5 	.word	0x08007af5
 8007a64:	08007af5 	.word	0x08007af5
 8007a68:	08007af5 	.word	0x08007af5
 8007a6c:	08007af5 	.word	0x08007af5
 8007a70:	08007af5 	.word	0x08007af5
 8007a74:	08007ae7 	.word	0x08007ae7
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	d037      	beq.n	8007aec <UART_SetConfig+0x6bc>
 8007a7c:	e03a      	b.n	8007af4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a7e:	f7fe fba1 	bl	80061c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a84:	e03c      	b.n	8007b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fbb0 	bl	80061f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a94:	e034      	b.n	8007b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a96:	f107 0318 	add.w	r3, r7, #24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fcfc 	bl	8006498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aa4:	e02c      	b.n	8007b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <UART_SetConfig+0x69c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <UART_SetConfig+0x69c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	4a07      	ldr	r2, [pc, #28]	; (8007adc <UART_SetConfig+0x6ac>)
 8007abe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ac4:	e01c      	b.n	8007b00 <UART_SetConfig+0x6d0>
 8007ac6:	bf00      	nop
 8007ac8:	40011400 	.word	0x40011400
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	40007800 	.word	0x40007800
 8007ad4:	40007c00 	.word	0x40007c00
 8007ad8:	58000c00 	.word	0x58000c00
 8007adc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ae0:	4b9d      	ldr	r3, [pc, #628]	; (8007d58 <UART_SetConfig+0x928>)
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae4:	e00c      	b.n	8007b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ae6:	4b9d      	ldr	r3, [pc, #628]	; (8007d5c <UART_SetConfig+0x92c>)
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aea:	e009      	b.n	8007b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af2:	e005      	b.n	8007b00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007afe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 81de 	beq.w	8007ec4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	4a94      	ldr	r2, [pc, #592]	; (8007d60 <UART_SetConfig+0x930>)
 8007b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d305      	bcc.n	8007b38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d903      	bls.n	8007b40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b3e:	e1c1      	b.n	8007ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	2200      	movs	r2, #0
 8007b44:	60bb      	str	r3, [r7, #8]
 8007b46:	60fa      	str	r2, [r7, #12]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	4a84      	ldr	r2, [pc, #528]	; (8007d60 <UART_SetConfig+0x930>)
 8007b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2200      	movs	r2, #0
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b62:	f7f8 fbb9 	bl	80002d8 <__aeabi_uldivmod>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	020b      	lsls	r3, r1, #8
 8007b78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b7c:	0202      	lsls	r2, r0, #8
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	6849      	ldr	r1, [r1, #4]
 8007b82:	0849      	lsrs	r1, r1, #1
 8007b84:	2000      	movs	r0, #0
 8007b86:	460c      	mov	r4, r1
 8007b88:	4605      	mov	r5, r0
 8007b8a:	eb12 0804 	adds.w	r8, r2, r4
 8007b8e:	eb43 0905 	adc.w	r9, r3, r5
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	469a      	mov	sl, r3
 8007b9a:	4693      	mov	fp, r2
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 fb98 	bl	80002d8 <__aeabi_uldivmod>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4613      	mov	r3, r2
 8007bae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb6:	d308      	bcc.n	8007bca <UART_SetConfig+0x79a>
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bbe:	d204      	bcs.n	8007bca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	e17c      	b.n	8007ec4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bd0:	e178      	b.n	8007ec4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bda:	f040 80c5 	bne.w	8007d68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	dc48      	bgt.n	8007c78 <UART_SetConfig+0x848>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	db7b      	blt.n	8007ce2 <UART_SetConfig+0x8b2>
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d879      	bhi.n	8007ce2 <UART_SetConfig+0x8b2>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x7c4>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c7f 	.word	0x08007c7f
 8007bf8:	08007c87 	.word	0x08007c87
 8007bfc:	08007ce3 	.word	0x08007ce3
 8007c00:	08007ce3 	.word	0x08007ce3
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007ce3 	.word	0x08007ce3
 8007c0c:	08007ce3 	.word	0x08007ce3
 8007c10:	08007ce3 	.word	0x08007ce3
 8007c14:	08007c9f 	.word	0x08007c9f
 8007c18:	08007ce3 	.word	0x08007ce3
 8007c1c:	08007ce3 	.word	0x08007ce3
 8007c20:	08007ce3 	.word	0x08007ce3
 8007c24:	08007ce3 	.word	0x08007ce3
 8007c28:	08007ce3 	.word	0x08007ce3
 8007c2c:	08007ce3 	.word	0x08007ce3
 8007c30:	08007ce3 	.word	0x08007ce3
 8007c34:	08007caf 	.word	0x08007caf
 8007c38:	08007ce3 	.word	0x08007ce3
 8007c3c:	08007ce3 	.word	0x08007ce3
 8007c40:	08007ce3 	.word	0x08007ce3
 8007c44:	08007ce3 	.word	0x08007ce3
 8007c48:	08007ce3 	.word	0x08007ce3
 8007c4c:	08007ce3 	.word	0x08007ce3
 8007c50:	08007ce3 	.word	0x08007ce3
 8007c54:	08007ce3 	.word	0x08007ce3
 8007c58:	08007ce3 	.word	0x08007ce3
 8007c5c:	08007ce3 	.word	0x08007ce3
 8007c60:	08007ce3 	.word	0x08007ce3
 8007c64:	08007ce3 	.word	0x08007ce3
 8007c68:	08007ce3 	.word	0x08007ce3
 8007c6c:	08007ce3 	.word	0x08007ce3
 8007c70:	08007ce3 	.word	0x08007ce3
 8007c74:	08007cd5 	.word	0x08007cd5
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d02e      	beq.n	8007cda <UART_SetConfig+0x8aa>
 8007c7c:	e031      	b.n	8007ce2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c7e:	f7fd fb13 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8007c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c84:	e033      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c86:	f7fd fb25 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8007c8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c8c:	e02f      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe faac 	bl	80061f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c9c:	e027      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c9e:	f107 0318 	add.w	r3, r7, #24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fbf8 	bl	8006498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cac:	e01f      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cae:	4b2d      	ldr	r3, [pc, #180]	; (8007d64 <UART_SetConfig+0x934>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cba:	4b2a      	ldr	r3, [pc, #168]	; (8007d64 <UART_SetConfig+0x934>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	4a24      	ldr	r2, [pc, #144]	; (8007d58 <UART_SetConfig+0x928>)
 8007cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ccc:	e00f      	b.n	8007cee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cce:	4b22      	ldr	r3, [pc, #136]	; (8007d58 <UART_SetConfig+0x928>)
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd2:	e00c      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cd4:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <UART_SetConfig+0x92c>)
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd8:	e009      	b.n	8007cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce0:	e005      	b.n	8007cee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80e7 	beq.w	8007ec4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <UART_SetConfig+0x930>)
 8007cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d08:	005a      	lsls	r2, r3, #1
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	441a      	add	r2, r3
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b0f      	cmp	r3, #15
 8007d20:	d916      	bls.n	8007d50 <UART_SetConfig+0x920>
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d212      	bcs.n	8007d50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f023 030f 	bic.w	r3, r3, #15
 8007d32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d42:	4313      	orrs	r3, r2
 8007d44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e0b9      	b.n	8007ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d56:	e0b5      	b.n	8007ec4 <UART_SetConfig+0xa94>
 8007d58:	03d09000 	.word	0x03d09000
 8007d5c:	003d0900 	.word	0x003d0900
 8007d60:	08008ae4 	.word	0x08008ae4
 8007d64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	dc49      	bgt.n	8007e04 <UART_SetConfig+0x9d4>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db7c      	blt.n	8007e6e <UART_SetConfig+0xa3e>
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	d87a      	bhi.n	8007e6e <UART_SetConfig+0xa3e>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0x950>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007e0b 	.word	0x08007e0b
 8007d84:	08007e13 	.word	0x08007e13
 8007d88:	08007e6f 	.word	0x08007e6f
 8007d8c:	08007e6f 	.word	0x08007e6f
 8007d90:	08007e1b 	.word	0x08007e1b
 8007d94:	08007e6f 	.word	0x08007e6f
 8007d98:	08007e6f 	.word	0x08007e6f
 8007d9c:	08007e6f 	.word	0x08007e6f
 8007da0:	08007e2b 	.word	0x08007e2b
 8007da4:	08007e6f 	.word	0x08007e6f
 8007da8:	08007e6f 	.word	0x08007e6f
 8007dac:	08007e6f 	.word	0x08007e6f
 8007db0:	08007e6f 	.word	0x08007e6f
 8007db4:	08007e6f 	.word	0x08007e6f
 8007db8:	08007e6f 	.word	0x08007e6f
 8007dbc:	08007e6f 	.word	0x08007e6f
 8007dc0:	08007e3b 	.word	0x08007e3b
 8007dc4:	08007e6f 	.word	0x08007e6f
 8007dc8:	08007e6f 	.word	0x08007e6f
 8007dcc:	08007e6f 	.word	0x08007e6f
 8007dd0:	08007e6f 	.word	0x08007e6f
 8007dd4:	08007e6f 	.word	0x08007e6f
 8007dd8:	08007e6f 	.word	0x08007e6f
 8007ddc:	08007e6f 	.word	0x08007e6f
 8007de0:	08007e6f 	.word	0x08007e6f
 8007de4:	08007e6f 	.word	0x08007e6f
 8007de8:	08007e6f 	.word	0x08007e6f
 8007dec:	08007e6f 	.word	0x08007e6f
 8007df0:	08007e6f 	.word	0x08007e6f
 8007df4:	08007e6f 	.word	0x08007e6f
 8007df8:	08007e6f 	.word	0x08007e6f
 8007dfc:	08007e6f 	.word	0x08007e6f
 8007e00:	08007e61 	.word	0x08007e61
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d02e      	beq.n	8007e66 <UART_SetConfig+0xa36>
 8007e08:	e031      	b.n	8007e6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0a:	f7fd fa4d 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8007e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e10:	e033      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e12:	f7fd fa5f 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 8007e16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e18:	e02f      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe f9e6 	bl	80061f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e28:	e027      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e2a:	f107 0318 	add.w	r3, r7, #24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fb32 	bl	8006498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e38:	e01f      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ef0 <UART_SetConfig+0xac0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e46:	4b2a      	ldr	r3, [pc, #168]	; (8007ef0 <UART_SetConfig+0xac0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	08db      	lsrs	r3, r3, #3
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	4a28      	ldr	r2, [pc, #160]	; (8007ef4 <UART_SetConfig+0xac4>)
 8007e52:	fa22 f303 	lsr.w	r3, r2, r3
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e58:	e00f      	b.n	8007e7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e5a:	4b26      	ldr	r3, [pc, #152]	; (8007ef4 <UART_SetConfig+0xac4>)
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5e:	e00c      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e60:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <UART_SetConfig+0xac8>)
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e64:	e009      	b.n	8007e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	e005      	b.n	8007e7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e78:	bf00      	nop
    }

    if (pclk != 0U)
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d021      	beq.n	8007ec4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <UART_SetConfig+0xacc>)
 8007e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	441a      	add	r2, r3
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	2b0f      	cmp	r3, #15
 8007ea8:	d909      	bls.n	8007ebe <UART_SetConfig+0xa8e>
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb0:	d205      	bcs.n	8007ebe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60da      	str	r2, [r3, #12]
 8007ebc:	e002      	b.n	8007ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ee0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3748      	adds	r7, #72	; 0x48
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eee:	bf00      	nop
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	03d09000 	.word	0x03d09000
 8007ef8:	003d0900 	.word	0x003d0900
 8007efc:	08008ae4 	.word	0x08008ae4

08007f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01a      	beq.n	8008016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ffe:	d10a      	bne.n	8008016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008054:	f7f8 ff9c 	bl	8000f90 <HAL_GetTick>
 8008058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10e      	bne.n	8008086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f82f 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e025      	b.n	80080d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b04      	cmp	r3, #4
 8008092:	d10e      	bne.n	80080b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f819 	bl	80080da <UART_WaitOnFlagUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e00f      	b.n	80080d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b09c      	sub	sp, #112	; 0x70
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ea:	e0a9      	b.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	f000 80a5 	beq.w	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f6:	f7f8 ff4b 	bl	8000f90 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <UART_WaitOnFlagUntilTimeout+0x32>
 8008106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008108:	2b00      	cmp	r3, #0
 800810a:	d140      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800811a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008120:	667b      	str	r3, [r7, #100]	; 0x64
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800812a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800812c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e6      	bne.n	800810c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	663b      	str	r3, [r7, #96]	; 0x60
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3308      	adds	r3, #8
 800815c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800815e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e069      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	d051      	beq.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081aa:	d149      	bne.n	8008240 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
 80081d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3308      	adds	r3, #8
 80081ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	613b      	str	r3, [r7, #16]
   return(result);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f023 0301 	bic.w	r3, r3, #1
 80081fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008208:	623a      	str	r2, [r7, #32]
 800820a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	69f9      	ldr	r1, [r7, #28]
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	61bb      	str	r3, [r7, #24]
   return(result);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e5      	bne.n	80081e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e010      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69da      	ldr	r2, [r3, #28]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4013      	ands	r3, r2
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	429a      	cmp	r2, r3
 800825c:	f43f af46 	beq.w	80080ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3770      	adds	r7, #112	; 0x70
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b096      	sub	sp, #88	; 0x58
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2222      	movs	r2, #34	; 0x22
 8008294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d02c      	beq.n	80082fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a4:	4a42      	ldr	r2, [pc, #264]	; (80083b0 <UART_Start_Receive_DMA+0x144>)
 80082a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ac:	4a41      	ldr	r2, [pc, #260]	; (80083b4 <UART_Start_Receive_DMA+0x148>)
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b4:	4a40      	ldr	r2, [pc, #256]	; (80083b8 <UART_Start_Receive_DMA+0x14c>)
 80082b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082bc:	2200      	movs	r2, #0
 80082be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	4619      	mov	r1, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d0:	461a      	mov	r2, r3
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	f7f9 fb80 	bl	80019d8 <HAL_DMA_Start_IT>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00d      	beq.n	80082fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2210      	movs	r2, #16
 80082e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e055      	b.n	80083a6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d018      	beq.n	800833c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831e:	657b      	str	r3, [r7, #84]	; 0x54
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008328:	64bb      	str	r3, [r7, #72]	; 0x48
 800832a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800832e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	653b      	str	r3, [r7, #80]	; 0x50
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800835c:	637a      	str	r2, [r7, #52]	; 0x34
 800835e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	613b      	str	r3, [r7, #16]
   return(result);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008390:	623a      	str	r2, [r7, #32]
 8008392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	6a3a      	ldr	r2, [r7, #32]
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	61bb      	str	r3, [r7, #24]
   return(result);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3758      	adds	r7, #88	; 0x58
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	080085bf 	.word	0x080085bf
 80083b4:	080086e1 	.word	0x080086e1
 80083b8:	08008719 	.word	0x08008719

080083bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b08f      	sub	sp, #60	; 0x3c
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e6      	bne.n	80083c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	60bb      	str	r3, [r7, #8]
   return(result);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800840c:	633b      	str	r3, [r7, #48]	; 0x30
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008416:	61ba      	str	r2, [r7, #24]
 8008418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6979      	ldr	r1, [r7, #20]
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	613b      	str	r3, [r7, #16]
   return(result);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e5      	bne.n	80083f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008432:	bf00      	nop
 8008434:	373c      	adds	r7, #60	; 0x3c
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
	...

08008440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b095      	sub	sp, #84	; 0x54
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008466:	643b      	str	r3, [r7, #64]	; 0x40
 8008468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800846c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	61fb      	str	r3, [r7, #28]
   return(result);
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	4b1e      	ldr	r3, [pc, #120]	; (8008508 <UART_EndRxTransfer+0xc8>)
 800848e:	4013      	ands	r3, r2
 8008490:	64bb      	str	r3, [r7, #72]	; 0x48
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800849a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d118      	bne.n	80084e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	647b      	str	r3, [r7, #68]	; 0x44
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6979      	ldr	r1, [r7, #20]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	613b      	str	r3, [r7, #16]
   return(result);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084fc:	bf00      	nop
 80084fe:	3754      	adds	r7, #84	; 0x54
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	effffffe 	.word	0xeffffffe

0800850c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b090      	sub	sp, #64	; 0x40
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008522:	d037      	beq.n	8008594 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	623b      	str	r3, [r7, #32]
   return(result);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008542:	63bb      	str	r3, [r7, #56]	; 0x38
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854c:	633a      	str	r2, [r7, #48]	; 0x30
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e5      	bne.n	800852c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60fb      	str	r3, [r7, #12]
   return(result);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
 8008576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	617b      	str	r3, [r7, #20]
   return(result);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008592:	e002      	b.n	800859a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008594:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008596:	f7fe ff0d 	bl	80073b4 <HAL_UART_TxCpltCallback>
}
 800859a:	bf00      	nop
 800859c:	3740      	adds	r7, #64	; 0x40
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7fe ff09 	bl	80073c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b09c      	sub	sp, #112	; 0x70
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d4:	d071      	beq.n	80086ba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80085d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d8:	2200      	movs	r2, #0
 80085da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80085fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800860a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	667b      	str	r3, [r7, #100]	; 0x64
 8008628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008630:	647a      	str	r2, [r7, #68]	; 0x44
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	623b      	str	r3, [r7, #32]
   return(result);
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865a:	663b      	str	r3, [r7, #96]	; 0x60
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008664:	633a      	str	r2, [r7, #48]	; 0x30
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800866a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d118      	bne.n	80086ba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	60fb      	str	r3, [r7, #12]
   return(result);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0310 	bic.w	r3, r3, #16
 800869c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	617b      	str	r3, [r7, #20]
   return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d107      	bne.n	80086d2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086c8:	4619      	mov	r1, r3
 80086ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086cc:	f7fe fea4 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086d0:	e002      	b.n	80086d8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80086d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086d4:	f7fe fe82 	bl	80073dc <HAL_UART_RxCpltCallback>
}
 80086d8:	bf00      	nop
 80086da:	3770      	adds	r7, #112	; 0x70
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d109      	bne.n	800870a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7fe fe88 	bl	8007418 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008708:	e002      	b.n	8008710 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7fe fe70 	bl	80073f0 <HAL_UART_RxHalfCpltCallback>
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008734:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008740:	2b80      	cmp	r3, #128	; 0x80
 8008742:	d109      	bne.n	8008758 <UART_DMAError+0x40>
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b21      	cmp	r3, #33	; 0x21
 8008748:	d106      	bne.n	8008758 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008752:	6978      	ldr	r0, [r7, #20]
 8008754:	f7ff fe32 	bl	80083bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d109      	bne.n	800877a <UART_DMAError+0x62>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b22      	cmp	r3, #34	; 0x22
 800876a:	d106      	bne.n	800877a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008774:	6978      	ldr	r0, [r7, #20]
 8008776:	f7ff fe63 	bl	8008440 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008780:	f043 0210 	orr.w	r2, r3, #16
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f7fe fe3a 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008790:	bf00      	nop
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7fe fe24 	bl	8007404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6979      	ldr	r1, [r7, #20]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	613b      	str	r3, [r7, #16]
   return(result);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e6      	bne.n	80087cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fe fdd1 	bl	80073b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_UARTEx_DisableFifoMode+0x16>
 8008868:	2302      	movs	r3, #2
 800886a:	e027      	b.n	80088bc <HAL_UARTEx_DisableFifoMode+0x66>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2224      	movs	r2, #36	; 0x24
 8008878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800889a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088dc:	2302      	movs	r3, #2
 80088de:	e02d      	b.n	800893c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2224      	movs	r2, #36	; 0x24
 80088ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0201 	bic.w	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f84f 	bl	80089c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008958:	2302      	movs	r3, #2
 800895a:	e02d      	b.n	80089b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2224      	movs	r2, #36	; 0x24
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0201 	bic.w	r2, r2, #1
 8008982:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f811 	bl	80089c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089e0:	e031      	b.n	8008a46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089e2:	2310      	movs	r3, #16
 80089e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089e6:	2310      	movs	r3, #16
 80089e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	0e5b      	lsrs	r3, r3, #25
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	0f5b      	lsrs	r3, r3, #29
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	7b3a      	ldrb	r2, [r7, #12]
 8008a0e:	4911      	ldr	r1, [pc, #68]	; (8008a54 <UARTEx_SetNbDataToProcess+0x94>)
 8008a10:	5c8a      	ldrb	r2, [r1, r2]
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a16:	7b3a      	ldrb	r2, [r7, #12]
 8008a18:	490f      	ldr	r1, [pc, #60]	; (8008a58 <UARTEx_SetNbDataToProcess+0x98>)
 8008a1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	7b7a      	ldrb	r2, [r7, #13]
 8008a2c:	4909      	ldr	r1, [pc, #36]	; (8008a54 <UARTEx_SetNbDataToProcess+0x94>)
 8008a2e:	5c8a      	ldrb	r2, [r1, r2]
 8008a30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a34:	7b7a      	ldrb	r2, [r7, #13]
 8008a36:	4908      	ldr	r1, [pc, #32]	; (8008a58 <UARTEx_SetNbDataToProcess+0x98>)
 8008a38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	08008afc 	.word	0x08008afc
 8008a58:	08008b04 	.word	0x08008b04

08008a5c <__libc_init_array>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4d0d      	ldr	r5, [pc, #52]	; (8008a94 <__libc_init_array+0x38>)
 8008a60:	4c0d      	ldr	r4, [pc, #52]	; (8008a98 <__libc_init_array+0x3c>)
 8008a62:	1b64      	subs	r4, r4, r5
 8008a64:	10a4      	asrs	r4, r4, #2
 8008a66:	2600      	movs	r6, #0
 8008a68:	42a6      	cmp	r6, r4
 8008a6a:	d109      	bne.n	8008a80 <__libc_init_array+0x24>
 8008a6c:	4d0b      	ldr	r5, [pc, #44]	; (8008a9c <__libc_init_array+0x40>)
 8008a6e:	4c0c      	ldr	r4, [pc, #48]	; (8008aa0 <__libc_init_array+0x44>)
 8008a70:	f000 f820 	bl	8008ab4 <_init>
 8008a74:	1b64      	subs	r4, r4, r5
 8008a76:	10a4      	asrs	r4, r4, #2
 8008a78:	2600      	movs	r6, #0
 8008a7a:	42a6      	cmp	r6, r4
 8008a7c:	d105      	bne.n	8008a8a <__libc_init_array+0x2e>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a84:	4798      	blx	r3
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7ee      	b.n	8008a68 <__libc_init_array+0xc>
 8008a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8e:	4798      	blx	r3
 8008a90:	3601      	adds	r6, #1
 8008a92:	e7f2      	b.n	8008a7a <__libc_init_array+0x1e>
 8008a94:	08008b14 	.word	0x08008b14
 8008a98:	08008b14 	.word	0x08008b14
 8008a9c:	08008b14 	.word	0x08008b14
 8008aa0:	08008b18 	.word	0x08008b18

08008aa4 <memset>:
 8008aa4:	4402      	add	r2, r0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d100      	bne.n	8008aae <memset+0xa>
 8008aac:	4770      	bx	lr
 8008aae:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab2:	e7f9      	b.n	8008aa8 <memset+0x4>

08008ab4 <_init>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr

08008ac0 <_fini>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr
