
H750_testUSART_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24002000  08008ae0  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a0  24002014  08008af4  00022014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240021b4  08008af4  000221b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022014  2**0
                  CONTENTS, READONLY
 10 .ramd1dma     0000000c  24000000  24000000  00030000  2**2
                  ALLOC
 11 .ramd1        00000000  240027b8  240027b8  00022042  2**0
                  CONTENTS
 12 .ramd2        00000000  30000000  30000000  00022042  2**0
                  CONTENTS
 13 .ramd3        00000000  38000000  38000000  00022042  2**0
                  CONTENTS
 14 .dtcm         00000000  20004000  20004000  00022042  2**0
                  CONTENTS
 15 .itcm         00000000  00000000  00000000  00022042  2**0
                  CONTENTS
 16 .debug_info   00012598  00000000  00000000  00022042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002266  00000000  00000000  000345da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b08  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000a30  00000000  00000000  00037348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00036353  00000000  00000000  00037d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00011800  00000000  00000000  0006e0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00157b7c  00000000  00000000  0007f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001d7447  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002c18  00000000  00000000  001d7498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24002014 	.word	0x24002014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008a78 	.word	0x08008a78

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002018 	.word	0x24002018
 80002d4:	08008a78 	.word	0x08008a78

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_DMA_Init+0x4c>)
 80005e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_DMA_Init+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_DMA_Init+0x4c>)
 80005f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	200b      	movs	r0, #11
 8000606:	f000 fdc6 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060a:	200b      	movs	r0, #11
 800060c:	f000 fddd 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	200c      	movs	r0, #12
 8000616:	f000 fdbe 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061a:	200c      	movs	r0, #12
 800061c:	f000 fdd5 	bl	80011ca <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58024400 	.word	0x58024400

0800062c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <MX_GPIO_Init+0x6c>)
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_GPIO_Init+0x6c>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	58024400 	.word	0x58024400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a2:	f000 f975 	bl	8000990 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a6:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <main+0x144>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <main+0x144>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
}
 80006d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d2:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <main+0x144>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <main+0x144>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
}
 80006e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e4:	f3bf 8f6f 	isb	sy
}
 80006e8:	e000      	b.n	80006ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ec:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <main+0x144>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d138      	bne.n	800076a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <main+0x144>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000700:	f3bf 8f4f 	dsb	sy
}
 8000704:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <main+0x144>)
 8000708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800070c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	0b5b      	lsrs	r3, r3, #13
 8000712:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000716:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000720:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	015a      	lsls	r2, r3, #5
 8000726:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000730:	492b      	ldr	r1, [pc, #172]	; (80007e0 <main+0x144>)
 8000732:	4313      	orrs	r3, r2
 8000734:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1ef      	bne.n	8000722 <main+0x86>
    } while(sets-- != 0U);
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	60ba      	str	r2, [r7, #8]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e5      	bne.n	8000718 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800074c:	f3bf 8f4f 	dsb	sy
}
 8000750:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <main+0x144>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <main+0x144>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800075e:	f3bf 8f4f 	dsb	sy
}
 8000762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
}
 8000768:	e000      	b.n	800076c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fb9a 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f842 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ff5a 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000778:	f7ff ff30 	bl	80005dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800077c:	f000 fa26 	bl	8000bcc <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  for(int i = 0 ; i < tx_size; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00b      	b.n	800079e <main+0x102>
  	bufSlaveTx[i] = i+8;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3308      	adds	r3, #8
 800078c:	b2d9      	uxtb	r1, r3
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <main+0x148>)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	4413      	add	r3, r2
 8000794:	460a      	mov	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < tx_size; i++) {
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <main+0x14c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4293      	cmp	r3, r2
 80007a8:	dbed      	blt.n	8000786 <main+0xea>
  }
  for(int i = 0 ; i < rx_size; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	e007      	b.n	80007c0 <main+0x124>
  	bufSlaveRx[i] = 0;
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <main+0x150>)
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < rx_size; i++) {
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	3301      	adds	r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <main+0x154>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	dbf1      	blt.n	80007b0 <main+0x114>
  }

 HAL_UART_Receive_DMA(&huart2, bufSlaveRx, rx_size);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <main+0x154>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	4905      	ldr	r1, [pc, #20]	; (80007ec <main+0x150>)
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <main+0x158>)
 80007d8:	f006 f9e4 	bl	8006ba4 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x140>
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00
 80007e4:	24000008 	.word	0x24000008
 80007e8:	24002001 	.word	0x24002001
 80007ec:	24000000 	.word	0x24000000
 80007f0:	24002000 	.word	0x24002000
 80007f4:	24002030 	.word	0x24002030

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09e      	sub	sp, #120	; 0x78
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000802:	224c      	movs	r2, #76	; 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f008 f92e 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f008 f927 	bl	8008a68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800081a:	2002      	movs	r0, #2
 800081c:	f003 fd58 	bl	80042d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b49      	ldr	r3, [pc, #292]	; (800094c <SystemClock_Config+0x154>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	4a48      	ldr	r2, [pc, #288]	; (800094c <SystemClock_Config+0x154>)
 800082a:	f023 0301 	bic.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000830:	4b46      	ldr	r3, [pc, #280]	; (800094c <SystemClock_Config+0x154>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <SystemClock_Config+0x158>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <SystemClock_Config+0x158>)
 8000840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <SystemClock_Config+0x158>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000852:	bf00      	nop
 8000854:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <SystemClock_Config+0x158>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d1f8      	bne.n	8000854 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <SystemClock_Config+0x15c>)
 8000864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000868:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <SystemClock_Config+0x15c>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <SystemClock_Config+0x15c>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <SystemClock_Config+0x158>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a31      	ldr	r2, [pc, #196]	; (8000950 <SystemClock_Config+0x158>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <SystemClock_Config+0x158>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <SystemClock_Config+0x154>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	4a2b      	ldr	r2, [pc, #172]	; (800094c <SystemClock_Config+0x154>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <SystemClock_Config+0x154>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b2:	bf00      	nop
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0x158>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c0:	d1f8      	bne.n	80008b4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d0:	2302      	movs	r3, #2
 80008d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008e8:	2308      	movs	r3, #8
 80008ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 fd23 	bl	8004344 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000904:	f000 f871 	bl	80009ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	233f      	movs	r3, #63	; 0x3f
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2303      	movs	r3, #3
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000914:	2308      	movs	r3, #8
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2104      	movs	r1, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f935 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800093c:	f000 f855 	bl	80009ea <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000940:	f004 fae4 	bl	8004f0c <HAL_RCC_EnableCSS>
}
 8000944:	bf00      	nop
 8000946:	3778      	adds	r7, #120	; 0x78
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	58000400 	.word	0x58000400
 8000950:	58024800 	.word	0x58024800
 8000954:	58024400 	.word	0x58024400

08000958 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////// UART2 callbacks ///////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_UART_RxCpltCallback+0x2c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d108      	bne.n	800097a <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Transmit_DMA(&huart2, bufSlaveTx, tx_size);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_UART_RxCpltCallback+0x30>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b29b      	uxth	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <HAL_UART_RxCpltCallback+0x34>)
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <HAL_UART_RxCpltCallback+0x2c>)
 8000974:	f006 f884 	bl	8006a80 <HAL_UART_Transmit_DMA>
		__NOP();
 8000978:	bf00      	nop
	}

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	24002030 	.word	0x24002030
 8000988:	24002001 	.word	0x24002001
 800098c:	24000008 	.word	0x24000008

08000990 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009a2:	f000 fc2d 	bl	8001200 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80009ae:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80009b2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 80009b4:	2304      	movs	r3, #4
 80009b6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009bc:	2300      	movs	r3, #0
 80009be:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009c0:	2303      	movs	r3, #3
 80009c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fc4a 	bl	8001270 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009dc:	2004      	movs	r0, #4
 80009de:	f000 fc27 	bl	8001230 <HAL_MPU_Enable>

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009ee:	b672      	cpsid	i
}
 80009f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x30>)
 80009fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x30>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x30>)
 8000a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	58024400 	.word	0x58024400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a2c:	f004 fc54 	bl	80052d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x8>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 fa86 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <DMA1_Stream0_IRQHandler+0x10>)
 8000a86:	f001 ff61 	bl	800294c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	240020c0 	.word	0x240020c0

08000a94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA1_Stream1_IRQHandler+0x10>)
 8000a9a:	f001 ff57 	bl	800294c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	24002138 	.word	0x24002138

08000aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART2_IRQHandler+0x10>)
 8000aae:	f006 f8cf 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24002030 	.word	0x24002030

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SystemInit+0xe4>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <SystemInit+0xe4>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad0:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <SystemInit+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d807      	bhi.n	8000aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <SystemInit+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <SystemInit+0xe8>)
 8000ae6:	f043 0307 	orr.w	r3, r3, #7
 8000aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <SystemInit+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <SystemInit+0xec>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <SystemInit+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <SystemInit+0xec>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <SystemInit+0xec>)
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <SystemInit+0xf0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <SystemInit+0xe8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <SystemInit+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 030f 	bic.w	r3, r3, #15
 8000b1e:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <SystemInit+0xe8>)
 8000b20:	f043 0307 	orr.w	r3, r3, #7
 8000b24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <SystemInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <SystemInit+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <SystemInit+0xec>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <SystemInit+0xec>)
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <SystemInit+0xf4>)
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <SystemInit+0xec>)
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <SystemInit+0xf8>)
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SystemInit+0xec>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <SystemInit+0xfc>)
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SystemInit+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <SystemInit+0xec>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <SystemInit+0xfc>)
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <SystemInit+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SystemInit+0xec>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0xfc>)
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SystemInit+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <SystemInit+0xec>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <SystemInit+0xec>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <SystemInit+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x100>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0x104>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <SystemInit+0x108>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <SystemInit+0x10c>)
 8000b90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	5c001000 	.word	0x5c001000
 8000bc0:	ffff0000 	.word	0xffff0000
 8000bc4:	51008108 	.word	0x51008108
 8000bc8:	52004000 	.word	0x52004000

08000bcc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c16:	f005 fee3 	bl	80069e0 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f7ff fee3 	bl	80009ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c28:	f007 fe30 	bl	800888c <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f7ff feda 	bl	80009ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c3a:	f007 fe65 	bl	8008908 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f7ff fed1 	bl	80009ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c4a:	f007 fde6 	bl	800881a <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f7ff fec9 	bl	80009ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	24002030 	.word	0x24002030
 8000c60:	40004400 	.word	0x40004400

08000c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ba      	sub	sp, #232	; 0xe8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	22bc      	movs	r2, #188	; 0xbc
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 feef 	bl	8008a68 <memset>
  if(uartHandle->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a68      	ldr	r2, [pc, #416]	; (8000e30 <HAL_UART_MspInit+0x1cc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	f040 80c9 	bne.w	8000e28 <HAL_UART_MspInit+0x1c4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fb33 	bl	8005310 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000cb0:	f7ff fe9b 	bl	80009ea <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cba:	4a5e      	ldr	r2, [pc, #376]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cc4:	4b5b      	ldr	r3, [pc, #364]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a56      	ldr	r2, [pc, #344]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf0:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <HAL_UART_MspInit+0x1d0>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4841      	ldr	r0, [pc, #260]	; (8000e38 <HAL_UART_MspInit+0x1d4>)
 8000d34:	f003 f91c 	bl	8003f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d50:	2307      	movs	r3, #7
 8000d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4837      	ldr	r0, [pc, #220]	; (8000e3c <HAL_UART_MspInit+0x1d8>)
 8000d5e:	f003 f907 	bl	8003f70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d64:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <HAL_UART_MspInit+0x1e0>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d6a:	222b      	movs	r2, #43	; 0x2b
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000da2:	4827      	ldr	r0, [pc, #156]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000da4:	f000 faa8 	bl	80012f8 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000dae:	f7ff fe1c 	bl	80009ea <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000db6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <HAL_UART_MspInit+0x1dc>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <HAL_UART_MspInit+0x1e8>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dc6:	222c      	movs	r2, #44	; 0x2c
 8000dc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dfc:	4812      	ldr	r0, [pc, #72]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000dfe:	f000 fa7b 	bl	80012f8 <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8000e08:	f7ff fdef 	bl	80009ea <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000e10:	679a      	str	r2, [r3, #120]	; 0x78
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_UART_MspInit+0x1e4>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2026      	movs	r0, #38	; 0x26
 8000e1e:	f000 f9ba 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e22:	2026      	movs	r0, #38	; 0x26
 8000e24:	f000 f9d1 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e28:	bf00      	nop
 8000e2a:	37e8      	adds	r7, #232	; 0xe8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004400 	.word	0x40004400
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020000 	.word	0x58020000
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	240020c0 	.word	0x240020c0
 8000e44:	40020010 	.word	0x40020010
 8000e48:	24002138 	.word	0x24002138
 8000e4c:	40020028 	.word	0x40020028

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff fe32 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f007 fdcf 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fc0b 	bl	800069c <main>
  bx  lr
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e8c:	24002000 	.word	0x24002000
  ldr r1, =_edata
 8000e90:	24002014 	.word	0x24002014
  ldr r2, =_sidata
 8000e94:	08008ae0 	.word	0x08008ae0
  ldr r2, =_sbss
 8000e98:	24002014 	.word	0x24002014
  ldr r4, =_ebss
 8000e9c:	240021b4 	.word	0x240021b4

08000ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC3_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f968 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb0:	f004 f83c 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_Init+0x68>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	4913      	ldr	r1, [pc, #76]	; (8000f10 <HAL_Init+0x6c>)
 8000ec2:	5ccb      	ldrb	r3, [r1, r3]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_Init+0x6c>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x70>)
 8000ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x74>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f814 	bl	8000f1c <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e002      	b.n	8000f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000efe:	f7ff fd79 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	08008a90 	.word	0x08008a90
 8000f14:	24002008 	.word	0x24002008
 8000f18:	24002004 	.word	0x24002004

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_InitTick+0x60>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e021      	b.n	8000f74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_InitTick+0x64>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_InitTick+0x60>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f94d 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f917 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x68>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24002010 	.word	0x24002010
 8000f80:	24002004 	.word	0x24002004
 8000f84:	2400200c 	.word	0x2400200c

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	24002010 	.word	0x24002010
 8000fac:	240021b0 	.word	0x240021b0

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	240021b0 	.word	0x240021b0

08000fc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetREVID+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	5c001000 	.word	0x5c001000

08000fe0 <__NVIC_SetPriorityGrouping>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	4313      	orrs	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x40>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	05fa0000 	.word	0x05fa0000

08001028 <__NVIC_GetPriorityGrouping>:
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff29 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff40 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff90 	bl	80010d4 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5f 	bl	8001080 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff33 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa4 	bl	800113c <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001204:	f3bf 8f5f 	dmb	sy
}
 8001208:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_MPU_Disable+0x28>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_MPU_Disable+0x28>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001214:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_MPU_Disable+0x2c>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	e000ed90 	.word	0xe000ed90

08001230 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_MPU_Enable+0x38>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MPU_Enable+0x3c>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_MPU_Enable+0x3c>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800124e:	f3bf 8f4f 	dsb	sy
}
 8001252:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001254:	f3bf 8f6f 	isb	sy
}
 8001258:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed90 	.word	0xe000ed90
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	785a      	ldrb	r2, [r3, #1]
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_MPU_ConfigRegion+0x84>)
 800127e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d029      	beq.n	80012dc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_MPU_ConfigRegion+0x84>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7adb      	ldrb	r3, [r3, #11]
 800129a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800129c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7a9b      	ldrb	r3, [r3, #10]
 80012a2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
 80012aa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7b9b      	ldrb	r3, [r3, #14]
 80012b2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7bdb      	ldrb	r3, [r3, #15]
 80012ba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a5b      	ldrb	r3, [r3, #9]
 80012c2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7a1b      	ldrb	r3, [r3, #8]
 80012ca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012cc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012da:	e005      	b.n	80012e8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_MPU_ConfigRegion+0x84>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_MPU_ConfigRegion+0x84>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed90 	.word	0xe000ed90

080012f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fe56 	bl	8000fb0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e316      	b.n	800193e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a66      	ldr	r2, [pc, #408]	; (80014b0 <HAL_DMA_Init+0x1b8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d04a      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_DMA_Init+0x1bc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d045      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a63      	ldr	r2, [pc, #396]	; (80014b8 <HAL_DMA_Init+0x1c0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d040      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a62      	ldr	r2, [pc, #392]	; (80014bc <HAL_DMA_Init+0x1c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d03b      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a60      	ldr	r2, [pc, #384]	; (80014c0 <HAL_DMA_Init+0x1c8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d036      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5f      	ldr	r2, [pc, #380]	; (80014c4 <HAL_DMA_Init+0x1cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d031      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a5d      	ldr	r2, [pc, #372]	; (80014c8 <HAL_DMA_Init+0x1d0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02c      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5c      	ldr	r2, [pc, #368]	; (80014cc <HAL_DMA_Init+0x1d4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d027      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5a      	ldr	r2, [pc, #360]	; (80014d0 <HAL_DMA_Init+0x1d8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d022      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a59      	ldr	r2, [pc, #356]	; (80014d4 <HAL_DMA_Init+0x1dc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d01d      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_DMA_Init+0x1e0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d018      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <HAL_DMA_Init+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_DMA_Init+0x1e8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00e      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <HAL_DMA_Init+0x1ec>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_DMA_Init+0x1f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_DMA_Init+0x1f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0xbc>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_DMA_Init+0xbe>
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 813b 	beq.w	8001632 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a37      	ldr	r2, [pc, #220]	; (80014b0 <HAL_DMA_Init+0x1b8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d04a      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <HAL_DMA_Init+0x1bc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d045      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_DMA_Init+0x1c0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d040      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a33      	ldr	r2, [pc, #204]	; (80014bc <HAL_DMA_Init+0x1c4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d03b      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <HAL_DMA_Init+0x1c8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d036      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <HAL_DMA_Init+0x1cc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d031      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <HAL_DMA_Init+0x1d0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02c      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <HAL_DMA_Init+0x1d4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d027      	beq.n	800146c <HAL_DMA_Init+0x174>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2b      	ldr	r2, [pc, #172]	; (80014d0 <HAL_DMA_Init+0x1d8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d022      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <HAL_DMA_Init+0x1dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d01d      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <HAL_DMA_Init+0x1e0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d018      	beq.n	800146c <HAL_DMA_Init+0x174>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_DMA_Init+0x1e4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <HAL_DMA_Init+0x1e8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00e      	beq.n	800146c <HAL_DMA_Init+0x174>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_DMA_Init+0x1ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d009      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <HAL_DMA_Init+0x1f0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d004      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_DMA_Init+0x1f4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d108      	bne.n	800147e <HAL_DMA_Init+0x186>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e007      	b.n	800148e <HAL_DMA_Init+0x196>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800148e:	e02f      	b.n	80014f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001490:	f7ff fd8e 	bl	8000fb0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b05      	cmp	r3, #5
 800149c:	d928      	bls.n	80014f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e246      	b.n	800193e <HAL_DMA_Init+0x646>
 80014b0:	40020010 	.word	0x40020010
 80014b4:	40020028 	.word	0x40020028
 80014b8:	40020040 	.word	0x40020040
 80014bc:	40020058 	.word	0x40020058
 80014c0:	40020070 	.word	0x40020070
 80014c4:	40020088 	.word	0x40020088
 80014c8:	400200a0 	.word	0x400200a0
 80014cc:	400200b8 	.word	0x400200b8
 80014d0:	40020410 	.word	0x40020410
 80014d4:	40020428 	.word	0x40020428
 80014d8:	40020440 	.word	0x40020440
 80014dc:	40020458 	.word	0x40020458
 80014e0:	40020470 	.word	0x40020470
 80014e4:	40020488 	.word	0x40020488
 80014e8:	400204a0 	.word	0x400204a0
 80014ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1c8      	bne.n	8001490 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4b83      	ldr	r3, [pc, #524]	; (8001718 <HAL_DMA_Init+0x420>)
 800150a:	4013      	ands	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001516:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	2b04      	cmp	r3, #4
 8001542:	d107      	bne.n	8001554 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4313      	orrs	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4313      	orrs	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001554:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_DMA_Init+0x424>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b71      	ldr	r3, [pc, #452]	; (8001720 <HAL_DMA_Init+0x428>)
 800155a:	4013      	ands	r3, r2
 800155c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001560:	d328      	bcc.n	80015b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b28      	cmp	r3, #40	; 0x28
 8001568:	d903      	bls.n	8001572 <HAL_DMA_Init+0x27a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b2e      	cmp	r3, #46	; 0x2e
 8001570:	d917      	bls.n	80015a2 <HAL_DMA_Init+0x2aa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b3e      	cmp	r3, #62	; 0x3e
 8001578:	d903      	bls.n	8001582 <HAL_DMA_Init+0x28a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b42      	cmp	r3, #66	; 0x42
 8001580:	d90f      	bls.n	80015a2 <HAL_DMA_Init+0x2aa>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b46      	cmp	r3, #70	; 0x46
 8001588:	d903      	bls.n	8001592 <HAL_DMA_Init+0x29a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b48      	cmp	r3, #72	; 0x48
 8001590:	d907      	bls.n	80015a2 <HAL_DMA_Init+0x2aa>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b4e      	cmp	r3, #78	; 0x4e
 8001598:	d905      	bls.n	80015a6 <HAL_DMA_Init+0x2ae>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b52      	cmp	r3, #82	; 0x52
 80015a0:	d801      	bhi.n	80015a6 <HAL_DMA_Init+0x2ae>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_Init+0x2b0>
 80015a6:	2300      	movs	r3, #0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f023 0307 	bic.w	r3, r3, #7
 80015ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d117      	bne.n	800160e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f002 fb33 	bl	8003c5c <DMA_CheckFifoParam>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2240      	movs	r2, #64	; 0x40
 8001600:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e197      	b.n	800193e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f002 fa6e 	bl	8003af8 <DMA_CalcBaseAndBitshift>
 800161c:	4603      	mov	r3, r0
 800161e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	223f      	movs	r2, #63	; 0x3f
 800162a:	409a      	lsls	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e0cd      	b.n	80017ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <HAL_DMA_Init+0x42c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d022      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a39      	ldr	r2, [pc, #228]	; (8001728 <HAL_DMA_Init+0x430>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01d      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_DMA_Init+0x434>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d018      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a36      	ldr	r2, [pc, #216]	; (8001730 <HAL_DMA_Init+0x438>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a35      	ldr	r2, [pc, #212]	; (8001734 <HAL_DMA_Init+0x43c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00e      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a33      	ldr	r2, [pc, #204]	; (8001738 <HAL_DMA_Init+0x440>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d009      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_DMA_Init+0x444>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d004      	beq.n	8001682 <HAL_DMA_Init+0x38a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_DMA_Init+0x448>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Init+0x38e>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_DMA_Init+0x390>
 8001686:	2300      	movs	r3, #0
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_DMA_Init+0x42c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d021      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_DMA_Init+0x430>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01c      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_DMA_Init+0x434>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d017      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_DMA_Init+0x438>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_DMA_Init+0x43c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00d      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <HAL_DMA_Init+0x440>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d008      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_DMA_Init+0x444>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d003      	beq.n	80016dc <HAL_DMA_Init+0x3e4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_DMA_Init+0x448>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_DMA_Init+0x44c>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b40      	cmp	r3, #64	; 0x40
 8001704:	d020      	beq.n	8001748 <HAL_DMA_Init+0x450>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b80      	cmp	r3, #128	; 0x80
 800170c:	d102      	bne.n	8001714 <HAL_DMA_Init+0x41c>
 800170e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001712:	e01a      	b.n	800174a <HAL_DMA_Init+0x452>
 8001714:	2300      	movs	r3, #0
 8001716:	e018      	b.n	800174a <HAL_DMA_Init+0x452>
 8001718:	fe10803f 	.word	0xfe10803f
 800171c:	5c001000 	.word	0x5c001000
 8001720:	ffff0000 	.word	0xffff0000
 8001724:	58025408 	.word	0x58025408
 8001728:	5802541c 	.word	0x5802541c
 800172c:	58025430 	.word	0x58025430
 8001730:	58025444 	.word	0x58025444
 8001734:	58025458 	.word	0x58025458
 8001738:	5802546c 	.word	0x5802546c
 800173c:	58025480 	.word	0x58025480
 8001740:	58025494 	.word	0x58025494
 8001744:	fffe000f 	.word	0xfffe000f
 8001748:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68d2      	ldr	r2, [r2, #12]
 800174e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001778:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <HAL_DMA_Init+0x650>)
 8001790:	4413      	add	r3, r2
 8001792:	4a6e      	ldr	r2, [pc, #440]	; (800194c <HAL_DMA_Init+0x654>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	009a      	lsls	r2, r3, #2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f002 f9a9 	bl	8003af8 <DMA_CalcBaseAndBitshift>
 80017a6:	4603      	mov	r3, r0
 80017a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	2201      	movs	r2, #1
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	e008      	b.n	80017ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2240      	movs	r2, #64	; 0x40
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0b7      	b.n	800193e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <HAL_DMA_Init+0x658>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d072      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_DMA_Init+0x65c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d06d      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <HAL_DMA_Init+0x660>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d068      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_DMA_Init+0x664>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d063      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a59      	ldr	r2, [pc, #356]	; (8001960 <HAL_DMA_Init+0x668>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_DMA_Init+0x66c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d059      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_DMA_Init+0x670>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d054      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_DMA_Init+0x674>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d04f      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a53      	ldr	r2, [pc, #332]	; (8001970 <HAL_DMA_Init+0x678>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04a      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_DMA_Init+0x67c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_DMA_Init+0x680>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d040      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_DMA_Init+0x684>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d03b      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a4d      	ldr	r2, [pc, #308]	; (8001980 <HAL_DMA_Init+0x688>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d036      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_DMA_Init+0x68c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4a      	ldr	r2, [pc, #296]	; (8001988 <HAL_DMA_Init+0x690>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d02c      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_DMA_Init+0x694>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d027      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_DMA_Init+0x698>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a45      	ldr	r2, [pc, #276]	; (8001994 <HAL_DMA_Init+0x69c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01d      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <HAL_DMA_Init+0x6a0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d018      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a42      	ldr	r2, [pc, #264]	; (800199c <HAL_DMA_Init+0x6a4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a41      	ldr	r2, [pc, #260]	; (80019a0 <HAL_DMA_Init+0x6a8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00e      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_DMA_Init+0x6ac>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_DMA_Init+0x6b0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <HAL_DMA_Init+0x6b4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Init+0x5ca>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_DMA_Init+0x5cc>
 80018c2:	2300      	movs	r3, #0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d032      	beq.n	800192e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f002 fa43 	bl	8003d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b80      	cmp	r3, #128	; 0x80
 80018d4:	d102      	bne.n	80018dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_DMA_Init+0x624>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d80c      	bhi.n	800191c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f002 fac0 	bl	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	e008      	b.n	800192e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	a7fdabf8 	.word	0xa7fdabf8
 800194c:	cccccccd 	.word	0xcccccccd
 8001950:	40020010 	.word	0x40020010
 8001954:	40020028 	.word	0x40020028
 8001958:	40020040 	.word	0x40020040
 800195c:	40020058 	.word	0x40020058
 8001960:	40020070 	.word	0x40020070
 8001964:	40020088 	.word	0x40020088
 8001968:	400200a0 	.word	0x400200a0
 800196c:	400200b8 	.word	0x400200b8
 8001970:	40020410 	.word	0x40020410
 8001974:	40020428 	.word	0x40020428
 8001978:	40020440 	.word	0x40020440
 800197c:	40020458 	.word	0x40020458
 8001980:	40020470 	.word	0x40020470
 8001984:	40020488 	.word	0x40020488
 8001988:	400204a0 	.word	0x400204a0
 800198c:	400204b8 	.word	0x400204b8
 8001990:	58025408 	.word	0x58025408
 8001994:	5802541c 	.word	0x5802541c
 8001998:	58025430 	.word	0x58025430
 800199c:	58025444 	.word	0x58025444
 80019a0:	58025458 	.word	0x58025458
 80019a4:	5802546c 	.word	0x5802546c
 80019a8:	58025480 	.word	0x58025480
 80019ac:	58025494 	.word	0x58025494

080019b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e226      	b.n	8001e1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Start_IT+0x2a>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e21f      	b.n	8001e1a <HAL_DMA_Start_IT+0x46a>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	f040 820a 	bne.w	8001e04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a68      	ldr	r2, [pc, #416]	; (8001ba4 <HAL_DMA_Start_IT+0x1f4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04a      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <HAL_DMA_Start_IT+0x1f8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d045      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a65      	ldr	r2, [pc, #404]	; (8001bac <HAL_DMA_Start_IT+0x1fc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d040      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <HAL_DMA_Start_IT+0x200>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d03b      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <HAL_DMA_Start_IT+0x204>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d036      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_DMA_Start_IT+0x208>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d031      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_DMA_Start_IT+0x20c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d02c      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_DMA_Start_IT+0x210>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d027      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_DMA_Start_IT+0x214>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d022      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_DMA_Start_IT+0x218>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <HAL_DMA_Start_IT+0x21c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <HAL_DMA_Start_IT+0x220>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a56      	ldr	r2, [pc, #344]	; (8001bd4 <HAL_DMA_Start_IT+0x224>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_DMA_Start_IT+0x228>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d009      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <HAL_DMA_Start_IT+0x22c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_DMA_Start_IT+0xee>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_DMA_Start_IT+0x230>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <HAL_DMA_Start_IT+0x100>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_DMA_Start_IT+0x110>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f001 fe6a 	bl	80037a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_DMA_Start_IT+0x1f4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d04a      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_DMA_Start_IT+0x1f8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d045      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_DMA_Start_IT+0x1fc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d040      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_DMA_Start_IT+0x200>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d03b      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_DMA_Start_IT+0x204>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d036      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_DMA_Start_IT+0x208>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d031      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_DMA_Start_IT+0x20c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02c      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_DMA_Start_IT+0x210>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d027      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_DMA_Start_IT+0x214>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_DMA_Start_IT+0x218>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d01d      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_DMA_Start_IT+0x21c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_DMA_Start_IT+0x220>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_DMA_Start_IT+0x224>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_DMA_Start_IT+0x228>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DMA_Start_IT+0x22c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_DMA_Start_IT+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_DMA_Start_IT+0x230>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA_Start_IT+0x1c0>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_Start_IT+0x1c2>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 021e 	bic.w	r2, r3, #30
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0216 	orr.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03e      	beq.n	8001c10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0208 	orr.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e035      	b.n	8001c10 <HAL_DMA_Start_IT+0x260>
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	40020070 	.word	0x40020070
 8001bb8:	40020088 	.word	0x40020088
 8001bbc:	400200a0 	.word	0x400200a0
 8001bc0:	400200b8 	.word	0x400200b8
 8001bc4:	40020410 	.word	0x40020410
 8001bc8:	40020428 	.word	0x40020428
 8001bcc:	40020440 	.word	0x40020440
 8001bd0:	40020458 	.word	0x40020458
 8001bd4:	40020470 	.word	0x40020470
 8001bd8:	40020488 	.word	0x40020488
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 020e 	bic.w	r2, r3, #14
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 020a 	orr.w	r2, r2, #10
 8001bf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0204 	orr.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a83      	ldr	r2, [pc, #524]	; (8001e24 <HAL_DMA_Start_IT+0x474>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d072      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a82      	ldr	r2, [pc, #520]	; (8001e28 <HAL_DMA_Start_IT+0x478>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d06d      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a80      	ldr	r2, [pc, #512]	; (8001e2c <HAL_DMA_Start_IT+0x47c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d068      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7f      	ldr	r2, [pc, #508]	; (8001e30 <HAL_DMA_Start_IT+0x480>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d063      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7d      	ldr	r2, [pc, #500]	; (8001e34 <HAL_DMA_Start_IT+0x484>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d05e      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <HAL_DMA_Start_IT+0x488>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d059      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7a      	ldr	r2, [pc, #488]	; (8001e3c <HAL_DMA_Start_IT+0x48c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d054      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a79      	ldr	r2, [pc, #484]	; (8001e40 <HAL_DMA_Start_IT+0x490>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04f      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_DMA_Start_IT+0x494>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d04a      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a76      	ldr	r2, [pc, #472]	; (8001e48 <HAL_DMA_Start_IT+0x498>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d045      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a74      	ldr	r2, [pc, #464]	; (8001e4c <HAL_DMA_Start_IT+0x49c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d040      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a73      	ldr	r2, [pc, #460]	; (8001e50 <HAL_DMA_Start_IT+0x4a0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d03b      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <HAL_DMA_Start_IT+0x4a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d036      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a70      	ldr	r2, [pc, #448]	; (8001e58 <HAL_DMA_Start_IT+0x4a8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d031      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_DMA_Start_IT+0x4ac>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02c      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6d      	ldr	r2, [pc, #436]	; (8001e60 <HAL_DMA_Start_IT+0x4b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d027      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6b      	ldr	r2, [pc, #428]	; (8001e64 <HAL_DMA_Start_IT+0x4b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6a      	ldr	r2, [pc, #424]	; (8001e68 <HAL_DMA_Start_IT+0x4b8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d01d      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a68      	ldr	r2, [pc, #416]	; (8001e6c <HAL_DMA_Start_IT+0x4bc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_DMA_Start_IT+0x4c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a65      	ldr	r2, [pc, #404]	; (8001e74 <HAL_DMA_Start_IT+0x4c4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a64      	ldr	r2, [pc, #400]	; (8001e78 <HAL_DMA_Start_IT+0x4c8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a62      	ldr	r2, [pc, #392]	; (8001e7c <HAL_DMA_Start_IT+0x4cc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_DMA_Start_IT+0x350>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_DMA_Start_IT+0x4d0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Start_IT+0x354>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_Start_IT+0x356>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01a      	beq.n	8001d40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_DMA_Start_IT+0x474>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d04a      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_DMA_Start_IT+0x478>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d045      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_DMA_Start_IT+0x47c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d040      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_DMA_Start_IT+0x480>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d03b      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_DMA_Start_IT+0x484>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d036      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DMA_Start_IT+0x488>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d031      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_DMA_Start_IT+0x48c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02c      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_DMA_Start_IT+0x490>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d027      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_DMA_Start_IT+0x494>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d022      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_DMA_Start_IT+0x498>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d01d      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Start_IT+0x49c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_DMA_Start_IT+0x4a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_Start_IT+0x4a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_DMA_Start_IT+0x4a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_Start_IT+0x4ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_Start_IT+0x430>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_DMA_Start_IT+0x4b0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <HAL_DMA_Start_IT+0x442>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e012      	b.n	8001e18 <HAL_DMA_Start_IT+0x468>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e009      	b.n	8001e18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
 8001e64:	58025408 	.word	0x58025408
 8001e68:	5802541c 	.word	0x5802541c
 8001e6c:	58025430 	.word	0x58025430
 8001e70:	58025444 	.word	0x58025444
 8001e74:	58025458 	.word	0x58025458
 8001e78:	5802546c 	.word	0x5802546c
 8001e7c:	58025480 	.word	0x58025480
 8001e80:	58025494 	.word	0x58025494

08001e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff f890 	bl	8000fb0 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e2dc      	b.n	8002456 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e2cd      	b.n	8002456 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a76      	ldr	r2, [pc, #472]	; (8002098 <HAL_DMA_Abort+0x214>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04a      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a74      	ldr	r2, [pc, #464]	; (800209c <HAL_DMA_Abort+0x218>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d045      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a73      	ldr	r2, [pc, #460]	; (80020a0 <HAL_DMA_Abort+0x21c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d040      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <HAL_DMA_Abort+0x220>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d03b      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a70      	ldr	r2, [pc, #448]	; (80020a8 <HAL_DMA_Abort+0x224>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d036      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	; (80020ac <HAL_DMA_Abort+0x228>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6d      	ldr	r2, [pc, #436]	; (80020b0 <HAL_DMA_Abort+0x22c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d02c      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6b      	ldr	r2, [pc, #428]	; (80020b4 <HAL_DMA_Abort+0x230>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d027      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <HAL_DMA_Abort+0x234>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a68      	ldr	r2, [pc, #416]	; (80020bc <HAL_DMA_Abort+0x238>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <HAL_DMA_Abort+0x23c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_DMA_Abort+0x240>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <HAL_DMA_Abort+0x244>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a62      	ldr	r2, [pc, #392]	; (80020cc <HAL_DMA_Abort+0x248>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a61      	ldr	r2, [pc, #388]	; (80020d0 <HAL_DMA_Abort+0x24c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort+0xd6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5f      	ldr	r2, [pc, #380]	; (80020d4 <HAL_DMA_Abort+0x250>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Abort+0xda>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_DMA_Abort+0xdc>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 021e 	bic.w	r2, r2, #30
 8001f72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e00a      	b.n	8001fa2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020e 	bic.w	r2, r2, #14
 8001f9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <HAL_DMA_Abort+0x214>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d072      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	; (800209c <HAL_DMA_Abort+0x218>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d06d      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a39      	ldr	r2, [pc, #228]	; (80020a0 <HAL_DMA_Abort+0x21c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d068      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a37      	ldr	r2, [pc, #220]	; (80020a4 <HAL_DMA_Abort+0x220>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d063      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <HAL_DMA_Abort+0x224>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d05e      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_DMA_Abort+0x228>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d059      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <HAL_DMA_Abort+0x22c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d054      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <HAL_DMA_Abort+0x230>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d04f      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_DMA_Abort+0x234>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d04a      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <HAL_DMA_Abort+0x238>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d045      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <HAL_DMA_Abort+0x23c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d040      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2b      	ldr	r2, [pc, #172]	; (80020c4 <HAL_DMA_Abort+0x240>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d03b      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_DMA_Abort+0x244>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d036      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_DMA_Abort+0x248>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_DMA_Abort+0x24c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d02c      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_DMA_Abort+0x250>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d027      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_DMA_Abort+0x254>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_DMA_Abort+0x258>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01d      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_DMA_Abort+0x25c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d018      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <HAL_DMA_Abort+0x260>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_DMA_Abort+0x264>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_DMA_Abort+0x268>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_DMA_Abort+0x26c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_DMA_Abort+0x270>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d132      	bne.n	80020f8 <HAL_DMA_Abort+0x274>
 8002092:	2301      	movs	r3, #1
 8002094:	e031      	b.n	80020fa <HAL_DMA_Abort+0x276>
 8002096:	bf00      	nop
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
 80020d8:	58025408 	.word	0x58025408
 80020dc:	5802541c 	.word	0x5802541c
 80020e0:	58025430 	.word	0x58025430
 80020e4:	58025444 	.word	0x58025444
 80020e8:	58025458 	.word	0x58025458
 80020ec:	5802546c 	.word	0x5802546c
 80020f0:	58025480 	.word	0x58025480
 80020f4:	58025494 	.word	0x58025494
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_DMA_Abort+0x444>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04a      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6b      	ldr	r2, [pc, #428]	; (80022cc <HAL_DMA_Abort+0x448>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d045      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_DMA_Abort+0x44c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d040      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a68      	ldr	r2, [pc, #416]	; (80022d4 <HAL_DMA_Abort+0x450>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d03b      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_DMA_Abort+0x454>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d036      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_DMA_Abort+0x458>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d031      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a64      	ldr	r2, [pc, #400]	; (80022e0 <HAL_DMA_Abort+0x45c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d02c      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <HAL_DMA_Abort+0x460>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d027      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a61      	ldr	r2, [pc, #388]	; (80022e8 <HAL_DMA_Abort+0x464>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d022      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_DMA_Abort+0x468>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01d      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5e      	ldr	r2, [pc, #376]	; (80022f0 <HAL_DMA_Abort+0x46c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d018      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <HAL_DMA_Abort+0x470>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <HAL_DMA_Abort+0x474>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a59      	ldr	r2, [pc, #356]	; (80022fc <HAL_DMA_Abort+0x478>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_DMA_Abort+0x47c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_DMA_Abort+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_DMA_Abort+0x480>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <HAL_DMA_Abort+0x33c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e007      	b.n	80021d0 <HAL_DMA_Abort+0x34c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7fe feed 	bl	8000fb0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e12d      	b.n	8002456 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e5      	bne.n	80021d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_DMA_Abort+0x444>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04a      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2d      	ldr	r2, [pc, #180]	; (80022cc <HAL_DMA_Abort+0x448>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d045      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_DMA_Abort+0x44c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d040      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <HAL_DMA_Abort+0x450>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d03b      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <HAL_DMA_Abort+0x454>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d036      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <HAL_DMA_Abort+0x458>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_DMA_Abort+0x45c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d02c      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_DMA_Abort+0x460>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d027      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_DMA_Abort+0x464>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a21      	ldr	r2, [pc, #132]	; (80022ec <HAL_DMA_Abort+0x468>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_DMA_Abort+0x46c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_DMA_Abort+0x470>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_DMA_Abort+0x474>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_DMA_Abort+0x478>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_DMA_Abort+0x47c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_DMA_Abort+0x422>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_DMA_Abort+0x480>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_Abort+0x426>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_DMA_Abort+0x428>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d02b      	beq.n	8002308 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	223f      	movs	r2, #63	; 0x3f
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	e02a      	b.n	800231e <HAL_DMA_Abort+0x49a>
 80022c8:	40020010 	.word	0x40020010
 80022cc:	40020028 	.word	0x40020028
 80022d0:	40020040 	.word	0x40020040
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40020070 	.word	0x40020070
 80022dc:	40020088 	.word	0x40020088
 80022e0:	400200a0 	.word	0x400200a0
 80022e4:	400200b8 	.word	0x400200b8
 80022e8:	40020410 	.word	0x40020410
 80022ec:	40020428 	.word	0x40020428
 80022f0:	40020440 	.word	0x40020440
 80022f4:	40020458 	.word	0x40020458
 80022f8:	40020470 	.word	0x40020470
 80022fc:	40020488 	.word	0x40020488
 8002300:	400204a0 	.word	0x400204a0
 8002304:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2201      	movs	r2, #1
 8002318:	409a      	lsls	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_DMA_Abort+0x5dc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d072      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_DMA_Abort+0x5e0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d06d      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_DMA_Abort+0x5e4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d068      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_DMA_Abort+0x5e8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d063      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_DMA_Abort+0x5ec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d05e      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a47      	ldr	r2, [pc, #284]	; (8002474 <HAL_DMA_Abort+0x5f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d059      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a46      	ldr	r2, [pc, #280]	; (8002478 <HAL_DMA_Abort+0x5f4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d054      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a44      	ldr	r2, [pc, #272]	; (800247c <HAL_DMA_Abort+0x5f8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d04f      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a43      	ldr	r2, [pc, #268]	; (8002480 <HAL_DMA_Abort+0x5fc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_DMA_Abort+0x600>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a40      	ldr	r2, [pc, #256]	; (8002488 <HAL_DMA_Abort+0x604>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3e      	ldr	r2, [pc, #248]	; (800248c <HAL_DMA_Abort+0x608>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a3d      	ldr	r2, [pc, #244]	; (8002490 <HAL_DMA_Abort+0x60c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_DMA_Abort+0x610>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <HAL_DMA_Abort+0x614>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a38      	ldr	r2, [pc, #224]	; (800249c <HAL_DMA_Abort+0x618>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a37      	ldr	r2, [pc, #220]	; (80024a0 <HAL_DMA_Abort+0x61c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <HAL_DMA_Abort+0x620>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_DMA_Abort+0x624>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a32      	ldr	r2, [pc, #200]	; (80024ac <HAL_DMA_Abort+0x628>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <HAL_DMA_Abort+0x62c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <HAL_DMA_Abort+0x630>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <HAL_DMA_Abort+0x634>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <HAL_DMA_Abort+0x638>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Abort+0x58e>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_DMA_Abort+0x590>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d015      	beq.n	8002444 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002420:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002438:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002442:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020010 	.word	0x40020010
 8002464:	40020028 	.word	0x40020028
 8002468:	40020040 	.word	0x40020040
 800246c:	40020058 	.word	0x40020058
 8002470:	40020070 	.word	0x40020070
 8002474:	40020088 	.word	0x40020088
 8002478:	400200a0 	.word	0x400200a0
 800247c:	400200b8 	.word	0x400200b8
 8002480:	40020410 	.word	0x40020410
 8002484:	40020428 	.word	0x40020428
 8002488:	40020440 	.word	0x40020440
 800248c:	40020458 	.word	0x40020458
 8002490:	40020470 	.word	0x40020470
 8002494:	40020488 	.word	0x40020488
 8002498:	400204a0 	.word	0x400204a0
 800249c:	400204b8 	.word	0x400204b8
 80024a0:	58025408 	.word	0x58025408
 80024a4:	5802541c 	.word	0x5802541c
 80024a8:	58025430 	.word	0x58025430
 80024ac:	58025444 	.word	0x58025444
 80024b0:	58025458 	.word	0x58025458
 80024b4:	5802546c 	.word	0x5802546c
 80024b8:	58025480 	.word	0x58025480
 80024bc:	58025494 	.word	0x58025494

080024c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e237      	b.n	8002942 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d004      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e22c      	b.n	8002942 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5c      	ldr	r2, [pc, #368]	; (8002660 <HAL_DMA_Abort_IT+0x1a0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5b      	ldr	r2, [pc, #364]	; (8002664 <HAL_DMA_Abort_IT+0x1a4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d045      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a59      	ldr	r2, [pc, #356]	; (8002668 <HAL_DMA_Abort_IT+0x1a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d040      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_DMA_Abort_IT+0x1ac>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d03b      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a56      	ldr	r2, [pc, #344]	; (8002670 <HAL_DMA_Abort_IT+0x1b0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d036      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a55      	ldr	r2, [pc, #340]	; (8002674 <HAL_DMA_Abort_IT+0x1b4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d031      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_DMA_Abort_IT+0x1b8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02c      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_DMA_Abort_IT+0x1bc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d027      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_DMA_Abort_IT+0x1c0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_DMA_Abort_IT+0x1c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01d      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <HAL_DMA_Abort_IT+0x1c8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_DMA_Abort_IT+0x1cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_DMA_Abort_IT+0x1d0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a49      	ldr	r2, [pc, #292]	; (8002694 <HAL_DMA_Abort_IT+0x1d4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a47      	ldr	r2, [pc, #284]	; (8002698 <HAL_DMA_Abort_IT+0x1d8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a46      	ldr	r2, [pc, #280]	; (800269c <HAL_DMA_Abort_IT+0x1dc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_DMA_Abort_IT+0xcc>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_DMA_Abort_IT+0xce>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8086 	beq.w	80026a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2204      	movs	r2, #4
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <HAL_DMA_Abort_IT+0x1a0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d04a      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <HAL_DMA_Abort_IT+0x1a4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d045      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <HAL_DMA_Abort_IT+0x1a8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <HAL_DMA_Abort_IT+0x1ac>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d03b      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_DMA_Abort_IT+0x1b0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d036      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <HAL_DMA_Abort_IT+0x1b4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d031      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_DMA_Abort_IT+0x1b8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02c      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a25      	ldr	r2, [pc, #148]	; (800267c <HAL_DMA_Abort_IT+0x1bc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d027      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_DMA_Abort_IT+0x1c0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_DMA_Abort_IT+0x1c4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01d      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_DMA_Abort_IT+0x1c8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_DMA_Abort_IT+0x1cc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_DMA_Abort_IT+0x1d0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_DMA_Abort_IT+0x1d4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_DMA_Abort_IT+0x1d8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_DMA_Abort_IT+0x17c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_DMA_Abort_IT+0x1dc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <HAL_DMA_Abort_IT+0x18e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e178      	b.n	8002940 <HAL_DMA_Abort_IT+0x480>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e16f      	b.n	8002940 <HAL_DMA_Abort_IT+0x480>
 8002660:	40020010 	.word	0x40020010
 8002664:	40020028 	.word	0x40020028
 8002668:	40020040 	.word	0x40020040
 800266c:	40020058 	.word	0x40020058
 8002670:	40020070 	.word	0x40020070
 8002674:	40020088 	.word	0x40020088
 8002678:	400200a0 	.word	0x400200a0
 800267c:	400200b8 	.word	0x400200b8
 8002680:	40020410 	.word	0x40020410
 8002684:	40020428 	.word	0x40020428
 8002688:	40020440 	.word	0x40020440
 800268c:	40020458 	.word	0x40020458
 8002690:	40020470 	.word	0x40020470
 8002694:	40020488 	.word	0x40020488
 8002698:	400204a0 	.word	0x400204a0
 800269c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020e 	bic.w	r2, r2, #14
 80026ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6c      	ldr	r2, [pc, #432]	; (8002868 <HAL_DMA_Abort_IT+0x3a8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6b      	ldr	r2, [pc, #428]	; (800286c <HAL_DMA_Abort_IT+0x3ac>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_DMA_Abort_IT+0x3b0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a68      	ldr	r2, [pc, #416]	; (8002874 <HAL_DMA_Abort_IT+0x3b4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a66      	ldr	r2, [pc, #408]	; (8002878 <HAL_DMA_Abort_IT+0x3b8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_DMA_Abort_IT+0x3bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a63      	ldr	r2, [pc, #396]	; (8002880 <HAL_DMA_Abort_IT+0x3c0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a62      	ldr	r2, [pc, #392]	; (8002884 <HAL_DMA_Abort_IT+0x3c4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a60      	ldr	r2, [pc, #384]	; (8002888 <HAL_DMA_Abort_IT+0x3c8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_DMA_Abort_IT+0x3cc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5d      	ldr	r2, [pc, #372]	; (8002890 <HAL_DMA_Abort_IT+0x3d0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5c      	ldr	r2, [pc, #368]	; (8002894 <HAL_DMA_Abort_IT+0x3d4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5a      	ldr	r2, [pc, #360]	; (8002898 <HAL_DMA_Abort_IT+0x3d8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a59      	ldr	r2, [pc, #356]	; (800289c <HAL_DMA_Abort_IT+0x3dc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <HAL_DMA_Abort_IT+0x3e0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Abort_IT+0x290>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a56      	ldr	r2, [pc, #344]	; (80028a4 <HAL_DMA_Abort_IT+0x3e4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <HAL_DMA_Abort_IT+0x2a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <HAL_DMA_Abort_IT+0x2b2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_DMA_Abort_IT+0x3a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d072      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_DMA_Abort_IT+0x3ac>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d06d      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a39      	ldr	r2, [pc, #228]	; (8002870 <HAL_DMA_Abort_IT+0x3b0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d068      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_DMA_Abort_IT+0x3b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d063      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a36      	ldr	r2, [pc, #216]	; (8002878 <HAL_DMA_Abort_IT+0x3b8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d05e      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a34      	ldr	r2, [pc, #208]	; (800287c <HAL_DMA_Abort_IT+0x3bc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d059      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <HAL_DMA_Abort_IT+0x3c0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d054      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_DMA_Abort_IT+0x3c4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d04f      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <HAL_DMA_Abort_IT+0x3c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04a      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_DMA_Abort_IT+0x3cc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d045      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_DMA_Abort_IT+0x3d0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_DMA_Abort_IT+0x3d4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d03b      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_DMA_Abort_IT+0x3d8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_DMA_Abort_IT+0x3dc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_DMA_Abort_IT+0x3e0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_DMA_Abort_IT+0x3e4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d027      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_DMA_Abort_IT+0x3e8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_DMA_Abort_IT+0x3ec>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_DMA_Abort_IT+0x3f0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_DMA_Abort_IT+0x3f4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_DMA_Abort_IT+0x3f8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <HAL_DMA_Abort_IT+0x3fc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_DMA_Abort_IT+0x400>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_DMA_Abort_IT+0x404>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d132      	bne.n	80028c8 <HAL_DMA_Abort_IT+0x408>
 8002862:	2301      	movs	r3, #1
 8002864:	e031      	b.n	80028ca <HAL_DMA_Abort_IT+0x40a>
 8002866:	bf00      	nop
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8
 80028a8:	58025408 	.word	0x58025408
 80028ac:	5802541c 	.word	0x5802541c
 80028b0:	58025430 	.word	0x58025430
 80028b4:	58025444 	.word	0x58025444
 80028b8:	58025458 	.word	0x58025458
 80028bc:	5802546c 	.word	0x5802546c
 80028c0:	58025480 	.word	0x58025480
 80028c4:	58025494 	.word	0x58025494
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d028      	beq.n	8002920 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002914:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800291e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop

0800294c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002958:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_DMA_IRQHandler+0x1ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_DMA_IRQHandler+0x1b0>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a9b      	lsrs	r3, r3, #10
 8002964:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_DMA_IRQHandler+0x1b4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d04a      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_IRQHandler+0x1b8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d045      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_DMA_IRQHandler+0x1bc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d040      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_DMA_IRQHandler+0x1c0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d03b      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <HAL_DMA_IRQHandler+0x1c4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d036      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_DMA_IRQHandler+0x1c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d031      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_DMA_IRQHandler+0x1cc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d02c      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_DMA_IRQHandler+0x1d0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_DMA_IRQHandler+0x1d4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_DMA_IRQHandler+0x1d8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01d      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a50      	ldr	r2, [pc, #320]	; (8002b28 <HAL_DMA_IRQHandler+0x1dc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_DMA_IRQHandler+0x1e0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_DMA_IRQHandler+0x1e4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_DMA_IRQHandler+0x1e8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_DMA_IRQHandler+0x1ec>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xd2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a48      	ldr	r2, [pc, #288]	; (8002b3c <HAL_DMA_IRQHandler+0x1f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_DMA_IRQHandler+0xd6>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_DMA_IRQHandler+0xd8>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 842b 	beq.w	8003280 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2208      	movs	r2, #8
 8002a34:	409a      	lsls	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a2 	beq.w	8002b84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <HAL_DMA_IRQHandler+0x1b4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2d      	ldr	r2, [pc, #180]	; (8002b04 <HAL_DMA_IRQHandler+0x1b8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <HAL_DMA_IRQHandler+0x1bc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_DMA_IRQHandler+0x1c0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <HAL_DMA_IRQHandler+0x1c4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_DMA_IRQHandler+0x1c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_DMA_IRQHandler+0x1cc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <HAL_DMA_IRQHandler+0x1d0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_DMA_IRQHandler+0x1d4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_DMA_IRQHandler+0x1d8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_DMA_IRQHandler+0x1dc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <HAL_DMA_IRQHandler+0x1e0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_DMA_IRQHandler+0x1e4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_DMA_IRQHandler+0x1e8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_DMA_IRQHandler+0x1ec>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x194>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_DMA_IRQHandler+0x1f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d12f      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x1f4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e02e      	b.n	8002b54 <HAL_DMA_IRQHandler+0x208>
 8002af6:	bf00      	nop
 8002af8:	24002004 	.word	0x24002004
 8002afc:	1b4e81b5 	.word	0x1b4e81b5
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2208      	movs	r2, #8
 8002b72:	409a      	lsls	r2, r3
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d06e      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <HAL_DMA_IRQHandler+0x3f8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04a      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_DMA_IRQHandler+0x3fc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d045      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <HAL_DMA_IRQHandler+0x400>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d040      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a64      	ldr	r2, [pc, #400]	; (8002d50 <HAL_DMA_IRQHandler+0x404>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d03b      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_DMA_IRQHandler+0x408>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d036      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a61      	ldr	r2, [pc, #388]	; (8002d58 <HAL_DMA_IRQHandler+0x40c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_DMA_IRQHandler+0x410>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02c      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5e      	ldr	r2, [pc, #376]	; (8002d60 <HAL_DMA_IRQHandler+0x414>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d027      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_DMA_IRQHandler+0x418>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d022      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5b      	ldr	r2, [pc, #364]	; (8002d68 <HAL_DMA_IRQHandler+0x41c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01d      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5a      	ldr	r2, [pc, #360]	; (8002d6c <HAL_DMA_IRQHandler+0x420>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_DMA_IRQHandler+0x424>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_DMA_IRQHandler+0x428>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_DMA_IRQHandler+0x42c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a54      	ldr	r2, [pc, #336]	; (8002d7c <HAL_DMA_IRQHandler+0x430>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x2ee>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_DMA_IRQHandler+0x434>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10a      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x304>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e003      	b.n	8002c58 <HAL_DMA_IRQHandler+0x30c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f043 0202 	orr.w	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2204      	movs	r2, #4
 8002c82:	409a      	lsls	r2, r3
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 808f 	beq.w	8002dac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_DMA_IRQHandler+0x3f8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04a      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_DMA_IRQHandler+0x3fc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d045      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <HAL_DMA_IRQHandler+0x400>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_DMA_IRQHandler+0x404>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d03b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <HAL_DMA_IRQHandler+0x408>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_DMA_IRQHandler+0x40c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <HAL_DMA_IRQHandler+0x410>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02c      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_DMA_IRQHandler+0x414>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d027      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_DMA_IRQHandler+0x418>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_DMA_IRQHandler+0x41c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_DMA_IRQHandler+0x420>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_DMA_IRQHandler+0x424>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_DMA_IRQHandler+0x428>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_DMA_IRQHandler+0x42c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_DMA_IRQHandler+0x430>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x3e2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <HAL_DMA_IRQHandler+0x434>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d12a      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x438>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e023      	b.n	8002d8c <HAL_DMA_IRQHandler+0x440>
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2210      	movs	r2, #16
 8002db6:	409a      	lsls	r2, r3
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a85      	ldr	r2, [pc, #532]	; (8002fdc <HAL_DMA_IRQHandler+0x690>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04a      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a83      	ldr	r2, [pc, #524]	; (8002fe0 <HAL_DMA_IRQHandler+0x694>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d045      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a82      	ldr	r2, [pc, #520]	; (8002fe4 <HAL_DMA_IRQHandler+0x698>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d040      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a80      	ldr	r2, [pc, #512]	; (8002fe8 <HAL_DMA_IRQHandler+0x69c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d03b      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7f      	ldr	r2, [pc, #508]	; (8002fec <HAL_DMA_IRQHandler+0x6a0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d036      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7d      	ldr	r2, [pc, #500]	; (8002ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d031      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7c      	ldr	r2, [pc, #496]	; (8002ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02c      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7a      	ldr	r2, [pc, #488]	; (8002ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d027      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a79      	ldr	r2, [pc, #484]	; (8002ffc <HAL_DMA_IRQHandler+0x6b0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a77      	ldr	r2, [pc, #476]	; (8003000 <HAL_DMA_IRQHandler+0x6b4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a76      	ldr	r2, [pc, #472]	; (8003004 <HAL_DMA_IRQHandler+0x6b8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a74      	ldr	r2, [pc, #464]	; (8003008 <HAL_DMA_IRQHandler+0x6bc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_DMA_IRQHandler+0x6c0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a71      	ldr	r2, [pc, #452]	; (8003010 <HAL_DMA_IRQHandler+0x6c4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a70      	ldr	r2, [pc, #448]	; (8003014 <HAL_DMA_IRQHandler+0x6c8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x516>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6e      	ldr	r2, [pc, #440]	; (8003018 <HAL_DMA_IRQHandler+0x6cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10a      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x52c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e009      	b.n	8002e8c <HAL_DMA_IRQHandler+0x540>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf14      	ite	ne
 8002e86:	2301      	movne	r3, #1
 8002e88:	2300      	moveq	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d03e      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2210      	movs	r2, #16
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d024      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e01f      	b.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01b      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e016      	b.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0208 	bic.w	r2, r2, #8
 8002efc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2220      	movs	r2, #32
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8110 	beq.w	8003144 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_DMA_IRQHandler+0x690>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_DMA_IRQHandler+0x694>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_DMA_IRQHandler+0x698>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_DMA_IRQHandler+0x69c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_DMA_IRQHandler+0x6a0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_DMA_IRQHandler+0x6b0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_DMA_IRQHandler+0x6b4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_DMA_IRQHandler+0x6b8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_DMA_IRQHandler+0x6bc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_DMA_IRQHandler+0x6c0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_DMA_IRQHandler+0x6c4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_DMA_IRQHandler+0x6c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x678>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_DMA_IRQHandler+0x6cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12b      	bne.n	800301c <HAL_DMA_IRQHandler+0x6d0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e02a      	b.n	8003030 <HAL_DMA_IRQHandler+0x6e4>
 8002fda:	bf00      	nop
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	40020070 	.word	0x40020070
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	400200a0 	.word	0x400200a0
 8002ff8:	400200b8 	.word	0x400200b8
 8002ffc:	40020410 	.word	0x40020410
 8003000:	40020428 	.word	0x40020428
 8003004:	40020440 	.word	0x40020440
 8003008:	40020458 	.word	0x40020458
 800300c:	40020470 	.word	0x40020470
 8003010:	40020488 	.word	0x40020488
 8003014:	400204a0 	.word	0x400204a0
 8003018:	400204b8 	.word	0x400204b8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8087 	beq.w	8003144 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2220      	movs	r2, #32
 8003040:	409a      	lsls	r2, r3
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b04      	cmp	r3, #4
 8003050:	d139      	bne.n	80030c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0216 	bic.w	r2, r2, #22
 8003060:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003070:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_DMA_IRQHandler+0x736>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0208 	bic.w	r2, r2, #8
 8003090:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	223f      	movs	r2, #63	; 0x3f
 800309c:	409a      	lsls	r2, r3
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 834a 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
          }
          return;
 80030c4:	e344      	b.n	8003750 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
 80030f2:	e027      	b.n	8003144 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d023      	beq.n	8003144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
 8003104:	e01e      	b.n	8003144 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0210 	bic.w	r2, r2, #16
 8003122:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8306 	beq.w	800375a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8088 	beq.w	800326c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2204      	movs	r2, #4
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <HAL_DMA_IRQHandler+0xa08>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a79      	ldr	r2, [pc, #484]	; (8003358 <HAL_DMA_IRQHandler+0xa0c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a77      	ldr	r2, [pc, #476]	; (800335c <HAL_DMA_IRQHandler+0xa10>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a76      	ldr	r2, [pc, #472]	; (8003360 <HAL_DMA_IRQHandler+0xa14>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a74      	ldr	r2, [pc, #464]	; (8003364 <HAL_DMA_IRQHandler+0xa18>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a73      	ldr	r2, [pc, #460]	; (8003368 <HAL_DMA_IRQHandler+0xa1c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a71      	ldr	r2, [pc, #452]	; (800336c <HAL_DMA_IRQHandler+0xa20>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a70      	ldr	r2, [pc, #448]	; (8003370 <HAL_DMA_IRQHandler+0xa24>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_DMA_IRQHandler+0xa28>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <HAL_DMA_IRQHandler+0xa2c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6b      	ldr	r2, [pc, #428]	; (800337c <HAL_DMA_IRQHandler+0xa30>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6a      	ldr	r2, [pc, #424]	; (8003380 <HAL_DMA_IRQHandler+0xa34>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a68      	ldr	r2, [pc, #416]	; (8003384 <HAL_DMA_IRQHandler+0xa38>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a67      	ldr	r2, [pc, #412]	; (8003388 <HAL_DMA_IRQHandler+0xa3c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_DMA_IRQHandler+0xa40>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_IRQHandler+0x8b8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a64      	ldr	r2, [pc, #400]	; (8003390 <HAL_DMA_IRQHandler+0xa44>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <HAL_DMA_IRQHandler+0x8ca>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e007      	b.n	8003226 <HAL_DMA_IRQHandler+0x8da>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	429a      	cmp	r2, r3
 8003230:	d307      	bcc.n	8003242 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f2      	bne.n	8003226 <HAL_DMA_IRQHandler+0x8da>
 8003240:	e000      	b.n	8003244 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003242:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2203      	movs	r2, #3
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800325a:	e003      	b.n	8003264 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8272 	beq.w	800375a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
 800327e:	e26c      	b.n	800375a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a43      	ldr	r2, [pc, #268]	; (8003394 <HAL_DMA_IRQHandler+0xa48>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a42      	ldr	r2, [pc, #264]	; (8003398 <HAL_DMA_IRQHandler+0xa4c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_DMA_IRQHandler+0xa50>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <HAL_DMA_IRQHandler+0xa54>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <HAL_DMA_IRQHandler+0xa58>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3c      	ldr	r2, [pc, #240]	; (80033a8 <HAL_DMA_IRQHandler+0xa5c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <HAL_DMA_IRQHandler+0xa60>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x984>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a39      	ldr	r2, [pc, #228]	; (80033b0 <HAL_DMA_IRQHandler+0xa64>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x988>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_DMA_IRQHandler+0x98a>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 823f 	beq.w	800375a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2204      	movs	r2, #4
 80032ee:	409a      	lsls	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80cd 	beq.w	8003494 <HAL_DMA_IRQHandler+0xb48>
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80c7 	beq.w	8003494 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2204      	movs	r2, #4
 8003310:	409a      	lsls	r2, r3
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d049      	beq.n	80033b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8210 	beq.w	8003754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800333c:	e20a      	b.n	8003754 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8206 	beq.w	8003754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003350:	e200      	b.n	8003754 <HAL_DMA_IRQHandler+0xe08>
 8003352:	bf00      	nop
 8003354:	40020010 	.word	0x40020010
 8003358:	40020028 	.word	0x40020028
 800335c:	40020040 	.word	0x40020040
 8003360:	40020058 	.word	0x40020058
 8003364:	40020070 	.word	0x40020070
 8003368:	40020088 	.word	0x40020088
 800336c:	400200a0 	.word	0x400200a0
 8003370:	400200b8 	.word	0x400200b8
 8003374:	40020410 	.word	0x40020410
 8003378:	40020428 	.word	0x40020428
 800337c:	40020440 	.word	0x40020440
 8003380:	40020458 	.word	0x40020458
 8003384:	40020470 	.word	0x40020470
 8003388:	40020488 	.word	0x40020488
 800338c:	400204a0 	.word	0x400204a0
 8003390:	400204b8 	.word	0x400204b8
 8003394:	58025408 	.word	0x58025408
 8003398:	5802541c 	.word	0x5802541c
 800339c:	58025430 	.word	0x58025430
 80033a0:	58025444 	.word	0x58025444
 80033a4:	58025458 	.word	0x58025458
 80033a8:	5802546c 	.word	0x5802546c
 80033ac:	58025480 	.word	0x58025480
 80033b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d160      	bne.n	8003480 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7f      	ldr	r2, [pc, #508]	; (80035c0 <HAL_DMA_IRQHandler+0xc74>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d04a      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <HAL_DMA_IRQHandler+0xc78>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d045      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7c      	ldr	r2, [pc, #496]	; (80035c8 <HAL_DMA_IRQHandler+0xc7c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d040      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <HAL_DMA_IRQHandler+0xc80>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d03b      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a79      	ldr	r2, [pc, #484]	; (80035d0 <HAL_DMA_IRQHandler+0xc84>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d036      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a77      	ldr	r2, [pc, #476]	; (80035d4 <HAL_DMA_IRQHandler+0xc88>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a76      	ldr	r2, [pc, #472]	; (80035d8 <HAL_DMA_IRQHandler+0xc8c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d02c      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a74      	ldr	r2, [pc, #464]	; (80035dc <HAL_DMA_IRQHandler+0xc90>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d027      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a73      	ldr	r2, [pc, #460]	; (80035e0 <HAL_DMA_IRQHandler+0xc94>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a71      	ldr	r2, [pc, #452]	; (80035e4 <HAL_DMA_IRQHandler+0xc98>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01d      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a70      	ldr	r2, [pc, #448]	; (80035e8 <HAL_DMA_IRQHandler+0xc9c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6e      	ldr	r2, [pc, #440]	; (80035ec <HAL_DMA_IRQHandler+0xca0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6d      	ldr	r2, [pc, #436]	; (80035f0 <HAL_DMA_IRQHandler+0xca4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6b      	ldr	r2, [pc, #428]	; (80035f4 <HAL_DMA_IRQHandler+0xca8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_DMA_IRQHandler+0xcac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_DMA_IRQHandler+0xb12>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a68      	ldr	r2, [pc, #416]	; (80035fc <HAL_DMA_IRQHandler+0xcb0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d108      	bne.n	8003470 <HAL_DMA_IRQHandler+0xb24>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0208 	bic.w	r2, r2, #8
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e007      	b.n	8003480 <HAL_DMA_IRQHandler+0xb34>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8165 	beq.w	8003754 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003492:	e15f      	b.n	8003754 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2202      	movs	r2, #2
 800349e:	409a      	lsls	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80c5 	beq.w	8003634 <HAL_DMA_IRQHandler+0xce8>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80bf 	beq.w	8003634 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2202      	movs	r2, #2
 80034c0:	409a      	lsls	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 813a 	beq.w	8003758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ec:	e134      	b.n	8003758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8130 	beq.w	8003758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003500:	e12a      	b.n	8003758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8089 	bne.w	8003620 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_DMA_IRQHandler+0xc74>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <HAL_DMA_IRQHandler+0xc78>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <HAL_DMA_IRQHandler+0xc7c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a26      	ldr	r2, [pc, #152]	; (80035cc <HAL_DMA_IRQHandler+0xc80>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_DMA_IRQHandler+0xc84>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <HAL_DMA_IRQHandler+0xc88>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_DMA_IRQHandler+0xc8c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a20      	ldr	r2, [pc, #128]	; (80035dc <HAL_DMA_IRQHandler+0xc90>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_DMA_IRQHandler+0xc94>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_DMA_IRQHandler+0xc98>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_DMA_IRQHandler+0xc9c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_DMA_IRQHandler+0xca0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_DMA_IRQHandler+0xca4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_DMA_IRQHandler+0xca8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_DMA_IRQHandler+0xcac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_IRQHandler+0xc62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_DMA_IRQHandler+0xcb0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d128      	bne.n	8003600 <HAL_DMA_IRQHandler+0xcb4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0214 	bic.w	r2, r2, #20
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e027      	b.n	8003610 <HAL_DMA_IRQHandler+0xcc4>
 80035c0:	40020010 	.word	0x40020010
 80035c4:	40020028 	.word	0x40020028
 80035c8:	40020040 	.word	0x40020040
 80035cc:	40020058 	.word	0x40020058
 80035d0:	40020070 	.word	0x40020070
 80035d4:	40020088 	.word	0x40020088
 80035d8:	400200a0 	.word	0x400200a0
 80035dc:	400200b8 	.word	0x400200b8
 80035e0:	40020410 	.word	0x40020410
 80035e4:	40020428 	.word	0x40020428
 80035e8:	40020440 	.word	0x40020440
 80035ec:	40020458 	.word	0x40020458
 80035f0:	40020470 	.word	0x40020470
 80035f4:	40020488 	.word	0x40020488
 80035f8:	400204a0 	.word	0x400204a0
 80035fc:	400204b8 	.word	0x400204b8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020a 	bic.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003632:	e091      	b.n	8003758 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2208      	movs	r2, #8
 800363e:	409a      	lsls	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8088 	beq.w	800375a <HAL_DMA_IRQHandler+0xe0e>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8082 	beq.w	800375a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a41      	ldr	r2, [pc, #260]	; (8003760 <HAL_DMA_IRQHandler+0xe14>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d04a      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3f      	ldr	r2, [pc, #252]	; (8003764 <HAL_DMA_IRQHandler+0xe18>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d045      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3e      	ldr	r2, [pc, #248]	; (8003768 <HAL_DMA_IRQHandler+0xe1c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d040      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_DMA_IRQHandler+0xe20>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d03b      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_DMA_IRQHandler+0xe24>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d036      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a39      	ldr	r2, [pc, #228]	; (8003774 <HAL_DMA_IRQHandler+0xe28>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d031      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_DMA_IRQHandler+0xe2c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d02c      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_DMA_IRQHandler+0xe30>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d027      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a35      	ldr	r2, [pc, #212]	; (8003780 <HAL_DMA_IRQHandler+0xe34>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a33      	ldr	r2, [pc, #204]	; (8003784 <HAL_DMA_IRQHandler+0xe38>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a32      	ldr	r2, [pc, #200]	; (8003788 <HAL_DMA_IRQHandler+0xe3c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_DMA_IRQHandler+0xe40>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <HAL_DMA_IRQHandler+0xe44>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_DMA_IRQHandler+0xe48>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_DMA_IRQHandler+0xe4c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdaa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2a      	ldr	r2, [pc, #168]	; (800379c <HAL_DMA_IRQHandler+0xe50>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <HAL_DMA_IRQHandler+0xdbc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 021c 	bic.w	r2, r2, #28
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e007      	b.n	8003718 <HAL_DMA_IRQHandler+0xdcc>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 020e 	bic.w	r2, r2, #14
 8003716:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2201      	movs	r2, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
 800374e:	e004      	b.n	800375a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003758:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800375a:	3728      	adds	r7, #40	; 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8

080037a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7f      	ldr	r2, [pc, #508]	; (80039bc <DMA_SetConfig+0x21c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d072      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <DMA_SetConfig+0x220>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d06d      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7c      	ldr	r2, [pc, #496]	; (80039c4 <DMA_SetConfig+0x224>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d068      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <DMA_SetConfig+0x228>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d063      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a79      	ldr	r2, [pc, #484]	; (80039cc <DMA_SetConfig+0x22c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d05e      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <DMA_SetConfig+0x230>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d059      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <DMA_SetConfig+0x234>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d054      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <DMA_SetConfig+0x238>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04f      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a73      	ldr	r2, [pc, #460]	; (80039dc <DMA_SetConfig+0x23c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d04a      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a71      	ldr	r2, [pc, #452]	; (80039e0 <DMA_SetConfig+0x240>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d045      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <DMA_SetConfig+0x244>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d040      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <DMA_SetConfig+0x248>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d03b      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6d      	ldr	r2, [pc, #436]	; (80039ec <DMA_SetConfig+0x24c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d036      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6b      	ldr	r2, [pc, #428]	; (80039f0 <DMA_SetConfig+0x250>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d031      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6a      	ldr	r2, [pc, #424]	; (80039f4 <DMA_SetConfig+0x254>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d02c      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <DMA_SetConfig+0x258>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d027      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a67      	ldr	r2, [pc, #412]	; (80039fc <DMA_SetConfig+0x25c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <DMA_SetConfig+0x260>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01d      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a64      	ldr	r2, [pc, #400]	; (8003a04 <DMA_SetConfig+0x264>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a62      	ldr	r2, [pc, #392]	; (8003a08 <DMA_SetConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <DMA_SetConfig+0x26c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <DMA_SetConfig+0x10a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <DMA_SetConfig+0x270>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <DMA_SetConfig+0x10a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5e      	ldr	r2, [pc, #376]	; (8003a14 <DMA_SetConfig+0x274>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <DMA_SetConfig+0x10a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <DMA_SetConfig+0x278>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <DMA_SetConfig+0x10e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <DMA_SetConfig+0x110>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a39      	ldr	r2, [pc, #228]	; (80039bc <DMA_SetConfig+0x21c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04a      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <DMA_SetConfig+0x220>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d045      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a36      	ldr	r2, [pc, #216]	; (80039c4 <DMA_SetConfig+0x224>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d040      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <DMA_SetConfig+0x228>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03b      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <DMA_SetConfig+0x22c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d036      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <DMA_SetConfig+0x230>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d031      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <DMA_SetConfig+0x234>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <DMA_SetConfig+0x238>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d027      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <DMA_SetConfig+0x23c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <DMA_SetConfig+0x240>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <DMA_SetConfig+0x244>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <DMA_SetConfig+0x248>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a27      	ldr	r2, [pc, #156]	; (80039ec <DMA_SetConfig+0x24c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <DMA_SetConfig+0x250>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <DMA_SetConfig+0x254>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <DMA_SetConfig+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <DMA_SetConfig+0x258>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <DMA_SetConfig+0x1d4>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <DMA_SetConfig+0x1d6>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d059      	beq.n	8003a2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	223f      	movs	r2, #63	; 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d138      	bne.n	8003a1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039ba:	e086      	b.n	8003aca <DMA_SetConfig+0x32a>
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	58025408 	.word	0x58025408
 8003a00:	5802541c 	.word	0x5802541c
 8003a04:	58025430 	.word	0x58025430
 8003a08:	58025444 	.word	0x58025444
 8003a0c:	58025458 	.word	0x58025458
 8003a10:	5802546c 	.word	0x5802546c
 8003a14:	58025480 	.word	0x58025480
 8003a18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
}
 8003a2c:	e04d      	b.n	8003aca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <DMA_SetConfig+0x338>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <DMA_SetConfig+0x33c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <DMA_SetConfig+0x340>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a24      	ldr	r2, [pc, #144]	; (8003ae4 <DMA_SetConfig+0x344>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <DMA_SetConfig+0x348>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a21      	ldr	r2, [pc, #132]	; (8003aec <DMA_SetConfig+0x34c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <DMA_SetConfig+0x350>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <DMA_SetConfig+0x2de>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <DMA_SetConfig+0x354>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <DMA_SetConfig+0x2e2>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <DMA_SetConfig+0x2e4>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2201      	movs	r2, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d108      	bne.n	8003aba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
}
 8003ab8:	e007      	b.n	8003aca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494

08003af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <DMA_CalcBaseAndBitshift+0x118>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d04a      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d045      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3f      	ldr	r2, [pc, #252]	; (8003c18 <DMA_CalcBaseAndBitshift+0x120>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d040      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3e      	ldr	r2, [pc, #248]	; (8003c1c <DMA_CalcBaseAndBitshift+0x124>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d03b      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <DMA_CalcBaseAndBitshift+0x128>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d036      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d031      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <DMA_CalcBaseAndBitshift+0x130>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d02c      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <DMA_CalcBaseAndBitshift+0x134>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d027      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a36      	ldr	r2, [pc, #216]	; (8003c30 <DMA_CalcBaseAndBitshift+0x138>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a35      	ldr	r2, [pc, #212]	; (8003c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01d      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <DMA_CalcBaseAndBitshift+0x140>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a32      	ldr	r2, [pc, #200]	; (8003c3c <DMA_CalcBaseAndBitshift+0x144>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <DMA_CalcBaseAndBitshift+0x148>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2d      	ldr	r2, [pc, #180]	; (8003c48 <DMA_CalcBaseAndBitshift+0x150>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <DMA_CalcBaseAndBitshift+0x154>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <DMA_CalcBaseAndBitshift+0xac>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <DMA_CalcBaseAndBitshift+0xae>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d024      	beq.n	8003bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3b10      	subs	r3, #16
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <DMA_CalcBaseAndBitshift+0x158>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8003bc4:	5cd3      	ldrb	r3, [r2, r3]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d908      	bls.n	8003be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <DMA_CalcBaseAndBitshift+0x160>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	1d1a      	adds	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58
 8003be2:	e00d      	b.n	8003c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <DMA_CalcBaseAndBitshift+0x160>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf2:	e005      	b.n	8003c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40020010 	.word	0x40020010
 8003c14:	40020028 	.word	0x40020028
 8003c18:	40020040 	.word	0x40020040
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	40020070 	.word	0x40020070
 8003c24:	40020088 	.word	0x40020088
 8003c28:	400200a0 	.word	0x400200a0
 8003c2c:	400200b8 	.word	0x400200b8
 8003c30:	40020410 	.word	0x40020410
 8003c34:	40020428 	.word	0x40020428
 8003c38:	40020440 	.word	0x40020440
 8003c3c:	40020458 	.word	0x40020458
 8003c40:	40020470 	.word	0x40020470
 8003c44:	40020488 	.word	0x40020488
 8003c48:	400204a0 	.word	0x400204a0
 8003c4c:	400204b8 	.word	0x400204b8
 8003c50:	aaaaaaab 	.word	0xaaaaaaab
 8003c54:	08008aa0 	.word	0x08008aa0
 8003c58:	fffffc00 	.word	0xfffffc00

08003c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d120      	bne.n	8003cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d858      	bhi.n	8003d2a <DMA_CheckFifoParam+0xce>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <DMA_CheckFifoParam+0x24>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca3 	.word	0x08003ca3
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003d2b 	.word	0x08003d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d048      	beq.n	8003d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ca0:	e045      	b.n	8003d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003caa:	d142      	bne.n	8003d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cb0:	e03f      	b.n	8003d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d123      	bne.n	8003d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d838      	bhi.n	8003d36 <DMA_CheckFifoParam+0xda>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <DMA_CheckFifoParam+0x70>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ce3 	.word	0x08003ce3
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	08003cf5 	.word	0x08003cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce0:	e030      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d025      	beq.n	8003d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cf2:	e022      	b.n	8003d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cfc:	d11f      	bne.n	8003d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d02:	e01c      	b.n	8003d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d902      	bls.n	8003d12 <DMA_CheckFifoParam+0xb6>
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d003      	beq.n	8003d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d10:	e018      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
        break;
 8003d16:	e015      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
    break;
 8003d28:	e00b      	b.n	8003d42 <DMA_CheckFifoParam+0xe6>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e00a      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e008      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e006      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e004      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e002      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <DMA_CheckFifoParam+0xe8>
    break;
 8003d42:	bf00      	nop
    }
  }

  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop

08003d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a36      	ldr	r2, [pc, #216]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a35      	ldr	r2, [pc, #212]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01a      	beq.n	8003df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	3b08      	subs	r3, #8
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003df0:	e024      	b.n	8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3b10      	subs	r3, #16
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d806      	bhi.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d902      	bls.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3308      	adds	r3, #8
 8003e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	58025408 	.word	0x58025408
 8003e4c:	5802541c 	.word	0x5802541c
 8003e50:	58025430 	.word	0x58025430
 8003e54:	58025444 	.word	0x58025444
 8003e58:	58025458 	.word	0x58025458
 8003e5c:	5802546c 	.word	0x5802546c
 8003e60:	58025480 	.word	0x58025480
 8003e64:	58025494 	.word	0x58025494
 8003e68:	cccccccd 	.word	0xcccccccd
 8003e6c:	16009600 	.word	0x16009600
 8003e70:	58025880 	.word	0x58025880
 8003e74:	aaaaaaab 	.word	0xaaaaaaab
 8003e78:	400204b8 	.word	0x400204b8
 8003e7c:	4002040f 	.word	0x4002040f
 8003e80:	10008200 	.word	0x10008200
 8003e84:	40020880 	.word	0x40020880

08003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04a      	beq.n	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d847      	bhi.n	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f10:	671a      	str	r2, [r3, #112]	; 0x70
 8003f12:	e009      	b.n	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	58025408 	.word	0x58025408
 8003f44:	5802541c 	.word	0x5802541c
 8003f48:	58025430 	.word	0x58025430
 8003f4c:	58025444 	.word	0x58025444
 8003f50:	58025458 	.word	0x58025458
 8003f54:	5802546c 	.word	0x5802546c
 8003f58:	58025480 	.word	0x58025480
 8003f5c:	58025494 	.word	0x58025494
 8003f60:	1600963f 	.word	0x1600963f
 8003f64:	58025940 	.word	0x58025940
 8003f68:	1000823f 	.word	0x1000823f
 8003f6c:	40020940 	.word	0x40020940

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f7e:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <HAL_GPIO_Init+0x234>)
 8003f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f82:	e194      	b.n	80042ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8186 	beq.w	80042a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d005      	beq.n	8003fb4 <HAL_GPIO_Init+0x44>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d130      	bne.n	8004016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fea:	2201      	movs	r2, #1
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0201 	and.w	r2, r3, #1
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b03      	cmp	r3, #3
 8004020:	d017      	beq.n	8004052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d123      	bne.n	80040a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	08da      	lsrs	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3208      	adds	r2, #8
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2203      	movs	r2, #3
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80e0 	beq.w	80042a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e8:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_GPIO_Init+0x238>)
 80040ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ee:	4a2e      	ldr	r2, [pc, #184]	; (80041a8 <HAL_GPIO_Init+0x238>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_GPIO_Init+0x238>)
 80040fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004106:	4a29      	ldr	r2, [pc, #164]	; (80041ac <HAL_GPIO_Init+0x23c>)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	3302      	adds	r3, #2
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <HAL_GPIO_Init+0x240>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d052      	beq.n	80041d8 <HAL_GPIO_Init+0x268>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_GPIO_Init+0x244>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d031      	beq.n	800419e <HAL_GPIO_Init+0x22e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_GPIO_Init+0x248>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02b      	beq.n	800419a <HAL_GPIO_Init+0x22a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <HAL_GPIO_Init+0x24c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d025      	beq.n	8004196 <HAL_GPIO_Init+0x226>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_GPIO_Init+0x250>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01f      	beq.n	8004192 <HAL_GPIO_Init+0x222>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_GPIO_Init+0x254>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d019      	beq.n	800418e <HAL_GPIO_Init+0x21e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_GPIO_Init+0x258>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_GPIO_Init+0x21a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_GPIO_Init+0x25c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00d      	beq.n	8004186 <HAL_GPIO_Init+0x216>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_GPIO_Init+0x260>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <HAL_GPIO_Init+0x212>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_GPIO_Init+0x264>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <HAL_GPIO_Init+0x20e>
 800417a:	2309      	movs	r3, #9
 800417c:	e02d      	b.n	80041da <HAL_GPIO_Init+0x26a>
 800417e:	230a      	movs	r3, #10
 8004180:	e02b      	b.n	80041da <HAL_GPIO_Init+0x26a>
 8004182:	2308      	movs	r3, #8
 8004184:	e029      	b.n	80041da <HAL_GPIO_Init+0x26a>
 8004186:	2307      	movs	r3, #7
 8004188:	e027      	b.n	80041da <HAL_GPIO_Init+0x26a>
 800418a:	2306      	movs	r3, #6
 800418c:	e025      	b.n	80041da <HAL_GPIO_Init+0x26a>
 800418e:	2305      	movs	r3, #5
 8004190:	e023      	b.n	80041da <HAL_GPIO_Init+0x26a>
 8004192:	2304      	movs	r3, #4
 8004194:	e021      	b.n	80041da <HAL_GPIO_Init+0x26a>
 8004196:	2303      	movs	r3, #3
 8004198:	e01f      	b.n	80041da <HAL_GPIO_Init+0x26a>
 800419a:	2302      	movs	r3, #2
 800419c:	e01d      	b.n	80041da <HAL_GPIO_Init+0x26a>
 800419e:	2301      	movs	r3, #1
 80041a0:	e01b      	b.n	80041da <HAL_GPIO_Init+0x26a>
 80041a2:	bf00      	nop
 80041a4:	58000080 	.word	0x58000080
 80041a8:	58024400 	.word	0x58024400
 80041ac:	58000400 	.word	0x58000400
 80041b0:	58020000 	.word	0x58020000
 80041b4:	58020400 	.word	0x58020400
 80041b8:	58020800 	.word	0x58020800
 80041bc:	58020c00 	.word	0x58020c00
 80041c0:	58021000 	.word	0x58021000
 80041c4:	58021400 	.word	0x58021400
 80041c8:	58021800 	.word	0x58021800
 80041cc:	58021c00 	.word	0x58021c00
 80041d0:	58022000 	.word	0x58022000
 80041d4:	58022400 	.word	0x58022400
 80041d8:	2300      	movs	r3, #0
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	f002 0203 	and.w	r2, r2, #3
 80041e0:	0092      	lsls	r2, r2, #2
 80041e2:	4093      	lsls	r3, r2
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041ea:	4938      	ldr	r1, [pc, #224]	; (80042cc <HAL_GPIO_Init+0x35c>)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	3302      	adds	r3, #2
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800421e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800424c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f ae63 	bne.w	8003f84 <HAL_GPIO_Init+0x14>
  }
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	3724      	adds	r7, #36	; 0x24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	58000400 	.word	0x58000400

080042d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_PWREx_ConfigSupply+0x70>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d00a      	beq.n	80042fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_PWREx_ConfigSupply+0x70>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01f      	b.n	8004336 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e01d      	b.n	8004336 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_PWREx_ConfigSupply+0x70>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 0207 	bic.w	r2, r3, #7
 8004302:	490f      	ldr	r1, [pc, #60]	; (8004340 <HAL_PWREx_ConfigSupply+0x70>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4313      	orrs	r3, r2
 8004308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800430a:	f7fc fe51 	bl	8000fb0 <HAL_GetTick>
 800430e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004310:	e009      	b.n	8004326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004312:	f7fc fe4d 	bl	8000fb0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004320:	d901      	bls.n	8004326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e007      	b.n	8004336 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_PWREx_ConfigSupply+0x70>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d1ee      	bne.n	8004312 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024800 	.word	0x58024800

08004344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f000 bc1d 	b.w	8004b92 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8087 	beq.w	8004474 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b99      	ldr	r3, [pc, #612]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004370:	4b96      	ldr	r3, [pc, #600]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	2b10      	cmp	r3, #16
 800437a:	d007      	beq.n	800438c <HAL_RCC_OscConfig+0x48>
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b18      	cmp	r3, #24
 8004380:	d110      	bne.n	80043a4 <HAL_RCC_OscConfig+0x60>
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d06c      	beq.n	8004472 <HAL_RCC_OscConfig+0x12e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d168      	bne.n	8004472 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e3f6      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x78>
 80043ae:	4b87      	ldr	r3, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a86      	ldr	r2, [pc, #536]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e02e      	b.n	800441a <HAL_RCC_OscConfig+0xd6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x9a>
 80043c4:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a80      	ldr	r2, [pc, #512]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b7e      	ldr	r3, [pc, #504]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a7d      	ldr	r2, [pc, #500]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e01d      	b.n	800441a <HAL_RCC_OscConfig+0xd6>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e6:	d10c      	bne.n	8004402 <HAL_RCC_OscConfig+0xbe>
 80043e8:	4b78      	ldr	r3, [pc, #480]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b75      	ldr	r3, [pc, #468]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a74      	ldr	r2, [pc, #464]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e00b      	b.n	800441a <HAL_RCC_OscConfig+0xd6>
 8004402:	4b72      	ldr	r3, [pc, #456]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a71      	ldr	r2, [pc, #452]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004418:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d013      	beq.n	800444a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fc fdc5 	bl	8000fb0 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442a:	f7fc fdc1 	bl	8000fb0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e3aa      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800443c:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0xe6>
 8004448:	e014      	b.n	8004474 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fc fdb1 	bl	8000fb0 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004452:	f7fc fdad 	bl	8000fb0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	; 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e396      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x10e>
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004472:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80cb 	beq.w	8004618 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004482:	4b52      	ldr	r3, [pc, #328]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800448c:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_RCC_OscConfig+0x164>
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	2b18      	cmp	r3, #24
 800449c:	d156      	bne.n	800454c <HAL_RCC_OscConfig+0x208>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d151      	bne.n	800454c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x17c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e368      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044c0:	4b42      	ldr	r3, [pc, #264]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0219 	bic.w	r2, r3, #25
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	493f      	ldr	r1, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d2:	f7fc fd6d 	bl	8000fb0 <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fc fd69 	bl	8000fb0 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e352      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	f7fc fd66 	bl	8000fc8 <HAL_GetREVID>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8004502:	4293      	cmp	r3, r2
 8004504:	d817      	bhi.n	8004536 <HAL_RCC_OscConfig+0x1f2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d108      	bne.n	8004520 <HAL_RCC_OscConfig+0x1dc>
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004516:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800451e:	e07b      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	4927      	ldr	r1, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004534:	e070      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	4921      	ldr	r1, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454a:	e065      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d048      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 0219 	bic.w	r2, r3, #25
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	491a      	ldr	r1, [pc, #104]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fc fd23 	bl	8000fb0 <HAL_GetTick>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456e:	f7fc fd1f 	bl	8000fb0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e308      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	f7fc fd1c 	bl	8000fc8 <HAL_GetREVID>
 8004590:	4603      	mov	r3, r0
 8004592:	f241 0203 	movw	r2, #4099	; 0x1003
 8004596:	4293      	cmp	r3, r2
 8004598:	d81a      	bhi.n	80045d0 <HAL_RCC_OscConfig+0x28c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d108      	bne.n	80045b4 <HAL_RCC_OscConfig+0x270>
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80045ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b0:	6053      	str	r3, [r2, #4]
 80045b2:	e031      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	4902      	ldr	r1, [pc, #8]	; (80045cc <HAL_RCC_OscConfig+0x288>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	e026      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	4b9a      	ldr	r3, [pc, #616]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	4997      	ldr	r1, [pc, #604]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	e018      	b.n	8004618 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b95      	ldr	r3, [pc, #596]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a94      	ldr	r2, [pc, #592]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fc fcdd 	bl	8000fb0 <HAL_GetTick>
 80045f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fc fcd9 	bl	8000fb0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e2c2      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800460c:	4b8b      	ldr	r3, [pc, #556]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a9 	beq.w	8004778 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004626:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004630:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d007      	beq.n	800464c <HAL_RCC_OscConfig+0x308>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b18      	cmp	r3, #24
 8004640:	d13a      	bne.n	80046b8 <HAL_RCC_OscConfig+0x374>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d135      	bne.n	80046b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800464c:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x320>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e296      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004664:	f7fc fcb0 	bl	8000fc8 <HAL_GetREVID>
 8004668:	4603      	mov	r3, r0
 800466a:	f241 0203 	movw	r2, #4099	; 0x1003
 800466e:	4293      	cmp	r3, r2
 8004670:	d817      	bhi.n	80046a2 <HAL_RCC_OscConfig+0x35e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	2b20      	cmp	r3, #32
 8004678:	d108      	bne.n	800468c <HAL_RCC_OscConfig+0x348>
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004682:	4a6e      	ldr	r2, [pc, #440]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004688:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800468a:	e075      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800468c:	4b6b      	ldr	r3, [pc, #428]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	4968      	ldr	r1, [pc, #416]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a0:	e06a      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046a2:	4b66      	ldr	r3, [pc, #408]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	4962      	ldr	r1, [pc, #392]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b6:	e05f      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d042      	beq.n	8004746 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046c0:	4b5e      	ldr	r3, [pc, #376]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5d      	ldr	r2, [pc, #372]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80046c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc fc70 	bl	8000fb0 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046d4:	f7fc fc6c 	bl	8000fb0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e255      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e6:	4b55      	ldr	r3, [pc, #340]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046f2:	f7fc fc69 	bl	8000fc8 <HAL_GetREVID>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d817      	bhi.n	8004730 <HAL_RCC_OscConfig+0x3ec>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d108      	bne.n	800471a <HAL_RCC_OscConfig+0x3d6>
 8004708:	4b4c      	ldr	r3, [pc, #304]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004710:	4a4a      	ldr	r2, [pc, #296]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004716:	6053      	str	r3, [r2, #4]
 8004718:	e02e      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
 800471a:	4b48      	ldr	r3, [pc, #288]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	069b      	lsls	r3, r3, #26
 8004728:	4944      	ldr	r1, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
 800472e:	e023      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
 8004730:	4b42      	ldr	r3, [pc, #264]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	493f      	ldr	r1, [pc, #252]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	60cb      	str	r3, [r1, #12]
 8004744:	e018      	b.n	8004778 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004746:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3c      	ldr	r2, [pc, #240]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800474c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004752:	f7fc fc2d 	bl	8000fb0 <HAL_GetTick>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800475a:	f7fc fc29 	bl	8000fb0 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e212      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800476c:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d036      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fc fc0a 	bl	8000fb0 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fc fc06 	bl	8000fb0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1ef      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x45c>
 80047be:	e018      	b.n	80047f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fc fbf0 	bl	8000fb0 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fc fbec 	bl	8000fb0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1d5      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d039      	beq.n	8004872 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01c      	beq.n	8004840 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800480c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004810:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004812:	f7fc fbcd 	bl	8000fb0 <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800481a:	f7fc fbc9 	bl	8000fb0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1b2      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x4d6>
 8004838:	e01b      	b.n	8004872 <HAL_RCC_OscConfig+0x52e>
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004840:	4b9b      	ldr	r3, [pc, #620]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a9a      	ldr	r2, [pc, #616]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800484a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800484c:	f7fc fbb0 	bl	8000fb0 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004854:	f7fc fbac 	bl	8000fb0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e195      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004866:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8081 	beq.w	8004982 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004880:	4b8c      	ldr	r3, [pc, #560]	; (8004ab4 <HAL_RCC_OscConfig+0x770>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a8b      	ldr	r2, [pc, #556]	; (8004ab4 <HAL_RCC_OscConfig+0x770>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800488c:	f7fc fb90 	bl	8000fb0 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fc fb8c 	bl	8000fb0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e175      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a6:	4b83      	ldr	r3, [pc, #524]	; (8004ab4 <HAL_RCC_OscConfig+0x770>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d106      	bne.n	80048c8 <HAL_RCC_OscConfig+0x584>
 80048ba:	4b7d      	ldr	r3, [pc, #500]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	4a7c      	ldr	r2, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
 80048c6:	e02d      	b.n	8004924 <HAL_RCC_OscConfig+0x5e0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10c      	bne.n	80048ea <HAL_RCC_OscConfig+0x5a6>
 80048d0:	4b77      	ldr	r3, [pc, #476]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a76      	ldr	r2, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
 80048dc:	4b74      	ldr	r3, [pc, #464]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a73      	ldr	r2, [pc, #460]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048e2:	f023 0304 	bic.w	r3, r3, #4
 80048e6:	6713      	str	r3, [r2, #112]	; 0x70
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x5e0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0x5c8>
 80048f2:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a6e      	ldr	r2, [pc, #440]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70
 80048fe:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a6b      	ldr	r2, [pc, #428]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	e00b      	b.n	8004924 <HAL_RCC_OscConfig+0x5e0>
 800490c:	4b68      	ldr	r3, [pc, #416]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a67      	ldr	r2, [pc, #412]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	4b65      	ldr	r3, [pc, #404]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a64      	ldr	r2, [pc, #400]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 800491e:	f023 0304 	bic.w	r3, r3, #4
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d015      	beq.n	8004958 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fc fb40 	bl	8000fb0 <HAL_GetTick>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fc fb3c 	bl	8000fb0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e123      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ee      	beq.n	8004934 <HAL_RCC_OscConfig+0x5f0>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fc fb2a 	bl	8000fb0 <HAL_GetTick>
 800495c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fc fb26 	bl	8000fb0 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e10d      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004976:	4b4e      	ldr	r3, [pc, #312]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ee      	bne.n	8004960 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8102 	beq.w	8004b90 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800498c:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004994:	2b18      	cmp	r3, #24
 8004996:	f000 80bd 	beq.w	8004b14 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b02      	cmp	r3, #2
 80049a0:	f040 809e 	bne.w	8004ae0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80049aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fc fafe 	bl	8000fb0 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fc fafa 	bl	8000fb0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0e3      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_RCC_OscConfig+0x774>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	430a      	orrs	r2, r1
 80049ea:	4931      	ldr	r1, [pc, #196]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	628b      	str	r3, [r1, #40]	; 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	3b01      	subs	r3, #1
 80049f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	3b01      	subs	r3, #1
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a20:	4923      	ldr	r1, [pc, #140]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a32:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <HAL_RCC_OscConfig+0x778>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a3e:	00d2      	lsls	r2, r2, #3
 8004a40:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f023 020c 	bic.w	r2, r3, #12
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a58:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f023 0202 	bic.w	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	4912      	ldr	r1, [pc, #72]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	4a07      	ldr	r2, [pc, #28]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fc fa83 	bl	8000fb0 <HAL_GetTick>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aac:	e011      	b.n	8004ad2 <HAL_RCC_OscConfig+0x78e>
 8004aae:	bf00      	nop
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	58024800 	.word	0x58024800
 8004ab8:	fffffc0c 	.word	0xfffffc0c
 8004abc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fc fa76 	bl	8000fb0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e05f      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ad2:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x77c>
 8004ade:	e057      	b.n	8004b90 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2d      	ldr	r2, [pc, #180]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fc fa60 	bl	8000fb0 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fc fa5c 	bl	8000fb0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e045      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b06:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x7b0>
 8004b12:	e03d      	b.n	8004b90 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b14:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <HAL_RCC_OscConfig+0x858>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d031      	beq.n	8004b8c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f003 0203 	and.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d12a      	bne.n	8004b8c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d122      	bne.n	8004b8c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d11a      	bne.n	8004b8c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0a5b      	lsrs	r3, r3, #9
 8004b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d111      	bne.n	8004b8c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d108      	bne.n	8004b8c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400

08004ba0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e19c      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b87      	ldr	r3, [pc, #540]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 020f 	bic.w	r2, r3, #15
 8004bca:	4985      	ldr	r1, [pc, #532]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b83      	ldr	r3, [pc, #524]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e184      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d010      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d908      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4975      	ldr	r1, [pc, #468]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	4b70      	ldr	r3, [pc, #448]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d908      	bls.n	8004c40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	496a      	ldr	r1, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d010      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d908      	bls.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c5c:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	495e      	ldr	r1, [pc, #376]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d908      	bls.n	8004c9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4953      	ldr	r1, [pc, #332]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d908      	bls.n	8004cca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f023 020f 	bic.w	r2, r3, #15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4947      	ldr	r1, [pc, #284]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d055      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cd6:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4940      	ldr	r1, [pc, #256]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf0:	4b3c      	ldr	r3, [pc, #240]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d121      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0f6      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d115      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0ea      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0de      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d30:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0d6      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f023 0207 	bic.w	r2, r3, #7
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4925      	ldr	r1, [pc, #148]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fc f92d 	bl	8000fb0 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5a:	f7fc f929 	bl	8000fb0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0be      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d1eb      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d208      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f023 020f 	bic.w	r2, r3, #15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d214      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	4906      	ldr	r1, [pc, #24]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e086      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
 8004de0:	52002000 	.word	0x52002000
 8004de4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d208      	bcs.n	8004e16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e04:	4b3c      	ldr	r3, [pc, #240]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4939      	ldr	r1, [pc, #228]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d208      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e32:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	492e      	ldr	r1, [pc, #184]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d208      	bcs.n	8004e72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	4922      	ldr	r1, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d208      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4917      	ldr	r1, [pc, #92]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ea0:	f000 f844 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	4912      	ldr	r1, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x35c>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_RCC_ClockConfig+0x35c>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x360>)
 8004ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x364>)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <HAL_RCC_ClockConfig+0x368>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fc f81a 	bl	8000f1c <HAL_InitTick>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	08008a90 	.word	0x08008a90
 8004f00:	24002008 	.word	0x24002008
 8004f04:	24002004 	.word	0x24002004
 8004f08:	2400200c 	.word	0x2400200c

08004f0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_EnableCSS+0x1c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <HAL_RCC_EnableCSS+0x1c>)
 8004f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	58024400 	.word	0x58024400

08004f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f32:	4bb3      	ldr	r3, [pc, #716]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3a:	2b18      	cmp	r3, #24
 8004f3c:	f200 8155 	bhi.w	80051ea <HAL_RCC_GetSysClockFreq+0x2be>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004fad 	.word	0x08004fad
 8004f4c:	080051eb 	.word	0x080051eb
 8004f50:	080051eb 	.word	0x080051eb
 8004f54:	080051eb 	.word	0x080051eb
 8004f58:	080051eb 	.word	0x080051eb
 8004f5c:	080051eb 	.word	0x080051eb
 8004f60:	080051eb 	.word	0x080051eb
 8004f64:	080051eb 	.word	0x080051eb
 8004f68:	08004fd3 	.word	0x08004fd3
 8004f6c:	080051eb 	.word	0x080051eb
 8004f70:	080051eb 	.word	0x080051eb
 8004f74:	080051eb 	.word	0x080051eb
 8004f78:	080051eb 	.word	0x080051eb
 8004f7c:	080051eb 	.word	0x080051eb
 8004f80:	080051eb 	.word	0x080051eb
 8004f84:	080051eb 	.word	0x080051eb
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	080051eb 	.word	0x080051eb
 8004f90:	080051eb 	.word	0x080051eb
 8004f94:	080051eb 	.word	0x080051eb
 8004f98:	080051eb 	.word	0x080051eb
 8004f9c:	080051eb 	.word	0x080051eb
 8004fa0:	080051eb 	.word	0x080051eb
 8004fa4:	080051eb 	.word	0x080051eb
 8004fa8:	08004fdf 	.word	0x08004fdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fac:	4b94      	ldr	r3, [pc, #592]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fb8:	4b91      	ldr	r3, [pc, #580]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	08db      	lsrs	r3, r3, #3
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	4a90      	ldr	r2, [pc, #576]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004fca:	e111      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fcc:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fce:	61bb      	str	r3, [r7, #24]
    break;
 8004fd0:	e10e      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	; (8005208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd4:	61bb      	str	r3, [r7, #24]
    break;
 8004fd6:	e10b      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	; (800520c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fda:	61bb      	str	r3, [r7, #24]
    break;
 8004fdc:	e108      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fe8:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ff4:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ffe:	4b80      	ldr	r3, [pc, #512]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	08db      	lsrs	r3, r3, #3
 8005004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80e1 	beq.w	80051e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f000 8083 	beq.w	8005130 <HAL_RCC_GetSysClockFreq+0x204>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b02      	cmp	r3, #2
 800502e:	f200 80a1 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x248>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x114>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d056      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800503e:	e099      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005040:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02d      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800504c:	4b6c      	ldr	r3, [pc, #432]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	4a6b      	ldr	r2, [pc, #428]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
 800505c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b62      	ldr	r3, [pc, #392]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a02 	vldr	s12, [r7, #8]
 800508a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80050a6:	e087      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b51      	ldr	r3, [pc, #324]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ea:	e065      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800512e:	e043      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800521c <HAL_RCC_GetSysClockFreq+0x2f0>
 800513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005152:	ed97 6a02 	vldr	s12, [r7, #8]
 8005156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005172:	e021      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a02 	vldr	s12, [r7, #8]
 800519a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	0a5b      	lsrs	r3, r3, #9
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	3301      	adds	r3, #1
 80051c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051dc:	ee17 3a90 	vmov	r3, s15
 80051e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051e2:	e005      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
    break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051ec:	61bb      	str	r3, [r7, #24]
    break;
 80051ee:	bf00      	nop
  }

  return sysclockfreq;
 80051f0:	69bb      	ldr	r3, [r7, #24]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	03d09000 	.word	0x03d09000
 8005208:	003d0900 	.word	0x003d0900
 800520c:	016e3600 	.word	0x016e3600
 8005210:	46000000 	.word	0x46000000
 8005214:	4c742400 	.word	0x4c742400
 8005218:	4a742400 	.word	0x4a742400
 800521c:	4bb71b00 	.word	0x4bb71b00

08005220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005226:	f7ff fe81 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <HAL_RCC_GetHCLKFreq+0x50>)
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_RCC_GetHCLKFreq+0x54>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_RCC_GetHCLKFreq+0x50>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <HAL_RCC_GetHCLKFreq+0x54>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_RCC_GetHCLKFreq+0x58>)
 800525c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800525e:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <HAL_RCC_GetHCLKFreq+0x58>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	58024400 	.word	0x58024400
 8005274:	08008a90 	.word	0x08008a90
 8005278:	24002008 	.word	0x24002008
 800527c:	24002004 	.word	0x24002004

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005284:	f7ff ffcc 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4904      	ldr	r1, [pc, #16]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024400 	.word	0x58024400
 80052a8:	08008a90 	.word	0x08008a90

080052ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052b0:	f7ff ffb6 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4904      	ldr	r1, [pc, #16]	; (80052d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	58024400 	.word	0x58024400
 80052d4:	08008a90 	.word	0x08008a90

080052d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80052de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d105      	bne.n	80052f6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80052ea:	f000 f809 	bl	8005300 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80052ee:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80052f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400

08005300 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800531c:	2300      	movs	r3, #0
 800531e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d03f      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005334:	d02a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800533a:	d824      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800533c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005340:	d018      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005346:	d81e      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800534c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005350:	d007      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005352:	e018      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005354:	4ba3      	ldr	r3, [pc, #652]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	4aa2      	ldr	r2, [pc, #648]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800535a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005360:	e015      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f9d5 	bl	8006718 <RCCEx_PLL2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005372:	e00c      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3324      	adds	r3, #36	; 0x24
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fa7e 	bl	800687c <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005384:	e003      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
      break;
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800538c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005394:	4b93      	ldr	r3, [pc, #588]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a0:	4990      	ldr	r1, [pc, #576]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	650b      	str	r3, [r1, #80]	; 0x50
 80053a6:	e001      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d03d      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d826      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053dd 	.word	0x080053dd
 80053cc:	080053eb 	.word	0x080053eb
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	08005415 	.word	0x08005415
 80053d8:	08005415 	.word	0x08005415
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053dc:	4b81      	ldr	r3, [pc, #516]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	4a80      	ldr	r2, [pc, #512]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053e8:	e015      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f001 f991 	bl	8006718 <RCCEx_PLL2_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053fa:	e00c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3324      	adds	r3, #36	; 0x24
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fa3a 	bl	800687c <RCCEx_PLL3_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800540c:	e003      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	75fb      	strb	r3, [r7, #23]
      break;
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800541c:	4b71      	ldr	r3, [pc, #452]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	f023 0207 	bic.w	r2, r3, #7
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	496e      	ldr	r1, [pc, #440]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	650b      	str	r3, [r1, #80]	; 0x50
 800542e:	e001      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543c:	2b00      	cmp	r3, #0
 800543e:	d042      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005448:	d02b      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d825      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005450:	2bc0      	cmp	r3, #192	; 0xc0
 8005452:	d028      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005454:	2bc0      	cmp	r3, #192	; 0xc0
 8005456:	d821      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d016      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d81d      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d007      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005468:	e018      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546a:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a5d      	ldr	r2, [pc, #372]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005476:	e017      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 f94a 	bl	8006718 <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005488:	e00e      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3324      	adds	r3, #36	; 0x24
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f9f3 	bl	800687c <RCCEx_PLL3_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800549a:	e005      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054ae:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ba:	494a      	ldr	r1, [pc, #296]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	650b      	str	r3, [r1, #80]	; 0x50
 80054c0:	e001      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d049      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054dc:	d030      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80054de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e2:	d82a      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054e8:	d02c      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80054ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054ee:	d824      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f4:	d018      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80054f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054fa:	d81e      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005504:	d007      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005506:	e018      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a35      	ldr	r2, [pc, #212]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005514:	e017      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f001 f8fb 	bl	8006718 <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005526:	e00e      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3324      	adds	r3, #36	; 0x24
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f001 f9a4 	bl	800687c <RCCEx_PLL3_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005538:	e005      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
      break;
 800553e:	e002      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005540:	bf00      	nop
 8005542:	e000      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005550:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800555a:	4922      	ldr	r1, [pc, #136]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800555c:	4313      	orrs	r3, r2
 800555e:	658b      	str	r3, [r1, #88]	; 0x58
 8005560:	e001      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04b      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800557c:	d030      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800557e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005582:	d82a      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005584:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005588:	d02e      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800558a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800558e:	d824      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005594:	d018      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800559a:	d81e      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80055a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a4:	d007      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80055a6:	e018      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055b4:	e019      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f8ab 	bl	8006718 <RCCEx_PLL2_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80055c6:	e010      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 f954 	bl	800687c <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055d8:	e007      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
      break;
 80055de:	e004      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80055e0:	bf00      	nop
 80055e2:	e002      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80055e4:	58024400 	.word	0x58024400
      break;
 80055e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055f0:	4b99      	ldr	r3, [pc, #612]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055fe:	4996      	ldr	r1, [pc, #600]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005600:	4313      	orrs	r3, r2
 8005602:	658b      	str	r3, [r1, #88]	; 0x58
 8005604:	e001      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d032      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d01c      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d817      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005622:	2b20      	cmp	r3, #32
 8005624:	d00c      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d813      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d10f      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005632:	4b89      	ldr	r3, [pc, #548]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	4a88      	ldr	r2, [pc, #544]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800563e:	e00e      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	2102      	movs	r1, #2
 8005646:	4618      	mov	r0, r3
 8005648:	f001 f866 	bl	8006718 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005650:	e005      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005664:	4b7c      	ldr	r3, [pc, #496]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005670:	4979      	ldr	r1, [pc, #484]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005672:	4313      	orrs	r3, r2
 8005674:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d047      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005690:	d030      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005696:	d82a      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800569c:	d02c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800569e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a2:	d824      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a8:	d018      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d81e      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80056b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b8:	d007      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80056ba:	e018      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b66      	ldr	r3, [pc, #408]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056c8:	e017      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f821 	bl	8006718 <RCCEx_PLL2_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056da:	e00e      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f8ca 	bl	800687c <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056ec:	e005      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
      break;
 80056f2:	e002      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80056f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005700:	4b55      	ldr	r3, [pc, #340]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	4952      	ldr	r1, [pc, #328]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800570e:	4313      	orrs	r3, r2
 8005710:	650b      	str	r3, [r1, #80]	; 0x50
 8005712:	e001      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d049      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800572c:	d02e      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800572e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005732:	d828      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005738:	d02a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800573a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800573e:	d822      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005744:	d026      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800574a:	d81c      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800574c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005750:	d010      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005756:	d816      	bhi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d111      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f000 ffd5 	bl	8006718 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005772:	e012      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3324      	adds	r3, #36	; 0x24
 8005778:	2101      	movs	r1, #1
 800577a:	4618      	mov	r0, r3
 800577c:	f001 f87e 	bl	800687c <RCCEx_PLL3_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005784:	e009      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
      break;
 800578a:	e006      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800578c:	bf00      	nop
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057a0:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	492a      	ldr	r1, [pc, #168]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	650b      	str	r3, [r1, #80]	; 0x50
 80057b2:	e001      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d04d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ce:	d02e      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80057d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057d4:	d828      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d02a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d822      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057e6:	d026      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80057e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ec:	d81c      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f2:	d010      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f8:	d816      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01d      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80057fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005802:	d111      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f000 ff84 	bl	8006718 <RCCEx_PLL2_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005814:	e012      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f001 f82d 	bl	800687c <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005826:	e009      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
      break;
 800582c:	e006      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800582e:	bf00      	nop
 8005830:	e004      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005832:	bf00      	nop
 8005834:	e002      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800583a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005850:	4901      	ldr	r1, [pc, #4]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005852:	4313      	orrs	r3, r2
 8005854:	658b      	str	r3, [r1, #88]	; 0x58
 8005856:	e003      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d02f      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005874:	d00e      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587a:	d814      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d015      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005884:	d10f      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005886:	4baf      	ldr	r3, [pc, #700]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	4aae      	ldr	r2, [pc, #696]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800588c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005892:	e00c      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	2101      	movs	r1, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f000 ff3c 	bl	8006718 <RCCEx_PLL2_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
      break;
 80058aa:	e000      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80058ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058b4:	4ba3      	ldr	r3, [pc, #652]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c0:	49a0      	ldr	r1, [pc, #640]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	650b      	str	r3, [r1, #80]	; 0x50
 80058c6:	e001      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d032      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d81b      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800591f 	.word	0x0800591f
 80058ec:	080058f9 	.word	0x080058f9
 80058f0:	08005907 	.word	0x08005907
 80058f4:	0800591f 	.word	0x0800591f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f8:	4b92      	ldr	r3, [pc, #584]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a91      	ldr	r2, [pc, #580]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005904:	e00c      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2102      	movs	r1, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 ff03 	bl	8006718 <RCCEx_PLL2_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800591e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005926:	4b87      	ldr	r3, [pc, #540]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	4984      	ldr	r1, [pc, #528]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005934:	4313      	orrs	r3, r2
 8005936:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005938:	e001      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8086 	beq.w	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800594c:	4b7e      	ldr	r3, [pc, #504]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7d      	ldr	r2, [pc, #500]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005958:	f7fb fb2a 	bl	8000fb0 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595e:	e009      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005960:	f7fb fb26 	bl	8000fb0 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d902      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
        break;
 8005972:	e005      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005974:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ef      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d166      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005986:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005990:	4053      	eors	r3, r2
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d013      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599a:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059a4:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a66      	ldr	r2, [pc, #408]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b0:	4b64      	ldr	r3, [pc, #400]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a63      	ldr	r2, [pc, #396]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059bc:	4a61      	ldr	r2, [pc, #388]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059cc:	d115      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fb faef 	bl	8000fb0 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059d4:	e00b      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fb faeb 	bl	8000fb0 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d902      	bls.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	75fb      	strb	r3, [r7, #23]
            break;
 80059ec:	e005      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ee:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0ed      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d126      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0e:	d10d      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a10:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a1e:	0919      	lsrs	r1, r3, #4
 8005a20:	4b4a      	ldr	r3, [pc, #296]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005a22:	400b      	ands	r3, r1
 8005a24:	4947      	ldr	r1, [pc, #284]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]
 8005a2a:	e005      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a2c:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4a44      	ldr	r2, [pc, #272]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a36:	6113      	str	r3, [r2, #16]
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a46:	493f      	ldr	r1, [pc, #252]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	670b      	str	r3, [r1, #112]	; 0x70
 8005a4c:	e004      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	75bb      	strb	r3, [r7, #22]
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8085 	beq.w	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a6a:	2b28      	cmp	r3, #40	; 0x28
 8005a6c:	d866      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005b51 	.word	0x08005b51
 8005a78:	08005b3d 	.word	0x08005b3d
 8005a7c:	08005b3d 	.word	0x08005b3d
 8005a80:	08005b3d 	.word	0x08005b3d
 8005a84:	08005b3d 	.word	0x08005b3d
 8005a88:	08005b3d 	.word	0x08005b3d
 8005a8c:	08005b3d 	.word	0x08005b3d
 8005a90:	08005b3d 	.word	0x08005b3d
 8005a94:	08005b19 	.word	0x08005b19
 8005a98:	08005b3d 	.word	0x08005b3d
 8005a9c:	08005b3d 	.word	0x08005b3d
 8005aa0:	08005b3d 	.word	0x08005b3d
 8005aa4:	08005b3d 	.word	0x08005b3d
 8005aa8:	08005b3d 	.word	0x08005b3d
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005b3d 	.word	0x08005b3d
 8005ab4:	08005b2b 	.word	0x08005b2b
 8005ab8:	08005b3d 	.word	0x08005b3d
 8005abc:	08005b3d 	.word	0x08005b3d
 8005ac0:	08005b3d 	.word	0x08005b3d
 8005ac4:	08005b3d 	.word	0x08005b3d
 8005ac8:	08005b3d 	.word	0x08005b3d
 8005acc:	08005b3d 	.word	0x08005b3d
 8005ad0:	08005b3d 	.word	0x08005b3d
 8005ad4:	08005b51 	.word	0x08005b51
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005b3d 	.word	0x08005b3d
 8005ae0:	08005b3d 	.word	0x08005b3d
 8005ae4:	08005b3d 	.word	0x08005b3d
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005b3d 	.word	0x08005b3d
 8005af0:	08005b3d 	.word	0x08005b3d
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b3d 	.word	0x08005b3d
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b3d 	.word	0x08005b3d
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b3d 	.word	0x08005b3d
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b51 	.word	0x08005b51
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fdfa 	bl	8006718 <RCCEx_PLL2_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b28:	e013      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fea3 	bl	800687c <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	e007      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
 8005b48:	58024800 	.word	0x58024800
 8005b4c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b58:	4b96      	ldr	r3, [pc, #600]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b64:	4993      	ldr	r1, [pc, #588]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	654b      	str	r3, [r1, #84]	; 0x54
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d038      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d821      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005bcf 	.word	0x08005bcf
 8005b90:	08005ba5 	.word	0x08005ba5
 8005b94:	08005bb7 	.word	0x08005bb7
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bcf 	.word	0x08005bcf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	2101      	movs	r1, #1
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fdb4 	bl	8006718 <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3324      	adds	r3, #36	; 0x24
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fe5d 	bl	800687c <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
      break;
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005bd6:	4b77      	ldr	r3, [pc, #476]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f023 0207 	bic.w	r2, r3, #7
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	4974      	ldr	r1, [pc, #464]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	654b      	str	r3, [r1, #84]	; 0x54
 8005be8:	e001      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	d821      	bhi.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c4f 	.word	0x08005c4f
 8005c10:	08005c25 	.word	0x08005c25
 8005c14:	08005c37 	.word	0x08005c37
 8005c18:	08005c4f 	.word	0x08005c4f
 8005c1c:	08005c4f 	.word	0x08005c4f
 8005c20:	08005c4f 	.word	0x08005c4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fd74 	bl	8006718 <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c34:	e00c      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3324      	adds	r3, #36	; 0x24
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fe1d 	bl	800687c <RCCEx_PLL3_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c46:	e003      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c56:	4b57      	ldr	r3, [pc, #348]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	f023 0207 	bic.w	r2, r3, #7
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	4953      	ldr	r1, [pc, #332]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	658b      	str	r3, [r1, #88]	; 0x58
 8005c6a:	e001      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d04b      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c86:	d02e      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8c:	d828      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d02a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d822      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c9e:	d026      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca4:	d81c      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005caa:	d010      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb0:	d816      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cba:	d111      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fd28 	bl	8006718 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ccc:	e012      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3324      	adds	r3, #36	; 0x24
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fdd1 	bl	800687c <RCCEx_PLL3_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005cde:	e009      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d08:	492a      	ldr	r1, [pc, #168]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	654b      	str	r3, [r1, #84]	; 0x54
 8005d0e:	e001      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d04d      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d2a:	d02e      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d30:	d828      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d02a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d822      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d42:	d026      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d48:	d81c      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d816      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01d      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d111      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fcd6 	bl	8006718 <RCCEx_PLL2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d70:	e012      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3324      	adds	r3, #36	; 0x24
 8005d76:	2102      	movs	r1, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fd7f 	bl	800687c <RCCEx_PLL3_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d82:	e009      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
      break;
 8005d88:	e006      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e004      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e002      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dac:	4901      	ldr	r1, [pc, #4]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	658b      	str	r3, [r1, #88]	; 0x58
 8005db2:	e003      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d04b      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd2:	d02e      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005dd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd8:	d828      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d02a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de4:	d822      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005de6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dea:	d026      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005dec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005df0:	d81c      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df6:	d010      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfc:	d816      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01d      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e06:	d111      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fc82 	bl	8006718 <RCCEx_PLL2_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e18:	e012      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fd2b 	bl	800687c <RCCEx_PLL3_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e2a:	e009      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e32:	bf00      	nop
 8005e34:	e004      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e46:	4b9d      	ldr	r3, [pc, #628]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e54:	4999      	ldr	r1, [pc, #612]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5a:	e001      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d10a      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	2102      	movs	r1, #2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fcfc 	bl	800687c <RCCEx_PLL3_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e8e:	4b8b      	ldr	r3, [pc, #556]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9c:	4987      	ldr	r1, [pc, #540]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3324      	adds	r3, #36	; 0x24
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fcdb 	bl	800687c <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ed0:	4b7a      	ldr	r3, [pc, #488]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	4977      	ldr	r1, [pc, #476]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d034      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005efa:	d01d      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f00:	d817      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0a:	d009      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005f0c:	e011      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fbff 	bl	8006718 <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f1e:	e00c      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3324      	adds	r3, #36	; 0x24
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fca8 	bl	800687c <RCCEx_PLL3_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f30:	e003      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f40:	4b5e      	ldr	r3, [pc, #376]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f4e:	495b      	ldr	r1, [pc, #364]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	658b      	str	r3, [r1, #88]	; 0x58
 8005f54:	e001      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d033      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f70:	d01c      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f76:	d816      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f82:	d007      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005f84:	e00f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f86:	4b4d      	ldr	r3, [pc, #308]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	4a4c      	ldr	r2, [pc, #304]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f92:	e00c      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fc6e 	bl	800687c <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb4:	4b41      	ldr	r3, [pc, #260]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc2:	493e      	ldr	r1, [pc, #248]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d029      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe6:	d007      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005fe8:	e00f      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fea:	4b34      	ldr	r3, [pc, #208]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ff6:	e00b      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fb8a 	bl	8006718 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
      break;
 800600e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	4926      	ldr	r1, [pc, #152]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006024:	4313      	orrs	r3, r2
 8006026:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006028:	e001      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3324      	adds	r3, #36	; 0x24
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fc1b 	bl	800687c <RCCEx_PLL3_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d033      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006064:	d017      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606a:	d811      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800606c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006070:	d013      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006076:	d80b      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800607c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006080:	d106      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006082:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800608e:	e007      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	e004      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800609e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b2:	4902      	ldr	r1, [pc, #8]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	654b      	str	r3, [r1, #84]	; 0x54
 80060b8:	e004      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80060ba:	bf00      	nop
 80060bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060d0:	4b31      	ldr	r3, [pc, #196]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	492e      	ldr	r1, [pc, #184]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060ee:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060fc:	4926      	ldr	r1, [pc, #152]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800610e:	4b22      	ldr	r3, [pc, #136]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800611a:	491f      	ldr	r1, [pc, #124]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800611c:	4313      	orrs	r3, r2
 800611e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800612c:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006136:	6113      	str	r3, [r2, #16]
 8006138:	4b17      	ldr	r3, [pc, #92]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006142:	4915      	ldr	r1, [pc, #84]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006144:	4313      	orrs	r3, r2
 8006146:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	da08      	bge.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006154:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	490e      	ldr	r1, [pc, #56]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800615e:	4313      	orrs	r3, r2
 8006160:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800617e:	4313      	orrs	r3, r2
 8006180:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006182:	7dbb      	ldrb	r3, [r7, #22]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	58024400 	.word	0x58024400

0800619c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061a0:	f7ff f83e 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	4904      	ldr	r1, [pc, #16]	; (80061c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061b2:	5ccb      	ldrb	r3, [r1, r3]
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	58024400 	.word	0x58024400
 80061c4:	08008a90 	.word	0x08008a90

080061c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	; 0x24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061d0:	4ba1      	ldr	r3, [pc, #644]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80061da:	4b9f      	ldr	r3, [pc, #636]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	0b1b      	lsrs	r3, r3, #12
 80061e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061e6:	4b9c      	ldr	r3, [pc, #624]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061f2:	4b99      	ldr	r3, [pc, #612]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	08db      	lsrs	r3, r3, #3
 80061f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8111 	beq.w	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f000 8083 	beq.w	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b02      	cmp	r3, #2
 8006222:	f200 80a1 	bhi.w	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d056      	beq.n	80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006232:	e099      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006234:	4b88      	ldr	r3, [pc, #544]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d02d      	beq.n	800629c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006240:	4b85      	ldr	r3, [pc, #532]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	4a84      	ldr	r2, [pc, #528]	; (800645c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626a:	4b7b      	ldr	r3, [pc, #492]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	ed97 6a03 	vldr	s12, [r7, #12]
 800627e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006296:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800629a:	e087      	b.n	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ae:	4b6a      	ldr	r3, [pc, #424]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062be:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062de:	e065      	b.n	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f2:	4b59      	ldr	r3, [pc, #356]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a03 	vldr	s12, [r7, #12]
 8006306:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006322:	e043      	b.n	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	4b48      	ldr	r3, [pc, #288]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006346:	ed97 6a03 	vldr	s12, [r7, #12]
 800634a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006366:	e021      	b.n	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638a:	ed97 6a03 	vldr	s12, [r7, #12]
 800638e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80063ac:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d2:	ee17 2a90 	vmov	r2, s15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063da:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006400:	ee17 2a90 	vmov	r2, s15
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006408:	4b13      	ldr	r3, [pc, #76]	; (8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006422:	edd7 6a07 	vldr	s13, [r7, #28]
 8006426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642e:	ee17 2a90 	vmov	r2, s15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006436:	e008      	b.n	800644a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
}
 800644a:	bf00      	nop
 800644c:	3724      	adds	r7, #36	; 0x24
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	58024400 	.word	0x58024400
 800645c:	03d09000 	.word	0x03d09000
 8006460:	46000000 	.word	0x46000000
 8006464:	4c742400 	.word	0x4c742400
 8006468:	4a742400 	.word	0x4a742400
 800646c:	4bb71b00 	.word	0x4bb71b00

08006470 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006470:	b480      	push	{r7}
 8006472:	b089      	sub	sp, #36	; 0x24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006478:	4ba1      	ldr	r3, [pc, #644]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006482:	4b9f      	ldr	r3, [pc, #636]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	0d1b      	lsrs	r3, r3, #20
 8006488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800648c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800648e:	4b9c      	ldr	r3, [pc, #624]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800649a:	4b99      	ldr	r3, [pc, #612]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	08db      	lsrs	r3, r3, #3
 80064a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8111 	beq.w	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	f000 8083 	beq.w	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	f200 80a1 	bhi.w	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d056      	beq.n	8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064da:	e099      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064dc:	4b88      	ldr	r3, [pc, #544]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02d      	beq.n	8006544 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064e8:	4b85      	ldr	r3, [pc, #532]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	08db      	lsrs	r3, r3, #3
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	4a84      	ldr	r2, [pc, #528]	; (8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a03 	vldr	s12, [r7, #12]
 8006526:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006542:	e087      	b.n	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800670c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a03 	vldr	s12, [r7, #12]
 800656a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006586:	e065      	b.n	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ca:	e043      	b.n	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065de:	4b48      	ldr	r3, [pc, #288]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800660e:	e021      	b.n	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b37      	ldr	r3, [pc, #220]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a03 	vldr	s12, [r7, #12]
 8006636:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006652:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006654:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	0a5b      	lsrs	r3, r3, #9
 800665a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800666a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800666e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667a:	ee17 2a90 	vmov	r2, s15
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006682:	4b1f      	ldr	r3, [pc, #124]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800669c:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a8:	ee17 2a90 	vmov	r2, s15
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	0e1b      	lsrs	r3, r3, #24
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d6:	ee17 2a90 	vmov	r2, s15
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066de:	e008      	b.n	80066f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
}
 80066f2:	bf00      	nop
 80066f4:	3724      	adds	r7, #36	; 0x24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	58024400 	.word	0x58024400
 8006704:	03d09000 	.word	0x03d09000
 8006708:	46000000 	.word	0x46000000
 800670c:	4c742400 	.word	0x4c742400
 8006710:	4a742400 	.word	0x4a742400
 8006714:	4bb71b00 	.word	0x4bb71b00

08006718 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006726:	4b53      	ldr	r3, [pc, #332]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d101      	bne.n	8006736 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e099      	b.n	800686a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006736:	4b4f      	ldr	r3, [pc, #316]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a4e      	ldr	r2, [pc, #312]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800673c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006742:	f7fa fc35 	bl	8000fb0 <HAL_GetTick>
 8006746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006748:	e008      	b.n	800675c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800674a:	f7fa fc31 	bl	8000fb0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e086      	b.n	800686a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800675c:	4b45      	ldr	r3, [pc, #276]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f0      	bne.n	800674a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	493f      	ldr	r1, [pc, #252]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	628b      	str	r3, [r1, #40]	; 0x28
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	3b01      	subs	r3, #1
 8006782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	3b01      	subs	r3, #1
 800678c:	025b      	lsls	r3, r3, #9
 800678e:	b29b      	uxth	r3, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	061b      	lsls	r3, r3, #24
 80067a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067ac:	4931      	ldr	r1, [pc, #196]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067b2:	4b30      	ldr	r3, [pc, #192]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	492d      	ldr	r1, [pc, #180]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067c4:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	f023 0220 	bic.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	4928      	ldr	r1, [pc, #160]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067d6:	4b27      	ldr	r3, [pc, #156]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	4a26      	ldr	r2, [pc, #152]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067dc:	f023 0310 	bic.w	r3, r3, #16
 80067e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <RCCEx_PLL2_Config+0x160>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	69d2      	ldr	r2, [r2, #28]
 80067ee:	00d2      	lsls	r2, r2, #3
 80067f0:	4920      	ldr	r1, [pc, #128]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067f6:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 80067fc:	f043 0310 	orr.w	r3, r3, #16
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006808:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800680e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006814:	e00f      	b.n	8006836 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d106      	bne.n	800682a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800681c:	4b15      	ldr	r3, [pc, #84]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a14      	ldr	r2, [pc, #80]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006828:	e005      	b.n	8006836 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4a11      	ldr	r2, [pc, #68]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006834:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800683c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006842:	f7fa fbb5 	bl	8000fb0 <HAL_GetTick>
 8006846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006848:	e008      	b.n	800685c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800684a:	f7fa fbb1 	bl	8000fb0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e006      	b.n	800686a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <RCCEx_PLL2_Config+0x15c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	58024400 	.word	0x58024400
 8006878:	ffff0007 	.word	0xffff0007

0800687c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800688a:	4b53      	ldr	r3, [pc, #332]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d101      	bne.n	800689a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e099      	b.n	80069ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800689a:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4e      	ldr	r2, [pc, #312]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80068a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a6:	f7fa fb83 	bl	8000fb0 <HAL_GetTick>
 80068aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068ac:	e008      	b.n	80068c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068ae:	f7fa fb7f 	bl	8000fb0 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e086      	b.n	80069ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068c0:	4b45      	ldr	r3, [pc, #276]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f0      	bne.n	80068ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068cc:	4b42      	ldr	r3, [pc, #264]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	051b      	lsls	r3, r3, #20
 80068da:	493f      	ldr	r1, [pc, #252]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	628b      	str	r3, [r1, #40]	; 0x28
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	3b01      	subs	r3, #1
 800690a:	061b      	lsls	r3, r3, #24
 800690c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006910:	4931      	ldr	r1, [pc, #196]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	492d      	ldr	r1, [pc, #180]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006924:	4313      	orrs	r3, r2
 8006926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006928:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	4928      	ldr	r1, [pc, #160]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800693a:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006946:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <RCCEx_PLL3_Config+0x160>)
 800694c:	4013      	ands	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	69d2      	ldr	r2, [r2, #28]
 8006952:	00d2      	lsls	r2, r2, #3
 8006954:	4920      	ldr	r1, [pc, #128]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006956:	4313      	orrs	r3, r2
 8006958:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800695a:	4b1f      	ldr	r3, [pc, #124]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006978:	e00f      	b.n	800699a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006980:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800698a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800698c:	e005      	b.n	800699a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 8006994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800699a:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a0e      	ldr	r2, [pc, #56]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80069a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a6:	f7fa fb03 	bl	8000fb0 <HAL_GetTick>
 80069aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069ac:	e008      	b.n	80069c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069ae:	f7fa faff 	bl	8000fb0 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e006      	b.n	80069ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <RCCEx_PLL3_Config+0x15c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0f0      	beq.n	80069ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400
 80069dc:	ffff0007 	.word	0xffff0007

080069e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e042      	b.n	8006a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fa f92d 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2224      	movs	r2, #36	; 0x24
 8006a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fce6 	bl	80073f4 <UART_SetConfig>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e022      	b.n	8006a78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fa42 	bl	8007ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fac9 	bl	8008008 <UART_CheckIdleState>
 8006a76:	4603      	mov	r3, r0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d17a      	bne.n	8006b8e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Transmit_DMA+0x24>
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e073      	b.n	8006b90 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Transmit_DMA+0x36>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e06c      	b.n	8006b90 <HAL_UART_Transmit_DMA+0x110>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2221      	movs	r2, #33	; 0x21
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02c      	beq.n	8006b46 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af0:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <HAL_UART_Transmit_DMA+0x118>)
 8006af2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <HAL_UART_Transmit_DMA+0x11c>)
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b00:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <HAL_UART_Transmit_DMA+0x120>)
 8006b02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b08:	2200      	movs	r2, #0
 8006b0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b14:	4619      	mov	r1, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3328      	adds	r3, #40	; 0x28
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	f7fa ff46 	bl	80019b0 <HAL_DMA_Start_IT>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e024      	b.n	8006b90 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b76:	623a      	str	r2, [r7, #32]
 8006b78:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	69f9      	ldr	r1, [r7, #28]
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
  }
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3728      	adds	r7, #40	; 0x28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	080084d1 	.word	0x080084d1
 8006b9c:	08008567 	.word	0x08008567
 8006ba0:	080086dd 	.word	0x080086dd

08006ba4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d142      	bne.n	8006c42 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_UART_Receive_DMA+0x24>
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e03b      	b.n	8006c44 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Receive_DMA+0x36>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e034      	b.n	8006c44 <HAL_UART_Receive_DMA+0xa0>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <HAL_UART_Receive_DMA+0xa8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01f      	beq.n	8006c32 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d018      	beq.n	8006c32 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	69f9      	ldr	r1, [r7, #28]
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e6      	bne.n	8006c00 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	461a      	mov	r2, r3
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f001 faf9 	bl	8008230 <UART_Start_Receive_DMA>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	e000      	b.n	8006c44 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3728      	adds	r7, #40	; 0x28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	58000c00 	.word	0x58000c00

08006c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b0ba      	sub	sp, #232	; 0xe8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c7e:	4013      	ands	r3, r2
 8006c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 835a 	beq.w	800736e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
      }
      return;
 8006cc2:	e354      	b.n	800736e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 811f 	beq.w	8006f0c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd2:	4b8b      	ldr	r3, [pc, #556]	; (8006f00 <HAL_UART_IRQHandler+0x2b0>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cde:	4b89      	ldr	r3, [pc, #548]	; (8006f04 <HAL_UART_IRQHandler+0x2b4>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8112 	beq.w	8006f0c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d011      	beq.n	8006d18 <HAL_UART_IRQHandler+0xc8>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d0e:	f043 0201 	orr.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d011      	beq.n	8006d48 <HAL_UART_IRQHandler+0xf8>
 8006d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2202      	movs	r2, #2
 8006d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	f043 0204 	orr.w	r2, r3, #4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <HAL_UART_IRQHandler+0x128>
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2204      	movs	r2, #4
 8006d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6e:	f043 0202 	orr.w	r2, r3, #2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d017      	beq.n	8006db4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d94:	4b5a      	ldr	r3, [pc, #360]	; (8006f00 <HAL_UART_IRQHandler+0x2b0>)
 8006d96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006daa:	f043 0208 	orr.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d012      	beq.n	8006de6 <HAL_UART_IRQHandler+0x196>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00c      	beq.n	8006de6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 82c0 	beq.w	8007372 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d005      	beq.n	8006e4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d04f      	beq.n	8006eea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fada 	bl	8008404 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d141      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1d9      	bne.n	8006e5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d013      	beq.n	8006eda <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb6:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <HAL_UART_IRQHandler+0x2b8>)
 8006eb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb fafe 	bl	80024c0 <HAL_DMA_Abort_IT>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d017      	beq.n	8006efa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	e00f      	b.n	8006efa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa74 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	e00b      	b.n	8006efa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa70 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	e007      	b.n	8006efa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa6c 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006ef8:	e23b      	b.n	8007372 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efa:	bf00      	nop
    return;
 8006efc:	e239      	b.n	8007372 <HAL_UART_IRQHandler+0x722>
 8006efe:	bf00      	nop
 8006f00:	10000001 	.word	0x10000001
 8006f04:	04000120 	.word	0x04000120
 8006f08:	0800875d 	.word	0x0800875d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f040 81ce 	bne.w	80072b2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 81c7 	beq.w	80072b2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 81c0 	beq.w	80072b2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	f040 813b 	bne.w	80071c0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a8b      	ldr	r2, [pc, #556]	; (8007180 <HAL_UART_IRQHandler+0x530>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d059      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a89      	ldr	r2, [pc, #548]	; (8007184 <HAL_UART_IRQHandler+0x534>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d053      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a87      	ldr	r2, [pc, #540]	; (8007188 <HAL_UART_IRQHandler+0x538>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04d      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a85      	ldr	r2, [pc, #532]	; (800718c <HAL_UART_IRQHandler+0x53c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d047      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a83      	ldr	r2, [pc, #524]	; (8007190 <HAL_UART_IRQHandler+0x540>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d041      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a81      	ldr	r2, [pc, #516]	; (8007194 <HAL_UART_IRQHandler+0x544>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d03b      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a7f      	ldr	r2, [pc, #508]	; (8007198 <HAL_UART_IRQHandler+0x548>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d035      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a7d      	ldr	r2, [pc, #500]	; (800719c <HAL_UART_IRQHandler+0x54c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02f      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a7b      	ldr	r2, [pc, #492]	; (80071a0 <HAL_UART_IRQHandler+0x550>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d029      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a79      	ldr	r2, [pc, #484]	; (80071a4 <HAL_UART_IRQHandler+0x554>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d023      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a77      	ldr	r2, [pc, #476]	; (80071a8 <HAL_UART_IRQHandler+0x558>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01d      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a75      	ldr	r2, [pc, #468]	; (80071ac <HAL_UART_IRQHandler+0x55c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d017      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a73      	ldr	r2, [pc, #460]	; (80071b0 <HAL_UART_IRQHandler+0x560>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d011      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a71      	ldr	r2, [pc, #452]	; (80071b4 <HAL_UART_IRQHandler+0x564>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6f      	ldr	r2, [pc, #444]	; (80071b8 <HAL_UART_IRQHandler+0x568>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0x3ba>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a6d      	ldr	r2, [pc, #436]	; (80071bc <HAL_UART_IRQHandler+0x56c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d105      	bne.n	8007016 <HAL_UART_IRQHandler+0x3c6>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b29b      	uxth	r3, r3
 8007014:	e004      	b.n	8007020 <HAL_UART_IRQHandler+0x3d0>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 81a4 	beq.w	8007376 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007034:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007038:	429a      	cmp	r2, r3
 800703a:	f080 819c 	bcs.w	8007376 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	f000 8086 	beq.w	8007162 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800706a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800706e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007072:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007080:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007084:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800708c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1da      	bne.n	8007056 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e1      	bne.n	80070a0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007100:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007102:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007106:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800710e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e3      	bne.n	80070dc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007144:	65bb      	str	r3, [r7, #88]	; 0x58
 8007146:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800714a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e4      	bne.n	8007122 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715c:	4618      	mov	r0, r3
 800715e:	f7fa fe91 	bl	8001e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800716e:	b29b      	uxth	r3, r3
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	b29b      	uxth	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f930 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800717c:	e0fb      	b.n	8007376 <HAL_UART_IRQHandler+0x726>
 800717e:	bf00      	nop
 8007180:	40020010 	.word	0x40020010
 8007184:	40020028 	.word	0x40020028
 8007188:	40020040 	.word	0x40020040
 800718c:	40020058 	.word	0x40020058
 8007190:	40020070 	.word	0x40020070
 8007194:	40020088 	.word	0x40020088
 8007198:	400200a0 	.word	0x400200a0
 800719c:	400200b8 	.word	0x400200b8
 80071a0:	40020410 	.word	0x40020410
 80071a4:	40020428 	.word	0x40020428
 80071a8:	40020440 	.word	0x40020440
 80071ac:	40020458 	.word	0x40020458
 80071b0:	40020470 	.word	0x40020470
 80071b4:	40020488 	.word	0x40020488
 80071b8:	400204a0 	.word	0x400204a0
 80071bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80cc 	beq.w	800737a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80071e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80c7 	beq.w	800737a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800720e:	647b      	str	r3, [r7, #68]	; 0x44
 8007210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e4      	bne.n	80071ec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	623b      	str	r3, [r7, #32]
   return(result);
 8007232:	6a3a      	ldr	r2, [r7, #32]
 8007234:	4b54      	ldr	r3, [pc, #336]	; (8007388 <HAL_UART_IRQHandler+0x738>)
 8007236:	4013      	ands	r3, r2
 8007238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007246:	633a      	str	r2, [r7, #48]	; 0x30
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e3      	bne.n	8007222 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	60fb      	str	r3, [r7, #12]
   return(result);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	69b9      	ldr	r1, [r7, #24]
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	617b      	str	r3, [r7, #20]
   return(result);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f896 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072b0:	e063      	b.n	800737a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00e      	beq.n	80072dc <HAL_UART_IRQHandler+0x68c>
 80072be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fa82 	bl	80087de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072da:	e051      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d008      	beq.n	8007312 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007304:	2b00      	cmp	r3, #0
 8007306:	d03a      	beq.n	800737e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
    }
    return;
 8007310:	e035      	b.n	800737e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_UART_IRQHandler+0x6e2>
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fa2c 	bl	8008788 <UART_EndTransmit_IT>
    return;
 8007330:	e026      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_UART_IRQHandler+0x702>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fa5b 	bl	8008806 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007350:	e016      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <HAL_UART_IRQHandler+0x730>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	2b00      	cmp	r3, #0
 8007364:	da0c      	bge.n	8007380 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 fa43 	bl	80087f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800736c:	e008      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
      return;
 800736e:	bf00      	nop
 8007370:	e006      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
    return;
 8007372:	bf00      	nop
 8007374:	e004      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
      return;
 8007376:	bf00      	nop
 8007378:	e002      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
      return;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <HAL_UART_IRQHandler+0x730>
    return;
 800737e:	bf00      	nop
  }
}
 8007380:	37e8      	adds	r7, #232	; 0xe8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	effffffe 	.word	0xeffffffe

0800738c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f8:	b092      	sub	sp, #72	; 0x48
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	431a      	orrs	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4313      	orrs	r3, r2
 800741a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4bbe      	ldr	r3, [pc, #760]	; (800771c <UART_SetConfig+0x328>)
 8007424:	4013      	ands	r3, r2
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800742c:	430b      	orrs	r3, r1
 800742e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4ab3      	ldr	r2, [pc, #716]	; (8007720 <UART_SetConfig+0x32c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800745c:	4313      	orrs	r3, r2
 800745e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	4baf      	ldr	r3, [pc, #700]	; (8007724 <UART_SetConfig+0x330>)
 8007468:	4013      	ands	r3, r2
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007470:	430b      	orrs	r3, r1
 8007472:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	f023 010f 	bic.w	r1, r3, #15
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4aa6      	ldr	r2, [pc, #664]	; (8007728 <UART_SetConfig+0x334>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d177      	bne.n	8007584 <UART_SetConfig+0x190>
 8007494:	4ba5      	ldr	r3, [pc, #660]	; (800772c <UART_SetConfig+0x338>)
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800749c:	2b28      	cmp	r3, #40	; 0x28
 800749e:	d86d      	bhi.n	800757c <UART_SetConfig+0x188>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0xb4>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	0800754d 	.word	0x0800754d
 80074ac:	0800757d 	.word	0x0800757d
 80074b0:	0800757d 	.word	0x0800757d
 80074b4:	0800757d 	.word	0x0800757d
 80074b8:	0800757d 	.word	0x0800757d
 80074bc:	0800757d 	.word	0x0800757d
 80074c0:	0800757d 	.word	0x0800757d
 80074c4:	0800757d 	.word	0x0800757d
 80074c8:	08007555 	.word	0x08007555
 80074cc:	0800757d 	.word	0x0800757d
 80074d0:	0800757d 	.word	0x0800757d
 80074d4:	0800757d 	.word	0x0800757d
 80074d8:	0800757d 	.word	0x0800757d
 80074dc:	0800757d 	.word	0x0800757d
 80074e0:	0800757d 	.word	0x0800757d
 80074e4:	0800757d 	.word	0x0800757d
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	0800757d 	.word	0x0800757d
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	08007565 	.word	0x08007565
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007575 	.word	0x08007575
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e222      	b.n	800799a <UART_SetConfig+0x5a6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e21e      	b.n	800799a <UART_SetConfig+0x5a6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e21a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e216      	b.n	800799a <UART_SetConfig+0x5a6>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e212      	b.n	800799a <UART_SetConfig+0x5a6>
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e20e      	b.n	800799a <UART_SetConfig+0x5a6>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e20a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a69      	ldr	r2, [pc, #420]	; (8007730 <UART_SetConfig+0x33c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d130      	bne.n	80075f0 <UART_SetConfig+0x1fc>
 800758e:	4b67      	ldr	r3, [pc, #412]	; (800772c <UART_SetConfig+0x338>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d826      	bhi.n	80075e8 <UART_SetConfig+0x1f4>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x1ac>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e1ec      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e1e8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e1e4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e1e0      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e1dc      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e1d8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e1d4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <UART_SetConfig+0x340>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <UART_SetConfig+0x268>
 80075fa:	4b4c      	ldr	r3, [pc, #304]	; (800772c <UART_SetConfig+0x338>)
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b05      	cmp	r3, #5
 8007604:	d826      	bhi.n	8007654 <UART_SetConfig+0x260>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x218>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007625 	.word	0x08007625
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007635 	.word	0x08007635
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e1b6      	b.n	800799a <UART_SetConfig+0x5a6>
 800762c:	2304      	movs	r3, #4
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e1b2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007634:	2308      	movs	r3, #8
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e1ae      	b.n	800799a <UART_SetConfig+0x5a6>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e1aa      	b.n	800799a <UART_SetConfig+0x5a6>
 8007644:	2320      	movs	r3, #32
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764a:	e1a6      	b.n	800799a <UART_SetConfig+0x5a6>
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007652:	e1a2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007654:	2380      	movs	r3, #128	; 0x80
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765a:	e19e      	b.n	800799a <UART_SetConfig+0x5a6>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a35      	ldr	r2, [pc, #212]	; (8007738 <UART_SetConfig+0x344>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d130      	bne.n	80076c8 <UART_SetConfig+0x2d4>
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <UART_SetConfig+0x338>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	2b05      	cmp	r3, #5
 8007670:	d826      	bhi.n	80076c0 <UART_SetConfig+0x2cc>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <UART_SetConfig+0x284>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007691 	.word	0x08007691
 800767c:	08007699 	.word	0x08007699
 8007680:	080076a1 	.word	0x080076a1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b9 	.word	0x080076b9
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007696:	e180      	b.n	800799a <UART_SetConfig+0x5a6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769e:	e17c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a6:	e178      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ae:	e174      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b0:	2320      	movs	r3, #32
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b6:	e170      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b8:	2340      	movs	r3, #64	; 0x40
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076be:	e16c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c6:	e168      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	; (800773c <UART_SetConfig+0x348>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d142      	bne.n	8007758 <UART_SetConfig+0x364>
 80076d2:	4b16      	ldr	r3, [pc, #88]	; (800772c <UART_SetConfig+0x338>)
 80076d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d838      	bhi.n	8007750 <UART_SetConfig+0x35c>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x2f0>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076fd 	.word	0x080076fd
 80076e8:	08007705 	.word	0x08007705
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007749 	.word	0x08007749
 80076fc:	2300      	movs	r3, #0
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e14a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e146      	b.n	800799a <UART_SetConfig+0x5a6>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e142      	b.n	800799a <UART_SetConfig+0x5a6>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e13e      	b.n	800799a <UART_SetConfig+0x5a6>
 800771c:	cfff69f3 	.word	0xcfff69f3
 8007720:	58000c00 	.word	0x58000c00
 8007724:	11fff4ff 	.word	0x11fff4ff
 8007728:	40011000 	.word	0x40011000
 800772c:	58024400 	.word	0x58024400
 8007730:	40004400 	.word	0x40004400
 8007734:	40004800 	.word	0x40004800
 8007738:	40004c00 	.word	0x40004c00
 800773c:	40005000 	.word	0x40005000
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e128      	b.n	800799a <UART_SetConfig+0x5a6>
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e124      	b.n	800799a <UART_SetConfig+0x5a6>
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e120      	b.n	800799a <UART_SetConfig+0x5a6>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4acb      	ldr	r2, [pc, #812]	; (8007a8c <UART_SetConfig+0x698>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d176      	bne.n	8007850 <UART_SetConfig+0x45c>
 8007762:	4bcb      	ldr	r3, [pc, #812]	; (8007a90 <UART_SetConfig+0x69c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800776a:	2b28      	cmp	r3, #40	; 0x28
 800776c:	d86c      	bhi.n	8007848 <UART_SetConfig+0x454>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x380>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007819 	.word	0x08007819
 8007778:	08007849 	.word	0x08007849
 800777c:	08007849 	.word	0x08007849
 8007780:	08007849 	.word	0x08007849
 8007784:	08007849 	.word	0x08007849
 8007788:	08007849 	.word	0x08007849
 800778c:	08007849 	.word	0x08007849
 8007790:	08007849 	.word	0x08007849
 8007794:	08007821 	.word	0x08007821
 8007798:	08007849 	.word	0x08007849
 800779c:	08007849 	.word	0x08007849
 80077a0:	08007849 	.word	0x08007849
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007849 	.word	0x08007849
 80077ac:	08007849 	.word	0x08007849
 80077b0:	08007849 	.word	0x08007849
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007849 	.word	0x08007849
 80077bc:	08007849 	.word	0x08007849
 80077c0:	08007849 	.word	0x08007849
 80077c4:	08007849 	.word	0x08007849
 80077c8:	08007849 	.word	0x08007849
 80077cc:	08007849 	.word	0x08007849
 80077d0:	08007849 	.word	0x08007849
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007849 	.word	0x08007849
 80077dc:	08007849 	.word	0x08007849
 80077e0:	08007849 	.word	0x08007849
 80077e4:	08007849 	.word	0x08007849
 80077e8:	08007849 	.word	0x08007849
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007849 	.word	0x08007849
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007849 	.word	0x08007849
 80077fc:	08007849 	.word	0x08007849
 8007800:	08007849 	.word	0x08007849
 8007804:	08007849 	.word	0x08007849
 8007808:	08007849 	.word	0x08007849
 800780c:	08007849 	.word	0x08007849
 8007810:	08007849 	.word	0x08007849
 8007814:	08007841 	.word	0x08007841
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e0bc      	b.n	800799a <UART_SetConfig+0x5a6>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007826:	e0b8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782e:	e0b4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007836:	e0b0      	b.n	800799a <UART_SetConfig+0x5a6>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e0ac      	b.n	800799a <UART_SetConfig+0x5a6>
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e0a8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e0a4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a8f      	ldr	r2, [pc, #572]	; (8007a94 <UART_SetConfig+0x6a0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x4c8>
 800785a:	4b8d      	ldr	r3, [pc, #564]	; (8007a90 <UART_SetConfig+0x69c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x4c0>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <UART_SetConfig+0x478>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e086      	b.n	800799a <UART_SetConfig+0x5a6>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007892:	e082      	b.n	800799a <UART_SetConfig+0x5a6>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789a:	e07e      	b.n	800799a <UART_SetConfig+0x5a6>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a2:	e07a      	b.n	800799a <UART_SetConfig+0x5a6>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e076      	b.n	800799a <UART_SetConfig+0x5a6>
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e072      	b.n	800799a <UART_SetConfig+0x5a6>
 80078b4:	2380      	movs	r3, #128	; 0x80
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e06e      	b.n	800799a <UART_SetConfig+0x5a6>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a75      	ldr	r2, [pc, #468]	; (8007a98 <UART_SetConfig+0x6a4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x534>
 80078c6:	4b72      	ldr	r3, [pc, #456]	; (8007a90 <UART_SetConfig+0x69c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x52c>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x4e4>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e050      	b.n	800799a <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e04c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e048      	b.n	800799a <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e044      	b.n	800799a <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e040      	b.n	800799a <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e03c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e038      	b.n	800799a <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a5b      	ldr	r2, [pc, #364]	; (8007a9c <UART_SetConfig+0x6a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x5a0>
 8007932:	4b57      	ldr	r3, [pc, #348]	; (8007a90 <UART_SetConfig+0x69c>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x598>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x550>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2302      	movs	r3, #2
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e01a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e016      	b.n	800799a <UART_SetConfig+0x5a6>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e012      	b.n	800799a <UART_SetConfig+0x5a6>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e00e      	b.n	800799a <UART_SetConfig+0x5a6>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e00a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e006      	b.n	800799a <UART_SetConfig+0x5a6>
 800798c:	2380      	movs	r3, #128	; 0x80
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e002      	b.n	800799a <UART_SetConfig+0x5a6>
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3f      	ldr	r2, [pc, #252]	; (8007a9c <UART_SetConfig+0x6a8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	f040 80f8 	bne.w	8007b96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	dc46      	bgt.n	8007a3c <UART_SetConfig+0x648>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f2c0 8082 	blt.w	8007ab8 <UART_SetConfig+0x6c4>
 80079b4:	3b02      	subs	r3, #2
 80079b6:	2b1e      	cmp	r3, #30
 80079b8:	d87e      	bhi.n	8007ab8 <UART_SetConfig+0x6c4>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0x5cc>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007ab9 	.word	0x08007ab9
 80079c8:	08007a4b 	.word	0x08007a4b
 80079cc:	08007ab9 	.word	0x08007ab9
 80079d0:	08007ab9 	.word	0x08007ab9
 80079d4:	08007ab9 	.word	0x08007ab9
 80079d8:	08007a5b 	.word	0x08007a5b
 80079dc:	08007ab9 	.word	0x08007ab9
 80079e0:	08007ab9 	.word	0x08007ab9
 80079e4:	08007ab9 	.word	0x08007ab9
 80079e8:	08007ab9 	.word	0x08007ab9
 80079ec:	08007ab9 	.word	0x08007ab9
 80079f0:	08007ab9 	.word	0x08007ab9
 80079f4:	08007ab9 	.word	0x08007ab9
 80079f8:	08007a6b 	.word	0x08007a6b
 80079fc:	08007ab9 	.word	0x08007ab9
 8007a00:	08007ab9 	.word	0x08007ab9
 8007a04:	08007ab9 	.word	0x08007ab9
 8007a08:	08007ab9 	.word	0x08007ab9
 8007a0c:	08007ab9 	.word	0x08007ab9
 8007a10:	08007ab9 	.word	0x08007ab9
 8007a14:	08007ab9 	.word	0x08007ab9
 8007a18:	08007ab9 	.word	0x08007ab9
 8007a1c:	08007ab9 	.word	0x08007ab9
 8007a20:	08007ab9 	.word	0x08007ab9
 8007a24:	08007ab9 	.word	0x08007ab9
 8007a28:	08007ab9 	.word	0x08007ab9
 8007a2c:	08007ab9 	.word	0x08007ab9
 8007a30:	08007ab9 	.word	0x08007ab9
 8007a34:	08007ab9 	.word	0x08007ab9
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	d037      	beq.n	8007ab0 <UART_SetConfig+0x6bc>
 8007a40:	e03a      	b.n	8007ab8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a42:	f7fe fbab 	bl	800619c <HAL_RCCEx_GetD3PCLK1Freq>
 8007a46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a48:	e03c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fbba 	bl	80061c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a58:	e034      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5a:	f107 0318 	add.w	r3, r7, #24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fd06 	bl	8006470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a68:	e02c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6a:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <UART_SetConfig+0x69c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a76:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <UART_SetConfig+0x69c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	4a07      	ldr	r2, [pc, #28]	; (8007aa0 <UART_SetConfig+0x6ac>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a88:	e01c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
 8007a8a:	bf00      	nop
 8007a8c:	40011400 	.word	0x40011400
 8007a90:	58024400 	.word	0x58024400
 8007a94:	40007800 	.word	0x40007800
 8007a98:	40007c00 	.word	0x40007c00
 8007a9c:	58000c00 	.word	0x58000c00
 8007aa0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b9d      	ldr	r3, [pc, #628]	; (8007d1c <UART_SetConfig+0x928>)
 8007aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aa8:	e00c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aaa:	4b9d      	ldr	r3, [pc, #628]	; (8007d20 <UART_SetConfig+0x92c>)
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aae:	e009      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ab6:	e005      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007ac2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 81de 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	4a94      	ldr	r2, [pc, #592]	; (8007d24 <UART_SetConfig+0x930>)
 8007ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d305      	bcc.n	8007afc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b02:	e1c1      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	2200      	movs	r2, #0
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	60fa      	str	r2, [r7, #12]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	4a84      	ldr	r2, [pc, #528]	; (8007d24 <UART_SetConfig+0x930>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2200      	movs	r2, #0
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b26:	f7f8 fbd7 	bl	80002d8 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	020b      	lsls	r3, r1, #8
 8007b3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b40:	0202      	lsls	r2, r0, #8
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	6849      	ldr	r1, [r1, #4]
 8007b46:	0849      	lsrs	r1, r1, #1
 8007b48:	2000      	movs	r0, #0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	eb12 0804 	adds.w	r8, r2, r4
 8007b52:	eb43 0905 	adc.w	r9, r3, r5
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	469a      	mov	sl, r3
 8007b5e:	4693      	mov	fp, r2
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fbb6 	bl	80002d8 <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4613      	mov	r3, r2
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7a:	d308      	bcc.n	8007b8e <UART_SetConfig+0x79a>
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d204      	bcs.n	8007b8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	e17c      	b.n	8007e88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b94:	e178      	b.n	8007e88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9e:	f040 80c5 	bne.w	8007d2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	dc48      	bgt.n	8007c3c <UART_SetConfig+0x848>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db7b      	blt.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d879      	bhi.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bb2:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0x7c4>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007ca7 	.word	0x08007ca7
 8007bc4:	08007ca7 	.word	0x08007ca7
 8007bc8:	08007c53 	.word	0x08007c53
 8007bcc:	08007ca7 	.word	0x08007ca7
 8007bd0:	08007ca7 	.word	0x08007ca7
 8007bd4:	08007ca7 	.word	0x08007ca7
 8007bd8:	08007c63 	.word	0x08007c63
 8007bdc:	08007ca7 	.word	0x08007ca7
 8007be0:	08007ca7 	.word	0x08007ca7
 8007be4:	08007ca7 	.word	0x08007ca7
 8007be8:	08007ca7 	.word	0x08007ca7
 8007bec:	08007ca7 	.word	0x08007ca7
 8007bf0:	08007ca7 	.word	0x08007ca7
 8007bf4:	08007ca7 	.word	0x08007ca7
 8007bf8:	08007c73 	.word	0x08007c73
 8007bfc:	08007ca7 	.word	0x08007ca7
 8007c00:	08007ca7 	.word	0x08007ca7
 8007c04:	08007ca7 	.word	0x08007ca7
 8007c08:	08007ca7 	.word	0x08007ca7
 8007c0c:	08007ca7 	.word	0x08007ca7
 8007c10:	08007ca7 	.word	0x08007ca7
 8007c14:	08007ca7 	.word	0x08007ca7
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007ca7 	.word	0x08007ca7
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007ca7 	.word	0x08007ca7
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007ca7 	.word	0x08007ca7
 8007c34:	08007ca7 	.word	0x08007ca7
 8007c38:	08007c99 	.word	0x08007c99
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	d02e      	beq.n	8007c9e <UART_SetConfig+0x8aa>
 8007c40:	e031      	b.n	8007ca6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c42:	f7fd fb1d 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8007c46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c48:	e033      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c4a:	f7fd fb2f 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8007c4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c50:	e02f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fab6 	bl	80061c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c60:	e027      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fc02 	bl	8006470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c70:	e01f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <UART_SetConfig+0x934>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <UART_SetConfig+0x934>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <UART_SetConfig+0x928>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c90:	e00f      	b.n	8007cb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c92:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <UART_SetConfig+0x928>)
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c96:	e00c      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c98:	4b21      	ldr	r3, [pc, #132]	; (8007d20 <UART_SetConfig+0x92c>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80e7 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	4a19      	ldr	r2, [pc, #100]	; (8007d24 <UART_SetConfig+0x930>)
 8007cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	005a      	lsls	r2, r3, #1
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	441a      	add	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d916      	bls.n	8007d14 <UART_SetConfig+0x920>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cec:	d212      	bcs.n	8007d14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f023 030f 	bic.w	r3, r3, #15
 8007cf6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d06:	4313      	orrs	r3, r2
 8007d08:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e0b9      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d1a:	e0b5      	b.n	8007e88 <UART_SetConfig+0xa94>
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	003d0900 	.word	0x003d0900
 8007d24:	08008aa8 	.word	0x08008aa8
 8007d28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	dc49      	bgt.n	8007dc8 <UART_SetConfig+0x9d4>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db7c      	blt.n	8007e32 <UART_SetConfig+0xa3e>
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d87a      	bhi.n	8007e32 <UART_SetConfig+0xa3e>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <UART_SetConfig+0x950>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007dcf 	.word	0x08007dcf
 8007d48:	08007dd7 	.word	0x08007dd7
 8007d4c:	08007e33 	.word	0x08007e33
 8007d50:	08007e33 	.word	0x08007e33
 8007d54:	08007ddf 	.word	0x08007ddf
 8007d58:	08007e33 	.word	0x08007e33
 8007d5c:	08007e33 	.word	0x08007e33
 8007d60:	08007e33 	.word	0x08007e33
 8007d64:	08007def 	.word	0x08007def
 8007d68:	08007e33 	.word	0x08007e33
 8007d6c:	08007e33 	.word	0x08007e33
 8007d70:	08007e33 	.word	0x08007e33
 8007d74:	08007e33 	.word	0x08007e33
 8007d78:	08007e33 	.word	0x08007e33
 8007d7c:	08007e33 	.word	0x08007e33
 8007d80:	08007e33 	.word	0x08007e33
 8007d84:	08007dff 	.word	0x08007dff
 8007d88:	08007e33 	.word	0x08007e33
 8007d8c:	08007e33 	.word	0x08007e33
 8007d90:	08007e33 	.word	0x08007e33
 8007d94:	08007e33 	.word	0x08007e33
 8007d98:	08007e33 	.word	0x08007e33
 8007d9c:	08007e33 	.word	0x08007e33
 8007da0:	08007e33 	.word	0x08007e33
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e33 	.word	0x08007e33
 8007db0:	08007e33 	.word	0x08007e33
 8007db4:	08007e33 	.word	0x08007e33
 8007db8:	08007e33 	.word	0x08007e33
 8007dbc:	08007e33 	.word	0x08007e33
 8007dc0:	08007e33 	.word	0x08007e33
 8007dc4:	08007e25 	.word	0x08007e25
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d02e      	beq.n	8007e2a <UART_SetConfig+0xa36>
 8007dcc:	e031      	b.n	8007e32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fd fa57 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8007dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007dd4:	e033      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd6:	f7fd fa69 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8007dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ddc:	e02f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe f9f0 	bl	80061c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dec:	e027      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fb3c 	bl	8006470 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfc:	e01f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <UART_SetConfig+0xac0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e0a:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <UART_SetConfig+0xac0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	4a28      	ldr	r2, [pc, #160]	; (8007eb8 <UART_SetConfig+0xac4>)
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e1c:	e00f      	b.n	8007e3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e1e:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <UART_SetConfig+0xac4>)
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e22:	e00c      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e24:	4b25      	ldr	r3, [pc, #148]	; (8007ebc <UART_SetConfig+0xac8>)
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e28:	e009      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e30:	e005      	b.n	8007e3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d021      	beq.n	8007e88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <UART_SetConfig+0xacc>)
 8007e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	441a      	add	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	2b0f      	cmp	r3, #15
 8007e6c:	d909      	bls.n	8007e82 <UART_SetConfig+0xa8e>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e74:	d205      	bcs.n	8007e82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e002      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ea4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3748      	adds	r7, #72	; 0x48
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	08008aa8 	.word	0x08008aa8

08007ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01a      	beq.n	8007fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fc2:	d10a      	bne.n	8007fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008018:	f7f8 ffca 	bl	8000fb0 <HAL_GetTick>
 800801c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b08      	cmp	r3, #8
 800802a:	d10e      	bne.n	800804a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800802c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f82f 	bl	800809e <UART_WaitOnFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e025      	b.n	8008096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b04      	cmp	r3, #4
 8008056:	d10e      	bne.n	8008076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f819 	bl	800809e <UART_WaitOnFlagUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e00f      	b.n	8008096 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b09c      	sub	sp, #112	; 0x70
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ae:	e0a9      	b.n	8008204 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	f000 80a5 	beq.w	8008204 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ba:	f7f8 ff79 	bl	8000fb0 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80080ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d140      	bne.n	8008152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080e4:	667b      	str	r3, [r7, #100]	; 0x64
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e6      	bne.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	663b      	str	r3, [r7, #96]	; 0x60
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008122:	64ba      	str	r2, [r7, #72]	; 0x48
 8008124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e069      	b.n	8008226 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d051      	beq.n	8008204 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800816a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816e:	d149      	bne.n	8008204 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008178:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800818e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
 800819a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800819e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e6      	bne.n	800817a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3308      	adds	r3, #8
 80081b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	613b      	str	r3, [r7, #16]
   return(result);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f023 0301 	bic.w	r3, r3, #1
 80081c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081cc:	623a      	str	r2, [r7, #32]
 80081ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	69f9      	ldr	r1, [r7, #28]
 80081d2:	6a3a      	ldr	r2, [r7, #32]
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e5      	bne.n	80081ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e010      	b.n	8008226 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69da      	ldr	r2, [r3, #28]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	4013      	ands	r3, r2
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	429a      	cmp	r2, r3
 8008212:	bf0c      	ite	eq
 8008214:	2301      	moveq	r3, #1
 8008216:	2300      	movne	r3, #0
 8008218:	b2db      	uxtb	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	429a      	cmp	r2, r3
 8008220:	f43f af46 	beq.w	80080b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3770      	adds	r7, #112	; 0x70
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b096      	sub	sp, #88	; 0x58
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2222      	movs	r2, #34	; 0x22
 8008258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d02c      	beq.n	80082be <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008268:	4a42      	ldr	r2, [pc, #264]	; (8008374 <UART_Start_Receive_DMA+0x144>)
 800826a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008270:	4a41      	ldr	r2, [pc, #260]	; (8008378 <UART_Start_Receive_DMA+0x148>)
 8008272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008278:	4a40      	ldr	r2, [pc, #256]	; (800837c <UART_Start_Receive_DMA+0x14c>)
 800827a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008280:	2200      	movs	r2, #0
 8008282:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3324      	adds	r3, #36	; 0x24
 800828e:	4619      	mov	r1, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008294:	461a      	mov	r2, r3
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	f7f9 fb8a 	bl	80019b0 <HAL_DMA_Start_IT>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00d      	beq.n	80082be <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2210      	movs	r2, #16
 80082a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e055      	b.n	800836a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d018      	beq.n	8008300 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e2:	657b      	str	r3, [r7, #84]	; 0x54
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008320:	637a      	str	r2, [r7, #52]	; 0x34
 8008322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e5      	bne.n	8008300 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	613b      	str	r3, [r7, #16]
   return(result);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008354:	623a      	str	r2, [r7, #32]
 8008356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	69f9      	ldr	r1, [r7, #28]
 800835a:	6a3a      	ldr	r2, [r7, #32]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	61bb      	str	r3, [r7, #24]
   return(result);
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e5      	bne.n	8008334 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3758      	adds	r7, #88	; 0x58
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	08008583 	.word	0x08008583
 8008378:	080086a5 	.word	0x080086a5
 800837c:	080086dd 	.word	0x080086dd

08008380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b08f      	sub	sp, #60	; 0x3c
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	61fb      	str	r3, [r7, #28]
   return(result);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800839c:	637b      	str	r3, [r7, #52]	; 0x34
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e6      	bne.n	8008388 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083d0:	633b      	str	r3, [r7, #48]	; 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	61ba      	str	r2, [r7, #24]
 80083dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	613b      	str	r3, [r7, #16]
   return(result);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e5      	bne.n	80083ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80083f6:	bf00      	nop
 80083f8:	373c      	adds	r7, #60	; 0x3c
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b095      	sub	sp, #84	; 0x54
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842a:	643b      	str	r3, [r7, #64]	; 0x40
 800842c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e6      	bne.n	800840c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	61fb      	str	r3, [r7, #28]
   return(result);
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	4b1e      	ldr	r3, [pc, #120]	; (80084cc <UART_EndRxTransfer+0xc8>)
 8008452:	4013      	ands	r3, r2
 8008454:	64bb      	str	r3, [r7, #72]	; 0x48
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800845e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e5      	bne.n	800843e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008476:	2b01      	cmp	r3, #1
 8008478:	d118      	bne.n	80084ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	60bb      	str	r3, [r7, #8]
   return(result);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f023 0310 	bic.w	r3, r3, #16
 800848e:	647b      	str	r3, [r7, #68]	; 0x44
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6979      	ldr	r1, [r7, #20]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	613b      	str	r3, [r7, #16]
   return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e6      	bne.n	800847a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084c0:	bf00      	nop
 80084c2:	3754      	adds	r7, #84	; 0x54
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	effffffe 	.word	0xeffffffe

080084d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b090      	sub	sp, #64	; 0x40
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e6:	d037      	beq.n	8008558 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80084e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	623b      	str	r3, [r7, #32]
   return(result);
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
 8008508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008510:	633a      	str	r2, [r7, #48]	; 0x30
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	60fb      	str	r3, [r7, #12]
   return(result);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008538:	637b      	str	r3, [r7, #52]	; 0x34
 800853a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	61fb      	str	r3, [r7, #28]
 8008544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	69b9      	ldr	r1, [r7, #24]
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	617b      	str	r3, [r7, #20]
   return(result);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e6      	bne.n	8008524 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008556:	e002      	b.n	800855e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800855a:	f7fe ff17 	bl	800738c <HAL_UART_TxCpltCallback>
}
 800855e:	bf00      	nop
 8008560:	3740      	adds	r7, #64	; 0x40
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7fe ff13 	bl	80073a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857a:	bf00      	nop
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b09c      	sub	sp, #112	; 0x70
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008598:	d071      	beq.n	800867e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800859a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859c:	2200      	movs	r2, #0
 800859e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80085c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e6      	bne.n	80085a2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3308      	adds	r3, #8
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	f023 0301 	bic.w	r3, r3, #1
 80085ea:	667b      	str	r3, [r7, #100]	; 0x64
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085f4:	647a      	str	r2, [r7, #68]	; 0x44
 80085f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e5      	bne.n	80085d4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	623b      	str	r3, [r7, #32]
   return(result);
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861e:	663b      	str	r3, [r7, #96]	; 0x60
 8008620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008628:	633a      	str	r2, [r7, #48]	; 0x30
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800863c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008648:	2b01      	cmp	r3, #1
 800864a:	d118      	bne.n	800867e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	60fb      	str	r3, [r7, #12]
   return(result);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f023 0310 	bic.w	r3, r3, #16
 8008660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	69b9      	ldr	r1, [r7, #24]
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	617b      	str	r3, [r7, #20]
   return(result);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d107      	bne.n	8008696 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800868c:	4619      	mov	r1, r3
 800868e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008690:	f7fe fea4 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008694:	e002      	b.n	800869c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8008696:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008698:	f7f8 f95e 	bl	8000958 <HAL_UART_RxCpltCallback>
}
 800869c:	bf00      	nop
 800869e:	3770      	adds	r7, #112	; 0x70
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d109      	bne.n	80086ce <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	4619      	mov	r1, r3
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7fe fe88 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086cc:	e002      	b.n	80086d4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7fe fe70 	bl	80073b4 <HAL_UART_RxHalfCpltCallback>
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d109      	bne.n	800871c <UART_DMAError+0x40>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b21      	cmp	r3, #33	; 0x21
 800870c:	d106      	bne.n	800871c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008716:	6978      	ldr	r0, [r7, #20]
 8008718:	f7ff fe32 	bl	8008380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d109      	bne.n	800873e <UART_DMAError+0x62>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b22      	cmp	r3, #34	; 0x22
 800872e:	d106      	bne.n	800873e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2200      	movs	r2, #0
 8008734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008738:	6978      	ldr	r0, [r7, #20]
 800873a:	f7ff fe63 	bl	8008404 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008744:	f043 0210 	orr.w	r2, r3, #16
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800874e:	6978      	ldr	r0, [r7, #20]
 8008750:	f7fe fe3a 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008754:	bf00      	nop
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7fe fe24 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	60bb      	str	r3, [r7, #8]
   return(result);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6979      	ldr	r1, [r7, #20]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	613b      	str	r3, [r7, #16]
   return(result);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7fe fddb 	bl	800738c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bf00      	nop
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_UARTEx_DisableFifoMode+0x16>
 800882c:	2302      	movs	r3, #2
 800882e:	e027      	b.n	8008880 <HAL_UARTEx_DisableFifoMode+0x66>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2224      	movs	r2, #36	; 0x24
 800883c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800885e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e02d      	b.n	8008900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2224      	movs	r2, #36	; 0x24
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f84f 	bl	8008984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800891c:	2302      	movs	r3, #2
 800891e:	e02d      	b.n	800897c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2224      	movs	r2, #36	; 0x24
 800892c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0201 	bic.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f811 	bl	8008984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	2b00      	cmp	r3, #0
 8008992:	d108      	bne.n	80089a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089a4:	e031      	b.n	8008a0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089a6:	2310      	movs	r3, #16
 80089a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089aa:	2310      	movs	r3, #16
 80089ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	0e5b      	lsrs	r3, r3, #25
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	0f5b      	lsrs	r3, r3, #29
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	7b3a      	ldrb	r2, [r7, #12]
 80089d2:	4911      	ldr	r1, [pc, #68]	; (8008a18 <UARTEx_SetNbDataToProcess+0x94>)
 80089d4:	5c8a      	ldrb	r2, [r1, r2]
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089da:	7b3a      	ldrb	r2, [r7, #12]
 80089dc:	490f      	ldr	r1, [pc, #60]	; (8008a1c <UARTEx_SetNbDataToProcess+0x98>)
 80089de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	7b7a      	ldrb	r2, [r7, #13]
 80089f0:	4909      	ldr	r1, [pc, #36]	; (8008a18 <UARTEx_SetNbDataToProcess+0x94>)
 80089f2:	5c8a      	ldrb	r2, [r1, r2]
 80089f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089f8:	7b7a      	ldrb	r2, [r7, #13]
 80089fa:	4908      	ldr	r1, [pc, #32]	; (8008a1c <UARTEx_SetNbDataToProcess+0x98>)
 80089fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	08008ac0 	.word	0x08008ac0
 8008a1c:	08008ac8 	.word	0x08008ac8

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	; (8008a58 <__libc_init_array+0x38>)
 8008a24:	4c0d      	ldr	r4, [pc, #52]	; (8008a5c <__libc_init_array+0x3c>)
 8008a26:	1b64      	subs	r4, r4, r5
 8008a28:	10a4      	asrs	r4, r4, #2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	; (8008a60 <__libc_init_array+0x40>)
 8008a32:	4c0c      	ldr	r4, [pc, #48]	; (8008a64 <__libc_init_array+0x44>)
 8008a34:	f000 f820 	bl	8008a78 <_init>
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	4798      	blx	r3
 8008a54:	3601      	adds	r6, #1
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	08008ad8 	.word	0x08008ad8
 8008a5c:	08008ad8 	.word	0x08008ad8
 8008a60:	08008ad8 	.word	0x08008ad8
 8008a64:	08008adc 	.word	0x08008adc

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
