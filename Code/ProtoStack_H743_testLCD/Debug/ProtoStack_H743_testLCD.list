
ProtoStack_H743_testLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001087c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08010b14  08010b14  00020b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010bbc  08010bbc  00020bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08010bc4  08010bc4  00020bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010bcc  08010bcc  00020bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  24000000  08010bd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000118c  2400012c  08010cfc  0003012c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240012b8  08010cfc  000312b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 10 .ramd1        00000000  24001eb8  24001eb8  0003015a  2**0
                  CONTENTS
 11 .ramd2        00000000  30000000  30000000  0003015a  2**0
                  CONTENTS
 12 .ramd3        00000000  38000000  38000000  0003015a  2**0
                  CONTENTS
 13 .dtcm         00000000  20000000  20000000  0003015a  2**0
                  CONTENTS
 14 .itcm         00000000  00000000  00000000  0003015a  2**0
                  CONTENTS
 15 .debug_info   00031d9f  00000000  00000000  0003015a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000062bd  00000000  00000000  00061ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ee8  00000000  00000000  000681b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001c48  00000000  00000000  0006a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00043090  00000000  00000000  0006bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030ecd  00000000  00000000  000aed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00173fb4  00000000  00000000  000dfc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00253bf9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007fa8  00000000  00000000  00253c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400012c 	.word	0x2400012c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010afc 	.word	0x08010afc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000130 	.word	0x24000130
 80002d4:	08010afc 	.word	0x08010afc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f001 f963 	bl	80018d0 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fb50 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	24000148 	.word	0x24000148
 800061c:	58024c00 	.word	0x58024c00

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <HAL_CRC_MspInit+0x3c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10e      	bne.n	8000650 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_CRC_MspInit+0x40>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <HAL_CRC_MspInit+0x40>)
 800063a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <HAL_CRC_MspInit+0x40>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	58024c00 	.word	0x58024c00
 8000660:	58024400 	.word	0x58024400

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_DMA_Init+0x4c>)
 800066c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_DMA_Init+0x4c>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_DMA_Init+0x4c>)
 800067c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	200b      	movs	r0, #11
 800068e:	f001 f87b 	bl	8001788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000692:	200b      	movs	r0, #11
 8000694:	f001 f892 	bl	80017bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	200c      	movs	r0, #12
 800069e:	f001 f873 	bl	8001788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006a2:	200c      	movs	r0, #12
 80006a4:	f001 f88a 	bl	80017bc <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58024400 	.word	0x58024400

080006b4 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_FMC_Init+0xbc>)
 80006ce:	4a29      	ldr	r2, [pc, #164]	; (8000774 <MX_FMC_Init+0xc0>)
 80006d0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_FMC_Init+0xbc>)
 80006d4:	4a28      	ldr	r2, [pc, #160]	; (8000778 <MX_FMC_Init+0xc4>)
 80006d6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_FMC_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_FMC_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_FMC_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_FMC_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_FMC_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_FMC_Init+0xbc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_FMC_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_FMC_Init+0xbc>)
 8000704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_FMC_Init+0xbc>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_FMC_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_FMC_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_FMC_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_FMC_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_FMC_Init+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_FMC_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000738:	230f      	movs	r3, #15
 800073a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 127;
 800073c:	237f      	movs	r3, #127	; 0x7f
 800073e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000748:	2311      	movs	r3, #17
 800074a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_FMC_Init+0xbc>)
 8000758:	f008 fb7e 	bl	8008e58 <HAL_SRAM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000762:	f000 faa7 	bl	8000cb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2400016c 	.word	0x2400016c
 8000774:	52004000 	.word	0x52004000
 8000778:	52004104 	.word	0x52004104

0800077c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b0b6      	sub	sp, #216	; 0xd8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <HAL_FMC_MspInit+0xfc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d169      	bne.n	800086e <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <HAL_FMC_MspInit+0xfc>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	22bc      	movs	r2, #188	; 0xbc
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f010 f99f 	bl	8010aec <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80007ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 f9ad 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 80007c8:	f000 fa74 	bl	8000cb4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_FMC_MspInit+0x100>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007d2:	4a2a      	ldr	r2, [pc, #168]	; (800087c <HAL_FMC_MspInit+0x100>)
 80007d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <HAL_FMC_MspInit+0x100>)
 80007de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80007ea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80007ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000804:	230c      	movs	r3, #12
 8000806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080e:	4619      	mov	r1, r3
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <HAL_FMC_MspInit+0x104>)
 8000812:	f003 fc71 	bl	80040f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000816:	f24c 0333 	movw	r3, #49203	; 0xc033
 800081a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000830:	230c      	movs	r3, #12
 8000832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800083a:	4619      	mov	r1, r3
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <HAL_FMC_MspInit+0x108>)
 800083e:	f003 fc5b 	bl	80040f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800085a:	2309      	movs	r3, #9
 800085c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <HAL_FMC_MspInit+0x10c>)
 8000868:	f003 fc46 	bl	80040f8 <HAL_GPIO_Init>
 800086c:	e000      	b.n	8000870 <HAL_FMC_MspInit+0xf4>
    return;
 800086e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000870:	37d8      	adds	r7, #216	; 0xd8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	240001b8 	.word	0x240001b8
 800087c:	58024400 	.word	0x58024400
 8000880:	58021000 	.word	0x58021000
 8000884:	58020c00 	.word	0x58020c00
 8000888:	58020800 	.word	0x58020800

0800088c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000894:	f7ff ff72 	bl	800077c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a3c      	ldr	r2, [pc, #240]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e4:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x110>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_GPIO_Init+0x110>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x110>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x110>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LCD_RESET_GPIO_Port, USER_LCD_RESET_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000970:	f003 fd72 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000974:	2301      	movs	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0x114>)
 8000988:	f003 fbb6 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LCD_RESET_Pin;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USER_LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0x114>)
 80009a4:	f003 fba8 	bl	80040f8 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024400 	.word	0x58024400
 80009b4:	58020800 	.word	0x58020800

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009bc:	f000 f93e 	bl	8000c3c <_ZL10MPU_Configv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <main+0xac>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11b      	bne.n	8000a0e <main+0x56>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
}
 80009da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009dc:	f3bf 8f6f 	isb	sy
}
 80009e0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <main+0xac>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009ea:	f3bf 8f4f 	dsb	sy
}
 80009ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f0:	f3bf 8f6f 	isb	sy
}
 80009f4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <main+0xac>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <main+0xac>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a02:	f3bf 8f4f 	dsb	sy
}
 8000a06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a08:	f3bf 8f6f 	isb	sy
}
 8000a0c:	e000      	b.n	8000a10 <main+0x58>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a0e:	bf00      	nop
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fd76 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f82a 	bl	8000a6c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a18:	f000 f8f0 	bl	8000bfc <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff ff40 	bl	80008a0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000a20:	f7ff fe48 	bl	80006b4 <MX_FMC_Init>
  MX_DMA_Init();
 8000a24:	f7ff fe1e 	bl	8000664 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000a28:	f00f fb30 	bl	801008c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 fc8e 	bl	800134c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a30:	f000 f946 	bl	8000cc0 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000a34:	f000 f99c 	bl	8000d70 <MX_SPI4_Init>
  MX_CRC_Init();
 8000a38:	f7ff fdd0 	bl	80005dc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8000a3c:	f00b feb0 	bl	800c7a0 <ili9341_Init>
  ili9341_FillScreen(MAGENTA);
 8000a40:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000a44:	f00c f870 	bl	800cb28 <ili9341_FillScreen>
  HAL_Delay(500);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f000 fdb4 	bl	80015b8 <HAL_Delay>
  UIadapter_Init(&UIadapterReg);
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <main+0xb0>)
 8000a52:	f00b fccd 	bl	800c3f0 <UIadapter_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UIadapter_ReadWriteUI(&UIadapterReg);
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0xb0>)
 8000a58:	f00b fd10 	bl	800c47c <UIadapter_ReadWriteUI>
	  HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fdab 	bl	80015b8 <HAL_Delay>
	  UIadapter_ReadWriteUI(&UIadapterReg);
 8000a62:	e7f8      	b.n	8000a56 <main+0x9e>
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	240005cc 	.word	0x240005cc

08000a6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09e      	sub	sp, #120	; 0x78
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	224c      	movs	r2, #76	; 0x4c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f010 f836 	bl	8010aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2220      	movs	r2, #32
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f010 f82f 	bl	8010aec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f004 fffe 	bl	8005a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b55      	ldr	r3, [pc, #340]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa4:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a50      	ldr	r2, [pc, #320]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d000      	beq.n	8000ae0 <_Z18SystemClock_Configv+0x74>
 8000ade:	e7f2      	b.n	8000ac6 <_Z18SystemClock_Configv+0x5a>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae0:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <_Z18SystemClock_Configv+0x18c>)
 8000ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae6:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <_Z18SystemClock_Configv+0x18c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <_Z18SystemClock_Configv+0x18c>)
 8000af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a3b      	ldr	r2, [pc, #236]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <_Z18SystemClock_Configv+0x184>)
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <_Z18SystemClock_Configv+0x188>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d000      	beq.n	8000b4a <_Z18SystemClock_Configv+0xde>
 8000b48:	e7f2      	b.n	8000b30 <_Z18SystemClock_Configv+0xc4>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000b4a:	2323      	movs	r3, #35	; 0x23
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b64:	2302      	movs	r3, #2
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 ffc9 	bl	8005b24 <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_Z18SystemClock_Configv+0x13a>
  {
    Error_Handler();
 8000ba2:	f000 f887 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	233f      	movs	r3, #63	; 0x3f
 8000ba8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2303      	movs	r3, #3
 8000bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f005 fbd6 	bl	8006380 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <_Z18SystemClock_Configv+0x17c>
  {
    Error_Handler();
 8000be4:	f000 f866 	bl	8000cb4 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3778      	adds	r7, #120	; 0x78
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58000400 	.word	0x58000400
 8000bf4:	58024800 	.word	0x58024800
 8000bf8:	58024400 	.word	0x58024400

08000bfc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b0      	sub	sp, #192	; 0xc0
 8000c00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	22bc      	movs	r2, #188	; 0xbc
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00f ff6f 	bl	8010aec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c12:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000c14:	2300      	movs	r3, #0
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f005 ff7e 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <_Z24PeriphCommonClock_Configv+0x38>
  {
    Error_Handler();
 8000c30:	f000 f840 	bl	8000cb4 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	37c0      	adds	r7, #192	; 0xc0
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c4e:	f000 fdc3 	bl	80017d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8000c5a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c5e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000c60:	2319      	movs	r3, #25
 8000c62:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c80:	463b      	mov	r3, r7
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fde0 	bl	8001848 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f000 fdbd 	bl	8001808 <HAL_MPU_Enable>

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca6:	d101      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca8:	f000 fc66 	bl	8001578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cc6:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <MX_SPI2_Init+0xac>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000ccc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000cf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cf4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_SPI2_Init+0xa8>)
 8000d54:	f007 fa4a 	bl	80081ec <HAL_SPI_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000d5e:	f7ff ffa9 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	240001bc 	.word	0x240001bc
 8000d6c:	40003800 	.word	0x40003800

08000d70 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d76:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <MX_SPI4_Init+0xa8>)
 8000d78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000d9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000da0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_SPI4_Init+0xa4>)
 8000e02:	f007 f9f3 	bl	80081ec <HAL_SPI_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000e0c:	f7ff ff52 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000244 	.word	0x24000244
 8000e18:	40013400 	.word	0x40013400

08000e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ba      	sub	sp, #232	; 0xe8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	22bc      	movs	r2, #188	; 0xbc
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f00f fe55 	bl	8010aec <memset>
  if(spiHandle->Instance==SPI2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7c      	ldr	r2, [pc, #496]	; (8001038 <HAL_SPI_MspInit+0x21c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	f040 80a7 	bne.w	8000f9c <HAL_SPI_MspInit+0x180>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e58:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fe5c 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8000e6a:	f7ff ff23 	bl	8000cb4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6e:	4b73      	ldr	r3, [pc, #460]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e74:	4a71      	ldr	r2, [pc, #452]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e7e:	4b6f      	ldr	r3, [pc, #444]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a6a      	ldr	r2, [pc, #424]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b67      	ldr	r3, [pc, #412]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	485b      	ldr	r0, [pc, #364]	; (8001040 <HAL_SPI_MspInit+0x224>)
 8000ed2:	f003 f911 	bl	80040f8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000ed8:	4a5b      	ldr	r2, [pc, #364]	; (8001048 <HAL_SPI_MspInit+0x22c>)
 8000eda:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000ede:	2227      	movs	r2, #39	; 0x27
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b56      	ldr	r3, [pc, #344]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	4b51      	ldr	r3, [pc, #324]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f08:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000f14:	484b      	ldr	r0, [pc, #300]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f16:	f000 fdc5 	bl	8001aa4 <HAL_DMA_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000f20:	f7ff fec8 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a47      	ldr	r2, [pc, #284]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f28:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_SPI_MspInit+0x228>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f32:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_SPI_MspInit+0x234>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f38:	2228      	movs	r2, #40	; 0x28
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f3e:	2240      	movs	r2, #64	; 0x40
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f50:	4b3e      	ldr	r3, [pc, #248]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f6e:	4837      	ldr	r0, [pc, #220]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f70:	f000 fd98 	bl	8001aa4 <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8000f7a:	f7ff fe9b 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f82:	679a      	str	r2, [r3, #120]	; 0x78
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_SPI_MspInit+0x230>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2024      	movs	r0, #36	; 0x24
 8000f90:	f000 fbfa 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f94:	2024      	movs	r0, #36	; 0x24
 8000f96:	f000 fc11 	bl	80017bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000f9a:	e048      	b.n	800102e <HAL_SPI_MspInit+0x212>
  else if(spiHandle->Instance==SPI4)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <HAL_SPI_MspInit+0x238>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d143      	bne.n	800102e <HAL_SPI_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8000fac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000fb0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 fdb0 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_SPI_MspInit+0x1aa>
      Error_Handler();
 8000fc2:	f7ff fe77 	bl	8000cb4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_SPI_MspInit+0x220>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001002:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800101c:	2305      	movs	r3, #5
 800101e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001026:	4619      	mov	r1, r3
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_SPI_MspInit+0x23c>)
 800102a:	f003 f865 	bl	80040f8 <HAL_GPIO_Init>
}
 800102e:	bf00      	nop
 8001030:	37e8      	adds	r7, #232	; 0xe8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40003800 	.word	0x40003800
 800103c:	58024400 	.word	0x58024400
 8001040:	58020400 	.word	0x58020400
 8001044:	240002cc 	.word	0x240002cc
 8001048:	40020010 	.word	0x40020010
 800104c:	24000344 	.word	0x24000344
 8001050:	40020028 	.word	0x40020028
 8001054:	40013400 	.word	0x40013400
 8001058:	58021000 	.word	0x58021000

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x30>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x30>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	58024400 	.word	0x58024400

08001090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d827      	bhi.n	80010ee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	201c      	movs	r0, #28
 80010a4:	f000 fb70 	bl	8001788 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a8:	201c      	movs	r0, #28
 80010aa:	f000 fb87 	bl	80017bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010ae:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_InitTick+0xc4>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_InitTick+0xc8>)
 80010b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ba:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HAL_InitTick+0xc8>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_InitTick+0xc8>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d2:	f107 0210 	add.w	r2, r7, #16
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 fcdb 	bl	8006a98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d106      	bne.n	80010fa <HAL_InitTick+0x6a>
 80010ec:	e001      	b.n	80010f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e02c      	b.n	800114c <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f2:	f005 fca5 	bl	8006a40 <HAL_RCC_GetPCLK1Freq>
 80010f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80010f8:	e004      	b.n	8001104 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010fa:	f005 fca1 	bl	8006a40 <HAL_RCC_GetPCLK1Freq>
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_InitTick+0xcc>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3b01      	subs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_InitTick+0xd0>)
 8001114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001118:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_InitTick+0xd0>)
 800111c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001120:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_InitTick+0xd0>)
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_InitTick+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_InitTick+0xd0>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <HAL_InitTick+0xd0>)
 8001136:	f007 fedf 	bl	8008ef8 <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d104      	bne.n	800114a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_InitTick+0xd0>)
 8001142:	f007 ff3b 	bl	8008fbc <HAL_TIM_Base_Start_IT>
 8001146:	4603      	mov	r3, r0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3740      	adds	r7, #64	; 0x40
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000008 	.word	0x24000008
 8001158:	58024400 	.word	0x58024400
 800115c:	431bde83 	.word	0x431bde83
 8001160:	240003bc 	.word	0x240003bc

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Stream0_IRQHandler+0x10>)
 80011c2:	f001 fc7b 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	240002cc 	.word	0x240002cc

080011d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Stream1_IRQHandler+0x10>)
 80011d6:	f001 fc71 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24000344 	.word	0x24000344

080011e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM2_IRQHandler+0x10>)
 80011ea:	f007 ff5f 	bl	80090ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	240003bc 	.word	0x240003bc

080011f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <SPI2_IRQHandler+0x10>)
 80011fe:	f007 fad1 	bl	80087a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240001bc 	.word	0x240001bc

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f003 fa91 	bl	8004738 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000b34 	.word	0x24000b34

08001220 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	UIadapter_ReadWriteUI_spi2_callback(&UIadapterReg);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <HAL_SPI_TxRxCpltCallback+0x18>)
 800122a:	f00b f93b 	bl	800c4a4 <UIadapter_ReadWriteUI_spi2_callback>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	240005cc 	.word	0x240005cc

0800123c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <SystemInit+0xe4>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a36      	ldr	r2, [pc, #216]	; (8001320 <SystemInit+0xe4>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001250:	4b34      	ldr	r3, [pc, #208]	; (8001324 <SystemInit+0xe8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	2b06      	cmp	r3, #6
 800125a:	d807      	bhi.n	800126c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <SystemInit+0xe8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 030f 	bic.w	r3, r3, #15
 8001264:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <SystemInit+0xe8>)
 8001266:	f043 0307 	orr.w	r3, r3, #7
 800126a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <SystemInit+0xec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <SystemInit+0xec>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <SystemInit+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <SystemInit+0xec>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4929      	ldr	r1, [pc, #164]	; (8001328 <SystemInit+0xec>)
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <SystemInit+0xf0>)
 8001286:	4013      	ands	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <SystemInit+0xe8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <SystemInit+0xe8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 030f 	bic.w	r3, r3, #15
 800129e:	4a21      	ldr	r2, [pc, #132]	; (8001324 <SystemInit+0xe8>)
 80012a0:	f043 0307 	orr.w	r3, r3, #7
 80012a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <SystemInit+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <SystemInit+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <SystemInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <SystemInit+0xec>)
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <SystemInit+0xf4>)
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <SystemInit+0xec>)
 80012c0:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <SystemInit+0xf8>)
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <SystemInit+0xec>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <SystemInit+0xfc>)
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <SystemInit+0xec>)
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <SystemInit+0xfc>)
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <SystemInit+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <SystemInit+0xec>)
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <SystemInit+0xfc>)
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <SystemInit+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <SystemInit+0xec>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <SystemInit+0xec>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <SystemInit+0xec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <SystemInit+0x100>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <SystemInit+0x104>)
 8001300:	4013      	ands	r3, r2
 8001302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001306:	d202      	bcs.n	800130e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <SystemInit+0x108>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <SystemInit+0x10c>)
 8001310:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001314:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	52002000 	.word	0x52002000
 8001328:	58024400 	.word	0x58024400
 800132c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001330:	02020200 	.word	0x02020200
 8001334:	01ff0000 	.word	0x01ff0000
 8001338:	01010280 	.word	0x01010280
 800133c:	5c001000 	.word	0x5c001000
 8001340:	ffff0000 	.word	0xffff0000
 8001344:	51008108 	.word	0x51008108
 8001348:	52004000 	.word	0x52004000

0800134c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_USART2_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001396:	f008 f889 	bl	80094ac <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f7ff fc88 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013a8:	f009 f826 	bl	800a3f8 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f7ff fc7f 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013ba:	f009 f85b 	bl	800a474 <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f7ff fc76 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013ca:	f008 ffdc 	bl	800a386 <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f7ff fc6e 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000408 	.word	0x24000408
 80013e0:	40004400 	.word	0x40004400

080013e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b8      	sub	sp, #224	; 0xe0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22bc      	movs	r2, #188	; 0xbc
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00f fb71 	bl	8010aec <memset>
  if(uartHandle->Instance==USART2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <HAL_UART_MspInit+0xbc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d141      	bne.n	8001498 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fb7a 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800142e:	f7ff fc41 	bl	8000cb4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_UART_MspInit+0xc0>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230c      	movs	r3, #12
 8001470:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001486:	2307      	movs	r3, #7
 8001488:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_UART_MspInit+0xc4>)
 8001494:	f002 fe30 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001498:	bf00      	nop
 800149a:	37e0      	adds	r7, #224	; 0xe0
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40004400 	.word	0x40004400
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020000 	.word	0x58020000

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b0:	f7ff fec4 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f00f fae3 	bl	8010aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff fa6b 	bl	80009b8 <main>
  bx  lr
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014ec:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80014f0:	08010bd0 	.word	0x08010bd0
  ldr r2, =_sbss
 80014f4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80014f8:	240012b8 	.word	0x240012b8

080014fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC3_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f933 	bl	8001772 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800150c:	f005 f8ee 	bl	80066ec <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	4913      	ldr	r1, [pc, #76]	; (800156c <HAL_Init+0x6c>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_Init+0x68>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_Init+0x6c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_Init+0x70>)
 8001542:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_Init+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154a:	200f      	movs	r0, #15
 800154c:	f7ff fda0 	bl	8001090 <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e002      	b.n	8001560 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800155a:	f7ff fd7f 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024400 	.word	0x58024400
 800156c:	08010b58 	.word	0x08010b58
 8001570:	24000004 	.word	0x24000004
 8001574:	24000000 	.word	0x24000000

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	24000498 	.word	0x24000498

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000498 	.word	0x24000498

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c

08001600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetREVID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	5c001000 	.word	0x5c001000

08001618 <__NVIC_SetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff4c 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001796:	f7ff ff63 	bl	8001660 <__NVIC_GetPriorityGrouping>
 800179a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f7ff ffb3 	bl	800170c <NVIC_EncodePriority>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff82 	bl	80016b8 <__NVIC_SetPriority>
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff56 	bl	800167c <__NVIC_EnableIRQ>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017dc:	f3bf 8f5f 	dmb	sy
}
 80017e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_MPU_Disable+0x2c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_MPU_Enable+0x38>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MPU_Enable+0x3c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_MPU_Enable+0x3c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
}
 8001830:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed90 	.word	0xe000ed90
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	785a      	ldrb	r2, [r3, #1]
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 8001856:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d029      	beq.n	80018b4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7adb      	ldrb	r3, [r3, #11]
 8001872:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7a9b      	ldrb	r3, [r3, #10]
 800187a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800187c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7b5b      	ldrb	r3, [r3, #13]
 8001882:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001884:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7b9b      	ldrb	r3, [r3, #14]
 800188a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800188c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7bdb      	ldrb	r3, [r3, #15]
 8001892:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001894:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7a5b      	ldrb	r3, [r3, #9]
 800189a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800189c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018a4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018b0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018b2:	e005      	b.n	80018c0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_MPU_ConfigRegion+0x84>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed90 	.word	0xe000ed90

080018d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e054      	b.n	800198c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7f5b      	ldrb	r3, [r3, #29]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe94 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a22      	ldr	r2, [pc, #136]	; (8001994 <HAL_CRC_Init+0xc4>)
 800190c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0218 	bic.w	r2, r2, #24
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	e00c      	b.n	800193a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	461a      	mov	r2, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f834 	bl	8001998 <HAL_CRCEx_Polynomial_Set>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e028      	b.n	800198c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	e004      	b.n	8001958 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6912      	ldr	r2, [r2, #16]
 8001956:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	04c11db7 	.word	0x04c11db7

08001998 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019a8:	231f      	movs	r3, #31
 80019aa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019ac:	bf00      	nop
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	613a      	str	r2, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d009      	beq.n	80019cc <HAL_CRCEx_Polynomial_Set+0x34>
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b18      	cmp	r3, #24
 80019d0:	d846      	bhi.n	8001a60 <HAL_CRCEx_Polynomial_Set+0xc8>
 80019d2:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	08001a67 	.word	0x08001a67
 80019dc:	08001a61 	.word	0x08001a61
 80019e0:	08001a61 	.word	0x08001a61
 80019e4:	08001a61 	.word	0x08001a61
 80019e8:	08001a61 	.word	0x08001a61
 80019ec:	08001a61 	.word	0x08001a61
 80019f0:	08001a61 	.word	0x08001a61
 80019f4:	08001a61 	.word	0x08001a61
 80019f8:	08001a55 	.word	0x08001a55
 80019fc:	08001a61 	.word	0x08001a61
 8001a00:	08001a61 	.word	0x08001a61
 8001a04:	08001a61 	.word	0x08001a61
 8001a08:	08001a61 	.word	0x08001a61
 8001a0c:	08001a61 	.word	0x08001a61
 8001a10:	08001a61 	.word	0x08001a61
 8001a14:	08001a61 	.word	0x08001a61
 8001a18:	08001a49 	.word	0x08001a49
 8001a1c:	08001a61 	.word	0x08001a61
 8001a20:	08001a61 	.word	0x08001a61
 8001a24:	08001a61 	.word	0x08001a61
 8001a28:	08001a61 	.word	0x08001a61
 8001a2c:	08001a61 	.word	0x08001a61
 8001a30:	08001a61 	.word	0x08001a61
 8001a34:	08001a61 	.word	0x08001a61
 8001a38:	08001a3d 	.word	0x08001a3d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d913      	bls.n	8001a6a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a46:	e010      	b.n	8001a6a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d90f      	bls.n	8001a6e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a52:	e00c      	b.n	8001a6e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d90b      	bls.n	8001a72 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a5e:	e008      	b.n	8001a72 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	75fb      	strb	r3, [r7, #23]
      break;
 8001a64:	e006      	b.n	8001a74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a66:	bf00      	nop
 8001a68:	e004      	b.n	8001a74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e002      	b.n	8001a74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a72:	bf00      	nop
  }
  if (status == HAL_OK)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10d      	bne.n	8001a96 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 0118 	bic.w	r1, r3, #24
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fd78 	bl	80015a0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e316      	b.n	80020ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_DMA_Init+0x1b8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_DMA_Init+0x1bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a63      	ldr	r2, [pc, #396]	; (8001c64 <HAL_DMA_Init+0x1c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a62      	ldr	r2, [pc, #392]	; (8001c68 <HAL_DMA_Init+0x1c4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a60      	ldr	r2, [pc, #384]	; (8001c6c <HAL_DMA_Init+0x1c8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <HAL_DMA_Init+0x1cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_DMA_Init+0x1d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5c      	ldr	r2, [pc, #368]	; (8001c78 <HAL_DMA_Init+0x1d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <HAL_DMA_Init+0x1d8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a59      	ldr	r2, [pc, #356]	; (8001c80 <HAL_DMA_Init+0x1dc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_DMA_Init+0x1e0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_DMA_Init+0x1e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <HAL_DMA_Init+0x1e8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a53      	ldr	r2, [pc, #332]	; (8001c90 <HAL_DMA_Init+0x1ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_DMA_Init+0x1f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_DMA_Init+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA_Init+0xbc>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_Init+0xbe>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 813b 	beq.w	8001dde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <HAL_DMA_Init+0x1b8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <HAL_DMA_Init+0x1bc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_DMA_Init+0x1c0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_DMA_Init+0x1c4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_DMA_Init+0x1c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_DMA_Init+0x1cc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_DMA_Init+0x1d0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_DMA_Init+0x1d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_DMA_Init+0x1d8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_DMA_Init+0x1dc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_DMA_Init+0x1e0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_DMA_Init+0x1e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_DMA_Init+0x1e8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_DMA_Init+0x1ec>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_DMA_Init+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_DMA_Init+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d108      	bne.n	8001c2a <HAL_DMA_Init+0x186>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_DMA_Init+0x196>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c3a:	e02f      	b.n	8001c9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3c:	f7ff fcb0 	bl	80015a0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d928      	bls.n	8001c9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e246      	b.n	80020ea <HAL_DMA_Init+0x646>
 8001c5c:	40020010 	.word	0x40020010
 8001c60:	40020028 	.word	0x40020028
 8001c64:	40020040 	.word	0x40020040
 8001c68:	40020058 	.word	0x40020058
 8001c6c:	40020070 	.word	0x40020070
 8001c70:	40020088 	.word	0x40020088
 8001c74:	400200a0 	.word	0x400200a0
 8001c78:	400200b8 	.word	0x400200b8
 8001c7c:	40020410 	.word	0x40020410
 8001c80:	40020428 	.word	0x40020428
 8001c84:	40020440 	.word	0x40020440
 8001c88:	40020458 	.word	0x40020458
 8001c8c:	40020470 	.word	0x40020470
 8001c90:	40020488 	.word	0x40020488
 8001c94:	400204a0 	.word	0x400204a0
 8001c98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1c8      	bne.n	8001c3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_DMA_Init+0x420>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_DMA_Init+0x424>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b71      	ldr	r3, [pc, #452]	; (8001ecc <HAL_DMA_Init+0x428>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d0c:	d328      	bcc.n	8001d60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b28      	cmp	r3, #40	; 0x28
 8001d14:	d903      	bls.n	8001d1e <HAL_DMA_Init+0x27a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d1c:	d917      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b3e      	cmp	r3, #62	; 0x3e
 8001d24:	d903      	bls.n	8001d2e <HAL_DMA_Init+0x28a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b42      	cmp	r3, #66	; 0x42
 8001d2c:	d90f      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b46      	cmp	r3, #70	; 0x46
 8001d34:	d903      	bls.n	8001d3e <HAL_DMA_Init+0x29a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b48      	cmp	r3, #72	; 0x48
 8001d3c:	d907      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b4e      	cmp	r3, #78	; 0x4e
 8001d44:	d905      	bls.n	8001d52 <HAL_DMA_Init+0x2ae>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b52      	cmp	r3, #82	; 0x52
 8001d4c:	d801      	bhi.n	8001d52 <HAL_DMA_Init+0x2ae>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_Init+0x2b0>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d117      	bne.n	8001dba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f002 f821 	bl	8003de4 <DMA_CheckFifoParam>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e197      	b.n	80020ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 ff5c 	bl	8003c80 <DMA_CalcBaseAndBitshift>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	223f      	movs	r2, #63	; 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e0cd      	b.n	8001f7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <HAL_DMA_Init+0x42c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a39      	ldr	r2, [pc, #228]	; (8001ed4 <HAL_DMA_Init+0x430>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <HAL_DMA_Init+0x434>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_DMA_Init+0x438>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <HAL_DMA_Init+0x43c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_DMA_Init+0x440>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_DMA_Init+0x444>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_DMA_Init+0x448>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Init+0x38e>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Init+0x390>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8097 	beq.w	8001f68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_DMA_Init+0x42c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d021      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_DMA_Init+0x430>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01c      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <HAL_DMA_Init+0x434>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d017      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_DMA_Init+0x438>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d012      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_DMA_Init+0x43c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00d      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_DMA_Init+0x440>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d008      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_DMA_Init+0x444>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_DMA_Init+0x448>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_DMA_Init+0x44c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d020      	beq.n	8001ef4 <HAL_DMA_Init+0x450>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DMA_Init+0x41c>
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	e01a      	b.n	8001ef6 <HAL_DMA_Init+0x452>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e018      	b.n	8001ef6 <HAL_DMA_Init+0x452>
 8001ec4:	fe10803f 	.word	0xfe10803f
 8001ec8:	5c001000 	.word	0x5c001000
 8001ecc:	ffff0000 	.word	0xffff0000
 8001ed0:	58025408 	.word	0x58025408
 8001ed4:	5802541c 	.word	0x5802541c
 8001ed8:	58025430 	.word	0x58025430
 8001edc:	58025444 	.word	0x58025444
 8001ee0:	58025458 	.word	0x58025458
 8001ee4:	5802546c 	.word	0x5802546c
 8001ee8:	58025480 	.word	0x58025480
 8001eec:	58025494 	.word	0x58025494
 8001ef0:	fffe000f 	.word	0xfffe000f
 8001ef4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <HAL_DMA_Init+0x650>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_DMA_Init+0x654>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	009a      	lsls	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 fe97 	bl	8003c80 <DMA_CalcBaseAndBitshift>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	e008      	b.n	8001f7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0b7      	b.n	80020ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <HAL_DMA_Init+0x658>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d072      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_DMA_Init+0x65c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d06d      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5c      	ldr	r2, [pc, #368]	; (8002104 <HAL_DMA_Init+0x660>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d068      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_DMA_Init+0x664>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d063      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a59      	ldr	r2, [pc, #356]	; (800210c <HAL_DMA_Init+0x668>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d05e      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	; (8002110 <HAL_DMA_Init+0x66c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d059      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_DMA_Init+0x670>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d054      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_DMA_Init+0x674>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04f      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a53      	ldr	r2, [pc, #332]	; (800211c <HAL_DMA_Init+0x678>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04a      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_DMA_Init+0x67c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d045      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_DMA_Init+0x680>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d040      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_DMA_Init+0x684>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d03b      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_DMA_Init+0x688>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_DMA_Init+0x68c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_DMA_Init+0x690>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_DMA_Init+0x694>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d027      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_DMA_Init+0x698>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a45      	ldr	r2, [pc, #276]	; (8002140 <HAL_DMA_Init+0x69c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01d      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a44      	ldr	r2, [pc, #272]	; (8002144 <HAL_DMA_Init+0x6a0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d018      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_DMA_Init+0x6a4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a41      	ldr	r2, [pc, #260]	; (800214c <HAL_DMA_Init+0x6a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_DMA_Init+0x6ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <HAL_DMA_Init+0x6b0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_DMA_Init+0x6b4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_DMA_Init+0x5ca>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_DMA_Init+0x5cc>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f001 ff31 	bl	8003edc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d102      	bne.n	8002088 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800209c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_DMA_Init+0x624>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d80c      	bhi.n	80020c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 ffae 	bl	8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	e008      	b.n	80020da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	a7fdabf8 	.word	0xa7fdabf8
 80020f8:	cccccccd 	.word	0xcccccccd
 80020fc:	40020010 	.word	0x40020010
 8002100:	40020028 	.word	0x40020028
 8002104:	40020040 	.word	0x40020040
 8002108:	40020058 	.word	0x40020058
 800210c:	40020070 	.word	0x40020070
 8002110:	40020088 	.word	0x40020088
 8002114:	400200a0 	.word	0x400200a0
 8002118:	400200b8 	.word	0x400200b8
 800211c:	40020410 	.word	0x40020410
 8002120:	40020428 	.word	0x40020428
 8002124:	40020440 	.word	0x40020440
 8002128:	40020458 	.word	0x40020458
 800212c:	40020470 	.word	0x40020470
 8002130:	40020488 	.word	0x40020488
 8002134:	400204a0 	.word	0x400204a0
 8002138:	400204b8 	.word	0x400204b8
 800213c:	58025408 	.word	0x58025408
 8002140:	5802541c 	.word	0x5802541c
 8002144:	58025430 	.word	0x58025430
 8002148:	58025444 	.word	0x58025444
 800214c:	58025458 	.word	0x58025458
 8002150:	5802546c 	.word	0x5802546c
 8002154:	58025480 	.word	0x58025480
 8002158:	58025494 	.word	0x58025494

0800215c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e226      	b.n	80025c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Start_IT+0x2a>
 8002182:	2302      	movs	r3, #2
 8002184:	e21f      	b.n	80025c6 <HAL_DMA_Start_IT+0x46a>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 820a 	bne.w	80025b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a68      	ldr	r2, [pc, #416]	; (8002350 <HAL_DMA_Start_IT+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04a      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a66      	ldr	r2, [pc, #408]	; (8002354 <HAL_DMA_Start_IT+0x1f8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d045      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_DMA_Start_IT+0x1fc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d040      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_DMA_Start_IT+0x200>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d03b      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a62      	ldr	r2, [pc, #392]	; (8002360 <HAL_DMA_Start_IT+0x204>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d036      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_DMA_Start_IT+0x208>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d031      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a5f      	ldr	r2, [pc, #380]	; (8002368 <HAL_DMA_Start_IT+0x20c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d02c      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5d      	ldr	r2, [pc, #372]	; (800236c <HAL_DMA_Start_IT+0x210>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d027      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_DMA_Start_IT+0x214>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5a      	ldr	r2, [pc, #360]	; (8002374 <HAL_DMA_Start_IT+0x218>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01d      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_DMA_Start_IT+0x21c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d018      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_DMA_Start_IT+0x220>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_DMA_Start_IT+0x224>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a54      	ldr	r2, [pc, #336]	; (8002384 <HAL_DMA_Start_IT+0x228>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a53      	ldr	r2, [pc, #332]	; (8002388 <HAL_DMA_Start_IT+0x22c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_DMA_Start_IT+0xee>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a51      	ldr	r2, [pc, #324]	; (800238c <HAL_DMA_Start_IT+0x230>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <HAL_DMA_Start_IT+0x100>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e007      	b.n	800226c <HAL_DMA_Start_IT+0x110>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f001 fb58 	bl	8003928 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_DMA_Start_IT+0x1f4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d04a      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_DMA_Start_IT+0x1f8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d045      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a31      	ldr	r2, [pc, #196]	; (8002358 <HAL_DMA_Start_IT+0x1fc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d040      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a30      	ldr	r2, [pc, #192]	; (800235c <HAL_DMA_Start_IT+0x200>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d03b      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <HAL_DMA_Start_IT+0x204>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d036      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <HAL_DMA_Start_IT+0x208>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d031      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <HAL_DMA_Start_IT+0x20c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02c      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_DMA_Start_IT+0x210>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d027      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <HAL_DMA_Start_IT+0x214>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d022      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_DMA_Start_IT+0x218>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01d      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a25      	ldr	r2, [pc, #148]	; (8002378 <HAL_DMA_Start_IT+0x21c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d018      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a24      	ldr	r2, [pc, #144]	; (800237c <HAL_DMA_Start_IT+0x220>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_DMA_Start_IT+0x224>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00e      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a21      	ldr	r2, [pc, #132]	; (8002384 <HAL_DMA_Start_IT+0x228>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_DMA_Start_IT+0x22c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Start_IT+0x1bc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_DMA_Start_IT+0x230>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_DMA_Start_IT+0x1c0>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_DMA_Start_IT+0x1c2>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d036      	beq.n	8002390 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 021e 	bic.w	r2, r3, #30
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0216 	orr.w	r2, r2, #22
 8002334:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03e      	beq.n	80023bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0208 	orr.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e035      	b.n	80023bc <HAL_DMA_Start_IT+0x260>
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 020e 	bic.w	r2, r3, #14
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 020a 	orr.w	r2, r2, #10
 80023a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0204 	orr.w	r2, r2, #4
 80023ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a83      	ldr	r2, [pc, #524]	; (80025d0 <HAL_DMA_Start_IT+0x474>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d072      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a82      	ldr	r2, [pc, #520]	; (80025d4 <HAL_DMA_Start_IT+0x478>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d06d      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a80      	ldr	r2, [pc, #512]	; (80025d8 <HAL_DMA_Start_IT+0x47c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d068      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7f      	ldr	r2, [pc, #508]	; (80025dc <HAL_DMA_Start_IT+0x480>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d063      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <HAL_DMA_Start_IT+0x484>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d05e      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7c      	ldr	r2, [pc, #496]	; (80025e4 <HAL_DMA_Start_IT+0x488>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d059      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_DMA_Start_IT+0x48c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d054      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a79      	ldr	r2, [pc, #484]	; (80025ec <HAL_DMA_Start_IT+0x490>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04f      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a77      	ldr	r2, [pc, #476]	; (80025f0 <HAL_DMA_Start_IT+0x494>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d04a      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a76      	ldr	r2, [pc, #472]	; (80025f4 <HAL_DMA_Start_IT+0x498>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d045      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a74      	ldr	r2, [pc, #464]	; (80025f8 <HAL_DMA_Start_IT+0x49c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d040      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a73      	ldr	r2, [pc, #460]	; (80025fc <HAL_DMA_Start_IT+0x4a0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d03b      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a71      	ldr	r2, [pc, #452]	; (8002600 <HAL_DMA_Start_IT+0x4a4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d036      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a70      	ldr	r2, [pc, #448]	; (8002604 <HAL_DMA_Start_IT+0x4a8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d031      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_DMA_Start_IT+0x4ac>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02c      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6d      	ldr	r2, [pc, #436]	; (800260c <HAL_DMA_Start_IT+0x4b0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d027      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_DMA_Start_IT+0x4b4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d022      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <HAL_DMA_Start_IT+0x4b8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d01d      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a68      	ldr	r2, [pc, #416]	; (8002618 <HAL_DMA_Start_IT+0x4bc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d018      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a67      	ldr	r2, [pc, #412]	; (800261c <HAL_DMA_Start_IT+0x4c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_DMA_Start_IT+0x4c4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00e      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a64      	ldr	r2, [pc, #400]	; (8002624 <HAL_DMA_Start_IT+0x4c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a62      	ldr	r2, [pc, #392]	; (8002628 <HAL_DMA_Start_IT+0x4cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_DMA_Start_IT+0x350>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a61      	ldr	r2, [pc, #388]	; (800262c <HAL_DMA_Start_IT+0x4d0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_DMA_Start_IT+0x354>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_DMA_Start_IT+0x356>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a37      	ldr	r2, [pc, #220]	; (80025d0 <HAL_DMA_Start_IT+0x474>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d04a      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a36      	ldr	r2, [pc, #216]	; (80025d4 <HAL_DMA_Start_IT+0x478>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d045      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a34      	ldr	r2, [pc, #208]	; (80025d8 <HAL_DMA_Start_IT+0x47c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d040      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a33      	ldr	r2, [pc, #204]	; (80025dc <HAL_DMA_Start_IT+0x480>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d03b      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <HAL_DMA_Start_IT+0x484>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d036      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <HAL_DMA_Start_IT+0x488>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d031      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <HAL_DMA_Start_IT+0x48c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02c      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2d      	ldr	r2, [pc, #180]	; (80025ec <HAL_DMA_Start_IT+0x490>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d027      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_DMA_Start_IT+0x494>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d022      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_DMA_Start_IT+0x498>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d01d      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <HAL_DMA_Start_IT+0x49c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_DMA_Start_IT+0x4a0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <HAL_DMA_Start_IT+0x4a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_DMA_Start_IT+0x4a8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_DMA_Start_IT+0x4ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_DMA_Start_IT+0x430>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a21      	ldr	r2, [pc, #132]	; (800260c <HAL_DMA_Start_IT+0x4b0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d108      	bne.n	800259e <HAL_DMA_Start_IT+0x442>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e012      	b.n	80025c4 <HAL_DMA_Start_IT+0x468>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e009      	b.n	80025c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494

08002630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e237      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e22c      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_DMA_Abort_IT+0x1a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_DMA_Abort_IT+0x1a4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a59      	ldr	r2, [pc, #356]	; (80027d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_DMA_Abort_IT+0x1ac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_DMA_Abort_IT+0x1b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a53      	ldr	r2, [pc, #332]	; (80027e8 <HAL_DMA_Abort_IT+0x1b8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_DMA_Abort_IT+0x1bc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <HAL_DMA_Abort_IT+0x1c0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <HAL_DMA_Abort_IT+0x1c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <HAL_DMA_Abort_IT+0x1c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <HAL_DMA_Abort_IT+0x1cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_DMA_Abort_IT+0x1d0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_DMA_Abort_IT+0x1d4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_DMA_Abort_IT+0x1d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_DMA_Abort_IT+0x1dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Abort_IT+0xcc>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_DMA_Abort_IT+0xce>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8086 	beq.w	8002810 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_DMA_Abort_IT+0x1a0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d04a      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <HAL_DMA_Abort_IT+0x1a4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d045      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d040      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <HAL_DMA_Abort_IT+0x1ac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d03b      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_DMA_Abort_IT+0x1b0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d036      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d031      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_DMA_Abort_IT+0x1b8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02c      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_DMA_Abort_IT+0x1bc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d027      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <HAL_DMA_Abort_IT+0x1c0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d022      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_DMA_Abort_IT+0x1c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d01d      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_DMA_Abort_IT+0x1c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d018      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_DMA_Abort_IT+0x1cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_DMA_Abort_IT+0x1d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_DMA_Abort_IT+0x1d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_DMA_Abort_IT+0x1d8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_Abort_IT+0x17c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_DMA_Abort_IT+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <HAL_DMA_Abort_IT+0x18e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e178      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e16f      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
 80027d0:	40020010 	.word	0x40020010
 80027d4:	40020028 	.word	0x40020028
 80027d8:	40020040 	.word	0x40020040
 80027dc:	40020058 	.word	0x40020058
 80027e0:	40020070 	.word	0x40020070
 80027e4:	40020088 	.word	0x40020088
 80027e8:	400200a0 	.word	0x400200a0
 80027ec:	400200b8 	.word	0x400200b8
 80027f0:	40020410 	.word	0x40020410
 80027f4:	40020428 	.word	0x40020428
 80027f8:	40020440 	.word	0x40020440
 80027fc:	40020458 	.word	0x40020458
 8002800:	40020470 	.word	0x40020470
 8002804:	40020488 	.word	0x40020488
 8002808:	400204a0 	.word	0x400204a0
 800280c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6c      	ldr	r2, [pc, #432]	; (80029d8 <HAL_DMA_Abort_IT+0x3a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6b      	ldr	r2, [pc, #428]	; (80029dc <HAL_DMA_Abort_IT+0x3ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d045      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_DMA_Abort_IT+0x3b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d040      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d03b      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a66      	ldr	r2, [pc, #408]	; (80029e8 <HAL_DMA_Abort_IT+0x3b8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a65      	ldr	r2, [pc, #404]	; (80029ec <HAL_DMA_Abort_IT+0x3bc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a63      	ldr	r2, [pc, #396]	; (80029f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a62      	ldr	r2, [pc, #392]	; (80029f4 <HAL_DMA_Abort_IT+0x3c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5f      	ldr	r2, [pc, #380]	; (80029fc <HAL_DMA_Abort_IT+0x3cc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5d      	ldr	r2, [pc, #372]	; (8002a00 <HAL_DMA_Abort_IT+0x3d0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	; (8002a04 <HAL_DMA_Abort_IT+0x3d4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <HAL_DMA_Abort_IT+0x3d8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a59      	ldr	r2, [pc, #356]	; (8002a0c <HAL_DMA_Abort_IT+0x3dc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_DMA_Abort_IT+0x3e0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x290>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_DMA_Abort_IT+0x3e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_DMA_Abort_IT+0x2a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_DMA_Abort_IT+0x2b2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <HAL_DMA_Abort_IT+0x3a8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d072      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3a      	ldr	r2, [pc, #232]	; (80029dc <HAL_DMA_Abort_IT+0x3ac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d06d      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a39      	ldr	r2, [pc, #228]	; (80029e0 <HAL_DMA_Abort_IT+0x3b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d068      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d063      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <HAL_DMA_Abort_IT+0x3b8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d05e      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a34      	ldr	r2, [pc, #208]	; (80029ec <HAL_DMA_Abort_IT+0x3bc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d059      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d054      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <HAL_DMA_Abort_IT+0x3c4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04f      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a30      	ldr	r2, [pc, #192]	; (80029f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04a      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <HAL_DMA_Abort_IT+0x3cc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d045      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2d      	ldr	r2, [pc, #180]	; (8002a00 <HAL_DMA_Abort_IT+0x3d0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d040      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <HAL_DMA_Abort_IT+0x3d4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d03b      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <HAL_DMA_Abort_IT+0x3d8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d036      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_DMA_Abort_IT+0x3dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_DMA_Abort_IT+0x3e0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d02c      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <HAL_DMA_Abort_IT+0x3e4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d027      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <HAL_DMA_Abort_IT+0x3e8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_DMA_Abort_IT+0x3ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01d      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <HAL_DMA_Abort_IT+0x3f0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_DMA_Abort_IT+0x3f4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_DMA_Abort_IT+0x3f8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_DMA_Abort_IT+0x3fc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_DMA_Abort_IT+0x400>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x3a2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_DMA_Abort_IT+0x404>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d132      	bne.n	8002a38 <HAL_DMA_Abort_IT+0x408>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e031      	b.n	8002a3a <HAL_DMA_Abort_IT+0x40a>
 80029d6:	bf00      	nop
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
 8002a18:	58025408 	.word	0x58025408
 8002a1c:	5802541c 	.word	0x5802541c
 8002a20:	58025430 	.word	0x58025430
 8002a24:	58025444 	.word	0x58025444
 8002a28:	58025458 	.word	0x58025458
 8002a2c:	5802546c 	.word	0x5802546c
 8002a30:	58025480 	.word	0x58025480
 8002a34:	58025494 	.word	0x58025494
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop

08002abc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac8:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_DMA_IRQHandler+0x1ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a67      	ldr	r2, [pc, #412]	; (8002c6c <HAL_DMA_IRQHandler+0x1b0>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <HAL_DMA_IRQHandler+0x1b4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d04a      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <HAL_DMA_IRQHandler+0x1b8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d045      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5c      	ldr	r2, [pc, #368]	; (8002c78 <HAL_DMA_IRQHandler+0x1bc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d040      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5a      	ldr	r2, [pc, #360]	; (8002c7c <HAL_DMA_IRQHandler+0x1c0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d03b      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <HAL_DMA_IRQHandler+0x1c4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d036      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_DMA_IRQHandler+0x1c8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d031      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a56      	ldr	r2, [pc, #344]	; (8002c88 <HAL_DMA_IRQHandler+0x1cc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d02c      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a54      	ldr	r2, [pc, #336]	; (8002c8c <HAL_DMA_IRQHandler+0x1d0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d027      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a53      	ldr	r2, [pc, #332]	; (8002c90 <HAL_DMA_IRQHandler+0x1d4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <HAL_DMA_IRQHandler+0x1d8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a50      	ldr	r2, [pc, #320]	; (8002c98 <HAL_DMA_IRQHandler+0x1dc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d018      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a4e      	ldr	r2, [pc, #312]	; (8002c9c <HAL_DMA_IRQHandler+0x1e0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4d      	ldr	r2, [pc, #308]	; (8002ca0 <HAL_DMA_IRQHandler+0x1e4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00e      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a4b      	ldr	r2, [pc, #300]	; (8002ca4 <HAL_DMA_IRQHandler+0x1e8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ca8 <HAL_DMA_IRQHandler+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xd2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <HAL_DMA_IRQHandler+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_IRQHandler+0xd6>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0xd8>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 842b 	beq.w	80033f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a2 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <HAL_DMA_IRQHandler+0x1b4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_DMA_IRQHandler+0x1b8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d045      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_DMA_IRQHandler+0x1bc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <HAL_DMA_IRQHandler+0x1c0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_DMA_IRQHandler+0x1c4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d036      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <HAL_DMA_IRQHandler+0x1c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_DMA_IRQHandler+0x1cc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02c      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <HAL_DMA_IRQHandler+0x1d0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_IRQHandler+0x1d4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_DMA_IRQHandler+0x1d8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_DMA_IRQHandler+0x1dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <HAL_DMA_IRQHandler+0x1e0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x194>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <HAL_DMA_IRQHandler+0x1f0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d12f      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x1f4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e02e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0x208>
 8002c66:	bf00      	nop
 8002c68:	24000000 	.word	0x24000000
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
 8002c70:	40020010 	.word	0x40020010
 8002c74:	40020028 	.word	0x40020028
 8002c78:	40020040 	.word	0x40020040
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	40020070 	.word	0x40020070
 8002c84:	40020088 	.word	0x40020088
 8002c88:	400200a0 	.word	0x400200a0
 8002c8c:	400200b8 	.word	0x400200b8
 8002c90:	40020410 	.word	0x40020410
 8002c94:	40020428 	.word	0x40020428
 8002c98:	40020440 	.word	0x40020440
 8002c9c:	40020458 	.word	0x40020458
 8002ca0:	40020470 	.word	0x40020470
 8002ca4:	40020488 	.word	0x40020488
 8002ca8:	400204a0 	.word	0x400204a0
 8002cac:	400204b8 	.word	0x400204b8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d06e      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_DMA_IRQHandler+0x3f8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d04a      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_DMA_IRQHandler+0x3fc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d045      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <HAL_DMA_IRQHandler+0x400>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d040      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a64      	ldr	r2, [pc, #400]	; (8002ec0 <HAL_DMA_IRQHandler+0x404>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d03b      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_DMA_IRQHandler+0x408>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d036      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a61      	ldr	r2, [pc, #388]	; (8002ec8 <HAL_DMA_IRQHandler+0x40c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d031      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_DMA_IRQHandler+0x410>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d02c      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5e      	ldr	r2, [pc, #376]	; (8002ed0 <HAL_DMA_IRQHandler+0x414>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d027      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_DMA_IRQHandler+0x418>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_DMA_IRQHandler+0x41c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01d      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <HAL_DMA_IRQHandler+0x420>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d018      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_DMA_IRQHandler+0x424>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <HAL_DMA_IRQHandler+0x428>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_DMA_IRQHandler+0x42c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_DMA_IRQHandler+0x430>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_DMA_IRQHandler+0x2ee>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_DMA_IRQHandler+0x434>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10a      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x304>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e003      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x30c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2204      	movs	r2, #4
 8002df2:	409a      	lsls	r2, r3
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 808f 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <HAL_DMA_IRQHandler+0x400>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_DMA_IRQHandler+0x404>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_DMA_IRQHandler+0x408>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_DMA_IRQHandler+0x40c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <HAL_DMA_IRQHandler+0x410>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_DMA_IRQHandler+0x414>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a20      	ldr	r2, [pc, #128]	; (8002ed4 <HAL_DMA_IRQHandler+0x418>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_DMA_IRQHandler+0x41c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_DMA_IRQHandler+0x420>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_DMA_IRQHandler+0x424>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <HAL_DMA_IRQHandler+0x428>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_DMA_IRQHandler+0x42c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_DMA_IRQHandler+0x430>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x3e2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_DMA_IRQHandler+0x434>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d12a      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x438>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e023      	b.n	8002efc <HAL_DMA_IRQHandler+0x440>
 8002eb4:	40020010 	.word	0x40020010
 8002eb8:	40020028 	.word	0x40020028
 8002ebc:	40020040 	.word	0x40020040
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	40020070 	.word	0x40020070
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	400200a0 	.word	0x400200a0
 8002ed0:	400200b8 	.word	0x400200b8
 8002ed4:	40020410 	.word	0x40020410
 8002ed8:	40020428 	.word	0x40020428
 8002edc:	40020440 	.word	0x40020440
 8002ee0:	40020458 	.word	0x40020458
 8002ee4:	40020470 	.word	0x40020470
 8002ee8:	40020488 	.word	0x40020488
 8002eec:	400204a0 	.word	0x400204a0
 8002ef0:	400204b8 	.word	0x400204b8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2204      	movs	r2, #4
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2210      	movs	r2, #16
 8002f26:	409a      	lsls	r2, r3
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a6 	beq.w	800307e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a85      	ldr	r2, [pc, #532]	; (800314c <HAL_DMA_IRQHandler+0x690>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a83      	ldr	r2, [pc, #524]	; (8003150 <HAL_DMA_IRQHandler+0x694>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a82      	ldr	r2, [pc, #520]	; (8003154 <HAL_DMA_IRQHandler+0x698>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_DMA_IRQHandler+0x69c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_DMA_IRQHandler+0x6a0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7d      	ldr	r2, [pc, #500]	; (8003160 <HAL_DMA_IRQHandler+0x6a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_DMA_IRQHandler+0x6a8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_DMA_IRQHandler+0x6ac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a79      	ldr	r2, [pc, #484]	; (800316c <HAL_DMA_IRQHandler+0x6b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_DMA_IRQHandler+0x6b4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a76      	ldr	r2, [pc, #472]	; (8003174 <HAL_DMA_IRQHandler+0x6b8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_DMA_IRQHandler+0x6bc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_DMA_IRQHandler+0x6c0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_DMA_IRQHandler+0x6c4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a70      	ldr	r2, [pc, #448]	; (8003184 <HAL_DMA_IRQHandler+0x6c8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x516>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_DMA_IRQHandler+0x6cc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x52c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e009      	b.n	8002ffc <HAL_DMA_IRQHandler+0x540>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d03e      	beq.n	800307e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2210      	movs	r2, #16
 800300a:	409a      	lsls	r2, r3
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d108      	bne.n	800303e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d024      	beq.n	800307e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
 800303c:	e01f      	b.n	800307e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01b      	beq.n	800307e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e016      	b.n	800307e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2220      	movs	r2, #32
 8003088:	409a      	lsls	r2, r3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8110 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2c      	ldr	r2, [pc, #176]	; (800314c <HAL_DMA_IRQHandler+0x690>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04a      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2b      	ldr	r2, [pc, #172]	; (8003150 <HAL_DMA_IRQHandler+0x694>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d045      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_DMA_IRQHandler+0x698>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a28      	ldr	r2, [pc, #160]	; (8003158 <HAL_DMA_IRQHandler+0x69c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d03b      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_DMA_IRQHandler+0x6a0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d036      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_DMA_IRQHandler+0x6a4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d031      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_DMA_IRQHandler+0x6a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_DMA_IRQHandler+0x6ac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d027      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a20      	ldr	r2, [pc, #128]	; (800316c <HAL_DMA_IRQHandler+0x6b0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_DMA_IRQHandler+0x6b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_DMA_IRQHandler+0x6b8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_DMA_IRQHandler+0x6bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1a      	ldr	r2, [pc, #104]	; (800317c <HAL_DMA_IRQHandler+0x6c0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_DMA_IRQHandler+0x6c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_DMA_IRQHandler+0x6c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_IRQHandler+0x678>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_DMA_IRQHandler+0x6cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d12b      	bne.n	800318c <HAL_DMA_IRQHandler+0x6d0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e02a      	b.n	80031a0 <HAL_DMA_IRQHandler+0x6e4>
 800314a:	bf00      	nop
 800314c:	40020010 	.word	0x40020010
 8003150:	40020028 	.word	0x40020028
 8003154:	40020040 	.word	0x40020040
 8003158:	40020058 	.word	0x40020058
 800315c:	40020070 	.word	0x40020070
 8003160:	40020088 	.word	0x40020088
 8003164:	400200a0 	.word	0x400200a0
 8003168:	400200b8 	.word	0x400200b8
 800316c:	40020410 	.word	0x40020410
 8003170:	40020428 	.word	0x40020428
 8003174:	40020440 	.word	0x40020440
 8003178:	40020458 	.word	0x40020458
 800317c:	40020470 	.word	0x40020470
 8003180:	40020488 	.word	0x40020488
 8003184:	400204a0 	.word	0x400204a0
 8003188:	400204b8 	.word	0x400204b8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf14      	ite	ne
 800319a:	2301      	movne	r3, #1
 800319c:	2300      	moveq	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8087 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2220      	movs	r2, #32
 80031b0:	409a      	lsls	r2, r3
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d139      	bne.n	8003236 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x736>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	223f      	movs	r2, #63	; 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 834a 	beq.w	80038c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
          }
          return;
 8003234:	e344      	b.n	80038c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02c      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e027      	b.n	80032b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e01e      	b.n	80032b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8306 	beq.w	80038ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8088 	beq.w	80033dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2204      	movs	r2, #4
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_DMA_IRQHandler+0xa08>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <HAL_DMA_IRQHandler+0xa0c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a77      	ldr	r2, [pc, #476]	; (80034cc <HAL_DMA_IRQHandler+0xa10>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <HAL_DMA_IRQHandler+0xa14>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a74      	ldr	r2, [pc, #464]	; (80034d4 <HAL_DMA_IRQHandler+0xa18>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a73      	ldr	r2, [pc, #460]	; (80034d8 <HAL_DMA_IRQHandler+0xa1c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a71      	ldr	r2, [pc, #452]	; (80034dc <HAL_DMA_IRQHandler+0xa20>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <HAL_DMA_IRQHandler+0xa24>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6e      	ldr	r2, [pc, #440]	; (80034e4 <HAL_DMA_IRQHandler+0xa28>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6d      	ldr	r2, [pc, #436]	; (80034e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <HAL_DMA_IRQHandler+0xa30>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6a      	ldr	r2, [pc, #424]	; (80034f0 <HAL_DMA_IRQHandler+0xa34>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_DMA_IRQHandler+0xa38>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <HAL_DMA_IRQHandler+0xa3c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_DMA_IRQHandler+0xa40>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_IRQHandler+0x8b8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a64      	ldr	r2, [pc, #400]	; (8003500 <HAL_DMA_IRQHandler+0xa44>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <HAL_DMA_IRQHandler+0x8ca>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e007      	b.n	8003396 <HAL_DMA_IRQHandler+0x8da>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3301      	adds	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	429a      	cmp	r2, r3
 80033a0:	d307      	bcc.n	80033b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f2      	bne.n	8003396 <HAL_DMA_IRQHandler+0x8da>
 80033b0:	e000      	b.n	80033b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2203      	movs	r2, #3
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033ca:	e003      	b.n	80033d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8272 	beq.w	80038ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
 80033ee:	e26c      	b.n	80038ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_DMA_IRQHandler+0xa48>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a42      	ldr	r2, [pc, #264]	; (8003508 <HAL_DMA_IRQHandler+0xa4c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01d      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a40      	ldr	r2, [pc, #256]	; (800350c <HAL_DMA_IRQHandler+0xa50>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d018      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3f      	ldr	r2, [pc, #252]	; (8003510 <HAL_DMA_IRQHandler+0xa54>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3d      	ldr	r2, [pc, #244]	; (8003514 <HAL_DMA_IRQHandler+0xa58>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00e      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <HAL_DMA_IRQHandler+0xa5c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3a      	ldr	r2, [pc, #232]	; (800351c <HAL_DMA_IRQHandler+0xa60>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_DMA_IRQHandler+0x984>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a39      	ldr	r2, [pc, #228]	; (8003520 <HAL_DMA_IRQHandler+0xa64>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_DMA_IRQHandler+0x988>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_DMA_IRQHandler+0x98a>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 823f 	beq.w	80038ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2204      	movs	r2, #4
 800345e:	409a      	lsls	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80cd 	beq.w	8003604 <HAL_DMA_IRQHandler+0xb48>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80c7 	beq.w	8003604 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2204      	movs	r2, #4
 8003480:	409a      	lsls	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d049      	beq.n	8003524 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8210 	beq.w	80038c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ac:	e20a      	b.n	80038c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8206 	beq.w	80038c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c0:	e200      	b.n	80038c4 <HAL_DMA_IRQHandler+0xe08>
 80034c2:	bf00      	nop
 80034c4:	40020010 	.word	0x40020010
 80034c8:	40020028 	.word	0x40020028
 80034cc:	40020040 	.word	0x40020040
 80034d0:	40020058 	.word	0x40020058
 80034d4:	40020070 	.word	0x40020070
 80034d8:	40020088 	.word	0x40020088
 80034dc:	400200a0 	.word	0x400200a0
 80034e0:	400200b8 	.word	0x400200b8
 80034e4:	40020410 	.word	0x40020410
 80034e8:	40020428 	.word	0x40020428
 80034ec:	40020440 	.word	0x40020440
 80034f0:	40020458 	.word	0x40020458
 80034f4:	40020470 	.word	0x40020470
 80034f8:	40020488 	.word	0x40020488
 80034fc:	400204a0 	.word	0x400204a0
 8003500:	400204b8 	.word	0x400204b8
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d160      	bne.n	80035f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7f      	ldr	r2, [pc, #508]	; (8003730 <HAL_DMA_IRQHandler+0xc74>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <HAL_DMA_IRQHandler+0xc78>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7c      	ldr	r2, [pc, #496]	; (8003738 <HAL_DMA_IRQHandler+0xc7c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7a      	ldr	r2, [pc, #488]	; (800373c <HAL_DMA_IRQHandler+0xc80>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a79      	ldr	r2, [pc, #484]	; (8003740 <HAL_DMA_IRQHandler+0xc84>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a77      	ldr	r2, [pc, #476]	; (8003744 <HAL_DMA_IRQHandler+0xc88>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a76      	ldr	r2, [pc, #472]	; (8003748 <HAL_DMA_IRQHandler+0xc8c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a74      	ldr	r2, [pc, #464]	; (800374c <HAL_DMA_IRQHandler+0xc90>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a73      	ldr	r2, [pc, #460]	; (8003750 <HAL_DMA_IRQHandler+0xc94>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a71      	ldr	r2, [pc, #452]	; (8003754 <HAL_DMA_IRQHandler+0xc98>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a70      	ldr	r2, [pc, #448]	; (8003758 <HAL_DMA_IRQHandler+0xc9c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_DMA_IRQHandler+0xca0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <HAL_DMA_IRQHandler+0xca4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6b      	ldr	r2, [pc, #428]	; (8003764 <HAL_DMA_IRQHandler+0xca8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6a      	ldr	r2, [pc, #424]	; (8003768 <HAL_DMA_IRQHandler+0xcac>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0xb12>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_DMA_IRQHandler+0xcb0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <HAL_DMA_IRQHandler+0xb24>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0208 	bic.w	r2, r2, #8
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <HAL_DMA_IRQHandler+0xb34>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8165 	beq.w	80038c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003602:	e15f      	b.n	80038c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2202      	movs	r2, #2
 800360e:	409a      	lsls	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80c5 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xce8>
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80bf 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2202      	movs	r2, #2
 8003630:	409a      	lsls	r2, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d018      	beq.n	8003672 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 813a 	beq.w	80038c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800365c:	e134      	b.n	80038c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8130 	beq.w	80038c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003670:	e12a      	b.n	80038c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	f040 8089 	bne.w	8003790 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_DMA_IRQHandler+0xc74>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04a      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <HAL_DMA_IRQHandler+0xc78>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d045      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_DMA_IRQHandler+0xc7c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d040      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_DMA_IRQHandler+0xc80>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d03b      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_DMA_IRQHandler+0xc84>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d036      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_DMA_IRQHandler+0xc88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_IRQHandler+0xc8c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d02c      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <HAL_DMA_IRQHandler+0xc90>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_DMA_IRQHandler+0xc94>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_DMA_IRQHandler+0xc98>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_DMA_IRQHandler+0xc9c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_DMA_IRQHandler+0xca0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_DMA_IRQHandler+0xca4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_DMA_IRQHandler+0xca8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_DMA_IRQHandler+0xcac>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_DMA_IRQHandler+0xc62>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_DMA_IRQHandler+0xcb0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d128      	bne.n	8003770 <HAL_DMA_IRQHandler+0xcb4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0214 	bic.w	r2, r2, #20
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e027      	b.n	8003780 <HAL_DMA_IRQHandler+0xcc4>
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020a 	bic.w	r2, r2, #10
 800377e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8097 	beq.w	80038c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a2:	e091      	b.n	80038c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2208      	movs	r2, #8
 80037ae:	409a      	lsls	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8088 	beq.w	80038ca <HAL_DMA_IRQHandler+0xe0e>
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8082 	beq.w	80038ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_DMA_IRQHandler+0xe14>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_DMA_IRQHandler+0xe18>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <HAL_DMA_IRQHandler+0xe1c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <HAL_DMA_IRQHandler+0xe20>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3b      	ldr	r2, [pc, #236]	; (80038e0 <HAL_DMA_IRQHandler+0xe24>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a39      	ldr	r2, [pc, #228]	; (80038e4 <HAL_DMA_IRQHandler+0xe28>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <HAL_DMA_IRQHandler+0xe2c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a36      	ldr	r2, [pc, #216]	; (80038ec <HAL_DMA_IRQHandler+0xe30>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <HAL_DMA_IRQHandler+0xe34>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a33      	ldr	r2, [pc, #204]	; (80038f4 <HAL_DMA_IRQHandler+0xe38>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_DMA_IRQHandler+0xe3c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_DMA_IRQHandler+0xe40>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <HAL_DMA_IRQHandler+0xe44>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_DMA_IRQHandler+0xe48>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <HAL_DMA_IRQHandler+0xe4c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_IRQHandler+0xdaa>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a2a      	ldr	r2, [pc, #168]	; (800390c <HAL_DMA_IRQHandler+0xe50>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <HAL_DMA_IRQHandler+0xdbc>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 021c 	bic.w	r2, r2, #28
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e007      	b.n	8003888 <HAL_DMA_IRQHandler+0xdcc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020e 	bic.w	r2, r2, #14
 8003886:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2201      	movs	r2, #1
 8003892:	409a      	lsls	r2, r3
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e004      	b.n	80038ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40020010 	.word	0x40020010
 80038d4:	40020028 	.word	0x40020028
 80038d8:	40020040 	.word	0x40020040
 80038dc:	40020058 	.word	0x40020058
 80038e0:	40020070 	.word	0x40020070
 80038e4:	40020088 	.word	0x40020088
 80038e8:	400200a0 	.word	0x400200a0
 80038ec:	400200b8 	.word	0x400200b8
 80038f0:	40020410 	.word	0x40020410
 80038f4:	40020428 	.word	0x40020428
 80038f8:	40020440 	.word	0x40020440
 80038fc:	40020458 	.word	0x40020458
 8003900:	40020470 	.word	0x40020470
 8003904:	40020488 	.word	0x40020488
 8003908:	400204a0 	.word	0x400204a0
 800390c:	400204b8 	.word	0x400204b8

08003910 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7f      	ldr	r2, [pc, #508]	; (8003b44 <DMA_SetConfig+0x21c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d072      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a7d      	ldr	r2, [pc, #500]	; (8003b48 <DMA_SetConfig+0x220>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d06d      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7c      	ldr	r2, [pc, #496]	; (8003b4c <DMA_SetConfig+0x224>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d068      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a7a      	ldr	r2, [pc, #488]	; (8003b50 <DMA_SetConfig+0x228>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d063      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a79      	ldr	r2, [pc, #484]	; (8003b54 <DMA_SetConfig+0x22c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d05e      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <DMA_SetConfig+0x230>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d059      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a76      	ldr	r2, [pc, #472]	; (8003b5c <DMA_SetConfig+0x234>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d054      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a74      	ldr	r2, [pc, #464]	; (8003b60 <DMA_SetConfig+0x238>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04f      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a73      	ldr	r2, [pc, #460]	; (8003b64 <DMA_SetConfig+0x23c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a71      	ldr	r2, [pc, #452]	; (8003b68 <DMA_SetConfig+0x240>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a70      	ldr	r2, [pc, #448]	; (8003b6c <DMA_SetConfig+0x244>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <DMA_SetConfig+0x248>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6d      	ldr	r2, [pc, #436]	; (8003b74 <DMA_SetConfig+0x24c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6b      	ldr	r2, [pc, #428]	; (8003b78 <DMA_SetConfig+0x250>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <DMA_SetConfig+0x254>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a68      	ldr	r2, [pc, #416]	; (8003b80 <DMA_SetConfig+0x258>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a67      	ldr	r2, [pc, #412]	; (8003b84 <DMA_SetConfig+0x25c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <DMA_SetConfig+0x260>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a64      	ldr	r2, [pc, #400]	; (8003b8c <DMA_SetConfig+0x264>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <DMA_SetConfig+0x268>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a61      	ldr	r2, [pc, #388]	; (8003b94 <DMA_SetConfig+0x26c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5f      	ldr	r2, [pc, #380]	; (8003b98 <DMA_SetConfig+0x270>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5e      	ldr	r2, [pc, #376]	; (8003b9c <DMA_SetConfig+0x274>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <DMA_SetConfig+0x10a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5c      	ldr	r2, [pc, #368]	; (8003ba0 <DMA_SetConfig+0x278>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <DMA_SetConfig+0x10e>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <DMA_SetConfig+0x110>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <DMA_SetConfig+0x21c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <DMA_SetConfig+0x220>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <DMA_SetConfig+0x224>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <DMA_SetConfig+0x228>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <DMA_SetConfig+0x22c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <DMA_SetConfig+0x230>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <DMA_SetConfig+0x234>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <DMA_SetConfig+0x238>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <DMA_SetConfig+0x23c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <DMA_SetConfig+0x240>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <DMA_SetConfig+0x244>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <DMA_SetConfig+0x248>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <DMA_SetConfig+0x24c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <DMA_SetConfig+0x250>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <DMA_SetConfig+0x254>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <DMA_SetConfig+0x1d0>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <DMA_SetConfig+0x258>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <DMA_SetConfig+0x1d4>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <DMA_SetConfig+0x1d6>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d059      	beq.n	8003bb6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	223f      	movs	r2, #63	; 0x3f
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d138      	bne.n	8003ba4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b42:	e086      	b.n	8003c52 <DMA_SetConfig+0x32a>
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
 8003b84:	58025408 	.word	0x58025408
 8003b88:	5802541c 	.word	0x5802541c
 8003b8c:	58025430 	.word	0x58025430
 8003b90:	58025444 	.word	0x58025444
 8003b94:	58025458 	.word	0x58025458
 8003b98:	5802546c 	.word	0x5802546c
 8003b9c:	58025480 	.word	0x58025480
 8003ba0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	e04d      	b.n	8003c52 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <DMA_SetConfig+0x338>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <DMA_SetConfig+0x33c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <DMA_SetConfig+0x340>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <DMA_SetConfig+0x344>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <DMA_SetConfig+0x348>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <DMA_SetConfig+0x34c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <DMA_SetConfig+0x350>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <DMA_SetConfig+0x2de>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <DMA_SetConfig+0x354>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <DMA_SetConfig+0x2e2>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <DMA_SetConfig+0x2e4>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d108      	bne.n	8003c42 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	e007      	b.n	8003c52 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	60da      	str	r2, [r3, #12]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	58025408 	.word	0x58025408
 8003c64:	5802541c 	.word	0x5802541c
 8003c68:	58025430 	.word	0x58025430
 8003c6c:	58025444 	.word	0x58025444
 8003c70:	58025458 	.word	0x58025458
 8003c74:	5802546c 	.word	0x5802546c
 8003c78:	58025480 	.word	0x58025480
 8003c7c:	58025494 	.word	0x58025494

08003c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <DMA_CalcBaseAndBitshift+0x118>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04a      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a41      	ldr	r2, [pc, #260]	; (8003d9c <DMA_CalcBaseAndBitshift+0x11c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3f      	ldr	r2, [pc, #252]	; (8003da0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3e      	ldr	r2, [pc, #248]	; (8003da4 <DMA_CalcBaseAndBitshift+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d03b      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <DMA_CalcBaseAndBitshift+0x128>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d036      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <DMA_CalcBaseAndBitshift+0x12c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d031      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a39      	ldr	r2, [pc, #228]	; (8003db0 <DMA_CalcBaseAndBitshift+0x130>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <DMA_CalcBaseAndBitshift+0x134>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d027      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a36      	ldr	r2, [pc, #216]	; (8003db8 <DMA_CalcBaseAndBitshift+0x138>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a35      	ldr	r2, [pc, #212]	; (8003dbc <DMA_CalcBaseAndBitshift+0x13c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a33      	ldr	r2, [pc, #204]	; (8003dc0 <DMA_CalcBaseAndBitshift+0x140>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a32      	ldr	r2, [pc, #200]	; (8003dc4 <DMA_CalcBaseAndBitshift+0x144>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <DMA_CalcBaseAndBitshift+0x148>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <DMA_CalcBaseAndBitshift+0x14c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x150>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x154>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <DMA_CalcBaseAndBitshift+0xac>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <DMA_CalcBaseAndBitshift+0xae>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d024      	beq.n	8003d7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3b10      	subs	r3, #16
 8003d3a:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x158>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <DMA_CalcBaseAndBitshift+0x15c>)
 8003d4c:	5cd3      	ldrb	r3, [r2, r3]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d908      	bls.n	8003d6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <DMA_CalcBaseAndBitshift+0x160>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	659a      	str	r2, [r3, #88]	; 0x58
 8003d6a:	e00d      	b.n	8003d88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <DMA_CalcBaseAndBitshift+0x160>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7a:	e005      	b.n	8003d88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40020010 	.word	0x40020010
 8003d9c:	40020028 	.word	0x40020028
 8003da0:	40020040 	.word	0x40020040
 8003da4:	40020058 	.word	0x40020058
 8003da8:	40020070 	.word	0x40020070
 8003dac:	40020088 	.word	0x40020088
 8003db0:	400200a0 	.word	0x400200a0
 8003db4:	400200b8 	.word	0x400200b8
 8003db8:	40020410 	.word	0x40020410
 8003dbc:	40020428 	.word	0x40020428
 8003dc0:	40020440 	.word	0x40020440
 8003dc4:	40020458 	.word	0x40020458
 8003dc8:	40020470 	.word	0x40020470
 8003dcc:	40020488 	.word	0x40020488
 8003dd0:	400204a0 	.word	0x400204a0
 8003dd4:	400204b8 	.word	0x400204b8
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	08010b68 	.word	0x08010b68
 8003de0:	fffffc00 	.word	0xfffffc00

08003de4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d120      	bne.n	8003e3a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d858      	bhi.n	8003eb2 <DMA_CheckFifoParam+0xce>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <DMA_CheckFifoParam+0x24>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e2b 	.word	0x08003e2b
 8003e10:	08003e19 	.word	0x08003e19
 8003e14:	08003eb3 	.word	0x08003eb3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d048      	beq.n	8003eb6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e28:	e045      	b.n	8003eb6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e32:	d142      	bne.n	8003eba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e38:	e03f      	b.n	8003eba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d123      	bne.n	8003e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d838      	bhi.n	8003ebe <DMA_CheckFifoParam+0xda>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <DMA_CheckFifoParam+0x70>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e6b 	.word	0x08003e6b
 8003e5c:	08003e65 	.word	0x08003e65
 8003e60:	08003e7d 	.word	0x08003e7d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
        break;
 8003e68:	e030      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d025      	beq.n	8003ec2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e7a:	e022      	b.n	8003ec2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e84:	d11f      	bne.n	8003ec6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e8a:	e01c      	b.n	8003ec6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d902      	bls.n	8003e9a <DMA_CheckFifoParam+0xb6>
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d003      	beq.n	8003ea0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e98:	e018      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9e:	e015      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00e      	beq.n	8003eca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
    break;
 8003eb0:	e00b      	b.n	8003eca <DMA_CheckFifoParam+0xe6>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e00a      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e008      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e006      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e004      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <DMA_CheckFifoParam+0xe8>
    break;
 8003eca:	bf00      	nop
    }
  }

  return status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop

08003edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a36      	ldr	r2, [pc, #216]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a35      	ldr	r2, [pc, #212]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a32      	ldr	r2, [pc, #200]	; (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01a      	beq.n	8003f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	3b08      	subs	r3, #8
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2201      	movs	r2, #1
 8003f72:	409a      	lsls	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f78:	e024      	b.n	8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	3b10      	subs	r3, #16
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d806      	bhi.n	8003fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d902      	bls.n	8003fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fb4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	58025408 	.word	0x58025408
 8003fd4:	5802541c 	.word	0x5802541c
 8003fd8:	58025430 	.word	0x58025430
 8003fdc:	58025444 	.word	0x58025444
 8003fe0:	58025458 	.word	0x58025458
 8003fe4:	5802546c 	.word	0x5802546c
 8003fe8:	58025480 	.word	0x58025480
 8003fec:	58025494 	.word	0x58025494
 8003ff0:	cccccccd 	.word	0xcccccccd
 8003ff4:	16009600 	.word	0x16009600
 8003ff8:	58025880 	.word	0x58025880
 8003ffc:	aaaaaaab 	.word	0xaaaaaaab
 8004000:	400204b8 	.word	0x400204b8
 8004004:	4002040f 	.word	0x4002040f
 8004008:	10008200 	.word	0x10008200
 800400c:	40020880 	.word	0x40020880

08004010 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04a      	beq.n	80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d847      	bhi.n	80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a24      	ldr	r2, [pc, #144]	; (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004098:	671a      	str	r2, [r3, #112]	; 0x70
 800409a:	e009      	b.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	58025408 	.word	0x58025408
 80040cc:	5802541c 	.word	0x5802541c
 80040d0:	58025430 	.word	0x58025430
 80040d4:	58025444 	.word	0x58025444
 80040d8:	58025458 	.word	0x58025458
 80040dc:	5802546c 	.word	0x5802546c
 80040e0:	58025480 	.word	0x58025480
 80040e4:	58025494 	.word	0x58025494
 80040e8:	1600963f 	.word	0x1600963f
 80040ec:	58025940 	.word	0x58025940
 80040f0:	1000823f 	.word	0x1000823f
 80040f4:	40020940 	.word	0x40020940

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004106:	4b89      	ldr	r3, [pc, #548]	; (800432c <HAL_GPIO_Init+0x234>)
 8004108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800410a:	e194      	b.n	8004436 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8186 	beq.w	8004430 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d005      	beq.n	800413c <HAL_GPIO_Init+0x44>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d130      	bne.n	800419e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004172:	2201      	movs	r2, #1
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0201 	and.w	r2, r3, #1
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d017      	beq.n	80041da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d123      	bne.n	800422e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3208      	adds	r2, #8
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80e0 	beq.w	8004430 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004270:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_GPIO_Init+0x238>)
 8004282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428e:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_GPIO_Init+0x23c>)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	220f      	movs	r2, #15
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_GPIO_Init+0x240>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d052      	beq.n	8004360 <HAL_GPIO_Init+0x268>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_GPIO_Init+0x244>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_GPIO_Init+0x248>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02b      	beq.n	8004322 <HAL_GPIO_Init+0x22a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_GPIO_Init+0x24c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d025      	beq.n	800431e <HAL_GPIO_Init+0x226>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_GPIO_Init+0x250>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <HAL_GPIO_Init+0x222>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_GPIO_Init+0x254>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d019      	beq.n	8004316 <HAL_GPIO_Init+0x21e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_GPIO_Init+0x258>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_GPIO_Init+0x21a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_GPIO_Init+0x25c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00d      	beq.n	800430e <HAL_GPIO_Init+0x216>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_GPIO_Init+0x260>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <HAL_GPIO_Init+0x212>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <HAL_GPIO_Init+0x264>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <HAL_GPIO_Init+0x20e>
 8004302:	2309      	movs	r3, #9
 8004304:	e02d      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004306:	230a      	movs	r3, #10
 8004308:	e02b      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800430a:	2308      	movs	r3, #8
 800430c:	e029      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800430e:	2307      	movs	r3, #7
 8004310:	e027      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004312:	2306      	movs	r3, #6
 8004314:	e025      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004316:	2305      	movs	r3, #5
 8004318:	e023      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800431a:	2304      	movs	r3, #4
 800431c:	e021      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800431e:	2303      	movs	r3, #3
 8004320:	e01f      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004322:	2302      	movs	r3, #2
 8004324:	e01d      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 8004326:	2301      	movs	r3, #1
 8004328:	e01b      	b.n	8004362 <HAL_GPIO_Init+0x26a>
 800432a:	bf00      	nop
 800432c:	58000080 	.word	0x58000080
 8004330:	58024400 	.word	0x58024400
 8004334:	58000400 	.word	0x58000400
 8004338:	58020000 	.word	0x58020000
 800433c:	58020400 	.word	0x58020400
 8004340:	58020800 	.word	0x58020800
 8004344:	58020c00 	.word	0x58020c00
 8004348:	58021000 	.word	0x58021000
 800434c:	58021400 	.word	0x58021400
 8004350:	58021800 	.word	0x58021800
 8004354:	58021c00 	.word	0x58021c00
 8004358:	58022000 	.word	0x58022000
 800435c:	58022400 	.word	0x58022400
 8004360:	2300      	movs	r3, #0
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	f002 0203 	and.w	r2, r2, #3
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	4093      	lsls	r3, r2
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004372:	4938      	ldr	r1, [pc, #224]	; (8004454 <HAL_GPIO_Init+0x35c>)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ae63 	bne.w	800410c <HAL_GPIO_Init+0x14>
  }
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58000400 	.word	0x58000400

08004458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004474:	e003      	b.n	800447e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800448a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448c:	b08f      	sub	sp, #60	; 0x3c
 800448e:	af0a      	add	r7, sp, #40	; 0x28
 8004490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e116      	b.n	80046ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f00b ff8e 	bl	80103d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2203      	movs	r2, #3
 80044c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f006 fa8f 	bl	800a9fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	687e      	ldr	r6, [r7, #4]
 80044e8:	466d      	mov	r5, sp
 80044ea:	f106 0410 	add.w	r4, r6, #16
 80044ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80044fe:	1d33      	adds	r3, r6, #4
 8004500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	f006 f95a 	bl	800a7bc <USB_CoreInit>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0d7      	b.n	80046ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f006 fa7d 	bl	800aa20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e04a      	b.n	80045c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	333d      	adds	r3, #61	; 0x3d
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	b298      	uxth	r0, r3
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	3344      	adds	r3, #68	; 0x44
 8004568:	4602      	mov	r2, r0
 800456a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3340      	adds	r3, #64	; 0x40
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3348      	adds	r3, #72	; 0x48
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	334c      	adds	r3, #76	; 0x4c
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3354      	adds	r3, #84	; 0x54
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3af      	bcc.n	800452c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e044      	b.n	800465c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	3301      	adds	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d3b5      	bcc.n	80045d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	687e      	ldr	r6, [r7, #4]
 800466e:	466d      	mov	r5, sp
 8004670:	f106 0410 	add.w	r4, r6, #16
 8004674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800467c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004680:	e885 0003 	stmia.w	r5, {r0, r1}
 8004684:	1d33      	adds	r3, r6, #4
 8004686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f006 fa15 	bl	800aab8 <USB_DevInit>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e014      	b.n	80046ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d102      	bne.n	80046be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 f9b9 	bl	8005a30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f007 fb63 	bl	800bd8e <USB_DevDisconnect>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_PCD_Start+0x1c>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e020      	b.n	8004730 <HAL_PCD_Start+0x5e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d109      	bne.n	8004712 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004702:	2b01      	cmp	r3, #1
 8004704:	d005      	beq.n	8004712 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f006 f960 	bl	800a9dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f007 fb13 	bl	800bd4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b08d      	sub	sp, #52	; 0x34
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f007 fbd1 	bl	800bef6 <USB_GetMode>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	f040 84b7 	bne.w	80050ca <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f007 fb35 	bl	800bdd0 <USB_ReadInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 84ad 	beq.w	80050c8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f007 fb22 	bl	800bdd0 <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d107      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f002 0202 	and.w	r2, r2, #2
 80047a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f007 fb10 	bl	800bdd0 <USB_ReadInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d161      	bne.n	800487e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0210 	bic.w	r2, r2, #16
 80047c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f003 020f 	and.w	r2, r3, #15
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	3304      	adds	r3, #4
 80047e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	0c5b      	lsrs	r3, r3, #17
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d124      	bne.n	8004840 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d035      	beq.n	800486e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800480c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6a38      	ldr	r0, [r7, #32]
 8004816:	f007 f947 	bl	800baa8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004826:	441a      	add	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004838:	441a      	add	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
 800483e:	e016      	b.n	800486e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	0c5b      	lsrs	r3, r3, #17
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2b06      	cmp	r3, #6
 800484a:	d110      	bne.n	800486e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004852:	2208      	movs	r2, #8
 8004854:	4619      	mov	r1, r3
 8004856:	6a38      	ldr	r0, [r7, #32]
 8004858:	f007 f926 	bl	800baa8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004868:	441a      	add	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0210 	orr.w	r2, r2, #16
 800487c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f007 faa4 	bl	800bdd0 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004892:	f040 80a7 	bne.w	80049e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f007 faa9 	bl	800bdf6 <USB_ReadDevAllOutEpInterrupt>
 80048a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048a6:	e099      	b.n	80049dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 808e 	beq.w	80049d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f007 facd 	bl	800be5e <USB_ReadDevOutEPInterrupt>
 80048c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00c      	beq.n	80048ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	2301      	movs	r3, #1
 80048e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 ff1d 	bl	8005724 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	2308      	movs	r3, #8
 8004904:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fff3 	bl	80058f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	461a      	mov	r2, r3
 8004926:	2310      	movs	r3, #16
 8004928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d030      	beq.n	8004996 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d109      	bne.n	8004954 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004952:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	78db      	ldrb	r3, [r3, #3]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d108      	bne.n	8004984 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	b2db      	uxtb	r3, r3
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f00b fe5e 	bl	8010640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	2302      	movs	r3, #2
 8004994:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	2320      	movs	r3, #32
 80049b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3301      	adds	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f47f af62 	bne.w	80048a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f007 f9f1 	bl	800bdd0 <USB_ReadInterrupts>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049f8:	f040 80db 	bne.w	8004bb2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f007 fa12 	bl	800be2a <USB_ReadDevAllInEpInterrupt>
 8004a06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a0c:	e0cd      	b.n	8004baa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80c2 	beq.w	8004b9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f007 fa38 	bl	800be9a <USB_ReadDevInEPInterrupt>
 8004a2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d057      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a56:	4013      	ands	r3, r2
 8004a58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	2301      	movs	r3, #1
 8004a6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d132      	bne.n	8004ada <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	334c      	adds	r3, #76	; 0x4c
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4403      	add	r3, r0
 8004a94:	3348      	adds	r3, #72	; 0x48
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4419      	add	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4403      	add	r3, r0
 8004aa8:	334c      	adds	r3, #76	; 0x4c
 8004aaa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d113      	bne.n	8004ada <HAL_PCD_IRQHandler+0x3a2>
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3354      	adds	r3, #84	; 0x54
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	f007 fa41 	bl	800bf5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f00b fd28 	bl	8010536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	2308      	movs	r3, #8
 8004b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d023      	beq.n	8004b8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b46:	6a38      	ldr	r0, [r7, #32]
 8004b48:	f006 f914 	bl	800ad74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	3338      	adds	r3, #56	; 0x38
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d108      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f00b fd75 	bl	8010664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	461a      	mov	r2, r3
 8004b88:	2302      	movs	r3, #2
 8004b8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fd35 	bl	8005608 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f af2e 	bne.w	8004a0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f007 f90a 	bl	800bdd0 <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc6:	d122      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d108      	bne.n	8004bf8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ff41 	bl	8005a78 <HAL_PCDEx_LPM_Callback>
 8004bf6:	e002      	b.n	8004bfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f00b fd13 	bl	8010624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f007 f8dc 	bl	800bdd0 <USB_ReadInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d112      	bne.n	8004c4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d102      	bne.n	8004c3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f00b fccf 	bl	80105d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f007 f8be 	bl	800bdd0 <USB_ReadInterrupts>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5e:	d121      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004c6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d111      	bne.n	8004c9e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	089b      	lsrs	r3, r3, #2
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 feee 	bl	8005a78 <HAL_PCDEx_LPM_Callback>
 8004c9c:	e002      	b.n	8004ca4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f00b fc9a 	bl	80105d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f007 f891 	bl	800bdd0 <USB_ReadInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	f040 80b7 	bne.w	8004e2a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f006 f84c 	bl	800ad74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce0:	e046      	b.n	8004d70 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3b3      	bcc.n	8004ce2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da6:	f043 030b 	orr.w	r3, r3, #11
 8004daa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dbc:	f043 030b 	orr.w	r3, r3, #11
 8004dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc2:	e015      	b.n	8004df0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f242 032b 	movw	r3, #8235	; 0x202b
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dea:	f043 030b 	orr.w	r3, r3, #11
 8004dee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e14:	461a      	mov	r2, r3
 8004e16:	f007 f8a1 	bl	800bf5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f006 ffce 	bl	800bdd0 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d124      	bne.n	8004e8a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f007 f865 	bl	800bf14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f006 f80d 	bl	800ae6e <USB_GetDevSpeed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681c      	ldr	r4, [r3, #0]
 8004e60:	f001 fdbe 	bl	80069e0 <HAL_RCC_GetHCLKFreq>
 8004e64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f005 fd12 	bl	800a898 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f00b fb86 	bl	8010586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 ff9e 	bl	800bdd0 <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f00b fb63 	bl	801056a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f002 0208 	and.w	r2, r2, #8
 8004eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f006 ff89 	bl	800bdd0 <USB_ReadInterrupts>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d122      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	e014      	b.n	8004f04 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d105      	bne.n	8004efe <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb27 	bl	800554c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	3301      	adds	r3, #1
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d3e5      	bcc.n	8004eda <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f006 ff5c 	bl	800bdd0 <USB_ReadInterrupts>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f22:	d13b      	bne.n	8004f9c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f24:	2301      	movs	r3, #1
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
 8004f28:	e02b      	b.n	8004f82 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3340      	adds	r3, #64	; 0x40
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d115      	bne.n	8004f7c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da12      	bge.n	8004f7c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	333f      	adds	r3, #63	; 0x3f
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fae8 	bl	800554c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d3ce      	bcc.n	8004f2a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f006 ff15 	bl	800bdd0 <USB_ReadInterrupts>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb0:	d155      	bne.n	800505e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	e045      	b.n	8005044 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d12e      	bne.n	800503e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fe0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da2b      	bge.n	800503e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004ff2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d121      	bne.n	800503e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503a:	6053      	str	r3, [r2, #4]
            break;
 800503c:	e007      	b.n	800504e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	3301      	adds	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	429a      	cmp	r2, r3
 800504c:	d3b4      	bcc.n	8004fb8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800505c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f006 feb4 	bl	800bdd0 <USB_ReadInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d10a      	bne.n	800508a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f00b fb07 	bl	8010688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f006 fe9e 	bl	800bdd0 <USB_ReadInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d115      	bne.n	80050ca <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f00b faf7 	bl	80106a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	e000      	b.n	80050ca <HAL_PCD_IRQHandler+0x992>
      return;
 80050c8:	bf00      	nop
    }
  }
}
 80050ca:	3734      	adds	r7, #52	; 0x34
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}

080050d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_PCD_SetAddress+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e013      	b.n	8005112 <HAL_PCD_SetAddress+0x42>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f006 fdfc 	bl	800bd00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	4608      	mov	r0, r1
 8005124:	4611      	mov	r1, r2
 8005126:	461a      	mov	r2, r3
 8005128:	4603      	mov	r3, r0
 800512a:	70fb      	strb	r3, [r7, #3]
 800512c:	460b      	mov	r3, r1
 800512e:	803b      	strh	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513c:	2b00      	cmp	r3, #0
 800513e:	da0f      	bge.n	8005160 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	f003 020f 	and.w	r2, r3, #15
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	3338      	adds	r3, #56	; 0x38
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	3304      	adds	r3, #4
 8005156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	705a      	strb	r2, [r3, #1]
 800515e:	e00f      	b.n	8005180 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	3304      	adds	r3, #4
 8005178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800518c:	883a      	ldrh	r2, [r7, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	78ba      	ldrb	r2, [r7, #2]
 8005196:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051aa:	78bb      	ldrb	r3, [r7, #2]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d102      	bne.n	80051b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_PCD_EP_Open+0xaa>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e00e      	b.n	80051e2 <HAL_PCD_EP_Open+0xc8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f005 fe70 	bl	800aeb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80051e0:	7afb      	ldrb	r3, [r7, #11]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da0f      	bge.n	800521e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	f003 020f 	and.w	r2, r3, #15
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	3338      	adds	r3, #56	; 0x38
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
 8005212:	3304      	adds	r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	705a      	strb	r2, [r3, #1]
 800521c:	e00f      	b.n	800523e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	3304      	adds	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_PCD_EP_Close+0x6e>
 8005254:	2302      	movs	r3, #2
 8005256:	e00e      	b.n	8005276 <HAL_PCD_EP_Close+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	4618      	mov	r0, r3
 8005268:	f005 feae 	bl	800afc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	460b      	mov	r3, r1
 800528c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	f003 020f 	and.w	r2, r3, #15
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c0:	7afb      	ldrb	r3, [r7, #11]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d102      	bne.n	80052da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	f006 f995 	bl	800b620 <USB_EP0StartXfer>
 80052f6:	e008      	b.n	800530a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6979      	ldr	r1, [r7, #20]
 8005306:	f005 ff3b 	bl	800b180 <USB_EPStartXfer>
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005354:	7afb      	ldrb	r3, [r7, #11]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	3338      	adds	r3, #56	; 0x38
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2201      	movs	r2, #1
 8005382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	b2da      	uxtb	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	6979      	ldr	r1, [r7, #20]
 80053b6:	f006 f933 	bl	800b620 <USB_EP0StartXfer>
 80053ba:	e008      	b.n	80053ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	f005 fed9 	bl	800b180 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d901      	bls.n	80053f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e050      	b.n	8005498 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da0f      	bge.n	800541e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3338      	adds	r3, #56	; 0x38
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	705a      	strb	r2, [r3, #1]
 800541c:	e00d      	b.n	800543a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_PCD_EP_SetStall+0x82>
 8005456:	2302      	movs	r3, #2
 8005458:	e01e      	b.n	8005498 <HAL_PCD_EP_SetStall+0xc0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	4618      	mov	r0, r3
 800546a:	f006 fb75 	bl	800bb58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	b2d9      	uxtb	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005488:	461a      	mov	r2, r3
 800548a:	f006 fd67 	bl	800bf5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d901      	bls.n	80054be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e042      	b.n	8005544 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da0f      	bge.n	80054e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	3338      	adds	r3, #56	; 0x38
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	3304      	adds	r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	705a      	strb	r2, [r3, #1]
 80054e4:	e00f      	b.n	8005506 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	f003 020f 	and.w	r2, r3, #15
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_PCD_EP_ClrStall+0x86>
 8005522:	2302      	movs	r3, #2
 8005524:	e00e      	b.n	8005544 <HAL_PCD_EP_ClrStall+0xa4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	4618      	mov	r0, r3
 8005536:	f006 fb7d 	bl	800bc34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da0c      	bge.n	800557a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f003 020f 	and.w	r2, r3, #15
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	3338      	adds	r3, #56	; 0x38
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4413      	add	r3, r2
 8005574:	3304      	adds	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e00c      	b.n	8005594 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	3304      	adds	r3, #4
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	4618      	mov	r0, r3
 800559c:	f006 f99c 	bl	800b8d8 <USB_EPStopXfer>
 80055a0:	4603      	mov	r3, r0
 80055a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055a4:	7afb      	ldrb	r3, [r7, #11]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_EP_Flush+0x1a>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e01b      	b.n	8005600 <HAL_PCD_EP_Flush+0x52>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80055d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	da09      	bge.n	80055ec <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f005 fbc5 	bl	800ad74 <USB_FlushTxFifo>
 80055ea:	e004      	b.n	80055f6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f005 fbf3 	bl	800addc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	429a      	cmp	r2, r3
 800563a:	d901      	bls.n	8005640 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e06c      	b.n	800571a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	429a      	cmp	r2, r3
 8005654:	d902      	bls.n	800565c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3303      	adds	r3, #3
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005664:	e02b      	b.n	80056be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	429a      	cmp	r2, r3
 800567a:	d902      	bls.n	8005682 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3303      	adds	r3, #3
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6919      	ldr	r1, [r3, #16]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800569a:	b2db      	uxtb	r3, r3
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4603      	mov	r3, r0
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f006 f9c3 	bl	800ba2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d809      	bhi.n	80056e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1be      	bne.n	8005666 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d811      	bhi.n	8005718 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	2201      	movs	r2, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	43db      	mvns	r3, r3
 800570e:	6939      	ldr	r1, [r7, #16]
 8005710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005714:	4013      	ands	r3, r2
 8005716:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	333c      	adds	r3, #60	; 0x3c
 800573c:	3304      	adds	r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d17b      	bne.n	8005852 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4a61      	ldr	r2, [pc, #388]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f240 80b9 	bls.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80b3 	beq.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578c:	6093      	str	r3, [r2, #8]
 800578e:	e0a7      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	461a      	mov	r2, r3
 80057a8:	2320      	movs	r3, #32
 80057aa:	6093      	str	r3, [r2, #8]
 80057ac:	e098      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8093 	bne.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d90f      	bls.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	6093      	str	r3, [r2, #8]
 80057e0:	e07e      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	3304      	adds	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	440b      	add	r3, r1
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d114      	bne.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800582c:	461a      	mov	r2, r3
 800582e:	2101      	movs	r1, #1
 8005830:	f006 fb94 	bl	800bf5c <USB_EP0_OutStart>
 8005834:	e006      	b.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f00a fe58 	bl	8010500 <HAL_PCD_DataOutStageCallback>
 8005850:	e046      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d124      	bne.n	80058a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005876:	6093      	str	r3, [r2, #8]
 8005878:	e032      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2320      	movs	r3, #32
 8005894:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f00a fe2f 	bl	8010500 <HAL_PCD_DataOutStageCallback>
 80058a2:	e01d      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d114      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058cc:	461a      	mov	r2, r3
 80058ce:	2100      	movs	r1, #0
 80058d0:	f006 fb44 	bl	800bf5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f00a fe10 	bl	8010500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	4f54300a 	.word	0x4f54300a
 80058f0:	4f54310a 	.word	0x4f54310a

080058f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	333c      	adds	r3, #60	; 0x3c
 800590c:	3304      	adds	r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d90e      	bls.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f00a fdc7 	bl	80104dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d90c      	bls.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d108      	bne.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005968:	461a      	mov	r2, r3
 800596a:	2101      	movs	r1, #1
 800596c:	f006 faf6 	bl	800bf5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	4f54300a 	.word	0x4f54300a

08005980 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
 800598c:	4613      	mov	r3, r2
 800598e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800599e:	883b      	ldrh	r3, [r7, #0]
 80059a0:	0419      	lsls	r1, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
 80059ac:	e028      	b.n	8005a00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
 80059c0:	e00d      	b.n	80059de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	3301      	adds	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3ec      	bcc.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e8:	883b      	ldrh	r3, [r7, #0]
 80059ea:	0418      	lsls	r0, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	4302      	orrs	r2, r0
 80059f8:	3340      	adds	r3, #64	; 0x40
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	10000003 	.word	0x10000003

08005a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d00a      	beq.n	8005aba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e01f      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e01d      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 0207 	bic.w	r2, r3, #7
 8005ac2:	490f      	ldr	r1, [pc, #60]	; (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aca:	f7fb fd69 	bl	80015a0 <HAL_GetTick>
 8005ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ad0:	e009      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ad2:	f7fb fd65 	bl	80015a0 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ae0:	d901      	bls.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e007      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	58024800 	.word	0x58024800

08005b04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b12:	60d3      	str	r3, [r2, #12]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	58024800 	.word	0x58024800

08005b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08c      	sub	sp, #48	; 0x30
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f000 bc1d 	b.w	8006372 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8087 	beq.w	8005c54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b46:	4b99      	ldr	r3, [pc, #612]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b50:	4b96      	ldr	r3, [pc, #600]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d007      	beq.n	8005b6c <HAL_RCC_OscConfig+0x48>
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	2b18      	cmp	r3, #24
 8005b60:	d110      	bne.n	8005b84 <HAL_RCC_OscConfig+0x60>
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d10b      	bne.n	8005b84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	4b8f      	ldr	r3, [pc, #572]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d06c      	beq.n	8005c52 <HAL_RCC_OscConfig+0x12e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d168      	bne.n	8005c52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e3f6      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x78>
 8005b8e:	4b87      	ldr	r3, [pc, #540]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a86      	ldr	r2, [pc, #536]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e02e      	b.n	8005bfa <HAL_RCC_OscConfig+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCC_OscConfig+0x9a>
 8005ba4:	4b81      	ldr	r3, [pc, #516]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a80      	ldr	r2, [pc, #512]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b7e      	ldr	r3, [pc, #504]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a7d      	ldr	r2, [pc, #500]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e01d      	b.n	8005bfa <HAL_RCC_OscConfig+0xd6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCC_OscConfig+0xbe>
 8005bc8:	4b78      	ldr	r3, [pc, #480]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a77      	ldr	r2, [pc, #476]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4b75      	ldr	r3, [pc, #468]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a74      	ldr	r2, [pc, #464]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e00b      	b.n	8005bfa <HAL_RCC_OscConfig+0xd6>
 8005be2:	4b72      	ldr	r3, [pc, #456]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a71      	ldr	r2, [pc, #452]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c02:	f7fb fccd 	bl	80015a0 <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c0a:	f7fb fcc9 	bl	80015a0 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	; 0x64
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e3aa      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c1c:	4b63      	ldr	r3, [pc, #396]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0xe6>
 8005c28:	e014      	b.n	8005c54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fb fcb9 	bl	80015a0 <HAL_GetTick>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c32:	f7fb fcb5 	bl	80015a0 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b64      	cmp	r3, #100	; 0x64
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e396      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0x10e>
 8005c50:	e000      	b.n	8005c54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80cb 	beq.w	8005df8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c62:	4b52      	ldr	r3, [pc, #328]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c6c:	4b4f      	ldr	r3, [pc, #316]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <HAL_RCC_OscConfig+0x164>
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b18      	cmp	r3, #24
 8005c7c:	d156      	bne.n	8005d2c <HAL_RCC_OscConfig+0x208>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d151      	bne.n	8005d2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c88:	4b48      	ldr	r3, [pc, #288]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x17c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e368      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ca0:	4b42      	ldr	r3, [pc, #264]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f023 0219 	bic.w	r2, r3, #25
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	493f      	ldr	r1, [pc, #252]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cb2:	f7fb fc75 	bl	80015a0 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fb fc71 	bl	80015a0 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e352      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ccc:	4b37      	ldr	r3, [pc, #220]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd8:	f7fb fc92 	bl	8001600 <HAL_GetREVID>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d817      	bhi.n	8005d16 <HAL_RCC_OscConfig+0x1f2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d108      	bne.n	8005d00 <HAL_RCC_OscConfig+0x1dc>
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cf6:	4a2d      	ldr	r2, [pc, #180]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfe:	e07b      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	4927      	ldr	r1, [pc, #156]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d14:	e070      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b25      	ldr	r3, [pc, #148]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	4921      	ldr	r1, [pc, #132]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2a:	e065      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d048      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 0219 	bic.w	r2, r3, #25
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	491a      	ldr	r1, [pc, #104]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fb fc2b 	bl	80015a0 <HAL_GetTick>
 8005d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d4e:	f7fb fc27 	bl	80015a0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e308      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6c:	f7fb fc48 	bl	8001600 <HAL_GetREVID>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d81a      	bhi.n	8005db0 <HAL_RCC_OscConfig+0x28c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d108      	bne.n	8005d94 <HAL_RCC_OscConfig+0x270>
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d8a:	4a08      	ldr	r2, [pc, #32]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d90:	6053      	str	r3, [r2, #4]
 8005d92:	e031      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	4902      	ldr	r1, [pc, #8]	; (8005dac <HAL_RCC_OscConfig+0x288>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	e026      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
 8005db0:	4b9a      	ldr	r3, [pc, #616]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	4997      	ldr	r1, [pc, #604]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]
 8005dc4:	e018      	b.n	8005df8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc6:	4b95      	ldr	r3, [pc, #596]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a94      	ldr	r2, [pc, #592]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd2:	f7fb fbe5 	bl	80015a0 <HAL_GetTick>
 8005dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dda:	f7fb fbe1 	bl	80015a0 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e2c2      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dec:	4b8b      	ldr	r3, [pc, #556]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f0      	bne.n	8005dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80a9 	beq.w	8005f58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e06:	4b85      	ldr	r3, [pc, #532]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e10:	4b82      	ldr	r3, [pc, #520]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d007      	beq.n	8005e2c <HAL_RCC_OscConfig+0x308>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b18      	cmp	r3, #24
 8005e20:	d13a      	bne.n	8005e98 <HAL_RCC_OscConfig+0x374>
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d135      	bne.n	8005e98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e2c:	4b7b      	ldr	r3, [pc, #492]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_OscConfig+0x320>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e296      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e44:	f7fb fbdc 	bl	8001600 <HAL_GetREVID>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d817      	bhi.n	8005e82 <HAL_RCC_OscConfig+0x35e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d108      	bne.n	8005e6c <HAL_RCC_OscConfig+0x348>
 8005e5a:	4b70      	ldr	r3, [pc, #448]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e62:	4a6e      	ldr	r2, [pc, #440]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e6a:	e075      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e6c:	4b6b      	ldr	r3, [pc, #428]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	069b      	lsls	r3, r3, #26
 8005e7a:	4968      	ldr	r1, [pc, #416]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e80:	e06a      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e82:	4b66      	ldr	r3, [pc, #408]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	061b      	lsls	r3, r3, #24
 8005e90:	4962      	ldr	r1, [pc, #392]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e96:	e05f      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d042      	beq.n	8005f26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ea0:	4b5e      	ldr	r3, [pc, #376]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5d      	ldr	r2, [pc, #372]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fb fb78 	bl	80015a0 <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005eb4:	f7fb fb74 	bl	80015a0 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e255      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ec6:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ed2:	f7fb fb95 	bl	8001600 <HAL_GetREVID>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d817      	bhi.n	8005f10 <HAL_RCC_OscConfig+0x3ec>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d108      	bne.n	8005efa <HAL_RCC_OscConfig+0x3d6>
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ef0:	4a4a      	ldr	r2, [pc, #296]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	6053      	str	r3, [r2, #4]
 8005ef8:	e02e      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
 8005efa:	4b48      	ldr	r3, [pc, #288]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	069b      	lsls	r3, r3, #26
 8005f08:	4944      	ldr	r1, [pc, #272]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
 8005f0e:	e023      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
 8005f10:	4b42      	ldr	r3, [pc, #264]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	493f      	ldr	r1, [pc, #252]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60cb      	str	r3, [r1, #12]
 8005f24:	e018      	b.n	8005f58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f26:	4b3d      	ldr	r3, [pc, #244]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3c      	ldr	r2, [pc, #240]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f32:	f7fb fb35 	bl	80015a0 <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f3a:	f7fb fb31 	bl	80015a0 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e212      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f4c:	4b33      	ldr	r3, [pc, #204]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f0      	bne.n	8005f3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d036      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d019      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	4a2a      	ldr	r2, [pc, #168]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fb fb12 	bl	80015a0 <HAL_GetTick>
 8005f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f80:	f7fb fb0e 	bl	80015a0 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e1ef      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f92:	4b22      	ldr	r3, [pc, #136]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0x45c>
 8005f9e:	e018      	b.n	8005fd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fb faf8 	bl	80015a0 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fb faf4 	bl	80015a0 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e1d5      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d039      	beq.n	8006052 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01c      	beq.n	8006020 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a0c      	ldr	r2, [pc, #48]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fad5 	bl	80015a0 <HAL_GetTick>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ffa:	f7fb fad1 	bl	80015a0 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e1b2      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_RCC_OscConfig+0x4f8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x4d6>
 8006018:	e01b      	b.n	8006052 <HAL_RCC_OscConfig+0x52e>
 800601a:	bf00      	nop
 800601c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006020:	4b9b      	ldr	r3, [pc, #620]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a9a      	ldr	r2, [pc, #616]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800602a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800602c:	f7fb fab8 	bl	80015a0 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006034:	f7fb fab4 	bl	80015a0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e195      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006046:	4b92      	ldr	r3, [pc, #584]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8081 	beq.w	8006162 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006060:	4b8c      	ldr	r3, [pc, #560]	; (8006294 <HAL_RCC_OscConfig+0x770>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a8b      	ldr	r2, [pc, #556]	; (8006294 <HAL_RCC_OscConfig+0x770>)
 8006066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800606c:	f7fb fa98 	bl	80015a0 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006074:	f7fb fa94 	bl	80015a0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	; 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e175      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006086:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_RCC_OscConfig+0x770>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d106      	bne.n	80060a8 <HAL_RCC_OscConfig+0x584>
 800609a:	4b7d      	ldr	r3, [pc, #500]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4a7c      	ldr	r2, [pc, #496]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060a0:	f043 0301 	orr.w	r3, r3, #1
 80060a4:	6713      	str	r3, [r2, #112]	; 0x70
 80060a6:	e02d      	b.n	8006104 <HAL_RCC_OscConfig+0x5e0>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <HAL_RCC_OscConfig+0x5a6>
 80060b0:	4b77      	ldr	r3, [pc, #476]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	4a76      	ldr	r2, [pc, #472]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	6713      	str	r3, [r2, #112]	; 0x70
 80060bc:	4b74      	ldr	r3, [pc, #464]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4a73      	ldr	r2, [pc, #460]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060c2:	f023 0304 	bic.w	r3, r3, #4
 80060c6:	6713      	str	r3, [r2, #112]	; 0x70
 80060c8:	e01c      	b.n	8006104 <HAL_RCC_OscConfig+0x5e0>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0x5c8>
 80060d2:	4b6f      	ldr	r3, [pc, #444]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a6e      	ldr	r2, [pc, #440]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060d8:	f043 0304 	orr.w	r3, r3, #4
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70
 80060de:	4b6c      	ldr	r3, [pc, #432]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	4a6b      	ldr	r2, [pc, #428]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6713      	str	r3, [r2, #112]	; 0x70
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0x5e0>
 80060ec:	4b68      	ldr	r3, [pc, #416]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f0:	4a67      	ldr	r2, [pc, #412]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6713      	str	r3, [r2, #112]	; 0x70
 80060f8:	4b65      	ldr	r3, [pc, #404]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fc:	4a64      	ldr	r2, [pc, #400]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80060fe:	f023 0304 	bic.w	r3, r3, #4
 8006102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fb fa48 	bl	80015a0 <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006112:	e00a      	b.n	800612a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fb fa44 	bl	80015a0 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e123      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800612a:	4b59      	ldr	r3, [pc, #356]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0ee      	beq.n	8006114 <HAL_RCC_OscConfig+0x5f0>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fb fa32 	bl	80015a0 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fb fa2e 	bl	80015a0 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e10d      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006156:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ee      	bne.n	8006140 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8102 	beq.w	8006370 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800616c:	4b48      	ldr	r3, [pc, #288]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006174:	2b18      	cmp	r3, #24
 8006176:	f000 80bd 	beq.w	80062f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b02      	cmp	r3, #2
 8006180:	f040 809e 	bne.w	80062c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006184:	4b42      	ldr	r3, [pc, #264]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a41      	ldr	r2, [pc, #260]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800618a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800618e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fb fa06 	bl	80015a0 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006198:	f7fb fa02 	bl	80015a0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0e3      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061aa:	4b39      	ldr	r3, [pc, #228]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b6:	4b36      	ldr	r3, [pc, #216]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80061b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ba:	4b37      	ldr	r3, [pc, #220]	; (8006298 <HAL_RCC_OscConfig+0x774>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061c6:	0112      	lsls	r2, r2, #4
 80061c8:	430a      	orrs	r2, r1
 80061ca:	4931      	ldr	r1, [pc, #196]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	628b      	str	r3, [r1, #40]	; 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	3b01      	subs	r3, #1
 80061d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	3b01      	subs	r3, #1
 80061e0:	025b      	lsls	r3, r3, #9
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	3b01      	subs	r3, #1
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006200:	4923      	ldr	r1, [pc, #140]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4a21      	ldr	r2, [pc, #132]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006212:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006216:	4b21      	ldr	r3, [pc, #132]	; (800629c <HAL_RCC_OscConfig+0x778>)
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	491b      	ldr	r1, [pc, #108]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	f023 020c 	bic.w	r2, r3, #12
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4917      	ldr	r1, [pc, #92]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006234:	4313      	orrs	r3, r2
 8006236:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	f023 0202 	bic.w	r2, r3, #2
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006244:	4912      	ldr	r1, [pc, #72]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	4a10      	ldr	r2, [pc, #64]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800625c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800626e:	4b08      	ldr	r3, [pc, #32]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4a07      	ldr	r2, [pc, #28]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_RCC_OscConfig+0x76c>)
 8006280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fb f98b 	bl	80015a0 <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800628c:	e011      	b.n	80062b2 <HAL_RCC_OscConfig+0x78e>
 800628e:	bf00      	nop
 8006290:	58024400 	.word	0x58024400
 8006294:	58024800 	.word	0x58024800
 8006298:	fffffc0c 	.word	0xfffffc0c
 800629c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fb f97e 	bl	80015a0 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e05f      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062b2:	4b32      	ldr	r3, [pc, #200]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0x77c>
 80062be:	e057      	b.n	8006370 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c0:	4b2e      	ldr	r3, [pc, #184]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2d      	ldr	r2, [pc, #180]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fb f968 	bl	80015a0 <HAL_GetTick>
 80062d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fb f964 	bl	80015a0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e045      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e6:	4b25      	ldr	r3, [pc, #148]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x7b0>
 80062f2:	e03d      	b.n	8006370 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062f4:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_RCC_OscConfig+0x858>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	2b01      	cmp	r3, #1
 8006306:	d031      	beq.n	800636c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f003 0203 	and.w	r2, r3, #3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006312:	429a      	cmp	r2, r3
 8006314:	d12a      	bne.n	800636c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006322:	429a      	cmp	r2, r3
 8006324:	d122      	bne.n	800636c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d11a      	bne.n	800636c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	0a5b      	lsrs	r3, r3, #9
 800633a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d111      	bne.n	800636c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006356:	429a      	cmp	r2, r3
 8006358:	d108      	bne.n	800636c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	0e1b      	lsrs	r3, r3, #24
 800635e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006366:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400

08006380 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e19c      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006394:	4b8a      	ldr	r3, [pc, #552]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d910      	bls.n	80063c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b87      	ldr	r3, [pc, #540]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 020f 	bic.w	r2, r3, #15
 80063aa:	4985      	ldr	r1, [pc, #532]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b2:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d001      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e184      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d010      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	4b7b      	ldr	r3, [pc, #492]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063dc:	429a      	cmp	r2, r3
 80063de:	d908      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063e0:	4b78      	ldr	r3, [pc, #480]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4975      	ldr	r1, [pc, #468]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d010      	beq.n	8006420 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	4b70      	ldr	r3, [pc, #448]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800640a:	429a      	cmp	r2, r3
 800640c:	d908      	bls.n	8006420 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800640e:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	496a      	ldr	r1, [pc, #424]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800641c:	4313      	orrs	r3, r2
 800641e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	4b64      	ldr	r3, [pc, #400]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006438:	429a      	cmp	r2, r3
 800643a:	d908      	bls.n	800644e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800643c:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	495e      	ldr	r1, [pc, #376]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800644a:	4313      	orrs	r3, r2
 800644c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d010      	beq.n	800647c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69da      	ldr	r2, [r3, #28]
 800645e:	4b59      	ldr	r3, [pc, #356]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006466:	429a      	cmp	r2, r3
 8006468:	d908      	bls.n	800647c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800646a:	4b56      	ldr	r3, [pc, #344]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4953      	ldr	r1, [pc, #332]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006478:	4313      	orrs	r3, r2
 800647a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	4b4d      	ldr	r3, [pc, #308]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	429a      	cmp	r2, r3
 8006496:	d908      	bls.n	80064aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006498:	4b4a      	ldr	r3, [pc, #296]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f023 020f 	bic.w	r2, r3, #15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	4947      	ldr	r1, [pc, #284]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d055      	beq.n	8006562 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064b6:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4940      	ldr	r1, [pc, #256]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064d0:	4b3c      	ldr	r3, [pc, #240]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d121      	bne.n	8006520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0f6      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e8:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d115      	bne.n	8006520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0ea      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d107      	bne.n	8006510 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006500:	4b30      	ldr	r3, [pc, #192]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0de      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006510:	4b2c      	ldr	r3, [pc, #176]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0d6      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f023 0207 	bic.w	r2, r3, #7
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4925      	ldr	r1, [pc, #148]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800652e:	4313      	orrs	r3, r2
 8006530:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006532:	f7fb f835 	bl	80015a0 <HAL_GetTick>
 8006536:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006538:	e00a      	b.n	8006550 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800653a:	f7fb f831 	bl	80015a0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	; 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e0be      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006550:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	429a      	cmp	r2, r3
 8006560:	d1eb      	bne.n	800653a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d010      	beq.n	8006590 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	429a      	cmp	r2, r3
 800657c:	d208      	bcs.n	8006590 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f023 020f 	bic.w	r2, r3, #15
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	490e      	ldr	r1, [pc, #56]	; (80065c4 <HAL_RCC_ClockConfig+0x244>)
 800658c:	4313      	orrs	r3, r2
 800658e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d214      	bcs.n	80065c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f023 020f 	bic.w	r2, r3, #15
 80065a6:	4906      	ldr	r1, [pc, #24]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <HAL_RCC_ClockConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e086      	b.n	80066ce <HAL_RCC_ClockConfig+0x34e>
 80065c0:	52002000 	.word	0x52002000
 80065c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d208      	bcs.n	80065f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065e4:	4b3c      	ldr	r3, [pc, #240]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	4939      	ldr	r1, [pc, #228]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d010      	beq.n	8006624 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	4b34      	ldr	r3, [pc, #208]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800660e:	429a      	cmp	r2, r3
 8006610:	d208      	bcs.n	8006624 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006612:	4b31      	ldr	r3, [pc, #196]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	492e      	ldr	r1, [pc, #184]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006620:	4313      	orrs	r3, r2
 8006622:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d010      	beq.n	8006652 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	4b28      	ldr	r3, [pc, #160]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800663c:	429a      	cmp	r2, r3
 800663e:	d208      	bcs.n	8006652 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	4922      	ldr	r1, [pc, #136]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 800664e:	4313      	orrs	r3, r2
 8006650:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666a:	429a      	cmp	r2, r3
 800666c:	d208      	bcs.n	8006680 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	4917      	ldr	r1, [pc, #92]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 800667c:	4313      	orrs	r3, r2
 800667e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006680:	f000 f834 	bl	80066ec <HAL_RCC_GetSysClockFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	4912      	ldr	r1, [pc, #72]	; (80066dc <HAL_RCC_ClockConfig+0x35c>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800669e:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <HAL_RCC_ClockConfig+0x35c>)
 80066a8:	5cd3      	ldrb	r3, [r2, r3]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
 80066b4:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <HAL_RCC_ClockConfig+0x360>)
 80066b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066b8:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <HAL_RCC_ClockConfig+0x364>)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80066be:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <HAL_RCC_ClockConfig+0x368>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fa fce4 	bl	8001090 <HAL_InitTick>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
 80066dc:	08010b58 	.word	0x08010b58
 80066e0:	24000004 	.word	0x24000004
 80066e4:	24000000 	.word	0x24000000
 80066e8:	24000008 	.word	0x24000008

080066ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b089      	sub	sp, #36	; 0x24
 80066f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f2:	4bb3      	ldr	r3, [pc, #716]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fa:	2b18      	cmp	r3, #24
 80066fc:	f200 8155 	bhi.w	80069aa <HAL_RCC_GetSysClockFreq+0x2be>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	0800676d 	.word	0x0800676d
 800670c:	080069ab 	.word	0x080069ab
 8006710:	080069ab 	.word	0x080069ab
 8006714:	080069ab 	.word	0x080069ab
 8006718:	080069ab 	.word	0x080069ab
 800671c:	080069ab 	.word	0x080069ab
 8006720:	080069ab 	.word	0x080069ab
 8006724:	080069ab 	.word	0x080069ab
 8006728:	08006793 	.word	0x08006793
 800672c:	080069ab 	.word	0x080069ab
 8006730:	080069ab 	.word	0x080069ab
 8006734:	080069ab 	.word	0x080069ab
 8006738:	080069ab 	.word	0x080069ab
 800673c:	080069ab 	.word	0x080069ab
 8006740:	080069ab 	.word	0x080069ab
 8006744:	080069ab 	.word	0x080069ab
 8006748:	08006799 	.word	0x08006799
 800674c:	080069ab 	.word	0x080069ab
 8006750:	080069ab 	.word	0x080069ab
 8006754:	080069ab 	.word	0x080069ab
 8006758:	080069ab 	.word	0x080069ab
 800675c:	080069ab 	.word	0x080069ab
 8006760:	080069ab 	.word	0x080069ab
 8006764:	080069ab 	.word	0x080069ab
 8006768:	0800679f 	.word	0x0800679f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800676c:	4b94      	ldr	r3, [pc, #592]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006778:	4b91      	ldr	r3, [pc, #580]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	4a90      	ldr	r2, [pc, #576]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800678a:	e111      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800678c:	4b8d      	ldr	r3, [pc, #564]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800678e:	61bb      	str	r3, [r7, #24]
    break;
 8006790:	e10e      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006792:	4b8d      	ldr	r3, [pc, #564]	; (80069c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006794:	61bb      	str	r3, [r7, #24]
    break;
 8006796:	e10b      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006798:	4b8c      	ldr	r3, [pc, #560]	; (80069cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800679a:	61bb      	str	r3, [r7, #24]
    break;
 800679c:	e108      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800679e:	4b88      	ldr	r3, [pc, #544]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80067a8:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067b4:	4b82      	ldr	r3, [pc, #520]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067be:	4b80      	ldr	r3, [pc, #512]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	08db      	lsrs	r3, r3, #3
 80067c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	fb02 f303 	mul.w	r3, r2, r3
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80e1 	beq.w	80069a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	f000 8083 	beq.w	80068f0 <HAL_RCC_GetSysClockFreq+0x204>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	f200 80a1 	bhi.w	8006934 <HAL_RCC_GetSysClockFreq+0x248>
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x114>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d056      	beq.n	80068ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80067fe:	e099      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006800:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d02d      	beq.n	8006868 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800680c:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	08db      	lsrs	r3, r3, #3
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	4a6b      	ldr	r2, [pc, #428]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
 800681c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	ee07 3a90 	vmov	s15, r3
 8006824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b62      	ldr	r3, [pc, #392]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a02 	vldr	s12, [r7, #8]
 800684a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006866:	e087      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a58 	vldr	s13, [pc, #352]	; 80069d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b51      	ldr	r3, [pc, #324]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a02 	vldr	s12, [r7, #8]
 800688e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068aa:	e065      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068be:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80068d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ee:	e043      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80069dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80068fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006902:	4b2f      	ldr	r3, [pc, #188]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006912:	ed97 6a02 	vldr	s12, [r7, #8]
 8006916:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800691a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006932:	e021      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80069d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006946:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006956:	ed97 6a02 	vldr	s12, [r7, #8]
 800695a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800695e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800696a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800696e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006976:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	0a5b      	lsrs	r3, r3, #9
 800697e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006982:	3301      	adds	r3, #1
 8006984:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	ee07 3a90 	vmov	s15, r3
 800698c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006990:	edd7 6a07 	vldr	s13, [r7, #28]
 8006994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699c:	ee17 3a90 	vmov	r3, s15
 80069a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80069a2:	e005      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61bb      	str	r3, [r7, #24]
    break;
 80069a8:	e002      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069ac:	61bb      	str	r3, [r7, #24]
    break;
 80069ae:	bf00      	nop
  }

  return sysclockfreq;
 80069b0:	69bb      	ldr	r3, [r7, #24]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3724      	adds	r7, #36	; 0x24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400
 80069c4:	03d09000 	.word	0x03d09000
 80069c8:	003d0900 	.word	0x003d0900
 80069cc:	016e3600 	.word	0x016e3600
 80069d0:	46000000 	.word	0x46000000
 80069d4:	4c742400 	.word	0x4c742400
 80069d8:	4a742400 	.word	0x4a742400
 80069dc:	4bb71b00 	.word	0x4bb71b00

080069e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069e6:	f7ff fe81 	bl	80066ec <HAL_RCC_GetSysClockFreq>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x50>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	490f      	ldr	r1, [pc, #60]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x54>)
 80069f8:	5ccb      	ldrb	r3, [r1, r3]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a0e:	5cd3      	ldrb	r3, [r2, r3]
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1a:	4a07      	ldr	r2, [pc, #28]	; (8006a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a1e:	4a07      	ldr	r2, [pc, #28]	; (8006a3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	58024400 	.word	0x58024400
 8006a34:	08010b58 	.word	0x08010b58
 8006a38:	24000004 	.word	0x24000004
 8006a3c:	24000000 	.word	0x24000000

08006a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a44:	f7ff ffcc 	bl	80069e0 <HAL_RCC_GetHCLKFreq>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	4904      	ldr	r1, [pc, #16]	; (8006a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a56:	5ccb      	ldrb	r3, [r1, r3]
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	58024400 	.word	0x58024400
 8006a68:	08010b58 	.word	0x08010b58

08006a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a70:	f7ff ffb6 	bl	80069e0 <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	4904      	ldr	r1, [pc, #16]	; (8006a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	58024400 	.word	0x58024400
 8006a94:	08010b58 	.word	0x08010b58

08006a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	223f      	movs	r2, #63	; 0x3f
 8006aa6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f003 0207 	and.w	r2, r3, #7
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006ab4:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006ac0:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <HAL_RCC_GetClockConfig+0x7c>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCC_GetClockConfig+0x80>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	58024400 	.word	0x58024400
 8006b18:	52002000 	.word	0x52002000

08006b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b24:	2300      	movs	r3, #0
 8006b26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d03f      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b40:	d02a      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b46:	d824      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b4c:	d018      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b52:	d81e      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5c:	d007      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b5e:	e018      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b60:	4ba3      	ldr	r3, [pc, #652]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	4aa2      	ldr	r2, [pc, #648]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b6c:	e015      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3304      	adds	r3, #4
 8006b72:	2102      	movs	r1, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f9d5 	bl	8007f24 <RCCEx_PLL2_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b7e:	e00c      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3324      	adds	r3, #36	; 0x24
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fa7e 	bl	8008088 <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75fb      	strb	r3, [r7, #23]
      break;
 8006b96:	e000      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ba0:	4b93      	ldr	r3, [pc, #588]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bac:	4990      	ldr	r1, [pc, #576]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	650b      	str	r3, [r1, #80]	; 0x50
 8006bb2:	e001      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d03d      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d826      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006be9 	.word	0x08006be9
 8006bd8:	08006bf7 	.word	0x08006bf7
 8006bdc:	08006c09 	.word	0x08006c09
 8006be0:	08006c21 	.word	0x08006c21
 8006be4:	08006c21 	.word	0x08006c21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be8:	4b81      	ldr	r3, [pc, #516]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a80      	ldr	r2, [pc, #512]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bf4:	e015      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f991 	bl	8007f24 <RCCEx_PLL2_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c06:	e00c      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 fa3a 	bl	8008088 <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c18:	e003      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1e:	e000      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c28:	4b71      	ldr	r3, [pc, #452]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2c:	f023 0207 	bic.w	r2, r3, #7
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	496e      	ldr	r1, [pc, #440]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	650b      	str	r3, [r1, #80]	; 0x50
 8006c3a:	e001      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d042      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c54:	d02b      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5a:	d825      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5e:	d028      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c60:	2bc0      	cmp	r3, #192	; 0xc0
 8006c62:	d821      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d016      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d81d      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d007      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006c74:	e018      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c76:	4b5e      	ldr	r3, [pc, #376]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	4a5d      	ldr	r2, [pc, #372]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006c82:	e017      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 f94a 	bl	8007f24 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006c94:	e00e      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3324      	adds	r3, #36	; 0x24
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f9f3 	bl	8008088 <RCCEx_PLL3_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ca6:	e005      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cac:	e002      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006cba:	4b4d      	ldr	r3, [pc, #308]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	494a      	ldr	r1, [pc, #296]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	650b      	str	r3, [r1, #80]	; 0x50
 8006ccc:	e001      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d049      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ce4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ce8:	d030      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006cea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cee:	d82a      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006cf0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cf4:	d02c      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006cf6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cfa:	d824      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d00:	d018      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d06:	d81e      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d10:	d007      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d12:	e018      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d14:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4a35      	ldr	r2, [pc, #212]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d20:	e017      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f8fb 	bl	8007f24 <RCCEx_PLL2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d32:	e00e      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 f9a4 	bl	8008088 <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d44:	e005      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4a:	e002      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d66:	4922      	ldr	r1, [pc, #136]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	658b      	str	r3, [r1, #88]	; 0x58
 8006d6c:	e001      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d04b      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d88:	d030      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d8e:	d82a      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006d90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d94:	d02e      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d9a:	d824      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006da0:	d018      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006da6:	d81e      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006db0:	d007      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006db2:	e018      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e019      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 f8ab 	bl	8007f24 <RCCEx_PLL2_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dd2:	e010      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3324      	adds	r3, #36	; 0x24
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f954 	bl	8008088 <RCCEx_PLL3_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006de4:	e007      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dea:	e004      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006dec:	bf00      	nop
 8006dee:	e002      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006df0:	58024400 	.word	0x58024400
      break;
 8006df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dfc:	4b99      	ldr	r3, [pc, #612]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e0a:	4996      	ldr	r1, [pc, #600]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e10:	e001      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d032      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	2b30      	cmp	r3, #48	; 0x30
 8006e28:	d01c      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006e2a:	2b30      	cmp	r3, #48	; 0x30
 8006e2c:	d817      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d00c      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d813      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d10f      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3e:	4b89      	ldr	r3, [pc, #548]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	4a88      	ldr	r2, [pc, #544]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e4a:	e00e      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	2102      	movs	r1, #2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 f866 	bl	8007f24 <RCCEx_PLL2_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e5c:	e005      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
      break;
 8006e62:	e002      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e70:	4b7c      	ldr	r3, [pc, #496]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7c:	4979      	ldr	r1, [pc, #484]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e82:	e001      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d047      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e9c:	d030      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea2:	d82a      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ea4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea8:	d02c      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eae:	d824      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb4:	d018      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eba:	d81e      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec4:	d007      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006ec6:	e018      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec8:	4b66      	ldr	r3, [pc, #408]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a65      	ldr	r2, [pc, #404]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ed4:	e017      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 f821 	bl	8007f24 <RCCEx_PLL2_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ee6:	e00e      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3324      	adds	r3, #36	; 0x24
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 f8ca 	bl	8008088 <RCCEx_PLL3_Config>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ef8:	e005      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	75fb      	strb	r3, [r7, #23]
      break;
 8006efe:	e002      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f0c:	4b55      	ldr	r3, [pc, #340]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f18:	4952      	ldr	r1, [pc, #328]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f1e:	e001      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d049      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f38:	d02e      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f3e:	d828      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f44:	d02a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f4a:	d822      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f50:	d026      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f56:	d81c      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5c:	d010      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f62:	d816      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01d      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d111      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 ffd5 	bl	8007f24 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f7e:	e012      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3324      	adds	r3, #36	; 0x24
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 f87e 	bl	8008088 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f90:	e009      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
      break;
 8006f96:	e006      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e004      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006f9c:	bf00      	nop
 8006f9e:	e002      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fac:	4b2d      	ldr	r3, [pc, #180]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	492a      	ldr	r1, [pc, #168]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	650b      	str	r3, [r1, #80]	; 0x50
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d04d      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fda:	d02e      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe0:	d828      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe6:	d02a      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d822      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ff2:	d026      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006ff4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ff8:	d81c      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffe:	d010      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007004:	d816      	bhi.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01d      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800700a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800700e:	d111      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	2101      	movs	r1, #1
 8007016:	4618      	mov	r0, r3
 8007018:	f000 ff84 	bl	8007f24 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007020:	e012      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3324      	adds	r3, #36	; 0x24
 8007026:	2101      	movs	r1, #1
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f82d 	bl	8008088 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007032:	e009      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	75fb      	strb	r3, [r7, #23]
      break;
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800703a:	bf00      	nop
 800703c:	e004      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800703e:	bf00      	nop
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007042:	bf00      	nop
 8007044:	e000      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10c      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800705c:	4901      	ldr	r1, [pc, #4]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800705e:	4313      	orrs	r3, r2
 8007060:	658b      	str	r3, [r1, #88]	; 0x58
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d02f      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d00e      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007086:	d814      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800708c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007090:	d10f      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007092:	4baf      	ldr	r3, [pc, #700]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	4aae      	ldr	r2, [pc, #696]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800709e:	e00c      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3304      	adds	r3, #4
 80070a4:	2101      	movs	r1, #1
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ff3c 	bl	8007f24 <RCCEx_PLL2_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	75fb      	strb	r3, [r7, #23]
      break;
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80070b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070c0:	4ba3      	ldr	r3, [pc, #652]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070cc:	49a0      	ldr	r1, [pc, #640]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	650b      	str	r3, [r1, #80]	; 0x50
 80070d2:	e001      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d032      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d81b      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	0800712b 	.word	0x0800712b
 80070f8:	08007105 	.word	0x08007105
 80070fc:	08007113 	.word	0x08007113
 8007100:	0800712b 	.word	0x0800712b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007104:	4b92      	ldr	r3, [pc, #584]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a91      	ldr	r2, [pc, #580]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800710a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007110:	e00c      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3304      	adds	r3, #4
 8007116:	2102      	movs	r1, #2
 8007118:	4618      	mov	r0, r3
 800711a:	f000 ff03 	bl	8007f24 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
      break;
 8007128:	e000      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800712a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007132:	4b87      	ldr	r3, [pc, #540]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007136:	f023 0203 	bic.w	r2, r3, #3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	4984      	ldr	r1, [pc, #528]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007140:	4313      	orrs	r3, r2
 8007142:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007144:	e001      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8086 	beq.w	8007264 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007158:	4b7e      	ldr	r3, [pc, #504]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a7d      	ldr	r2, [pc, #500]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800715e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007162:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007164:	f7fa fa1c 	bl	80015a0 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800716a:	e009      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800716c:	f7fa fa18 	bl	80015a0 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	; 0x64
 8007178:	d902      	bls.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	75fb      	strb	r3, [r7, #23]
        break;
 800717e:	e005      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007180:	4b74      	ldr	r3, [pc, #464]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0ef      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d166      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007192:	4b6f      	ldr	r3, [pc, #444]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800719c:	4053      	eors	r3, r2
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d013      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071a6:	4b6a      	ldr	r3, [pc, #424]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071b0:	4b67      	ldr	r3, [pc, #412]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	4a66      	ldr	r2, [pc, #408]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071bc:	4b64      	ldr	r3, [pc, #400]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	4a63      	ldr	r2, [pc, #396]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071c8:	4a61      	ldr	r2, [pc, #388]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d8:	d115      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fa f9e1 	bl	80015a0 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071e0:	e00b      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fa f9dd 	bl	80015a0 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d902      	bls.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	75fb      	strb	r3, [r7, #23]
            break;
 80071f8:	e005      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071fa:	4b55      	ldr	r3, [pc, #340]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ed      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d126      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721a:	d10d      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800721c:	4b4c      	ldr	r3, [pc, #304]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800722a:	0919      	lsrs	r1, r3, #4
 800722c:	4b4a      	ldr	r3, [pc, #296]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800722e:	400b      	ands	r3, r1
 8007230:	4947      	ldr	r1, [pc, #284]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007232:	4313      	orrs	r3, r2
 8007234:	610b      	str	r3, [r1, #16]
 8007236:	e005      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007238:	4b45      	ldr	r3, [pc, #276]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	4a44      	ldr	r2, [pc, #272]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800723e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007242:	6113      	str	r3, [r2, #16]
 8007244:	4b42      	ldr	r3, [pc, #264]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800724e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007252:	493f      	ldr	r1, [pc, #252]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007254:	4313      	orrs	r3, r2
 8007256:	670b      	str	r3, [r1, #112]	; 0x70
 8007258:	e004      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	75bb      	strb	r3, [r7, #22]
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8085 	beq.w	800737c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007276:	2b28      	cmp	r3, #40	; 0x28
 8007278:	d866      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	0800735d 	.word	0x0800735d
 8007284:	08007349 	.word	0x08007349
 8007288:	08007349 	.word	0x08007349
 800728c:	08007349 	.word	0x08007349
 8007290:	08007349 	.word	0x08007349
 8007294:	08007349 	.word	0x08007349
 8007298:	08007349 	.word	0x08007349
 800729c:	08007349 	.word	0x08007349
 80072a0:	08007325 	.word	0x08007325
 80072a4:	08007349 	.word	0x08007349
 80072a8:	08007349 	.word	0x08007349
 80072ac:	08007349 	.word	0x08007349
 80072b0:	08007349 	.word	0x08007349
 80072b4:	08007349 	.word	0x08007349
 80072b8:	08007349 	.word	0x08007349
 80072bc:	08007349 	.word	0x08007349
 80072c0:	08007337 	.word	0x08007337
 80072c4:	08007349 	.word	0x08007349
 80072c8:	08007349 	.word	0x08007349
 80072cc:	08007349 	.word	0x08007349
 80072d0:	08007349 	.word	0x08007349
 80072d4:	08007349 	.word	0x08007349
 80072d8:	08007349 	.word	0x08007349
 80072dc:	08007349 	.word	0x08007349
 80072e0:	0800735d 	.word	0x0800735d
 80072e4:	08007349 	.word	0x08007349
 80072e8:	08007349 	.word	0x08007349
 80072ec:	08007349 	.word	0x08007349
 80072f0:	08007349 	.word	0x08007349
 80072f4:	08007349 	.word	0x08007349
 80072f8:	08007349 	.word	0x08007349
 80072fc:	08007349 	.word	0x08007349
 8007300:	0800735d 	.word	0x0800735d
 8007304:	08007349 	.word	0x08007349
 8007308:	08007349 	.word	0x08007349
 800730c:	08007349 	.word	0x08007349
 8007310:	08007349 	.word	0x08007349
 8007314:	08007349 	.word	0x08007349
 8007318:	08007349 	.word	0x08007349
 800731c:	08007349 	.word	0x08007349
 8007320:	0800735d 	.word	0x0800735d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	2101      	movs	r1, #1
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fdfa 	bl	8007f24 <RCCEx_PLL2_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007334:	e013      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	2101      	movs	r1, #1
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fea3 	bl	8008088 <RCCEx_PLL3_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007346:	e00a      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
      break;
 800734c:	e007      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800734e:	bf00      	nop
 8007350:	58024400 	.word	0x58024400
 8007354:	58024800 	.word	0x58024800
 8007358:	00ffffcf 	.word	0x00ffffcf
      break;
 800735c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007364:	4b96      	ldr	r3, [pc, #600]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007370:	4993      	ldr	r1, [pc, #588]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	654b      	str	r3, [r1, #84]	; 0x54
 8007376:	e001      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d038      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738c:	2b05      	cmp	r3, #5
 800738e:	d821      	bhi.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073db 	.word	0x080073db
 800739c:	080073b1 	.word	0x080073b1
 80073a0:	080073c3 	.word	0x080073c3
 80073a4:	080073db 	.word	0x080073db
 80073a8:	080073db 	.word	0x080073db
 80073ac:	080073db 	.word	0x080073db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	2101      	movs	r1, #1
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fdb4 	bl	8007f24 <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073c0:	e00c      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2101      	movs	r1, #1
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fe5d 	bl	8008088 <RCCEx_PLL3_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
      break;
 80073d8:	e000      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80073da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073e2:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	f023 0207 	bic.w	r2, r3, #7
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	4974      	ldr	r1, [pc, #464]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	654b      	str	r3, [r1, #84]	; 0x54
 80073f4:	e001      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d03a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	2b05      	cmp	r3, #5
 800740e:	d821      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	0800745b 	.word	0x0800745b
 800741c:	08007431 	.word	0x08007431
 8007420:	08007443 	.word	0x08007443
 8007424:	0800745b 	.word	0x0800745b
 8007428:	0800745b 	.word	0x0800745b
 800742c:	0800745b 	.word	0x0800745b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fd74 	bl	8007f24 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007440:	e00c      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3324      	adds	r3, #36	; 0x24
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fe1d 	bl	8008088 <RCCEx_PLL3_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007452:	e003      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
      break;
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800745a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007462:	4b57      	ldr	r3, [pc, #348]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	f023 0207 	bic.w	r2, r3, #7
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	4953      	ldr	r1, [pc, #332]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007472:	4313      	orrs	r3, r2
 8007474:	658b      	str	r3, [r1, #88]	; 0x58
 8007476:	e001      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d04b      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007492:	d02e      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007498:	d828      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749e:	d02a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a4:	d822      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80074a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074aa:	d026      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80074ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074b0:	d81c      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d010      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d816      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01d      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d111      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd28 	bl	8007f24 <RCCEx_PLL2_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074d8:	e012      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3324      	adds	r3, #36	; 0x24
 80074de:	2102      	movs	r1, #2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fdd1 	bl	8008088 <RCCEx_PLL3_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074ea:	e009      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
      break;
 80074f0:	e006      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80074f2:	bf00      	nop
 80074f4:	e004      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80074f6:	bf00      	nop
 80074f8:	e002      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80074fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007506:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007514:	492a      	ldr	r1, [pc, #168]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007516:	4313      	orrs	r3, r2
 8007518:	654b      	str	r3, [r1, #84]	; 0x54
 800751a:	e001      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d04d      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007532:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007536:	d02e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007538:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800753c:	d828      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007542:	d02a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007548:	d822      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800754a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754e:	d026      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007554:	d81c      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755a:	d010      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007560:	d816      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01d      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d111      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2100      	movs	r1, #0
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fcd6 	bl	8007f24 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800757c:	e012      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3324      	adds	r3, #36	; 0x24
 8007582:	2102      	movs	r1, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fd7f 	bl	8008088 <RCCEx_PLL3_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800758e:	e009      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
      break;
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80075a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075b8:	4901      	ldr	r1, [pc, #4]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	658b      	str	r3, [r1, #88]	; 0x58
 80075be:	e003      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80075c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d04b      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075de:	d02e      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80075e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075e4:	d828      	bhi.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80075e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ea:	d02a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80075ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f0:	d822      	bhi.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80075f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075f6:	d026      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80075f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075fc:	d81c      	bhi.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80075fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007602:	d010      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007608:	d816      	bhi.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01d      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800760e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007612:	d111      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fc82 	bl	8007f24 <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007624:	e012      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3324      	adds	r3, #36	; 0x24
 800762a:	2102      	movs	r1, #2
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fd2b 	bl	8008088 <RCCEx_PLL3_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007636:	e009      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	75fb      	strb	r3, [r7, #23]
      break;
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800763e:	bf00      	nop
 8007640:	e004      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007642:	bf00      	nop
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800764a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007652:	4b9d      	ldr	r3, [pc, #628]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007660:	4999      	ldr	r1, [pc, #612]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007662:	4313      	orrs	r3, r2
 8007664:	658b      	str	r3, [r1, #88]	; 0x58
 8007666:	e001      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007682:	d10a      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3324      	adds	r3, #36	; 0x24
 8007688:	2102      	movs	r1, #2
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fcfc 	bl	8008088 <RCCEx_PLL3_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800769a:	4b8b      	ldr	r3, [pc, #556]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a8:	4987      	ldr	r1, [pc, #540]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c4:	d10a      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3324      	adds	r3, #36	; 0x24
 80076ca:	2102      	movs	r1, #2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fcdb 	bl	8008088 <RCCEx_PLL3_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076dc:	4b7a      	ldr	r3, [pc, #488]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ea:	4977      	ldr	r1, [pc, #476]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d034      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007706:	d01d      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800770c:	d817      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007716:	d009      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007718:	e011      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3304      	adds	r3, #4
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fbff 	bl	8007f24 <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800772a:	e00c      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3324      	adds	r3, #36	; 0x24
 8007730:	2102      	movs	r1, #2
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fca8 	bl	8008088 <RCCEx_PLL3_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800773c:	e003      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
      break;
 8007742:	e000      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800774c:	4b5e      	ldr	r3, [pc, #376]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800775a:	495b      	ldr	r1, [pc, #364]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800775c:	4313      	orrs	r3, r2
 800775e:	658b      	str	r3, [r1, #88]	; 0x58
 8007760:	e001      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d033      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007778:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800777c:	d01c      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800777e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007782:	d816      	bhi.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007788:	d003      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800778a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800778e:	d007      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007790:	e00f      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007792:	4b4d      	ldr	r3, [pc, #308]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	4a4c      	ldr	r2, [pc, #304]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800779e:	e00c      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3324      	adds	r3, #36	; 0x24
 80077a4:	2101      	movs	r1, #1
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fc6e 	bl	8008088 <RCCEx_PLL3_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80077b0:	e003      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
      break;
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80077b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077c0:	4b41      	ldr	r3, [pc, #260]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ce:	493e      	ldr	r1, [pc, #248]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	654b      	str	r3, [r1, #84]	; 0x54
 80077d4:	e001      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d029      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f2:	d007      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80077f4:	e00f      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f6:	4b34      	ldr	r3, [pc, #208]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007802:	e00b      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fb8a 	bl	8007f24 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007814:	e002      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
      break;
 800781a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007822:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	4926      	ldr	r1, [pc, #152]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007830:	4313      	orrs	r3, r2
 8007832:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007834:	e001      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2102      	movs	r1, #2
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fc1b 	bl	8008088 <RCCEx_PLL3_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d033      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007870:	d017      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007876:	d811      	bhi.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d013      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800787e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007882:	d80b      	bhi.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d010      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788c:	d106      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	4a0d      	ldr	r2, [pc, #52]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800789a:	e007      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]
      break;
 80078a0:	e004      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80078a2:	bf00      	nop
 80078a4:	e002      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80078aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10c      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078be:	4902      	ldr	r1, [pc, #8]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	654b      	str	r3, [r1, #84]	; 0x54
 80078c4:	e004      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d008      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078dc:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e8:	492e      	ldr	r1, [pc, #184]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d009      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078fa:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007908:	4926      	ldr	r1, [pc, #152]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800790a:	4313      	orrs	r3, r2
 800790c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800791a:	4b22      	ldr	r3, [pc, #136]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007926:	491f      	ldr	r1, [pc, #124]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007928:	4313      	orrs	r3, r2
 800792a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007938:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800793e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007942:	6113      	str	r3, [r2, #16]
 8007944:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800794e:	4915      	ldr	r1, [pc, #84]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007950:	4313      	orrs	r3, r2
 8007952:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da08      	bge.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800795c:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007968:	490e      	ldr	r1, [pc, #56]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800796a:	4313      	orrs	r3, r2
 800796c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800797c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	4906      	ldr	r1, [pc, #24]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800798a:	4313      	orrs	r3, r2
 800798c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800798e:	7dbb      	ldrb	r3, [r7, #22]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400

080079a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079ac:	f7ff f818 	bl	80069e0 <HAL_RCC_GetHCLKFreq>
 80079b0:	4602      	mov	r2, r0
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079be:	5ccb      	ldrb	r3, [r1, r3]
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	58024400 	.word	0x58024400
 80079d0:	08010b58 	.word	0x08010b58

080079d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	; 0x24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079dc:	4ba1      	ldr	r3, [pc, #644]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80079e6:	4b9f      	ldr	r3, [pc, #636]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	0b1b      	lsrs	r3, r3, #12
 80079ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079f2:	4b9c      	ldr	r3, [pc, #624]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80079fe:	4b99      	ldr	r3, [pc, #612]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	08db      	lsrs	r3, r3, #3
 8007a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	fb02 f303 	mul.w	r3, r2, r3
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8111 	beq.w	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	f000 8083 	beq.w	8007b30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	f200 80a1 	bhi.w	8007b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d056      	beq.n	8007aec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a3e:	e099      	b.n	8007b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a40:	4b88      	ldr	r3, [pc, #544]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02d      	beq.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a4c:	4b85      	ldr	r3, [pc, #532]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	08db      	lsrs	r3, r3, #3
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	4a84      	ldr	r2, [pc, #528]	; (8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a76:	4b7b      	ldr	r3, [pc, #492]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007aa6:	e087      	b.n	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aba:	4b6a      	ldr	r3, [pc, #424]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ace:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aea:	e065      	b.n	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afe:	4b59      	ldr	r3, [pc, #356]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b2e:	e043      	b.n	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b42:	4b48      	ldr	r3, [pc, #288]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b72:	e021      	b.n	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b86:	4b37      	ldr	r3, [pc, #220]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bb8:	4b2a      	ldr	r3, [pc, #168]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	0a5b      	lsrs	r3, r3, #9
 8007bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bde:	ee17 2a90 	vmov	r2, s15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007be6:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c0c:	ee17 2a90 	vmov	r2, s15
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	0e1b      	lsrs	r3, r3, #24
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3a:	ee17 2a90 	vmov	r2, s15
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c42:	e008      	b.n	8007c56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	609a      	str	r2, [r3, #8]
}
 8007c56:	bf00      	nop
 8007c58:	3724      	adds	r7, #36	; 0x24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
 8007c68:	03d09000 	.word	0x03d09000
 8007c6c:	46000000 	.word	0x46000000
 8007c70:	4c742400 	.word	0x4c742400
 8007c74:	4a742400 	.word	0x4a742400
 8007c78:	4bb71b00 	.word	0x4bb71b00

08007c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c84:	4ba1      	ldr	r3, [pc, #644]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c8e:	4b9f      	ldr	r3, [pc, #636]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	0d1b      	lsrs	r3, r3, #20
 8007c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c9a:	4b9c      	ldr	r3, [pc, #624]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ca6:	4b99      	ldr	r3, [pc, #612]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8111 	beq.w	8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	f000 8083 	beq.w	8007dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	f200 80a1 	bhi.w	8007e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d056      	beq.n	8007d94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ce6:	e099      	b.n	8007e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce8:	4b88      	ldr	r3, [pc, #544]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d02d      	beq.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cf4:	4b85      	ldr	r3, [pc, #532]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	4a84      	ldr	r2, [pc, #528]	; (8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d00:	fa22 f303 	lsr.w	r3, r2, r3
 8007d04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b7b      	ldr	r3, [pc, #492]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d4e:	e087      	b.n	8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b6a      	ldr	r3, [pc, #424]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d92:	e065      	b.n	8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b59      	ldr	r3, [pc, #356]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dd6:	e043      	b.n	8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	4b48      	ldr	r3, [pc, #288]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e1a:	e021      	b.n	8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2e:	4b37      	ldr	r3, [pc, #220]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e60:	4b2a      	ldr	r3, [pc, #168]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	0a5b      	lsrs	r3, r3, #9
 8007e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e86:	ee17 2a90 	vmov	r2, s15
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e8e:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	0c1b      	lsrs	r3, r3, #16
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb4:	ee17 2a90 	vmov	r2, s15
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ebc:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	0e1b      	lsrs	r3, r3, #24
 8007ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee2:	ee17 2a90 	vmov	r2, s15
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007eea:	e008      	b.n	8007efe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	609a      	str	r2, [r3, #8]
}
 8007efe:	bf00      	nop
 8007f00:	3724      	adds	r7, #36	; 0x24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	03d09000 	.word	0x03d09000
 8007f14:	46000000 	.word	0x46000000
 8007f18:	4c742400 	.word	0x4c742400
 8007f1c:	4a742400 	.word	0x4a742400
 8007f20:	4bb71b00 	.word	0x4bb71b00

08007f24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f32:	4b53      	ldr	r3, [pc, #332]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d101      	bne.n	8007f42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e099      	b.n	8008076 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f42:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a4e      	ldr	r2, [pc, #312]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f4e:	f7f9 fb27 	bl	80015a0 <HAL_GetTick>
 8007f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f54:	e008      	b.n	8007f68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f56:	f7f9 fb23 	bl	80015a0 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e086      	b.n	8008076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f68:	4b45      	ldr	r3, [pc, #276]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f74:	4b42      	ldr	r3, [pc, #264]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	031b      	lsls	r3, r3, #12
 8007f82:	493f      	ldr	r1, [pc, #252]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	628b      	str	r3, [r1, #40]	; 0x28
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	025b      	lsls	r3, r3, #9
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	061b      	lsls	r3, r3, #24
 8007fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fb8:	4931      	ldr	r1, [pc, #196]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fbe:	4b30      	ldr	r3, [pc, #192]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	492d      	ldr	r1, [pc, #180]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fd0:	4b2b      	ldr	r3, [pc, #172]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	f023 0220 	bic.w	r2, r3, #32
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	4928      	ldr	r1, [pc, #160]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fe2:	4b27      	ldr	r3, [pc, #156]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a26      	ldr	r2, [pc, #152]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	f023 0310 	bic.w	r3, r3, #16
 8007fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fee:	4b24      	ldr	r3, [pc, #144]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <RCCEx_PLL2_Config+0x160>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	69d2      	ldr	r2, [r2, #28]
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	4920      	ldr	r1, [pc, #128]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008002:	4b1f      	ldr	r3, [pc, #124]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008008:	f043 0310 	orr.w	r3, r3, #16
 800800c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008014:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 800801a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008020:	e00f      	b.n	8008042 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d106      	bne.n	8008036 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a14      	ldr	r2, [pc, #80]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 800802e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008034:	e005      	b.n	8008042 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	4a11      	ldr	r2, [pc, #68]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 800803c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 8008048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800804c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804e:	f7f9 faa7 	bl	80015a0 <HAL_GetTick>
 8008052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008054:	e008      	b.n	8008068 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008056:	f7f9 faa3 	bl	80015a0 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e006      	b.n	8008076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <RCCEx_PLL2_Config+0x15c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
 8008084:	ffff0007 	.word	0xffff0007

08008088 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008096:	4b53      	ldr	r3, [pc, #332]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d101      	bne.n	80080a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e099      	b.n	80081da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080a6:	4b4f      	ldr	r3, [pc, #316]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a4e      	ldr	r2, [pc, #312]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80080ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b2:	f7f9 fa75 	bl	80015a0 <HAL_GetTick>
 80080b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080b8:	e008      	b.n	80080cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080ba:	f7f9 fa71 	bl	80015a0 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e086      	b.n	80081da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080d8:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	051b      	lsls	r3, r3, #20
 80080e6:	493f      	ldr	r1, [pc, #252]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	628b      	str	r3, [r1, #40]	; 0x28
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	025b      	lsls	r3, r3, #9
 80080fe:	b29b      	uxth	r3, r3
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	3b01      	subs	r3, #1
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800811c:	4931      	ldr	r1, [pc, #196]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008122:	4b30      	ldr	r3, [pc, #192]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	492d      	ldr	r1, [pc, #180]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008130:	4313      	orrs	r3, r2
 8008132:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008134:	4b2b      	ldr	r3, [pc, #172]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	4928      	ldr	r1, [pc, #160]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008146:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800814c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <RCCEx_PLL3_Config+0x160>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	69d2      	ldr	r2, [r2, #28]
 800815e:	00d2      	lsls	r2, r2, #3
 8008160:	4920      	ldr	r1, [pc, #128]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008166:	4b1f      	ldr	r3, [pc, #124]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800816c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008178:	4b1a      	ldr	r3, [pc, #104]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a19      	ldr	r2, [pc, #100]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800817e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008184:	e00f      	b.n	80081a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d106      	bne.n	800819a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800818c:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	4a14      	ldr	r2, [pc, #80]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 8008192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008196:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008198:	e005      	b.n	80081a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a0e      	ldr	r2, [pc, #56]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80081ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b2:	f7f9 f9f5 	bl	80015a0 <HAL_GetTick>
 80081b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081b8:	e008      	b.n	80081cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081ba:	f7f9 f9f1 	bl	80015a0 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e006      	b.n	80081da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081cc:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f0      	beq.n	80081ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	ffff0007 	.word	0xffff0007

080081ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e0f1      	b.n	80083e2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a78      	ldr	r2, [pc, #480]	; (80083ec <HAL_SPI_Init+0x200>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00f      	beq.n	800822e <HAL_SPI_Init+0x42>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a77      	ldr	r2, [pc, #476]	; (80083f0 <HAL_SPI_Init+0x204>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00a      	beq.n	800822e <HAL_SPI_Init+0x42>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a75      	ldr	r2, [pc, #468]	; (80083f4 <HAL_SPI_Init+0x208>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d005      	beq.n	800822e <HAL_SPI_Init+0x42>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d901      	bls.n	800822e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e0d9      	b.n	80083e2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fdf6 	bl	8008e20 <SPI_GetPacketSize>
 8008234:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a6c      	ldr	r2, [pc, #432]	; (80083ec <HAL_SPI_Init+0x200>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00c      	beq.n	800825a <HAL_SPI_Init+0x6e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6a      	ldr	r2, [pc, #424]	; (80083f0 <HAL_SPI_Init+0x204>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d007      	beq.n	800825a <HAL_SPI_Init+0x6e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a69      	ldr	r2, [pc, #420]	; (80083f4 <HAL_SPI_Init+0x208>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d002      	beq.n	800825a <HAL_SPI_Init+0x6e>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d811      	bhi.n	800827e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800825e:	4a63      	ldr	r2, [pc, #396]	; (80083ec <HAL_SPI_Init+0x200>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a61      	ldr	r2, [pc, #388]	; (80083f0 <HAL_SPI_Init+0x204>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_SPI_Init+0x8c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a60      	ldr	r2, [pc, #384]	; (80083f4 <HAL_SPI_Init+0x208>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d104      	bne.n	8008282 <HAL_SPI_Init+0x96>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b10      	cmp	r3, #16
 800827c:	d901      	bls.n	8008282 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0af      	b.n	80083e2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7f8 fdc0 	bl	8000e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0201 	bic.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80082be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082c8:	d119      	bne.n	80082fe <HAL_SPI_Init+0x112>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d2:	d103      	bne.n	80082dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ec:	d107      	bne.n	80082fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	431a      	orrs	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008310:	ea42 0103 	orr.w	r1, r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835e:	ea42 0103 	orr.w	r1, r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d113      	bne.n	800839e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008388:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800839c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40013000 	.word	0x40013000
 80083f0:	40003800 	.word	0x40003800
 80083f4:	40003c00 	.word	0x40003c00

080083f8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008414:	2302      	movs	r3, #2
 8008416:	e1b4      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008426:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800842e:	7dbb      	ldrb	r3, [r7, #22]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d012      	beq.n	800845a <HAL_SPI_TransmitReceive_DMA+0x62>
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800843a:	d106      	bne.n	800844a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008444:	7dbb      	ldrb	r3, [r7, #22]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d007      	beq.n	800845a <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800844a:	2302      	movs	r3, #2
 800844c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	e193      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x74>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x74>
 8008466:	887b      	ldrh	r3, [r7, #2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d107      	bne.n	800847c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	e182      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b04      	cmp	r3, #4
 8008486:	d003      	beq.n	8008490 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2205      	movs	r2, #5
 800848c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	887a      	ldrh	r2, [r7, #2]
 80084a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	887a      	ldrh	r2, [r7, #2]
 80084aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	887a      	ldrh	r2, [r7, #2]
 80084b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	887a      	ldrh	r2, [r7, #2]
 80084c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084de:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d905      	bls.n	80084f4 <HAL_SPI_TransmitReceive_DMA+0xfc>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084f2:	d10f      	bne.n	8008514 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	d913      	bls.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008506:	d00d      	beq.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800850e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008512:	d007      	beq.n	8008524 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	e12e      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b07      	cmp	r3, #7
 800852a:	d840      	bhi.n	80085ae <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008536:	d109      	bne.n	800854c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800853e:	b29b      	uxth	r3, r3
 8008540:	3301      	adds	r3, #1
 8008542:	105b      	asrs	r3, r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008556:	d109      	bne.n	800856c <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800855e:	b29b      	uxth	r3, r3
 8008560:	3303      	adds	r3, #3
 8008562:	109b      	asrs	r3, r3, #2
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008576:	d109      	bne.n	800858c <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800857e:	b29b      	uxth	r3, r3
 8008580:	3301      	adds	r3, #1
 8008582:	105b      	asrs	r3, r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008596:	d12e      	bne.n	80085f6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3303      	adds	r3, #3
 80085a2:	109b      	asrs	r3, r3, #2
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80085ac:	e023      	b.n	80085f6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d81f      	bhi.n	80085f6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c0:	d109      	bne.n	80085d6 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3301      	adds	r3, #1
 80085cc:	105b      	asrs	r3, r3, #1
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e0:	d109      	bne.n	80085f6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3301      	adds	r3, #1
 80085ec:	105b      	asrs	r3, r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d108      	bne.n	8008614 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008606:	4a61      	ldr	r2, [pc, #388]	; (800878c <HAL_SPI_TransmitReceive_DMA+0x394>)
 8008608:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800860e:	4a60      	ldr	r2, [pc, #384]	; (8008790 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8008610:	63da      	str	r2, [r3, #60]	; 0x3c
 8008612:	e007      	b.n	8008624 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008618:	4a5e      	ldr	r2, [pc, #376]	; (8008794 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800861a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008620:	4a5d      	ldr	r2, [pc, #372]	; (8008798 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8008622:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008628:	4a5c      	ldr	r2, [pc, #368]	; (800879c <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800862a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008630:	2200      	movs	r2, #0
 8008632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	4619      	mov	r1, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008644:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800864c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800864e:	f7f9 fd85 	bl	800215c <HAL_DMA_Start_IT>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d013      	beq.n	8008680 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800865e:	f043 0210 	orr.w	r2, r3, #16
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	e080      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800868e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008694:	2200      	movs	r2, #0
 8008696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869c:	2200      	movs	r2, #0
 800869e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a4:	2200      	movs	r2, #0
 80086a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ac:	2200      	movs	r2, #0
 80086ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b8:	4619      	mov	r1, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3320      	adds	r3, #32
 80086c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80086ca:	f7f9 fd47 	bl	800215c <HAL_DMA_Start_IT>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d013      	beq.n	80086fc <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086da:	f043 0210 	orr.w	r2, r3, #16
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	e042      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008706:	d108      	bne.n	800871a <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6859      	ldr	r1, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8008714:	400b      	ands	r3, r1
 8008716:	6053      	str	r3, [r2, #4]
 8008718:	e009      	b.n	800872e <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4b1f      	ldr	r3, [pc, #124]	; (80087a0 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8008722:	4013      	ands	r3, r2
 8008724:	8879      	ldrh	r1, [r7, #2]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	430b      	orrs	r3, r1
 800872c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800873c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691a      	ldr	r2, [r3, #16]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800874c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0201 	orr.w	r2, r2, #1
 800875c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008766:	d107      	bne.n	8008778 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008776:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	08008c2d 	.word	0x08008c2d
 8008790:	08008ba1 	.word	0x08008ba1
 8008794:	08008c49 	.word	0x08008c49
 8008798:	08008be7 	.word	0x08008be7
 800879c:	08008c65 	.word	0x08008c65
 80087a0:	ffff0000 	.word	0xffff0000

080087a4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4013      	ands	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087d6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3330      	adds	r3, #48	; 0x30
 80087de:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d113      	bne.n	8008812 <HAL_SPI_IRQHandler+0x6e>
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10e      	bne.n	8008812 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
    handled = 1UL;
 800880e:	2301      	movs	r3, #1
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10f      	bne.n	800883c <HAL_SPI_IRQHandler+0x98>
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
    handled = 1UL;
 8008838:	2301      	movs	r3, #1
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10f      	bne.n	8008866 <HAL_SPI_IRQHandler+0xc2>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
    handled = 1UL;
 8008862:	2301      	movs	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 815a 	bne.w	8008b22 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 808b 	beq.w	8008990 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0208 	orr.w	r2, r2, #8
 8008888:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699a      	ldr	r2, [r3, #24]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0210 	orr.w	r2, r2, #16
 8008898:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0208 	bic.w	r2, r2, #8
 80088b8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d13d      	bne.n	8008944 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80088c8:	e036      	b.n	8008938 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d90b      	bls.n	80088ea <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088dc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	665a      	str	r2, [r3, #100]	; 0x64
 80088e8:	e01d      	b.n	8008926 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	d90b      	bls.n	800890a <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	8812      	ldrh	r2, [r2, #0]
 80088fa:	b292      	uxth	r2, r2
 80088fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008902:	1c9a      	adds	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	665a      	str	r2, [r3, #100]	; 0x64
 8008908:	e00d      	b.n	8008926 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008916:	7812      	ldrb	r2, [r2, #0]
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b01      	subs	r3, #1
 8008930:	b29a      	uxth	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1c2      	bne.n	80088ca <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f9cb 	bl	8008ce0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f915 	bl	8008b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008962:	e0e3      	b.n	8008b2c <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008964:	7cfb      	ldrb	r3, [r7, #19]
 8008966:	2b05      	cmp	r3, #5
 8008968:	d103      	bne.n	8008972 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f8 fc58 	bl	8001220 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008970:	e0d9      	b.n	8008b26 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008972:	7cfb      	ldrb	r3, [r7, #19]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d103      	bne.n	8008980 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8e9 	bl	8008b50 <HAL_SPI_RxCpltCallback>
    return;
 800897e:	e0d2      	b.n	8008b26 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008980:	7cfb      	ldrb	r3, [r7, #19]
 8008982:	2b03      	cmp	r3, #3
 8008984:	f040 80cf 	bne.w	8008b26 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8d7 	bl	8008b3c <HAL_SPI_TxCpltCallback>
    return;
 800898e:	e0ca      	b.n	8008b26 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00d      	beq.n	80089b6 <HAL_SPI_IRQHandler+0x212>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f003 0308 	and.w	r3, r3, #8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b2:	619a      	str	r2, [r3, #24]

    return;
 80089b4:	e0ba      	b.n	8008b2c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80b5 	beq.w	8008b2c <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00f      	beq.n	80089ec <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d2:	f043 0204 	orr.w	r2, r3, #4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00f      	beq.n	8008a16 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089fc:	f043 0201 	orr.w	r2, r3, #1
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	699a      	ldr	r2, [r3, #24]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00f      	beq.n	8008a40 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a26:	f043 0208 	orr.w	r2, r3, #8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a3e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00f      	beq.n	8008a6a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699a      	ldr	r2, [r3, #24]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0220 	orr.w	r2, r2, #32
 8008a68:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d05a      	beq.n	8008b2a <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6919      	ldr	r1, [r3, #16]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <HAL_SPI_IRQHandler+0x390>)
 8008a90:	400b      	ands	r3, r1
 8008a92:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a9e:	d138      	bne.n	8008b12 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008aae:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d013      	beq.n	8008ae0 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008abc:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <HAL_SPI_IRQHandler+0x394>)
 8008abe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f9 fdb3 	bl	8002630 <HAL_DMA_Abort_IT>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d007      	beq.n	8008ae0 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d020      	beq.n	8008b2a <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aec:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <HAL_SPI_IRQHandler+0x394>)
 8008aee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f9 fd9b 	bl	8002630 <HAL_DMA_Abort_IT>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d014      	beq.n	8008b2a <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008b10:	e00b      	b.n	8008b2a <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f836 	bl	8008b8c <HAL_SPI_ErrorCallback>
    return;
 8008b20:	e003      	b.n	8008b2a <HAL_SPI_IRQHandler+0x386>
    return;
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <HAL_SPI_IRQHandler+0x388>
    return;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_SPI_IRQHandler+0x388>
    return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	3728      	adds	r7, #40	; 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	fffffc94 	.word	0xfffffc94
 8008b38:	08008cab 	.word	0x08008cab

08008b3c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	d011      	beq.n	8008bde <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc4:	d103      	bne.n	8008bce <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ffc2 	bl	8008b50 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008bcc:	e007      	b.n	8008bde <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0208 	orr.w	r2, r2, #8
 8008bdc:	611a      	str	r2, [r3, #16]
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b07      	cmp	r3, #7
 8008bfe:	d011      	beq.n	8008c24 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c0a:	d103      	bne.n	8008c14 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7f8 fb07 	bl	8001220 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008c12:	e007      	b.n	8008c24 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0208 	orr.w	r2, r2, #8
 8008c22:	611a      	str	r2, [r3, #16]
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff ff92 	bl	8008b64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff ff8e 	bl	8008b78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c5c:	bf00      	nop
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7fa fe4c 	bl	8003910 <HAL_DMA_GetError>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d011      	beq.n	8008ca2 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f82e 	bl	8008ce0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8a:	f043 0210 	orr.w	r2, r3, #16
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff ff75 	bl	8008b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff ff5b 	bl	8008b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	699a      	ldr	r2, [r3, #24]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0208 	orr.w	r2, r2, #8
 8008cfe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699a      	ldr	r2, [r3, #24]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0210 	orr.w	r2, r2, #16
 8008d0e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6919      	ldr	r1, [r3, #16]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b3c      	ldr	r3, [pc, #240]	; (8008e1c <SPI_CloseTransfer+0x13c>)
 8008d2c:	400b      	ands	r3, r1
 8008d2e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008d3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d014      	beq.n	8008d76 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00f      	beq.n	8008d76 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0220 	orr.w	r2, r2, #32
 8008d74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d014      	beq.n	8008dac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00f      	beq.n	8008dac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d92:	f043 0204 	orr.w	r2, r3, #4
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008daa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dbc:	f043 0201 	orr.w	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00f      	beq.n	8008e00 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de6:	f043 0208 	orr.w	r2, r3, #8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dfe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	fffffc90 	.word	0xfffffc90

08008e20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	08db      	lsrs	r3, r3, #3
 8008e40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e03e      	b.n	8008eec <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7f7 fd02 	bl	800088c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f001 fb7a 	bl	800a58c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	f001 fc02 	bl	800a6ac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6858      	ldr	r0, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	f001 fc49 	bl	800a74c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	6892      	ldr	r2, [r2, #8]
 8008ec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	6892      	ldr	r2, [r2, #8]
 8008ece:	f041 0101 	orr.w	r1, r1, #1
 8008ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <HAL_SRAM_Init+0x9c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a06      	ldr	r2, [pc, #24]	; (8008ef4 <HAL_SRAM_Init+0x9c>)
 8008edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ee0:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	52004000 	.word	0x52004000

08008ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e049      	b.n	8008f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f841 	bl	8008fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f000 fa00 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d001      	beq.n	8008fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e054      	b.n	800907e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a26      	ldr	r2, [pc, #152]	; (800908c <HAL_TIM_Base_Start_IT+0xd0>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d022      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffe:	d01d      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a22      	ldr	r2, [pc, #136]	; (8009090 <HAL_TIM_Base_Start_IT+0xd4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d018      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a21      	ldr	r2, [pc, #132]	; (8009094 <HAL_TIM_Base_Start_IT+0xd8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d013      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a1f      	ldr	r2, [pc, #124]	; (8009098 <HAL_TIM_Base_Start_IT+0xdc>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00e      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1e      	ldr	r2, [pc, #120]	; (800909c <HAL_TIM_Base_Start_IT+0xe0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d009      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d004      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x80>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1b      	ldr	r2, [pc, #108]	; (80090a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d115      	bne.n	8009068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <HAL_TIM_Base_Start_IT+0xec>)
 8009044:	4013      	ands	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b06      	cmp	r3, #6
 800904c:	d015      	beq.n	800907a <HAL_TIM_Base_Start_IT+0xbe>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009054:	d011      	beq.n	800907a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0201 	orr.w	r2, r2, #1
 8009064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009066:	e008      	b.n	800907a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0201 	orr.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e000      	b.n	800907c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40010000 	.word	0x40010000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40010400 	.word	0x40010400
 80090a0:	40001800 	.word	0x40001800
 80090a4:	40014000 	.word	0x40014000
 80090a8:	00010007 	.word	0x00010007

080090ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0202 	mvn.w	r2, #2
 80090d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f905 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8f7 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f908 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b04      	cmp	r3, #4
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0204 	mvn.w	r2, #4
 800912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8db 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f8cd 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8de 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b08      	cmp	r3, #8
 8009168:	d122      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d11b      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0208 	mvn.w	r2, #8
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2204      	movs	r2, #4
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8b1 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8a3 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8b4 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b10      	cmp	r3, #16
 80091bc:	d122      	bne.n	8009204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b10      	cmp	r3, #16
 80091ca:	d11b      	bne.n	8009204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0210 	mvn.w	r2, #16
 80091d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2208      	movs	r2, #8
 80091da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f887 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f879 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f88a 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b01      	cmp	r3, #1
 8009210:	d10e      	bne.n	8009230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	d107      	bne.n	8009230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0201 	mvn.w	r2, #1
 8009228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7f7 fd33 	bl	8000c96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d10e      	bne.n	800925c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d107      	bne.n	800925c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f914 	bl	8009484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926a:	d10e      	bne.n	800928a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009276:	2b80      	cmp	r3, #128	; 0x80
 8009278:	d107      	bne.n	800928a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f907 	bl	8009498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d10e      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d107      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f838 	bl	8009326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d10e      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d107      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f06f 0220 	mvn.w	r2, #32
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8c7 	bl	8009470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a40      	ldr	r2, [pc, #256]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d013      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d00f      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3d      	ldr	r2, [pc, #244]	; (8009454 <TIM_Base_SetConfig+0x118>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00b      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a3c      	ldr	r2, [pc, #240]	; (8009458 <TIM_Base_SetConfig+0x11c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d007      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a3b      	ldr	r2, [pc, #236]	; (800945c <TIM_Base_SetConfig+0x120>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a3a      	ldr	r2, [pc, #232]	; (8009460 <TIM_Base_SetConfig+0x124>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d108      	bne.n	800938e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2f      	ldr	r2, [pc, #188]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d01f      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939c:	d01b      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <TIM_Base_SetConfig+0x118>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d017      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2b      	ldr	r2, [pc, #172]	; (8009458 <TIM_Base_SetConfig+0x11c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a2a      	ldr	r2, [pc, #168]	; (800945c <TIM_Base_SetConfig+0x120>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a29      	ldr	r2, [pc, #164]	; (8009460 <TIM_Base_SetConfig+0x124>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a28      	ldr	r2, [pc, #160]	; (8009464 <TIM_Base_SetConfig+0x128>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a27      	ldr	r2, [pc, #156]	; (8009468 <TIM_Base_SetConfig+0x12c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a26      	ldr	r2, [pc, #152]	; (800946c <TIM_Base_SetConfig+0x130>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d108      	bne.n	80093e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a10      	ldr	r2, [pc, #64]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00f      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a12      	ldr	r2, [pc, #72]	; (8009460 <TIM_Base_SetConfig+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00b      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a11      	ldr	r2, [pc, #68]	; (8009464 <TIM_Base_SetConfig+0x128>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a10      	ldr	r2, [pc, #64]	; (8009468 <TIM_Base_SetConfig+0x12c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a0f      	ldr	r2, [pc, #60]	; (800946c <TIM_Base_SetConfig+0x130>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d103      	bne.n	800943c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	615a      	str	r2, [r3, #20]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40010000 	.word	0x40010000
 8009454:	40000400 	.word	0x40000400
 8009458:	40000800 	.word	0x40000800
 800945c:	40000c00 	.word	0x40000c00
 8009460:	40010400 	.word	0x40010400
 8009464:	40014000 	.word	0x40014000
 8009468:	40014400 	.word	0x40014400
 800946c:	40014800 	.word	0x40014800

08009470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e042      	b.n	8009544 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d106      	bne.n	80094d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7f7 ff87 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2224      	movs	r2, #36	; 0x24
 80094da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f82c 	bl	800954c <UART_SetConfig>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d101      	bne.n	80094fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e022      	b.n	8009544 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fd88 	bl	800a01c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800951a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800952a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fe0f 	bl	800a160 <UART_CheckIdleState>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800954c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009550:	b092      	sub	sp, #72	; 0x48
 8009552:	af00      	add	r7, sp, #0
 8009554:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	431a      	orrs	r2, r3
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	4313      	orrs	r3, r2
 8009572:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4bbe      	ldr	r3, [pc, #760]	; (8009874 <UART_SetConfig+0x328>)
 800957c:	4013      	ands	r3, r2
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	6812      	ldr	r2, [r2, #0]
 8009582:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009584:	430b      	orrs	r3, r1
 8009586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4ab3      	ldr	r2, [pc, #716]	; (8009878 <UART_SetConfig+0x32c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d004      	beq.n	80095b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b4:	4313      	orrs	r3, r2
 80095b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	4baf      	ldr	r3, [pc, #700]	; (800987c <UART_SetConfig+0x330>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	f023 010f 	bic.w	r1, r3, #15
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4aa6      	ldr	r2, [pc, #664]	; (8009880 <UART_SetConfig+0x334>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d177      	bne.n	80096dc <UART_SetConfig+0x190>
 80095ec:	4ba5      	ldr	r3, [pc, #660]	; (8009884 <UART_SetConfig+0x338>)
 80095ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f4:	2b28      	cmp	r3, #40	; 0x28
 80095f6:	d86d      	bhi.n	80096d4 <UART_SetConfig+0x188>
 80095f8:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <UART_SetConfig+0xb4>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	080096a5 	.word	0x080096a5
 8009604:	080096d5 	.word	0x080096d5
 8009608:	080096d5 	.word	0x080096d5
 800960c:	080096d5 	.word	0x080096d5
 8009610:	080096d5 	.word	0x080096d5
 8009614:	080096d5 	.word	0x080096d5
 8009618:	080096d5 	.word	0x080096d5
 800961c:	080096d5 	.word	0x080096d5
 8009620:	080096ad 	.word	0x080096ad
 8009624:	080096d5 	.word	0x080096d5
 8009628:	080096d5 	.word	0x080096d5
 800962c:	080096d5 	.word	0x080096d5
 8009630:	080096d5 	.word	0x080096d5
 8009634:	080096d5 	.word	0x080096d5
 8009638:	080096d5 	.word	0x080096d5
 800963c:	080096d5 	.word	0x080096d5
 8009640:	080096b5 	.word	0x080096b5
 8009644:	080096d5 	.word	0x080096d5
 8009648:	080096d5 	.word	0x080096d5
 800964c:	080096d5 	.word	0x080096d5
 8009650:	080096d5 	.word	0x080096d5
 8009654:	080096d5 	.word	0x080096d5
 8009658:	080096d5 	.word	0x080096d5
 800965c:	080096d5 	.word	0x080096d5
 8009660:	080096bd 	.word	0x080096bd
 8009664:	080096d5 	.word	0x080096d5
 8009668:	080096d5 	.word	0x080096d5
 800966c:	080096d5 	.word	0x080096d5
 8009670:	080096d5 	.word	0x080096d5
 8009674:	080096d5 	.word	0x080096d5
 8009678:	080096d5 	.word	0x080096d5
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096c5 	.word	0x080096c5
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096d5 	.word	0x080096d5
 800968c:	080096d5 	.word	0x080096d5
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096d5 	.word	0x080096d5
 8009698:	080096d5 	.word	0x080096d5
 800969c:	080096d5 	.word	0x080096d5
 80096a0:	080096cd 	.word	0x080096cd
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e222      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096ac:	2304      	movs	r3, #4
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e21e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ba:	e21a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096bc:	2310      	movs	r3, #16
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c2:	e216      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096c4:	2320      	movs	r3, #32
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ca:	e212      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e20e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096d4:	2380      	movs	r3, #128	; 0x80
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096da:	e20a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a69      	ldr	r2, [pc, #420]	; (8009888 <UART_SetConfig+0x33c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d130      	bne.n	8009748 <UART_SetConfig+0x1fc>
 80096e6:	4b67      	ldr	r3, [pc, #412]	; (8009884 <UART_SetConfig+0x338>)
 80096e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d826      	bhi.n	8009740 <UART_SetConfig+0x1f4>
 80096f2:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <UART_SetConfig+0x1ac>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	08009711 	.word	0x08009711
 80096fc:	08009719 	.word	0x08009719
 8009700:	08009721 	.word	0x08009721
 8009704:	08009729 	.word	0x08009729
 8009708:	08009731 	.word	0x08009731
 800970c:	08009739 	.word	0x08009739
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009716:	e1ec      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009718:	2304      	movs	r3, #4
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971e:	e1e8      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009720:	2308      	movs	r3, #8
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009726:	e1e4      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009728:	2310      	movs	r3, #16
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972e:	e1e0      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009730:	2320      	movs	r3, #32
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e1dc      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009738:	2340      	movs	r3, #64	; 0x40
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e1d8      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009746:	e1d4      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a4f      	ldr	r2, [pc, #316]	; (800988c <UART_SetConfig+0x340>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d130      	bne.n	80097b4 <UART_SetConfig+0x268>
 8009752:	4b4c      	ldr	r3, [pc, #304]	; (8009884 <UART_SetConfig+0x338>)
 8009754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b05      	cmp	r3, #5
 800975c:	d826      	bhi.n	80097ac <UART_SetConfig+0x260>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <UART_SetConfig+0x218>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	0800977d 	.word	0x0800977d
 8009768:	08009785 	.word	0x08009785
 800976c:	0800978d 	.word	0x0800978d
 8009770:	08009795 	.word	0x08009795
 8009774:	0800979d 	.word	0x0800979d
 8009778:	080097a5 	.word	0x080097a5
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009782:	e1b6      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009784:	2304      	movs	r3, #4
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978a:	e1b2      	b.n	8009af2 <UART_SetConfig+0x5a6>
 800978c:	2308      	movs	r3, #8
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009792:	e1ae      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009794:	2310      	movs	r3, #16
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979a:	e1aa      	b.n	8009af2 <UART_SetConfig+0x5a6>
 800979c:	2320      	movs	r3, #32
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e1a6      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e1a2      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b2:	e19e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a35      	ldr	r2, [pc, #212]	; (8009890 <UART_SetConfig+0x344>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d130      	bne.n	8009820 <UART_SetConfig+0x2d4>
 80097be:	4b31      	ldr	r3, [pc, #196]	; (8009884 <UART_SetConfig+0x338>)
 80097c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	d826      	bhi.n	8009818 <UART_SetConfig+0x2cc>
 80097ca:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <UART_SetConfig+0x284>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097f1 	.word	0x080097f1
 80097d8:	080097f9 	.word	0x080097f9
 80097dc:	08009801 	.word	0x08009801
 80097e0:	08009809 	.word	0x08009809
 80097e4:	08009811 	.word	0x08009811
 80097e8:	2300      	movs	r3, #0
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ee:	e180      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e17c      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e178      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009806:	e174      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009808:	2320      	movs	r3, #32
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e170      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e16c      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009818:	2380      	movs	r3, #128	; 0x80
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e168      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a1b      	ldr	r2, [pc, #108]	; (8009894 <UART_SetConfig+0x348>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d142      	bne.n	80098b0 <UART_SetConfig+0x364>
 800982a:	4b16      	ldr	r3, [pc, #88]	; (8009884 <UART_SetConfig+0x338>)
 800982c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	2b05      	cmp	r3, #5
 8009834:	d838      	bhi.n	80098a8 <UART_SetConfig+0x35c>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <UART_SetConfig+0x2f0>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009855 	.word	0x08009855
 8009840:	0800985d 	.word	0x0800985d
 8009844:	08009865 	.word	0x08009865
 8009848:	0800986d 	.word	0x0800986d
 800984c:	08009899 	.word	0x08009899
 8009850:	080098a1 	.word	0x080098a1
 8009854:	2300      	movs	r3, #0
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985a:	e14a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 800985c:	2304      	movs	r3, #4
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009862:	e146      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009864:	2308      	movs	r3, #8
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986a:	e142      	b.n	8009af2 <UART_SetConfig+0x5a6>
 800986c:	2310      	movs	r3, #16
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009872:	e13e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009874:	cfff69f3 	.word	0xcfff69f3
 8009878:	58000c00 	.word	0x58000c00
 800987c:	11fff4ff 	.word	0x11fff4ff
 8009880:	40011000 	.word	0x40011000
 8009884:	58024400 	.word	0x58024400
 8009888:	40004400 	.word	0x40004400
 800988c:	40004800 	.word	0x40004800
 8009890:	40004c00 	.word	0x40004c00
 8009894:	40005000 	.word	0x40005000
 8009898:	2320      	movs	r3, #32
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e128      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80098a0:	2340      	movs	r3, #64	; 0x40
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e124      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80098a8:	2380      	movs	r3, #128	; 0x80
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e120      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4acb      	ldr	r2, [pc, #812]	; (8009be4 <UART_SetConfig+0x698>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d176      	bne.n	80099a8 <UART_SetConfig+0x45c>
 80098ba:	4bcb      	ldr	r3, [pc, #812]	; (8009be8 <UART_SetConfig+0x69c>)
 80098bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c2:	2b28      	cmp	r3, #40	; 0x28
 80098c4:	d86c      	bhi.n	80099a0 <UART_SetConfig+0x454>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <UART_SetConfig+0x380>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	08009971 	.word	0x08009971
 80098d0:	080099a1 	.word	0x080099a1
 80098d4:	080099a1 	.word	0x080099a1
 80098d8:	080099a1 	.word	0x080099a1
 80098dc:	080099a1 	.word	0x080099a1
 80098e0:	080099a1 	.word	0x080099a1
 80098e4:	080099a1 	.word	0x080099a1
 80098e8:	080099a1 	.word	0x080099a1
 80098ec:	08009979 	.word	0x08009979
 80098f0:	080099a1 	.word	0x080099a1
 80098f4:	080099a1 	.word	0x080099a1
 80098f8:	080099a1 	.word	0x080099a1
 80098fc:	080099a1 	.word	0x080099a1
 8009900:	080099a1 	.word	0x080099a1
 8009904:	080099a1 	.word	0x080099a1
 8009908:	080099a1 	.word	0x080099a1
 800990c:	08009981 	.word	0x08009981
 8009910:	080099a1 	.word	0x080099a1
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099a1 	.word	0x080099a1
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	08009989 	.word	0x08009989
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	080099a1 	.word	0x080099a1
 8009948:	080099a1 	.word	0x080099a1
 800994c:	08009991 	.word	0x08009991
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099a1 	.word	0x080099a1
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	08009999 	.word	0x08009999
 8009970:	2301      	movs	r3, #1
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e0bc      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e0b8      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e0b4      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e0b0      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e0ac      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e0a8      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e0a4      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a8f      	ldr	r2, [pc, #572]	; (8009bec <UART_SetConfig+0x6a0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d130      	bne.n	8009a14 <UART_SetConfig+0x4c8>
 80099b2:	4b8d      	ldr	r3, [pc, #564]	; (8009be8 <UART_SetConfig+0x69c>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d826      	bhi.n	8009a0c <UART_SetConfig+0x4c0>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x478>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e086      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e082      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e07e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e07a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 80099fc:	2320      	movs	r3, #32
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e076      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e072      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e06e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a75      	ldr	r2, [pc, #468]	; (8009bf0 <UART_SetConfig+0x6a4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d130      	bne.n	8009a80 <UART_SetConfig+0x534>
 8009a1e:	4b72      	ldr	r3, [pc, #456]	; (8009be8 <UART_SetConfig+0x69c>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d826      	bhi.n	8009a78 <UART_SetConfig+0x52c>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0x4e4>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a69 	.word	0x08009a69
 8009a44:	08009a71 	.word	0x08009a71
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e050      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e04c      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e048      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e044      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e040      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e03c      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e038      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a5b      	ldr	r2, [pc, #364]	; (8009bf4 <UART_SetConfig+0x6a8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d130      	bne.n	8009aec <UART_SetConfig+0x5a0>
 8009a8a:	4b57      	ldr	r3, [pc, #348]	; (8009be8 <UART_SetConfig+0x69c>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d826      	bhi.n	8009ae4 <UART_SetConfig+0x598>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <UART_SetConfig+0x550>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009ac5 	.word	0x08009ac5
 8009aa8:	08009acd 	.word	0x08009acd
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009add 	.word	0x08009add
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e01a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009abc:	2304      	movs	r3, #4
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e016      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e012      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009acc:	2310      	movs	r3, #16
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e00e      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e00a      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009adc:	2340      	movs	r3, #64	; 0x40
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e006      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009ae4:	2380      	movs	r3, #128	; 0x80
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e002      	b.n	8009af2 <UART_SetConfig+0x5a6>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <UART_SetConfig+0x6a8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	f040 80f8 	bne.w	8009cee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009afe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	dc46      	bgt.n	8009b94 <UART_SetConfig+0x648>
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	f2c0 8082 	blt.w	8009c10 <UART_SetConfig+0x6c4>
 8009b0c:	3b02      	subs	r3, #2
 8009b0e:	2b1e      	cmp	r3, #30
 8009b10:	d87e      	bhi.n	8009c10 <UART_SetConfig+0x6c4>
 8009b12:	a201      	add	r2, pc, #4	; (adr r2, 8009b18 <UART_SetConfig+0x5cc>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b9b 	.word	0x08009b9b
 8009b1c:	08009c11 	.word	0x08009c11
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009c11 	.word	0x08009c11
 8009b28:	08009c11 	.word	0x08009c11
 8009b2c:	08009c11 	.word	0x08009c11
 8009b30:	08009bb3 	.word	0x08009bb3
 8009b34:	08009c11 	.word	0x08009c11
 8009b38:	08009c11 	.word	0x08009c11
 8009b3c:	08009c11 	.word	0x08009c11
 8009b40:	08009c11 	.word	0x08009c11
 8009b44:	08009c11 	.word	0x08009c11
 8009b48:	08009c11 	.word	0x08009c11
 8009b4c:	08009c11 	.word	0x08009c11
 8009b50:	08009bc3 	.word	0x08009bc3
 8009b54:	08009c11 	.word	0x08009c11
 8009b58:	08009c11 	.word	0x08009c11
 8009b5c:	08009c11 	.word	0x08009c11
 8009b60:	08009c11 	.word	0x08009c11
 8009b64:	08009c11 	.word	0x08009c11
 8009b68:	08009c11 	.word	0x08009c11
 8009b6c:	08009c11 	.word	0x08009c11
 8009b70:	08009c11 	.word	0x08009c11
 8009b74:	08009c11 	.word	0x08009c11
 8009b78:	08009c11 	.word	0x08009c11
 8009b7c:	08009c11 	.word	0x08009c11
 8009b80:	08009c11 	.word	0x08009c11
 8009b84:	08009c11 	.word	0x08009c11
 8009b88:	08009c11 	.word	0x08009c11
 8009b8c:	08009c11 	.word	0x08009c11
 8009b90:	08009c03 	.word	0x08009c03
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d037      	beq.n	8009c08 <UART_SetConfig+0x6bc>
 8009b98:	e03a      	b.n	8009c10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9a:	f7fd ff05 	bl	80079a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ba0:	e03c      	b.n	8009c1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fd ff14 	bl	80079d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb0:	e034      	b.n	8009c1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe f860 	bl	8007c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc0:	e02c      	b.n	8009c1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc2:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <UART_SetConfig+0x69c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0320 	and.w	r3, r3, #32
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d016      	beq.n	8009bfc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bce:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <UART_SetConfig+0x69c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <UART_SetConfig+0x6ac>)
 8009bda:	fa22 f303 	lsr.w	r3, r2, r3
 8009bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be0:	e01c      	b.n	8009c1c <UART_SetConfig+0x6d0>
 8009be2:	bf00      	nop
 8009be4:	40011400 	.word	0x40011400
 8009be8:	58024400 	.word	0x58024400
 8009bec:	40007800 	.word	0x40007800
 8009bf0:	40007c00 	.word	0x40007c00
 8009bf4:	58000c00 	.word	0x58000c00
 8009bf8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009bfc:	4b9d      	ldr	r3, [pc, #628]	; (8009e74 <UART_SetConfig+0x928>)
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c00:	e00c      	b.n	8009c1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c02:	4b9d      	ldr	r3, [pc, #628]	; (8009e78 <UART_SetConfig+0x92c>)
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c06:	e009      	b.n	8009c1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0e:	e005      	b.n	8009c1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 81de 	beq.w	8009fe0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	4a94      	ldr	r2, [pc, #592]	; (8009e7c <UART_SetConfig+0x930>)
 8009c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	4413      	add	r3, r2
 8009c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d305      	bcc.n	8009c54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c5a:	e1c1      	b.n	8009fe0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5e:	2200      	movs	r2, #0
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	60fa      	str	r2, [r7, #12]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	4a84      	ldr	r2, [pc, #528]	; (8009e7c <UART_SetConfig+0x930>)
 8009c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2200      	movs	r2, #0
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c7e:	f7f6 fb2b 	bl	80002d8 <__aeabi_uldivmod>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	020b      	lsls	r3, r1, #8
 8009c94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c98:	0202      	lsls	r2, r0, #8
 8009c9a:	6979      	ldr	r1, [r7, #20]
 8009c9c:	6849      	ldr	r1, [r1, #4]
 8009c9e:	0849      	lsrs	r1, r1, #1
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	eb12 0804 	adds.w	r8, r2, r4
 8009caa:	eb43 0905 	adc.w	r9, r3, r5
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	469a      	mov	sl, r3
 8009cb6:	4693      	mov	fp, r2
 8009cb8:	4652      	mov	r2, sl
 8009cba:	465b      	mov	r3, fp
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 fb0a 	bl	80002d8 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4613      	mov	r3, r2
 8009cca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd2:	d308      	bcc.n	8009ce6 <UART_SetConfig+0x79a>
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cda:	d204      	bcs.n	8009ce6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce2:	60da      	str	r2, [r3, #12]
 8009ce4:	e17c      	b.n	8009fe0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cec:	e178      	b.n	8009fe0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf6:	f040 80c5 	bne.w	8009e84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009cfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	dc48      	bgt.n	8009d94 <UART_SetConfig+0x848>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	db7b      	blt.n	8009dfe <UART_SetConfig+0x8b2>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d879      	bhi.n	8009dfe <UART_SetConfig+0x8b2>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x7c4>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009da3 	.word	0x08009da3
 8009d18:	08009dff 	.word	0x08009dff
 8009d1c:	08009dff 	.word	0x08009dff
 8009d20:	08009dab 	.word	0x08009dab
 8009d24:	08009dff 	.word	0x08009dff
 8009d28:	08009dff 	.word	0x08009dff
 8009d2c:	08009dff 	.word	0x08009dff
 8009d30:	08009dbb 	.word	0x08009dbb
 8009d34:	08009dff 	.word	0x08009dff
 8009d38:	08009dff 	.word	0x08009dff
 8009d3c:	08009dff 	.word	0x08009dff
 8009d40:	08009dff 	.word	0x08009dff
 8009d44:	08009dff 	.word	0x08009dff
 8009d48:	08009dff 	.word	0x08009dff
 8009d4c:	08009dff 	.word	0x08009dff
 8009d50:	08009dcb 	.word	0x08009dcb
 8009d54:	08009dff 	.word	0x08009dff
 8009d58:	08009dff 	.word	0x08009dff
 8009d5c:	08009dff 	.word	0x08009dff
 8009d60:	08009dff 	.word	0x08009dff
 8009d64:	08009dff 	.word	0x08009dff
 8009d68:	08009dff 	.word	0x08009dff
 8009d6c:	08009dff 	.word	0x08009dff
 8009d70:	08009dff 	.word	0x08009dff
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009dff 	.word	0x08009dff
 8009d7c:	08009dff 	.word	0x08009dff
 8009d80:	08009dff 	.word	0x08009dff
 8009d84:	08009dff 	.word	0x08009dff
 8009d88:	08009dff 	.word	0x08009dff
 8009d8c:	08009dff 	.word	0x08009dff
 8009d90:	08009df1 	.word	0x08009df1
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	d02e      	beq.n	8009df6 <UART_SetConfig+0x8aa>
 8009d98:	e031      	b.n	8009dfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9a:	f7fc fe51 	bl	8006a40 <HAL_RCC_GetPCLK1Freq>
 8009d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009da0:	e033      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da2:	f7fc fe63 	bl	8006a6c <HAL_RCC_GetPCLK2Freq>
 8009da6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009da8:	e02f      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fd fe10 	bl	80079d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db8:	e027      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dba:	f107 0318 	add.w	r3, r7, #24
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd ff5c 	bl	8007c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc8:	e01f      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dca:	4b2d      	ldr	r3, [pc, #180]	; (8009e80 <UART_SetConfig+0x934>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d009      	beq.n	8009dea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dd6:	4b2a      	ldr	r3, [pc, #168]	; (8009e80 <UART_SetConfig+0x934>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	08db      	lsrs	r3, r3, #3
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	4a24      	ldr	r2, [pc, #144]	; (8009e74 <UART_SetConfig+0x928>)
 8009de2:	fa22 f303 	lsr.w	r3, r2, r3
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009de8:	e00f      	b.n	8009e0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009dea:	4b22      	ldr	r3, [pc, #136]	; (8009e74 <UART_SetConfig+0x928>)
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dee:	e00c      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df0:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <UART_SetConfig+0x92c>)
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df4:	e009      	b.n	8009e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfc:	e005      	b.n	8009e0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80e7 	beq.w	8009fe0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <UART_SetConfig+0x930>)
 8009e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e24:	005a      	lsls	r2, r3, #1
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	441a      	add	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	2b0f      	cmp	r3, #15
 8009e3c:	d916      	bls.n	8009e6c <UART_SetConfig+0x920>
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e44:	d212      	bcs.n	8009e6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f023 030f 	bic.w	r3, r3, #15
 8009e4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e0b9      	b.n	8009fe0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e72:	e0b5      	b.n	8009fe0 <UART_SetConfig+0xa94>
 8009e74:	03d09000 	.word	0x03d09000
 8009e78:	003d0900 	.word	0x003d0900
 8009e7c:	08010b70 	.word	0x08010b70
 8009e80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	dc49      	bgt.n	8009f20 <UART_SetConfig+0x9d4>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	db7c      	blt.n	8009f8a <UART_SetConfig+0xa3e>
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	d87a      	bhi.n	8009f8a <UART_SetConfig+0xa3e>
 8009e94:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <UART_SetConfig+0x950>)
 8009e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9a:	bf00      	nop
 8009e9c:	08009f27 	.word	0x08009f27
 8009ea0:	08009f2f 	.word	0x08009f2f
 8009ea4:	08009f8b 	.word	0x08009f8b
 8009ea8:	08009f8b 	.word	0x08009f8b
 8009eac:	08009f37 	.word	0x08009f37
 8009eb0:	08009f8b 	.word	0x08009f8b
 8009eb4:	08009f8b 	.word	0x08009f8b
 8009eb8:	08009f8b 	.word	0x08009f8b
 8009ebc:	08009f47 	.word	0x08009f47
 8009ec0:	08009f8b 	.word	0x08009f8b
 8009ec4:	08009f8b 	.word	0x08009f8b
 8009ec8:	08009f8b 	.word	0x08009f8b
 8009ecc:	08009f8b 	.word	0x08009f8b
 8009ed0:	08009f8b 	.word	0x08009f8b
 8009ed4:	08009f8b 	.word	0x08009f8b
 8009ed8:	08009f8b 	.word	0x08009f8b
 8009edc:	08009f57 	.word	0x08009f57
 8009ee0:	08009f8b 	.word	0x08009f8b
 8009ee4:	08009f8b 	.word	0x08009f8b
 8009ee8:	08009f8b 	.word	0x08009f8b
 8009eec:	08009f8b 	.word	0x08009f8b
 8009ef0:	08009f8b 	.word	0x08009f8b
 8009ef4:	08009f8b 	.word	0x08009f8b
 8009ef8:	08009f8b 	.word	0x08009f8b
 8009efc:	08009f8b 	.word	0x08009f8b
 8009f00:	08009f8b 	.word	0x08009f8b
 8009f04:	08009f8b 	.word	0x08009f8b
 8009f08:	08009f8b 	.word	0x08009f8b
 8009f0c:	08009f8b 	.word	0x08009f8b
 8009f10:	08009f8b 	.word	0x08009f8b
 8009f14:	08009f8b 	.word	0x08009f8b
 8009f18:	08009f8b 	.word	0x08009f8b
 8009f1c:	08009f7d 	.word	0x08009f7d
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	d02e      	beq.n	8009f82 <UART_SetConfig+0xa36>
 8009f24:	e031      	b.n	8009f8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f26:	f7fc fd8b 	bl	8006a40 <HAL_RCC_GetPCLK1Freq>
 8009f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f2c:	e033      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f2e:	f7fc fd9d 	bl	8006a6c <HAL_RCC_GetPCLK2Freq>
 8009f32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f34:	e02f      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd fd4a 	bl	80079d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f44:	e027      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f46:	f107 0318 	add.w	r3, r7, #24
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fd fe96 	bl	8007c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f54:	e01f      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f56:	4b2d      	ldr	r3, [pc, #180]	; (800a00c <UART_SetConfig+0xac0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d009      	beq.n	8009f76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f62:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <UART_SetConfig+0xac0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	4a28      	ldr	r2, [pc, #160]	; (800a010 <UART_SetConfig+0xac4>)
 8009f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f74:	e00f      	b.n	8009f96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f76:	4b26      	ldr	r3, [pc, #152]	; (800a010 <UART_SetConfig+0xac4>)
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f7a:	e00c      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f7c:	4b25      	ldr	r3, [pc, #148]	; (800a014 <UART_SetConfig+0xac8>)
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f80:	e009      	b.n	8009f96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f88:	e005      	b.n	8009f96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f94:	bf00      	nop
    }

    if (pclk != 0U)
 8009f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d021      	beq.n	8009fe0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	4a1d      	ldr	r2, [pc, #116]	; (800a018 <UART_SetConfig+0xacc>)
 8009fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	085b      	lsrs	r3, r3, #1
 8009fb4:	441a      	add	r2, r3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	2b0f      	cmp	r3, #15
 8009fc4:	d909      	bls.n	8009fda <UART_SetConfig+0xa8e>
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fcc:	d205      	bcs.n	8009fda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60da      	str	r2, [r3, #12]
 8009fd8:	e002      	b.n	8009fe0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009ffc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a000:	4618      	mov	r0, r3
 800a002:	3748      	adds	r7, #72	; 0x48
 800a004:	46bd      	mov	sp, r7
 800a006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a00a:	bf00      	nop
 800a00c:	58024400 	.word	0x58024400
 800a010:	03d09000 	.word	0x03d09000
 800a014:	003d0900 	.word	0x003d0900
 800a018:	08010b70 	.word	0x08010b70

0800a01c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	f003 0308 	and.w	r3, r3, #8
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01a      	beq.n	800a132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a11a:	d10a      	bne.n	800a132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	605a      	str	r2, [r3, #4]
  }
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a170:	f7f7 fa16 	bl	80015a0 <HAL_GetTick>
 800a174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0308 	and.w	r3, r3, #8
 800a180:	2b08      	cmp	r3, #8
 800a182:	d10e      	bne.n	800a1a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f82f 	bl	800a1f6 <UART_WaitOnFlagUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e025      	b.n	800a1ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d10e      	bne.n	800a1ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f819 	bl	800a1f6 <UART_WaitOnFlagUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e00f      	b.n	800a1ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b09c      	sub	sp, #112	; 0x70
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	603b      	str	r3, [r7, #0]
 800a202:	4613      	mov	r3, r2
 800a204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a206:	e0a9      	b.n	800a35c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	f000 80a5 	beq.w	800a35c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a212:	f7f7 f9c5 	bl	80015a0 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a21e:	429a      	cmp	r2, r3
 800a220:	d302      	bcc.n	800a228 <UART_WaitOnFlagUntilTimeout+0x32>
 800a222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a224:	2b00      	cmp	r3, #0
 800a226:	d140      	bne.n	800a2aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a238:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a23c:	667b      	str	r3, [r7, #100]	; 0x64
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a246:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a248:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a24c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	663b      	str	r3, [r7, #96]	; 0x60
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a27a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a27c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e5      	bne.n	800a25a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e069      	b.n	800a37e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d051      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c6:	d149      	bne.n	800a35c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e6      	bne.n	800a2d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f023 0301 	bic.w	r3, r3, #1
 800a31a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3308      	adds	r3, #8
 800a322:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a324:	623a      	str	r2, [r7, #32]
 800a326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	69f9      	ldr	r1, [r7, #28]
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	61bb      	str	r3, [r7, #24]
   return(result);
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e5      	bne.n	800a304 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e010      	b.n	800a37e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69da      	ldr	r2, [r3, #28]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4013      	ands	r3, r2
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	429a      	cmp	r2, r3
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	461a      	mov	r2, r3
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	429a      	cmp	r2, r3
 800a378:	f43f af46 	beq.w	800a208 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3770      	adds	r7, #112	; 0x70
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a394:	2b01      	cmp	r3, #1
 800a396:	d101      	bne.n	800a39c <HAL_UARTEx_DisableFifoMode+0x16>
 800a398:	2302      	movs	r3, #2
 800a39a:	e027      	b.n	800a3ec <HAL_UARTEx_DisableFifoMode+0x66>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2224      	movs	r2, #36	; 0x24
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0201 	bic.w	r2, r2, #1
 800a3c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d101      	bne.n	800a410 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a40c:	2302      	movs	r3, #2
 800a40e:	e02d      	b.n	800a46c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2224      	movs	r2, #36	; 0x24
 800a41c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f022 0201 	bic.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f84f 	bl	800a4f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a484:	2b01      	cmp	r3, #1
 800a486:	d101      	bne.n	800a48c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a488:	2302      	movs	r3, #2
 800a48a:	e02d      	b.n	800a4e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2224      	movs	r2, #36	; 0x24
 800a498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0201 	bic.w	r2, r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f811 	bl	800a4f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d108      	bne.n	800a512 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a510:	e031      	b.n	800a576 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a512:	2310      	movs	r3, #16
 800a514:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a516:	2310      	movs	r3, #16
 800a518:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	0e5b      	lsrs	r3, r3, #25
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0307 	and.w	r3, r3, #7
 800a528:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	0f5b      	lsrs	r3, r3, #29
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0307 	and.w	r3, r3, #7
 800a538:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	7b3a      	ldrb	r2, [r7, #12]
 800a53e:	4911      	ldr	r1, [pc, #68]	; (800a584 <UARTEx_SetNbDataToProcess+0x94>)
 800a540:	5c8a      	ldrb	r2, [r1, r2]
 800a542:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a546:	7b3a      	ldrb	r2, [r7, #12]
 800a548:	490f      	ldr	r1, [pc, #60]	; (800a588 <UARTEx_SetNbDataToProcess+0x98>)
 800a54a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	7b7a      	ldrb	r2, [r7, #13]
 800a55c:	4909      	ldr	r1, [pc, #36]	; (800a584 <UARTEx_SetNbDataToProcess+0x94>)
 800a55e:	5c8a      	ldrb	r2, [r1, r2]
 800a560:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a564:	7b7a      	ldrb	r2, [r7, #13]
 800a566:	4908      	ldr	r1, [pc, #32]	; (800a588 <UARTEx_SetNbDataToProcess+0x98>)
 800a568:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a56a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	08010b88 	.word	0x08010b88
 800a588:	08010b90 	.word	0x08010b90

0800a58c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	f023 0101 	bic.w	r1, r3, #1
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d102      	bne.n	800a5bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e001      	b.n	800a5c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a5cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a5d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a5d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a5de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a5e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a5ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a5f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a5f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a5fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a602:	4313      	orrs	r3, r2
 800a604:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	4313      	orrs	r3, r2
 800a622:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a624:	4b20      	ldr	r3, [pc, #128]	; (800a6a8 <FMC_NORSRAM_Init+0x11c>)
 800a626:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a62e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a636:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a63e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	43db      	mvns	r3, r3
 800a64e:	ea02 0103 	and.w	r1, r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	4319      	orrs	r1, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a668:	d10c      	bne.n	800a684 <FMC_NORSRAM_Init+0xf8>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d008      	beq.n	800a684 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67e:	431a      	orrs	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	371c      	adds	r7, #28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	0008fb7f 	.word	0x0008fb7f

0800a6ac <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	021b      	lsls	r3, r3, #8
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	041b      	lsls	r3, r3, #16
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	051b      	lsls	r3, r3, #20
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	3b02      	subs	r3, #2
 800a6f2:	061b      	lsls	r3, r3, #24
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	3201      	adds	r2, #1
 800a700:	4319      	orrs	r1, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a714:	d113      	bne.n	800a73e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a71e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	3b01      	subs	r3, #1
 800a726:	051b      	lsls	r3, r3, #20
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	431a      	orrs	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	371c      	adds	r7, #28
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a760:	d11d      	bne.n	800a79e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a76a:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	6811      	ldr	r1, [r2, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	6852      	ldr	r2, [r2, #4]
 800a776:	0112      	lsls	r2, r2, #4
 800a778:	4311      	orrs	r1, r2
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	6892      	ldr	r2, [r2, #8]
 800a77e:	0212      	lsls	r2, r2, #8
 800a780:	4311      	orrs	r1, r2
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	6992      	ldr	r2, [r2, #24]
 800a786:	4311      	orrs	r1, r2
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	68d2      	ldr	r2, [r2, #12]
 800a78c:	0412      	lsls	r2, r2, #16
 800a78e:	430a      	orrs	r2, r1
 800a790:	ea43 0102 	orr.w	r1, r3, r2
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a79c:	e005      	b.n	800a7aa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a7a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	cff00000 	.word	0xcff00000

0800a7bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7bc:	b084      	sub	sp, #16
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	f107 001c 	add.w	r0, r7, #28
 800a7ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d120      	bne.n	800a816 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <USB_CoreInit+0xd4>)
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d105      	bne.n	800a80a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 fc04 	bl	800c018 <USB_CoreReset>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
 800a814:	e01a      	b.n	800a84c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 fbf8 	bl	800c018 <USB_CoreReset>
 800a828:	4603      	mov	r3, r0
 800a82a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
 800a83e:	e005      	b.n	800a84c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d116      	bne.n	800a880 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a856:	b29a      	uxth	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a860:	4b0c      	ldr	r3, [pc, #48]	; (800a894 <USB_CoreInit+0xd8>)
 800a862:	4313      	orrs	r3, r2
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f043 0206 	orr.w	r2, r3, #6
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f043 0220 	orr.w	r2, r3, #32
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a88c:	b004      	add	sp, #16
 800a88e:	4770      	bx	lr
 800a890:	ffbdffbf 	.word	0xffbdffbf
 800a894:	03ee0000 	.word	0x03ee0000

0800a898 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d165      	bne.n	800a978 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	4a41      	ldr	r2, [pc, #260]	; (800a9b4 <USB_SetTurnaroundTime+0x11c>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d906      	bls.n	800a8c2 <USB_SetTurnaroundTime+0x2a>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4a40      	ldr	r2, [pc, #256]	; (800a9b8 <USB_SetTurnaroundTime+0x120>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d202      	bcs.n	800a8c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8bc:	230f      	movs	r3, #15
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	e062      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	4a3c      	ldr	r2, [pc, #240]	; (800a9b8 <USB_SetTurnaroundTime+0x120>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d306      	bcc.n	800a8d8 <USB_SetTurnaroundTime+0x40>
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	4a3b      	ldr	r2, [pc, #236]	; (800a9bc <USB_SetTurnaroundTime+0x124>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d202      	bcs.n	800a8d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a8d2:	230e      	movs	r3, #14
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	e057      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4a38      	ldr	r2, [pc, #224]	; (800a9bc <USB_SetTurnaroundTime+0x124>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d306      	bcc.n	800a8ee <USB_SetTurnaroundTime+0x56>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4a37      	ldr	r2, [pc, #220]	; (800a9c0 <USB_SetTurnaroundTime+0x128>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d202      	bcs.n	800a8ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a8e8:	230d      	movs	r3, #13
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e04c      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4a33      	ldr	r2, [pc, #204]	; (800a9c0 <USB_SetTurnaroundTime+0x128>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d306      	bcc.n	800a904 <USB_SetTurnaroundTime+0x6c>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4a32      	ldr	r2, [pc, #200]	; (800a9c4 <USB_SetTurnaroundTime+0x12c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d802      	bhi.n	800a904 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8fe:	230c      	movs	r3, #12
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e041      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	4a2f      	ldr	r2, [pc, #188]	; (800a9c4 <USB_SetTurnaroundTime+0x12c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d906      	bls.n	800a91a <USB_SetTurnaroundTime+0x82>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4a2e      	ldr	r2, [pc, #184]	; (800a9c8 <USB_SetTurnaroundTime+0x130>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d802      	bhi.n	800a91a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a914:	230b      	movs	r3, #11
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	e036      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4a2a      	ldr	r2, [pc, #168]	; (800a9c8 <USB_SetTurnaroundTime+0x130>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d906      	bls.n	800a930 <USB_SetTurnaroundTime+0x98>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	4a29      	ldr	r2, [pc, #164]	; (800a9cc <USB_SetTurnaroundTime+0x134>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d802      	bhi.n	800a930 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a92a:	230a      	movs	r3, #10
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	e02b      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4a26      	ldr	r2, [pc, #152]	; (800a9cc <USB_SetTurnaroundTime+0x134>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d906      	bls.n	800a946 <USB_SetTurnaroundTime+0xae>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4a25      	ldr	r2, [pc, #148]	; (800a9d0 <USB_SetTurnaroundTime+0x138>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d202      	bcs.n	800a946 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a940:	2309      	movs	r3, #9
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e020      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	4a21      	ldr	r2, [pc, #132]	; (800a9d0 <USB_SetTurnaroundTime+0x138>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d306      	bcc.n	800a95c <USB_SetTurnaroundTime+0xc4>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4a20      	ldr	r2, [pc, #128]	; (800a9d4 <USB_SetTurnaroundTime+0x13c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d802      	bhi.n	800a95c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a956:	2308      	movs	r3, #8
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	e015      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <USB_SetTurnaroundTime+0x13c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d906      	bls.n	800a972 <USB_SetTurnaroundTime+0xda>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4a1c      	ldr	r2, [pc, #112]	; (800a9d8 <USB_SetTurnaroundTime+0x140>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d202      	bcs.n	800a972 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a96c:	2307      	movs	r3, #7
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e00a      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a972:	2306      	movs	r3, #6
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	e007      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a97e:	2309      	movs	r3, #9
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	e001      	b.n	800a988 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a984:	2309      	movs	r3, #9
 800a986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	029b      	lsls	r3, r3, #10
 800a99c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	00d8acbf 	.word	0x00d8acbf
 800a9b8:	00e4e1c0 	.word	0x00e4e1c0
 800a9bc:	00f42400 	.word	0x00f42400
 800a9c0:	01067380 	.word	0x01067380
 800a9c4:	011a499f 	.word	0x011a499f
 800a9c8:	01312cff 	.word	0x01312cff
 800a9cc:	014ca43f 	.word	0x014ca43f
 800a9d0:	016e3600 	.word	0x016e3600
 800a9d4:	01a6ab1f 	.word	0x01a6ab1f
 800a9d8:	01e84800 	.word	0x01e84800

0800a9dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f043 0201 	orr.w	r2, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 0201 	bic.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d115      	bne.n	800aa6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa4e:	2001      	movs	r0, #1
 800aa50:	f7f6 fdb2 	bl	80015b8 <HAL_Delay>
      ms++;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3301      	adds	r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fa4b 	bl	800bef6 <USB_GetMode>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d01e      	beq.n	800aaa4 <USB_SetCurrentMode+0x84>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b31      	cmp	r3, #49	; 0x31
 800aa6a:	d9f0      	bls.n	800aa4e <USB_SetCurrentMode+0x2e>
 800aa6c:	e01a      	b.n	800aaa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d115      	bne.n	800aaa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa80:	2001      	movs	r0, #1
 800aa82:	f7f6 fd99 	bl	80015b8 <HAL_Delay>
      ms++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f001 fa32 	bl	800bef6 <USB_GetMode>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <USB_SetCurrentMode+0x84>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b31      	cmp	r3, #49	; 0x31
 800aa9c:	d9f0      	bls.n	800aa80 <USB_SetCurrentMode+0x60>
 800aa9e:	e001      	b.n	800aaa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e005      	b.n	800aab0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b32      	cmp	r3, #50	; 0x32
 800aaa8:	d101      	bne.n	800aaae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aab8:	b084      	sub	sp, #16
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	e009      	b.n	800aaec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	3340      	adds	r3, #64	; 0x40
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3301      	adds	r3, #1
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2b0e      	cmp	r3, #14
 800aaf0:	d9f2      	bls.n	800aad8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aaf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11c      	bne.n	800ab32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab06:	f043 0302 	orr.w	r3, r3, #2
 800ab0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	e005      	b.n	800ab3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab44:	461a      	mov	r2, r3
 800ab46:	2300      	movs	r3, #0
 800ab48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab50:	4619      	mov	r1, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab58:	461a      	mov	r2, r3
 800ab5a:	680b      	ldr	r3, [r1, #0]
 800ab5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d10c      	bne.n	800ab7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f965 	bl	800ae3c <USB_SetDevSpeed>
 800ab72:	e008      	b.n	800ab86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab74:	2101      	movs	r1, #1
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f960 	bl	800ae3c <USB_SetDevSpeed>
 800ab7c:	e003      	b.n	800ab86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab7e:	2103      	movs	r1, #3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f95b 	bl	800ae3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab86:	2110      	movs	r1, #16
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f8f3 	bl	800ad74 <USB_FlushTxFifo>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f91f 	bl	800addc <USB_FlushRxFifo>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	461a      	mov	r2, r3
 800abb0:	2300      	movs	r3, #0
 800abb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abba:	461a      	mov	r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc6:	461a      	mov	r2, r3
 800abc8:	2300      	movs	r3, #0
 800abca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
 800abd0:	e043      	b.n	800ac5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abe8:	d118      	bne.n	800ac1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfc:	461a      	mov	r2, r3
 800abfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	e013      	b.n	800ac2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac12:	461a      	mov	r2, r3
 800ac14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e008      	b.n	800ac2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3301      	adds	r3, #1
 800ac58:	613b      	str	r3, [r7, #16]
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d3b7      	bcc.n	800abd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
 800ac66:	e043      	b.n	800acf0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac7e:	d118      	bne.n	800acb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	461a      	mov	r2, r3
 800ac94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	e013      	b.n	800acc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca8:	461a      	mov	r2, r3
 800acaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	e008      	b.n	800acc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acbe:	461a      	mov	r2, r3
 800acc0:	2300      	movs	r3, #0
 800acc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd0:	461a      	mov	r2, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace2:	461a      	mov	r2, r3
 800ace4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ace8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	3301      	adds	r3, #1
 800acee:	613b      	str	r3, [r7, #16]
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3b7      	bcc.n	800ac68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ad18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d105      	bne.n	800ad2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	f043 0210 	orr.w	r2, r3, #16
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	4b0e      	ldr	r3, [pc, #56]	; (800ad6c <USB_DevInit+0x2b4>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d005      	beq.n	800ad4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	f043 0208 	orr.w	r2, r3, #8
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d105      	bne.n	800ad5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699a      	ldr	r2, [r3, #24]
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <USB_DevInit+0x2b8>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad68:	b004      	add	sp, #16
 800ad6a:	4770      	bx	lr
 800ad6c:	803c3800 	.word	0x803c3800
 800ad70:	40000004 	.word	0x40000004

0800ad74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4a13      	ldr	r2, [pc, #76]	; (800add8 <USB_FlushTxFifo+0x64>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d901      	bls.n	800ad94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e01b      	b.n	800adcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	daf2      	bge.n	800ad82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	019b      	lsls	r3, r3, #6
 800ada4:	f043 0220 	orr.w	r2, r3, #32
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	3301      	adds	r3, #1
 800adb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4a08      	ldr	r2, [pc, #32]	; (800add8 <USB_FlushTxFifo+0x64>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d901      	bls.n	800adbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e006      	b.n	800adcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0320 	and.w	r3, r3, #32
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d0f0      	beq.n	800adac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	00030d40 	.word	0x00030d40

0800addc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3301      	adds	r3, #1
 800adec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4a11      	ldr	r2, [pc, #68]	; (800ae38 <USB_FlushRxFifo+0x5c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d901      	bls.n	800adfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e018      	b.n	800ae2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	daf2      	bge.n	800ade8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2210      	movs	r2, #16
 800ae0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <USB_FlushRxFifo+0x5c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d901      	bls.n	800ae1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e006      	b.n	800ae2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	f003 0310 	and.w	r3, r3, #16
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d0f0      	beq.n	800ae0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	00030d40 	.word	0x00030d40

0800ae3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b087      	sub	sp, #28
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f003 0306 	and.w	r3, r3, #6
 800ae86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75fb      	strb	r3, [r7, #23]
 800ae92:	e00a      	b.n	800aeaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d002      	beq.n	800aea0 <USB_GetDevSpeed+0x32>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b06      	cmp	r3, #6
 800ae9e:	d102      	bne.n	800aea6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aea0:	2302      	movs	r3, #2
 800aea2:	75fb      	strb	r3, [r7, #23]
 800aea4:	e001      	b.n	800aeaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aea6:	230f      	movs	r3, #15
 800aea8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	371c      	adds	r7, #28
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d139      	bne.n	800af48 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeda:	69da      	ldr	r2, [r3, #28]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	2101      	movs	r1, #1
 800aee6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef2:	4313      	orrs	r3, r2
 800aef4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	015a      	lsls	r2, r3, #5
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d153      	bne.n	800afb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	059b      	lsls	r3, r3, #22
 800af2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800af30:	431a      	orrs	r2, r3
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	0159      	lsls	r1, r3, #5
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	440b      	add	r3, r1
 800af3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3e:	4619      	mov	r1, r3
 800af40:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <USB_ActivateEndpoint+0x10c>)
 800af42:	4313      	orrs	r3, r2
 800af44:	600b      	str	r3, [r1, #0]
 800af46:	e035      	b.n	800afb4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f303 	lsl.w	r3, r1, r3
 800af5e:	041b      	lsls	r3, r3, #16
 800af60:	68f9      	ldr	r1, [r7, #12]
 800af62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af66:	4313      	orrs	r3, r2
 800af68:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d119      	bne.n	800afb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	791b      	ldrb	r3, [r3, #4]
 800af9a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af9c:	430b      	orrs	r3, r1
 800af9e:	431a      	orrs	r2, r3
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	0159      	lsls	r1, r3, #5
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	440b      	add	r3, r1
 800afa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afac:	4619      	mov	r1, r3
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <USB_ActivateEndpoint+0x10c>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	10008000 	.word	0x10008000

0800afc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d161      	bne.n	800b0a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800affa:	d11f      	bne.n	800b03c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	0151      	lsls	r1, r2, #5
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	440a      	add	r2, r1
 800b012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b01a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	2101      	movs	r1, #1
 800b04e:	fa01 f303 	lsl.w	r3, r1, r3
 800b052:	b29b      	uxth	r3, r3
 800b054:	43db      	mvns	r3, r3
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b05c:	4013      	ands	r3, r2
 800b05e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b066:	69da      	ldr	r2, [r3, #28]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	2101      	movs	r1, #1
 800b072:	fa01 f303 	lsl.w	r3, r1, r3
 800b076:	b29b      	uxth	r3, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b080:	4013      	ands	r3, r2
 800b082:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	0159      	lsls	r1, r3, #5
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	440b      	add	r3, r1
 800b09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4b35      	ldr	r3, [pc, #212]	; (800b178 <USB_DeactivateEndpoint+0x1b0>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	600b      	str	r3, [r1, #0]
 800b0a6:	e060      	b.n	800b16a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0be:	d11f      	bne.n	800b100 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	f003 030f 	and.w	r3, r3, #15
 800b110:	2101      	movs	r1, #1
 800b112:	fa01 f303 	lsl.w	r3, r1, r3
 800b116:	041b      	lsls	r3, r3, #16
 800b118:	43db      	mvns	r3, r3
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b120:	4013      	ands	r3, r2
 800b122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12a:	69da      	ldr	r2, [r3, #28]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	2101      	movs	r1, #1
 800b136:	fa01 f303 	lsl.w	r3, r1, r3
 800b13a:	041b      	lsls	r3, r3, #16
 800b13c:	43db      	mvns	r3, r3
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b144:	4013      	ands	r3, r2
 800b146:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	0159      	lsls	r1, r3, #5
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	440b      	add	r3, r1
 800b15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b162:	4619      	mov	r1, r3
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <USB_DeactivateEndpoint+0x1b4>)
 800b166:	4013      	ands	r3, r2
 800b168:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	ec337800 	.word	0xec337800
 800b17c:	eff37800 	.word	0xeff37800

0800b180 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08a      	sub	sp, #40	; 0x28
 800b184:	af02      	add	r7, sp, #8
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4613      	mov	r3, r2
 800b18c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	f040 8163 	bne.w	800b468 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d132      	bne.n	800b210 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	691a      	ldr	r2, [r3, #16]
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	0159      	lsls	r1, r3, #5
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	440b      	add	r3, r1
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4ba5      	ldr	r3, [pc, #660]	; (800b45c <USB_EPStartXfer+0x2dc>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	0151      	lsls	r1, r2, #5
 800b1de:	69fa      	ldr	r2, [r7, #28]
 800b1e0:	440a      	add	r2, r1
 800b1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f8:	691a      	ldr	r2, [r3, #16]
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	0159      	lsls	r1, r3, #5
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	440b      	add	r3, r1
 800b202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b206:	4619      	mov	r1, r3
 800b208:	4b95      	ldr	r3, [pc, #596]	; (800b460 <USB_EPStartXfer+0x2e0>)
 800b20a:	4013      	ands	r3, r2
 800b20c:	610b      	str	r3, [r1, #16]
 800b20e:	e074      	b.n	800b2fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	0159      	lsls	r1, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	440b      	add	r3, r1
 800b226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22a:	4619      	mov	r1, r3
 800b22c:	4b8c      	ldr	r3, [pc, #560]	; (800b460 <USB_EPStartXfer+0x2e0>)
 800b22e:	4013      	ands	r3, r2
 800b230:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23e:	691a      	ldr	r2, [r3, #16]
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	0159      	lsls	r1, r3, #5
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	440b      	add	r3, r1
 800b248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24c:	4619      	mov	r1, r3
 800b24e:	4b83      	ldr	r3, [pc, #524]	; (800b45c <USB_EPStartXfer+0x2dc>)
 800b250:	4013      	ands	r3, r2
 800b252:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b260:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6999      	ldr	r1, [r3, #24]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	440b      	add	r3, r1
 800b26c:	1e59      	subs	r1, r3, #1
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	fbb1 f3f3 	udiv	r3, r1, r3
 800b276:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b278:	4b7a      	ldr	r3, [pc, #488]	; (800b464 <USB_EPStartXfer+0x2e4>)
 800b27a:	400b      	ands	r3, r1
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	0148      	lsls	r0, r1, #5
 800b280:	69f9      	ldr	r1, [r7, #28]
 800b282:	4401      	add	r1, r0
 800b284:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b288:	4313      	orrs	r3, r2
 800b28a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	691a      	ldr	r2, [r3, #16]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2a2:	69b9      	ldr	r1, [r7, #24]
 800b2a4:	0148      	lsls	r0, r1, #5
 800b2a6:	69f9      	ldr	r1, [r7, #28]
 800b2a8:	4401      	add	r1, r0
 800b2aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	791b      	ldrb	r3, [r3, #4]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d11f      	bne.n	800b2fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	015a      	lsls	r2, r3, #5
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	0151      	lsls	r1, r2, #5
 800b2cc:	69fa      	ldr	r2, [r7, #28]
 800b2ce:	440a      	add	r2, r1
 800b2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b2d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d14b      	bne.n	800b398 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d009      	beq.n	800b31c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b314:	461a      	mov	r2, r3
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	791b      	ldrb	r3, [r3, #4]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d128      	bne.n	800b376 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b330:	2b00      	cmp	r3, #0
 800b332:	d110      	bne.n	800b356 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b34e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	e00f      	b.n	800b376 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b374:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	69fa      	ldr	r2, [r7, #28]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	e137      	b.n	800b608 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	791b      	ldrb	r3, [r3, #4]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d015      	beq.n	800b3ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 811f 	beq.w	800b608 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	f003 030f 	and.w	r3, r3, #15
 800b3da:	2101      	movs	r1, #1
 800b3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e0:	69f9      	ldr	r1, [r7, #28]
 800b3e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	634b      	str	r3, [r1, #52]	; 0x34
 800b3ea:	e10d      	b.n	800b608 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d110      	bne.n	800b41e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	0151      	lsls	r1, r2, #5
 800b40e:	69fa      	ldr	r2, [r7, #28]
 800b410:	440a      	add	r2, r1
 800b412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	e00f      	b.n	800b43e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b43c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6919      	ldr	r1, [r3, #16]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	b298      	uxth	r0, r3
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	4603      	mov	r3, r0
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 faea 	bl	800ba2c <USB_WritePacket>
 800b458:	e0d6      	b.n	800b608 <USB_EPStartXfer+0x488>
 800b45a:	bf00      	nop
 800b45c:	e007ffff 	.word	0xe007ffff
 800b460:	fff80000 	.word	0xfff80000
 800b464:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	0159      	lsls	r1, r3, #5
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	440b      	add	r3, r1
 800b47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b482:	4619      	mov	r1, r3
 800b484:	4b63      	ldr	r3, [pc, #396]	; (800b614 <USB_EPStartXfer+0x494>)
 800b486:	4013      	ands	r3, r2
 800b488:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b496:	691a      	ldr	r2, [r3, #16]
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	0159      	lsls	r1, r3, #5
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	440b      	add	r3, r1
 800b4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4b5c      	ldr	r3, [pc, #368]	; (800b618 <USB_EPStartXfer+0x498>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d123      	bne.n	800b4fc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	691a      	ldr	r2, [r3, #16]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4ca:	69b9      	ldr	r1, [r7, #24]
 800b4cc:	0148      	lsls	r0, r1, #5
 800b4ce:	69f9      	ldr	r1, [r7, #28]
 800b4d0:	4401      	add	r1, r0
 800b4d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	0151      	lsls	r1, r2, #5
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4f8:	6113      	str	r3, [r2, #16]
 800b4fa:	e037      	b.n	800b56c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	699a      	ldr	r2, [r3, #24]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4413      	add	r3, r2
 800b506:	1e5a      	subs	r2, r3, #1
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b510:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	8afa      	ldrh	r2, [r7, #22]
 800b518:	fb03 f202 	mul.w	r2, r3, r2
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	8afb      	ldrh	r3, [r7, #22]
 800b530:	04d9      	lsls	r1, r3, #19
 800b532:	4b3a      	ldr	r3, [pc, #232]	; (800b61c <USB_EPStartXfer+0x49c>)
 800b534:	400b      	ands	r3, r1
 800b536:	69b9      	ldr	r1, [r7, #24]
 800b538:	0148      	lsls	r0, r1, #5
 800b53a:	69f9      	ldr	r1, [r7, #28]
 800b53c:	4401      	add	r1, r0
 800b53e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b542:	4313      	orrs	r3, r2
 800b544:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55c:	69b9      	ldr	r1, [r7, #24]
 800b55e:	0148      	lsls	r0, r1, #5
 800b560:	69f9      	ldr	r1, [r7, #28]
 800b562:	4401      	add	r1, r0
 800b564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b568:	4313      	orrs	r3, r2
 800b56a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d10d      	bne.n	800b58e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d009      	beq.n	800b58e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6919      	ldr	r1, [r3, #16]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	015a      	lsls	r2, r3, #5
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	4413      	add	r3, r2
 800b586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58a:	460a      	mov	r2, r1
 800b58c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	791b      	ldrb	r3, [r3, #4]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d128      	bne.n	800b5e8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d110      	bne.n	800b5c8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	0151      	lsls	r1, r2, #5
 800b5b8:	69fa      	ldr	r2, [r7, #28]
 800b5ba:	440a      	add	r2, r1
 800b5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	e00f      	b.n	800b5e8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	0151      	lsls	r1, r2, #5
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	440a      	add	r2, r1
 800b5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69ba      	ldr	r2, [r7, #24]
 800b5f8:	0151      	lsls	r1, r2, #5
 800b5fa:	69fa      	ldr	r2, [r7, #28]
 800b5fc:	440a      	add	r2, r1
 800b5fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	fff80000 	.word	0xfff80000
 800b618:	e007ffff 	.word	0xe007ffff
 800b61c:	1ff80000 	.word	0x1ff80000

0800b620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	f040 80ce 	bne.w	800b7de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d132      	bne.n	800b6b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b656:	691a      	ldr	r2, [r3, #16]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	0159      	lsls	r1, r3, #5
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	440b      	add	r3, r1
 800b660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b664:	4619      	mov	r1, r3
 800b666:	4b9a      	ldr	r3, [pc, #616]	; (800b8d0 <USB_EP0StartXfer+0x2b0>)
 800b668:	4013      	ands	r3, r2
 800b66a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b68a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	0159      	lsls	r1, r3, #5
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	440b      	add	r3, r1
 800b6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4b8a      	ldr	r3, [pc, #552]	; (800b8d4 <USB_EP0StartXfer+0x2b4>)
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	610b      	str	r3, [r1, #16]
 800b6ae:	e04e      	b.n	800b74e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	0159      	lsls	r1, r3, #5
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	440b      	add	r3, r1
 800b6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4b81      	ldr	r3, [pc, #516]	; (800b8d4 <USB_EP0StartXfer+0x2b4>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6de:	691a      	ldr	r2, [r3, #16]
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	0159      	lsls	r1, r3, #5
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4b78      	ldr	r3, [pc, #480]	; (800b8d0 <USB_EP0StartXfer+0x2b0>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d903      	bls.n	800b708 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	68da      	ldr	r2, [r3, #12]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	0151      	lsls	r1, r2, #5
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	440a      	add	r2, r1
 800b71e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b734:	691a      	ldr	r2, [r3, #16]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b73e:	6939      	ldr	r1, [r7, #16]
 800b740:	0148      	lsls	r0, r1, #5
 800b742:	6979      	ldr	r1, [r7, #20]
 800b744:	4401      	add	r1, r0
 800b746:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b74a:	4313      	orrs	r3, r2
 800b74c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d11e      	bne.n	800b792 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d009      	beq.n	800b770 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	015a      	lsls	r2, r3, #5
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	4413      	add	r3, r2
 800b764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b768:	461a      	mov	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b78a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	e097      	b.n	800b8c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8083 	beq.w	800b8c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d2:	6979      	ldr	r1, [r7, #20]
 800b7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	634b      	str	r3, [r1, #52]	; 0x34
 800b7dc:	e071      	b.n	800b8c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ea:	691a      	ldr	r2, [r3, #16]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	0159      	lsls	r1, r3, #5
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	440b      	add	r3, r1
 800b7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4b36      	ldr	r3, [pc, #216]	; (800b8d4 <USB_EP0StartXfer+0x2b4>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	691a      	ldr	r2, [r3, #16]
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	0159      	lsls	r1, r3, #5
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	440b      	add	r3, r1
 800b816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b81a:	4619      	mov	r1, r3
 800b81c:	4b2c      	ldr	r3, [pc, #176]	; (800b8d0 <USB_EP0StartXfer+0x2b0>)
 800b81e:	4013      	ands	r3, r2
 800b820:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	68da      	ldr	r2, [r3, #12]
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	68da      	ldr	r2, [r3, #12]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	015a      	lsls	r2, r3, #5
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	4413      	add	r3, r2
 800b842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b866:	691a      	ldr	r2, [r3, #16]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b870:	6939      	ldr	r1, [r7, #16]
 800b872:	0148      	lsls	r0, r1, #5
 800b874:	6979      	ldr	r1, [r7, #20]
 800b876:	4401      	add	r1, r0
 800b878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b87c:	4313      	orrs	r3, r2
 800b87e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10d      	bne.n	800b8a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d009      	beq.n	800b8a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	6919      	ldr	r1, [r3, #16]
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89e:	460a      	mov	r2, r1
 800b8a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	0151      	lsls	r1, r2, #5
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	440a      	add	r2, r1
 800b8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	e007ffff 	.word	0xe007ffff
 800b8d4:	fff80000 	.word	0xfff80000

0800b8d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	785b      	ldrb	r3, [r3, #1]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d14a      	bne.n	800b98c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b90a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b90e:	f040 8086 	bne.w	800ba1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	7812      	ldrb	r2, [r2, #0]
 800b926:	0151      	lsls	r1, r2, #5
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	440a      	add	r2, r1
 800b92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b934:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	015a      	lsls	r2, r3, #5
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	4413      	add	r3, r2
 800b940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	7812      	ldrb	r2, [r2, #0]
 800b94a:	0151      	lsls	r1, r2, #5
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	440a      	add	r2, r1
 800b950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f242 7210 	movw	r2, #10000	; 0x2710
 800b966:	4293      	cmp	r3, r2
 800b968:	d902      	bls.n	800b970 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
          break;
 800b96e:	e056      	b.n	800ba1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b988:	d0e7      	beq.n	800b95a <USB_EPStopXfer+0x82>
 800b98a:	e048      	b.n	800ba1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	015a      	lsls	r2, r3, #5
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	4413      	add	r3, r2
 800b996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9a4:	d13b      	bne.n	800ba1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	7812      	ldrb	r2, [r2, #0]
 800b9ba:	0151      	lsls	r1, r2, #5
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	440a      	add	r2, r1
 800b9c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	7812      	ldrb	r2, [r2, #0]
 800b9de:	0151      	lsls	r1, r2, #5
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	440a      	add	r2, r1
 800b9e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d902      	bls.n	800ba04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	75fb      	strb	r3, [r7, #23]
          break;
 800ba02:	e00c      	b.n	800ba1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba1c:	d0e7      	beq.n	800b9ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b089      	sub	sp, #36	; 0x24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	4611      	mov	r1, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	71fb      	strb	r3, [r7, #7]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ba4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d123      	bne.n	800ba9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ba52:	88bb      	ldrh	r3, [r7, #4]
 800ba54:	3303      	adds	r3, #3
 800ba56:	089b      	lsrs	r3, r3, #2
 800ba58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61bb      	str	r3, [r7, #24]
 800ba5e:	e018      	b.n	800ba92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	031a      	lsls	r2, r3, #12
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	4413      	add	r3, r2
 800ba68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	3301      	adds	r3, #1
 800ba78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	3301      	adds	r3, #1
 800ba84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	61bb      	str	r3, [r7, #24]
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d3e2      	bcc.n	800ba60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3724      	adds	r7, #36	; 0x24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b08b      	sub	sp, #44	; 0x2c
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	4613      	mov	r3, r2
 800bab4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800babe:	88fb      	ldrh	r3, [r7, #6]
 800bac0:	089b      	lsrs	r3, r3, #2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bac6:	88fb      	ldrh	r3, [r7, #6]
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bace:	2300      	movs	r3, #0
 800bad0:	623b      	str	r3, [r7, #32]
 800bad2:	e014      	b.n	800bafe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	601a      	str	r2, [r3, #0]
    pDest++;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	3301      	adds	r3, #1
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	3301      	adds	r3, #1
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	3301      	adds	r3, #1
 800baf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	3301      	adds	r3, #1
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	3301      	adds	r3, #1
 800bafc:	623b      	str	r3, [r7, #32]
 800bafe:	6a3a      	ldr	r2, [r7, #32]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d3e6      	bcc.n	800bad4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bb06:	8bfb      	ldrh	r3, [r7, #30]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01e      	beq.n	800bb4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb16:	461a      	mov	r2, r3
 800bb18:	f107 0310 	add.w	r3, r7, #16
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	701a      	strb	r2, [r3, #0]
      i++;
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	3301      	adds	r3, #1
 800bb36:	623b      	str	r3, [r7, #32]
      pDest++;
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bb3e:	8bfb      	ldrh	r3, [r7, #30]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bb44:	8bfb      	ldrh	r3, [r7, #30]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1ea      	bne.n	800bb20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	372c      	adds	r7, #44	; 0x2c
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	785b      	ldrb	r3, [r3, #1]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d12c      	bne.n	800bbce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	db12      	blt.n	800bbac <USB_EPSetStall+0x54>
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00f      	beq.n	800bbac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	0151      	lsls	r1, r2, #5
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	440a      	add	r2, r1
 800bba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	0151      	lsls	r1, r2, #5
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	440a      	add	r2, r1
 800bbc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	e02b      	b.n	800bc26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	db12      	blt.n	800bc06 <USB_EPSetStall+0xae>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00f      	beq.n	800bc06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	015a      	lsls	r2, r3, #5
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	4413      	add	r3, r2
 800bbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	0151      	lsls	r1, r2, #5
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	440a      	add	r2, r1
 800bbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	0151      	lsls	r1, r2, #5
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	440a      	add	r2, r1
 800bc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	785b      	ldrb	r3, [r3, #1]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d128      	bne.n	800bca2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	791b      	ldrb	r3, [r3, #4]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d003      	beq.n	800bc80 <USB_EPClearStall+0x4c>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	791b      	ldrb	r3, [r3, #4]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d138      	bne.n	800bcf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	0151      	lsls	r1, r2, #5
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	440a      	add	r2, r1
 800bc96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	e027      	b.n	800bcf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	0151      	lsls	r1, r2, #5
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	440a      	add	r2, r1
 800bcb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	791b      	ldrb	r3, [r3, #4]
 800bcc6:	2b03      	cmp	r3, #3
 800bcc8:	d003      	beq.n	800bcd2 <USB_EPClearStall+0x9e>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	791b      	ldrb	r3, [r3, #4]
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d10f      	bne.n	800bcf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bd22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bd34:	68f9      	ldr	r1, [r7, #12]
 800bd36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd7a:	f023 0302 	bic.w	r3, r3, #2
 800bd7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdbc:	f043 0302 	orr.w	r3, r3, #2
 800bdc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	4013      	ands	r3, r2
 800bde6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b085      	sub	sp, #20
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	4013      	ands	r3, r2
 800be18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	0c1b      	lsrs	r3, r3, #16
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	4013      	ands	r3, r2
 800be4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	b29b      	uxth	r3, r3
}
 800be52:	4618      	mov	r0, r3
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be5e:	b480      	push	{r7}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	015a      	lsls	r2, r3, #5
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	4413      	add	r3, r2
 800be76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	4013      	ands	r3, r2
 800be8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be8c:	68bb      	ldr	r3, [r7, #8]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b087      	sub	sp, #28
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	460b      	mov	r3, r1
 800bea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bebc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	fa22 f303 	lsr.w	r3, r2, r3
 800beca:	01db      	lsls	r3, r3, #7
 800becc:	b2db      	uxtb	r3, r3
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	4013      	ands	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bee8:	68bb      	ldr	r3, [r7, #8]
}
 800beea:	4618      	mov	r0, r3
 800beec:	371c      	adds	r7, #28
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	f003 0301 	and.w	r3, r3, #1
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
	...

0800bf14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <USB_ActivateSetup+0x44>)
 800bf32:	4013      	ands	r3, r2
 800bf34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	fffff800 	.word	0xfffff800

0800bf5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	460b      	mov	r3, r1
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	333c      	adds	r3, #60	; 0x3c
 800bf72:	3304      	adds	r3, #4
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	4a26      	ldr	r2, [pc, #152]	; (800c014 <USB_EP0_OutStart+0xb8>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d90a      	bls.n	800bf96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf90:	d101      	bne.n	800bf96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	e037      	b.n	800c006 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc4:	f043 0318 	orr.w	r3, r3, #24
 800bfc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bfdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bfde:	7afb      	ldrb	r3, [r7, #11]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d10f      	bne.n	800c004 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bffe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	4f54300a 	.word	0x4f54300a

0800c018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3301      	adds	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4a13      	ldr	r2, [pc, #76]	; (800c07c <USB_CoreReset+0x64>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d901      	bls.n	800c036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e01b      	b.n	800c06e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	daf2      	bge.n	800c024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	f043 0201 	orr.w	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a09      	ldr	r2, [pc, #36]	; (800c07c <USB_CoreReset+0x64>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d901      	bls.n	800c060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e006      	b.n	800c06e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d0f0      	beq.n	800c04e <USB_CoreReset+0x36>

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	00030d40 	.word	0x00030d40

0800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>:

typedef enum {ENC_LEFTTURN = -1, ENC_STILL = 0, ENC_RIGHTTURN = 1} Encoder_States;

class Encoder {
public:
	Encoder (UIadapter_reg_TypeDef* adapter_, uint8_t AByteNum_, uint8_t ABitNum_, uint8_t BByteNum_, uint8_t BBitNum_, UI_Polarity_Types polarity_) {
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	4611      	mov	r1, r2
 800c08c:	461a      	mov	r2, r3
 800c08e:	460b      	mov	r3, r1
 800c090:	71fb      	strb	r3, [r7, #7]
 800c092:	4613      	mov	r3, r2
 800c094:	71bb      	strb	r3, [r7, #6]
		encData.AByteNum = AByteNum_;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	79fa      	ldrb	r2, [r7, #7]
 800c09a:	721a      	strb	r2, [r3, #8]
		encData.ABitNum = ABitNum_;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	79ba      	ldrb	r2, [r7, #6]
 800c0a0:	725a      	strb	r2, [r3, #9]
		encData.BByteNum = BByteNum_;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	7e3a      	ldrb	r2, [r7, #24]
 800c0a6:	729a      	strb	r2, [r3, #10]
		encData.BBitNum = BBitNum_;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	7f3a      	ldrb	r2, [r7, #28]
 800c0ac:	72da      	strb	r2, [r3, #11]
		encData.polarity = polarity_;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c0b4:	739a      	strb	r2, [r3, #14]
		adapter = adapter_;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	605a      	str	r2, [r3, #4]
		state = ENC_STILL;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
		pinValueA = !((bool)polarity_);     // active low
 800c0c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	bf0c      	ite	eq
 800c0ca:	2301      	moveq	r3, #1
 800c0cc:	2300      	movne	r3, #0
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	705a      	strb	r2, [r3, #1]
		pinValueB = !((bool)polarity_);     // active low
 800c0d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf0c      	ite	eq
 800c0dc:	2301      	moveq	r3, #1
 800c0de:	2300      	movne	r3, #0
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	709a      	strb	r2, [r3, #2]
	}
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>:

typedef enum {BTN_UNPRESSED = 0, BTN_PRESSED} Button_States;

class Button {
public:
	Button(UIadapter_reg_TypeDef* adapter_, uint8_t btnRegBit_, UI_Polarity_Types polarity_) {
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4611      	mov	r1, r2
 800c100:	461a      	mov	r2, r3
 800c102:	460b      	mov	r3, r1
 800c104:	71fb      	strb	r3, [r7, #7]
 800c106:	4613      	mov	r3, r2
 800c108:	71bb      	strb	r3, [r7, #6]
		adapter = adapter_;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	605a      	str	r2, [r3, #4]
		btnData.btnBit = btnRegBit_;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	79fa      	ldrb	r2, [r7, #7]
 800c114:	721a      	strb	r2, [r3, #8]
		btnData.polarity = polarity_;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	79ba      	ldrb	r2, [r7, #6]
 800c11a:	729a      	strb	r2, [r3, #10]
		state = BTN_UNPRESSED;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	701a      	strb	r2, [r3, #0]
		pinValue = !((bool)polarity_);
 800c122:	79bb      	ldrb	r3, [r7, #6]
 800c124:	2b00      	cmp	r3, #0
 800c126:	bf0c      	ite	eq
 800c128:	2301      	moveq	r3, #1
 800c12a:	2300      	movne	r3, #0
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	705a      	strb	r2, [r3, #1]
	}
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>:
typedef enum {LED_OFF = 0, LED_R, LED_G, LED_B, LED_RG, LED_GB, LED_RB, LED_RGB} Led_States;

class Led {
public:

	Led(UIadapter_reg_TypeDef* adapter_, uint8_t RByteNum_, uint8_t RBitNum_, uint8_t GByteNum_, uint8_t GBitNum_, uint8_t BByteNum_, uint8_t BBitNum_, UI_Polarity_Types polarity_) {
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4611      	mov	r1, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	460b      	mov	r3, r1
 800c150:	71fb      	strb	r3, [r7, #7]
 800c152:	4613      	mov	r3, r2
 800c154:	71bb      	strb	r3, [r7, #6]
		ledData.RByteNum = RByteNum_;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	79fa      	ldrb	r2, [r7, #7]
 800c15a:	711a      	strb	r2, [r3, #4]
		ledData.RBitNum = RBitNum_;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	79ba      	ldrb	r2, [r7, #6]
 800c160:	715a      	strb	r2, [r3, #5]
		ledData.RBit = 0;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	719a      	strb	r2, [r3, #6]
		ledData.GByteNum = GByteNum_;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	7e3a      	ldrb	r2, [r7, #24]
 800c16c:	71da      	strb	r2, [r3, #7]
		ledData.GBitNum = GBitNum_;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	7f3a      	ldrb	r2, [r7, #28]
 800c172:	721a      	strb	r2, [r3, #8]
		ledData.GBit = 0;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	725a      	strb	r2, [r3, #9]
		ledData.BByteNum = BByteNum_;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c180:	729a      	strb	r2, [r3, #10]
		ledData.BBitNum = BBitNum_;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c188:	72da      	strb	r2, [r3, #11]
		ledData.BBit = 0;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	731a      	strb	r2, [r3, #12]
		ledData.polarity = polarity_;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c196:	735a      	strb	r2, [r3, #13]
		adapter = adapter_;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	68ba      	ldr	r2, [r7, #8]
 800c19c:	601a      	str	r2, [r3, #0]
		state = LED_OFF;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	739a      	strb	r2, [r3, #14]
	}
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
	...

0800c1b4 <_Z41__static_initialization_and_destruction_0ii>:
Encoder enc2(&UIadapterReg, 0, 6, 0, 5, ACTIVE_LOW);
Encoder enc3(&UIadapterReg, 1, 1, 1, 2, ACTIVE_LOW);
Encoder enc4(&UIadapterReg, 1, 6, 1, 5, ACTIVE_LOW);
Encoder enc5(&UIadapterReg, 2, 1, 2, 2, ACTIVE_LOW);

Encoder* encs[ENCS_NUM] = {&enc1, &enc2, &enc3, &enc4, &enc5};
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af06      	add	r7, sp, #24
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	f040 80da 	bne.w	800c37a <_Z41__static_initialization_and_destruction_0ii+0x1c6>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f040 80d4 	bne.w	800c37a <_Z41__static_initialization_and_destruction_0ii+0x1c6>
Button btnN		(&UIadapterReg,	7, ACTIVE_LOW);
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2207      	movs	r2, #7
 800c1d6:	496b      	ldr	r1, [pc, #428]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c1d8:	486b      	ldr	r0, [pc, #428]	; (800c388 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800c1da:	f7ff ff8b 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btnY		(&UIadapterReg,	0, ACTIVE_LOW);
 800c1de:	2300      	movs	r3, #0
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4968      	ldr	r1, [pc, #416]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c1e4:	4869      	ldr	r0, [pc, #420]	; (800c38c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 800c1e6:	f7ff ff85 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btn1		(&UIadapterReg,	8, ACTIVE_LOW);
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2208      	movs	r2, #8
 800c1ee:	4965      	ldr	r1, [pc, #404]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c1f0:	4867      	ldr	r0, [pc, #412]	; (800c390 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800c1f2:	f7ff ff7f 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btn2		(&UIadapterReg,	15, ACTIVE_LOW);
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	220f      	movs	r2, #15
 800c1fa:	4962      	ldr	r1, [pc, #392]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c1fc:	4865      	ldr	r0, [pc, #404]	; (800c394 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800c1fe:	f7ff ff79 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btnREC	(&UIadapterReg,	22, ACTIVE_LOW);
 800c202:	2300      	movs	r3, #0
 800c204:	2216      	movs	r2, #22
 800c206:	495f      	ldr	r1, [pc, #380]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c208:	4863      	ldr	r0, [pc, #396]	; (800c398 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800c20a:	f7ff ff73 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btnSTP	(&UIadapterReg,	20, ACTIVE_LOW);
 800c20e:	2300      	movs	r3, #0
 800c210:	2214      	movs	r2, #20
 800c212:	495c      	ldr	r1, [pc, #368]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c214:	4861      	ldr	r0, [pc, #388]	; (800c39c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800c216:	f7ff ff6d 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button btnPLY	(&UIadapterReg,	21, ACTIVE_LOW);
 800c21a:	2300      	movs	r3, #0
 800c21c:	2215      	movs	r2, #21
 800c21e:	4959      	ldr	r1, [pc, #356]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c220:	485f      	ldr	r0, [pc, #380]	; (800c3a0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800c222:	f7ff ff67 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button enc1btn	(&UIadapterReg,	3, ACTIVE_LOW);
 800c226:	2300      	movs	r3, #0
 800c228:	2203      	movs	r2, #3
 800c22a:	4956      	ldr	r1, [pc, #344]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c22c:	485d      	ldr	r0, [pc, #372]	; (800c3a4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800c22e:	f7ff ff61 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button enc2btn	(&UIadapterReg,	4, ACTIVE_LOW);
 800c232:	2300      	movs	r3, #0
 800c234:	2204      	movs	r2, #4
 800c236:	4953      	ldr	r1, [pc, #332]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c238:	485b      	ldr	r0, [pc, #364]	; (800c3a8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800c23a:	f7ff ff5b 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button enc3btn	(&UIadapterReg,	11, ACTIVE_LOW);
 800c23e:	2300      	movs	r3, #0
 800c240:	220b      	movs	r2, #11
 800c242:	4950      	ldr	r1, [pc, #320]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c244:	4859      	ldr	r0, [pc, #356]	; (800c3ac <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800c246:	f7ff ff55 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button enc4btn	(&UIadapterReg,	12, ACTIVE_LOW);
 800c24a:	2300      	movs	r3, #0
 800c24c:	220c      	movs	r2, #12
 800c24e:	494d      	ldr	r1, [pc, #308]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c250:	4857      	ldr	r0, [pc, #348]	; (800c3b0 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800c252:	f7ff ff4f 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Button enc5btn	(&UIadapterReg,	19, ACTIVE_LOW);
 800c256:	2300      	movs	r3, #0
 800c258:	2213      	movs	r2, #19
 800c25a:	494a      	ldr	r1, [pc, #296]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c25c:	4855      	ldr	r0, [pc, #340]	; (800c3b4 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800c25e:	f7ff ff49 	bl	800c0f4 <_ZN6ButtonC1EP21UIadapter_reg_TypeDefh17UI_Polarity_Types>
Led noLed(&UIadapterReg, 2, 5, 2, 6, 2, 7, ACTIVE_HIGH);
 800c262:	2301      	movs	r3, #1
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	2307      	movs	r3, #7
 800c268:	9303      	str	r3, [sp, #12]
 800c26a:	2302      	movs	r3, #2
 800c26c:	9302      	str	r3, [sp, #8]
 800c26e:	2306      	movs	r3, #6
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	2302      	movs	r3, #2
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	2305      	movs	r3, #5
 800c278:	2202      	movs	r2, #2
 800c27a:	4942      	ldr	r1, [pc, #264]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c27c:	484e      	ldr	r0, [pc, #312]	; (800c3b8 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800c27e:	f7ff ff5f 	bl	800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>
Led yesLed(&UIadapterReg, 2, 1, 2, 2, 2, 3, ACTIVE_HIGH);
 800c282:	2301      	movs	r3, #1
 800c284:	9304      	str	r3, [sp, #16]
 800c286:	2303      	movs	r3, #3
 800c288:	9303      	str	r3, [sp, #12]
 800c28a:	2302      	movs	r3, #2
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	2302      	movs	r3, #2
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2302      	movs	r3, #2
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	2301      	movs	r3, #1
 800c298:	2202      	movs	r2, #2
 800c29a:	493a      	ldr	r1, [pc, #232]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c29c:	4847      	ldr	r0, [pc, #284]	; (800c3bc <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800c29e:	f7ff ff4f 	bl	800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>
Led recLed(&UIadapterReg, 1, 0, 1, 1, 1, 2, ACTIVE_HIGH);
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	9304      	str	r3, [sp, #16]
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	9303      	str	r3, [sp, #12]
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	9302      	str	r3, [sp, #8]
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	9301      	str	r3, [sp, #4]
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	4932      	ldr	r1, [pc, #200]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c2bc:	4840      	ldr	r0, [pc, #256]	; (800c3c0 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800c2be:	f7ff ff3f 	bl	800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>
Led stpLed(&UIadapterReg, 1, 6, 1, 7, 2, 0, ACTIVE_HIGH);
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	9304      	str	r3, [sp, #16]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9303      	str	r3, [sp, #12]
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	9302      	str	r3, [sp, #8]
 800c2ce:	2307      	movs	r3, #7
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	2306      	movs	r3, #6
 800c2d8:	2201      	movs	r2, #1
 800c2da:	492a      	ldr	r1, [pc, #168]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c2dc:	4839      	ldr	r0, [pc, #228]	; (800c3c4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800c2de:	f7ff ff2f 	bl	800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>
Led plyLed(&UIadapterReg, 1, 3, 1, 4, 1, 5, ACTIVE_HIGH);
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	2305      	movs	r3, #5
 800c2e8:	9303      	str	r3, [sp, #12]
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	2304      	movs	r3, #4
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	4922      	ldr	r1, [pc, #136]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c2fc:	4832      	ldr	r0, [pc, #200]	; (800c3c8 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800c2fe:	f7ff ff1f 	bl	800c140 <_ZN3LedC1EP21UIadapter_reg_TypeDefhhhhhh17UI_Polarity_Types>
Encoder enc1(&UIadapterReg, 0, 1, 0, 2, ACTIVE_LOW);
 800c302:	2300      	movs	r3, #0
 800c304:	9302      	str	r3, [sp, #8]
 800c306:	2302      	movs	r3, #2
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	2300      	movs	r3, #0
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	2301      	movs	r3, #1
 800c310:	2200      	movs	r2, #0
 800c312:	491c      	ldr	r1, [pc, #112]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c314:	482d      	ldr	r0, [pc, #180]	; (800c3cc <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800c316:	f7ff feb3 	bl	800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>
Encoder enc2(&UIadapterReg, 0, 6, 0, 5, ACTIVE_LOW);
 800c31a:	2300      	movs	r3, #0
 800c31c:	9302      	str	r3, [sp, #8]
 800c31e:	2305      	movs	r3, #5
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	2300      	movs	r3, #0
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2306      	movs	r3, #6
 800c328:	2200      	movs	r2, #0
 800c32a:	4916      	ldr	r1, [pc, #88]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c32c:	4828      	ldr	r0, [pc, #160]	; (800c3d0 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800c32e:	f7ff fea7 	bl	800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>
Encoder enc3(&UIadapterReg, 1, 1, 1, 2, ACTIVE_LOW);
 800c332:	2300      	movs	r3, #0
 800c334:	9302      	str	r3, [sp, #8]
 800c336:	2302      	movs	r3, #2
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	2301      	movs	r3, #1
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	2301      	movs	r3, #1
 800c340:	2201      	movs	r2, #1
 800c342:	4910      	ldr	r1, [pc, #64]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c344:	4823      	ldr	r0, [pc, #140]	; (800c3d4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800c346:	f7ff fe9b 	bl	800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>
Encoder enc4(&UIadapterReg, 1, 6, 1, 5, ACTIVE_LOW);
 800c34a:	2300      	movs	r3, #0
 800c34c:	9302      	str	r3, [sp, #8]
 800c34e:	2305      	movs	r3, #5
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	2301      	movs	r3, #1
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	2306      	movs	r3, #6
 800c358:	2201      	movs	r2, #1
 800c35a:	490a      	ldr	r1, [pc, #40]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c35c:	481e      	ldr	r0, [pc, #120]	; (800c3d8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800c35e:	f7ff fe8f 	bl	800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>
Encoder enc5(&UIadapterReg, 2, 1, 2, 2, ACTIVE_LOW);
 800c362:	2300      	movs	r3, #0
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	2302      	movs	r3, #2
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	2302      	movs	r3, #2
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	2301      	movs	r3, #1
 800c370:	2202      	movs	r2, #2
 800c372:	4904      	ldr	r1, [pc, #16]	; (800c384 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800c374:	4819      	ldr	r0, [pc, #100]	; (800c3dc <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800c376:	f7ff fe83 	bl	800c080 <_ZN7EncoderC1EP21UIadapter_reg_TypeDefhhhh17UI_Polarity_Types>
Encoder* encs[ENCS_NUM] = {&enc1, &enc2, &enc3, &enc4, &enc5};
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	240005cc 	.word	0x240005cc
 800c388:	2400049c 	.word	0x2400049c
 800c38c:	240004a8 	.word	0x240004a8
 800c390:	240004b4 	.word	0x240004b4
 800c394:	240004c0 	.word	0x240004c0
 800c398:	240004cc 	.word	0x240004cc
 800c39c:	240004d8 	.word	0x240004d8
 800c3a0:	240004e4 	.word	0x240004e4
 800c3a4:	240004f0 	.word	0x240004f0
 800c3a8:	240004fc 	.word	0x240004fc
 800c3ac:	24000508 	.word	0x24000508
 800c3b0:	24000514 	.word	0x24000514
 800c3b4:	24000520 	.word	0x24000520
 800c3b8:	2400052c 	.word	0x2400052c
 800c3bc:	2400053c 	.word	0x2400053c
 800c3c0:	2400054c 	.word	0x2400054c
 800c3c4:	2400055c 	.word	0x2400055c
 800c3c8:	2400056c 	.word	0x2400056c
 800c3cc:	2400057c 	.word	0x2400057c
 800c3d0:	2400058c 	.word	0x2400058c
 800c3d4:	2400059c 	.word	0x2400059c
 800c3d8:	240005ac 	.word	0x240005ac
 800c3dc:	240005bc 	.word	0x240005bc

0800c3e0 <_GLOBAL__sub_I_btnN>:
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	f7ff fee3 	bl	800c1b4 <_Z41__static_initialization_and_destruction_0ii>
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <UIadapter_Init>:
#include "ui_adapter_reg.h"


UIadapter_reg_TypeDef UIadapterReg;

void UIadapter_Init(UIadapter_reg_TypeDef *UIadapter) {
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_OF_UI_REGS; i++)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
 800c3fc:	e033      	b.n	800c466 <UIadapter_Init+0x76>
	{
		UIadapter->UIinputRegs[i] = 0xFF;
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	4413      	add	r3, r2
 800c404:	22ff      	movs	r2, #255	; 0xff
 800c406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		UIadapter->UIinputRegsPrev[i] = UIadapter->UIinputRegs[i];
 800c40a:	7bfa      	ldrb	r2, [r7, #15]
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	6879      	ldr	r1, [r7, #4]
 800c410:	440a      	add	r2, r1
 800c412:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4413      	add	r3, r2
 800c41a:	460a      	mov	r2, r1
 800c41c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		UIadapter->UIoutputRegs[i] = 0x00;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	4413      	add	r3, r2
 800c426:	2200      	movs	r2, #0
 800c428:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		for (uint8_t j = 0; j < NUM_OF_UI_REGS; j++)
 800c42c:	2300      	movs	r3, #0
 800c42e:	73bb      	strb	r3, [r7, #14]
 800c430:	e013      	b.n	800c45a <UIadapter_Init+0x6a>
		{
			UIadapter->UIregUpdFlag[i][j] = 0;
 800c432:	7bfa      	ldrb	r2, [r7, #15]
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	00d2      	lsls	r2, r2, #3
 800c43a:	440a      	add	r2, r1
 800c43c:	4413      	add	r3, r2
 800c43e:	2200      	movs	r2, #0
 800c440:	701a      	strb	r2, [r3, #0]
			UIadapter->UIregPrevTime[i][j] = 0;
 800c442:	7bf9      	ldrb	r1, [r7, #15]
 800c444:	7bba      	ldrb	r2, [r7, #14]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	00c9      	lsls	r1, r1, #3
 800c44a:	440a      	add	r2, r1
 800c44c:	3206      	adds	r2, #6
 800c44e:	2100      	movs	r1, #0
 800c450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t j = 0; j < NUM_OF_UI_REGS; j++)
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	3301      	adds	r3, #1
 800c458:	73bb      	strb	r3, [r7, #14]
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d9e8      	bls.n	800c432 <UIadapter_Init+0x42>
	for (uint8_t i = 0; i < NUM_OF_UI_REGS; i++)
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	3301      	adds	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d9c8      	bls.n	800c3fe <UIadapter_Init+0xe>
		}
	}
//	SCB_CleanDCache_by_Addr((uint32_t *)UIadapter->UIoutputRegs, 3);
//	HAL_SPI_TransmitReceive_DMA(&hspi2, UIadapter->UIoutputRegs, UIadapter->UIinputRegs, 3);
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <UIadapter_ReadWriteUI>:

// TODO make non-blocking register polling
void UIadapter_ReadWriteUI(UIadapter_reg_TypeDef *UIadapter) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
//	for (uint8_t i = 0; i < NUM_OF_UI_REGS; i++) // store old input regs states
//		UIadapter->UIinputRegsPrev[i] = UIadapter->UIinputRegs[i];

//	HAL_GPIO_WritePin(USER_SPI2_SW_CS_GPIO_Port, USER_SPI2_SW_CS_Pin, GPIO_PIN_SET);// pull UI software CS pin high (latch written values in hc595)
//	SCB_CleanDCache_by_Addr((uint32_t *)UIadapter->UIoutputRegs, 3);
	HAL_SPI_TransmitReceive_DMA(&hspi2, UIadapter->UIoutputRegs, UIadapter->UIinputRegs, 3);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f103 017e 	add.w	r1, r3, #126	; 0x7e
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800c490:	2303      	movs	r3, #3
 800c492:	4803      	ldr	r0, [pc, #12]	; (800c4a0 <UIadapter_ReadWriteUI+0x24>)
 800c494:	f7fb ffb0 	bl	80083f8 <HAL_SPI_TransmitReceive_DMA>
	// --then wait until spi6 rxtx cplt callback is called, and contnue
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	240001bc 	.word	0x240001bc

0800c4a4 <UIadapter_ReadWriteUI_spi2_callback>:

void UIadapter_ReadWriteUI_spi2_callback(UIadapter_reg_TypeDef *UIadapter) {
 800c4a4:	b5b0      	push	{r4, r5, r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
//	SCB_InvalidateDCache_by_Addr((uint32_t *)UIadapter->UIinputRegs, 3);

//	HAL_GPIO_WritePin(USER_SPI2_SW_CS_GPIO_Port, USER_SPI2_SW_CS_Pin, GPIO_PIN_RESET);// pull UI software CS pin low (load hc165 with values)


	for (uint8_t i = 0; i < NUM_OF_UI_REGS; i++)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
 800c4b0:	e046      	b.n	800c540 <UIadapter_ReadWriteUI_spi2_callback+0x9c>
	{
		uint8_t result = UIadapter->UIinputRegs[i] ^ UIadapter->UIinputRegsPrev[i];
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	440b      	add	r3, r1
 800c4c2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c4c6:	4053      	eors	r3, r2
 800c4c8:	737b      	strb	r3, [r7, #13]
		if (result) {
 800c4ca:	7b7b      	ldrb	r3, [r7, #13]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d029      	beq.n	800c524 <UIadapter_ReadWriteUI_spi2_callback+0x80>
			__NOP();
 800c4d0:	bf00      	nop
			for (uint8_t j = 0; j < 8; j++)
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73bb      	strb	r3, [r7, #14]
 800c4d6:	e022      	b.n	800c51e <UIadapter_ReadWriteUI_spi2_callback+0x7a>
				if ((result >> j) % 2 && (HAL_GetTick() - UIadapter->UIregPrevTime[i][j] > 25))
 800c4d8:	7b7a      	ldrb	r2, [r7, #13]
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
 800c4dc:	fa42 f303 	asr.w	r3, r2, r3
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d017      	beq.n	800c518 <UIadapter_ReadWriteUI_spi2_callback+0x74>
 800c4e8:	f7f5 f85a 	bl	80015a0 <HAL_GetTick>
 800c4ec:	7bf9      	ldrb	r1, [r7, #15]
 800c4ee:	7bba      	ldrb	r2, [r7, #14]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	00c9      	lsls	r1, r1, #3
 800c4f4:	440a      	add	r2, r1
 800c4f6:	3206      	adds	r2, #6
 800c4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fc:	1ac3      	subs	r3, r0, r3
 800c4fe:	2b19      	cmp	r3, #25
 800c500:	d90a      	bls.n	800c518 <UIadapter_ReadWriteUI_spi2_callback+0x74>
				{
					UIadapter->UIregPrevTime[i][j] = HAL_GetTick();
 800c502:	7bfd      	ldrb	r5, [r7, #15]
 800c504:	7bbc      	ldrb	r4, [r7, #14]
 800c506:	f7f5 f84b 	bl	80015a0 <HAL_GetTick>
 800c50a:	4601      	mov	r1, r0
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	00ea      	lsls	r2, r5, #3
 800c510:	4422      	add	r2, r4
 800c512:	3206      	adds	r2, #6
 800c514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (uint8_t j = 0; j < 8; j++)
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	3301      	adds	r3, #1
 800c51c:	73bb      	strb	r3, [r7, #14]
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	2b07      	cmp	r3, #7
 800c522:	d9d9      	bls.n	800c4d8 <UIadapter_ReadWriteUI_spi2_callback+0x34>
				}
		}
		UIadapter->UIinputRegsPrev[i] = UIadapter->UIinputRegs[i];
 800c524:	7bfa      	ldrb	r2, [r7, #15]
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	6879      	ldr	r1, [r7, #4]
 800c52a:	440a      	add	r2, r1
 800c52c:	f892 1078 	ldrb.w	r1, [r2, #120]	; 0x78
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	460a      	mov	r2, r1
 800c536:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	for (uint8_t i = 0; i < NUM_OF_UI_REGS; i++)
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	3301      	adds	r3, #1
 800c53e:	73fb      	strb	r3, [r7, #15]
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d9b5      	bls.n	800c4b2 <UIadapter_ReadWriteUI_spi2_callback+0xe>
	}
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bdb0      	pop	{r4, r5, r7, pc}

0800c550 <ili9341_DelayMicro>:
	uint32_t i;
	for (i = 0; i < dly; i++);
}


static inline void ili9341_DelayMicro(volatile uint32_t micros) {
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5 ;
 800c558:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <ili9341_DelayMicro+0x38>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a0b      	ldr	r2, [pc, #44]	; (800c58c <ili9341_DelayMicro+0x3c>)
 800c55e:	fba2 2303 	umull	r2, r3, r2, r3
 800c562:	0d5b      	lsrs	r3, r3, #21
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	fb02 f303 	mul.w	r3, r2, r3
 800c56a:	607b      	str	r3, [r7, #4]
	while (micros--);
 800c56c:	bf00      	nop
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1fa      	bne.n	800c56e <ili9341_DelayMicro+0x1e>
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	24000000 	.word	0x24000000
 800c58c:	6b5fca6b 	.word	0x6b5fca6b

0800c590 <ili9341_WriteCmd>:


void ili9341_WriteCmd(unsigned char cmd) {
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
	ADDR_CMD = cmd;
 800c59a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	7013      	strb	r3, [r2, #0]
}
 800c5a2:	bf00      	nop
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
	...

0800c5b0 <ili9341_WriteData>:


void ili9341_WriteData(unsigned char data) {
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
	ADDR_DATA = data;
 800c5ba:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <ili9341_WriteData+0x1c>)
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	7013      	strb	r3, [r2, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	60400000 	.word	0x60400000

0800c5d0 <ili9341_ReadReg>:



uint32_t ili9341_ReadReg(uint8_t reg) {
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
	uint32_t reading;
	uint8_t tmp8;
	ili9341_WriteCmd(reg);
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff ffd7 	bl	800c590 <ili9341_WriteCmd>
//	ili9341_DelayMicro(50);
	tmp8 = ADDR_DATA;
 800c5e2:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <ili9341_ReadReg+0x7c>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	72fb      	strb	r3, [r7, #11]
	reading = tmp8;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	60fb      	str	r3, [r7, #12]
	reading <<= 8;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	021b      	lsls	r3, r3, #8
 800c5f0:	60fb      	str	r3, [r7, #12]
//	ili9341_DelayMicro(1);
	tmp8 = ADDR_DATA;
 800c5f2:	4b16      	ldr	r3, [pc, #88]	; (800c64c <ili9341_ReadReg+0x7c>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	72fb      	strb	r3, [r7, #11]
	reading |= tmp8;
 800c5f8:	7afb      	ldrb	r3, [r7, #11]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	60fb      	str	r3, [r7, #12]
	reading <<= 8;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	60fb      	str	r3, [r7, #12]
//	ili9341_DelayMicro(1);
	tmp8 = ADDR_DATA;
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <ili9341_ReadReg+0x7c>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	72fb      	strb	r3, [r7, #11]
	reading |= tmp8;
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	4313      	orrs	r3, r2
 800c612:	60fb      	str	r3, [r7, #12]
	reading <<= 8;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	021b      	lsls	r3, r3, #8
 800c618:	60fb      	str	r3, [r7, #12]
//	ili9341_DelayMicro(1);
	tmp8 = ADDR_DATA;
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <ili9341_ReadReg+0x7c>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	72fb      	strb	r3, [r7, #11]
	reading |= tmp8;
 800c620:	7afb      	ldrb	r3, [r7, #11]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	4313      	orrs	r3, r2
 800c626:	60fb      	str	r3, [r7, #12]
	// 0xEF returns more data
	if (reg == 0xEF) {
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2bef      	cmp	r3, #239	; 0xef
 800c62c:	d109      	bne.n	800c642 <ili9341_ReadReg+0x72>
		reading <<= 8;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	021b      	lsls	r3, r3, #8
 800c632:	60fb      	str	r3, [r7, #12]
//		ili9341_DelayMicro(5);
		tmp8 = ADDR_DATA;
 800c634:	4b05      	ldr	r3, [pc, #20]	; (800c64c <ili9341_ReadReg+0x7c>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	72fb      	strb	r3, [r7, #11]
		reading |= tmp8;
 800c63a:	7afb      	ldrb	r3, [r7, #11]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]
	}
//	ili9341_DelayMicro(150); //stabilization time
	return reading;
 800c642:	68fb      	ldr	r3, [r7, #12]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	60400000 	.word	0x60400000

0800c650 <ili9341_Direction>:

static void ili9341_Direction(LCD_Horizontal_t direction)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	2b03      	cmp	r3, #3
 800c65e:	d827      	bhi.n	800c6b0 <ili9341_Direction+0x60>
 800c660:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <ili9341_Direction+0x18>)
 800c662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	0800c679 	.word	0x0800c679
 800c66c:	0800c687 	.word	0x0800c687
 800c670:	0800c695 	.word	0x0800c695
 800c674:	0800c6a3 	.word	0x0800c6a3
	case ROTATE_0:
		ili9341_WriteCmd(0x36);
 800c678:	2036      	movs	r0, #54	; 0x36
 800c67a:	f7ff ff89 	bl	800c590 <ili9341_WriteCmd>
		ili9341_WriteData(0x48);
 800c67e:	2048      	movs	r0, #72	; 0x48
 800c680:	f7ff ff96 	bl	800c5b0 <ili9341_WriteData>
		break;
 800c684:	e014      	b.n	800c6b0 <ili9341_Direction+0x60>
	case ROTATE_90:
		ili9341_WriteCmd(0x36);
 800c686:	2036      	movs	r0, #54	; 0x36
 800c688:	f7ff ff82 	bl	800c590 <ili9341_WriteCmd>
		ili9341_WriteData(0x28);
 800c68c:	2028      	movs	r0, #40	; 0x28
 800c68e:	f7ff ff8f 	bl	800c5b0 <ili9341_WriteData>
		break;
 800c692:	e00d      	b.n	800c6b0 <ili9341_Direction+0x60>
	case ROTATE_180:
		ili9341_WriteCmd(0x36);
 800c694:	2036      	movs	r0, #54	; 0x36
 800c696:	f7ff ff7b 	bl	800c590 <ili9341_WriteCmd>
		ili9341_WriteData(0x88);
 800c69a:	2088      	movs	r0, #136	; 0x88
 800c69c:	f7ff ff88 	bl	800c5b0 <ili9341_WriteData>
		break;
 800c6a0:	e006      	b.n	800c6b0 <ili9341_Direction+0x60>
	case ROTATE_270:
		ili9341_WriteCmd(0x36);
 800c6a2:	2036      	movs	r0, #54	; 0x36
 800c6a4:	f7ff ff74 	bl	800c590 <ili9341_WriteCmd>
		ili9341_WriteData(0xE8);
 800c6a8:	20e8      	movs	r0, #232	; 0xe8
 800c6aa:	f7ff ff81 	bl	800c5b0 <ili9341_WriteData>
		break;
 800c6ae:	bf00      	nop
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <ili9341_SetRotation>:

void ili9341_SetRotation(unsigned char r) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	71fb      	strb	r3, [r7, #7]
	ili9341_WriteCmd(0x36);
 800c6c2:	2036      	movs	r0, #54	; 0x36
 800c6c4:	f7ff ff64 	bl	800c590 <ili9341_WriteCmd>
	switch (r) {
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d836      	bhi.n	800c73c <ili9341_SetRotation+0x84>
 800c6ce:	a201      	add	r2, pc, #4	; (adr r2, 800c6d4 <ili9341_SetRotation+0x1c>)
 800c6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d4:	0800c6e5 	.word	0x0800c6e5
 800c6d8:	0800c6fb 	.word	0x0800c6fb
 800c6dc:	0800c711 	.word	0x0800c711
 800c6e0:	0800c727 	.word	0x0800c727
	case 0:
		ili9341_WriteData(0x48);
 800c6e4:	2048      	movs	r0, #72	; 0x48
 800c6e6:	f7ff ff63 	bl	800c5b0 <ili9341_WriteData>
		X_SIZE = 240;
 800c6ea:	4b16      	ldr	r3, [pc, #88]	; (800c744 <ili9341_SetRotation+0x8c>)
 800c6ec:	22f0      	movs	r2, #240	; 0xf0
 800c6ee:	801a      	strh	r2, [r3, #0]
		Y_SIZE = 320;
 800c6f0:	4b15      	ldr	r3, [pc, #84]	; (800c748 <ili9341_SetRotation+0x90>)
 800c6f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c6f6:	801a      	strh	r2, [r3, #0]
		break;
 800c6f8:	e020      	b.n	800c73c <ili9341_SetRotation+0x84>
	case 1:
		ili9341_WriteData(0x28);
 800c6fa:	2028      	movs	r0, #40	; 0x28
 800c6fc:	f7ff ff58 	bl	800c5b0 <ili9341_WriteData>
		X_SIZE = 320;
 800c700:	4b10      	ldr	r3, [pc, #64]	; (800c744 <ili9341_SetRotation+0x8c>)
 800c702:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c706:	801a      	strh	r2, [r3, #0]
		Y_SIZE = 240;
 800c708:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <ili9341_SetRotation+0x90>)
 800c70a:	22f0      	movs	r2, #240	; 0xf0
 800c70c:	801a      	strh	r2, [r3, #0]
		break;
 800c70e:	e015      	b.n	800c73c <ili9341_SetRotation+0x84>
	case 2:
		ili9341_WriteData(0x88);
 800c710:	2088      	movs	r0, #136	; 0x88
 800c712:	f7ff ff4d 	bl	800c5b0 <ili9341_WriteData>
		X_SIZE = 240;
 800c716:	4b0b      	ldr	r3, [pc, #44]	; (800c744 <ili9341_SetRotation+0x8c>)
 800c718:	22f0      	movs	r2, #240	; 0xf0
 800c71a:	801a      	strh	r2, [r3, #0]
		Y_SIZE = 320;
 800c71c:	4b0a      	ldr	r3, [pc, #40]	; (800c748 <ili9341_SetRotation+0x90>)
 800c71e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c722:	801a      	strh	r2, [r3, #0]
		break;
 800c724:	e00a      	b.n	800c73c <ili9341_SetRotation+0x84>
	case 3:
		ili9341_WriteData(0xE8);
 800c726:	20e8      	movs	r0, #232	; 0xe8
 800c728:	f7ff ff42 	bl	800c5b0 <ili9341_WriteData>
		X_SIZE = 320;
 800c72c:	4b05      	ldr	r3, [pc, #20]	; (800c744 <ili9341_SetRotation+0x8c>)
 800c72e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c732:	801a      	strh	r2, [r3, #0]
		Y_SIZE = 240;
 800c734:	4b04      	ldr	r3, [pc, #16]	; (800c748 <ili9341_SetRotation+0x90>)
 800c736:	22f0      	movs	r2, #240	; 0xf0
 800c738:	801a      	strh	r2, [r3, #0]
		break;
 800c73a:	bf00      	nop
	}
}
 800c73c:	bf00      	nop
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	2400000e 	.word	0x2400000e
 800c748:	24000010 	.word	0x24000010

0800c74c <ili9341_Reset>:


void ili9341_Reset(void) {
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
	RESET_ACTIVE;
 800c752:	2200      	movs	r2, #0
 800c754:	2140      	movs	r1, #64	; 0x40
 800c756:	4811      	ldr	r0, [pc, #68]	; (800c79c <ili9341_Reset+0x50>)
 800c758:	f7f7 fe7e 	bl	8004458 <HAL_GPIO_WritePin>
	ili9341_DelayMicro(200);
 800c75c:	20c8      	movs	r0, #200	; 0xc8
 800c75e:	f7ff fef7 	bl	800c550 <ili9341_DelayMicro>
	RESET_IDLE;
 800c762:	2201      	movs	r2, #1
 800c764:	2140      	movs	r1, #64	; 0x40
 800c766:	480d      	ldr	r0, [pc, #52]	; (800c79c <ili9341_Reset+0x50>)
 800c768:	f7f7 fe76 	bl	8004458 <HAL_GPIO_WritePin>
	ili9341_WriteCmd(0x01); //Software Reset
 800c76c:	2001      	movs	r0, #1
 800c76e:	f7ff ff0f 	bl	800c590 <ili9341_WriteCmd>
	for (uint8_t i = 0; i < 3; i++)
 800c772:	2300      	movs	r3, #0
 800c774:	71fb      	strb	r3, [r7, #7]
 800c776:	e005      	b.n	800c784 <ili9341_Reset+0x38>
		ili9341_WriteData(0xFF);
 800c778:	20ff      	movs	r0, #255	; 0xff
 800c77a:	f7ff ff19 	bl	800c5b0 <ili9341_WriteData>
	for (uint8_t i = 0; i < 3; i++)
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	3301      	adds	r3, #1
 800c782:	71fb      	strb	r3, [r7, #7]
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d9f6      	bls.n	800c778 <ili9341_Reset+0x2c>
	ili9341_DelayMicro(1000);
 800c78a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c78e:	f7ff fedf 	bl	800c550 <ili9341_DelayMicro>
}
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	58020800 	.word	0x58020800

0800c7a0 <ili9341_Init>:


void __attribute__((optimize("O0"))) ili9341_Init(void) {
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
	RESET_IDLE;
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	2140      	movs	r1, #64	; 0x40
 800c7a8:	48a5      	ldr	r0, [pc, #660]	; (800ca40 <ili9341_Init+0x2a0>)
 800c7aa:	f7f7 fe55 	bl	8004458 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	f7f4 ff02 	bl	80015b8 <HAL_Delay>
	ili9341_Reset();
 800c7b4:	f7ff ffca 	bl	800c74c <ili9341_Reset>
	ili9341_ID = ili9341_ReadReg(0xD3);   // read ID4
 800c7b8:	20d3      	movs	r0, #211	; 0xd3
 800c7ba:	f7ff ff09 	bl	800c5d0 <ili9341_ReadReg>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4aa0      	ldr	r2, [pc, #640]	; (800ca44 <ili9341_Init+0x2a4>)
 800c7c2:	6013      	str	r3, [r2, #0]


	ili9341_WriteCmd(0x01);  //Software Reset
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	f7ff fee3 	bl	800c590 <ili9341_WriteCmd>
	ili9341_DelayMicro(1);
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	f7ff fec0 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xCB);  //Power Control A
 800c7d0:	20cb      	movs	r0, #203	; 0xcb
 800c7d2:	f7ff fedd 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x39);
 800c7d6:	2039      	movs	r0, #57	; 0x39
 800c7d8:	f7ff feea 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x2C);
 800c7dc:	202c      	movs	r0, #44	; 0x2c
 800c7de:	f7ff fee7 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x00);
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f7ff fee4 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x34);
 800c7e8:	2034      	movs	r0, #52	; 0x34
 800c7ea:	f7ff fee1 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x02);
 800c7ee:	2002      	movs	r0, #2
 800c7f0:	f7ff fede 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	f7ff feab 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xCF);  //Power Control B
 800c7fa:	20cf      	movs	r0, #207	; 0xcf
 800c7fc:	f7ff fec8 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x00);
 800c800:	2000      	movs	r0, #0
 800c802:	f7ff fed5 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0xC1);
 800c806:	20c1      	movs	r0, #193	; 0xc1
 800c808:	f7ff fed2 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x30);
 800c80c:	2030      	movs	r0, #48	; 0x30
 800c80e:	f7ff fecf 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c812:	2001      	movs	r0, #1
 800c814:	f7ff fe9c 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xE8);  //Driver timing control A
 800c818:	20e8      	movs	r0, #232	; 0xe8
 800c81a:	f7ff feb9 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x85);
 800c81e:	2085      	movs	r0, #133	; 0x85
 800c820:	f7ff fec6 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x00);
 800c824:	2000      	movs	r0, #0
 800c826:	f7ff fec3 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x78);
 800c82a:	2078      	movs	r0, #120	; 0x78
 800c82c:	f7ff fec0 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c830:	2001      	movs	r0, #1
 800c832:	f7ff fe8d 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xEA);  //Driver timing control B
 800c836:	20ea      	movs	r0, #234	; 0xea
 800c838:	f7ff feaa 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x00);
 800c83c:	2000      	movs	r0, #0
 800c83e:	f7ff feb7 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x00);
 800c842:	2000      	movs	r0, #0
 800c844:	f7ff feb4 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c848:	2001      	movs	r0, #1
 800c84a:	f7ff fe81 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xED);  //Power on Sequence control
 800c84e:	20ed      	movs	r0, #237	; 0xed
 800c850:	f7ff fe9e 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x64);
 800c854:	2064      	movs	r0, #100	; 0x64
 800c856:	f7ff feab 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x03);
 800c85a:	2003      	movs	r0, #3
 800c85c:	f7ff fea8 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x12);
 800c860:	2012      	movs	r0, #18
 800c862:	f7ff fea5 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x81);
 800c866:	2081      	movs	r0, #129	; 0x81
 800c868:	f7ff fea2 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c86c:	2001      	movs	r0, #1
 800c86e:	f7ff fe6f 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xF7);  //Pump ratio control
 800c872:	20f7      	movs	r0, #247	; 0xf7
 800c874:	f7ff fe8c 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x20);
 800c878:	2020      	movs	r0, #32
 800c87a:	f7ff fe99 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c87e:	2001      	movs	r0, #1
 800c880:	f7ff fe66 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xC0);  //Power Control 1
 800c884:	20c0      	movs	r0, #192	; 0xc0
 800c886:	f7ff fe83 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x10);
 800c88a:	2010      	movs	r0, #16
 800c88c:	f7ff fe90 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c890:	2001      	movs	r0, #1
 800c892:	f7ff fe5d 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xC1);  //Power Control 2
 800c896:	20c1      	movs	r0, #193	; 0xc1
 800c898:	f7ff fe7a 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x10);
 800c89c:	2010      	movs	r0, #16
 800c89e:	f7ff fe87 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	f7ff fe54 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xC5);  //VCOM Control 1
 800c8a8:	20c5      	movs	r0, #197	; 0xc5
 800c8aa:	f7ff fe71 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x3E);
 800c8ae:	203e      	movs	r0, #62	; 0x3e
 800c8b0:	f7ff fe7e 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x28);
 800c8b4:	2028      	movs	r0, #40	; 0x28
 800c8b6:	f7ff fe7b 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	f7ff fe48 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xC7);  //VCOM Control 2
 800c8c0:	20c7      	movs	r0, #199	; 0xc7
 800c8c2:	f7ff fe65 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x86);
 800c8c6:	2086      	movs	r0, #134	; 0x86
 800c8c8:	f7ff fe72 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	f7ff fe3f 	bl	800c550 <ili9341_DelayMicro>
	ili9341_SetRotation(1);
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	f7ff fef0 	bl	800c6b8 <ili9341_SetRotation>
	ili9341_DelayMicro(1);
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f7ff fe39 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0x3A);  //Pixel Format Set
 800c8de:	203a      	movs	r0, #58	; 0x3a
 800c8e0:	f7ff fe56 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x55);     //16bit
 800c8e4:	2055      	movs	r0, #85	; 0x55
 800c8e6:	f7ff fe63 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f7ff fe30 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xB1);
 800c8f0:	20b1      	movs	r0, #177	; 0xb1
 800c8f2:	f7ff fe4d 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x00);
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	f7ff fe5a 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x18);     // FPS 79 ��
 800c8fc:	2018      	movs	r0, #24
 800c8fe:	f7ff fe57 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c902:	2001      	movs	r0, #1
 800c904:	f7ff fe24 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xB6);  //Display Function Control
 800c908:	20b6      	movs	r0, #182	; 0xb6
 800c90a:	f7ff fe41 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x08);
 800c90e:	2008      	movs	r0, #8
 800c910:	f7ff fe4e 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x82);
 800c914:	2082      	movs	r0, #130	; 0x82
 800c916:	f7ff fe4b 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x27);     //320 rows
 800c91a:	2027      	movs	r0, #39	; 0x27
 800c91c:	f7ff fe48 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c920:	2001      	movs	r0, #1
 800c922:	f7ff fe15 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xF2);  //Enable 3G (what is it?)
 800c926:	20f2      	movs	r0, #242	; 0xf2
 800c928:	f7ff fe32 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x00);     //Turn it off
 800c92c:	2000      	movs	r0, #0
 800c92e:	f7ff fe3f 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c932:	2001      	movs	r0, #1
 800c934:	f7ff fe0c 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0x26);  //Gamma set
 800c938:	2026      	movs	r0, #38	; 0x26
 800c93a:	f7ff fe29 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x01);     //Gamma Curve (G2.2)
 800c93e:	2001      	movs	r0, #1
 800c940:	f7ff fe36 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c944:	2001      	movs	r0, #1
 800c946:	f7ff fe03 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xE0);  //Positive Gamma  Correction
 800c94a:	20e0      	movs	r0, #224	; 0xe0
 800c94c:	f7ff fe20 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x0F);
 800c950:	200f      	movs	r0, #15
 800c952:	f7ff fe2d 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x31);
 800c956:	2031      	movs	r0, #49	; 0x31
 800c958:	f7ff fe2a 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x2B);
 800c95c:	202b      	movs	r0, #43	; 0x2b
 800c95e:	f7ff fe27 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0C);
 800c962:	200c      	movs	r0, #12
 800c964:	f7ff fe24 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0E);
 800c968:	200e      	movs	r0, #14
 800c96a:	f7ff fe21 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x08);
 800c96e:	2008      	movs	r0, #8
 800c970:	f7ff fe1e 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x4E);
 800c974:	204e      	movs	r0, #78	; 0x4e
 800c976:	f7ff fe1b 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0xF1);
 800c97a:	20f1      	movs	r0, #241	; 0xf1
 800c97c:	f7ff fe18 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x37);
 800c980:	2037      	movs	r0, #55	; 0x37
 800c982:	f7ff fe15 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x07);
 800c986:	2007      	movs	r0, #7
 800c988:	f7ff fe12 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x10);
 800c98c:	2010      	movs	r0, #16
 800c98e:	f7ff fe0f 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x03);
 800c992:	2003      	movs	r0, #3
 800c994:	f7ff fe0c 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0E);
 800c998:	200e      	movs	r0, #14
 800c99a:	f7ff fe09 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x09);
 800c99e:	2009      	movs	r0, #9
 800c9a0:	f7ff fe06 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x00);
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f7ff fe03 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	f7ff fdd0 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0xE1);  //Negative Gamma  Correction
 800c9b0:	20e1      	movs	r0, #225	; 0xe1
 800c9b2:	f7ff fded 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x00);
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f7ff fdfa 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0E);
 800c9bc:	200e      	movs	r0, #14
 800c9be:	f7ff fdf7 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x14);
 800c9c2:	2014      	movs	r0, #20
 800c9c4:	f7ff fdf4 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x03);
 800c9c8:	2003      	movs	r0, #3
 800c9ca:	f7ff fdf1 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x11);
 800c9ce:	2011      	movs	r0, #17
 800c9d0:	f7ff fdee 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x07);
 800c9d4:	2007      	movs	r0, #7
 800c9d6:	f7ff fdeb 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x31);
 800c9da:	2031      	movs	r0, #49	; 0x31
 800c9dc:	f7ff fde8 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0xC1);
 800c9e0:	20c1      	movs	r0, #193	; 0xc1
 800c9e2:	f7ff fde5 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x48);
 800c9e6:	2048      	movs	r0, #72	; 0x48
 800c9e8:	f7ff fde2 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x08);
 800c9ec:	2008      	movs	r0, #8
 800c9ee:	f7ff fddf 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0F);
 800c9f2:	200f      	movs	r0, #15
 800c9f4:	f7ff fddc 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0C);
 800c9f8:	200c      	movs	r0, #12
 800c9fa:	f7ff fdd9 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x31);
 800c9fe:	2031      	movs	r0, #49	; 0x31
 800ca00:	f7ff fdd6 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x36);
 800ca04:	2036      	movs	r0, #54	; 0x36
 800ca06:	f7ff fdd3 	bl	800c5b0 <ili9341_WriteData>
	ili9341_WriteData(0x0F);
 800ca0a:	200f      	movs	r0, #15
 800ca0c:	f7ff fdd0 	bl	800c5b0 <ili9341_WriteData>
	ili9341_DelayMicro(1);
 800ca10:	2001      	movs	r0, #1
 800ca12:	f7ff fd9d 	bl	800c550 <ili9341_DelayMicro>
	ili9341_WriteCmd(0x11);  //Exit sleep mode
 800ca16:	2011      	movs	r0, #17
 800ca18:	f7ff fdba 	bl	800c590 <ili9341_WriteCmd>
	HAL_Delay(120);
 800ca1c:	2078      	movs	r0, #120	; 0x78
 800ca1e:	f7f4 fdcb 	bl	80015b8 <HAL_Delay>
	ili9341_WriteCmd(0x29);  //turn on display
 800ca22:	2029      	movs	r0, #41	; 0x29
 800ca24:	f7ff fdb4 	bl	800c590 <ili9341_WriteCmd>
	ili9341_WriteData(0x2C);
 800ca28:	202c      	movs	r0, #44	; 0x2c
 800ca2a:	f7ff fdc1 	bl	800c5b0 <ili9341_WriteData>

	ili9341_Direction(ROTATE_90);
 800ca2e:	2001      	movs	r0, #1
 800ca30:	f7ff fe0e 	bl	800c650 <ili9341_Direction>
	HAL_Delay(150);
 800ca34:	2096      	movs	r0, #150	; 0x96
 800ca36:	f7f4 fdbf 	bl	80015b8 <HAL_Delay>
}
 800ca3a:	bf00      	nop
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	58020800 	.word	0x58020800
 800ca44:	24000650 	.word	0x24000650

0800ca48 <ili9341_Flood>:



void ili9341_Flood(uint16_t color, uint32_t len) {
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6039      	str	r1, [r7, #0]
 800ca52:	80fb      	strh	r3, [r7, #6]
	ili9341_WriteCmd(0x2C);
 800ca54:	202c      	movs	r0, #44	; 0x2c
 800ca56:	f7ff fd9b 	bl	800c590 <ili9341_WriteCmd>
	uint8_t hi = color >> 8, lo = color;
 800ca5a:	88fb      	ldrh	r3, [r7, #6]
 800ca5c:	0a1b      	lsrs	r3, r3, #8
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	72fb      	strb	r3, [r7, #11]
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	72bb      	strb	r3, [r7, #10]
	for(uint32_t i=0;i<len;i++) {
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	e00a      	b.n	800ca82 <ili9341_Flood+0x3a>
		ili9341_WriteData(hi);
 800ca6c:	7afb      	ldrb	r3, [r7, #11]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fd9e 	bl	800c5b0 <ili9341_WriteData>
		ili9341_WriteData(lo);
 800ca74:	7abb      	ldrb	r3, [r7, #10]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fd9a 	bl	800c5b0 <ili9341_WriteData>
	for(uint32_t i=0;i<len;i++) {
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d3f0      	bcc.n	800ca6c <ili9341_Flood+0x24>
//	//Fill any remaining pixels(1 to 64)
//	for (i = (uint8_t) len & 63; i--;) {
//		ili9341_WriteData(hi);
//		ili9341_WriteData(lo);
//	}
}
 800ca8a:	bf00      	nop
 800ca8c:	bf00      	nop
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <ili9341_SetAddrWindow>:


void ili9341_SetAddrWindow(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	461a      	mov	r2, r3
 800caa2:	4623      	mov	r3, r4
 800caa4:	80fb      	strh	r3, [r7, #6]
 800caa6:	4603      	mov	r3, r0
 800caa8:	80bb      	strh	r3, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	807b      	strh	r3, [r7, #2]
 800caae:	4613      	mov	r3, r2
 800cab0:	803b      	strh	r3, [r7, #0]
  ili9341_WriteCmd(0x2A);//Column Addres Set
 800cab2:	202a      	movs	r0, #42	; 0x2a
 800cab4:	f7ff fd6c 	bl	800c590 <ili9341_WriteCmd>
  ili9341_WriteData(x1 >> 8);
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	0a1b      	lsrs	r3, r3, #8
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fd75 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(x1 & 0x00FF);
 800cac6:	88fb      	ldrh	r3, [r7, #6]
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff fd70 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(x2 >> 8);
 800cad0:	887b      	ldrh	r3, [r7, #2]
 800cad2:	0a1b      	lsrs	r3, r3, #8
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff fd69 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(x2 & 0x00FF);
 800cade:	887b      	ldrh	r3, [r7, #2]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff fd64 	bl	800c5b0 <ili9341_WriteData>
//  ili9341_DelayMicro(1);
  ili9341_WriteCmd(0x2B);//Page Addres Set
 800cae8:	202b      	movs	r0, #43	; 0x2b
 800caea:	f7ff fd51 	bl	800c590 <ili9341_WriteCmd>
  ili9341_WriteData(y1 >> 8);
 800caee:	88bb      	ldrh	r3, [r7, #4]
 800caf0:	0a1b      	lsrs	r3, r3, #8
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fd5a 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(y1 & 0x00FF);
 800cafc:	88bb      	ldrh	r3, [r7, #4]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff fd55 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(y2 >> 8);
 800cb06:	883b      	ldrh	r3, [r7, #0]
 800cb08:	0a1b      	lsrs	r3, r3, #8
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff fd4e 	bl	800c5b0 <ili9341_WriteData>
  ili9341_WriteData(y2 & 0x00FF);
 800cb14:	883b      	ldrh	r3, [r7, #0]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff fd49 	bl	800c5b0 <ili9341_WriteData>
//        ili9341_DelayMicro(1);
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd90      	pop	{r4, r7, pc}
	...

0800cb28 <ili9341_FillScreen>:



void ili9341_FillScreen(uint16_t color) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	80fb      	strh	r3, [r7, #6]
        ili9341_SetAddrWindow(0,0,X_SIZE-1,Y_SIZE-1);
 800cb32:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <ili9341_FillScreen+0x44>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <ili9341_FillScreen+0x48>)
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	2100      	movs	r1, #0
 800cb44:	2000      	movs	r0, #0
 800cb46:	f7ff ffa5 	bl	800ca94 <ili9341_SetAddrWindow>
        ili9341_Flood(color,(long)X_SIZE*(long)Y_SIZE);
 800cb4a:	4b08      	ldr	r3, [pc, #32]	; (800cb6c <ili9341_FillScreen+0x44>)
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <ili9341_FillScreen+0x48>)
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	fb02 f303 	mul.w	r3, r2, r3
 800cb58:	461a      	mov	r2, r3
 800cb5a:	88fb      	ldrh	r3, [r7, #6]
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff ff72 	bl	800ca48 <ili9341_Flood>
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	2400000e 	.word	0x2400000e
 800cb70:	24000010 	.word	0x24000010

0800cb74 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cb80:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cb84:	f003 ff4a 	bl	8010a1c <USBD_static_malloc>
 800cb88:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d109      	bne.n	800cba4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	32b0      	adds	r2, #176	; 0xb0
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cba0:	2302      	movs	r3, #2
 800cba2:	e06e      	b.n	800cc82 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	32b0      	adds	r2, #176	; 0xb0
 800cbae:	68f9      	ldr	r1, [r7, #12]
 800cbb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	32b0      	adds	r2, #176	; 0xb0
 800cbbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	7c1b      	ldrb	r3, [r3, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d12b      	bne.n	800cc28 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cbd0:	4b2e      	ldr	r3, [pc, #184]	; (800cc8c <USBD_MSC_Init+0x118>)
 800cbd2:	7819      	ldrb	r1, [r3, #0]
 800cbd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbd8:	2202      	movs	r2, #2
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f003 fddb 	bl	8010796 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800cbe0:	4b2a      	ldr	r3, [pc, #168]	; (800cc8c <USBD_MSC_Init+0x118>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 020f 	and.w	r2, r3, #15
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	440b      	add	r3, r1
 800cbf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cbfc:	4b24      	ldr	r3, [pc, #144]	; (800cc90 <USBD_MSC_Init+0x11c>)
 800cbfe:	7819      	ldrb	r1, [r3, #0]
 800cc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc04:	2202      	movs	r2, #2
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f003 fdc5 	bl	8010796 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800cc0c:	4b20      	ldr	r3, [pc, #128]	; (800cc90 <USBD_MSC_Init+0x11c>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	f003 020f 	and.w	r2, r3, #15
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	440b      	add	r3, r1
 800cc20:	3324      	adds	r3, #36	; 0x24
 800cc22:	2201      	movs	r2, #1
 800cc24:	801a      	strh	r2, [r3, #0]
 800cc26:	e028      	b.n	800cc7a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cc28:	4b18      	ldr	r3, [pc, #96]	; (800cc8c <USBD_MSC_Init+0x118>)
 800cc2a:	7819      	ldrb	r1, [r3, #0]
 800cc2c:	2340      	movs	r3, #64	; 0x40
 800cc2e:	2202      	movs	r2, #2
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f003 fdb0 	bl	8010796 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800cc36:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <USBD_MSC_Init+0x118>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 020f 	and.w	r2, r3, #15
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	440b      	add	r3, r1
 800cc4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc4e:	2201      	movs	r2, #1
 800cc50:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cc52:	4b0f      	ldr	r3, [pc, #60]	; (800cc90 <USBD_MSC_Init+0x11c>)
 800cc54:	7819      	ldrb	r1, [r3, #0]
 800cc56:	2340      	movs	r3, #64	; 0x40
 800cc58:	2202      	movs	r2, #2
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f003 fd9b 	bl	8010796 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800cc60:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <USBD_MSC_Init+0x11c>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	f003 020f 	and.w	r2, r3, #15
 800cc68:	6879      	ldr	r1, [r7, #4]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	440b      	add	r3, r1
 800cc74:	3324      	adds	r3, #36	; 0x24
 800cc76:	2201      	movs	r2, #1
 800cc78:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fa2c 	bl	800d0d8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	24000077 	.word	0x24000077
 800cc90:	24000076 	.word	0x24000076

0800cc94 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800cca0:	4b26      	ldr	r3, [pc, #152]	; (800cd3c <USBD_MSC_DeInit+0xa8>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f003 fd9b 	bl	80107e2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800ccac:	4b23      	ldr	r3, [pc, #140]	; (800cd3c <USBD_MSC_DeInit+0xa8>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 020f 	and.w	r2, r3, #15
 800ccb4:	6879      	ldr	r1, [r7, #4]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	440b      	add	r3, r1
 800ccc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800ccc8:	4b1d      	ldr	r3, [pc, #116]	; (800cd40 <USBD_MSC_DeInit+0xac>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f003 fd87 	bl	80107e2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800ccd4:	4b1a      	ldr	r3, [pc, #104]	; (800cd40 <USBD_MSC_DeInit+0xac>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 020f 	and.w	r2, r3, #15
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	3324      	adds	r3, #36	; 0x24
 800ccea:	2200      	movs	r2, #0
 800ccec:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	32b0      	adds	r2, #176	; 0xb0
 800ccf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d018      	beq.n	800cd32 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fa67 	bl	800d1d4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	32b0      	adds	r2, #176	; 0xb0
 800cd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f003 fe8f 	bl	8010a38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	32b0      	adds	r2, #176	; 0xb0
 800cd24:	2100      	movs	r1, #0
 800cd26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	24000077 	.word	0x24000077
 800cd40:	24000076 	.word	0x24000076

0800cd44 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	32b0      	adds	r2, #176	; 0xb0
 800cd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e0e1      	b.n	800cf34 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d053      	beq.n	800ce24 <USBD_MSC_Setup+0xe0>
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	f040 80d1 	bne.w	800cf24 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	785b      	ldrb	r3, [r3, #1]
 800cd86:	2bfe      	cmp	r3, #254	; 0xfe
 800cd88:	d002      	beq.n	800cd90 <USBD_MSC_Setup+0x4c>
 800cd8a:	2bff      	cmp	r3, #255	; 0xff
 800cd8c:	d02a      	beq.n	800cde4 <USBD_MSC_Setup+0xa0>
 800cd8e:	e041      	b.n	800ce14 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	885b      	ldrh	r3, [r3, #2]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d11e      	bne.n	800cdd6 <USBD_MSC_Setup+0x92>
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	88db      	ldrh	r3, [r3, #6]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d11a      	bne.n	800cdd6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	da15      	bge.n	800cdd6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	33b0      	adds	r3, #176	; 0xb0
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	4798      	blx	r3
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f003 f8f9 	bl	800ffc4 <USBD_CtlSendData>
 800cdd2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdd4:	e025      	b.n	800ce22 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f003 f882 	bl	800fee2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdde:	2303      	movs	r3, #3
 800cde0:	75fb      	strb	r3, [r7, #23]
          break;
 800cde2:	e01e      	b.n	800ce22 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	885b      	ldrh	r3, [r3, #2]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10c      	bne.n	800ce06 <USBD_MSC_Setup+0xc2>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	88db      	ldrh	r3, [r3, #6]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d108      	bne.n	800ce06 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	db03      	blt.n	800ce06 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f9b4 	bl	800d16c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce04:	e00d      	b.n	800ce22 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f003 f86a 	bl	800fee2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	75fb      	strb	r3, [r7, #23]
          break;
 800ce12:	e006      	b.n	800ce22 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f003 f863 	bl	800fee2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ce20:	bf00      	nop
      }
      break;
 800ce22:	e086      	b.n	800cf32 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	785b      	ldrb	r3, [r3, #1]
 800ce28:	2b0b      	cmp	r3, #11
 800ce2a:	d872      	bhi.n	800cf12 <USBD_MSC_Setup+0x1ce>
 800ce2c:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <USBD_MSC_Setup+0xf0>)
 800ce2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce32:	bf00      	nop
 800ce34:	0800ce65 	.word	0x0800ce65
 800ce38:	0800cee1 	.word	0x0800cee1
 800ce3c:	0800cf13 	.word	0x0800cf13
 800ce40:	0800cf13 	.word	0x0800cf13
 800ce44:	0800cf13 	.word	0x0800cf13
 800ce48:	0800cf13 	.word	0x0800cf13
 800ce4c:	0800cf13 	.word	0x0800cf13
 800ce50:	0800cf13 	.word	0x0800cf13
 800ce54:	0800cf13 	.word	0x0800cf13
 800ce58:	0800cf13 	.word	0x0800cf13
 800ce5c:	0800ce8f 	.word	0x0800ce8f
 800ce60:	0800ceb9 	.word	0x0800ceb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	d107      	bne.n	800ce80 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce70:	f107 030e 	add.w	r3, r7, #14
 800ce74:	2202      	movs	r2, #2
 800ce76:	4619      	mov	r1, r3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f003 f8a3 	bl	800ffc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce7e:	e050      	b.n	800cf22 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f003 f82d 	bl	800fee2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	75fb      	strb	r3, [r7, #23]
          break;
 800ce8c:	e049      	b.n	800cf22 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d107      	bne.n	800ceaa <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	2201      	movs	r2, #1
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f003 f88e 	bl	800ffc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cea8:	e03b      	b.n	800cf22 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f003 f818 	bl	800fee2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	75fb      	strb	r3, [r7, #23]
          break;
 800ceb6:	e034      	b.n	800cf22 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d106      	bne.n	800ced2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	885b      	ldrh	r3, [r3, #2]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	461a      	mov	r2, r3
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ced0:	e027      	b.n	800cf22 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f003 f804 	bl	800fee2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ceda:	2303      	movs	r3, #3
 800cedc:	75fb      	strb	r3, [r7, #23]
          break;
 800cede:	e020      	b.n	800cf22 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d119      	bne.n	800cf20 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	885b      	ldrh	r3, [r3, #2]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d115      	bne.n	800cf20 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	889b      	ldrh	r3, [r3, #4]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f003 fc8f 	bl	8010820 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	889b      	ldrh	r3, [r3, #4]
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fb2e 	bl	800d56c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800cf10:	e006      	b.n	800cf20 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f002 ffe4 	bl	800fee2 <USBD_CtlError>
          ret = USBD_FAIL;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf1e:	e000      	b.n	800cf22 <USBD_MSC_Setup+0x1de>
          break;
 800cf20:	bf00      	nop
      }
      break;
 800cf22:	e006      	b.n	800cf32 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f002 ffdb 	bl	800fee2 <USBD_CtlError>
      ret = USBD_FAIL;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf30:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800cf48:	78fb      	ldrb	r3, [r7, #3]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f959 	bl	800d204 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f983 	bl	800d278 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800cf84:	2181      	movs	r1, #129	; 0x81
 800cf86:	4812      	ldr	r0, [pc, #72]	; (800cfd0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800cf88:	f002 f972 	bl	800f270 <USBD_GetEpDesc>
 800cf8c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800cf8e:	2101      	movs	r1, #1
 800cf90:	480f      	ldr	r0, [pc, #60]	; (800cfd0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800cf92:	f002 f96d 	bl	800f270 <USBD_GetEpDesc>
 800cf96:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d006      	beq.n	800cfac <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	711a      	strb	r2, [r3, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f042 0202 	orr.w	r2, r2, #2
 800cfaa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d006      	beq.n	800cfc0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	711a      	strb	r2, [r3, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f042 0202 	orr.w	r2, r2, #2
 800cfbe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2220      	movs	r2, #32
 800cfc4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800cfc6:	4b02      	ldr	r3, [pc, #8]	; (800cfd0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	2400004c 	.word	0x2400004c

0800cfd4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800cfdc:	2181      	movs	r1, #129	; 0x81
 800cfde:	4812      	ldr	r0, [pc, #72]	; (800d028 <USBD_MSC_GetFSCfgDesc+0x54>)
 800cfe0:	f002 f946 	bl	800f270 <USBD_GetEpDesc>
 800cfe4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	480f      	ldr	r0, [pc, #60]	; (800d028 <USBD_MSC_GetFSCfgDesc+0x54>)
 800cfea:	f002 f941 	bl	800f270 <USBD_GetEpDesc>
 800cfee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d006      	beq.n	800d004 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cffe:	711a      	strb	r2, [r3, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d006      	beq.n	800d018 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d012:	711a      	strb	r2, [r3, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2220      	movs	r2, #32
 800d01c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d01e:	4b02      	ldr	r3, [pc, #8]	; (800d028 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	2400004c 	.word	0x2400004c

0800d02c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d034:	2181      	movs	r1, #129	; 0x81
 800d036:	4812      	ldr	r0, [pc, #72]	; (800d080 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800d038:	f002 f91a 	bl	800f270 <USBD_GetEpDesc>
 800d03c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d03e:	2101      	movs	r1, #1
 800d040:	480f      	ldr	r0, [pc, #60]	; (800d080 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800d042:	f002 f915 	bl	800f270 <USBD_GetEpDesc>
 800d046:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d006      	beq.n	800d05c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d056:	711a      	strb	r2, [r3, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d006      	beq.n	800d070 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2200      	movs	r2, #0
 800d066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d06a:	711a      	strb	r2, [r3, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2220      	movs	r2, #32
 800d074:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d076:	4b02      	ldr	r3, [pc, #8]	; (800d080 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	2400004c 	.word	0x2400004c

0800d084 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	220a      	movs	r2, #10
 800d090:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d092:	4b03      	ldr	r3, [pc, #12]	; (800d0a0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	2400006c 	.word	0x2400006c

0800d0a4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	e009      	b.n	800d0cc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	33b0      	adds	r3, #176	; 0xb0
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	32b0      	adds	r2, #176	; 0xb0
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d032      	beq.n	800d15c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	33b0      	adds	r3, #176	; 0xb0
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2000      	movs	r0, #0
 800d12e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800d130:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <MSC_BOT_Init+0x8c>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f003 fb72 	bl	8010820 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <MSC_BOT_Init+0x90>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f003 fb6c 	bl	8010820 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <MSC_BOT_Init+0x8c>)
 800d14a:	7819      	ldrb	r1, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d152:	231f      	movs	r3, #31
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f003 fc2c 	bl	80109b2 <USBD_LL_PrepareReceive>
 800d15a:	e000      	b.n	800d15e <MSC_BOT_Init+0x86>
    return;
 800d15c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	24000077 	.word	0x24000077
 800d168:	24000076 	.word	0x24000076

0800d16c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	32b0      	adds	r2, #176	; 0xb0
 800d17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d182:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d01b      	beq.n	800d1c2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2200      	movs	r2, #0
 800d18e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800d196:	4b0d      	ldr	r3, [pc, #52]	; (800d1cc <MSC_BOT_Reset+0x60>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f003 fb7d 	bl	801089c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800d1a2:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <MSC_BOT_Reset+0x64>)
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f003 fb77 	bl	801089c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800d1ae:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <MSC_BOT_Reset+0x64>)
 800d1b0:	7819      	ldrb	r1, [r3, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d1b8:	231f      	movs	r3, #31
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f003 fbf9 	bl	80109b2 <USBD_LL_PrepareReceive>
 800d1c0:	e000      	b.n	800d1c4 <MSC_BOT_Reset+0x58>
    return;
 800d1c2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	24000076 	.word	0x24000076
 800d1d0:	24000077 	.word	0x24000077

0800d1d4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	32b0      	adds	r2, #176	; 0xb0
 800d1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ea:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	721a      	strb	r2, [r3, #8]
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	32b0      	adds	r2, #176	; 0xb0
 800d21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d020      	beq.n	800d268 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	7a1b      	ldrb	r3, [r3, #8]
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	d005      	beq.n	800d23a <MSC_BOT_DataIn+0x36>
 800d22e:	2b02      	cmp	r3, #2
 800d230:	db1c      	blt.n	800d26c <MSC_BOT_DataIn+0x68>
 800d232:	3b03      	subs	r3, #3
 800d234:	2b01      	cmp	r3, #1
 800d236:	d819      	bhi.n	800d26c <MSC_BOT_DataIn+0x68>
 800d238:	e011      	b.n	800d25e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d246:	461a      	mov	r2, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f9c9 	bl	800d5e0 <SCSI_ProcessCmd>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	da0d      	bge.n	800d270 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d254:	2101      	movs	r1, #1
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f90c 	bl	800d474 <MSC_BOT_SendCSW>
      }
      break;
 800d25c:	e008      	b.n	800d270 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d25e:	2100      	movs	r1, #0
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f907 	bl	800d474 <MSC_BOT_SendCSW>
      break;
 800d266:	e004      	b.n	800d272 <MSC_BOT_DataIn+0x6e>
    return;
 800d268:	bf00      	nop
 800d26a:	e002      	b.n	800d272 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800d26c:	bf00      	nop
 800d26e:	e000      	b.n	800d272 <MSC_BOT_DataIn+0x6e>
      break;
 800d270:	bf00      	nop
  }
}
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	32b0      	adds	r2, #176	; 0xb0
 800d28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d292:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d01c      	beq.n	800d2d4 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	7a1b      	ldrb	r3, [r3, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d002      	beq.n	800d2a8 <MSC_BOT_DataOut+0x30>
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d004      	beq.n	800d2b0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d2a6:	e018      	b.n	800d2da <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f819 	bl	800d2e0 <MSC_BOT_CBW_Decode>
      break;
 800d2ae:	e014      	b.n	800d2da <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d2bc:	461a      	mov	r2, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f98e 	bl	800d5e0 <SCSI_ProcessCmd>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	da06      	bge.n	800d2d8 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d2ca:	2101      	movs	r1, #1
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f8d1 	bl	800d474 <MSC_BOT_SendCSW>
      break;
 800d2d2:	e001      	b.n	800d2d8 <MSC_BOT_DataOut+0x60>
    return;
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <MSC_BOT_DataOut+0x62>
      break;
 800d2d8:	bf00      	nop
  }
}
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	32b0      	adds	r2, #176	; 0xb0
 800d2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d079      	beq.n	800d3f2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800d316:	4b3a      	ldr	r3, [pc, #232]	; (800d400 <MSC_BOT_CBW_Decode+0x120>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f003 fb69 	bl	80109f4 <USBD_LL_GetRxDataSize>
 800d322:	4603      	mov	r3, r0
 800d324:	2b1f      	cmp	r3, #31
 800d326:	d114      	bne.n	800d352 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800d32e:	4a35      	ldr	r2, [pc, #212]	; (800d404 <MSC_BOT_CBW_Decode+0x124>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d10e      	bne.n	800d352 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d809      	bhi.n	800d352 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d34e:	2b10      	cmp	r3, #16
 800d350:	d90e      	bls.n	800d370 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d358:	2320      	movs	r3, #32
 800d35a:	2205      	movs	r2, #5
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fe28 	bl	800dfb2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2202      	movs	r2, #2
 800d366:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f8bd 	bl	800d4e8 <MSC_BOT_Abort>
 800d36e:	e043      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d37c:	461a      	mov	r2, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f92e 	bl	800d5e0 <SCSI_ProcessCmd>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	da0c      	bge.n	800d3a4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7a1b      	ldrb	r3, [r3, #8]
 800d38e:	2b05      	cmp	r3, #5
 800d390:	d104      	bne.n	800d39c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d392:	2101      	movs	r1, #1
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f86d 	bl	800d474 <MSC_BOT_SendCSW>
 800d39a:	e02d      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f8a3 	bl	800d4e8 <MSC_BOT_Abort>
 800d3a2:	e029      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	7a1b      	ldrb	r3, [r3, #8]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d024      	beq.n	800d3f6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d020      	beq.n	800d3f6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d01c      	beq.n	800d3f6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d009      	beq.n	800d3d8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f103 0110 	add.w	r1, r3, #16
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f819 	bl	800d408 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d3d6:	e00f      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f846 	bl	800d474 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d3e8:	e006      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f87c 	bl	800d4e8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d3f0:	e002      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
    return;
 800d3f2:	bf00      	nop
 800d3f4:	e000      	b.n	800d3f8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800d3f6:	bf00      	nop
    }
  }
}
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	24000077 	.word	0x24000077
 800d404:	43425355 	.word	0x43425355

0800d408 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	32b0      	adds	r2, #176	; 0xb0
 800d41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d422:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01e      	beq.n	800d468 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	4293      	cmp	r3, r2
 800d434:	bf28      	it	cs
 800d436:	4613      	movcs	r3, r2
 800d438:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	1ad2      	subs	r2, r2, r3
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2204      	movs	r2, #4
 800d456:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <MSC_BOT_SendData+0x68>)
 800d45a:	7819      	ldrb	r1, [r3, #0]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f003 fa85 	bl	8010970 <USBD_LL_Transmit>
 800d466:	e000      	b.n	800d46a <MSC_BOT_SendData+0x62>
    return;
 800d468:	bf00      	nop
}
 800d46a:	3718      	adds	r7, #24
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	24000076 	.word	0x24000076

0800d474 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	32b0      	adds	r2, #176	; 0xb0
 800d48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d48e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d01d      	beq.n	800d4d2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4a10      	ldr	r2, [pc, #64]	; (800d4dc <MSC_BOT_SendCSW+0x68>)
 800d49a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	78fa      	ldrb	r2, [r7, #3]
 800d4a2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800d4ac:	4b0c      	ldr	r3, [pc, #48]	; (800d4e0 <MSC_BOT_SendCSW+0x6c>)
 800d4ae:	7819      	ldrb	r1, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d4b6:	230d      	movs	r3, #13
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f003 fa59 	bl	8010970 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800d4be:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <MSC_BOT_SendCSW+0x70>)
 800d4c0:	7819      	ldrb	r1, [r3, #0]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d4c8:	231f      	movs	r3, #31
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f003 fa71 	bl	80109b2 <USBD_LL_PrepareReceive>
 800d4d0:	e000      	b.n	800d4d4 <MSC_BOT_SendCSW+0x60>
    return;
 800d4d2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	53425355 	.word	0x53425355
 800d4e0:	24000076 	.word	0x24000076
 800d4e4:	24000077 	.word	0x24000077

0800d4e8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	32b0      	adds	r2, #176	; 0xb0
 800d4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d02a      	beq.n	800d55c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10e      	bne.n	800d52e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d105      	bne.n	800d52e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d522:	4b10      	ldr	r3, [pc, #64]	; (800d564 <MSC_BOT_Abort+0x7c>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f003 f998 	bl	801085e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d52e:	4b0e      	ldr	r3, [pc, #56]	; (800d568 <MSC_BOT_Abort+0x80>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f003 f992 	bl	801085e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	7a5b      	ldrb	r3, [r3, #9]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d10d      	bne.n	800d55e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d542:	4b09      	ldr	r3, [pc, #36]	; (800d568 <MSC_BOT_Abort+0x80>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f003 f988 	bl	801085e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <MSC_BOT_Abort+0x7c>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f003 f982 	bl	801085e <USBD_LL_StallEP>
 800d55a:	e000      	b.n	800d55e <MSC_BOT_Abort+0x76>
    return;
 800d55c:	bf00      	nop
  }
}
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	24000077 	.word	0x24000077
 800d568:	24000076 	.word	0x24000076

0800d56c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	32b0      	adds	r2, #176	; 0xb0
 800d582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d586:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d01d      	beq.n	800d5ca <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	7a5b      	ldrb	r3, [r3, #9]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d10c      	bne.n	800d5b0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800d596:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <MSC_BOT_CplClrFeature+0x6c>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f003 f95e 	bl	801085e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	; (800d5dc <MSC_BOT_CplClrFeature+0x70>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f003 f958 	bl	801085e <USBD_LL_StallEP>
 800d5ae:	e00f      	b.n	800d5d0 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d5b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	da0a      	bge.n	800d5ce <MSC_BOT_CplClrFeature+0x62>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	7a5b      	ldrb	r3, [r3, #9]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d006      	beq.n	800d5ce <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff ff56 	bl	800d474 <MSC_BOT_SendCSW>
 800d5c8:	e002      	b.n	800d5d0 <MSC_BOT_CplClrFeature+0x64>
    return;
 800d5ca:	bf00      	nop
 800d5cc:	e000      	b.n	800d5d0 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800d5ce:	bf00      	nop
  }
}
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	24000076 	.word	0x24000076
 800d5dc:	24000077 	.word	0x24000077

0800d5e0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	32b0      	adds	r2, #176	; 0xb0
 800d5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800d604:	f04f 33ff 	mov.w	r3, #4294967295
 800d608:	e168      	b.n	800d8dc <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2baa      	cmp	r3, #170	; 0xaa
 800d610:	f000 8144 	beq.w	800d89c <SCSI_ProcessCmd+0x2bc>
 800d614:	2baa      	cmp	r3, #170	; 0xaa
 800d616:	f300 8153 	bgt.w	800d8c0 <SCSI_ProcessCmd+0x2e0>
 800d61a:	2ba8      	cmp	r3, #168	; 0xa8
 800d61c:	f000 812c 	beq.w	800d878 <SCSI_ProcessCmd+0x298>
 800d620:	2ba8      	cmp	r3, #168	; 0xa8
 800d622:	f300 814d 	bgt.w	800d8c0 <SCSI_ProcessCmd+0x2e0>
 800d626:	2b5a      	cmp	r3, #90	; 0x5a
 800d628:	f300 80c0 	bgt.w	800d7ac <SCSI_ProcessCmd+0x1cc>
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f2c0 8147 	blt.w	800d8c0 <SCSI_ProcessCmd+0x2e0>
 800d632:	2b5a      	cmp	r3, #90	; 0x5a
 800d634:	f200 8144 	bhi.w	800d8c0 <SCSI_ProcessCmd+0x2e0>
 800d638:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <SCSI_ProcessCmd+0x60>)
 800d63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63e:	bf00      	nop
 800d640:	0800d7b3 	.word	0x0800d7b3
 800d644:	0800d8c1 	.word	0x0800d8c1
 800d648:	0800d8c1 	.word	0x0800d8c1
 800d64c:	0800d7c5 	.word	0x0800d7c5
 800d650:	0800d8c1 	.word	0x0800d8c1
 800d654:	0800d8c1 	.word	0x0800d8c1
 800d658:	0800d8c1 	.word	0x0800d8c1
 800d65c:	0800d8c1 	.word	0x0800d8c1
 800d660:	0800d8c1 	.word	0x0800d8c1
 800d664:	0800d8c1 	.word	0x0800d8c1
 800d668:	0800d8c1 	.word	0x0800d8c1
 800d66c:	0800d8c1 	.word	0x0800d8c1
 800d670:	0800d8c1 	.word	0x0800d8c1
 800d674:	0800d8c1 	.word	0x0800d8c1
 800d678:	0800d8c1 	.word	0x0800d8c1
 800d67c:	0800d8c1 	.word	0x0800d8c1
 800d680:	0800d8c1 	.word	0x0800d8c1
 800d684:	0800d8c1 	.word	0x0800d8c1
 800d688:	0800d7d7 	.word	0x0800d7d7
 800d68c:	0800d8c1 	.word	0x0800d8c1
 800d690:	0800d8c1 	.word	0x0800d8c1
 800d694:	0800d8c1 	.word	0x0800d8c1
 800d698:	0800d8c1 	.word	0x0800d8c1
 800d69c:	0800d8c1 	.word	0x0800d8c1
 800d6a0:	0800d8c1 	.word	0x0800d8c1
 800d6a4:	0800d8c1 	.word	0x0800d8c1
 800d6a8:	0800d80d 	.word	0x0800d80d
 800d6ac:	0800d7e9 	.word	0x0800d7e9
 800d6b0:	0800d8c1 	.word	0x0800d8c1
 800d6b4:	0800d8c1 	.word	0x0800d8c1
 800d6b8:	0800d7fb 	.word	0x0800d7fb
 800d6bc:	0800d8c1 	.word	0x0800d8c1
 800d6c0:	0800d8c1 	.word	0x0800d8c1
 800d6c4:	0800d8c1 	.word	0x0800d8c1
 800d6c8:	0800d8c1 	.word	0x0800d8c1
 800d6cc:	0800d831 	.word	0x0800d831
 800d6d0:	0800d8c1 	.word	0x0800d8c1
 800d6d4:	0800d843 	.word	0x0800d843
 800d6d8:	0800d8c1 	.word	0x0800d8c1
 800d6dc:	0800d8c1 	.word	0x0800d8c1
 800d6e0:	0800d867 	.word	0x0800d867
 800d6e4:	0800d8c1 	.word	0x0800d8c1
 800d6e8:	0800d88b 	.word	0x0800d88b
 800d6ec:	0800d8c1 	.word	0x0800d8c1
 800d6f0:	0800d8c1 	.word	0x0800d8c1
 800d6f4:	0800d8c1 	.word	0x0800d8c1
 800d6f8:	0800d8c1 	.word	0x0800d8c1
 800d6fc:	0800d8af 	.word	0x0800d8af
 800d700:	0800d8c1 	.word	0x0800d8c1
 800d704:	0800d8c1 	.word	0x0800d8c1
 800d708:	0800d8c1 	.word	0x0800d8c1
 800d70c:	0800d8c1 	.word	0x0800d8c1
 800d710:	0800d8c1 	.word	0x0800d8c1
 800d714:	0800d8c1 	.word	0x0800d8c1
 800d718:	0800d8c1 	.word	0x0800d8c1
 800d71c:	0800d8c1 	.word	0x0800d8c1
 800d720:	0800d8c1 	.word	0x0800d8c1
 800d724:	0800d8c1 	.word	0x0800d8c1
 800d728:	0800d8c1 	.word	0x0800d8c1
 800d72c:	0800d8c1 	.word	0x0800d8c1
 800d730:	0800d8c1 	.word	0x0800d8c1
 800d734:	0800d8c1 	.word	0x0800d8c1
 800d738:	0800d8c1 	.word	0x0800d8c1
 800d73c:	0800d8c1 	.word	0x0800d8c1
 800d740:	0800d8c1 	.word	0x0800d8c1
 800d744:	0800d8c1 	.word	0x0800d8c1
 800d748:	0800d8c1 	.word	0x0800d8c1
 800d74c:	0800d8c1 	.word	0x0800d8c1
 800d750:	0800d8c1 	.word	0x0800d8c1
 800d754:	0800d8c1 	.word	0x0800d8c1
 800d758:	0800d8c1 	.word	0x0800d8c1
 800d75c:	0800d8c1 	.word	0x0800d8c1
 800d760:	0800d8c1 	.word	0x0800d8c1
 800d764:	0800d8c1 	.word	0x0800d8c1
 800d768:	0800d8c1 	.word	0x0800d8c1
 800d76c:	0800d8c1 	.word	0x0800d8c1
 800d770:	0800d8c1 	.word	0x0800d8c1
 800d774:	0800d8c1 	.word	0x0800d8c1
 800d778:	0800d8c1 	.word	0x0800d8c1
 800d77c:	0800d8c1 	.word	0x0800d8c1
 800d780:	0800d8c1 	.word	0x0800d8c1
 800d784:	0800d8c1 	.word	0x0800d8c1
 800d788:	0800d8c1 	.word	0x0800d8c1
 800d78c:	0800d8c1 	.word	0x0800d8c1
 800d790:	0800d8c1 	.word	0x0800d8c1
 800d794:	0800d8c1 	.word	0x0800d8c1
 800d798:	0800d8c1 	.word	0x0800d8c1
 800d79c:	0800d8c1 	.word	0x0800d8c1
 800d7a0:	0800d8c1 	.word	0x0800d8c1
 800d7a4:	0800d8c1 	.word	0x0800d8c1
 800d7a8:	0800d81f 	.word	0x0800d81f
 800d7ac:	2b9e      	cmp	r3, #158	; 0x9e
 800d7ae:	d051      	beq.n	800d854 <SCSI_ProcessCmd+0x274>
 800d7b0:	e086      	b.n	800d8c0 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 f893 	bl	800d8e4 <SCSI_TestUnitReady>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c2:	e089      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f000 fb6e 	bl	800deac <SCSI_RequestSense>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d7d4:	e080      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800d7d6:	7afb      	ldrb	r3, [r7, #11]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f8db 	bl	800d998 <SCSI_Inquiry>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75fb      	strb	r3, [r7, #23]
      break;
 800d7e6:	e077      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d7e8:	7afb      	ldrb	r3, [r7, #11]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 fc2a 	bl	800e048 <SCSI_StartStopUnit>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800d7f8:	e06e      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 fc76 	bl	800e0f2 <SCSI_AllowPreventRemovable>
 800d806:	4603      	mov	r3, r0
 800d808:	75fb      	strb	r3, [r7, #23]
      break;
 800d80a:	e065      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d80c:	7afb      	ldrb	r3, [r7, #11]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	4619      	mov	r1, r3
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f000 faea 	bl	800ddec <SCSI_ModeSense6>
 800d818:	4603      	mov	r3, r0
 800d81a:	75fb      	strb	r3, [r7, #23]
      break;
 800d81c:	e05c      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d81e:	7afb      	ldrb	r3, [r7, #11]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4619      	mov	r1, r3
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f000 fb11 	bl	800de4c <SCSI_ModeSense10>
 800d82a:	4603      	mov	r3, r0
 800d82c:	75fb      	strb	r3, [r7, #23]
      break;
 800d82e:	e053      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d830:	7afb      	ldrb	r3, [r7, #11]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4619      	mov	r1, r3
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f000 fa5d 	bl	800dcf6 <SCSI_ReadFormatCapacity>
 800d83c:	4603      	mov	r3, r0
 800d83e:	75fb      	strb	r3, [r7, #23]
      break;
 800d840:	e04a      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d842:	7afb      	ldrb	r3, [r7, #11]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	4619      	mov	r1, r3
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f000 f923 	bl	800da94 <SCSI_ReadCapacity10>
 800d84e:	4603      	mov	r3, r0
 800d850:	75fb      	strb	r3, [r7, #23]
      break;
 800d852:	e041      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d854:	7afb      	ldrb	r3, [r7, #11]
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	4619      	mov	r1, r3
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f000 f998 	bl	800db90 <SCSI_ReadCapacity16>
 800d860:	4603      	mov	r3, r0
 800d862:	75fb      	strb	r3, [r7, #23]
      break;
 800d864:	e038      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800d866:	7afb      	ldrb	r3, [r7, #11]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	4619      	mov	r1, r3
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f000 fc6d 	bl	800e14c <SCSI_Read10>
 800d872:	4603      	mov	r3, r0
 800d874:	75fb      	strb	r3, [r7, #23]
      break;
 800d876:	e02f      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	4619      	mov	r1, r3
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 fd0e 	bl	800e2a0 <SCSI_Read12>
 800d884:	4603      	mov	r3, r0
 800d886:	75fb      	strb	r3, [r7, #23]
      break;
 800d888:	e026      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800d88a:	7afb      	ldrb	r3, [r7, #11]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	4619      	mov	r1, r3
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 fdb9 	bl	800e408 <SCSI_Write10>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
      break;
 800d89a:	e01d      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800d89c:	7afb      	ldrb	r3, [r7, #11]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 fe86 	bl	800e5b4 <SCSI_Write12>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800d8ac:	e014      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800d8ae:	7afb      	ldrb	r3, [r7, #11]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 ff63 	bl	800e780 <SCSI_Verify10>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d8be:	e00b      	b.n	800d8d8 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d8c0:	7af9      	ldrb	r1, [r7, #11]
 800d8c2:	2320      	movs	r3, #32
 800d8c4:	2205      	movs	r2, #5
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f000 fb73 	bl	800dfb2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800d8d2:	23ff      	movs	r3, #255	; 0xff
 800d8d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d8d6:	bf00      	nop
  }

  return ret;
 800d8d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	32b0      	adds	r2, #176	; 0xb0
 800d8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d900:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800d908:	f04f 33ff 	mov.w	r3, #4294967295
 800d90c:	e03f      	b.n	800d98e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d91e:	2320      	movs	r3, #32
 800d920:	2205      	movs	r2, #5
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 fb45 	bl	800dfb2 <SCSI_SenseCode>

    return -1;
 800d928:	f04f 33ff 	mov.w	r3, #4294967295
 800d92c:	e02f      	b.n	800d98e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d934:	2b02      	cmp	r3, #2
 800d936:	d10b      	bne.n	800d950 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d938:	7af9      	ldrb	r1, [r7, #11]
 800d93a:	233a      	movs	r3, #58	; 0x3a
 800d93c:	2202      	movs	r2, #2
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f000 fb37 	bl	800dfb2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	2205      	movs	r2, #5
 800d948:	721a      	strb	r2, [r3, #8]
    return -1;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	e01e      	b.n	800d98e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	33b0      	adds	r3, #176	; 0xb0
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	7afa      	ldrb	r2, [r7, #11]
 800d964:	4610      	mov	r0, r2
 800d966:	4798      	blx	r3
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00b      	beq.n	800d986 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d96e:	7af9      	ldrb	r1, [r7, #11]
 800d970:	233a      	movs	r3, #58	; 0x3a
 800d972:	2202      	movs	r2, #2
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f000 fb1c 	bl	800dfb2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2205      	movs	r2, #5
 800d97e:	721a      	strb	r2, [r3, #8]

    return -1;
 800d980:	f04f 33ff 	mov.w	r3, #4294967295
 800d984:	e003      	b.n	800d98e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2200      	movs	r2, #0
 800d98a:	60da      	str	r2, [r3, #12]

  return 0;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b088      	sub	sp, #32
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	32b0      	adds	r2, #176	; 0xb0
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800d9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c0:	e05f      	b.n	800da82 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d9d2:	2320      	movs	r3, #32
 800d9d4:	2205      	movs	r2, #5
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f000 faeb 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e0:	e04f      	b.n	800da82 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d020      	beq.n	800da32 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3302      	adds	r3, #2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d9fa:	2206      	movs	r2, #6
 800d9fc:	4923      	ldr	r1, [pc, #140]	; (800da8c <SCSI_Inquiry+0xf4>)
 800d9fe:	69b8      	ldr	r0, [r7, #24]
 800da00:	f001 f844 	bl	800ea8c <SCSI_UpdateBotData>
 800da04:	e03c      	b.n	800da80 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	3302      	adds	r3, #2
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b80      	cmp	r3, #128	; 0x80
 800da0e:	d105      	bne.n	800da1c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800da10:	2208      	movs	r2, #8
 800da12:	491f      	ldr	r1, [pc, #124]	; (800da90 <SCSI_Inquiry+0xf8>)
 800da14:	69b8      	ldr	r0, [r7, #24]
 800da16:	f001 f839 	bl	800ea8c <SCSI_UpdateBotData>
 800da1a:	e031      	b.n	800da80 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800da22:	2324      	movs	r3, #36	; 0x24
 800da24:	2205      	movs	r2, #5
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fac3 	bl	800dfb2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800da2c:	f04f 33ff 	mov.w	r3, #4294967295
 800da30:	e027      	b.n	800da82 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	33b0      	adds	r3, #176	; 0xb0
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	69d9      	ldr	r1, [r3, #28]
 800da44:	7afa      	ldrb	r2, [r7, #11]
 800da46:	4613      	mov	r3, r2
 800da48:	00db      	lsls	r3, r3, #3
 800da4a:	4413      	add	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	440b      	add	r3, r1
 800da50:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	3304      	adds	r3, #4
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	b29b      	uxth	r3, r3
 800da5a:	3305      	adds	r3, #5
 800da5c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	3304      	adds	r3, #4
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	b29b      	uxth	r3, r3
 800da66:	8bfa      	ldrh	r2, [r7, #30]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d303      	bcc.n	800da74 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3304      	adds	r3, #4
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800da74:	8bfb      	ldrh	r3, [r7, #30]
 800da76:	461a      	mov	r2, r3
 800da78:	6979      	ldr	r1, [r7, #20]
 800da7a:	69b8      	ldr	r0, [r7, #24]
 800da7c:	f001 f806 	bl	800ea8c <SCSI_UpdateBotData>
  }

  return 0;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3720      	adds	r7, #32
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	24000078 	.word	0x24000078
 800da90:	24000080 	.word	0x24000080

0800da94 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	460b      	mov	r3, r1
 800da9e:	607a      	str	r2, [r7, #4]
 800daa0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	32b0      	adds	r2, #176	; 0xb0
 800daac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800dab8:	f04f 33ff 	mov.w	r3, #4294967295
 800dabc:	e064      	b.n	800db88 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	33b0      	adds	r3, #176	; 0xb0
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800dadc:	7af8      	ldrb	r0, [r7, #11]
 800dade:	4798      	blx	r3
 800dae0:	4603      	mov	r3, r0
 800dae2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dae4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d104      	bne.n	800daf6 <SCSI_ReadCapacity10+0x62>
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d108      	bne.n	800db08 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800daf6:	7af9      	ldrb	r1, [r7, #11]
 800daf8:	233a      	movs	r3, #58	; 0x3a
 800dafa:	2202      	movs	r2, #2
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f000 fa58 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800db02:	f04f 33ff 	mov.w	r3, #4294967295
 800db06:	e03f      	b.n	800db88 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db0e:	3b01      	subs	r3, #1
 800db10:	0e1b      	lsrs	r3, r3, #24
 800db12:	b2da      	uxtb	r2, r3
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db1e:	3b01      	subs	r3, #1
 800db20:	0c1b      	lsrs	r3, r3, #16
 800db22:	b2da      	uxtb	r2, r3
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db2e:	3b01      	subs	r3, #1
 800db30:	0a1b      	lsrs	r3, r3, #8
 800db32:	b2da      	uxtb	r2, r3
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	3b01      	subs	r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800db4e:	161b      	asrs	r3, r3, #24
 800db50:	b2da      	uxtb	r2, r3
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800db5c:	141b      	asrs	r3, r3, #16
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800db6a:	0a1b      	lsrs	r3, r3, #8
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2208      	movs	r2, #8
 800db84:	60da      	str	r2, [r3, #12]

  return 0;
 800db86:	2300      	movs	r3, #0

}
 800db88:	4618      	mov	r0, r3
 800db8a:	3718      	adds	r7, #24
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	460b      	mov	r3, r1
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	32b0      	adds	r2, #176	; 0xb0
 800dba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbac:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800dbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb8:	e099      	b.n	800dcee <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	33b0      	adds	r3, #176	; 0xb0
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800dbd2:	69ba      	ldr	r2, [r7, #24]
 800dbd4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800dbd8:	7af8      	ldrb	r0, [r7, #11]
 800dbda:	4798      	blx	r3
 800dbdc:	4603      	mov	r3, r0
 800dbde:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d104      	bne.n	800dbf2 <SCSI_ReadCapacity16+0x62>
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d108      	bne.n	800dc04 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dbf2:	7af9      	ldrb	r1, [r7, #11]
 800dbf4:	233a      	movs	r3, #58	; 0x3a
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 f9da 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800dbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800dc02:	e074      	b.n	800dcee <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	330a      	adds	r3, #10
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	330b      	adds	r3, #11
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc14:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	330c      	adds	r3, #12
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dc1e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	320d      	adds	r2, #13
 800dc24:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dc26:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	77fb      	strb	r3, [r7, #31]
 800dc30:	e007      	b.n	800dc42 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800dc32:	7ffb      	ldrb	r3, [r7, #31]
 800dc34:	69ba      	ldr	r2, [r7, #24]
 800dc36:	4413      	add	r3, r2
 800dc38:	2200      	movs	r2, #0
 800dc3a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc3c:	7ffb      	ldrb	r3, [r7, #31]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	77fb      	strb	r3, [r7, #31]
 800dc42:	7ffa      	ldrb	r2, [r7, #31]
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d3f2      	bcc.n	800dc32 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dc52:	3b01      	subs	r3, #1
 800dc54:	0e1b      	lsrs	r3, r3, #24
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dc62:	3b01      	subs	r3, #1
 800dc64:	0c1b      	lsrs	r3, r3, #16
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dc72:	3b01      	subs	r3, #1
 800dc74:	0a1b      	lsrs	r3, r3, #8
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	3b01      	subs	r3, #1
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dc92:	161b      	asrs	r3, r3, #24
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dca0:	141b      	asrs	r3, r3, #16
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dcae:	0a1b      	lsrs	r3, r3, #8
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	330a      	adds	r3, #10
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	330b      	adds	r3, #11
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dcd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	330c      	adds	r3, #12
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dcde:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	320d      	adds	r2, #13
 800dce4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dce6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	60da      	str	r2, [r3, #12]

  return 0;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3720      	adds	r7, #32
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b088      	sub	sp, #32
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	60f8      	str	r0, [r7, #12]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	32b0      	adds	r2, #176	; 0xb0
 800dd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd12:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800dd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd1e:	e061      	b.n	800dde4 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	33b0      	adds	r3, #176	; 0xb0
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f107 0214 	add.w	r2, r7, #20
 800dd36:	f107 0110 	add.w	r1, r7, #16
 800dd3a:	7af8      	ldrb	r0, [r7, #11]
 800dd3c:	4798      	blx	r3
 800dd3e:	4603      	mov	r3, r0
 800dd40:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dd42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d104      	bne.n	800dd54 <SCSI_ReadFormatCapacity+0x5e>
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d108      	bne.n	800dd66 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd54:	7af9      	ldrb	r1, [r7, #11]
 800dd56:	233a      	movs	r3, #58	; 0x3a
 800dd58:	2202      	movs	r2, #2
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 f929 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800dd60:	f04f 33ff 	mov.w	r3, #4294967295
 800dd64:	e03e      	b.n	800dde4 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800dd66:	2300      	movs	r3, #0
 800dd68:	83fb      	strh	r3, [r7, #30]
 800dd6a:	e007      	b.n	800dd7c <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800dd6c:	8bfb      	ldrh	r3, [r7, #30]
 800dd6e:	69ba      	ldr	r2, [r7, #24]
 800dd70:	4413      	add	r3, r2
 800dd72:	2200      	movs	r2, #0
 800dd74:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800dd76:	8bfb      	ldrh	r3, [r7, #30]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	83fb      	strh	r3, [r7, #30]
 800dd7c:	8bfb      	ldrh	r3, [r7, #30]
 800dd7e:	2b0b      	cmp	r3, #11
 800dd80:	d9f4      	bls.n	800dd6c <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2208      	movs	r2, #8
 800dd86:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	0e1b      	lsrs	r3, r3, #24
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	0c1b      	lsrs	r3, r3, #16
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	0a1b      	lsrs	r3, r3, #8
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	2202      	movs	r2, #2
 800ddbc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800ddbe:	8abb      	ldrh	r3, [r7, #20]
 800ddc0:	141b      	asrs	r3, r3, #16
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800ddc8:	8abb      	ldrh	r3, [r7, #20]
 800ddca:	0a1b      	lsrs	r3, r3, #8
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800ddd4:	8abb      	ldrh	r3, [r7, #20]
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	220c      	movs	r2, #12
 800dde0:	60da      	str	r2, [r3, #12]

  return 0;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3720      	adds	r7, #32
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	32b0      	adds	r2, #176	; 0xb0
 800de04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de08:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800de0a:	2317      	movs	r3, #23
 800de0c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800de14:	f04f 33ff 	mov.w	r3, #4294967295
 800de18:	e011      	b.n	800de3e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3304      	adds	r3, #4
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	8afa      	ldrh	r2, [r7, #22]
 800de24:	429a      	cmp	r2, r3
 800de26:	d303      	bcc.n	800de30 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800de30:	8afb      	ldrh	r3, [r7, #22]
 800de32:	461a      	mov	r2, r3
 800de34:	4904      	ldr	r1, [pc, #16]	; (800de48 <SCSI_ModeSense6+0x5c>)
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f000 fe28 	bl	800ea8c <SCSI_UpdateBotData>

  return 0;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	24000088 	.word	0x24000088

0800de4c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	460b      	mov	r3, r1
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	32b0      	adds	r2, #176	; 0xb0
 800de64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de68:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800de6a:	231b      	movs	r3, #27
 800de6c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800de74:	f04f 33ff 	mov.w	r3, #4294967295
 800de78:	e011      	b.n	800de9e <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	3308      	adds	r3, #8
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	b29b      	uxth	r3, r3
 800de82:	8afa      	ldrh	r2, [r7, #22]
 800de84:	429a      	cmp	r2, r3
 800de86:	d303      	bcc.n	800de90 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3308      	adds	r3, #8
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800de90:	8afb      	ldrh	r3, [r7, #22]
 800de92:	461a      	mov	r2, r3
 800de94:	4904      	ldr	r1, [pc, #16]	; (800dea8 <SCSI_ModeSense10+0x5c>)
 800de96:	6938      	ldr	r0, [r7, #16]
 800de98:	f000 fdf8 	bl	800ea8c <SCSI_UpdateBotData>

  return 0;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3718      	adds	r7, #24
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	240000a0 	.word	0x240000a0

0800deac <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	460b      	mov	r3, r1
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	32b0      	adds	r2, #176	; 0xb0
 800dec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dec8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295
 800ded4:	e069      	b.n	800dfaa <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dee6:	2320      	movs	r3, #32
 800dee8:	2205      	movs	r2, #5
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f000 f861 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800def0:	f04f 33ff 	mov.w	r3, #4294967295
 800def4:	e059      	b.n	800dfaa <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800def6:	2300      	movs	r3, #0
 800def8:	75fb      	strb	r3, [r7, #23]
 800defa:	e007      	b.n	800df0c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800defc:	7dfb      	ldrb	r3, [r7, #23]
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	4413      	add	r3, r2
 800df02:	2200      	movs	r2, #0
 800df04:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	3301      	adds	r3, #1
 800df0a:	75fb      	strb	r3, [r7, #23]
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
 800df0e:	2b11      	cmp	r3, #17
 800df10:	d9f4      	bls.n	800defc <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	2270      	movs	r2, #112	; 0x70
 800df16:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	220c      	movs	r2, #12
 800df1c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d02e      	beq.n	800df8c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df34:	461a      	mov	r2, r3
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	3248      	adds	r2, #72	; 0x48
 800df3a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	3348      	adds	r3, #72	; 0x48
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	4413      	add	r3, r2
 800df50:	791a      	ldrb	r2, [r3, #4]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df5c:	693a      	ldr	r2, [r7, #16]
 800df5e:	3348      	adds	r3, #72	; 0x48
 800df60:	00db      	lsls	r3, r3, #3
 800df62:	4413      	add	r3, r2
 800df64:	795a      	ldrb	r2, [r3, #5]
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df70:	3301      	adds	r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df80:	2b04      	cmp	r3, #4
 800df82:	d103      	bne.n	800df8c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	2212      	movs	r2, #18
 800df90:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	3304      	adds	r3, #4
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	2b12      	cmp	r3, #18
 800df9a:	d805      	bhi.n	800dfa8 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3304      	adds	r3, #4
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3718      	adds	r7, #24
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b085      	sub	sp, #20
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	4608      	mov	r0, r1
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	70fb      	strb	r3, [r7, #3]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	70bb      	strb	r3, [r7, #2]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	32b0      	adds	r2, #176	; 0xb0
 800dfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfda:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d02c      	beq.n	800e03c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3248      	adds	r2, #72	; 0x48
 800dfee:	78b9      	ldrb	r1, [r7, #2]
 800dff0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	3348      	adds	r3, #72	; 0x48
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4413      	add	r3, r2
 800e002:	787a      	ldrb	r2, [r7, #1]
 800e004:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	3348      	adds	r3, #72	; 0x48
 800e010:	00db      	lsls	r3, r3, #3
 800e012:	4413      	add	r3, r2
 800e014:	2200      	movs	r2, #0
 800e016:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e01e:	3301      	adds	r3, #1
 800e020:	b2da      	uxtb	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e02e:	2b04      	cmp	r3, #4
 800e030:	d105      	bne.n	800e03e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800e03a:	e000      	b.n	800e03e <SCSI_SenseCode+0x8c>
    return;
 800e03c:	bf00      	nop
  }
}
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	460b      	mov	r3, r1
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	32b0      	adds	r2, #176	; 0xb0
 800e060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e064:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d102      	bne.n	800e072 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800e06c:	f04f 33ff 	mov.w	r3, #4294967295
 800e070:	e03b      	b.n	800e0ea <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d10f      	bne.n	800e09c <SCSI_StartStopUnit+0x54>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3304      	adds	r3, #4
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	f003 0303 	and.w	r3, r3, #3
 800e086:	2b02      	cmp	r3, #2
 800e088:	d108      	bne.n	800e09c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e08a:	7af9      	ldrb	r1, [r7, #11]
 800e08c:	2324      	movs	r3, #36	; 0x24
 800e08e:	2205      	movs	r2, #5
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7ff ff8e 	bl	800dfb2 <SCSI_SenseCode>

    return -1;
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	e026      	b.n	800e0ea <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 0303 	and.w	r3, r3, #3
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d104      	bne.n	800e0b4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e0b2:	e016      	b.n	800e0e2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d104      	bne.n	800e0cc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2202      	movs	r2, #2
 800e0c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e0ca:	e00a      	b.n	800e0e2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d103      	bne.n	800e0e2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	60da      	str	r2, [r3, #12]

  return 0;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b087      	sub	sp, #28
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	607a      	str	r2, [r7, #4]
 800e0fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	32b0      	adds	r2, #176	; 0xb0
 800e10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d102      	bne.n	800e11c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	e011      	b.n	800e140 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3304      	adds	r3, #4
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d104      	bne.n	800e130 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e12e:	e003      	b.n	800e138 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2200      	movs	r2, #0
 800e13c:	60da      	str	r2, [r3, #12]

  return 0;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	371c      	adds	r7, #28
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	460b      	mov	r3, r1
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	32b0      	adds	r2, #176	; 0xb0
 800e164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e168:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d102      	bne.n	800e176 <SCSI_Read10+0x2a>
  {
    return -1;
 800e170:	f04f 33ff 	mov.w	r3, #4294967295
 800e174:	e090      	b.n	800e298 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	7a1b      	ldrb	r3, [r3, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f040 8082 	bne.w	800e284 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e186:	b25b      	sxtb	r3, r3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	db0a      	blt.n	800e1a2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e192:	2320      	movs	r3, #32
 800e194:	2205      	movs	r2, #5
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f7ff ff0b 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e19c:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a0:	e07a      	b.n	800e298 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d108      	bne.n	800e1be <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1ac:	7af9      	ldrb	r1, [r7, #11]
 800e1ae:	233a      	movs	r3, #58	; 0x3a
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7ff fefd 	bl	800dfb2 <SCSI_SenseCode>

      return -1;
 800e1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1bc:	e06c      	b.n	800e298 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	33b0      	adds	r3, #176	; 0xb0
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	7afa      	ldrb	r2, [r7, #11]
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	4798      	blx	r3
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d008      	beq.n	800e1ee <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1dc:	7af9      	ldrb	r1, [r7, #11]
 800e1de:	233a      	movs	r3, #58	; 0x3a
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f7ff fee5 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ec:	e054      	b.n	800e298 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3302      	adds	r3, #2
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3303      	adds	r3, #3
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3304      	adds	r3, #4
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e208:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	3205      	adds	r2, #5
 800e20e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e210:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3307      	adds	r3, #7
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	021b      	lsls	r3, r3, #8
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	3208      	adds	r2, #8
 800e224:	7812      	ldrb	r2, [r2, #0]
 800e226:	431a      	orrs	r2, r3
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e23a:	7af9      	ldrb	r1, [r7, #11]
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 fadc 	bl	800e7fa <SCSI_CheckAddressRange>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	da02      	bge.n	800e24e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e248:	f04f 33ff 	mov.w	r3, #4294967295
 800e24c:	e024      	b.n	800e298 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e25a:	6979      	ldr	r1, [r7, #20]
 800e25c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e260:	fb01 f303 	mul.w	r3, r1, r3
 800e264:	429a      	cmp	r2, r3
 800e266:	d00a      	beq.n	800e27e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e26e:	2320      	movs	r3, #32
 800e270:	2205      	movs	r2, #5
 800e272:	68f8      	ldr	r0, [r7, #12]
 800e274:	f7ff fe9d 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e278:	f04f 33ff 	mov.w	r3, #4294967295
 800e27c:	e00c      	b.n	800e298 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2202      	movs	r2, #2
 800e282:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e28a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e28c:	7afb      	ldrb	r3, [r7, #11]
 800e28e:	4619      	mov	r1, r3
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 fadf 	bl	800e854 <SCSI_ProcessRead>
 800e296:	4603      	mov	r3, r0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	32b0      	adds	r2, #176	; 0xb0
 800e2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <SCSI_Read12+0x2a>
  {
    return -1;
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c8:	e09a      	b.n	800e400 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	7a1b      	ldrb	r3, [r3, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f040 808c 	bne.w	800e3ec <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e2da:	b25b      	sxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	db0a      	blt.n	800e2f6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e2e6:	2320      	movs	r3, #32
 800e2e8:	2205      	movs	r2, #5
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff fe61 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f4:	e084      	b.n	800e400 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d108      	bne.n	800e312 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e300:	7af9      	ldrb	r1, [r7, #11]
 800e302:	233a      	movs	r3, #58	; 0x3a
 800e304:	2202      	movs	r2, #2
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f7ff fe53 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e30c:	f04f 33ff 	mov.w	r3, #4294967295
 800e310:	e076      	b.n	800e400 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	33b0      	adds	r3, #176	; 0xb0
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	7afa      	ldrb	r2, [r7, #11]
 800e326:	4610      	mov	r0, r2
 800e328:	4798      	blx	r3
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d008      	beq.n	800e342 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e330:	7af9      	ldrb	r1, [r7, #11]
 800e332:	233a      	movs	r3, #58	; 0x3a
 800e334:	2202      	movs	r2, #2
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7ff fe3b 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e33c:	f04f 33ff 	mov.w	r3, #4294967295
 800e340:	e05e      	b.n	800e400 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	3302      	adds	r3, #2
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3303      	adds	r3, #3
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e352:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3304      	adds	r3, #4
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e35c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	3205      	adds	r2, #5
 800e362:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e364:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3306      	adds	r3, #6
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3307      	adds	r3, #7
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e37c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3308      	adds	r3, #8
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e386:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	3209      	adds	r2, #9
 800e38c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e38e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3a2:	7af9      	ldrb	r1, [r7, #11]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 fa28 	bl	800e7fa <SCSI_CheckAddressRange>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	da02      	bge.n	800e3b6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b4:	e024      	b.n	800e400 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3c2:	6979      	ldr	r1, [r7, #20]
 800e3c4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e3c8:	fb01 f303 	mul.w	r3, r1, r3
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d00a      	beq.n	800e3e6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3d6:	2320      	movs	r3, #32
 800e3d8:	2205      	movs	r2, #5
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff fde9 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e4:	e00c      	b.n	800e400 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3f2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e3f4:	7afb      	ldrb	r3, [r7, #11]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 fa2b 	bl	800e854 <SCSI_ProcessRead>
 800e3fe:	4603      	mov	r3, r0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	460b      	mov	r3, r1
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	32b0      	adds	r2, #176	; 0xb0
 800e420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e424:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d102      	bne.n	800e432 <SCSI_Write10+0x2a>
  {
    return -1;
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	e0ba      	b.n	800e5a8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	7a1b      	ldrb	r3, [r3, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	f040 80b0 	bne.w	800e59c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10a      	bne.n	800e45c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e44c:	2320      	movs	r3, #32
 800e44e:	2205      	movs	r2, #5
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f7ff fdae 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e0a5      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e462:	b25b      	sxtb	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	da0a      	bge.n	800e47e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e46e:	2320      	movs	r3, #32
 800e470:	2205      	movs	r2, #5
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7ff fd9d 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e478:	f04f 33ff 	mov.w	r3, #4294967295
 800e47c:	e094      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	33b0      	adds	r3, #176	; 0xb0
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	4413      	add	r3, r2
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	7afa      	ldrb	r2, [r7, #11]
 800e492:	4610      	mov	r0, r2
 800e494:	4798      	blx	r3
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d008      	beq.n	800e4ae <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e49c:	7af9      	ldrb	r1, [r7, #11]
 800e49e:	233a      	movs	r3, #58	; 0x3a
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7ff fd85 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ac:	e07c      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	33b0      	adds	r3, #176	; 0xb0
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	7afa      	ldrb	r2, [r7, #11]
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	4798      	blx	r3
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d008      	beq.n	800e4de <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e4cc:	7af9      	ldrb	r1, [r7, #11]
 800e4ce:	2327      	movs	r3, #39	; 0x27
 800e4d0:	2202      	movs	r2, #2
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7ff fd6d 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	e064      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3302      	adds	r3, #2
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3303      	adds	r3, #3
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e4ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e4f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	3205      	adds	r2, #5
 800e4fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e500:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3307      	adds	r3, #7
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	3208      	adds	r2, #8
 800e514:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e516:	431a      	orrs	r2, r3
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e52a:	7af9      	ldrb	r1, [r7, #11]
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f964 	bl	800e7fa <SCSI_CheckAddressRange>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	da02      	bge.n	800e53e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e538:	f04f 33ff 	mov.w	r3, #4294967295
 800e53c:	e034      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e54a:	fb02 f303 	mul.w	r3, r2, r3
 800e54e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d00a      	beq.n	800e572 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e562:	2320      	movs	r3, #32
 800e564:	2205      	movs	r2, #5
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7ff fd23 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e56c:	f04f 33ff 	mov.w	r3, #4294967295
 800e570:	e01a      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e578:	bf28      	it	cs
 800e57a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e57e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2201      	movs	r2, #1
 800e584:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e586:	4b0a      	ldr	r3, [pc, #40]	; (800e5b0 <SCSI_Write10+0x1a8>)
 800e588:	7819      	ldrb	r1, [r3, #0]
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f103 0210 	add.w	r2, r3, #16
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f002 fa0d 	bl	80109b2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	e005      	b.n	800e5a8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800e59c:	7afb      	ldrb	r3, [r7, #11]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f000 f9dd 	bl	800e960 <SCSI_ProcessWrite>
 800e5a6:	4603      	mov	r3, r0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3718      	adds	r7, #24
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	24000077 	.word	0x24000077

0800e5b4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	32b0      	adds	r2, #176	; 0xb0
 800e5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d102      	bne.n	800e5de <SCSI_Write12+0x2a>
  {
    return -1;
 800e5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5dc:	e0ca      	b.n	800e774 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	7a1b      	ldrb	r3, [r3, #8]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 80c0 	bne.w	800e768 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10a      	bne.n	800e608 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5f8:	2320      	movs	r3, #32
 800e5fa:	2205      	movs	r2, #5
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f7ff fcd8 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e602:	f04f 33ff 	mov.w	r3, #4294967295
 800e606:	e0b5      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e60e:	b25b      	sxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	da0a      	bge.n	800e62a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e61a:	2320      	movs	r3, #32
 800e61c:	2205      	movs	r2, #5
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f7ff fcc7 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e624:	f04f 33ff 	mov.w	r3, #4294967295
 800e628:	e0a4      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	33b0      	adds	r3, #176	; 0xb0
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	7afa      	ldrb	r2, [r7, #11]
 800e63e:	4610      	mov	r0, r2
 800e640:	4798      	blx	r3
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e648:	7af9      	ldrb	r1, [r7, #11]
 800e64a:	233a      	movs	r3, #58	; 0x3a
 800e64c:	2202      	movs	r2, #2
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff fcaf 	bl	800dfb2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	2205      	movs	r2, #5
 800e658:	721a      	strb	r2, [r3, #8]
      return -1;
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295
 800e65e:	e089      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e666:	68fa      	ldr	r2, [r7, #12]
 800e668:	33b0      	adds	r3, #176	; 0xb0
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	7afa      	ldrb	r2, [r7, #11]
 800e674:	4610      	mov	r0, r2
 800e676:	4798      	blx	r3
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00b      	beq.n	800e696 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e67e:	7af9      	ldrb	r1, [r7, #11]
 800e680:	2327      	movs	r3, #39	; 0x27
 800e682:	2202      	movs	r2, #2
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f7ff fc94 	bl	800dfb2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2205      	movs	r2, #5
 800e68e:	721a      	strb	r2, [r3, #8]
      return -1;
 800e690:	f04f 33ff 	mov.w	r3, #4294967295
 800e694:	e06e      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3302      	adds	r3, #2
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3303      	adds	r3, #3
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e6b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	3205      	adds	r2, #5
 800e6b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e6b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3306      	adds	r3, #6
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3307      	adds	r3, #7
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e6d0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e6da:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	3209      	adds	r2, #9
 800e6e0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e6e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e6f6:	7af9      	ldrb	r1, [r7, #11]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f000 f87e 	bl	800e7fa <SCSI_CheckAddressRange>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	da02      	bge.n	800e70a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	e034      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e710:	697a      	ldr	r2, [r7, #20]
 800e712:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e716:	fb02 f303 	mul.w	r3, r2, r3
 800e71a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e722:	693a      	ldr	r2, [r7, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	d00a      	beq.n	800e73e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e72e:	2320      	movs	r3, #32
 800e730:	2205      	movs	r2, #5
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7ff fc3d 	bl	800dfb2 <SCSI_SenseCode>
      return -1;
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
 800e73c:	e01a      	b.n	800e774 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e744:	bf28      	it	cs
 800e746:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e74a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	2201      	movs	r2, #1
 800e750:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800e752:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <SCSI_Write12+0x1c8>)
 800e754:	7819      	ldrb	r1, [r3, #0]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f103 0210 	add.w	r2, r3, #16
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f002 f927 	bl	80109b2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e764:	2300      	movs	r3, #0
 800e766:	e005      	b.n	800e774 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800e768:	7afb      	ldrb	r3, [r7, #11]
 800e76a:	4619      	mov	r1, r3
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f000 f8f7 	bl	800e960 <SCSI_ProcessWrite>
 800e772:	4603      	mov	r3, r0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3718      	adds	r7, #24
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	24000077 	.word	0x24000077

0800e780 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	460b      	mov	r3, r1
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	32b0      	adds	r2, #176	; 0xb0
 800e798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <SCSI_Verify10+0x2a>
  {
    return -1;
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	e023      	b.n	800e7f2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	f003 0302 	and.w	r3, r3, #2
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d008      	beq.n	800e7ca <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e7b8:	7af9      	ldrb	r1, [r7, #11]
 800e7ba:	2324      	movs	r3, #36	; 0x24
 800e7bc:	2205      	movs	r2, #5
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff fbf7 	bl	800dfb2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c8:	e013      	b.n	800e7f2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e7d6:	7af9      	ldrb	r1, [r7, #11]
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f000 f80e 	bl	800e7fa <SCSI_CheckAddressRange>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	da02      	bge.n	800e7ea <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800e7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e8:	e003      	b.n	800e7f2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	60da      	str	r2, [r3, #12]

  return 0;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b086      	sub	sp, #24
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	60f8      	str	r0, [r7, #12]
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	603b      	str	r3, [r7, #0]
 800e806:	460b      	mov	r3, r1
 800e808:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	32b0      	adds	r2, #176	; 0xb0
 800e814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e818:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d102      	bne.n	800e826 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800e820:	f04f 33ff 	mov.w	r3, #4294967295
 800e824:	e011      	b.n	800e84a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	441a      	add	r2, r3
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e832:	429a      	cmp	r2, r3
 800e834:	d908      	bls.n	800e848 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e836:	7af9      	ldrb	r1, [r7, #11]
 800e838:	2321      	movs	r3, #33	; 0x21
 800e83a:	2205      	movs	r2, #5
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff fbb8 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	e000      	b.n	800e84a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e854:	b590      	push	{r4, r7, lr}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	460b      	mov	r3, r1
 800e85e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	32b0      	adds	r2, #176	; 0xb0
 800e86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d102      	bne.n	800e87c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800e876:	f04f 33ff 	mov.w	r3, #4294967295
 800e87a:	e06a      	b.n	800e952 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e888:	fb02 f303 	mul.w	r3, r2, r3
 800e88c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e894:	bf28      	it	cs
 800e896:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e89a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	33b0      	adds	r3, #176	; 0xb0
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	691c      	ldr	r4, [r3, #16]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f103 0110 	add.w	r1, r3, #16
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	78f8      	ldrb	r0, [r7, #3]
 800e8cc:	47a0      	blx	r4
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	da08      	bge.n	800e8e6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e8d4:	78f9      	ldrb	r1, [r7, #3]
 800e8d6:	2311      	movs	r3, #17
 800e8d8:	2204      	movs	r2, #4
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fb69 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800e8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e4:	e035      	b.n	800e952 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800e8e6:	4b1d      	ldr	r3, [pc, #116]	; (800e95c <SCSI_ProcessRead+0x108>)
 800e8e8:	7819      	ldrb	r1, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f103 0210 	add.w	r2, r3, #16
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f002 f83c 	bl	8010970 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e904:	4619      	mov	r1, r3
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	fbb3 f3f1 	udiv	r3, r3, r1
 800e90c:	441a      	add	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e920:	4619      	mov	r1, r3
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	fbb3 f3f1 	udiv	r3, r3, r1
 800e928:	1ad2      	subs	r2, r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e946:	2b00      	cmp	r3, #0
 800e948:	d102      	bne.n	800e950 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2203      	movs	r2, #3
 800e94e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	bd90      	pop	{r4, r7, pc}
 800e95a:	bf00      	nop
 800e95c:	24000076 	.word	0x24000076

0800e960 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	32b0      	adds	r2, #176	; 0xb0
 800e976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e97a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800e982:	f04f 33ff 	mov.w	r3, #4294967295
 800e986:	e07a      	b.n	800ea7e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e994:	fb02 f303 	mul.w	r3, r2, r3
 800e998:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9a0:	bf28      	it	cs
 800e9a2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e9a6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	33b0      	adds	r3, #176	; 0xb0
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	4413      	add	r3, r2
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	695c      	ldr	r4, [r3, #20]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f103 0110 	add.w	r1, r3, #16
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	78f8      	ldrb	r0, [r7, #3]
 800e9d8:	47a0      	blx	r4
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	da08      	bge.n	800e9f2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e9e0:	78f9      	ldrb	r1, [r7, #3]
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fae3 	bl	800dfb2 <SCSI_SenseCode>
    return -1;
 800e9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f0:	e045      	b.n	800ea7e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea06:	441a      	add	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea22:	1ad2      	subs	r2, r2, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	1ad2      	subs	r2, r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d104      	bne.n	800ea4e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ea44:	2100      	movs	r1, #0
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7fe fd14 	bl	800d474 <MSC_BOT_SendCSW>
 800ea4c:	e016      	b.n	800ea7c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ea5a:	fb02 f303 	mul.w	r3, r2, r3
 800ea5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea62:	bf28      	it	cs
 800ea64:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ea68:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ea6a:	4b07      	ldr	r3, [pc, #28]	; (800ea88 <SCSI_ProcessWrite+0x128>)
 800ea6c:	7819      	ldrb	r1, [r3, #0]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f103 0210 	add.w	r2, r3, #16
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f001 ff9b 	bl	80109b2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd90      	pop	{r4, r7, pc}
 800ea86:	bf00      	nop
 800ea88:	24000077 	.word	0x24000077

0800ea8c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b087      	sub	sp, #28
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	4613      	mov	r3, r2
 800ea98:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ea9a:	88fb      	ldrh	r3, [r7, #6]
 800ea9c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	e013      	b.n	800ead2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800eaaa:	8afa      	ldrh	r2, [r7, #22]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800eab0:	e00b      	b.n	800eaca <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800eab2:	8afb      	ldrh	r3, [r7, #22]
 800eab4:	3b01      	subs	r3, #1
 800eab6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800eab8:	8afb      	ldrh	r3, [r7, #22]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	441a      	add	r2, r3
 800eabe:	8afb      	ldrh	r3, [r7, #22]
 800eac0:	7811      	ldrb	r1, [r2, #0]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	4413      	add	r3, r2
 800eac6:	460a      	mov	r2, r1
 800eac8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800eaca:	8afb      	ldrh	r3, [r7, #22]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f0      	bne.n	800eab2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	371c      	adds	r7, #28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b086      	sub	sp, #24
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	60f8      	str	r0, [r7, #12]
 800eae6:	60b9      	str	r1, [r7, #8]
 800eae8:	4613      	mov	r3, r2
 800eaea:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eaf2:	2303      	movs	r3, #3
 800eaf4:	e01f      	b.n	800eb36 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	79fa      	ldrb	r2, [r7, #7]
 800eb28:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f001 fdc8 	bl	80106c0 <USBD_LL_Init>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b084      	sub	sp, #16
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb52:	2303      	movs	r3, #3
 800eb54:	e025      	b.n	800eba2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	32ae      	adds	r2, #174	; 0xae
 800eb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00f      	beq.n	800eb92 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	32ae      	adds	r2, #174	; 0xae
 800eb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb82:	f107 020e 	add.w	r2, r7, #14
 800eb86:	4610      	mov	r0, r2
 800eb88:	4798      	blx	r3
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eb98:	1c5a      	adds	r2, r3, #1
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b082      	sub	sp, #8
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f001 fdd4 	bl	8010760 <USBD_LL_Start>
 800ebb8:	4603      	mov	r3, r0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b083      	sub	sp, #12
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebca:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	78fa      	ldrb	r2, [r7, #3]
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	4798      	blx	r3
 800ec02:	4603      	mov	r3, r0
 800ec04:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	4798      	blx	r3
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ec36:	2303      	movs	r3, #3
 800ec38:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec54:	6839      	ldr	r1, [r7, #0]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f001 f909 	bl	800fe6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec78:	f003 031f 	and.w	r3, r3, #31
 800ec7c:	2b02      	cmp	r3, #2
 800ec7e:	d01a      	beq.n	800ecb6 <USBD_LL_SetupStage+0x72>
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d822      	bhi.n	800ecca <USBD_LL_SetupStage+0x86>
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <USBD_LL_SetupStage+0x4a>
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d00a      	beq.n	800eca2 <USBD_LL_SetupStage+0x5e>
 800ec8c:	e01d      	b.n	800ecca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fb60 	bl	800f35c <USBD_StdDevReq>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]
      break;
 800eca0:	e020      	b.n	800ece4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eca8:	4619      	mov	r1, r3
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fbc8 	bl	800f440 <USBD_StdItfReq>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecb4:	e016      	b.n	800ece4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fc2a 	bl	800f518 <USBD_StdEPReq>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc8:	e00c      	b.n	800ece4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f001 fdc0 	bl	801085e <USBD_LL_StallEP>
 800ecde:	4603      	mov	r3, r0
 800ece0:	73fb      	strb	r3, [r7, #15]
      break;
 800ece2:	bf00      	nop
  }

  return ret;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b086      	sub	sp, #24
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	60f8      	str	r0, [r7, #12]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	607a      	str	r2, [r7, #4]
 800ecfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ed00:	7afb      	ldrb	r3, [r7, #11]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d16e      	bne.n	800ede4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	f040 8098 	bne.w	800ee4a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	689a      	ldr	r2, [r3, #8]
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d913      	bls.n	800ed4e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	689a      	ldr	r2, [r3, #8]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	1ad2      	subs	r2, r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	bf28      	it	cs
 800ed40:	4613      	movcs	r3, r2
 800ed42:	461a      	mov	r2, r3
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f001 f968 	bl	801001c <USBD_CtlContinueRx>
 800ed4c:	e07d      	b.n	800ee4a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed54:	f003 031f 	and.w	r3, r3, #31
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d014      	beq.n	800ed86 <USBD_LL_DataOutStage+0x98>
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d81d      	bhi.n	800ed9c <USBD_LL_DataOutStage+0xae>
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <USBD_LL_DataOutStage+0x7c>
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d003      	beq.n	800ed70 <USBD_LL_DataOutStage+0x82>
 800ed68:	e018      	b.n	800ed9c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	75bb      	strb	r3, [r7, #22]
            break;
 800ed6e:	e018      	b.n	800eda2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	4619      	mov	r1, r3
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 fa5e 	bl	800f23c <USBD_CoreFindIF>
 800ed80:	4603      	mov	r3, r0
 800ed82:	75bb      	strb	r3, [r7, #22]
            break;
 800ed84:	e00d      	b.n	800eda2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	4619      	mov	r1, r3
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f000 fa60 	bl	800f256 <USBD_CoreFindEP>
 800ed96:	4603      	mov	r3, r0
 800ed98:	75bb      	strb	r3, [r7, #22]
            break;
 800ed9a:	e002      	b.n	800eda2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	75bb      	strb	r3, [r7, #22]
            break;
 800eda0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eda2:	7dbb      	ldrb	r3, [r7, #22]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d119      	bne.n	800eddc <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d113      	bne.n	800eddc <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800edb4:	7dba      	ldrb	r2, [r7, #22]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	32ae      	adds	r2, #174	; 0xae
 800edba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00b      	beq.n	800eddc <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800edc4:	7dba      	ldrb	r2, [r7, #22]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800edcc:	7dba      	ldrb	r2, [r7, #22]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	32ae      	adds	r2, #174	; 0xae
 800edd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f001 f92e 	bl	801003e <USBD_CtlSendStatus>
 800ede2:	e032      	b.n	800ee4a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ede4:	7afb      	ldrb	r3, [r7, #11]
 800ede6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edea:	b2db      	uxtb	r3, r3
 800edec:	4619      	mov	r1, r3
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f000 fa31 	bl	800f256 <USBD_CoreFindEP>
 800edf4:	4603      	mov	r3, r0
 800edf6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edf8:	7dbb      	ldrb	r3, [r7, #22]
 800edfa:	2bff      	cmp	r3, #255	; 0xff
 800edfc:	d025      	beq.n	800ee4a <USBD_LL_DataOutStage+0x15c>
 800edfe:	7dbb      	ldrb	r3, [r7, #22]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d122      	bne.n	800ee4a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d117      	bne.n	800ee40 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ee10:	7dba      	ldrb	r2, [r7, #22]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	32ae      	adds	r2, #174	; 0xae
 800ee16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1a:	699b      	ldr	r3, [r3, #24]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00f      	beq.n	800ee40 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ee20:	7dba      	ldrb	r2, [r7, #22]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ee28:	7dba      	ldrb	r2, [r7, #22]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	32ae      	adds	r2, #174	; 0xae
 800ee2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	7afa      	ldrb	r2, [r7, #11]
 800ee36:	4611      	mov	r1, r2
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	4798      	blx	r3
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
 800ee48:	e000      	b.n	800ee4c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3718      	adds	r7, #24
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	607a      	str	r2, [r7, #4]
 800ee60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ee62:	7afb      	ldrb	r3, [r7, #11]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d16f      	bne.n	800ef48 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3314      	adds	r3, #20
 800ee6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d15a      	bne.n	800ef2e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	689a      	ldr	r2, [r3, #8]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d914      	bls.n	800eeae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	689a      	ldr	r2, [r3, #8]
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	1ad2      	subs	r2, r2, r3
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	461a      	mov	r2, r3
 800ee98:	6879      	ldr	r1, [r7, #4]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f001 f8ad 	bl	800fffa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eea0:	2300      	movs	r3, #0
 800eea2:	2200      	movs	r2, #0
 800eea4:	2100      	movs	r1, #0
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f001 fd83 	bl	80109b2 <USBD_LL_PrepareReceive>
 800eeac:	e03f      	b.n	800ef2e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	68da      	ldr	r2, [r3, #12]
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d11c      	bne.n	800eef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d316      	bcc.n	800eef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d20f      	bcs.n	800eef4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eed4:	2200      	movs	r2, #0
 800eed6:	2100      	movs	r1, #0
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f001 f88e 	bl	800fffa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eee6:	2300      	movs	r3, #0
 800eee8:	2200      	movs	r2, #0
 800eeea:	2100      	movs	r1, #0
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f001 fd60 	bl	80109b2 <USBD_LL_PrepareReceive>
 800eef2:	e01c      	b.n	800ef2e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d10f      	bne.n	800ef20 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d009      	beq.n	800ef20 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef20:	2180      	movs	r1, #128	; 0x80
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f001 fc9b 	bl	801085e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f001 f89b 	bl	8010064 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d03a      	beq.n	800efae <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7ff fe42 	bl	800ebc2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef46:	e032      	b.n	800efae <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	4619      	mov	r1, r3
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f000 f97f 	bl	800f256 <USBD_CoreFindEP>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
 800ef5e:	2bff      	cmp	r3, #255	; 0xff
 800ef60:	d025      	beq.n	800efae <USBD_LL_DataInStage+0x15a>
 800ef62:	7dfb      	ldrb	r3, [r7, #23]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d122      	bne.n	800efae <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d11c      	bne.n	800efae <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ef74:	7dfa      	ldrb	r2, [r7, #23]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	32ae      	adds	r2, #174	; 0xae
 800ef7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef7e:	695b      	ldr	r3, [r3, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d014      	beq.n	800efae <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ef84:	7dfa      	ldrb	r2, [r7, #23]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ef8c:	7dfa      	ldrb	r2, [r7, #23]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	32ae      	adds	r2, #174	; 0xae
 800ef92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef96:	695b      	ldr	r3, [r3, #20]
 800ef98:	7afa      	ldrb	r2, [r7, #11]
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	4798      	blx	r3
 800efa0:	4603      	mov	r3, r0
 800efa2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800efa4:	7dbb      	ldrb	r3, [r7, #22]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800efaa:	7dbb      	ldrb	r3, [r7, #22]
 800efac:	e000      	b.n	800efb0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3718      	adds	r7, #24
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d014      	beq.n	800f01e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00e      	beq.n	800f01e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	6852      	ldr	r2, [r2, #4]
 800f00c:	b2d2      	uxtb	r2, r2
 800f00e:	4611      	mov	r1, r2
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	4798      	blx	r3
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f01a:	2303      	movs	r3, #3
 800f01c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f01e:	2340      	movs	r3, #64	; 0x40
 800f020:	2200      	movs	r2, #0
 800f022:	2100      	movs	r1, #0
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f001 fbb6 	bl	8010796 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2240      	movs	r2, #64	; 0x40
 800f036:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f03a:	2340      	movs	r3, #64	; 0x40
 800f03c:	2200      	movs	r2, #0
 800f03e:	2180      	movs	r1, #128	; 0x80
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f001 fba8 	bl	8010796 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2240      	movs	r2, #64	; 0x40
 800f050:	621a      	str	r2, [r3, #32]

  return ret;
 800f052:	7bfb      	ldrb	r3, [r7, #15]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	78fa      	ldrb	r2, [r7, #3]
 800f06c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2204      	movs	r2, #4
 800f096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b04      	cmp	r3, #4
 800f0ba:	d106      	bne.n	800f0ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f0c2:	b2da      	uxtb	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d110      	bne.n	800f10e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00b      	beq.n	800f10e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d005      	beq.n	800f10e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	32ae      	adds	r2, #174	; 0xae
 800f12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f136:	2303      	movs	r3, #3
 800f138:	e01c      	b.n	800f174 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b03      	cmp	r3, #3
 800f144:	d115      	bne.n	800f172 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	32ae      	adds	r2, #174	; 0xae
 800f150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00b      	beq.n	800f172 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	32ae      	adds	r2, #174	; 0xae
 800f164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	78fa      	ldrb	r2, [r7, #3]
 800f16c:	4611      	mov	r1, r2
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	460b      	mov	r3, r1
 800f186:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	32ae      	adds	r2, #174	; 0xae
 800f192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f19a:	2303      	movs	r3, #3
 800f19c:	e01c      	b.n	800f1d8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d115      	bne.n	800f1d6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	32ae      	adds	r2, #174	; 0xae
 800f1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	32ae      	adds	r2, #174	; 0xae
 800f1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ce:	78fa      	ldrb	r2, [r7, #3]
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2201      	movs	r2, #1
 800f206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00e      	beq.n	800f232 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	6852      	ldr	r2, [r2, #4]
 800f220:	b2d2      	uxtb	r2, r2
 800f222:	4611      	mov	r1, r2
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	4798      	blx	r3
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f22e:	2303      	movs	r3, #3
 800f230:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f232:	7bfb      	ldrb	r3, [r7, #15]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	460b      	mov	r3, r1
 800f246:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f248:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f256:	b480      	push	{r7}
 800f258:	b083      	sub	sp, #12
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	460b      	mov	r3, r1
 800f260:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f262:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f264:	4618      	mov	r0, r3
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f284:	2300      	movs	r3, #0
 800f286:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	885b      	ldrh	r3, [r3, #2]
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	b29b      	uxth	r3, r3
 800f294:	429a      	cmp	r2, r3
 800f296:	d920      	bls.n	800f2da <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f2a0:	e013      	b.n	800f2ca <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f2a2:	f107 030a 	add.w	r3, r7, #10
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6978      	ldr	r0, [r7, #20]
 800f2aa:	f000 f81b 	bl	800f2e4 <USBD_GetNextDesc>
 800f2ae:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	785b      	ldrb	r3, [r3, #1]
 800f2b4:	2b05      	cmp	r3, #5
 800f2b6:	d108      	bne.n	800f2ca <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	789b      	ldrb	r3, [r3, #2]
 800f2c0:	78fa      	ldrb	r2, [r7, #3]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d008      	beq.n	800f2d8 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	885b      	ldrh	r3, [r3, #2]
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	897b      	ldrh	r3, [r7, #10]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d8e5      	bhi.n	800f2a2 <USBD_GetEpDesc+0x32>
 800f2d6:	e000      	b.n	800f2da <USBD_GetEpDesc+0x6a>
          break;
 800f2d8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f2da:	693b      	ldr	r3, [r7, #16]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3718      	adds	r7, #24
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	881a      	ldrh	r2, [r3, #0]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	461a      	mov	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4413      	add	r3, r2
 800f30e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f310:	68fb      	ldr	r3, [r7, #12]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3714      	adds	r7, #20
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f31e:	b480      	push	{r7}
 800f320:	b087      	sub	sp, #28
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	3301      	adds	r3, #1
 800f334:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f33c:	8a3b      	ldrh	r3, [r7, #16]
 800f33e:	021b      	lsls	r3, r3, #8
 800f340:	b21a      	sxth	r2, r3
 800f342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f346:	4313      	orrs	r3, r2
 800f348:	b21b      	sxth	r3, r3
 800f34a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f34c:	89fb      	ldrh	r3, [r7, #14]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	371c      	adds	r7, #28
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
	...

0800f35c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f372:	2b40      	cmp	r3, #64	; 0x40
 800f374:	d005      	beq.n	800f382 <USBD_StdDevReq+0x26>
 800f376:	2b40      	cmp	r3, #64	; 0x40
 800f378:	d857      	bhi.n	800f42a <USBD_StdDevReq+0xce>
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00f      	beq.n	800f39e <USBD_StdDevReq+0x42>
 800f37e:	2b20      	cmp	r3, #32
 800f380:	d153      	bne.n	800f42a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	32ae      	adds	r2, #174	; 0xae
 800f38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	4798      	blx	r3
 800f398:	4603      	mov	r3, r0
 800f39a:	73fb      	strb	r3, [r7, #15]
      break;
 800f39c:	e04a      	b.n	800f434 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	785b      	ldrb	r3, [r3, #1]
 800f3a2:	2b09      	cmp	r3, #9
 800f3a4:	d83b      	bhi.n	800f41e <USBD_StdDevReq+0xc2>
 800f3a6:	a201      	add	r2, pc, #4	; (adr r2, 800f3ac <USBD_StdDevReq+0x50>)
 800f3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ac:	0800f401 	.word	0x0800f401
 800f3b0:	0800f415 	.word	0x0800f415
 800f3b4:	0800f41f 	.word	0x0800f41f
 800f3b8:	0800f40b 	.word	0x0800f40b
 800f3bc:	0800f41f 	.word	0x0800f41f
 800f3c0:	0800f3df 	.word	0x0800f3df
 800f3c4:	0800f3d5 	.word	0x0800f3d5
 800f3c8:	0800f41f 	.word	0x0800f41f
 800f3cc:	0800f3f7 	.word	0x0800f3f7
 800f3d0:	0800f3e9 	.word	0x0800f3e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fa3c 	bl	800f854 <USBD_GetDescriptor>
          break;
 800f3dc:	e024      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f3de:	6839      	ldr	r1, [r7, #0]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fba1 	bl	800fb28 <USBD_SetAddress>
          break;
 800f3e6:	e01f      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fbe0 	bl	800fbb0 <USBD_SetConfig>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73fb      	strb	r3, [r7, #15]
          break;
 800f3f4:	e018      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 fc83 	bl	800fd04 <USBD_GetConfig>
          break;
 800f3fe:	e013      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f400:	6839      	ldr	r1, [r7, #0]
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fcb4 	bl	800fd70 <USBD_GetStatus>
          break;
 800f408:	e00e      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fce3 	bl	800fdd8 <USBD_SetFeature>
          break;
 800f412:	e009      	b.n	800f428 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fd07 	bl	800fe2a <USBD_ClrFeature>
          break;
 800f41c:	e004      	b.n	800f428 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 fd5e 	bl	800fee2 <USBD_CtlError>
          break;
 800f426:	bf00      	nop
      }
      break;
 800f428:	e004      	b.n	800f434 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 fd58 	bl	800fee2 <USBD_CtlError>
      break;
 800f432:	bf00      	nop
  }

  return ret;
 800f434:	7bfb      	ldrb	r3, [r7, #15]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop

0800f440 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f44a:	2300      	movs	r3, #0
 800f44c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f456:	2b40      	cmp	r3, #64	; 0x40
 800f458:	d005      	beq.n	800f466 <USBD_StdItfReq+0x26>
 800f45a:	2b40      	cmp	r3, #64	; 0x40
 800f45c:	d852      	bhi.n	800f504 <USBD_StdItfReq+0xc4>
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <USBD_StdItfReq+0x26>
 800f462:	2b20      	cmp	r3, #32
 800f464:	d14e      	bne.n	800f504 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	3b01      	subs	r3, #1
 800f470:	2b02      	cmp	r3, #2
 800f472:	d840      	bhi.n	800f4f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	889b      	ldrh	r3, [r3, #4]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d836      	bhi.n	800f4ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	889b      	ldrh	r3, [r3, #4]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7ff fed8 	bl	800f23c <USBD_CoreFindIF>
 800f48c:	4603      	mov	r3, r0
 800f48e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2bff      	cmp	r3, #255	; 0xff
 800f494:	d01d      	beq.n	800f4d2 <USBD_StdItfReq+0x92>
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d11a      	bne.n	800f4d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f49c:	7bba      	ldrb	r2, [r7, #14]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	32ae      	adds	r2, #174	; 0xae
 800f4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00f      	beq.n	800f4cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f4ac:	7bba      	ldrb	r2, [r7, #14]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4b4:	7bba      	ldrb	r2, [r7, #14]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	32ae      	adds	r2, #174	; 0xae
 800f4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	4798      	blx	r3
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4ca:	e004      	b.n	800f4d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4d0:	e001      	b.n	800f4d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	88db      	ldrh	r3, [r3, #6]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d110      	bne.n	800f500 <USBD_StdItfReq+0xc0>
 800f4de:	7bfb      	ldrb	r3, [r7, #15]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10d      	bne.n	800f500 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fdaa 	bl	801003e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f4ea:	e009      	b.n	800f500 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fcf7 	bl	800fee2 <USBD_CtlError>
          break;
 800f4f4:	e004      	b.n	800f500 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 fcf2 	bl	800fee2 <USBD_CtlError>
          break;
 800f4fe:	e000      	b.n	800f502 <USBD_StdItfReq+0xc2>
          break;
 800f500:	bf00      	nop
      }
      break;
 800f502:	e004      	b.n	800f50e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fceb 	bl	800fee2 <USBD_CtlError>
      break;
 800f50c:	bf00      	nop
  }

  return ret;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	889b      	ldrh	r3, [r3, #4]
 800f52a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f534:	2b40      	cmp	r3, #64	; 0x40
 800f536:	d007      	beq.n	800f548 <USBD_StdEPReq+0x30>
 800f538:	2b40      	cmp	r3, #64	; 0x40
 800f53a:	f200 817f 	bhi.w	800f83c <USBD_StdEPReq+0x324>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d02a      	beq.n	800f598 <USBD_StdEPReq+0x80>
 800f542:	2b20      	cmp	r3, #32
 800f544:	f040 817a 	bne.w	800f83c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f548:	7bbb      	ldrb	r3, [r7, #14]
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7ff fe82 	bl	800f256 <USBD_CoreFindEP>
 800f552:	4603      	mov	r3, r0
 800f554:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f556:	7b7b      	ldrb	r3, [r7, #13]
 800f558:	2bff      	cmp	r3, #255	; 0xff
 800f55a:	f000 8174 	beq.w	800f846 <USBD_StdEPReq+0x32e>
 800f55e:	7b7b      	ldrb	r3, [r7, #13]
 800f560:	2b00      	cmp	r3, #0
 800f562:	f040 8170 	bne.w	800f846 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f566:	7b7a      	ldrb	r2, [r7, #13]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f56e:	7b7a      	ldrb	r2, [r7, #13]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	32ae      	adds	r2, #174	; 0xae
 800f574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 8163 	beq.w	800f846 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f580:	7b7a      	ldrb	r2, [r7, #13]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	32ae      	adds	r2, #174	; 0xae
 800f586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	4798      	blx	r3
 800f592:	4603      	mov	r3, r0
 800f594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f596:	e156      	b.n	800f846 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	2b03      	cmp	r3, #3
 800f59e:	d008      	beq.n	800f5b2 <USBD_StdEPReq+0x9a>
 800f5a0:	2b03      	cmp	r3, #3
 800f5a2:	f300 8145 	bgt.w	800f830 <USBD_StdEPReq+0x318>
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f000 809b 	beq.w	800f6e2 <USBD_StdEPReq+0x1ca>
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d03c      	beq.n	800f62a <USBD_StdEPReq+0x112>
 800f5b0:	e13e      	b.n	800f830 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b02      	cmp	r3, #2
 800f5bc:	d002      	beq.n	800f5c4 <USBD_StdEPReq+0xac>
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d016      	beq.n	800f5f0 <USBD_StdEPReq+0xd8>
 800f5c2:	e02c      	b.n	800f61e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5c4:	7bbb      	ldrb	r3, [r7, #14]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00d      	beq.n	800f5e6 <USBD_StdEPReq+0xce>
 800f5ca:	7bbb      	ldrb	r3, [r7, #14]
 800f5cc:	2b80      	cmp	r3, #128	; 0x80
 800f5ce:	d00a      	beq.n	800f5e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f001 f942 	bl	801085e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5da:	2180      	movs	r1, #128	; 0x80
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f001 f93e 	bl	801085e <USBD_LL_StallEP>
 800f5e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f5e4:	e020      	b.n	800f628 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fc7a 	bl	800fee2 <USBD_CtlError>
              break;
 800f5ee:	e01b      	b.n	800f628 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	885b      	ldrh	r3, [r3, #2]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10e      	bne.n	800f616 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00b      	beq.n	800f616 <USBD_StdEPReq+0xfe>
 800f5fe:	7bbb      	ldrb	r3, [r7, #14]
 800f600:	2b80      	cmp	r3, #128	; 0x80
 800f602:	d008      	beq.n	800f616 <USBD_StdEPReq+0xfe>
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	88db      	ldrh	r3, [r3, #6]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f60c:	7bbb      	ldrb	r3, [r7, #14]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f001 f924 	bl	801085e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fd11 	bl	801003e <USBD_CtlSendStatus>

              break;
 800f61c:	e004      	b.n	800f628 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fc5e 	bl	800fee2 <USBD_CtlError>
              break;
 800f626:	bf00      	nop
          }
          break;
 800f628:	e107      	b.n	800f83a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f630:	b2db      	uxtb	r3, r3
 800f632:	2b02      	cmp	r3, #2
 800f634:	d002      	beq.n	800f63c <USBD_StdEPReq+0x124>
 800f636:	2b03      	cmp	r3, #3
 800f638:	d016      	beq.n	800f668 <USBD_StdEPReq+0x150>
 800f63a:	e04b      	b.n	800f6d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f63c:	7bbb      	ldrb	r3, [r7, #14]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d00d      	beq.n	800f65e <USBD_StdEPReq+0x146>
 800f642:	7bbb      	ldrb	r3, [r7, #14]
 800f644:	2b80      	cmp	r3, #128	; 0x80
 800f646:	d00a      	beq.n	800f65e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f001 f906 	bl	801085e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f652:	2180      	movs	r1, #128	; 0x80
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f001 f902 	bl	801085e <USBD_LL_StallEP>
 800f65a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f65c:	e040      	b.n	800f6e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f65e:	6839      	ldr	r1, [r7, #0]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fc3e 	bl	800fee2 <USBD_CtlError>
              break;
 800f666:	e03b      	b.n	800f6e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	885b      	ldrh	r3, [r3, #2]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d136      	bne.n	800f6de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f670:	7bbb      	ldrb	r3, [r7, #14]
 800f672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f676:	2b00      	cmp	r3, #0
 800f678:	d004      	beq.n	800f684 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f67a:	7bbb      	ldrb	r3, [r7, #14]
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f001 f90c 	bl	801089c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 fcda 	bl	801003e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f68a:	7bbb      	ldrb	r3, [r7, #14]
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7ff fde1 	bl	800f256 <USBD_CoreFindEP>
 800f694:	4603      	mov	r3, r0
 800f696:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f698:	7b7b      	ldrb	r3, [r7, #13]
 800f69a:	2bff      	cmp	r3, #255	; 0xff
 800f69c:	d01f      	beq.n	800f6de <USBD_StdEPReq+0x1c6>
 800f69e:	7b7b      	ldrb	r3, [r7, #13]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d11c      	bne.n	800f6de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f6a4:	7b7a      	ldrb	r2, [r7, #13]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f6ac:	7b7a      	ldrb	r2, [r7, #13]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	32ae      	adds	r2, #174	; 0xae
 800f6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d010      	beq.n	800f6de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6bc:	7b7a      	ldrb	r2, [r7, #13]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	32ae      	adds	r2, #174	; 0xae
 800f6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	4798      	blx	r3
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f6d2:	e004      	b.n	800f6de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fc03 	bl	800fee2 <USBD_CtlError>
              break;
 800f6dc:	e000      	b.n	800f6e0 <USBD_StdEPReq+0x1c8>
              break;
 800f6de:	bf00      	nop
          }
          break;
 800f6e0:	e0ab      	b.n	800f83a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d002      	beq.n	800f6f4 <USBD_StdEPReq+0x1dc>
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d032      	beq.n	800f758 <USBD_StdEPReq+0x240>
 800f6f2:	e097      	b.n	800f824 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6f4:	7bbb      	ldrb	r3, [r7, #14]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d007      	beq.n	800f70a <USBD_StdEPReq+0x1f2>
 800f6fa:	7bbb      	ldrb	r3, [r7, #14]
 800f6fc:	2b80      	cmp	r3, #128	; 0x80
 800f6fe:	d004      	beq.n	800f70a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fbed 	bl	800fee2 <USBD_CtlError>
                break;
 800f708:	e091      	b.n	800f82e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	da0b      	bge.n	800f72a <USBD_StdEPReq+0x212>
 800f712:	7bbb      	ldrb	r3, [r7, #14]
 800f714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f718:	4613      	mov	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4413      	add	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	3310      	adds	r3, #16
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	4413      	add	r3, r2
 800f726:	3304      	adds	r3, #4
 800f728:	e00b      	b.n	800f742 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f72a:	7bbb      	ldrb	r3, [r7, #14]
 800f72c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f730:	4613      	mov	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	4413      	add	r3, r2
 800f740:	3304      	adds	r3, #4
 800f742:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2202      	movs	r2, #2
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fc37 	bl	800ffc4 <USBD_CtlSendData>
              break;
 800f756:	e06a      	b.n	800f82e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	da11      	bge.n	800f784 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f760:	7bbb      	ldrb	r3, [r7, #14]
 800f762:	f003 020f 	and.w	r2, r3, #15
 800f766:	6879      	ldr	r1, [r7, #4]
 800f768:	4613      	mov	r3, r2
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	4413      	add	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	440b      	add	r3, r1
 800f772:	3324      	adds	r3, #36	; 0x24
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d117      	bne.n	800f7aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fbb0 	bl	800fee2 <USBD_CtlError>
                  break;
 800f782:	e054      	b.n	800f82e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f784:	7bbb      	ldrb	r3, [r7, #14]
 800f786:	f003 020f 	and.w	r2, r3, #15
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	4613      	mov	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4413      	add	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	440b      	add	r3, r1
 800f796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f79a:	881b      	ldrh	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d104      	bne.n	800f7aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f7a0:	6839      	ldr	r1, [r7, #0]
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 fb9d 	bl	800fee2 <USBD_CtlError>
                  break;
 800f7a8:	e041      	b.n	800f82e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	da0b      	bge.n	800f7ca <USBD_StdEPReq+0x2b2>
 800f7b2:	7bbb      	ldrb	r3, [r7, #14]
 800f7b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4413      	add	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	3310      	adds	r3, #16
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	4413      	add	r3, r2
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	e00b      	b.n	800f7e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4413      	add	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	4413      	add	r3, r2
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d002      	beq.n	800f7f0 <USBD_StdEPReq+0x2d8>
 800f7ea:	7bbb      	ldrb	r3, [r7, #14]
 800f7ec:	2b80      	cmp	r3, #128	; 0x80
 800f7ee:	d103      	bne.n	800f7f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]
 800f7f6:	e00e      	b.n	800f816 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f001 f86c 	bl	80108da <USBD_LL_IsStallEP>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d003      	beq.n	800f810 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	2201      	movs	r2, #1
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e002      	b.n	800f816 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2200      	movs	r2, #0
 800f814:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2202      	movs	r2, #2
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fbd1 	bl	800ffc4 <USBD_CtlSendData>
              break;
 800f822:	e004      	b.n	800f82e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f824:	6839      	ldr	r1, [r7, #0]
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fb5b 	bl	800fee2 <USBD_CtlError>
              break;
 800f82c:	bf00      	nop
          }
          break;
 800f82e:	e004      	b.n	800f83a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f830:	6839      	ldr	r1, [r7, #0]
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fb55 	bl	800fee2 <USBD_CtlError>
          break;
 800f838:	bf00      	nop
      }
      break;
 800f83a:	e005      	b.n	800f848 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 fb4f 	bl	800fee2 <USBD_CtlError>
      break;
 800f844:	e000      	b.n	800f848 <USBD_StdEPReq+0x330>
      break;
 800f846:	bf00      	nop
  }

  return ret;
 800f848:	7bfb      	ldrb	r3, [r7, #15]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f85e:	2300      	movs	r3, #0
 800f860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	0a1b      	lsrs	r3, r3, #8
 800f870:	b29b      	uxth	r3, r3
 800f872:	3b01      	subs	r3, #1
 800f874:	2b06      	cmp	r3, #6
 800f876:	f200 8128 	bhi.w	800faca <USBD_GetDescriptor+0x276>
 800f87a:	a201      	add	r2, pc, #4	; (adr r2, 800f880 <USBD_GetDescriptor+0x2c>)
 800f87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f880:	0800f89d 	.word	0x0800f89d
 800f884:	0800f8b5 	.word	0x0800f8b5
 800f888:	0800f8f5 	.word	0x0800f8f5
 800f88c:	0800facb 	.word	0x0800facb
 800f890:	0800facb 	.word	0x0800facb
 800f894:	0800fa6b 	.word	0x0800fa6b
 800f898:	0800fa97 	.word	0x0800fa97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	7c12      	ldrb	r2, [r2, #16]
 800f8a8:	f107 0108 	add.w	r1, r7, #8
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	4798      	blx	r3
 800f8b0:	60f8      	str	r0, [r7, #12]
      break;
 800f8b2:	e112      	b.n	800fada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	7c1b      	ldrb	r3, [r3, #16]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d10d      	bne.n	800f8d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c4:	f107 0208 	add.w	r2, r7, #8
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
 800f8cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	2202      	movs	r2, #2
 800f8d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f8d6:	e100      	b.n	800fada <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e0:	f107 0208 	add.w	r2, r7, #8
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4798      	blx	r3
 800f8e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	701a      	strb	r2, [r3, #0]
      break;
 800f8f2:	e0f2      	b.n	800fada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	885b      	ldrh	r3, [r3, #2]
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b05      	cmp	r3, #5
 800f8fc:	f200 80ac 	bhi.w	800fa58 <USBD_GetDescriptor+0x204>
 800f900:	a201      	add	r2, pc, #4	; (adr r2, 800f908 <USBD_GetDescriptor+0xb4>)
 800f902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f906:	bf00      	nop
 800f908:	0800f921 	.word	0x0800f921
 800f90c:	0800f955 	.word	0x0800f955
 800f910:	0800f989 	.word	0x0800f989
 800f914:	0800f9bd 	.word	0x0800f9bd
 800f918:	0800f9f1 	.word	0x0800f9f1
 800f91c:	0800fa25 	.word	0x0800fa25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00b      	beq.n	800f944 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	7c12      	ldrb	r2, [r2, #16]
 800f938:	f107 0108 	add.w	r1, r7, #8
 800f93c:	4610      	mov	r0, r2
 800f93e:	4798      	blx	r3
 800f940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f942:	e091      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f944:	6839      	ldr	r1, [r7, #0]
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 facb 	bl	800fee2 <USBD_CtlError>
            err++;
 800f94c:	7afb      	ldrb	r3, [r7, #11]
 800f94e:	3301      	adds	r3, #1
 800f950:	72fb      	strb	r3, [r7, #11]
          break;
 800f952:	e089      	b.n	800fa68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00b      	beq.n	800f978 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	7c12      	ldrb	r2, [r2, #16]
 800f96c:	f107 0108 	add.w	r1, r7, #8
 800f970:	4610      	mov	r0, r2
 800f972:	4798      	blx	r3
 800f974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f976:	e077      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 fab1 	bl	800fee2 <USBD_CtlError>
            err++;
 800f980:	7afb      	ldrb	r3, [r7, #11]
 800f982:	3301      	adds	r3, #1
 800f984:	72fb      	strb	r3, [r7, #11]
          break;
 800f986:	e06f      	b.n	800fa68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00b      	beq.n	800f9ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	7c12      	ldrb	r2, [r2, #16]
 800f9a0:	f107 0108 	add.w	r1, r7, #8
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	4798      	blx	r3
 800f9a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9aa:	e05d      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9ac:	6839      	ldr	r1, [r7, #0]
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fa97 	bl	800fee2 <USBD_CtlError>
            err++;
 800f9b4:	7afb      	ldrb	r3, [r7, #11]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f9ba:	e055      	b.n	800fa68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d00b      	beq.n	800f9e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	7c12      	ldrb	r2, [r2, #16]
 800f9d4:	f107 0108 	add.w	r1, r7, #8
 800f9d8:	4610      	mov	r0, r2
 800f9da:	4798      	blx	r3
 800f9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9de:	e043      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 fa7d 	bl	800fee2 <USBD_CtlError>
            err++;
 800f9e8:	7afb      	ldrb	r3, [r7, #11]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f9ee:	e03b      	b.n	800fa68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00b      	beq.n	800fa14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	7c12      	ldrb	r2, [r2, #16]
 800fa08:	f107 0108 	add.w	r1, r7, #8
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	4798      	blx	r3
 800fa10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa12:	e029      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa14:	6839      	ldr	r1, [r7, #0]
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 fa63 	bl	800fee2 <USBD_CtlError>
            err++;
 800fa1c:	7afb      	ldrb	r3, [r7, #11]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	72fb      	strb	r3, [r7, #11]
          break;
 800fa22:	e021      	b.n	800fa68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa2a:	699b      	ldr	r3, [r3, #24]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00b      	beq.n	800fa48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	7c12      	ldrb	r2, [r2, #16]
 800fa3c:	f107 0108 	add.w	r1, r7, #8
 800fa40:	4610      	mov	r0, r2
 800fa42:	4798      	blx	r3
 800fa44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa46:	e00f      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fa49 	bl	800fee2 <USBD_CtlError>
            err++;
 800fa50:	7afb      	ldrb	r3, [r7, #11]
 800fa52:	3301      	adds	r3, #1
 800fa54:	72fb      	strb	r3, [r7, #11]
          break;
 800fa56:	e007      	b.n	800fa68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fa41 	bl	800fee2 <USBD_CtlError>
          err++;
 800fa60:	7afb      	ldrb	r3, [r7, #11]
 800fa62:	3301      	adds	r3, #1
 800fa64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fa66:	bf00      	nop
      }
      break;
 800fa68:	e037      	b.n	800fada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	7c1b      	ldrb	r3, [r3, #16]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d109      	bne.n	800fa86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa7a:	f107 0208 	add.w	r2, r7, #8
 800fa7e:	4610      	mov	r0, r2
 800fa80:	4798      	blx	r3
 800fa82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa84:	e029      	b.n	800fada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fa2a 	bl	800fee2 <USBD_CtlError>
        err++;
 800fa8e:	7afb      	ldrb	r3, [r7, #11]
 800fa90:	3301      	adds	r3, #1
 800fa92:	72fb      	strb	r3, [r7, #11]
      break;
 800fa94:	e021      	b.n	800fada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	7c1b      	ldrb	r3, [r3, #16]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10d      	bne.n	800faba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa6:	f107 0208 	add.w	r2, r7, #8
 800faaa:	4610      	mov	r0, r2
 800faac:	4798      	blx	r3
 800faae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	3301      	adds	r3, #1
 800fab4:	2207      	movs	r2, #7
 800fab6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fab8:	e00f      	b.n	800fada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fa10 	bl	800fee2 <USBD_CtlError>
        err++;
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	3301      	adds	r3, #1
 800fac6:	72fb      	strb	r3, [r7, #11]
      break;
 800fac8:	e007      	b.n	800fada <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fa08 	bl	800fee2 <USBD_CtlError>
      err++;
 800fad2:	7afb      	ldrb	r3, [r7, #11]
 800fad4:	3301      	adds	r3, #1
 800fad6:	72fb      	strb	r3, [r7, #11]
      break;
 800fad8:	bf00      	nop
  }

  if (err != 0U)
 800fada:	7afb      	ldrb	r3, [r7, #11]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d11e      	bne.n	800fb1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	88db      	ldrh	r3, [r3, #6]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d016      	beq.n	800fb16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fae8:	893b      	ldrh	r3, [r7, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00e      	beq.n	800fb0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	88da      	ldrh	r2, [r3, #6]
 800faf2:	893b      	ldrh	r3, [r7, #8]
 800faf4:	4293      	cmp	r3, r2
 800faf6:	bf28      	it	cs
 800faf8:	4613      	movcs	r3, r2
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fafe:	893b      	ldrh	r3, [r7, #8]
 800fb00:	461a      	mov	r2, r3
 800fb02:	68f9      	ldr	r1, [r7, #12]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fa5d 	bl	800ffc4 <USBD_CtlSendData>
 800fb0a:	e009      	b.n	800fb20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f9e7 	bl	800fee2 <USBD_CtlError>
 800fb14:	e004      	b.n	800fb20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fa91 	bl	801003e <USBD_CtlSendStatus>
 800fb1c:	e000      	b.n	800fb20 <USBD_GetDescriptor+0x2cc>
    return;
 800fb1e:	bf00      	nop
  }
}
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop

0800fb28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	889b      	ldrh	r3, [r3, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d131      	bne.n	800fb9e <USBD_SetAddress+0x76>
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	88db      	ldrh	r3, [r3, #6]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d12d      	bne.n	800fb9e <USBD_SetAddress+0x76>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	885b      	ldrh	r3, [r3, #2]
 800fb46:	2b7f      	cmp	r3, #127	; 0x7f
 800fb48:	d829      	bhi.n	800fb9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	885b      	ldrh	r3, [r3, #2]
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d104      	bne.n	800fb6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f9bc 	bl	800fee2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb6a:	e01d      	b.n	800fba8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	7bfa      	ldrb	r2, [r7, #15]
 800fb70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	4619      	mov	r1, r3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 feda 	bl	8010932 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 fa5d 	bl	801003e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fb84:	7bfb      	ldrb	r3, [r7, #15]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb92:	e009      	b.n	800fba8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9c:	e004      	b.n	800fba8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fb9e:	6839      	ldr	r1, [r7, #0]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 f99e 	bl	800fee2 <USBD_CtlError>
  }
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	885b      	ldrh	r3, [r3, #2]
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	4b4e      	ldr	r3, [pc, #312]	; (800fd00 <USBD_SetConfig+0x150>)
 800fbc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fbc8:	4b4d      	ldr	r3, [pc, #308]	; (800fd00 <USBD_SetConfig+0x150>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d905      	bls.n	800fbdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fbd0:	6839      	ldr	r1, [r7, #0]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 f985 	bl	800fee2 <USBD_CtlError>
    return USBD_FAIL;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e08c      	b.n	800fcf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b02      	cmp	r3, #2
 800fbe6:	d002      	beq.n	800fbee <USBD_SetConfig+0x3e>
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	d029      	beq.n	800fc40 <USBD_SetConfig+0x90>
 800fbec:	e075      	b.n	800fcda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fbee:	4b44      	ldr	r3, [pc, #272]	; (800fd00 <USBD_SetConfig+0x150>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d020      	beq.n	800fc38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fbf6:	4b42      	ldr	r3, [pc, #264]	; (800fd00 <USBD_SetConfig+0x150>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc00:	4b3f      	ldr	r3, [pc, #252]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	4619      	mov	r1, r3
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7fe ffe6 	bl	800ebd8 <USBD_SetClassConfig>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d008      	beq.n	800fc28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f962 	bl	800fee2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2202      	movs	r2, #2
 800fc22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc26:	e065      	b.n	800fcf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fa08 	bl	801003e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2203      	movs	r2, #3
 800fc32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fc36:	e05d      	b.n	800fcf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 fa00 	bl	801003e <USBD_CtlSendStatus>
      break;
 800fc3e:	e059      	b.n	800fcf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fc40:	4b2f      	ldr	r3, [pc, #188]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d112      	bne.n	800fc6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2202      	movs	r2, #2
 800fc4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fc50:	4b2b      	ldr	r3, [pc, #172]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	461a      	mov	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc5a:	4b29      	ldr	r3, [pc, #164]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7fe ffd5 	bl	800ec10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f9e9 	bl	801003e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc6c:	e042      	b.n	800fcf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fc6e:	4b24      	ldr	r3, [pc, #144]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	461a      	mov	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d02a      	beq.n	800fcd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	4619      	mov	r1, r3
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7fe ffc3 	bl	800ec10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fc8a:	4b1d      	ldr	r3, [pc, #116]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc94:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <USBD_SetConfig+0x150>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7fe ff9c 	bl	800ebd8 <USBD_SetClassConfig>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00f      	beq.n	800fcca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fcaa:	6839      	ldr	r1, [r7, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 f918 	bl	800fee2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	4619      	mov	r1, r3
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7fe ffa8 	bl	800ec10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fcc8:	e014      	b.n	800fcf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f9b7 	bl	801003e <USBD_CtlSendStatus>
      break;
 800fcd0:	e010      	b.n	800fcf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f9b3 	bl	801003e <USBD_CtlSendStatus>
      break;
 800fcd8:	e00c      	b.n	800fcf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 f900 	bl	800fee2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fce2:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <USBD_SetConfig+0x150>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7fe ff91 	bl	800ec10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf2:	bf00      	nop
  }

  return ret;
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	24000654 	.word	0x24000654

0800fd04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	88db      	ldrh	r3, [r3, #6]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d004      	beq.n	800fd20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fd16:	6839      	ldr	r1, [r7, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 f8e2 	bl	800fee2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fd1e:	e023      	b.n	800fd68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b02      	cmp	r3, #2
 800fd2a:	dc02      	bgt.n	800fd32 <USBD_GetConfig+0x2e>
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dc03      	bgt.n	800fd38 <USBD_GetConfig+0x34>
 800fd30:	e015      	b.n	800fd5e <USBD_GetConfig+0x5a>
 800fd32:	2b03      	cmp	r3, #3
 800fd34:	d00b      	beq.n	800fd4e <USBD_GetConfig+0x4a>
 800fd36:	e012      	b.n	800fd5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3308      	adds	r3, #8
 800fd42:	2201      	movs	r2, #1
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 f93c 	bl	800ffc4 <USBD_CtlSendData>
        break;
 800fd4c:	e00c      	b.n	800fd68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	3304      	adds	r3, #4
 800fd52:	2201      	movs	r2, #1
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f934 	bl	800ffc4 <USBD_CtlSendData>
        break;
 800fd5c:	e004      	b.n	800fd68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f8be 	bl	800fee2 <USBD_CtlError>
        break;
 800fd66:	bf00      	nop
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	3b01      	subs	r3, #1
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d81e      	bhi.n	800fdc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	88db      	ldrh	r3, [r3, #6]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d004      	beq.n	800fd9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f8a5 	bl	800fee2 <USBD_CtlError>
        break;
 800fd98:	e01a      	b.n	800fdd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d005      	beq.n	800fdb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	f043 0202 	orr.w	r2, r3, #2
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	330c      	adds	r3, #12
 800fdba:	2202      	movs	r2, #2
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f900 	bl	800ffc4 <USBD_CtlSendData>
      break;
 800fdc4:	e004      	b.n	800fdd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fdc6:	6839      	ldr	r1, [r7, #0]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f88a 	bl	800fee2 <USBD_CtlError>
      break;
 800fdce:	bf00      	nop
  }
}
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	885b      	ldrh	r3, [r3, #2]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d107      	bne.n	800fdfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f923 	bl	801003e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fdf8:	e013      	b.n	800fe22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	885b      	ldrh	r3, [r3, #2]
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	d10b      	bne.n	800fe1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	889b      	ldrh	r3, [r3, #4]
 800fe06:	0a1b      	lsrs	r3, r3, #8
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 f913 	bl	801003e <USBD_CtlSendStatus>
}
 800fe18:	e003      	b.n	800fe22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f860 	bl	800fee2 <USBD_CtlError>
}
 800fe22:	bf00      	nop
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b082      	sub	sp, #8
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d80b      	bhi.n	800fe5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	885b      	ldrh	r3, [r3, #2]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d10c      	bne.n	800fe64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f8f3 	bl	801003e <USBD_CtlSendStatus>
      }
      break;
 800fe58:	e004      	b.n	800fe64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f840 	bl	800fee2 <USBD_CtlError>
      break;
 800fe62:	e000      	b.n	800fe66 <USBD_ClrFeature+0x3c>
      break;
 800fe64:	bf00      	nop
  }
}
 800fe66:	bf00      	nop
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b084      	sub	sp, #16
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	781a      	ldrb	r2, [r3, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3301      	adds	r3, #1
 800fe88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	781a      	ldrb	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3301      	adds	r3, #1
 800fe96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f7ff fa40 	bl	800f31e <SWAPBYTE>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	461a      	mov	r2, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	3301      	adds	r3, #1
 800feb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f7ff fa33 	bl	800f31e <SWAPBYTE>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	3301      	adds	r3, #1
 800fec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	3301      	adds	r3, #1
 800feca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f7ff fa26 	bl	800f31e <SWAPBYTE>
 800fed2:	4603      	mov	r3, r0
 800fed4:	461a      	mov	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	80da      	strh	r2, [r3, #6]
}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b082      	sub	sp, #8
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800feec:	2180      	movs	r1, #128	; 0x80
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 fcb5 	bl	801085e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fef4:	2100      	movs	r1, #0
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 fcb1 	bl	801085e <USBD_LL_StallEP>
}
 800fefc:	bf00      	nop
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ff10:	2300      	movs	r3, #0
 800ff12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d036      	beq.n	800ff88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ff1e:	6938      	ldr	r0, [r7, #16]
 800ff20:	f000 f836 	bl	800ff90 <USBD_GetLen>
 800ff24:	4603      	mov	r3, r0
 800ff26:	3301      	adds	r3, #1
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	4413      	add	r3, r2
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	7812      	ldrb	r2, [r2, #0]
 800ff3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
 800ff40:	3301      	adds	r3, #1
 800ff42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ff44:	7dfb      	ldrb	r3, [r7, #23]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	4413      	add	r3, r2
 800ff4a:	2203      	movs	r2, #3
 800ff4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
 800ff50:	3301      	adds	r3, #1
 800ff52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ff54:	e013      	b.n	800ff7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	693a      	ldr	r2, [r7, #16]
 800ff5e:	7812      	ldrb	r2, [r2, #0]
 800ff60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	3301      	adds	r3, #1
 800ff66:	613b      	str	r3, [r7, #16]
    idx++;
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ff6e:	7dfb      	ldrb	r3, [r7, #23]
 800ff70:	68ba      	ldr	r2, [r7, #8]
 800ff72:	4413      	add	r3, r2
 800ff74:	2200      	movs	r2, #0
 800ff76:	701a      	strb	r2, [r3, #0]
    idx++;
 800ff78:	7dfb      	ldrb	r3, [r7, #23]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1e7      	bne.n	800ff56 <USBD_GetString+0x52>
 800ff86:	e000      	b.n	800ff8a <USBD_GetString+0x86>
    return;
 800ff88:	bf00      	nop
  }
}
 800ff8a:	3718      	adds	r7, #24
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ffa0:	e005      	b.n	800ffae <USBD_GetLen+0x1e>
  {
    len++;
 800ffa2:	7bfb      	ldrb	r3, [r7, #15]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1f5      	bne.n	800ffa2 <USBD_GetLen+0x12>
  }

  return len;
 800ffb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	2100      	movs	r1, #0
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f000 fcc0 	bl	8010970 <USBD_LL_Transmit>

  return USBD_OK;
 800fff0:	2300      	movs	r3, #0
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	60f8      	str	r0, [r7, #12]
 8010002:	60b9      	str	r1, [r7, #8]
 8010004:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	2100      	movs	r1, #0
 801000c:	68f8      	ldr	r0, [r7, #12]
 801000e:	f000 fcaf 	bl	8010970 <USBD_LL_Transmit>

  return USBD_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	2100      	movs	r1, #0
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f000 fcbf 	bl	80109b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b082      	sub	sp, #8
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2204      	movs	r2, #4
 801004a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801004e:	2300      	movs	r3, #0
 8010050:	2200      	movs	r2, #0
 8010052:	2100      	movs	r1, #0
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 fc8b 	bl	8010970 <USBD_LL_Transmit>

  return USBD_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2205      	movs	r2, #5
 8010070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010074:	2300      	movs	r3, #0
 8010076:	2200      	movs	r2, #0
 8010078:	2100      	movs	r1, #0
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 fc99 	bl	80109b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010090:	2200      	movs	r2, #0
 8010092:	4913      	ldr	r1, [pc, #76]	; (80100e0 <MX_USB_DEVICE_Init+0x54>)
 8010094:	4813      	ldr	r0, [pc, #76]	; (80100e4 <MX_USB_DEVICE_Init+0x58>)
 8010096:	f7fe fd22 	bl	800eade <USBD_Init>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80100a0:	f7f0 fe08 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80100a4:	4910      	ldr	r1, [pc, #64]	; (80100e8 <MX_USB_DEVICE_Init+0x5c>)
 80100a6:	480f      	ldr	r0, [pc, #60]	; (80100e4 <MX_USB_DEVICE_Init+0x58>)
 80100a8:	f7fe fd49 	bl	800eb3e <USBD_RegisterClass>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80100b2:	f7f0 fdff 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80100b6:	490d      	ldr	r1, [pc, #52]	; (80100ec <MX_USB_DEVICE_Init+0x60>)
 80100b8:	480a      	ldr	r0, [pc, #40]	; (80100e4 <MX_USB_DEVICE_Init+0x58>)
 80100ba:	f7fc fff3 	bl	800d0a4 <USBD_MSC_RegisterStorage>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80100c4:	f7f0 fdf6 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80100c8:	4806      	ldr	r0, [pc, #24]	; (80100e4 <MX_USB_DEVICE_Init+0x58>)
 80100ca:	f7fe fd6e 	bl	800ebaa <USBD_Start>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80100d4:	f7f0 fdee 	bl	8000cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80100d8:	f7f5 fd14 	bl	8005b04 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80100dc:	bf00      	nop
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	240000bc 	.word	0x240000bc
 80100e4:	24000658 	.word	0x24000658
 80100e8:	24000014 	.word	0x24000014
 80100ec:	2400010c 	.word	0x2400010c

080100f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b083      	sub	sp, #12
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	4603      	mov	r3, r0
 80100f8:	6039      	str	r1, [r7, #0]
 80100fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2212      	movs	r2, #18
 8010100:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010102:	4b03      	ldr	r3, [pc, #12]	; (8010110 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010104:	4618      	mov	r0, r3
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	240000d8 	.word	0x240000d8

08010114 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	6039      	str	r1, [r7, #0]
 801011e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2204      	movs	r2, #4
 8010124:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010126:	4b03      	ldr	r3, [pc, #12]	; (8010134 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr
 8010134:	240000ec 	.word	0x240000ec

08010138 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	6039      	str	r1, [r7, #0]
 8010142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010144:	79fb      	ldrb	r3, [r7, #7]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d105      	bne.n	8010156 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801014a:	683a      	ldr	r2, [r7, #0]
 801014c:	4907      	ldr	r1, [pc, #28]	; (801016c <USBD_FS_ProductStrDescriptor+0x34>)
 801014e:	4808      	ldr	r0, [pc, #32]	; (8010170 <USBD_FS_ProductStrDescriptor+0x38>)
 8010150:	f7ff fed8 	bl	800ff04 <USBD_GetString>
 8010154:	e004      	b.n	8010160 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010156:	683a      	ldr	r2, [r7, #0]
 8010158:	4904      	ldr	r1, [pc, #16]	; (801016c <USBD_FS_ProductStrDescriptor+0x34>)
 801015a:	4805      	ldr	r0, [pc, #20]	; (8010170 <USBD_FS_ProductStrDescriptor+0x38>)
 801015c:	f7ff fed2 	bl	800ff04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010160:	4b02      	ldr	r3, [pc, #8]	; (801016c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010162:	4618      	mov	r0, r3
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	24000934 	.word	0x24000934
 8010170:	08010b14 	.word	0x08010b14

08010174 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	4904      	ldr	r1, [pc, #16]	; (8010194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010184:	4804      	ldr	r0, [pc, #16]	; (8010198 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010186:	f7ff febd 	bl	800ff04 <USBD_GetString>
  return USBD_StrDesc;
 801018a:	4b02      	ldr	r3, [pc, #8]	; (8010194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	24000934 	.word	0x24000934
 8010198:	08010b28 	.word	0x08010b28

0801019c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	6039      	str	r1, [r7, #0]
 80101a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	221a      	movs	r2, #26
 80101ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101ae:	f000 f843 	bl	8010238 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101b2:	4b02      	ldr	r3, [pc, #8]	; (80101bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	240000f0 	.word	0x240000f0

080101c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	6039      	str	r1, [r7, #0]
 80101ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d105      	bne.n	80101de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	4907      	ldr	r1, [pc, #28]	; (80101f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101d6:	4808      	ldr	r0, [pc, #32]	; (80101f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101d8:	f7ff fe94 	bl	800ff04 <USBD_GetString>
 80101dc:	e004      	b.n	80101e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	4904      	ldr	r1, [pc, #16]	; (80101f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101e2:	4805      	ldr	r0, [pc, #20]	; (80101f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101e4:	f7ff fe8e 	bl	800ff04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101e8:	4b02      	ldr	r3, [pc, #8]	; (80101f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	24000934 	.word	0x24000934
 80101f8:	08010b3c 	.word	0x08010b3c

080101fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d105      	bne.n	801021a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	4907      	ldr	r1, [pc, #28]	; (8010230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010212:	4808      	ldr	r0, [pc, #32]	; (8010234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010214:	f7ff fe76 	bl	800ff04 <USBD_GetString>
 8010218:	e004      	b.n	8010224 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	4904      	ldr	r1, [pc, #16]	; (8010230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801021e:	4805      	ldr	r0, [pc, #20]	; (8010234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010220:	f7ff fe70 	bl	800ff04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010224:	4b02      	ldr	r3, [pc, #8]	; (8010230 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	24000934 	.word	0x24000934
 8010234:	08010b48 	.word	0x08010b48

08010238 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801023e:	4b0f      	ldr	r3, [pc, #60]	; (801027c <Get_SerialNum+0x44>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010244:	4b0e      	ldr	r3, [pc, #56]	; (8010280 <Get_SerialNum+0x48>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801024a:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <Get_SerialNum+0x4c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4413      	add	r3, r2
 8010256:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d009      	beq.n	8010272 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801025e:	2208      	movs	r2, #8
 8010260:	4909      	ldr	r1, [pc, #36]	; (8010288 <Get_SerialNum+0x50>)
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f000 f814 	bl	8010290 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010268:	2204      	movs	r2, #4
 801026a:	4908      	ldr	r1, [pc, #32]	; (801028c <Get_SerialNum+0x54>)
 801026c:	68b8      	ldr	r0, [r7, #8]
 801026e:	f000 f80f 	bl	8010290 <IntToUnicode>
  }
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	1ff1e800 	.word	0x1ff1e800
 8010280:	1ff1e804 	.word	0x1ff1e804
 8010284:	1ff1e808 	.word	0x1ff1e808
 8010288:	240000f2 	.word	0x240000f2
 801028c:	24000102 	.word	0x24000102

08010290 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	4613      	mov	r3, r2
 801029c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102a2:	2300      	movs	r3, #0
 80102a4:	75fb      	strb	r3, [r7, #23]
 80102a6:	e027      	b.n	80102f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	0f1b      	lsrs	r3, r3, #28
 80102ac:	2b09      	cmp	r3, #9
 80102ae:	d80b      	bhi.n	80102c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	0f1b      	lsrs	r3, r3, #28
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	4619      	mov	r1, r3
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	440b      	add	r3, r1
 80102c0:	3230      	adds	r2, #48	; 0x30
 80102c2:	b2d2      	uxtb	r2, r2
 80102c4:	701a      	strb	r2, [r3, #0]
 80102c6:	e00a      	b.n	80102de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	0f1b      	lsrs	r3, r3, #28
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	7dfb      	ldrb	r3, [r7, #23]
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	4619      	mov	r1, r3
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	440b      	add	r3, r1
 80102d8:	3237      	adds	r2, #55	; 0x37
 80102da:	b2d2      	uxtb	r2, r2
 80102dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	011b      	lsls	r3, r3, #4
 80102e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
 80102e6:	005b      	lsls	r3, r3, #1
 80102e8:	3301      	adds	r3, #1
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	4413      	add	r3, r2
 80102ee:	2200      	movs	r2, #0
 80102f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	3301      	adds	r3, #1
 80102f6:	75fb      	strb	r3, [r7, #23]
 80102f8:	7dfa      	ldrb	r2, [r7, #23]
 80102fa:	79fb      	ldrb	r3, [r7, #7]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d3d3      	bcc.n	80102a8 <IntToUnicode+0x18>
  }
}
 8010300:	bf00      	nop
 8010302:	bf00      	nop
 8010304:	371c      	adds	r7, #28
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	4603      	mov	r3, r0
 8010316:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8010318:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801031a:	4618      	mov	r0, r3
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	4603      	mov	r3, r0
 801032e:	60b9      	str	r1, [r7, #8]
 8010330:	607a      	str	r2, [r7, #4]
 8010332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801033a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010342:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010344:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010346:	4618      	mov	r0, r3
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8010352:	b480      	push	{r7}
 8010354:	b083      	sub	sp, #12
 8010356:	af00      	add	r7, sp, #0
 8010358:	4603      	mov	r3, r0
 801035a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801035c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801035e:	4618      	mov	r0, r3
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr

0801036a <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801036a:	b480      	push	{r7}
 801036c:	b083      	sub	sp, #12
 801036e:	af00      	add	r7, sp, #0
 8010370:	4603      	mov	r3, r0
 8010372:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8010374:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010376:	4618      	mov	r0, r3
 8010378:	370c      	adds	r7, #12
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr

08010382 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010382:	b480      	push	{r7}
 8010384:	b085      	sub	sp, #20
 8010386:	af00      	add	r7, sp, #0
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
 801038c:	461a      	mov	r2, r3
 801038e:	4603      	mov	r3, r0
 8010390:	73fb      	strb	r3, [r7, #15]
 8010392:	4613      	mov	r3, r2
 8010394:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8010396:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010398:	4618      	mov	r0, r3
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60b9      	str	r1, [r7, #8]
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	461a      	mov	r2, r3
 80103b0:	4603      	mov	r3, r0
 80103b2:	73fb      	strb	r3, [r7, #15]
 80103b4:	4613      	mov	r3, r2
 80103b6:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 80103b8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr

080103c6 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80103c6:	b480      	push	{r7}
 80103c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80103ca:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
	...

080103d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b0b8      	sub	sp, #224	; 0xe0
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	605a      	str	r2, [r3, #4]
 80103ea:	609a      	str	r2, [r3, #8]
 80103ec:	60da      	str	r2, [r3, #12]
 80103ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80103f0:	f107 0310 	add.w	r3, r7, #16
 80103f4:	22bc      	movs	r2, #188	; 0xbc
 80103f6:	2100      	movs	r1, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	f000 fb77 	bl	8010aec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a33      	ldr	r2, [pc, #204]	; (80104d0 <HAL_PCD_MspInit+0xf8>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d15e      	bne.n	80104c6 <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801040c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801040e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8010412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010416:	f107 0310 	add.w	r3, r7, #16
 801041a:	4618      	mov	r0, r3
 801041c:	f7f6 fb7e 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8010426:	f7f0 fc45 	bl	8000cb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801042a:	f7f5 fb6b 	bl	8005b04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801042e:	4b29      	ldr	r3, [pc, #164]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 8010430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010434:	4a27      	ldr	r2, [pc, #156]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 8010436:	f043 0301 	orr.w	r3, r3, #1
 801043a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801043e:	4b25      	ldr	r3, [pc, #148]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 8010440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801044c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010454:	2300      	movs	r3, #0
 8010456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801045a:	2300      	movs	r3, #0
 801045c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010460:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010464:	4619      	mov	r1, r3
 8010466:	481c      	ldr	r0, [pc, #112]	; (80104d8 <HAL_PCD_MspInit+0x100>)
 8010468:	f7f3 fe46 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801046c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010470:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010474:	2302      	movs	r3, #2
 8010476:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801047a:	2300      	movs	r3, #0
 801047c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010480:	2300      	movs	r3, #0
 8010482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010486:	230a      	movs	r3, #10
 8010488:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801048c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010490:	4619      	mov	r1, r3
 8010492:	4811      	ldr	r0, [pc, #68]	; (80104d8 <HAL_PCD_MspInit+0x100>)
 8010494:	f7f3 fe30 	bl	80040f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010498:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 801049a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801049e:	4a0d      	ldr	r2, [pc, #52]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 80104a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80104a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80104a8:	4b0a      	ldr	r3, [pc, #40]	; (80104d4 <HAL_PCD_MspInit+0xfc>)
 80104aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80104ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104b2:	60bb      	str	r3, [r7, #8]
 80104b4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80104b6:	2200      	movs	r2, #0
 80104b8:	2100      	movs	r1, #0
 80104ba:	2065      	movs	r0, #101	; 0x65
 80104bc:	f7f1 f964 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80104c0:	2065      	movs	r0, #101	; 0x65
 80104c2:	f7f1 f97b 	bl	80017bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80104c6:	bf00      	nop
 80104c8:	37e0      	adds	r7, #224	; 0xe0
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	40080000 	.word	0x40080000
 80104d4:	58024400 	.word	0x58024400
 80104d8:	58020000 	.word	0x58020000

080104dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fe fba6 	bl	800ec44 <USBD_LL_SetupStage>
}
 80104f8:	bf00      	nop
 80104fa:	3708      	adds	r7, #8
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	460b      	mov	r3, r1
 801050a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010512:	78fa      	ldrb	r2, [r7, #3]
 8010514:	6879      	ldr	r1, [r7, #4]
 8010516:	4613      	mov	r3, r2
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	4413      	add	r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	440b      	add	r3, r1
 8010520:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	78fb      	ldrb	r3, [r7, #3]
 8010528:	4619      	mov	r1, r3
 801052a:	f7fe fbe0 	bl	800ecee <USBD_LL_DataOutStage>
}
 801052e:	bf00      	nop
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010536:	b580      	push	{r7, lr}
 8010538:	b082      	sub	sp, #8
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
 801053e:	460b      	mov	r3, r1
 8010540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010548:	78fa      	ldrb	r2, [r7, #3]
 801054a:	6879      	ldr	r1, [r7, #4]
 801054c:	4613      	mov	r3, r2
 801054e:	00db      	lsls	r3, r3, #3
 8010550:	4413      	add	r3, r2
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	440b      	add	r3, r1
 8010556:	334c      	adds	r3, #76	; 0x4c
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	78fb      	ldrb	r3, [r7, #3]
 801055c:	4619      	mov	r1, r3
 801055e:	f7fe fc79 	bl	800ee54 <USBD_LL_DataInStage>
}
 8010562:	bf00      	nop
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b082      	sub	sp, #8
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fdad 	bl	800f0d8 <USBD_LL_SOF>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b084      	sub	sp, #16
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801058e:	2301      	movs	r3, #1
 8010590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d102      	bne.n	80105a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801059a:	2300      	movs	r3, #0
 801059c:	73fb      	strb	r3, [r7, #15]
 801059e:	e008      	b.n	80105b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d102      	bne.n	80105ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80105a8:	2301      	movs	r3, #1
 80105aa:	73fb      	strb	r3, [r7, #15]
 80105ac:	e001      	b.n	80105b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80105ae:	f7f0 fb81 	bl	8000cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105b8:	7bfa      	ldrb	r2, [r7, #15]
 80105ba:	4611      	mov	r1, r2
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fe fd4d 	bl	800f05c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe fcf5 	bl	800efb8 <USBD_LL_Reset>
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
	...

080105d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe fd48 	bl	800f07c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6812      	ldr	r2, [r2, #0]
 80105fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105fe:	f043 0301 	orr.w	r3, r3, #1
 8010602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6a1b      	ldr	r3, [r3, #32]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d005      	beq.n	8010618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801060c:	4b04      	ldr	r3, [pc, #16]	; (8010620 <HAL_PCD_SuspendCallback+0x48>)
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	4a03      	ldr	r2, [pc, #12]	; (8010620 <HAL_PCD_SuspendCallback+0x48>)
 8010612:	f043 0306 	orr.w	r3, r3, #6
 8010616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010618:	bf00      	nop
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	e000ed00 	.word	0xe000ed00

08010624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe fd38 	bl	800f0a8 <USBD_LL_Resume>
}
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010652:	78fa      	ldrb	r2, [r7, #3]
 8010654:	4611      	mov	r1, r2
 8010656:	4618      	mov	r0, r3
 8010658:	f7fe fd90 	bl	800f17c <USBD_LL_IsoOUTIncomplete>
}
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	460b      	mov	r3, r1
 801066e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010676:	78fa      	ldrb	r2, [r7, #3]
 8010678:	4611      	mov	r1, r2
 801067a:	4618      	mov	r0, r3
 801067c:	f7fe fd4c 	bl	800f118 <USBD_LL_IsoINIncomplete>
}
 8010680:	bf00      	nop
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fda2 	bl	800f1e0 <USBD_LL_DevConnected>
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fe fd9f 	bl	800f1f6 <USBD_LL_DevDisconnected>
}
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d13e      	bne.n	801074e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80106d0:	4a21      	ldr	r2, [pc, #132]	; (8010758 <USBD_LL_Init+0x98>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a1f      	ldr	r2, [pc, #124]	; (8010758 <USBD_LL_Init+0x98>)
 80106dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80106e0:	4b1d      	ldr	r3, [pc, #116]	; (8010758 <USBD_LL_Init+0x98>)
 80106e2:	4a1e      	ldr	r2, [pc, #120]	; (801075c <USBD_LL_Init+0x9c>)
 80106e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80106e6:	4b1c      	ldr	r3, [pc, #112]	; (8010758 <USBD_LL_Init+0x98>)
 80106e8:	2209      	movs	r2, #9
 80106ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80106ec:	4b1a      	ldr	r3, [pc, #104]	; (8010758 <USBD_LL_Init+0x98>)
 80106ee:	2202      	movs	r2, #2
 80106f0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80106f2:	4b19      	ldr	r3, [pc, #100]	; (8010758 <USBD_LL_Init+0x98>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80106f8:	4b17      	ldr	r3, [pc, #92]	; (8010758 <USBD_LL_Init+0x98>)
 80106fa:	2202      	movs	r2, #2
 80106fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80106fe:	4b16      	ldr	r3, [pc, #88]	; (8010758 <USBD_LL_Init+0x98>)
 8010700:	2200      	movs	r2, #0
 8010702:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010704:	4b14      	ldr	r3, [pc, #80]	; (8010758 <USBD_LL_Init+0x98>)
 8010706:	2200      	movs	r2, #0
 8010708:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801070a:	4b13      	ldr	r3, [pc, #76]	; (8010758 <USBD_LL_Init+0x98>)
 801070c:	2200      	movs	r2, #0
 801070e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8010710:	4b11      	ldr	r3, [pc, #68]	; (8010758 <USBD_LL_Init+0x98>)
 8010712:	2201      	movs	r2, #1
 8010714:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010716:	4b10      	ldr	r3, [pc, #64]	; (8010758 <USBD_LL_Init+0x98>)
 8010718:	2201      	movs	r2, #1
 801071a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801071c:	4b0e      	ldr	r3, [pc, #56]	; (8010758 <USBD_LL_Init+0x98>)
 801071e:	2200      	movs	r2, #0
 8010720:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010722:	480d      	ldr	r0, [pc, #52]	; (8010758 <USBD_LL_Init+0x98>)
 8010724:	f7f3 feb1 	bl	800448a <HAL_PCD_Init>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d001      	beq.n	8010732 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801072e:	f7f0 fac1 	bl	8000cb4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010732:	2180      	movs	r1, #128	; 0x80
 8010734:	4808      	ldr	r0, [pc, #32]	; (8010758 <USBD_LL_Init+0x98>)
 8010736:	f7f5 f96a 	bl	8005a0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801073a:	2240      	movs	r2, #64	; 0x40
 801073c:	2100      	movs	r1, #0
 801073e:	4806      	ldr	r0, [pc, #24]	; (8010758 <USBD_LL_Init+0x98>)
 8010740:	f7f5 f91e 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010744:	2280      	movs	r2, #128	; 0x80
 8010746:	2101      	movs	r1, #1
 8010748:	4803      	ldr	r0, [pc, #12]	; (8010758 <USBD_LL_Init+0x98>)
 801074a:	f7f5 f919 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	24000b34 	.word	0x24000b34
 801075c:	40080000 	.word	0x40080000

08010760 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010776:	4618      	mov	r0, r3
 8010778:	f7f3 ffab 	bl	80046d2 <HAL_PCD_Start>
 801077c:	4603      	mov	r3, r0
 801077e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f962 	bl	8010a4c <USBD_Get_USB_Status>
 8010788:	4603      	mov	r3, r0
 801078a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801078c:	7bbb      	ldrb	r3, [r7, #14]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b084      	sub	sp, #16
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	4608      	mov	r0, r1
 80107a0:	4611      	mov	r1, r2
 80107a2:	461a      	mov	r2, r3
 80107a4:	4603      	mov	r3, r0
 80107a6:	70fb      	strb	r3, [r7, #3]
 80107a8:	460b      	mov	r3, r1
 80107aa:	70bb      	strb	r3, [r7, #2]
 80107ac:	4613      	mov	r3, r2
 80107ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b4:	2300      	movs	r3, #0
 80107b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107be:	78bb      	ldrb	r3, [r7, #2]
 80107c0:	883a      	ldrh	r2, [r7, #0]
 80107c2:	78f9      	ldrb	r1, [r7, #3]
 80107c4:	f7f4 fca9 	bl	800511a <HAL_PCD_EP_Open>
 80107c8:	4603      	mov	r3, r0
 80107ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107cc:	7bfb      	ldrb	r3, [r7, #15]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 f93c 	bl	8010a4c <USBD_Get_USB_Status>
 80107d4:	4603      	mov	r3, r0
 80107d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b084      	sub	sp, #16
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	460b      	mov	r3, r1
 80107ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ee:	2300      	movs	r3, #0
 80107f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107fc:	78fa      	ldrb	r2, [r7, #3]
 80107fe:	4611      	mov	r1, r2
 8010800:	4618      	mov	r0, r3
 8010802:	f7f4 fcf2 	bl	80051ea <HAL_PCD_EP_Close>
 8010806:	4603      	mov	r3, r0
 8010808:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801080a:	7bfb      	ldrb	r3, [r7, #15]
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f91d 	bl	8010a4c <USBD_Get_USB_Status>
 8010812:	4603      	mov	r3, r0
 8010814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010816:	7bbb      	ldrb	r3, [r7, #14]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	460b      	mov	r3, r1
 801082a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801082c:	2300      	movs	r3, #0
 801082e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801083a:	78fa      	ldrb	r2, [r7, #3]
 801083c:	4611      	mov	r1, r2
 801083e:	4618      	mov	r0, r3
 8010840:	f7f4 feb5 	bl	80055ae <HAL_PCD_EP_Flush>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	4618      	mov	r0, r3
 801084c:	f000 f8fe 	bl	8010a4c <USBD_Get_USB_Status>
 8010850:	4603      	mov	r3, r0
 8010852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010854:	7bbb      	ldrb	r3, [r7, #14]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801085e:	b580      	push	{r7, lr}
 8010860:	b084      	sub	sp, #16
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
 8010866:	460b      	mov	r3, r1
 8010868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801086e:	2300      	movs	r3, #0
 8010870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010878:	78fa      	ldrb	r2, [r7, #3]
 801087a:	4611      	mov	r1, r2
 801087c:	4618      	mov	r0, r3
 801087e:	f7f4 fdab 	bl	80053d8 <HAL_PCD_EP_SetStall>
 8010882:	4603      	mov	r3, r0
 8010884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010886:	7bfb      	ldrb	r3, [r7, #15]
 8010888:	4618      	mov	r0, r3
 801088a:	f000 f8df 	bl	8010a4c <USBD_Get_USB_Status>
 801088e:	4603      	mov	r3, r0
 8010890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010892:	7bbb      	ldrb	r3, [r7, #14]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108ac:	2300      	movs	r3, #0
 80108ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108b6:	78fa      	ldrb	r2, [r7, #3]
 80108b8:	4611      	mov	r1, r2
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7f4 fdf0 	bl	80054a0 <HAL_PCD_EP_ClrStall>
 80108c0:	4603      	mov	r3, r0
 80108c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 f8c0 	bl	8010a4c <USBD_Get_USB_Status>
 80108cc:	4603      	mov	r3, r0
 80108ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108da:	b480      	push	{r7}
 80108dc:	b085      	sub	sp, #20
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	460b      	mov	r3, r1
 80108e4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108ec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80108ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	da0b      	bge.n	801090e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80108f6:	78fb      	ldrb	r3, [r7, #3]
 80108f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108fc:	68f9      	ldr	r1, [r7, #12]
 80108fe:	4613      	mov	r3, r2
 8010900:	00db      	lsls	r3, r3, #3
 8010902:	4413      	add	r3, r2
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	440b      	add	r3, r1
 8010908:	333e      	adds	r3, #62	; 0x3e
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	e00b      	b.n	8010926 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801090e:	78fb      	ldrb	r3, [r7, #3]
 8010910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010914:	68f9      	ldr	r1, [r7, #12]
 8010916:	4613      	mov	r3, r2
 8010918:	00db      	lsls	r3, r3, #3
 801091a:	4413      	add	r3, r2
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	440b      	add	r3, r1
 8010920:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010924:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010926:	4618      	mov	r0, r3
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	460b      	mov	r3, r1
 801093c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801093e:	2300      	movs	r3, #0
 8010940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801094c:	78fa      	ldrb	r2, [r7, #3]
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7f4 fbbd 	bl	80050d0 <HAL_PCD_SetAddress>
 8010956:	4603      	mov	r3, r0
 8010958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801095a:	7bfb      	ldrb	r3, [r7, #15]
 801095c:	4618      	mov	r0, r3
 801095e:	f000 f875 	bl	8010a4c <USBD_Get_USB_Status>
 8010962:	4603      	mov	r3, r0
 8010964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010966:	7bbb      	ldrb	r3, [r7, #14]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	607a      	str	r2, [r7, #4]
 801097a:	603b      	str	r3, [r7, #0]
 801097c:	460b      	mov	r3, r1
 801097e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010984:	2300      	movs	r3, #0
 8010986:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801098e:	7af9      	ldrb	r1, [r7, #11]
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	f7f4 fcd6 	bl	8005344 <HAL_PCD_EP_Transmit>
 8010998:	4603      	mov	r3, r0
 801099a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801099c:	7dfb      	ldrb	r3, [r7, #23]
 801099e:	4618      	mov	r0, r3
 80109a0:	f000 f854 	bl	8010a4c <USBD_Get_USB_Status>
 80109a4:	4603      	mov	r3, r0
 80109a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80109a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b086      	sub	sp, #24
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	60f8      	str	r0, [r7, #12]
 80109ba:	607a      	str	r2, [r7, #4]
 80109bc:	603b      	str	r3, [r7, #0]
 80109be:	460b      	mov	r3, r1
 80109c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109c6:	2300      	movs	r3, #0
 80109c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80109d0:	7af9      	ldrb	r1, [r7, #11]
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	f7f4 fc52 	bl	800527e <HAL_PCD_EP_Receive>
 80109da:	4603      	mov	r3, r0
 80109dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109de:	7dfb      	ldrb	r3, [r7, #23]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f000 f833 	bl	8010a4c <USBD_Get_USB_Status>
 80109e6:	4603      	mov	r3, r0
 80109e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80109ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3718      	adds	r7, #24
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	460b      	mov	r3, r1
 80109fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a06:	78fa      	ldrb	r2, [r7, #3]
 8010a08:	4611      	mov	r1, r2
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f4 fc82 	bl	8005314 <HAL_PCD_EP_GetRxCount>
 8010a10:	4603      	mov	r3, r0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010a24:	4b03      	ldr	r3, [pc, #12]	; (8010a34 <USBD_static_malloc+0x18>)
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	24001040 	.word	0x24001040

08010a38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]

}
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	4603      	mov	r3, r0
 8010a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d817      	bhi.n	8010a90 <USBD_Get_USB_Status+0x44>
 8010a60:	a201      	add	r2, pc, #4	; (adr r2, 8010a68 <USBD_Get_USB_Status+0x1c>)
 8010a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a66:	bf00      	nop
 8010a68:	08010a79 	.word	0x08010a79
 8010a6c:	08010a7f 	.word	0x08010a7f
 8010a70:	08010a85 	.word	0x08010a85
 8010a74:	08010a8b 	.word	0x08010a8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a7c:	e00b      	b.n	8010a96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	73fb      	strb	r3, [r7, #15]
    break;
 8010a82:	e008      	b.n	8010a96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a84:	2301      	movs	r3, #1
 8010a86:	73fb      	strb	r3, [r7, #15]
    break;
 8010a88:	e005      	b.n	8010a96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8010a8e:	e002      	b.n	8010a96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010a90:	2303      	movs	r3, #3
 8010a92:	73fb      	strb	r3, [r7, #15]
    break;
 8010a94:	bf00      	nop
  }
  return usb_status;
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <__libc_init_array>:
 8010aa4:	b570      	push	{r4, r5, r6, lr}
 8010aa6:	4d0d      	ldr	r5, [pc, #52]	; (8010adc <__libc_init_array+0x38>)
 8010aa8:	4c0d      	ldr	r4, [pc, #52]	; (8010ae0 <__libc_init_array+0x3c>)
 8010aaa:	1b64      	subs	r4, r4, r5
 8010aac:	10a4      	asrs	r4, r4, #2
 8010aae:	2600      	movs	r6, #0
 8010ab0:	42a6      	cmp	r6, r4
 8010ab2:	d109      	bne.n	8010ac8 <__libc_init_array+0x24>
 8010ab4:	4d0b      	ldr	r5, [pc, #44]	; (8010ae4 <__libc_init_array+0x40>)
 8010ab6:	4c0c      	ldr	r4, [pc, #48]	; (8010ae8 <__libc_init_array+0x44>)
 8010ab8:	f000 f820 	bl	8010afc <_init>
 8010abc:	1b64      	subs	r4, r4, r5
 8010abe:	10a4      	asrs	r4, r4, #2
 8010ac0:	2600      	movs	r6, #0
 8010ac2:	42a6      	cmp	r6, r4
 8010ac4:	d105      	bne.n	8010ad2 <__libc_init_array+0x2e>
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}
 8010ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010acc:	4798      	blx	r3
 8010ace:	3601      	adds	r6, #1
 8010ad0:	e7ee      	b.n	8010ab0 <__libc_init_array+0xc>
 8010ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ad6:	4798      	blx	r3
 8010ad8:	3601      	adds	r6, #1
 8010ada:	e7f2      	b.n	8010ac2 <__libc_init_array+0x1e>
 8010adc:	08010bc4 	.word	0x08010bc4
 8010ae0:	08010bc4 	.word	0x08010bc4
 8010ae4:	08010bc4 	.word	0x08010bc4
 8010ae8:	08010bcc 	.word	0x08010bcc

08010aec <memset>:
 8010aec:	4402      	add	r2, r0
 8010aee:	4603      	mov	r3, r0
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d100      	bne.n	8010af6 <memset+0xa>
 8010af4:	4770      	bx	lr
 8010af6:	f803 1b01 	strb.w	r1, [r3], #1
 8010afa:	e7f9      	b.n	8010af0 <memset+0x4>

08010afc <_init>:
 8010afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afe:	bf00      	nop
 8010b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b02:	bc08      	pop	{r3}
 8010b04:	469e      	mov	lr, r3
 8010b06:	4770      	bx	lr

08010b08 <_fini>:
 8010b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0a:	bf00      	nop
 8010b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b0e:	bc08      	pop	{r3}
 8010b10:	469e      	mov	lr, r3
 8010b12:	4770      	bx	lr
