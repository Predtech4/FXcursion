
ProtoStack_H743_testSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000615c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  24000010  0800641c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00001e04  240000ac  0800641c  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d269  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c5d  00000000  00000000  0002d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a50  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000968  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035b84  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cd72  00000000  00000000  00065e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00153ff7  00000000  00000000  00072bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c6bad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028d0  00000000  00000000  001c6c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063dc 	.word	0x080063dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080063dc 	.word	0x080063dc

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0xa8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0xa8>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0xa8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0xa8>)
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_GPIO_Init+0xa8>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	f003 0308 	and.w	r3, r3, #8
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <MX_GPIO_Init+0xa8>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	f003 0302 	and.w	r3, r3, #2
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

}
 8000374:	bf00      	nop
 8000376:	371c      	adds	r7, #28
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	58024400 	.word	0x58024400

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08a      	sub	sp, #40	; 0x28
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038a:	f000 fa99 	bl	80008c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038e:	f000 f811 	bl	80003b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000392:	f7ff ffa1 	bl	80002d8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000396:	f000 f8cb 	bl	8000530 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  HAL_SD_InitCard(&hsd1);
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <main+0x2c>)
 800039c:	f004 f816 	bl	80043cc <HAL_SD_InitCard>
  HAL_SD_CardInfoTypeDef info;
  HAL_SD_GetCardInfo(&hsd1, &info);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <main+0x2c>)
 80003a6:	f004 fcdf 	bl	8004d68 <HAL_SD_GetCardInfo>
  __NOP();
 80003aa:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <main+0x28>
 80003ae:	bf00      	nop
 80003b0:	2400002c 	.word	0x2400002c

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b09e      	sub	sp, #120	; 0x78
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003be:	224c      	movs	r2, #76	; 0x4c
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f006 f802 	bl	80063cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	f107 030c 	add.w	r3, r7, #12
 80003cc:	2220      	movs	r2, #32
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f005 fffb 	bl	80063cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 fdf4 	bl	8000fc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	4b4d      	ldr	r3, [pc, #308]	; (8000518 <SystemClock_Config+0x164>)
 80003e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e4:	4a4c      	ldr	r2, [pc, #304]	; (8000518 <SystemClock_Config+0x164>)
 80003e6:	f023 0301 	bic.w	r3, r3, #1
 80003ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ec:	4b4a      	ldr	r3, [pc, #296]	; (8000518 <SystemClock_Config+0x164>)
 80003ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	4b49      	ldr	r3, [pc, #292]	; (800051c <SystemClock_Config+0x168>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a48      	ldr	r2, [pc, #288]	; (800051c <SystemClock_Config+0x168>)
 80003fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b46      	ldr	r3, [pc, #280]	; (800051c <SystemClock_Config+0x168>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800040e:	bf00      	nop
 8000410:	4b42      	ldr	r3, [pc, #264]	; (800051c <SystemClock_Config+0x168>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800041c:	d1f8      	bne.n	8000410 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b40      	ldr	r3, [pc, #256]	; (8000520 <SystemClock_Config+0x16c>)
 8000420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000424:	4a3e      	ldr	r2, [pc, #248]	; (8000520 <SystemClock_Config+0x16c>)
 8000426:	f043 0302 	orr.w	r3, r3, #2
 800042a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800042e:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <SystemClock_Config+0x16c>)
 8000430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800043c:	2300      	movs	r3, #0
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	4b36      	ldr	r3, [pc, #216]	; (800051c <SystemClock_Config+0x168>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a35      	ldr	r2, [pc, #212]	; (800051c <SystemClock_Config+0x168>)
 8000446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <SystemClock_Config+0x168>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	4b30      	ldr	r3, [pc, #192]	; (8000518 <SystemClock_Config+0x164>)
 8000458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <SystemClock_Config+0x164>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <SystemClock_Config+0x164>)
 8000464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800046e:	bf00      	nop
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <SystemClock_Config+0x168>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800047c:	d1f8      	bne.n	8000470 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800047e:	4b28      	ldr	r3, [pc, #160]	; (8000520 <SystemClock_Config+0x16c>)
 8000480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <SystemClock_Config+0x16c>)
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800048e:	2301      	movs	r3, #1
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000496:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	2302      	movs	r3, #2
 800049e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004a0:	2304      	movs	r3, #4
 80004a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80004a4:	23a0      	movs	r3, #160	; 0xa0
 80004a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004b4:	2308      	movs	r3, #8
 80004b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fdb7 	bl	8001038 <HAL_RCC_OscConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80004d0:	f000 f828 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d4:	233f      	movs	r3, #63	; 0x3f
 80004d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	2303      	movs	r3, #3
 80004da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004e0:	2308      	movs	r3, #8
 80004e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004e4:	2340      	movs	r3, #64	; 0x40
 80004e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004f2:	2340      	movs	r3, #64	; 0x40
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2104      	movs	r1, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 f9c9 	bl	8001894 <HAL_RCC_ClockConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000508:	f000 f80c 	bl	8000524 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800050c:	f001 fb78 	bl	8001c00 <HAL_RCC_EnableCSS>
}
 8000510:	bf00      	nop
 8000512:	3778      	adds	r7, #120	; 0x78
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	58000400 	.word	0x58000400
 800051c:	58024800 	.word	0x58024800
 8000520:	58024400 	.word	0x58024400

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <MX_SDMMC1_SD_Init+0x40>)
 8000538:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_SDMMC1_SD_Init+0x3c>)
 800055a:	f003 feb3 	bl	80042c4 <HAL_SD_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000564:	f7ff ffde 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2400002c 	.word	0x2400002c
 8000570:	52007000 	.word	0x52007000

08000574 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0ba      	sub	sp, #232	; 0xe8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	22bc      	movs	r2, #188	; 0xbc
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f005 ff19 	bl	80063cc <memset>
  if(sdHandle->Instance==SDMMC1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a43      	ldr	r2, [pc, #268]	; (80006ac <HAL_SD_MspInit+0x138>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d17f      	bne.n	80006a4 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80005aa:	2310      	movs	r3, #16
 80005ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 8;
 80005ba:	2308      	movs	r3, #8
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80005be:	2300      	movs	r3, #0
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fce9 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80005e0:	f7ff ffa0 	bl	8000524 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 80005e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005ea:	4a31      	ldr	r2, [pc, #196]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 80005ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 80005f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 8000622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <HAL_SD_MspInit+0x13c>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800063e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064c:	2301      	movs	r3, #1
 800064e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000658:	230c      	movs	r3, #12
 800065a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000662:	4619      	mov	r1, r3
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <HAL_SD_MspInit+0x140>)
 8000666:	f000 fafd 	bl	8000c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800066a:	2304      	movs	r3, #4
 800066c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000682:	230c      	movs	r3, #12
 8000684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800068c:	4619      	mov	r1, r3
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <HAL_SD_MspInit+0x144>)
 8000690:	f000 fae8 	bl	8000c64 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2031      	movs	r0, #49	; 0x31
 800069a:	f000 faae 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800069e:	2031      	movs	r0, #49	; 0x31
 80006a0:	f000 fac5 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	37e8      	adds	r7, #232	; 0xe8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	52007000 	.word	0x52007000
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020800 	.word	0x58020800
 80006b8:	58020c00 	.word	0x58020c00

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_MspInit+0x30>)
 80006c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x30>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x30>)
 80006d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	58024400 	.word	0x58024400

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80006f4:	f001 fc3e 	bl	8001f74 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x8>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f930 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <SDMMC1_IRQHandler+0x10>)
 800074e:	f003 fed3 	bl	80044f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2400002c 	.word	0x2400002c

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000760:	4b37      	ldr	r3, [pc, #220]	; (8000840 <SystemInit+0xe4>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a36      	ldr	r2, [pc, #216]	; (8000840 <SystemInit+0xe4>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000770:	4b34      	ldr	r3, [pc, #208]	; (8000844 <SystemInit+0xe8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	2b06      	cmp	r3, #6
 800077a:	d807      	bhi.n	800078c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <SystemInit+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <SystemInit+0xe8>)
 8000786:	f043 0307 	orr.w	r3, r3, #7
 800078a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <SystemInit+0xec>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <SystemInit+0xec>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <SystemInit+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <SystemInit+0xec>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4929      	ldr	r1, [pc, #164]	; (8000848 <SystemInit+0xec>)
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemInit+0xf0>)
 80007a6:	4013      	ands	r3, r2
 80007a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemInit+0xe8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemInit+0xe8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f023 030f 	bic.w	r3, r3, #15
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemInit+0xe8>)
 80007c0:	f043 0307 	orr.w	r3, r3, #7
 80007c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <SystemInit+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <SystemInit+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <SystemInit+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <SystemInit+0xec>)
 80007da:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <SystemInit+0xf4>)
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <SystemInit+0xec>)
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <SystemInit+0xf8>)
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <SystemInit+0xec>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <SystemInit+0xfc>)
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <SystemInit+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <SystemInit+0xec>)
 80007f2:	4a19      	ldr	r2, [pc, #100]	; (8000858 <SystemInit+0xfc>)
 80007f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <SystemInit+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <SystemInit+0xec>)
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <SystemInit+0xfc>)
 8000800:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <SystemInit+0xec>)
 8000804:	2200      	movs	r2, #0
 8000806:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <SystemInit+0xec>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <SystemInit+0xec>)
 800080e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000812:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <SystemInit+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <SystemInit+0x100>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <SystemInit+0x104>)
 8000820:	4013      	ands	r3, r2
 8000822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000826:	d202      	bcs.n	800082e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <SystemInit+0x108>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <SystemInit+0x10c>)
 8000830:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000834:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00
 8000844:	52002000 	.word	0x52002000
 8000848:	58024400 	.word	0x58024400
 800084c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000850:	02020200 	.word	0x02020200
 8000854:	01ff0000 	.word	0x01ff0000
 8000858:	01010280 	.word	0x01010280
 800085c:	5c001000 	.word	0x5c001000
 8000860:	ffff0000 	.word	0xffff0000
 8000864:	51008108 	.word	0x51008108
 8000868:	52004000 	.word	0x52004000

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000870:	f7ff ff74 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	; (80008ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	; (80008b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089a:	f005 fd73 	bl	8006384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff fd71 	bl	8000384 <main>
  bx  lr
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008ac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008b0:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 80008b4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008b8:	240000ac 	.word	0x240000ac

080008bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC3_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c6:	2003      	movs	r0, #3
 80008c8:	f000 f98c 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008cc:	f001 f9a8 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_Init+0x68>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	4913      	ldr	r1, [pc, #76]	; (800092c <HAL_Init+0x6c>)
 80008de:	5ccb      	ldrb	r3, [r1, r3]
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	fa22 f303 	lsr.w	r3, r2, r3
 80008e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_Init+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_Init+0x6c>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	f003 031f 	and.w	r3, r3, #31
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_Init+0x70>)
 8000902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <HAL_Init+0x74>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f814 	bl	8000938 <HAL_InitTick>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e002      	b.n	8000920 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800091a:	f7ff fecf 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58024400 	.word	0x58024400
 800092c:	080063f4 	.word	0x080063f4
 8000930:	24000004 	.word	0x24000004
 8000934:	24000000 	.word	0x24000000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_InitTick+0x60>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	e021      	b.n	8000990 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_InitTick+0x64>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f971 	bl	8000c4a <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f93b 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x68>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2400000c 	.word	0x2400000c
 800099c:	24000000 	.word	0x24000000
 80009a0:	24000008 	.word	0x24000008

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	2400000c 	.word	0x2400000c
 80009c8:	240000a8 	.word	0x240000a8

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	240000a8 	.word	0x240000a8

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff ffee 	bl	80009cc <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffde 	bl	80009cc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2400000c 	.word	0x2400000c

08000a2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetREVID+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	0c1b      	lsrs	r3, r3, #16
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	5c001000 	.word	0x5c001000

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	05fa0000 	.word	0x05fa0000

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff40 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff90 	bl	8000b38 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5f 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff33 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa4 	bl	8000ba0 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <HAL_GPIO_Init+0x234>)
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c76:	e194      	b.n	8000fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8186 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x44>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d017      	beq.n	8000d46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	69b9      	ldr	r1, [r7, #24]
 8000d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80e0 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de2:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_GPIO_Init+0x23c>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_GPIO_Init+0x240>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d052      	beq.n	8000ecc <HAL_GPIO_Init+0x268>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_GPIO_Init+0x244>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_GPIO_Init+0x248>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x24c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x250>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_GPIO_Init+0x254>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_GPIO_Init+0x258>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x25c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x260>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_GPIO_Init+0x264>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e6e:	2309      	movs	r3, #9
 8000e70:	e02d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e72:	230a      	movs	r3, #10
 8000e74:	e02b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e029      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e027      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e025      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e023      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e021      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e01f      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e01d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e01b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e96:	bf00      	nop
 8000e98:	58000080 	.word	0x58000080
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58000400 	.word	0x58000400
 8000ea4:	58020000 	.word	0x58020000
 8000ea8:	58020400 	.word	0x58020400
 8000eac:	58020800 	.word	0x58020800
 8000eb0:	58020c00 	.word	0x58020c00
 8000eb4:	58021000 	.word	0x58021000
 8000eb8:	58021400 	.word	0x58021400
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	58021c00 	.word	0x58021c00
 8000ec4:	58022000 	.word	0x58022000
 8000ec8:	58022400 	.word	0x58022400
 8000ecc:	2300      	movs	r3, #0
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4938      	ldr	r1, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x35c>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f ae63 	bne.w	8000c78 <HAL_GPIO_Init+0x14>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58000400 	.word	0x58000400

08000fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_PWREx_ConfigSupply+0x70>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d00a      	beq.n	8000fee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_PWREx_ConfigSupply+0x70>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d001      	beq.n	8000fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e01f      	b.n	800102a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e01d      	b.n	800102a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_PWREx_ConfigSupply+0x70>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	f023 0207 	bic.w	r2, r3, #7
 8000ff6:	490f      	ldr	r1, [pc, #60]	; (8001034 <HAL_PWREx_ConfigSupply+0x70>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ffe:	f7ff fce5 	bl	80009cc <HAL_GetTick>
 8001002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001004:	e009      	b.n	800101a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001006:	f7ff fce1 	bl	80009cc <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001014:	d901      	bls.n	800101a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e007      	b.n	800102a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_PWREx_ConfigSupply+0x70>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001026:	d1ee      	bne.n	8001006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	58024800 	.word	0x58024800

08001038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 bc1d 	b.w	8001886 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8087 	beq.w	8001168 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105a:	4b99      	ldr	r3, [pc, #612]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001064:	4b96      	ldr	r3, [pc, #600]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	2b10      	cmp	r3, #16
 800106e:	d007      	beq.n	8001080 <HAL_RCC_OscConfig+0x48>
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	2b18      	cmp	r3, #24
 8001074:	d110      	bne.n	8001098 <HAL_RCC_OscConfig+0x60>
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d10b      	bne.n	8001098 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d06c      	beq.n	8001166 <HAL_RCC_OscConfig+0x12e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d168      	bne.n	8001166 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e3f6      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x78>
 80010a2:	4b87      	ldr	r3, [pc, #540]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a86      	ldr	r2, [pc, #536]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e02e      	b.n	800110e <HAL_RCC_OscConfig+0xd6>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x9a>
 80010b8:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a80      	ldr	r2, [pc, #512]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a7d      	ldr	r2, [pc, #500]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e01d      	b.n	800110e <HAL_RCC_OscConfig+0xd6>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0xbe>
 80010dc:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a77      	ldr	r2, [pc, #476]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a74      	ldr	r2, [pc, #464]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e00b      	b.n	800110e <HAL_RCC_OscConfig+0xd6>
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a71      	ldr	r2, [pc, #452]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80010fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6e      	ldr	r2, [pc, #440]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001116:	f7ff fc59 	bl	80009cc <HAL_GetTick>
 800111a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fc55 	bl	80009cc <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e3aa      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0xe6>
 800113c:	e014      	b.n	8001168 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fc45 	bl	80009cc <HAL_GetTick>
 8001142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fc41 	bl	80009cc <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e396      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x10e>
 8001164:	e000      	b.n	8001168 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001166:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80cb 	beq.w	800130c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800117e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <HAL_RCC_OscConfig+0x164>
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	2b18      	cmp	r3, #24
 8001190:	d156      	bne.n	8001240 <HAL_RCC_OscConfig+0x208>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d151      	bne.n	8001240 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x17c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e368      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011b4:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 0219 	bic.w	r2, r3, #25
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	493f      	ldr	r1, [pc, #252]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011c6:	f7ff fc01 	bl	80009cc <HAL_GetTick>
 80011ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fbfd 	bl	80009cc <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e352      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	f7ff fc1e 	bl	8000a2c <HAL_GetREVID>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d817      	bhi.n	800122a <HAL_RCC_OscConfig+0x1f2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b40      	cmp	r3, #64	; 0x40
 8001200:	d108      	bne.n	8001214 <HAL_RCC_OscConfig+0x1dc>
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800120a:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001212:	e07b      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	031b      	lsls	r3, r3, #12
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001228:	e070      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	061b      	lsls	r3, r3, #24
 8001238:	4921      	ldr	r1, [pc, #132]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123e:	e065      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d048      	beq.n	80012da <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 0219 	bic.w	r2, r3, #25
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	491a      	ldr	r1, [pc, #104]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fbb7 	bl	80009cc <HAL_GetTick>
 800125e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff fbb3 	bl	80009cc <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e308      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	f7ff fbd4 	bl	8000a2c <HAL_GetREVID>
 8001284:	4603      	mov	r3, r0
 8001286:	f241 0203 	movw	r2, #4099	; 0x1003
 800128a:	4293      	cmp	r3, r2
 800128c:	d81a      	bhi.n	80012c4 <HAL_RCC_OscConfig+0x28c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b40      	cmp	r3, #64	; 0x40
 8001294:	d108      	bne.n	80012a8 <HAL_RCC_OscConfig+0x270>
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6053      	str	r3, [r2, #4]
 80012a6:	e031      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	031b      	lsls	r3, r3, #12
 80012b6:	4902      	ldr	r1, [pc, #8]	; (80012c0 <HAL_RCC_OscConfig+0x288>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e026      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
 80012be:	bf00      	nop
 80012c0:	58024400 	.word	0x58024400
 80012c4:	4b9a      	ldr	r3, [pc, #616]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	061b      	lsls	r3, r3, #24
 80012d2:	4997      	ldr	r1, [pc, #604]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e018      	b.n	800130c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b95      	ldr	r3, [pc, #596]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a94      	ldr	r2, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb71 	bl	80009cc <HAL_GetTick>
 80012ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fb6d 	bl	80009cc <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e2c2      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001300:	4b8b      	ldr	r3, [pc, #556]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a9 	beq.w	800146c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001322:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001324:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b08      	cmp	r3, #8
 800132e:	d007      	beq.n	8001340 <HAL_RCC_OscConfig+0x308>
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b18      	cmp	r3, #24
 8001334:	d13a      	bne.n	80013ac <HAL_RCC_OscConfig+0x374>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d135      	bne.n	80013ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_OscConfig+0x320>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b80      	cmp	r3, #128	; 0x80
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e296      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001358:	f7ff fb68 	bl	8000a2c <HAL_GetREVID>
 800135c:	4603      	mov	r3, r0
 800135e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001362:	4293      	cmp	r3, r2
 8001364:	d817      	bhi.n	8001396 <HAL_RCC_OscConfig+0x35e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b20      	cmp	r3, #32
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x348>
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001376:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800137c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800137e:	e075      	b.n	800146c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001380:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	069b      	lsls	r3, r3, #26
 800138e:	4968      	ldr	r1, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001394:	e06a      	b.n	800146c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	4962      	ldr	r1, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013aa:	e05f      	b.n	800146c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d042      	beq.n	800143a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5d      	ldr	r2, [pc, #372]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80013ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb04 	bl	80009cc <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb00 	bl	80009cc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e255      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e6:	f7ff fb21 	bl	8000a2c <HAL_GetREVID>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d817      	bhi.n	8001424 <HAL_RCC_OscConfig+0x3ec>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d108      	bne.n	800140e <HAL_RCC_OscConfig+0x3d6>
 80013fc:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800140a:	6053      	str	r3, [r2, #4]
 800140c:	e02e      	b.n	800146c <HAL_RCC_OscConfig+0x434>
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	069b      	lsls	r3, r3, #26
 800141c:	4944      	ldr	r1, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
 8001422:	e023      	b.n	800146c <HAL_RCC_OscConfig+0x434>
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	493f      	ldr	r1, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
 8001438:	e018      	b.n	800146c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fac1 	bl	80009cc <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800144e:	f7ff fabd 	bl	80009cc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e212      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d036      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d019      	beq.n	80014b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fa9e 	bl	80009cc <HAL_GetTick>
 8001490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fa9a 	bl	80009cc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ef      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x45c>
 80014b2:	e018      	b.n	80014e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa84 	bl	80009cc <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fa80 	bl	80009cc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1d5      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d039      	beq.n	8001566 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01c      	beq.n	8001534 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001506:	f7ff fa61 	bl	80009cc <HAL_GetTick>
 800150a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800150e:	f7ff fa5d 	bl	80009cc <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1b2      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_RCC_OscConfig+0x4f8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x4d6>
 800152c:	e01b      	b.n	8001566 <HAL_RCC_OscConfig+0x52e>
 800152e:	bf00      	nop
 8001530:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001534:	4b9b      	ldr	r3, [pc, #620]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9a      	ldr	r2, [pc, #616]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800153a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800153e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa44 	bl	80009cc <HAL_GetTick>
 8001544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001548:	f7ff fa40 	bl	80009cc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e195      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800155a:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8081 	beq.w	8001676 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001574:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x770>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a8b      	ldr	r2, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x770>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa24 	bl	80009cc <HAL_GetTick>
 8001584:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fa20 	bl	80009cc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e175      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800159a:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <HAL_RCC_OscConfig+0x770>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x584>
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	e02d      	b.n	8001618 <HAL_RCC_OscConfig+0x5e0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x5a6>
 80015c4:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a76      	ldr	r2, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b74      	ldr	r3, [pc, #464]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a73      	ldr	r2, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x5e0>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c8>
 80015e6:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a6e      	ldr	r2, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a6b      	ldr	r2, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x5e0>
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a64      	ldr	r2, [pc, #400]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f9d4 	bl	80009cc <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff f9d0 	bl	80009cc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e123      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCC_OscConfig+0x5f0>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff f9be 	bl	80009cc <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff f9ba 	bl	80009cc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e10d      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800166a:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ee      	bne.n	8001654 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8102 	beq.w	8001884 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001688:	2b18      	cmp	r3, #24
 800168a:	f000 80bd 	beq.w	8001808 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	2b02      	cmp	r3, #2
 8001694:	f040 809e 	bne.w	80017d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a41      	ldr	r2, [pc, #260]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800169e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f992 	bl	80009cc <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff f98e 	bl	80009cc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0e3      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_OscConfig+0x774>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	4931      	ldr	r1, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	628b      	str	r3, [r1, #40]	; 0x28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	3b01      	subs	r3, #1
 80016ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	3b01      	subs	r3, #1
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	3b01      	subs	r3, #1
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	3b01      	subs	r3, #1
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001714:	4923      	ldr	r1, [pc, #140]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001716:	4313      	orrs	r3, r2
 8001718:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x778>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001736:	4313      	orrs	r3, r2
 8001738:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	f023 020c 	bic.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4917      	ldr	r1, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001748:	4313      	orrs	r3, r2
 800174a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f023 0202 	bic.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	4912      	ldr	r1, [pc, #72]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800175a:	4313      	orrs	r3, r2
 800175c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_RCC_OscConfig+0x76c>)
 8001794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f917 	bl	80009cc <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017a0:	e011      	b.n	80017c6 <HAL_RCC_OscConfig+0x78e>
 80017a2:	bf00      	nop
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58024800 	.word	0x58024800
 80017ac:	fffffc0c 	.word	0xfffffc0c
 80017b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f90a 	bl	80009cc <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e05f      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c6:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x77c>
 80017d2:	e057      	b.n	8001884 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 80017da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f8f4 	bl	80009cc <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f8f0 	bl	80009cc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e045      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x7b0>
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_OscConfig+0x858>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	2b01      	cmp	r3, #1
 800181a:	d031      	beq.n	8001880 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d12a      	bne.n	8001880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d122      	bne.n	8001880 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11a      	bne.n	8001880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	0a5b      	lsrs	r3, r3, #9
 800184e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001868:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0e1b      	lsrs	r3, r3, #24
 8001872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	58024400 	.word	0x58024400

08001894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e19c      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b8a      	ldr	r3, [pc, #552]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 020f 	bic.w	r2, r3, #15
 80018be:	4985      	ldr	r1, [pc, #532]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b83      	ldr	r3, [pc, #524]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e184      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d908      	bls.n	8001906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018f4:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4975      	ldr	r1, [pc, #468]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001902:	4313      	orrs	r3, r2
 8001904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800191e:	429a      	cmp	r2, r3
 8001920:	d908      	bls.n	8001934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	496a      	ldr	r1, [pc, #424]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001930:	4313      	orrs	r3, r2
 8001932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800194c:	429a      	cmp	r2, r3
 800194e:	d908      	bls.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	495e      	ldr	r1, [pc, #376]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 800195e:	4313      	orrs	r3, r2
 8001960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800197a:	429a      	cmp	r2, r3
 800197c:	d908      	bls.n	8001990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4953      	ldr	r1, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 800198c:	4313      	orrs	r3, r2
 800198e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d908      	bls.n	80019be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f023 020f 	bic.w	r2, r3, #15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4947      	ldr	r1, [pc, #284]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d055      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4940      	ldr	r1, [pc, #256]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d121      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0f6      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0ea      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0de      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0d6      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f023 0207 	bic.w	r2, r3, #7
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7fe ffc1 	bl	80009cc <HAL_GetTick>
 8001a4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7fe ffbd 	bl	80009cc <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0be      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d1eb      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d208      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f023 020f 	bic.w	r2, r3, #15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d214      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 020f 	bic.w	r2, r3, #15
 8001aba:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e086      	b.n	8001be2 <HAL_RCC_ClockConfig+0x34e>
 8001ad4:	52002000 	.word	0x52002000
 8001ad8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d208      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	4939      	ldr	r1, [pc, #228]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d208      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	492e      	ldr	r1, [pc, #184]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d208      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b54:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4922      	ldr	r1, [pc, #136]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d010      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d208      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4917      	ldr	r1, [pc, #92]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b94:	f000 f844 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4912      	ldr	r1, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x35c>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_ClockConfig+0x35c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_RCC_ClockConfig+0x360>)
 8001bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x364>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x368>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe feae 	bl	8000938 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	080063f4 	.word	0x080063f4
 8001bf4:	24000004 	.word	0x24000004
 8001bf8:	24000000 	.word	0x24000000
 8001bfc:	24000008 	.word	0x24000008

08001c00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_EnableCSS+0x1c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_RCC_EnableCSS+0x1c>)
 8001c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	58024400 	.word	0x58024400

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c26:	4bb3      	ldr	r3, [pc, #716]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c2e:	2b18      	cmp	r3, #24
 8001c30:	f200 8155 	bhi.w	8001ede <HAL_RCC_GetSysClockFreq+0x2be>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001ca1 	.word	0x08001ca1
 8001c40:	08001edf 	.word	0x08001edf
 8001c44:	08001edf 	.word	0x08001edf
 8001c48:	08001edf 	.word	0x08001edf
 8001c4c:	08001edf 	.word	0x08001edf
 8001c50:	08001edf 	.word	0x08001edf
 8001c54:	08001edf 	.word	0x08001edf
 8001c58:	08001edf 	.word	0x08001edf
 8001c5c:	08001cc7 	.word	0x08001cc7
 8001c60:	08001edf 	.word	0x08001edf
 8001c64:	08001edf 	.word	0x08001edf
 8001c68:	08001edf 	.word	0x08001edf
 8001c6c:	08001edf 	.word	0x08001edf
 8001c70:	08001edf 	.word	0x08001edf
 8001c74:	08001edf 	.word	0x08001edf
 8001c78:	08001edf 	.word	0x08001edf
 8001c7c:	08001ccd 	.word	0x08001ccd
 8001c80:	08001edf 	.word	0x08001edf
 8001c84:	08001edf 	.word	0x08001edf
 8001c88:	08001edf 	.word	0x08001edf
 8001c8c:	08001edf 	.word	0x08001edf
 8001c90:	08001edf 	.word	0x08001edf
 8001c94:	08001edf 	.word	0x08001edf
 8001c98:	08001edf 	.word	0x08001edf
 8001c9c:	08001cd3 	.word	0x08001cd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ca0:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cac:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	4a90      	ldr	r2, [pc, #576]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001cbe:	e111      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cc0:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cc2:	61bb      	str	r3, [r7, #24]
    break;
 8001cc4:	e10e      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001cc6:	4b8d      	ldr	r3, [pc, #564]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cc8:	61bb      	str	r3, [r7, #24]
    break;
 8001cca:	e10b      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cce:	61bb      	str	r3, [r7, #24]
    break;
 8001cd0:	e108      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001cdc:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ce8:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001cf2:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80e1 	beq.w	8001ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f000 8083 	beq.w	8001e24 <HAL_RCC_GetSysClockFreq+0x204>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	f200 80a1 	bhi.w	8001e68 <HAL_RCC_GetSysClockFreq+0x248>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x114>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d056      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d32:	e099      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02d      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d40:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d9a:	e087      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dde:	e065      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e22:	e043      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e66:	e021      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eaa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	0a5b      	lsrs	r3, r3, #9
 8001eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed0:	ee17 3a90 	vmov	r3, s15
 8001ed4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
    break;
 8001edc:	e002      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ee0:	61bb      	str	r3, [r7, #24]
    break;
 8001ee2:	bf00      	nop
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	03d09000 	.word	0x03d09000
 8001efc:	003d0900 	.word	0x003d0900
 8001f00:	016e3600 	.word	0x016e3600
 8001f04:	46000000 	.word	0x46000000
 8001f08:	4c742400 	.word	0x4c742400
 8001f0c:	4a742400 	.word	0x4a742400
 8001f10:	4bb71b00 	.word	0x4bb71b00

08001f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001f1a:	f7ff fe81 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	490f      	ldr	r1, [pc, #60]	; (8001f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f2c:	5ccb      	ldrb	r3, [r1, r3]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8001f50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	58024400 	.word	0x58024400
 8001f68:	080063f4 	.word	0x080063f4
 8001f6c:	24000004 	.word	0x24000004
 8001f70:	24000000 	.word	0x24000000

08001f74 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8001f86:	f000 f809 	bl	8001f9c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	58024400 	.word	0x58024400

08001f9c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03f      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fdc:	d018      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fec:	d007      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ff0:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	4aa2      	ldr	r2, [pc, #648]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fff9 	bl	8003ffc <RCCEx_PLL2_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3324      	adds	r3, #36	; 0x24
 8002014:	2102      	movs	r1, #2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 f8a2 	bl	8004160 <RCCEx_PLL3_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002030:	4b93      	ldr	r3, [pc, #588]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203c:	4990      	ldr	r1, [pc, #576]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	650b      	str	r3, [r1, #80]	; 0x50
 8002042:	e001      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d03d      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	2b04      	cmp	r3, #4
 800205a:	d826      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800205c:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002079 	.word	0x08002079
 8002068:	08002087 	.word	0x08002087
 800206c:	08002099 	.word	0x08002099
 8002070:	080020b1 	.word	0x080020b1
 8002074:	080020b1 	.word	0x080020b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800207e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f001 ffb5 	bl	8003ffc <RCCEx_PLL2_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3324      	adds	r3, #36	; 0x24
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 f85e 	bl	8004160 <RCCEx_PLL3_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	4b71      	ldr	r3, [pc, #452]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020bc:	f023 0207 	bic.w	r2, r3, #7
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	496e      	ldr	r1, [pc, #440]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	650b      	str	r3, [r1, #80]	; 0x50
 80020ca:	e001      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d042      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e4:	d02b      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80020e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ea:	d825      	bhi.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020ec:	2bc0      	cmp	r3, #192	; 0xc0
 80020ee:	d028      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80020f0:	2bc0      	cmp	r3, #192	; 0xc0
 80020f2:	d821      	bhi.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d016      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d81d      	bhi.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d007      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002104:	e018      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002106:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002112:	e017      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f001 ff6e 	bl	8003ffc <RCCEx_PLL2_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002124:	e00e      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3324      	adds	r3, #36	; 0x24
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f817 	bl	8004160 <RCCEx_PLL3_Config>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
      break;
 800213c:	e002      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	494a      	ldr	r1, [pc, #296]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	650b      	str	r3, [r1, #80]	; 0x50
 800215c:	e001      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d049      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002178:	d030      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800217a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217e:	d82a      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002180:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002184:	d02c      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002186:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800218a:	d824      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800218c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002190:	d018      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d81e      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800219c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021a0:	d007      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80021a2:	e018      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	4a35      	ldr	r2, [pc, #212]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021b0:	e017      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 ff1f 	bl	8003ffc <RCCEx_PLL2_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80021c2:	e00e      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3324      	adds	r3, #36	; 0x24
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 ffc8 	bl	8004160 <RCCEx_PLL3_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021d4:	e005      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80021e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021f6:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	658b      	str	r3, [r1, #88]	; 0x58
 80021fc:	e001      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220a:	2b00      	cmp	r3, #0
 800220c:	d04b      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002218:	d030      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800221a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221e:	d82a      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002224:	d02e      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800222a:	d824      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800222c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002230:	d018      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002236:	d81e      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d007      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002242:	e018      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800224a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002250:	e019      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fecf 	bl	8003ffc <RCCEx_PLL2_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002262:	e010      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3324      	adds	r3, #36	; 0x24
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f001 ff78 	bl	8004160 <RCCEx_PLL3_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002274:	e007      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
      break;
 800227a:	e004      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800227c:	bf00      	nop
 800227e:	e002      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002280:	58024400 	.word	0x58024400
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800228c:	4b99      	ldr	r3, [pc, #612]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800229a:	4996      	ldr	r1, [pc, #600]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800229c:	4313      	orrs	r3, r2
 800229e:	658b      	str	r3, [r1, #88]	; 0x58
 80022a0:	e001      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	2b30      	cmp	r3, #48	; 0x30
 80022b8:	d01c      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80022ba:	2b30      	cmp	r3, #48	; 0x30
 80022bc:	d817      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d00c      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d813      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d10f      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	4a88      	ldr	r2, [pc, #544]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022da:	e00e      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fe8a 	bl	8003ffc <RCCEx_PLL2_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022ec:	e005      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80022f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002300:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	4979      	ldr	r1, [pc, #484]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800230e:	4313      	orrs	r3, r2
 8002310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002312:	e001      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d047      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800232c:	d030      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800232e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002332:	d82a      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002338:	d02c      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800233a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800233e:	d824      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	d018      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234a:	d81e      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002354:	d007      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002356:	e018      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002364:	e017      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f001 fe45 	bl	8003ffc <RCCEx_PLL2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002376:	e00e      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3324      	adds	r3, #36	; 0x24
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f001 feee 	bl	8004160 <RCCEx_PLL3_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002388:	e005      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
      break;
 800238e:	e002      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	4952      	ldr	r1, [pc, #328]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	650b      	str	r3, [r1, #80]	; 0x50
 80023ae:	e001      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d049      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d02e      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80023ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ce:	d828      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80023d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023d4:	d02a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80023d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023da:	d822      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80023dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023e0:	d026      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80023e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023e6:	d81c      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80023e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80023ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023f2:	d816      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01d      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d111      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f001 fdf9 	bl	8003ffc <RCCEx_PLL2_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800240e:	e012      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3324      	adds	r3, #36	; 0x24
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fea2 	bl	8004160 <RCCEx_PLL3_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002420:	e009      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      break;
 8002426:	e006      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002428:	bf00      	nop
 800242a:	e004      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800242c:	bf00      	nop
 800242e:	e002      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002430:	bf00      	nop
 8002432:	e000      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002440:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	492a      	ldr	r1, [pc, #168]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800244a:	4313      	orrs	r3, r2
 800244c:	650b      	str	r3, [r1, #80]	; 0x50
 800244e:	e001      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d04d      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d02e      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800246c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002470:	d828      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d02a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d822      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800247e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002482:	d026      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002488:	d81c      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800248a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800248e:	d010      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002494:	d816      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01d      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800249a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800249e:	d111      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fda8 	bl	8003ffc <RCCEx_PLL2_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80024b0:	e012      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3324      	adds	r3, #36	; 0x24
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fe51 	bl	8004160 <RCCEx_PLL3_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	75fb      	strb	r3, [r7, #23]
      break;
 80024c8:	e006      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80024ca:	bf00      	nop
 80024cc:	e004      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80024d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024ec:	4901      	ldr	r1, [pc, #4]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	658b      	str	r3, [r1, #88]	; 0x58
 80024f2:	e003      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80024f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02f      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002510:	d00e      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002516:	d814      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800251c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002520:	d10f      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002522:	4baf      	ldr	r3, [pc, #700]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4aae      	ldr	r2, [pc, #696]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800252e:	e00c      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f001 fd60 	bl	8003ffc <RCCEx_PLL2_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002540:	e003      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
      break;
 8002546:	e000      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002550:	4ba3      	ldr	r3, [pc, #652]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255c:	49a0      	ldr	r1, [pc, #640]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800255e:	4313      	orrs	r3, r2
 8002560:	650b      	str	r3, [r1, #80]	; 0x50
 8002562:	e001      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d032      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	2b03      	cmp	r3, #3
 800257a:	d81b      	bhi.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025bb 	.word	0x080025bb
 8002588:	08002595 	.word	0x08002595
 800258c:	080025a3 	.word	0x080025a3
 8002590:	080025bb 	.word	0x080025bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4a91      	ldr	r2, [pc, #580]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80025a0:	e00c      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2102      	movs	r1, #2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fd27 	bl	8003ffc <RCCEx_PLL2_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80025b2:	e003      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	75fb      	strb	r3, [r7, #23]
      break;
 80025b8:	e000      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80025ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80025c2:	4b87      	ldr	r3, [pc, #540]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4984      	ldr	r1, [pc, #528]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025d4:	e001      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8086 	beq.w	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b7e      	ldr	r3, [pc, #504]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7d      	ldr	r2, [pc, #500]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f4:	f7fe f9ea 	bl	80009cc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fa:	e009      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe f9e6 	bl	80009cc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d902      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	75fb      	strb	r3, [r7, #23]
        break;
 800260e:	e005      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002610:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d166      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002622:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800262c:	4053      	eors	r3, r2
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d013      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002636:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002640:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264c:	4b64      	ldr	r3, [pc, #400]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a63      	ldr	r2, [pc, #396]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002658:	4a61      	ldr	r2, [pc, #388]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002668:	d115      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe f9af 	bl	80009cc <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002670:	e00b      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe f9ab 	bl	80009cc <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	75fb      	strb	r3, [r7, #23]
            break;
 8002688:	e005      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268a:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ed      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d126      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026ba:	0919      	lsrs	r1, r3, #4
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80026be:	400b      	ands	r3, r1
 80026c0:	4947      	ldr	r1, [pc, #284]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
 80026c6:	e005      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026d2:	6113      	str	r3, [r2, #16]
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	493f      	ldr	r1, [pc, #252]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	670b      	str	r3, [r1, #112]	; 0x70
 80026e8:	e004      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	75bb      	strb	r3, [r7, #22]
 80026ee:	e001      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8085 	beq.w	800280c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	2b28      	cmp	r3, #40	; 0x28
 8002708:	d866      	bhi.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	080027ed 	.word	0x080027ed
 8002714:	080027d9 	.word	0x080027d9
 8002718:	080027d9 	.word	0x080027d9
 800271c:	080027d9 	.word	0x080027d9
 8002720:	080027d9 	.word	0x080027d9
 8002724:	080027d9 	.word	0x080027d9
 8002728:	080027d9 	.word	0x080027d9
 800272c:	080027d9 	.word	0x080027d9
 8002730:	080027b5 	.word	0x080027b5
 8002734:	080027d9 	.word	0x080027d9
 8002738:	080027d9 	.word	0x080027d9
 800273c:	080027d9 	.word	0x080027d9
 8002740:	080027d9 	.word	0x080027d9
 8002744:	080027d9 	.word	0x080027d9
 8002748:	080027d9 	.word	0x080027d9
 800274c:	080027d9 	.word	0x080027d9
 8002750:	080027c7 	.word	0x080027c7
 8002754:	080027d9 	.word	0x080027d9
 8002758:	080027d9 	.word	0x080027d9
 800275c:	080027d9 	.word	0x080027d9
 8002760:	080027d9 	.word	0x080027d9
 8002764:	080027d9 	.word	0x080027d9
 8002768:	080027d9 	.word	0x080027d9
 800276c:	080027d9 	.word	0x080027d9
 8002770:	080027ed 	.word	0x080027ed
 8002774:	080027d9 	.word	0x080027d9
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027d9 	.word	0x080027d9
 8002780:	080027d9 	.word	0x080027d9
 8002784:	080027d9 	.word	0x080027d9
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027d9 	.word	0x080027d9
 8002790:	080027ed 	.word	0x080027ed
 8002794:	080027d9 	.word	0x080027d9
 8002798:	080027d9 	.word	0x080027d9
 800279c:	080027d9 	.word	0x080027d9
 80027a0:	080027d9 	.word	0x080027d9
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	080027d9 	.word	0x080027d9
 80027ac:	080027d9 	.word	0x080027d9
 80027b0:	080027ed 	.word	0x080027ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fc1e 	bl	8003ffc <RCCEx_PLL2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80027c4:	e013      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 fcc7 	bl	8004160 <RCCEx_PLL3_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80027d6:	e00a      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
      break;
 80027dc:	e007      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027de:	bf00      	nop
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58024800 	.word	0x58024800
 80027e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002800:	4993      	ldr	r1, [pc, #588]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	654b      	str	r3, [r1, #84]	; 0x54
 8002806:	e001      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d038      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	2b05      	cmp	r3, #5
 800281e:	d821      	bhi.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800286b 	.word	0x0800286b
 800282c:	08002841 	.word	0x08002841
 8002830:	08002853 	.word	0x08002853
 8002834:	0800286b 	.word	0x0800286b
 8002838:	0800286b 	.word	0x0800286b
 800283c:	0800286b 	.word	0x0800286b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fbd8 	bl	8003ffc <RCCEx_PLL2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002850:	e00c      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3324      	adds	r3, #36	; 0x24
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fc81 	bl	8004160 <RCCEx_PLL3_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002862:	e003      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
      break;
 8002868:	e000      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800286a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002872:	4b77      	ldr	r3, [pc, #476]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287e:	4974      	ldr	r1, [pc, #464]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	654b      	str	r3, [r1, #84]	; 0x54
 8002884:	e001      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	2b05      	cmp	r3, #5
 800289e:	d821      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028eb 	.word	0x080028eb
 80028ac:	080028c1 	.word	0x080028c1
 80028b0:	080028d3 	.word	0x080028d3
 80028b4:	080028eb 	.word	0x080028eb
 80028b8:	080028eb 	.word	0x080028eb
 80028bc:	080028eb 	.word	0x080028eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fb98 	bl	8003ffc <RCCEx_PLL2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028d0:	e00c      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fc41 	bl	8004160 <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028e2:	e003      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
      break;
 80028e8:	e000      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80028ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	4953      	ldr	r1, [pc, #332]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	658b      	str	r3, [r1, #88]	; 0x58
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d04b      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002922:	d02e      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002928:	d828      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d02a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d822      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800293a:	d026      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800293c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002940:	d81c      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002946:	d010      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294c:	d816      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01d      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002956:	d111      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fb4c 	bl	8003ffc <RCCEx_PLL2_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002968:	e012      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3324      	adds	r3, #36	; 0x24
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fbf5 	bl	8004160 <RCCEx_PLL3_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800297a:	e009      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	e006      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002982:	bf00      	nop
 8002984:	e004      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800298e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	492a      	ldr	r1, [pc, #168]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	654b      	str	r3, [r1, #84]	; 0x54
 80029aa:	e001      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d04d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029c6:	d02e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80029c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029cc:	d828      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d02a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d822      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80029da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029de:	d026      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80029e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029e4:	d81c      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80029e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ea:	d010      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f0:	d816      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01d      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d111      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fafa 	bl	8003ffc <RCCEx_PLL2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a0c:	e012      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fba3 	bl	8004160 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a1e:	e009      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
      break;
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002a26:	bf00      	nop
 8002a28:	e004      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a48:	4901      	ldr	r1, [pc, #4]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d04b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a6e:	d02e      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002a70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a74:	d828      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7a:	d02a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a80:	d822      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002a82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a86:	d026      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002a88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a8c:	d81c      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a98:	d816      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 faa6 	bl	8003ffc <RCCEx_PLL2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ab4:	e012      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3324      	adds	r3, #36	; 0x24
 8002aba:	2102      	movs	r1, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fb4f 	bl	8004160 <RCCEx_PLL3_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ac6:	e009      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
      break;
 8002acc:	e006      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ae2:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002af0:	4999      	ldr	r1, [pc, #612]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	658b      	str	r3, [r1, #88]	; 0x58
 8002af6:	e001      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3324      	adds	r3, #36	; 0x24
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fb20 	bl	8004160 <RCCEx_PLL3_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b38:	4987      	ldr	r1, [pc, #540]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d10a      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3324      	adds	r3, #36	; 0x24
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 faff 	bl	8004160 <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b6c:	4b7a      	ldr	r3, [pc, #488]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	4977      	ldr	r1, [pc, #476]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d034      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b96:	d01d      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b9c:	d817      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002ba8:	e011      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 fa23 	bl	8003ffc <RCCEx_PLL2_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002bba:	e00c      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 facc 	bl	8004160 <RCCEx_PLL3_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bea:	495b      	ldr	r1, [pc, #364]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	658b      	str	r3, [r1, #88]	; 0x58
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d033      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c0c:	d01c      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c12:	d816      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c18:	d003      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1e:	d007      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002c20:	e00f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c2e:	e00c      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fa92 	bl	8004160 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
      break;
 8002c46:	e000      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c50:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5e:	493e      	ldr	r1, [pc, #248]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	654b      	str	r3, [r1, #84]	; 0x54
 8002c64:	e001      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d029      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d007      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002c84:	e00f      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002c92:	e00b      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f9ae 	bl	8003ffc <RCCEx_PLL2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ca4:	e002      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8002caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	4926      	ldr	r1, [pc, #152]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cc4:	e001      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fa3f 	bl	8004160 <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d033      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d00:	d017      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d06:	d811      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d013      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	d80b      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002d2a:	e007      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d30:	e004      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4e:	4902      	ldr	r1, [pc, #8]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	654b      	str	r3, [r1, #84]	; 0x54
 8002d54:	e004      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002d56:	bf00      	nop
 8002d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	492e      	ldr	r1, [pc, #184]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d98:	4926      	ldr	r1, [pc, #152]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db6:	491f      	ldr	r1, [pc, #124]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dd2:	6113      	str	r3, [r2, #16]
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002dde:	4915      	ldr	r1, [pc, #84]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da08      	bge.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	490e      	ldr	r1, [pc, #56]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	4906      	ldr	r1, [pc, #24]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002e1e:	7dbb      	ldrb	r3, [r7, #22]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400

08002e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b090      	sub	sp, #64	; 0x40
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	f040 8095 	bne.w	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002e4a:	4b97      	ldr	r3, [pc, #604]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	f200 8088 	bhi.w	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e79 	.word	0x08002e79
 8002e68:	08002ea1 	.word	0x08002ea1
 8002e6c:	08002ec9 	.word	0x08002ec9
 8002e70:	08002f65 	.word	0x08002f65
 8002e74:	08002ef1 	.word	0x08002ef1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002e78:	4b8b      	ldr	r3, [pc, #556]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e84:	d108      	bne.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff64 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8002e94:	f000 bc94 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e9c:	f000 bc90 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002ea0:	4b81      	ldr	r3, [pc, #516]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002eae:	f107 0318 	add.w	r3, r7, #24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fca8 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8002ebc:	f000 bc80 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ec4:	f000 bc7c 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002ec8:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fde8 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8002ee4:	f000 bc6c 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eec:	f000 bc68 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002efa:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1e:	e01f      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f34:	d102      	bne.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3a:	e011      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8002f3c:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f50:	d102      	bne.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	e003      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8002f5c:	f000 bc30 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002f60:	f000 bc2e 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f64:	4b54      	ldr	r3, [pc, #336]	; (80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f68:	f000 bc2a 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f70:	f000 bc26 	b.w	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	f040 809f 	bne.w	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d04d      	beq.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f96:	f200 8084 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f9e:	d07d      	beq.n	800309c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa4:	d87d      	bhi.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d02d      	beq.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d877      	bhi.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d012      	beq.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002fbe:	e070      	b.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fcc:	d107      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fec0 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8002fdc:	e3f0      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fe2:	e3ed      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d107      	bne.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ff2:	f107 0318 	add.w	r3, r7, #24
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fc06 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003000:	e3de      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003006:	e3db      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003014:	d107      	bne.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd48 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003024:	e3cc      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800302a:	e3c9      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003034:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	e01e      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d106      	bne.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003070:	d102      	bne.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003076:	e010      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003084:	d106      	bne.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308c:	d102      	bne.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003092:	e002      	b.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003098:	e392      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800309a:	e391      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030a0:	e38e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030a6:	e38b      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80030a8:	58024400 	.word	0x58024400
 80030ac:	03d09000 	.word	0x03d09000
 80030b0:	003d0900 	.word	0x003d0900
 80030b4:	016e3600 	.word	0x016e3600
 80030b8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	f040 809c 	bne.w	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80030c6:	4b9d      	ldr	r3, [pc, #628]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d6:	d054      	beq.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030de:	f200 808b 	bhi.w	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030e8:	f000 8083 	beq.w	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030f2:	f200 8081 	bhi.w	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fc:	d02f      	beq.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003104:	d878      	bhi.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003112:	d012      	beq.n	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003114:	e070      	b.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003122:	d107      	bne.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fe15 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003132:	e345      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003138:	e342      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800313a:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003146:	d107      	bne.n	8003158 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb5b 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003156:	e333      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800315c:	e330      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800315e:	4b77      	ldr	r3, [pc, #476]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316a:	d107      	bne.n	800317c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fc9d 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800317a:	e321      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003180:	e31e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003182:	4b6e      	ldr	r3, [pc, #440]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800318c:	4b6b      	ldr	r3, [pc, #428]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d10c      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	08db      	lsrs	r3, r3, #3
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	e01e      	b.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80031b2:	4b62      	ldr	r3, [pc, #392]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d106      	bne.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80031c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c6:	d102      	bne.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80031c8:	4b5e      	ldr	r3, [pc, #376]	; (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	e010      	b.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031da:	d106      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e2:	d102      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80031e4:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80031ee:	e2e7      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80031f0:	e2e6      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80031f2:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031f6:	e2e3      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031fc:	e2e0      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003204:	f040 80a7 	bne.w	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003210:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003218:	d055      	beq.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003220:	f200 8096 	bhi.w	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800322a:	f000 8084 	beq.w	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003234:	f200 808c 	bhi.w	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323e:	d030      	beq.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003246:	f200 8083 	bhi.w	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003256:	d012      	beq.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003258:	e07a      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d107      	bne.n	8003278 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fd73 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003276:	e2a3      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800327c:	e2a0      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800328a:	d107      	bne.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fab9 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800329a:	e291      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032a0:	e28e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d107      	bne.n	80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fbfb 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80032be:	e27f      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032c4:	e27c      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d10c      	bne.n	80032f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	e01e      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d106      	bne.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330a:	d102      	bne.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	e010      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331e:	d106      	bne.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003326:	d102      	bne.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003332:	e245      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003334:	e244      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800333a:	e241      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800333c:	58024400 	.word	0x58024400
 8003340:	03d09000 	.word	0x03d09000
 8003344:	003d0900 	.word	0x003d0900
 8003348:	016e3600 	.word	0x016e3600
 800334c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003354:	e234      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	f040 809c 	bne.w	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003360:	4b9b      	ldr	r3, [pc, #620]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003364:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003370:	d054      	beq.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003378:	f200 808b 	bhi.w	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003382:	f000 8083 	beq.w	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800338c:	f200 8081 	bhi.w	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003396:	d02f      	beq.n	80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339e:	d878      	bhi.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d012      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80033ae:	e070      	b.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80033b0:	4b87      	ldr	r3, [pc, #540]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033bc:	d107      	bne.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fcc8 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80033cc:	e1f8      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033d2:	e1f5      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e0:	d107      	bne.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033e2:	f107 0318 	add.w	r3, r7, #24
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa0e 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80033f0:	e1e6      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033f6:	e1e3      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80033f8:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d107      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fb50 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003414:	e1d4      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800341a:	e1d1      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800341c:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003424:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d10c      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003438:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	4a64      	ldr	r2, [pc, #400]	; (80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344a:	e01e      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800344c:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003458:	d106      	bne.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003460:	d102      	bne.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003466:	e010      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347c:	d102      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800347e:	4b57      	ldr	r3, [pc, #348]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003482:	e002      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003488:	e19a      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800348a:	e199      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003490:	e196      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003496:	e193      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800349e:	d173      	bne.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b0:	d02f      	beq.n	8003512 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b8:	d863      	bhi.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c6:	d012      	beq.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80034c8:	e05b      	b.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d6:	d107      	bne.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f993 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80034e6:	e16b      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034ec:	e168      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d107      	bne.n	800350c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fad5 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800350a:	e159      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003510:	e156      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800351a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800351c:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d10c      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003540:	e01e      	b.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d106      	bne.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003556:	d102      	bne.n	800355e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355c:	e010      	b.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800355e:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356a:	d106      	bne.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003572:	d102      	bne.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003578:	e002      	b.n	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800357e:	e11f      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003580:	e11e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003586:	e11b      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d13e      	bne.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d01d      	beq.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80035a8:	e02e      	b.n	8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b6:	d107      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fbcb 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80035c6:	e0fb      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035cc:	e0f8      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80035ce:	bf00      	nop
 80035d0:	58024400 	.word	0x58024400
 80035d4:	03d09000 	.word	0x03d09000
 80035d8:	003d0900 	.word	0x003d0900
 80035dc:	016e3600 	.word	0x016e3600
 80035e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80035e4:	4b79      	ldr	r3, [pc, #484]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f0:	d107      	bne.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035f2:	f107 0318 	add.w	r3, r7, #24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f906 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003600:	e0de      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003606:	e0db      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800360c:	e0d8      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	f040 8085 	bne.w	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003618:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003628:	d06b      	beq.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003630:	d874      	bhi.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003638:	d056      	beq.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d86c      	bhi.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003648:	d03b      	beq.n	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003650:	d864      	bhi.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003658:	d021      	beq.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003660:	d85c      	bhi.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366e:	d004      	beq.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8003670:	e054      	b.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003672:	f000 f8b3 	bl	80037dc <HAL_RCCEx_GetD3PCLK1Freq>
 8003676:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003678:	e0a2      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800367a:	4b54      	ldr	r3, [pc, #336]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003686:	d107      	bne.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f8bb 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003696:	e093      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800369c:	e090      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800369e:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036aa:	d107      	bne.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f9fd 	bl	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80036ba:	e081      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036c0:	e07e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036c2:	4b42      	ldr	r3, [pc, #264]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d109      	bne.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	4a3d      	ldr	r2, [pc, #244]	; (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80036e0:	e06e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036e6:	e06b      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80036e8:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f4:	d102      	bne.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80036fa:	e061      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003700:	e05e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370e:	d102      	bne.n	8003716 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003714:	e054      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800371a:	e051      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003720:	e04e      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d148      	bne.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800373a:	d02a      	beq.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003742:	d838      	bhi.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003750:	d00d      	beq.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8003752:	e030      	b.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003760:	d102      	bne.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003766:	e02b      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800376c:	e028      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377a:	d107      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800377c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fae9 	bl	8003d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800378a:	e019      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003790:	e016      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379e:	d107      	bne.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037a0:	f107 0318 	add.w	r3, r7, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f82f 	bl	8003808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80037ae:	e007      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037b4:	e004      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037ba:	e001      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80037c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3740      	adds	r7, #64	; 0x40
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
 80037d0:	03d09000 	.word	0x03d09000
 80037d4:	003d0900 	.word	0x003d0900
 80037d8:	016e3600 	.word	0x016e3600

080037dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037e0:	f7fe fb98 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4904      	ldr	r1, [pc, #16]	; (8003804 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	58024400 	.word	0x58024400
 8003804:	080063f4 	.word	0x080063f4

08003808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003810:	4ba1      	ldr	r3, [pc, #644]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800381a:	4b9f      	ldr	r3, [pc, #636]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	0b1b      	lsrs	r3, r3, #12
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003826:	4b9c      	ldr	r3, [pc, #624]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003832:	4b99      	ldr	r3, [pc, #612]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8111 	beq.w	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b02      	cmp	r3, #2
 800385a:	f000 8083 	beq.w	8003964 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b02      	cmp	r3, #2
 8003862:	f200 80a1 	bhi.w	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d056      	beq.n	8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003872:	e099      	b.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003874:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02d      	beq.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003880:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	4a84      	ldr	r2, [pc, #528]	; (8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80038be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038da:	e087      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003902:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391e:	e065      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a03 	vldr	s12, [r7, #12]
 8003946:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003962:	e043      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b48      	ldr	r3, [pc, #288]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a6:	e021      	b.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	0a5b      	lsrs	r3, r3, #9
 80039f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a12:	ee17 2a90 	vmov	r2, s15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a40:	ee17 2a90 	vmov	r2, s15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6e:	ee17 2a90 	vmov	r2, s15
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	bf00      	nop
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	03d09000 	.word	0x03d09000
 8003aa0:	46000000 	.word	0x46000000
 8003aa4:	4c742400 	.word	0x4c742400
 8003aa8:	4a742400 	.word	0x4a742400
 8003aac:	4bb71b00 	.word	0x4bb71b00

08003ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ab8:	4ba1      	ldr	r3, [pc, #644]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003ac2:	4b9f      	ldr	r3, [pc, #636]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	0d1b      	lsrs	r3, r3, #20
 8003ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003acc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ace:	4b9c      	ldr	r3, [pc, #624]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ada:	4b99      	ldr	r3, [pc, #612]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	08db      	lsrs	r3, r3, #3
 8003ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8111 	beq.w	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	f000 8083 	beq.w	8003c0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	f200 80a1 	bhi.w	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d056      	beq.n	8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b1a:	e099      	b.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b1c:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02d      	beq.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b28:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	08db      	lsrs	r3, r3, #3
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	4a84      	ldr	r2, [pc, #528]	; (8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b52:	4b7b      	ldr	r3, [pc, #492]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b82:	e087      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b96:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bc6:	e065      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c0a:	e043      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c4e:	e021      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	0a5b      	lsrs	r3, r3, #9
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cba:	ee17 2a90 	vmov	r2, s15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 2a90 	vmov	r2, s15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	0e1b      	lsrs	r3, r3, #24
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d16:	ee17 2a90 	vmov	r2, s15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
}
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
 8003d44:	03d09000 	.word	0x03d09000
 8003d48:	46000000 	.word	0x46000000
 8003d4c:	4c742400 	.word	0x4c742400
 8003d50:	4a742400 	.word	0x4a742400
 8003d54:	4bb71b00 	.word	0x4bb71b00

08003d58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d60:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003d6a:	4b9e      	ldr	r3, [pc, #632]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003d76:	4b9b      	ldr	r3, [pc, #620]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d80:	4b98      	ldr	r3, [pc, #608]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8111 	beq.w	8003fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	f000 8083 	beq.w	8003eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	f200 80a1 	bhi.w	8003ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d056      	beq.n	8003e6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8003dc0:	e099      	b.n	8003ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02d      	beq.n	8003e2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	08db      	lsrs	r3, r3, #3
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	4a83      	ldr	r2, [pc, #524]	; (8003fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8003dda:	fa22 f303 	lsr.w	r3, r2, r3
 8003dde:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df8:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003fec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e24:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e28:	e087      	b.n	8003f3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e34:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8003e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3c:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e50:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003fec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e6c:	e065      	b.n	8003f3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e78:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8003e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e80:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e94:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003fec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003eb0:	e043      	b.n	8003f3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8003ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec4:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003fec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ef4:	e021      	b.n	8003f3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f00:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8003f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003fec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	0a5b      	lsrs	r3, r3, #9
 8003f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f60:	ee17 2a90 	vmov	r2, s15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8e:	ee17 2a90 	vmov	r2, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	0e1b      	lsrs	r3, r3, #24
 8003f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fbc:	ee17 2a90 	vmov	r2, s15
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	3724      	adds	r7, #36	; 0x24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	03d09000 	.word	0x03d09000
 8003fec:	46000000 	.word	0x46000000
 8003ff0:	4c742400 	.word	0x4c742400
 8003ff4:	4a742400 	.word	0x4a742400
 8003ff8:	4bb71b00 	.word	0x4bb71b00

08003ffc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800400a:	4b53      	ldr	r3, [pc, #332]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d101      	bne.n	800401a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e099      	b.n	800414e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800401a:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a4e      	ldr	r2, [pc, #312]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004020:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004026:	f7fc fcd1 	bl	80009cc <HAL_GetTick>
 800402a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800402c:	e008      	b.n	8004040 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800402e:	f7fc fccd 	bl	80009cc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e086      	b.n	800414e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	493f      	ldr	r1, [pc, #252]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	628b      	str	r3, [r1, #40]	; 0x28
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	3b01      	subs	r3, #1
 8004066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	3b01      	subs	r3, #1
 8004070:	025b      	lsls	r3, r3, #9
 8004072:	b29b      	uxth	r3, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	3b01      	subs	r3, #1
 800408a:	061b      	lsls	r3, r3, #24
 800408c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004090:	4931      	ldr	r1, [pc, #196]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004096:	4b30      	ldr	r3, [pc, #192]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f023 0220 	bic.w	r2, r3, #32
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4928      	ldr	r1, [pc, #160]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040c0:	f023 0310 	bic.w	r3, r3, #16
 80040c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <RCCEx_PLL2_Config+0x160>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	69d2      	ldr	r2, [r2, #28]
 80040d2:	00d2      	lsls	r2, r2, #3
 80040d4:	4920      	ldr	r1, [pc, #128]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040e0:	f043 0310 	orr.w	r3, r3, #16
 80040e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 80040f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040f8:	e00f      	b.n	800411a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004100:	4b15      	ldr	r3, [pc, #84]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800410c:	e005      	b.n	800411a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4a11      	ldr	r2, [pc, #68]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fc fc51 	bl	80009cc <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800412c:	e008      	b.n	8004140 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800412e:	f7fc fc4d 	bl	80009cc <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e006      	b.n	800414e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <RCCEx_PLL2_Config+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400
 800415c:	ffff0007 	.word	0xffff0007

08004160 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800416e:	4b53      	ldr	r3, [pc, #332]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d101      	bne.n	800417e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e099      	b.n	80042b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800417e:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a4e      	ldr	r2, [pc, #312]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fc fc1f 	bl	80009cc <HAL_GetTick>
 800418e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004190:	e008      	b.n	80041a4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004192:	f7fc fc1b 	bl	80009cc <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e086      	b.n	80042b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041a4:	4b45      	ldr	r3, [pc, #276]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041b0:	4b42      	ldr	r3, [pc, #264]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	051b      	lsls	r3, r3, #20
 80041be:	493f      	ldr	r1, [pc, #252]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	628b      	str	r3, [r1, #40]	; 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	061b      	lsls	r3, r3, #24
 80041f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041f4:	4931      	ldr	r1, [pc, #196]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041fa:	4b30      	ldr	r3, [pc, #192]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	492d      	ldr	r1, [pc, #180]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	4928      	ldr	r1, [pc, #160]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <RCCEx_PLL3_Config+0x160>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	69d2      	ldr	r2, [r2, #28]
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	4920      	ldr	r1, [pc, #128]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800425c:	e00f      	b.n	800427e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 800426a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004270:	e005      	b.n	800427e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fc fb9f 	bl	80009cc <HAL_GetTick>
 800428e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004290:	e008      	b.n	80042a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004292:	f7fc fb9b 	bl	80009cc <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e006      	b.n	80042b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <RCCEx_PLL3_Config+0x15c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	58024400 	.word	0x58024400
 80042c0:	ffff0007 	.word	0xffff0007

080042c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e075      	b.n	80043c2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fc f943 	bl	8000574 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f868 	bl	80043cc <HAL_SD_InitCard>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e05d      	b.n	80043c2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fc6d 	bl	8004bec <HAL_SD_GetCardStatus>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e052      	b.n	80043c2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800431c:	7e3b      	ldrb	r3, [r7, #24]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004322:	7e7b      	ldrb	r3, [r7, #25]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10a      	bne.n	8004346 <HAL_SD_Init+0x82>
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_SD_Init+0x78>
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004342:	659a      	str	r2, [r3, #88]	; 0x58
 8004344:	e00b      	b.n	800435e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	2b01      	cmp	r3, #1
 800434c:	d104      	bne.n	8004358 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004354:	659a      	str	r2, [r3, #88]	; 0x58
 8004356:	e002      	b.n	800435e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fd2b 	bl	8004dc0 <HAL_SD_ConfigWideBusOperation>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e026      	b.n	80043c2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004374:	f7fc fb2a 	bl	80009cc <HAL_GetTick>
 8004378:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800437a:	e011      	b.n	80043a0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800437c:	f7fc fb26 	bl	80009cc <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d109      	bne.n	80043a0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e010      	b.n	80043c2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fe1f 	bl	8004fe4 <HAL_SD_GetCardState>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d1e7      	bne.n	800437c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b08d      	sub	sp, #52	; 0x34
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80043e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043ec:	f7fe fd24 	bl	8002e38 <HAL_RCCEx_GetPeriphCLKFreq>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004406:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e06a      	b.n	80044e2 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	4a36      	ldr	r2, [pc, #216]	; (80044ec <HAL_SD_InitCard+0x120>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681c      	ldr	r4, [r3, #0]
 800441e:	466a      	mov	r2, sp
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004428:	e882 0003 	stmia.w	r2, {r0, r1}
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004432:	4620      	mov	r0, r4
 8004434:	f001 fa68 	bl	8005908 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f001 faab 	bl	8005998 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800444e:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_SD_InitCard+0x124>)
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	3301      	adds	r3, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc fac3 	bl	80009e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 feae 	bl	80051c0 <SD_PowerON>
 8004464:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e02e      	b.n	80044e2 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fdcd 	bl	8005024 <SD_InitCard>
 800448a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01b      	b.n	80044e2 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fb06 	bl	8005ac4 <SDMMC_CmdBlockLength>
 80044b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00f      	beq.n	80044e0 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <HAL_SD_InitCard+0x128>)
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	372c      	adds	r7, #44	; 0x2c
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	014f8b59 	.word	0x014f8b59
 80044f0:	00012110 	.word	0x00012110
 80044f4:	1fe00fff 	.word	0x1fe00fff

080044f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_SD_IRQHandler+0x2e>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 f93a 	bl	8005798 <SD_Read_IT>
 8004524:	e19a      	b.n	800485c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80ac 	beq.w	800468e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_SD_IRQHandler+0x1b8>)
 800454c:	400b      	ands	r3, r1
 800454e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800455e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d038      	beq.n	80045ec <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_SD_IRQHandler+0x96>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d011      	beq.n	80045b2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f001 faba 	bl	8005b0c <SDMMC_CmdStopTransfer>
 8004598:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f96f 	bl	8004890 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3f      	ldr	r2, [pc, #252]	; (80046b4 <HAL_SD_IRQHandler+0x1bc>)
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_SD_IRQHandler+0xe4>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f94d 	bl	800487c <HAL_SD_RxCpltCallback>
 80045e2:	e13b      	b.n	800485c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f93f 	bl	8004868 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045ea:	e137      	b.n	800485c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8132 	beq.w	800485c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2200      	movs	r2, #0
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2200      	movs	r2, #0
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_SD_IRQHandler+0x12c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d011      	beq.n	8004648 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fa6f 	bl	8005b0c <SDMMC_CmdStopTransfer>
 800462e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f924 	bl	8004890 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_SD_IRQHandler+0x172>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8fc 	bl	8004868 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_SD_IRQHandler+0x18e>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80eb 	beq.w	800485c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8f8 	bl	800487c <HAL_SD_RxCpltCallback>
}
 800468c:	e0e6      	b.n	800485c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <HAL_SD_IRQHandler+0x1c0>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f001 f8bc 	bl	8005824 <SD_Write_IT>
 80046ac:	e0d6      	b.n	800485c <HAL_SD_IRQHandler+0x364>
 80046ae:	bf00      	nop
 80046b0:	ffff3ec5 	.word	0xffff3ec5
 80046b4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 809d 	beq.w	8004802 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	f043 0202 	orr.w	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	f043 0208 	orr.w	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	f043 0210 	orr.w	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_SD_IRQHandler+0x36c>)
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004776:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f001 f9c5 	bl	8005b0c <SDMMC_CmdStopTransfer>
 8004782:	4602      	mov	r2, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800479c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f865 	bl	8004890 <HAL_SD_ErrorCallback>
}
 80047c6:	e049      	b.n	800485c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d044      	beq.n	800485c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d040      	beq.n	800485c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f848 	bl	8004890 <HAL_SD_ErrorCallback>
}
 8004800:	e02c      	b.n	800485c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d025      	beq.n	800485c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10c      	bne.n	8004842 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f85e 	bl	80058f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004838:	e010      	b.n	800485c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 f846 	bl	80058cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8004840:	e00c      	b.n	800485c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 f847 	bl	80058e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8004852:	e003      	b.n	800485c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 f82f 	bl	80058b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800485a:	e7ff      	b.n	800485c <HAL_SD_IRQHandler+0x364>
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	18000f3a 	.word	0x18000f3a

08004868 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	0f9b      	lsrs	r3, r3, #30
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	b29a      	uxth	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	b2da      	uxtb	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	0bdb      	lsrs	r3, r3, #15
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004934:	0b9b      	lsrs	r3, r3, #14
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	0b5b      	lsrs	r3, r3, #13
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004958:	0b1b      	lsrs	r3, r3, #12
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d163      	bne.n	8004a3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	009a      	lsls	r2, r3, #2
 800497a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004984:	0f92      	lsrs	r2, r2, #30
 8004986:	431a      	orrs	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	0edb      	lsrs	r3, r3, #27
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	b2da      	uxtb	r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c6:	0c9b      	lsrs	r3, r3, #18
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d8:	0bdb      	lsrs	r3, r3, #15
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7e1b      	ldrb	r3, [r3, #24]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	3302      	adds	r3, #2
 80049fc:	2201      	movs	r2, #1
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a06:	fb03 f202 	mul.w	r2, r3, r2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	7a1b      	ldrb	r3, [r3, #8]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	2201      	movs	r2, #1
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a28:	0a52      	lsrs	r2, r2, #9
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
 8004a3a:	e031      	b.n	8004aa0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d11d      	bne.n	8004a80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	029a      	lsls	r2, r3, #10
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a74:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a7e:	e00f      	b.n	8004aa0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a58      	ldr	r2, [pc, #352]	; (8004be8 <HAL_SD_GetCardCSD+0x344>)
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e09d      	b.n	8004bdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa4:	0b9b      	lsrs	r3, r3, #14
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab6:	09db      	lsrs	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad8:	0fdb      	lsrs	r3, r3, #31
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae4:	0f5b      	lsrs	r3, r3, #29
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b08:	0d9b      	lsrs	r3, r3, #22
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1a:	0d5b      	lsrs	r3, r3, #21
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4a:	0bdb      	lsrs	r3, r3, #15
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5e:	0b9b      	lsrs	r3, r3, #14
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b72:	0b5b      	lsrs	r3, r3, #13
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	0b1b      	lsrs	r3, r3, #12
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	1fe00fff 	.word	0x1fe00fff

08004bec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b094      	sub	sp, #80	; 0x50
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d101      	bne.n	8004c0c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0a7      	b.n	8004d5c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fb62 	bl	80052dc <SD_SendSDStatus>
 8004c18:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a4f      	ldr	r2, [pc, #316]	; (8004d64 <HAL_SD_GetCardStatus+0x178>)
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004c42:	e070      	b.n	8004d26 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	0e1b      	lsrs	r3, r3, #24
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	061a      	lsls	r2, r3, #24
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c8a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c94:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	0d1b      	lsrs	r3, r3, #20
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	0a9b      	lsrs	r3, r3, #10
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	0e1b      	lsrs	r3, r3, #24
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fec8 	bl	8005ac4 <SDMMC_CmdBlockLength>
 8004d34:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8004d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_SD_GetCardStatus+0x178>)
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8004d58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3750      	adds	r7, #80	; 0x50
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	1fe00fff 	.word	0x1fe00fff

08004d68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b08d      	sub	sp, #52	; 0x34
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d02e      	beq.n	8004e42 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dea:	d106      	bne.n	8004dfa <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34
 8004df8:	e029      	b.n	8004e4e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e00:	d10a      	bne.n	8004e18 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fb62 	bl	80054cc <SD_WideBus_Enable>
 8004e08:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34
 8004e16:	e01a      	b.n	8004e4e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb9f 	bl	8005562 <SD_WideBus_Disable>
 8004e24:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34
 8004e32:	e00c      	b.n	8004e4e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e40:	e005      	b.n	8004e4e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5e      	ldr	r2, [pc, #376]	; (8004fd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e64:	e094      	b.n	8004f90 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004e66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e6a:	f7fd ffe5 	bl	8002e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e6e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8083 	beq.w	8004f7e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	4950      	ldr	r1, [pc, #320]	; (8004fd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004e96:	fba1 1303 	umull	r1, r3, r1, r3
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d303      	bcc.n	8004ea8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e05a      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb0:	d103      	bne.n	8004eba <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e051      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d126      	bne.n	8004f12 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10e      	bne.n	8004eea <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	4a43      	ldr	r2, [pc, #268]	; (8004fdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d906      	bls.n	8004ee2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	0e5b      	lsrs	r3, r3, #25
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e03d      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e039      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	6a3a      	ldr	r2, [r7, #32]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	4a39      	ldr	r2, [pc, #228]	; (8004fdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d906      	bls.n	8004f0a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4a36      	ldr	r2, [pc, #216]	; (8004fd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	0e5b      	lsrs	r3, r3, #25
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e029      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e025      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10e      	bne.n	8004f38 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d906      	bls.n	8004f30 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e016      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e012      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	4a26      	ldr	r2, [pc, #152]	; (8004fe0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d906      	bls.n	8004f58 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0e1b      	lsrs	r3, r3, #24
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e002      	b.n	8004f5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681c      	ldr	r4, [r3, #0]
 8004f62:	466a      	mov	r2, sp
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f70:	f107 0308 	add.w	r3, r7, #8
 8004f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 fcc6 	bl	8005908 <SDMMC_Init>
 8004f7c:	e008      	b.n	8004f90 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fd93 	bl	8005ac4 <SDMMC_CmdBlockLength>
 8004f9e:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	372c      	adds	r7, #44	; 0x2c
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd90      	pop	{r4, r7, pc}
 8004fd4:	1fe00fff 	.word	0x1fe00fff
 8004fd8:	55e63b89 	.word	0x55e63b89
 8004fdc:	02faf080 	.word	0x02faf080
 8004fe0:	017d7840 	.word	0x017d7840

08004fe4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa40 	bl	800547c <SD_SendStatus>
 8004ffc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	0a5b      	lsrs	r3, r3, #9
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800501a:	693b      	ldr	r3, [r7, #16]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b090      	sub	sp, #64	; 0x40
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005030:	f7fb fccc 	bl	80009cc <HAL_GetTick>
 8005034:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fcbd 	bl	80059ba <SDMMC_GetPowerState>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005046:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800504a:	e0b5      	b.n	80051b8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	2b03      	cmp	r3, #3
 8005052:	d02e      	beq.n	80050b2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fe7c 	bl	8005d56 <SDMMC_CmdSendCID>
 800505e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <SD_InitCard+0x46>
    {
      return errorstate;
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	e0a6      	b.n	80051b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fce8 	bl	8005a46 <SDMMC_GetResponse>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2104      	movs	r1, #4
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fcdf 	bl	8005a46 <SDMMC_GetResponse>
 8005088:	4602      	mov	r2, r0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2108      	movs	r1, #8
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fcd6 	bl	8005a46 <SDMMC_GetResponse>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	210c      	movs	r1, #12
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fccd 	bl	8005a46 <SDMMC_GetResponse>
 80050ac:	4602      	mov	r2, r0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d01d      	beq.n	80050f6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80050ba:	e019      	b.n	80050f0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f107 020a 	add.w	r2, r7, #10
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fe84 	bl	8005dd4 <SDMMC_CmdSetRelAdd>
 80050cc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	e06f      	b.n	80051b8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80050d8:	f7fb fc78 	bl	80009cc <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d902      	bls.n	80050f0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80050ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050ee:	e063      	b.n	80051b8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0e2      	beq.n	80050bc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d036      	beq.n	800516c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f000 fe3e 	bl	8005d94 <SDMMC_CmdSendCSD>
 8005118:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <SD_InitCard+0x100>
    {
      return errorstate;
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	e049      	b.n	80051b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fc8b 	bl	8005a46 <SDMMC_GetResponse>
 8005130:	4602      	mov	r2, r0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2104      	movs	r1, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fc82 	bl	8005a46 <SDMMC_GetResponse>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fc79 	bl	8005a46 <SDMMC_GetResponse>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	210c      	movs	r1, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fc70 	bl	8005a46 <SDMMC_GetResponse>
 8005166:	4602      	mov	r2, r0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2104      	movs	r1, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fc67 	bl	8005a46 <SDMMC_GetResponse>
 8005178:	4603      	mov	r3, r0
 800517a:	0d1a      	lsrs	r2, r3, #20
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005180:	f107 030c 	add.w	r3, r7, #12
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fb8c 	bl	80048a4 <HAL_SD_GetCardCSD>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005196:	e00f      	b.n	80051b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fced 	bl	8005b84 <SDMMC_CmdSelDesel>
 80051aa:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <SD_InitCard+0x192>
  {
    return errorstate;
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	e000      	b.n	80051b8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3740      	adds	r7, #64	; 0x40
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fcf6 	bl	8005bca <SDMMC_CmdGoIdleState>
 80051de:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <SD_PowerON+0x2a>
  {
    return errorstate;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	e072      	b.n	80052d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fd09 	bl	8005c06 <SDMMC_CmdOperCond>
 80051f4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051fc:	d10d      	bne.n	800521a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fcde 	bl	8005bca <SDMMC_CmdGoIdleState>
 800520e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <SD_PowerON+0x60>
    {
      return errorstate;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	e05a      	b.n	80052d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d137      	bne.n	8005298 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fd09 	bl	8005c46 <SDMMC_CmdAppCommand>
 8005234:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02d      	beq.n	8005298 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800523c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005240:	e046      	b.n	80052d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fcfc 	bl	8005c46 <SDMMC_CmdAppCommand>
 800524e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <SD_PowerON+0x9a>
    {
      return errorstate;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	e03a      	b.n	80052d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	491e      	ldr	r1, [pc, #120]	; (80052d8 <SD_PowerON+0x118>)
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fd13 	bl	8005c8c <SDMMC_CmdAppOperCommand>
 8005266:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800526e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005272:	e02d      	b.n	80052d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fbe3 	bl	8005a46 <SDMMC_GetResponse>
 8005280:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	0fdb      	lsrs	r3, r3, #31
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <SD_PowerON+0xce>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <SD_PowerON+0xd0>
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]

    count++;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3301      	adds	r3, #1
 8005296:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800529e:	4293      	cmp	r3, r2
 80052a0:	d802      	bhi.n	80052a8 <SD_PowerON+0xe8>
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0cc      	beq.n	8005242 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d902      	bls.n	80052b8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052b6:	e00b      	b.n	80052d0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	c1100000 	.word	0xc1100000

080052dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80052e6:	f7fb fb71 	bl	80009cc <HAL_GetTick>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fba5 	bl	8005a46 <SDMMC_GetResponse>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005306:	d102      	bne.n	800530e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800530c:	e0b0      	b.n	8005470 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2140      	movs	r1, #64	; 0x40
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fbd5 	bl	8005ac4 <SDMMC_CmdBlockLength>
 800531a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	e0a0      	b.n	8005470 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fc83 	bl	8005c46 <SDMMC_CmdAppCommand>
 8005340:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	e08d      	b.n	8005470 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800535a:	2340      	movs	r3, #64	; 0x40
 800535c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800535e:	2360      	movs	r3, #96	; 0x60
 8005360:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005362:	2302      	movs	r3, #2
 8005364:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fb77 	bl	8005a6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fd6b 	bl	8005e5e <SDMMC_CmdStatusRegister>
 8005388:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02b      	beq.n	80053e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e069      	b.n	8005470 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d013      	beq.n	80053d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	e00d      	b.n	80053cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fad1 	bl	800595c <SDMMC_ReadFIFO>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	601a      	str	r2, [r3, #0]
        pData++;
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	3304      	adds	r3, #4
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	3301      	adds	r3, #1
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	2b07      	cmp	r3, #7
 80053d0:	d9ee      	bls.n	80053b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80053d2:	f7fb fafb 	bl	80009cc <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d102      	bne.n	80053e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80053e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053e6:	e043      	b.n	8005470 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0d2      	beq.n	800539c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005404:	2308      	movs	r3, #8
 8005406:	e033      	b.n	8005470 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005416:	2302      	movs	r3, #2
 8005418:	e02a      	b.n	8005470 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005428:	2320      	movs	r3, #32
 800542a:	e021      	b.n	8005470 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fa93 	bl	800595c <SDMMC_ReadFIFO>
 8005436:	4602      	mov	r2, r0
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	601a      	str	r2, [r3, #0]
    pData++;
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	3304      	adds	r3, #4
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005442:	f7fb fac3 	bl	80009cc <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d102      	bne.n	8005458 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005456:	e00b      	b.n	8005470 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e2      	bne.n	800542c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a03      	ldr	r2, [pc, #12]	; (8005478 <SD_SendSDStatus+0x19c>)
 800546c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3730      	adds	r7, #48	; 0x30
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	18000f3a 	.word	0x18000f3a

0800547c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800548c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005490:	e018      	b.n	80054c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 fcba 	bl	8005e18 <SDMMC_CmdSendStatus>
 80054a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	e009      	b.n	80054c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fac5 	bl	8005a46 <SDMMC_GetResponse>
 80054bc:	4602      	mov	r2, r0
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 faaf 	bl	8005a46 <SDMMC_GetResponse>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f2:	d102      	bne.n	80054fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054f8:	e02f      	b.n	800555a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f879 	bl	80055f8 <SD_FindSCR>
 8005506:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	e023      	b.n	800555a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01c      	beq.n	8005556 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f000 fb8c 	bl	8005c46 <SDMMC_CmdAppCommand>
 800552e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e00f      	b.n	800555a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2102      	movs	r1, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fbc3 	bl	8005ccc <SDMMC_CmdBusWidth>
 8005546:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	e003      	b.n	800555a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	e001      	b.n	800555a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005556:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fa64 	bl	8005a46 <SDMMC_GetResponse>
 800557e:	4603      	mov	r3, r0
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005588:	d102      	bne.n	8005590 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800558a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800558e:	e02f      	b.n	80055f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005590:	f107 030c 	add.w	r3, r7, #12
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f82e 	bl	80055f8 <SD_FindSCR>
 800559c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	e023      	b.n	80055f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01c      	beq.n	80055ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fb41 	bl	8005c46 <SDMMC_CmdAppCommand>
 80055c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	e00f      	b.n	80055f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fb78 	bl	8005ccc <SDMMC_CmdBusWidth>
 80055dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	e003      	b.n	80055f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e001      	b.n	80055f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	; 0x38
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005602:	f7fb f9e3 	bl	80009cc <HAL_GetTick>
 8005606:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800560c:	2300      	movs	r3, #0
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2108      	movs	r1, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fa50 	bl	8005ac4 <SDMMC_CmdBlockLength>
 8005624:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <SD_FindSCR+0x38>
  {
    return errorstate;
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	e0ad      	b.n	800578c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f000 fb02 	bl	8005c46 <SDMMC_CmdAppCommand>
 8005642:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <SD_FindSCR+0x56>
  {
    return errorstate;
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	e09e      	b.n	800578c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005654:	2308      	movs	r3, #8
 8005656:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005658:	2330      	movs	r3, #48	; 0x30
 800565a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800565c:	2302      	movs	r3, #2
 800565e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005660:	2300      	movs	r3, #0
 8005662:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005664:	2301      	movs	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f107 0210 	add.w	r2, r7, #16
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9fa 	bl	8005a6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fb48 	bl	8005d12 <SDMMC_CmdSendSCR>
 8005682:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d027      	beq.n	80056da <SD_FindSCR+0xe2>
  {
    return errorstate;
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	e07e      	b.n	800578c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d113      	bne.n	80056c4 <SD_FindSCR+0xcc>
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d110      	bne.n	80056c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f958 	bl	800595c <SDMMC_ReadFIFO>
 80056ac:	4603      	mov	r3, r0
 80056ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f951 	bl	800595c <SDMMC_ReadFIFO>
 80056ba:	4603      	mov	r3, r0
 80056bc:	60fb      	str	r3, [r7, #12]
      index++;
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	3301      	adds	r3, #1
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80056c4:	f7fb f982 	bl	80009cc <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d102      	bne.n	80056da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80056d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d8:	e058      	b.n	800578c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e0:	f240 532a 	movw	r3, #1322	; 0x52a
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0d1      	beq.n	800568e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2208      	movs	r2, #8
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005700:	2308      	movs	r3, #8
 8005702:	e043      	b.n	800578c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2202      	movs	r2, #2
 8005718:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800571a:	2302      	movs	r3, #2
 800571c:	e036      	b.n	800578c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005734:	2320      	movs	r3, #32
 8005736:	e029      	b.n	800578c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <SD_FindSCR+0x19c>)
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	061a      	lsls	r2, r3, #24
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800574c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005756:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	601a      	str	r2, [r3, #0]
    scr++;
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	3304      	adds	r3, #4
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	061a      	lsls	r2, r3, #24
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005774:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800577e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	0e1b      	lsrs	r3, r3, #24
 8005784:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3738      	adds	r7, #56	; 0x38
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	18000f3a 	.word	0x18000f3a

08005798 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	2b1f      	cmp	r3, #31
 80057ac:	d936      	bls.n	800581c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e027      	b.n	8005804 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f8cf 	bl	800595c <SDMMC_ReadFIFO>
 80057be:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	3301      	adds	r3, #1
 80057cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	3301      	adds	r3, #1
 80057dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3301      	adds	r3, #1
 80057ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	0e1b      	lsrs	r3, r3, #24
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3301      	adds	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b07      	cmp	r3, #7
 8005808:	d9d4      	bls.n	80057b4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f1a3 0220 	sub.w	r2, r3, #32
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800581c:	bf00      	nop
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	2b1f      	cmp	r3, #31
 8005838:	d93a      	bls.n	80058b0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e02b      	b.n	8005898 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	021a      	lsls	r2, r3, #8
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	3301      	adds	r3, #1
 800585c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	041a      	lsls	r2, r3, #16
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
      tmp++;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3301      	adds	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	061a      	lsls	r2, r3, #24
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3301      	adds	r3, #1
 8005880:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f107 020c 	add.w	r2, r7, #12
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f872 	bl	8005976 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3301      	adds	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b07      	cmp	r3, #7
 800589c:	d9d0      	bls.n	8005840 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f1a3 0220 	sub.w	r2, r3, #32
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]
  }
}
 80058b0:	bf00      	nop
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005908:	b084      	sub	sp, #16
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	f107 001c 	add.w	r0, r7, #28
 8005916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800591e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8005920:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8005922:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8005926:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800592a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800592e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b07      	ldr	r3, [pc, #28]	; (8005958 <SDMMC_Init+0x50>)
 800593c:	4013      	ands	r3, r2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	b004      	add	sp, #16
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	ffc02c00 	.word	0xffc02c00

0800595c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f043 0203 	orr.w	r2, r3, #3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0303 	and.w	r3, r3, #3
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80059f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80059fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8005a02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <SDMMC_SendCommand+0x50>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	fffee0c0 	.word	0xfffee0c0

08005a2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	b2db      	uxtb	r3, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3314      	adds	r3, #20
 8005a54:	461a      	mov	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	4413      	add	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005a92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8005a98:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8005a9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0

}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ae6:	f107 0308 	add.w	r3, r7, #8
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff73 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	2110      	movs	r1, #16
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f9d3 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b00:	69fb      	ldr	r3, [r7, #28]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005b18:	230c      	movs	r3, #12
 8005b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b2a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b44:	f107 0308 	add.w	r3, r7, #8
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ff44 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005b50:	4a0b      	ldr	r2, [pc, #44]	; (8005b80 <SDMMC_CmdStopTransfer+0x74>)
 8005b52:	210c      	movs	r1, #12
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f9a5 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005b5a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d101      	bne.n	8005b74 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8005b74:	69fb      	ldr	r3, [r7, #28]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	05f5e100 	.word	0x05f5e100

08005b84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b92:	2307      	movs	r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff13 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	2107      	movs	r1, #7
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f973 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b088      	sub	sp, #32
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fef2 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb97 	bl	8006328 <SDMMC_GetCmdError>
 8005bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c14:	2308      	movs	r3, #8
 8005c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fed2 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fb29 	bl	800628c <SDMMC_GetCmdResp7>
 8005c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c54:	2337      	movs	r3, #55	; 0x37
 8005c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff feb2 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c78:	2137      	movs	r1, #55	; 0x37
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f912 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c82:	69fb      	ldr	r3, [r7, #28]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c9a:	2329      	movs	r3, #41	; 0x29
 8005c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fe8f 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa2e 	bl	800611c <SDMMC_GetCmdResp3>
 8005cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005cda:	2306      	movs	r3, #6
 8005cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fe6f 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	2106      	movs	r1, #6
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f8cf 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d08:	69fb      	ldr	r3, [r7, #28]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b088      	sub	sp, #32
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005d1e:	2333      	movs	r3, #51	; 0x33
 8005d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fe4d 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d42:	2133      	movs	r1, #51	; 0x33
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8ad 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005d62:	2302      	movs	r3, #2
 8005d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fe2b 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f980 	bl	8006088 <SDMMC_GetCmdResp2>
 8005d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005da2:	2309      	movs	r3, #9
 8005da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff fe0b 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f960 	bl	8006088 <SDMMC_GetCmdResp2>
 8005dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dca:	69fb      	ldr	r3, [r7, #28]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005de2:	2303      	movs	r3, #3
 8005de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fdeb 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	2103      	movs	r1, #3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9c8 	bl	800619c <SDMMC_GetCmdResp6>
 8005e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005e26:	230d      	movs	r3, #13
 8005e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fdc9 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4a:	210d      	movs	r1, #13
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f829 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005e52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e54:	69fb      	ldr	r3, [r7, #28]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b088      	sub	sp, #32
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8005e6a:	230d      	movs	r3, #13
 8005e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fda7 	bl	80059d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	210d      	movs	r1, #13
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f807 	bl	8005ea4 <SDMMC_GetCmdResp1>
 8005e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e98:	69fb      	ldr	r3, [r7, #28]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	460b      	mov	r3, r1
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8005eb2:	4b70      	ldr	r3, [pc, #448]	; (8006074 <SDMMC_GetCmdResp1+0x1d0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a70      	ldr	r2, [pc, #448]	; (8006078 <SDMMC_GetCmdResp1+0x1d4>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	0a5a      	lsrs	r2, r3, #9
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	61fa      	str	r2, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ed4:	e0c9      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4b67      	ldr	r3, [pc, #412]	; (800607c <SDMMC_GetCmdResp1+0x1d8>)
 8005ee0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0ef      	beq.n	8005ec6 <SDMMC_GetCmdResp1+0x22>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ea      	bne.n	8005ec6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2204      	movs	r2, #4
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f02:	2304      	movs	r3, #4
 8005f04:	e0b1      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0a6      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a58      	ldr	r2, [pc, #352]	; (8006080 <SDMMC_GetCmdResp1+0x1dc>)
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fd82 	bl	8005a2c <SDMMC_GetCommandResponse>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d001      	beq.n	8005f36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e099      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005f36:	2100      	movs	r1, #0
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff fd84 	bl	8005a46 <SDMMC_GetResponse>
 8005f3e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4b50      	ldr	r3, [pc, #320]	; (8006084 <SDMMC_GetCmdResp1+0x1e0>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e08d      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da02      	bge.n	8005f5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f58:	e087      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	e080      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	e079      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f84:	e071      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f94:	e069      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa4:	e061      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fb4:	e059      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc4:	e051      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fd4:	e049      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fe4:	e041      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff4:	e039      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006004:	e031      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006010:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006014:	e029      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006020:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006024:	e021      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006030:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006034:	e019      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006044:	e011      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006054:	e009      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006060:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006064:	e001      	b.n	800606a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	24000000 	.word	0x24000000
 8006078:	10624dd3 	.word	0x10624dd3
 800607c:	00200045 	.word	0x00200045
 8006080:	002000c5 	.word	0x002000c5
 8006084:	fdffe008 	.word	0xfdffe008

08006088 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006090:	4b1f      	ldr	r3, [pc, #124]	; (8006110 <SDMMC_GetCmdResp2+0x88>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <SDMMC_GetCmdResp2+0x8c>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0a5b      	lsrs	r3, r3, #9
 800609c:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	60fa      	str	r2, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060b4:	e026      	b.n	8006104 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ef      	beq.n	80060a6 <SDMMC_GetCmdResp2+0x1e>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2204      	movs	r2, #4
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060e2:	2304      	movs	r3, #4
 80060e4:	e00e      	b.n	8006104 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e003      	b.n	8006104 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a06      	ldr	r2, [pc, #24]	; (8006118 <SDMMC_GetCmdResp2+0x90>)
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	24000000 	.word	0x24000000
 8006114:	10624dd3 	.word	0x10624dd3
 8006118:	002000c5 	.word	0x002000c5

0800611c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006124:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <SDMMC_GetCmdResp3+0x74>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <SDMMC_GetCmdResp3+0x78>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	0a5b      	lsrs	r3, r3, #9
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1e5a      	subs	r2, r3, #1
 800613e:	60fa      	str	r2, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006148:	e01b      	b.n	8006182 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0ef      	beq.n	800613a <SDMMC_GetCmdResp3+0x1e>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ea      	bne.n	800613a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2204      	movs	r2, #4
 8006174:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006176:	2304      	movs	r3, #4
 8006178:	e003      	b.n	8006182 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a06      	ldr	r2, [pc, #24]	; (8006198 <SDMMC_GetCmdResp3+0x7c>)
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	24000000 	.word	0x24000000
 8006194:	10624dd3 	.word	0x10624dd3
 8006198:	002000c5 	.word	0x002000c5

0800619c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	460b      	mov	r3, r1
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <SDMMC_GetCmdResp6+0xe4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a35      	ldr	r2, [pc, #212]	; (8006284 <SDMMC_GetCmdResp6+0xe8>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	0a5b      	lsrs	r3, r3, #9
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	61fa      	str	r2, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061ce:	e052      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ef      	beq.n	80061c0 <SDMMC_GetCmdResp6+0x24>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ea      	bne.n	80061c0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2204      	movs	r2, #4
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061fc:	2304      	movs	r3, #4
 80061fe:	e03a      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006212:	2301      	movs	r3, #1
 8006214:	e02f      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fc08 	bl	8005a2c <SDMMC_GetCommandResponse>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	4293      	cmp	r3, r2
 8006224:	d001      	beq.n	800622a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006226:	2301      	movs	r3, #1
 8006228:	e025      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <SDMMC_GetCmdResp6+0xec>)
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fc07 	bl	8005a46 <SDMMC_GetResponse>
 8006238:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
 8006250:	e011      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800625c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006260:	e009      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800626c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006270:	e001      	b.n	8006276 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	24000000 	.word	0x24000000
 8006284:	10624dd3 	.word	0x10624dd3
 8006288:	002000c5 	.word	0x002000c5

0800628c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006294:	4b22      	ldr	r3, [pc, #136]	; (8006320 <SDMMC_GetCmdResp7+0x94>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <SDMMC_GetCmdResp7+0x98>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a5b      	lsrs	r3, r3, #9
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1e5a      	subs	r2, r3, #1
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062b8:	e02c      	b.n	8006314 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ef      	beq.n	80062aa <SDMMC_GetCmdResp7+0x1e>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ea      	bne.n	80062aa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062e6:	2304      	movs	r3, #4
 80062e8:	e014      	b.n	8006314 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e009      	b.n	8006314 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2240      	movs	r2, #64	; 0x40
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006312:	2300      	movs	r3, #0

}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	24000000 	.word	0x24000000
 8006324:	10624dd3 	.word	0x10624dd3

08006328 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006330:	4b11      	ldr	r3, [pc, #68]	; (8006378 <SDMMC_GetCmdError+0x50>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <SDMMC_GetCmdError+0x54>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	0a5b      	lsrs	r3, r3, #9
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	fb02 f303 	mul.w	r3, r2, r3
 8006344:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	60fa      	str	r2, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006354:	e009      	b.n	800636a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f1      	beq.n	8006346 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a06      	ldr	r2, [pc, #24]	; (8006380 <SDMMC_GetCmdError+0x58>)
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	24000000 	.word	0x24000000
 800637c:	10624dd3 	.word	0x10624dd3
 8006380:	002000c5 	.word	0x002000c5

08006384 <__libc_init_array>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	4d0d      	ldr	r5, [pc, #52]	; (80063bc <__libc_init_array+0x38>)
 8006388:	4c0d      	ldr	r4, [pc, #52]	; (80063c0 <__libc_init_array+0x3c>)
 800638a:	1b64      	subs	r4, r4, r5
 800638c:	10a4      	asrs	r4, r4, #2
 800638e:	2600      	movs	r6, #0
 8006390:	42a6      	cmp	r6, r4
 8006392:	d109      	bne.n	80063a8 <__libc_init_array+0x24>
 8006394:	4d0b      	ldr	r5, [pc, #44]	; (80063c4 <__libc_init_array+0x40>)
 8006396:	4c0c      	ldr	r4, [pc, #48]	; (80063c8 <__libc_init_array+0x44>)
 8006398:	f000 f820 	bl	80063dc <_init>
 800639c:	1b64      	subs	r4, r4, r5
 800639e:	10a4      	asrs	r4, r4, #2
 80063a0:	2600      	movs	r6, #0
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	d105      	bne.n	80063b2 <__libc_init_array+0x2e>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ac:	4798      	blx	r3
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7ee      	b.n	8006390 <__libc_init_array+0xc>
 80063b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b6:	4798      	blx	r3
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7f2      	b.n	80063a2 <__libc_init_array+0x1e>
 80063bc:	08006404 	.word	0x08006404
 80063c0:	08006404 	.word	0x08006404
 80063c4:	08006404 	.word	0x08006404
 80063c8:	08006408 	.word	0x08006408

080063cc <memset>:
 80063cc:	4402      	add	r2, r0
 80063ce:	4603      	mov	r3, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
