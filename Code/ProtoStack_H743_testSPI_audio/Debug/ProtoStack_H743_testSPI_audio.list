
ProtoStack_H743_testSPI_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001198  24000010  08006540  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240011a8  08006540  000211a8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d8e8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e83  00000000  00000000  0002d926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009b0  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008b8  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000359fe  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e946  00000000  00000000  00066416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152e0b  00000000  00000000  00074d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c7b67  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025b8  00000000  00000000  001c7bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080064f8 	.word	0x080064f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080064f8 	.word	0x080064f8

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_DMA_Init+0x4c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002e4:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <MX_DMA_Init+0x4c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_DMA_Init+0x4c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fd10 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fd27 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2100      	movs	r1, #0
 8000310:	200c      	movs	r0, #12
 8000312:	f000 fd08 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000316:	200c      	movs	r0, #12
 8000318:	f000 fd1f 	bl	8000d5a <HAL_NVIC_EnableIRQ>

}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	58024400 	.word	0x58024400

08000328 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_GPIO_Init+0x6c>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <MX_GPIO_Init+0x6c>)
 8000336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0x6c>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_GPIO_Init+0x6c>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <MX_GPIO_Init+0x6c>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <MX_GPIO_Init+0x6c>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <MX_GPIO_Init+0x6c>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <MX_GPIO_Init+0x6c>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_GPIO_Init+0x6c>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]

}
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	58024400 	.word	0x58024400

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 fb25 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 f82d 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f7ff ffbf 	bl	8000328 <MX_GPIO_Init>
  MX_DMA_Init();
 80003aa:	f7ff ff95 	bl	80002d8 <MX_DMA_Init>
  MX_SPI2_Init();
 80003ae:	f000 f8dd 	bl	800056c <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  for(int i = 0; i < BUFSIZE; i++) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	e00d      	b.n	80003d4 <main+0x3c>
	  spiTxbuf[i] = i;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	b299      	uxth	r1, r3
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <main+0x5c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  spiRxbuf[i] = 0;
 80003c4:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <main+0x60>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2100      	movs	r1, #0
 80003ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < BUFSIZE; i++) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003da:	dbed      	blt.n	80003b8 <main+0x20>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_Delay(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fb97 	bl	8000b10 <HAL_Delay>
	 HAL_SPI_TransmitReceive_DMA(&hspi2, spiTxbuf, spiRxbuf, BUFSIZE);
 80003e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e6:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <main+0x60>)
 80003e8:	4902      	ldr	r1, [pc, #8]	; (80003f4 <main+0x5c>)
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <main+0x64>)
 80003ec:	f005 fb1e 	bl	8005a2c <HAL_SPI_TransmitReceive_DMA>
	 HAL_Delay(1);
 80003f0:	e7f4      	b.n	80003dc <main+0x44>
 80003f2:	bf00      	nop
 80003f4:	2400002c 	.word	0x2400002c
 80003f8:	2400082c 	.word	0x2400082c
 80003fc:	2400102c 	.word	0x2400102c

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b09e      	sub	sp, #120	; 0x78
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800040a:	224c      	movs	r2, #76	; 0x4c
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f006 f86a 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 030c 	add.w	r3, r7, #12
 8000418:	2220      	movs	r2, #32
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f006 f863 	bl	80064e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000422:	2002      	movs	r0, #2
 8000424:	f003 f98e 	bl	8003744 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	4b49      	ldr	r3, [pc, #292]	; (8000554 <SystemClock_Config+0x154>)
 800042e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000430:	4a48      	ldr	r2, [pc, #288]	; (8000554 <SystemClock_Config+0x154>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000438:	4b46      	ldr	r3, [pc, #280]	; (8000554 <SystemClock_Config+0x154>)
 800043a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <SystemClock_Config+0x158>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a44      	ldr	r2, [pc, #272]	; (8000558 <SystemClock_Config+0x158>)
 8000448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b42      	ldr	r3, [pc, #264]	; (8000558 <SystemClock_Config+0x158>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045a:	bf00      	nop
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <SystemClock_Config+0x158>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000468:	d1f8      	bne.n	800045c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b3c      	ldr	r3, [pc, #240]	; (800055c <SystemClock_Config+0x15c>)
 800046c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000470:	4a3a      	ldr	r2, [pc, #232]	; (800055c <SystemClock_Config+0x15c>)
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800047a:	4b38      	ldr	r3, [pc, #224]	; (800055c <SystemClock_Config+0x15c>)
 800047c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000480:	f003 0302 	and.w	r3, r3, #2
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000488:	2300      	movs	r3, #0
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <SystemClock_Config+0x158>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a31      	ldr	r2, [pc, #196]	; (8000558 <SystemClock_Config+0x158>)
 8000492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <SystemClock_Config+0x158>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <SystemClock_Config+0x154>)
 80004a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a6:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <SystemClock_Config+0x154>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ae:	4b29      	ldr	r3, [pc, #164]	; (8000554 <SystemClock_Config+0x154>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ba:	bf00      	nop
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <SystemClock_Config+0x158>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004c8:	d1f8      	bne.n	80004bc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d8:	2302      	movs	r3, #2
 80004da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004dc:	2304      	movs	r3, #4
 80004de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80004e0:	23a0      	movs	r3, #160	; 0xa0
 80004e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004e4:	2302      	movs	r3, #2
 80004e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004e8:	2305      	movs	r3, #5
 80004ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004ec:	2302      	movs	r3, #2
 80004ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004f0:	2308      	movs	r3, #8
 80004f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000500:	4618      	mov	r0, r3
 8000502:	f003 f959 	bl	80037b8 <HAL_RCC_OscConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800050c:	f000 f828 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	233f      	movs	r3, #63	; 0x3f
 8000512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000514:	2303      	movs	r3, #3
 8000516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800051c:	2308      	movs	r3, #8
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000520:	2340      	movs	r3, #64	; 0x40
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	2104      	movs	r1, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fd6b 	bl	8004014 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000544:	f000 f80c 	bl	8000560 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000548:	f003 ff1a 	bl	8004380 <HAL_RCC_EnableCSS>
}
 800054c:	bf00      	nop
 800054e:	3778      	adds	r7, #120	; 0x78
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000400 	.word	0x58000400
 8000558:	58024800 	.word	0x58024800
 800055c:	58024400 	.word	0x58024400

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000572:	4a28      	ldr	r2, [pc, #160]	; (8000614 <MX_SPI2_Init+0xa8>)
 8000574:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000578:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800057c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000586:	220f      	movs	r2, #15
 8000588:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058a:	4b21      	ldr	r3, [pc, #132]	; (8000610 <MX_SPI2_Init+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_SPI2_Init+0xa4>)
 8000598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800059c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_SPI2_Init+0xa4>)
 80005fc:	f005 f910 	bl	8005820 <HAL_SPI_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000606:	f7ff ffab 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2400102c 	.word	0x2400102c
 8000614:	40003800 	.word	0x40003800

08000618 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	22bc      	movs	r2, #188	; 0xbc
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 ff55 	bl	80064e8 <memset>
  if(spiHandle->Instance==SPI2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a58      	ldr	r2, [pc, #352]	; (80007a4 <HAL_SPI_MspInit+0x18c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	f040 80a9 	bne.w	800079c <HAL_SPI_MspInit+0x184>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000650:	2300      	movs	r3, #0
 8000652:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f837 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000664:	f7ff ff7c 	bl	8000560 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000668:	4b4f      	ldr	r3, [pc, #316]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 800066a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800066e:	4a4e      	ldr	r2, [pc, #312]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000678:	4b4b      	ldr	r3, [pc, #300]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 800067a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800067e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b48      	ldr	r3, [pc, #288]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a46      	ldr	r2, [pc, #280]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <HAL_SPI_MspInit+0x190>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006be:	2305      	movs	r3, #5
 80006c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c8:	4619      	mov	r1, r3
 80006ca:	4838      	ldr	r0, [pc, #224]	; (80007ac <HAL_SPI_MspInit+0x194>)
 80006cc:	f002 fe8a 	bl	80033e4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006d2:	4a38      	ldr	r2, [pc, #224]	; (80007b4 <HAL_SPI_MspInit+0x19c>)
 80006d4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006d8:	2227      	movs	r2, #39	; 0x27
 80006da:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 80006fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000712:	4827      	ldr	r0, [pc, #156]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 8000714:	f000 fb3c 	bl	8000d90 <HAL_DMA_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800071e:	f7ff ff1f 	bl	8000560 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 8000726:	67da      	str	r2, [r3, #124]	; 0x7c
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <HAL_SPI_MspInit+0x198>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <HAL_SPI_MspInit+0x1a4>)
 8000732:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000754:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800075c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000772:	f000 fb0d 	bl	8000d90 <HAL_DMA_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 800077c:	f7ff fef0 	bl	8000560 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000784:	679a      	str	r2, [r3, #120]	; 0x78
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <HAL_SPI_MspInit+0x1a0>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2024      	movs	r0, #36	; 0x24
 8000792:	f000 fac8 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000796:	2024      	movs	r0, #36	; 0x24
 8000798:	f000 fadf 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	37e0      	adds	r7, #224	; 0xe0
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40003800 	.word	0x40003800
 80007a8:	58024400 	.word	0x58024400
 80007ac:	58020400 	.word	0x58020400
 80007b0:	240010b4 	.word	0x240010b4
 80007b4:	40020010 	.word	0x40020010
 80007b8:	2400112c 	.word	0x2400112c
 80007bc:	40020028 	.word	0x40020028

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_MspInit+0x30>)
 80007c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x30>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x30>)
 80007d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	58024400 	.word	0x58024400

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007f8:	f003 ff4c 	bl	8004694 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x8>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f944 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <DMA1_Stream0_IRQHandler+0x10>)
 8000852:	f001 faa9 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	240010b4 	.word	0x240010b4

08000860 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <DMA1_Stream1_IRQHandler+0x10>)
 8000866:	f001 fa9f 	bl	8001da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400112c 	.word	0x2400112c

08000874 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <SPI2_IRQHandler+0x10>)
 800087a:	f005 faad 	bl	8005dd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2400102c 	.word	0x2400102c

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <SystemInit+0xe4>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a36      	ldr	r2, [pc, #216]	; (800096c <SystemInit+0xe4>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <SystemInit+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 030f 	and.w	r3, r3, #15
 80008a4:	2b06      	cmp	r3, #6
 80008a6:	d807      	bhi.n	80008b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <SystemInit+0xe8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f023 030f 	bic.w	r3, r3, #15
 80008b0:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <SystemInit+0xe8>)
 80008b2:	f043 0307 	orr.w	r3, r3, #7
 80008b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <SystemInit+0xec>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <SystemInit+0xec>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <SystemInit+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <SystemInit+0xec>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4929      	ldr	r1, [pc, #164]	; (8000974 <SystemInit+0xec>)
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemInit+0xf0>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SystemInit+0xe8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d007      	beq.n	80008f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SystemInit+0xe8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f023 030f 	bic.w	r3, r3, #15
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SystemInit+0xe8>)
 80008ec:	f043 0307 	orr.w	r3, r3, #7
 80008f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <SystemInit+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <SystemInit+0xec>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <SystemInit+0xec>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <SystemInit+0xec>)
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <SystemInit+0xf4>)
 8000908:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <SystemInit+0xec>)
 800090c:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <SystemInit+0xf8>)
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <SystemInit+0xec>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <SystemInit+0xfc>)
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <SystemInit+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <SystemInit+0xec>)
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <SystemInit+0xfc>)
 8000920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <SystemInit+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <SystemInit+0xec>)
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <SystemInit+0xfc>)
 800092c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <SystemInit+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <SystemInit+0xec>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <SystemInit+0xec>)
 800093a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <SystemInit+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <SystemInit+0x100>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <SystemInit+0x104>)
 800094c:	4013      	ands	r3, r2
 800094e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000952:	d202      	bcs.n	800095a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <SystemInit+0x108>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <SystemInit+0x10c>)
 800095c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	52002000 	.word	0x52002000
 8000974:	58024400 	.word	0x58024400
 8000978:	eaf6ed7f 	.word	0xeaf6ed7f
 800097c:	02020200 	.word	0x02020200
 8000980:	01ff0000 	.word	0x01ff0000
 8000984:	01010280 	.word	0x01010280
 8000988:	5c001000 	.word	0x5c001000
 800098c:	ffff0000 	.word	0xffff0000
 8000990:	51008108 	.word	0x51008108
 8000994:	52004000 	.word	0x52004000

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff ff74 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f005 fd6b 	bl	80064a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fce5 	bl	8000398 <main>
  bx  lr
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80009dc:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 80009e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009e4:	240011a8 	.word	0x240011a8

080009e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC3_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 f98c 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009f8:	f003 fcd2 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 80009fc:	4602      	mov	r2, r0
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_Init+0x68>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	4913      	ldr	r1, [pc, #76]	; (8000a58 <HAL_Init+0x6c>)
 8000a0a:	5ccb      	ldrb	r3, [r1, r3]
 8000a0c:	f003 031f 	and.w	r3, r3, #31
 8000a10:	fa22 f303 	lsr.w	r3, r2, r3
 8000a14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_Init+0x68>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_Init+0x6c>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_Init+0x70>)
 8000a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_Init+0x74>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f814 	bl	8000a64 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e002      	b.n	8000a4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff febb 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400
 8000a58:	08006510 	.word	0x08006510
 8000a5c:	24000004 	.word	0x24000004
 8000a60:	24000000 	.word	0x24000000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e021      	b.n	8000abc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_InitTick+0x64>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0x60>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f971 	bl	8000d76 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f93b 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x68>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2400000c 	.word	0x2400000c
 8000ac8:	24000000 	.word	0x24000000
 8000acc:	24000008 	.word	0x24000008

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2400000c 	.word	0x2400000c
 8000af4:	240011a4 	.word	0x240011a4

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	240011a4 	.word	0x240011a4

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2400000c 	.word	0x2400000c

08000b58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetREVID+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0c1b      	lsrs	r3, r3, #16
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	5c001000 	.word	0x5c001000

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	05fa0000 	.word	0x05fa0000

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff29 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff40 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff33 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa4 	bl	8000ccc <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff feae 	bl	8000af8 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e316      	b.n	80013d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a66      	ldr	r2, [pc, #408]	; (8000f48 <HAL_DMA_Init+0x1b8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d04a      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a65      	ldr	r2, [pc, #404]	; (8000f4c <HAL_DMA_Init+0x1bc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d045      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a63      	ldr	r2, [pc, #396]	; (8000f50 <HAL_DMA_Init+0x1c0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d040      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a62      	ldr	r2, [pc, #392]	; (8000f54 <HAL_DMA_Init+0x1c4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d03b      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a60      	ldr	r2, [pc, #384]	; (8000f58 <HAL_DMA_Init+0x1c8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d036      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a5f      	ldr	r2, [pc, #380]	; (8000f5c <HAL_DMA_Init+0x1cc>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d031      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a5d      	ldr	r2, [pc, #372]	; (8000f60 <HAL_DMA_Init+0x1d0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d02c      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a5c      	ldr	r2, [pc, #368]	; (8000f64 <HAL_DMA_Init+0x1d4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d027      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a5a      	ldr	r2, [pc, #360]	; (8000f68 <HAL_DMA_Init+0x1d8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d022      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <HAL_DMA_Init+0x1dc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d01d      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_DMA_Init+0x1e0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d018      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a56      	ldr	r2, [pc, #344]	; (8000f74 <HAL_DMA_Init+0x1e4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d013      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a54      	ldr	r2, [pc, #336]	; (8000f78 <HAL_DMA_Init+0x1e8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00e      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_DMA_Init+0x1ec>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d009      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_DMA_Init+0x1f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d004      	beq.n	8000e48 <HAL_DMA_Init+0xb8>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_DMA_Init+0x1f4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d101      	bne.n	8000e4c <HAL_DMA_Init+0xbc>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <HAL_DMA_Init+0xbe>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 813b 	beq.w	80010ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a37      	ldr	r2, [pc, #220]	; (8000f48 <HAL_DMA_Init+0x1b8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d04a      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a36      	ldr	r2, [pc, #216]	; (8000f4c <HAL_DMA_Init+0x1bc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d045      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a34      	ldr	r2, [pc, #208]	; (8000f50 <HAL_DMA_Init+0x1c0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d040      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <HAL_DMA_Init+0x1c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d03b      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <HAL_DMA_Init+0x1c8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d036      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a30      	ldr	r2, [pc, #192]	; (8000f5c <HAL_DMA_Init+0x1cc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d031      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_DMA_Init+0x1d0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02c      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <HAL_DMA_Init+0x1d4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d027      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <HAL_DMA_Init+0x1d8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d022      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <HAL_DMA_Init+0x1dc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d01d      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <HAL_DMA_Init+0x1e0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d018      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <HAL_DMA_Init+0x1e4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_DMA_Init+0x1e8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00e      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <HAL_DMA_Init+0x1ec>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d009      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <HAL_DMA_Init+0x1f0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d004      	beq.n	8000f04 <HAL_DMA_Init+0x174>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_DMA_Init+0x1f4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d108      	bne.n	8000f16 <HAL_DMA_Init+0x186>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e007      	b.n	8000f26 <HAL_DMA_Init+0x196>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000f26:	e02f      	b.n	8000f88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f28:	f7ff fde6 	bl	8000af8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d928      	bls.n	8000f88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e246      	b.n	80013d6 <HAL_DMA_Init+0x646>
 8000f48:	40020010 	.word	0x40020010
 8000f4c:	40020028 	.word	0x40020028
 8000f50:	40020040 	.word	0x40020040
 8000f54:	40020058 	.word	0x40020058
 8000f58:	40020070 	.word	0x40020070
 8000f5c:	40020088 	.word	0x40020088
 8000f60:	400200a0 	.word	0x400200a0
 8000f64:	400200b8 	.word	0x400200b8
 8000f68:	40020410 	.word	0x40020410
 8000f6c:	40020428 	.word	0x40020428
 8000f70:	40020440 	.word	0x40020440
 8000f74:	40020458 	.word	0x40020458
 8000f78:	40020470 	.word	0x40020470
 8000f7c:	40020488 	.word	0x40020488
 8000f80:	400204a0 	.word	0x400204a0
 8000f84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1c8      	bne.n	8000f28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4b83      	ldr	r3, [pc, #524]	; (80011b0 <HAL_DMA_Init+0x420>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000fae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d107      	bne.n	8000fec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000fec:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <HAL_DMA_Init+0x424>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <HAL_DMA_Init+0x428>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ff8:	d328      	bcc.n	800104c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b28      	cmp	r3, #40	; 0x28
 8001000:	d903      	bls.n	800100a <HAL_DMA_Init+0x27a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b2e      	cmp	r3, #46	; 0x2e
 8001008:	d917      	bls.n	800103a <HAL_DMA_Init+0x2aa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b3e      	cmp	r3, #62	; 0x3e
 8001010:	d903      	bls.n	800101a <HAL_DMA_Init+0x28a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b42      	cmp	r3, #66	; 0x42
 8001018:	d90f      	bls.n	800103a <HAL_DMA_Init+0x2aa>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b46      	cmp	r3, #70	; 0x46
 8001020:	d903      	bls.n	800102a <HAL_DMA_Init+0x29a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b48      	cmp	r3, #72	; 0x48
 8001028:	d907      	bls.n	800103a <HAL_DMA_Init+0x2aa>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b4e      	cmp	r3, #78	; 0x4e
 8001030:	d905      	bls.n	800103e <HAL_DMA_Init+0x2ae>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b52      	cmp	r3, #82	; 0x52
 8001038:	d801      	bhi.n	800103e <HAL_DMA_Init+0x2ae>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_DMA_Init+0x2b0>
 800103e:	2300      	movs	r3, #0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800104a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f023 0307 	bic.w	r3, r3, #7
 8001062:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4313      	orrs	r3, r2
 800106c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	2b04      	cmp	r3, #4
 8001074:	d117      	bne.n	80010a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00e      	beq.n	80010a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f002 f821 	bl	80030d0 <DMA_CheckFifoParam>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e197      	b.n	80013d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 ff5c 	bl	8002f6c <DMA_CalcBaseAndBitshift>
 80010b4:	4603      	mov	r3, r0
 80010b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	223f      	movs	r2, #63	; 0x3f
 80010c2:	409a      	lsls	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	e0cd      	b.n	8001266 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a3b      	ldr	r2, [pc, #236]	; (80011bc <HAL_DMA_Init+0x42c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_Init+0x38a>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <HAL_DMA_Init+0x430>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01d      	beq.n	800111a <HAL_DMA_Init+0x38a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_DMA_Init+0x434>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d018      	beq.n	800111a <HAL_DMA_Init+0x38a>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_DMA_Init+0x438>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_DMA_Init+0x38a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a35      	ldr	r2, [pc, #212]	; (80011cc <HAL_DMA_Init+0x43c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00e      	beq.n	800111a <HAL_DMA_Init+0x38a>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <HAL_DMA_Init+0x440>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d009      	beq.n	800111a <HAL_DMA_Init+0x38a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <HAL_DMA_Init+0x444>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d004      	beq.n	800111a <HAL_DMA_Init+0x38a>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a30      	ldr	r2, [pc, #192]	; (80011d8 <HAL_DMA_Init+0x448>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_DMA_Init+0x38e>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_DMA_Init+0x390>
 800111e:	2300      	movs	r3, #0
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8097 	beq.w	8001254 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <HAL_DMA_Init+0x42c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d021      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_DMA_Init+0x430>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01c      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_DMA_Init+0x434>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d017      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_DMA_Init+0x438>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d012      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_DMA_Init+0x43c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_DMA_Init+0x440>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_DMA_Init+0x444>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d003      	beq.n	8001174 <HAL_DMA_Init+0x3e4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_DMA_Init+0x448>)
 8001172:	4293      	cmp	r3, r2
 8001174:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_DMA_Init+0x44c>)
 8001192:	4013      	ands	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b40      	cmp	r3, #64	; 0x40
 800119c:	d020      	beq.n	80011e0 <HAL_DMA_Init+0x450>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b80      	cmp	r3, #128	; 0x80
 80011a4:	d102      	bne.n	80011ac <HAL_DMA_Init+0x41c>
 80011a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011aa:	e01a      	b.n	80011e2 <HAL_DMA_Init+0x452>
 80011ac:	2300      	movs	r3, #0
 80011ae:	e018      	b.n	80011e2 <HAL_DMA_Init+0x452>
 80011b0:	fe10803f 	.word	0xfe10803f
 80011b4:	5c001000 	.word	0x5c001000
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	58025408 	.word	0x58025408
 80011c0:	5802541c 	.word	0x5802541c
 80011c4:	58025430 	.word	0x58025430
 80011c8:	58025444 	.word	0x58025444
 80011cc:	58025458 	.word	0x58025458
 80011d0:	5802546c 	.word	0x5802546c
 80011d4:	58025480 	.word	0x58025480
 80011d8:	58025494 	.word	0x58025494
 80011dc:	fffe000f 	.word	0xfffe000f
 80011e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68d2      	ldr	r2, [r2, #12]
 80011e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80011e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80011f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80011f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001200:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001210:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_DMA_Init+0x650>)
 8001228:	4413      	add	r3, r2
 800122a:	4a6e      	ldr	r2, [pc, #440]	; (80013e4 <HAL_DMA_Init+0x654>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	009a      	lsls	r2, r3, #2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 fe97 	bl	8002f6c <DMA_CalcBaseAndBitshift>
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	2201      	movs	r2, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e008      	b.n	8001266 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0b7      	b.n	80013d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <HAL_DMA_Init+0x658>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d072      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <HAL_DMA_Init+0x65c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d06d      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <HAL_DMA_Init+0x660>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d068      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_DMA_Init+0x664>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d063      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <HAL_DMA_Init+0x668>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d05e      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a57      	ldr	r2, [pc, #348]	; (80013fc <HAL_DMA_Init+0x66c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d059      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a56      	ldr	r2, [pc, #344]	; (8001400 <HAL_DMA_Init+0x670>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d054      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_DMA_Init+0x674>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d04f      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a53      	ldr	r2, [pc, #332]	; (8001408 <HAL_DMA_Init+0x678>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d04a      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_DMA_Init+0x67c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d045      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_DMA_Init+0x680>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d040      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_DMA_Init+0x684>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d03b      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_DMA_Init+0x688>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d036      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_DMA_Init+0x68c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d031      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_DMA_Init+0x690>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d02c      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a48      	ldr	r2, [pc, #288]	; (8001424 <HAL_DMA_Init+0x694>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d027      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_DMA_Init+0x698>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d022      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a45      	ldr	r2, [pc, #276]	; (800142c <HAL_DMA_Init+0x69c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01d      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a44      	ldr	r2, [pc, #272]	; (8001430 <HAL_DMA_Init+0x6a0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d018      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a42      	ldr	r2, [pc, #264]	; (8001434 <HAL_DMA_Init+0x6a4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a41      	ldr	r2, [pc, #260]	; (8001438 <HAL_DMA_Init+0x6a8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00e      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a3f      	ldr	r2, [pc, #252]	; (800143c <HAL_DMA_Init+0x6ac>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d009      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_DMA_Init+0x6b0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d004      	beq.n	8001356 <HAL_DMA_Init+0x5c6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <HAL_DMA_Init+0x6b4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_DMA_Init+0x5ca>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_DMA_Init+0x5cc>
 800135a:	2300      	movs	r3, #0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d032      	beq.n	80013c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f001 ff31 	bl	80031c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b80      	cmp	r3, #128	; 0x80
 800136c:	d102      	bne.n	8001374 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001388:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_DMA_Init+0x624>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d80c      	bhi.n	80013b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f001 ffae 	bl	80032fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	e008      	b.n	80013c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	a7fdabf8 	.word	0xa7fdabf8
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	40020010 	.word	0x40020010
 80013ec:	40020028 	.word	0x40020028
 80013f0:	40020040 	.word	0x40020040
 80013f4:	40020058 	.word	0x40020058
 80013f8:	40020070 	.word	0x40020070
 80013fc:	40020088 	.word	0x40020088
 8001400:	400200a0 	.word	0x400200a0
 8001404:	400200b8 	.word	0x400200b8
 8001408:	40020410 	.word	0x40020410
 800140c:	40020428 	.word	0x40020428
 8001410:	40020440 	.word	0x40020440
 8001414:	40020458 	.word	0x40020458
 8001418:	40020470 	.word	0x40020470
 800141c:	40020488 	.word	0x40020488
 8001420:	400204a0 	.word	0x400204a0
 8001424:	400204b8 	.word	0x400204b8
 8001428:	58025408 	.word	0x58025408
 800142c:	5802541c 	.word	0x5802541c
 8001430:	58025430 	.word	0x58025430
 8001434:	58025444 	.word	0x58025444
 8001438:	58025458 	.word	0x58025458
 800143c:	5802546c 	.word	0x5802546c
 8001440:	58025480 	.word	0x58025480
 8001444:	58025494 	.word	0x58025494

08001448 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e226      	b.n	80018b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Start_IT+0x2a>
 800146e:	2302      	movs	r3, #2
 8001470:	e21f      	b.n	80018b2 <HAL_DMA_Start_IT+0x46a>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	f040 820a 	bne.w	800189c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2202      	movs	r2, #2
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a68      	ldr	r2, [pc, #416]	; (800163c <HAL_DMA_Start_IT+0x1f4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04a      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_DMA_Start_IT+0x1f8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d045      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_DMA_Start_IT+0x1fc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d040      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_DMA_Start_IT+0x200>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d03b      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a62      	ldr	r2, [pc, #392]	; (800164c <HAL_DMA_Start_IT+0x204>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d036      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_DMA_Start_IT+0x208>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d031      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <HAL_DMA_Start_IT+0x20c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d02c      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_DMA_Start_IT+0x210>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d027      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <HAL_DMA_Start_IT+0x214>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d022      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_DMA_Start_IT+0x218>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01d      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_DMA_Start_IT+0x21c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d018      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_DMA_Start_IT+0x220>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a56      	ldr	r2, [pc, #344]	; (800166c <HAL_DMA_Start_IT+0x224>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00e      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_DMA_Start_IT+0x228>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d009      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_DMA_Start_IT+0x22c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d004      	beq.n	8001536 <HAL_DMA_Start_IT+0xee>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_DMA_Start_IT+0x230>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d108      	bne.n	8001548 <HAL_DMA_Start_IT+0x100>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e007      	b.n	8001558 <HAL_DMA_Start_IT+0x110>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f001 fb58 	bl	8002c14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a34      	ldr	r2, [pc, #208]	; (800163c <HAL_DMA_Start_IT+0x1f4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d04a      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a33      	ldr	r2, [pc, #204]	; (8001640 <HAL_DMA_Start_IT+0x1f8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d045      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <HAL_DMA_Start_IT+0x1fc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d040      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_DMA_Start_IT+0x200>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d03b      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <HAL_DMA_Start_IT+0x204>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d036      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <HAL_DMA_Start_IT+0x208>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d031      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <HAL_DMA_Start_IT+0x20c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02c      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <HAL_DMA_Start_IT+0x210>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d027      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_DMA_Start_IT+0x214>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d022      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_DMA_Start_IT+0x218>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d01d      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <HAL_DMA_Start_IT+0x21c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d018      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_DMA_Start_IT+0x220>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <HAL_DMA_Start_IT+0x224>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_DMA_Start_IT+0x228>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_DMA_Start_IT+0x22c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Start_IT+0x1bc>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_DMA_Start_IT+0x230>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Start_IT+0x1c0>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_DMA_Start_IT+0x1c2>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 021e 	bic.w	r2, r3, #30
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0216 	orr.w	r2, r2, #22
 8001620:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03e      	beq.n	80016a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0208 	orr.w	r2, r2, #8
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e035      	b.n	80016a8 <HAL_DMA_Start_IT+0x260>
 800163c:	40020010 	.word	0x40020010
 8001640:	40020028 	.word	0x40020028
 8001644:	40020040 	.word	0x40020040
 8001648:	40020058 	.word	0x40020058
 800164c:	40020070 	.word	0x40020070
 8001650:	40020088 	.word	0x40020088
 8001654:	400200a0 	.word	0x400200a0
 8001658:	400200b8 	.word	0x400200b8
 800165c:	40020410 	.word	0x40020410
 8001660:	40020428 	.word	0x40020428
 8001664:	40020440 	.word	0x40020440
 8001668:	40020458 	.word	0x40020458
 800166c:	40020470 	.word	0x40020470
 8001670:	40020488 	.word	0x40020488
 8001674:	400204a0 	.word	0x400204a0
 8001678:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 020e 	bic.w	r2, r3, #14
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 020a 	orr.w	r2, r2, #10
 800168e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0204 	orr.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a83      	ldr	r2, [pc, #524]	; (80018bc <HAL_DMA_Start_IT+0x474>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d072      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a82      	ldr	r2, [pc, #520]	; (80018c0 <HAL_DMA_Start_IT+0x478>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d06d      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <HAL_DMA_Start_IT+0x47c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d068      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_DMA_Start_IT+0x480>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d063      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <HAL_DMA_Start_IT+0x484>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d05e      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_DMA_Start_IT+0x488>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d059      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a7a      	ldr	r2, [pc, #488]	; (80018d4 <HAL_DMA_Start_IT+0x48c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d054      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a79      	ldr	r2, [pc, #484]	; (80018d8 <HAL_DMA_Start_IT+0x490>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04f      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_DMA_Start_IT+0x494>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d04a      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a76      	ldr	r2, [pc, #472]	; (80018e0 <HAL_DMA_Start_IT+0x498>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d045      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a74      	ldr	r2, [pc, #464]	; (80018e4 <HAL_DMA_Start_IT+0x49c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d040      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	; (80018e8 <HAL_DMA_Start_IT+0x4a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d03b      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a71      	ldr	r2, [pc, #452]	; (80018ec <HAL_DMA_Start_IT+0x4a4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d036      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a70      	ldr	r2, [pc, #448]	; (80018f0 <HAL_DMA_Start_IT+0x4a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d031      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <HAL_DMA_Start_IT+0x4ac>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02c      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6d      	ldr	r2, [pc, #436]	; (80018f8 <HAL_DMA_Start_IT+0x4b0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d027      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a6b      	ldr	r2, [pc, #428]	; (80018fc <HAL_DMA_Start_IT+0x4b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d022      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a6a      	ldr	r2, [pc, #424]	; (8001900 <HAL_DMA_Start_IT+0x4b8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d01d      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a68      	ldr	r2, [pc, #416]	; (8001904 <HAL_DMA_Start_IT+0x4bc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d018      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a67      	ldr	r2, [pc, #412]	; (8001908 <HAL_DMA_Start_IT+0x4c0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a65      	ldr	r2, [pc, #404]	; (800190c <HAL_DMA_Start_IT+0x4c4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00e      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a64      	ldr	r2, [pc, #400]	; (8001910 <HAL_DMA_Start_IT+0x4c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d009      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <HAL_DMA_Start_IT+0x4cc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d004      	beq.n	8001798 <HAL_DMA_Start_IT+0x350>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_DMA_Start_IT+0x4d0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_DMA_Start_IT+0x354>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_DMA_Start_IT+0x356>
 800179c:	2300      	movs	r3, #0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01a      	beq.n	80017d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a37      	ldr	r2, [pc, #220]	; (80018bc <HAL_DMA_Start_IT+0x474>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d04a      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <HAL_DMA_Start_IT+0x478>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d045      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <HAL_DMA_Start_IT+0x47c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d040      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <HAL_DMA_Start_IT+0x480>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d03b      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a31      	ldr	r2, [pc, #196]	; (80018cc <HAL_DMA_Start_IT+0x484>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d036      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <HAL_DMA_Start_IT+0x488>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d031      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_DMA_Start_IT+0x48c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02c      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <HAL_DMA_Start_IT+0x490>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d027      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <HAL_DMA_Start_IT+0x494>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d022      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_DMA_Start_IT+0x498>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d01d      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <HAL_DMA_Start_IT+0x49c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d018      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_DMA_Start_IT+0x4a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d013      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_DMA_Start_IT+0x4a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00e      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_DMA_Start_IT+0x4a8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d009      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <HAL_DMA_Start_IT+0x4ac>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_DMA_Start_IT+0x430>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_DMA_Start_IT+0x4b0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d108      	bne.n	800188a <HAL_DMA_Start_IT+0x442>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e012      	b.n	80018b0 <HAL_DMA_Start_IT+0x468>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e009      	b.n	80018b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020010 	.word	0x40020010
 80018c0:	40020028 	.word	0x40020028
 80018c4:	40020040 	.word	0x40020040
 80018c8:	40020058 	.word	0x40020058
 80018cc:	40020070 	.word	0x40020070
 80018d0:	40020088 	.word	0x40020088
 80018d4:	400200a0 	.word	0x400200a0
 80018d8:	400200b8 	.word	0x400200b8
 80018dc:	40020410 	.word	0x40020410
 80018e0:	40020428 	.word	0x40020428
 80018e4:	40020440 	.word	0x40020440
 80018e8:	40020458 	.word	0x40020458
 80018ec:	40020470 	.word	0x40020470
 80018f0:	40020488 	.word	0x40020488
 80018f4:	400204a0 	.word	0x400204a0
 80018f8:	400204b8 	.word	0x400204b8
 80018fc:	58025408 	.word	0x58025408
 8001900:	5802541c 	.word	0x5802541c
 8001904:	58025430 	.word	0x58025430
 8001908:	58025444 	.word	0x58025444
 800190c:	58025458 	.word	0x58025458
 8001910:	5802546c 	.word	0x5802546c
 8001914:	58025480 	.word	0x58025480
 8001918:	58025494 	.word	0x58025494

0800191c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e237      	b.n	8001d9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d004      	beq.n	8001944 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e22c      	b.n	8001d9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_DMA_Abort_IT+0x1a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d04a      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_DMA_Abort_IT+0x1a4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d045      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a59      	ldr	r2, [pc, #356]	; (8001ac4 <HAL_DMA_Abort_IT+0x1a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d040      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_DMA_Abort_IT+0x1ac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d03b      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a56      	ldr	r2, [pc, #344]	; (8001acc <HAL_DMA_Abort_IT+0x1b0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d036      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <HAL_DMA_Abort_IT+0x1b4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d031      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <HAL_DMA_Abort_IT+0x1b8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02c      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_DMA_Abort_IT+0x1bc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d027      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a50      	ldr	r2, [pc, #320]	; (8001adc <HAL_DMA_Abort_IT+0x1c0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d022      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_DMA_Abort_IT+0x1c4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d01d      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_DMA_Abort_IT+0x1c8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d018      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <HAL_DMA_Abort_IT+0x1cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_DMA_Abort_IT+0x1d0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_DMA_Abort_IT+0x1d4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_DMA_Abort_IT+0x1d8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_DMA_Abort_IT+0x1dc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_DMA_Abort_IT+0xcc>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_DMA_Abort_IT+0xce>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8086 	beq.w	8001afc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <HAL_DMA_Abort_IT+0x1a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04a      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <HAL_DMA_Abort_IT+0x1a4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d045      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2c      	ldr	r2, [pc, #176]	; (8001ac4 <HAL_DMA_Abort_IT+0x1a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d040      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ac8 <HAL_DMA_Abort_IT+0x1ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d03b      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <HAL_DMA_Abort_IT+0x1b0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_DMA_Abort_IT+0x1b4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_DMA_Abort_IT+0x1b8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02c      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_DMA_Abort_IT+0x1bc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d027      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a23      	ldr	r2, [pc, #140]	; (8001adc <HAL_DMA_Abort_IT+0x1c0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d022      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_DMA_Abort_IT+0x1c4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01d      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <HAL_DMA_Abort_IT+0x1c8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d018      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_DMA_Abort_IT+0x1cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_DMA_Abort_IT+0x1d0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_DMA_Abort_IT+0x1d4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <HAL_DMA_Abort_IT+0x1d8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x17c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_DMA_Abort_IT+0x1dc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d108      	bne.n	8001aaa <HAL_DMA_Abort_IT+0x18e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e178      	b.n	8001d9c <HAL_DMA_Abort_IT+0x480>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e16f      	b.n	8001d9c <HAL_DMA_Abort_IT+0x480>
 8001abc:	40020010 	.word	0x40020010
 8001ac0:	40020028 	.word	0x40020028
 8001ac4:	40020040 	.word	0x40020040
 8001ac8:	40020058 	.word	0x40020058
 8001acc:	40020070 	.word	0x40020070
 8001ad0:	40020088 	.word	0x40020088
 8001ad4:	400200a0 	.word	0x400200a0
 8001ad8:	400200b8 	.word	0x400200b8
 8001adc:	40020410 	.word	0x40020410
 8001ae0:	40020428 	.word	0x40020428
 8001ae4:	40020440 	.word	0x40020440
 8001ae8:	40020458 	.word	0x40020458
 8001aec:	40020470 	.word	0x40020470
 8001af0:	40020488 	.word	0x40020488
 8001af4:	400204a0 	.word	0x400204a0
 8001af8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <HAL_DMA_Abort_IT+0x3a8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04a      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6b      	ldr	r2, [pc, #428]	; (8001cc8 <HAL_DMA_Abort_IT+0x3ac>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d045      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a69      	ldr	r2, [pc, #420]	; (8001ccc <HAL_DMA_Abort_IT+0x3b0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d040      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_DMA_Abort_IT+0x3b4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d03b      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a66      	ldr	r2, [pc, #408]	; (8001cd4 <HAL_DMA_Abort_IT+0x3b8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d036      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_DMA_Abort_IT+0x3bc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d031      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <HAL_DMA_Abort_IT+0x3c0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02c      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a62      	ldr	r2, [pc, #392]	; (8001ce0 <HAL_DMA_Abort_IT+0x3c4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d027      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a60      	ldr	r2, [pc, #384]	; (8001ce4 <HAL_DMA_Abort_IT+0x3c8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d022      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ce8 <HAL_DMA_Abort_IT+0x3cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01d      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5d      	ldr	r2, [pc, #372]	; (8001cec <HAL_DMA_Abort_IT+0x3d0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_DMA_Abort_IT+0x3d4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_DMA_Abort_IT+0x3d8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a59      	ldr	r2, [pc, #356]	; (8001cf8 <HAL_DMA_Abort_IT+0x3dc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_DMA_Abort_IT+0x3e0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_Abort_IT+0x290>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_DMA_Abort_IT+0x3e4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <HAL_DMA_Abort_IT+0x2a2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_DMA_Abort_IT+0x2b2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_DMA_Abort_IT+0x3a8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d072      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <HAL_DMA_Abort_IT+0x3ac>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d06d      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <HAL_DMA_Abort_IT+0x3b0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d068      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <HAL_DMA_Abort_IT+0x3b4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d063      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_DMA_Abort_IT+0x3b8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d05e      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_DMA_Abort_IT+0x3bc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d059      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <HAL_DMA_Abort_IT+0x3c0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d054      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_DMA_Abort_IT+0x3c4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04f      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <HAL_DMA_Abort_IT+0x3c8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04a      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_DMA_Abort_IT+0x3cc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d045      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_DMA_Abort_IT+0x3d0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d040      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_DMA_Abort_IT+0x3d4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d03b      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <HAL_DMA_Abort_IT+0x3d8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d036      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <HAL_DMA_Abort_IT+0x3dc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_DMA_Abort_IT+0x3e0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d02c      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_DMA_Abort_IT+0x3e4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <HAL_DMA_Abort_IT+0x3e8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_DMA_Abort_IT+0x3ec>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01d      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_DMA_Abort_IT+0x3f0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d018      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_DMA_Abort_IT+0x3f4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_DMA_Abort_IT+0x3f8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_DMA_Abort_IT+0x3fc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d009      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_DMA_Abort_IT+0x400>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x3a2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_DMA_Abort_IT+0x404>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d132      	bne.n	8001d24 <HAL_DMA_Abort_IT+0x408>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e031      	b.n	8001d26 <HAL_DMA_Abort_IT+0x40a>
 8001cc2:	bf00      	nop
 8001cc4:	40020010 	.word	0x40020010
 8001cc8:	40020028 	.word	0x40020028
 8001ccc:	40020040 	.word	0x40020040
 8001cd0:	40020058 	.word	0x40020058
 8001cd4:	40020070 	.word	0x40020070
 8001cd8:	40020088 	.word	0x40020088
 8001cdc:	400200a0 	.word	0x400200a0
 8001ce0:	400200b8 	.word	0x400200b8
 8001ce4:	40020410 	.word	0x40020410
 8001ce8:	40020428 	.word	0x40020428
 8001cec:	40020440 	.word	0x40020440
 8001cf0:	40020458 	.word	0x40020458
 8001cf4:	40020470 	.word	0x40020470
 8001cf8:	40020488 	.word	0x40020488
 8001cfc:	400204a0 	.word	0x400204a0
 8001d00:	400204b8 	.word	0x400204b8
 8001d04:	58025408 	.word	0x58025408
 8001d08:	5802541c 	.word	0x5802541c
 8001d0c:	58025430 	.word	0x58025430
 8001d10:	58025444 	.word	0x58025444
 8001d14:	58025458 	.word	0x58025458
 8001d18:	5802546c 	.word	0x5802546c
 8001d1c:	58025480 	.word	0x58025480
 8001d20:	58025494 	.word	0x58025494
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d028      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2201      	movs	r2, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop

08001da8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_DMA_IRQHandler+0x1ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_DMA_IRQHandler+0x1b0>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a9b      	lsrs	r3, r3, #10
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5f      	ldr	r2, [pc, #380]	; (8001f5c <HAL_DMA_IRQHandler+0x1b4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04a      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_DMA_IRQHandler+0x1b8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d045      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <HAL_DMA_IRQHandler+0x1bc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d040      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_DMA_IRQHandler+0x1c0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d03b      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a59      	ldr	r2, [pc, #356]	; (8001f6c <HAL_DMA_IRQHandler+0x1c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d036      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_DMA_IRQHandler+0x1c8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d031      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_DMA_IRQHandler+0x1cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d02c      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a54      	ldr	r2, [pc, #336]	; (8001f78 <HAL_DMA_IRQHandler+0x1d0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d027      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a53      	ldr	r2, [pc, #332]	; (8001f7c <HAL_DMA_IRQHandler+0x1d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d022      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_DMA_IRQHandler+0x1d8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_DMA_IRQHandler+0x1dc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d018      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_DMA_IRQHandler+0x1e0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_DMA_IRQHandler+0x1e4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_DMA_IRQHandler+0x1e8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_DMA_IRQHandler+0x1ec>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xd2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_DMA_IRQHandler+0x1f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_IRQHandler+0xd6>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_DMA_IRQHandler+0xd8>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 842b 	beq.w	80026dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2208      	movs	r2, #8
 8001e90:	409a      	lsls	r2, r3
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80a2 	beq.w	8001fe0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_DMA_IRQHandler+0x1b4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_DMA_IRQHandler+0x1b8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d045      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_DMA_IRQHandler+0x1bc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <HAL_DMA_IRQHandler+0x1c0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <HAL_DMA_IRQHandler+0x1c4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_DMA_IRQHandler+0x1c8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_DMA_IRQHandler+0x1cc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <HAL_DMA_IRQHandler+0x1d0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d027      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_DMA_IRQHandler+0x1d4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_DMA_IRQHandler+0x1d8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01d      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_DMA_IRQHandler+0x1dc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_DMA_IRQHandler+0x1e0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_DMA_IRQHandler+0x1e4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_DMA_IRQHandler+0x1e8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_DMA_IRQHandler+0x1ec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x194>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_DMA_IRQHandler+0x1f0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12f      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x1f4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	e02e      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x208>
 8001f52:	bf00      	nop
 8001f54:	24000000 	.word	0x24000000
 8001f58:	1b4e81b5 	.word	0x1b4e81b5
 8001f5c:	40020010 	.word	0x40020010
 8001f60:	40020028 	.word	0x40020028
 8001f64:	40020040 	.word	0x40020040
 8001f68:	40020058 	.word	0x40020058
 8001f6c:	40020070 	.word	0x40020070
 8001f70:	40020088 	.word	0x40020088
 8001f74:	400200a0 	.word	0x400200a0
 8001f78:	400200b8 	.word	0x400200b8
 8001f7c:	40020410 	.word	0x40020410
 8001f80:	40020428 	.word	0x40020428
 8001f84:	40020440 	.word	0x40020440
 8001f88:	40020458 	.word	0x40020458
 8001f8c:	40020470 	.word	0x40020470
 8001f90:	40020488 	.word	0x40020488
 8001f94:	400204a0 	.word	0x400204a0
 8001f98:	400204b8 	.word	0x400204b8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d06e      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a69      	ldr	r2, [pc, #420]	; (80021a0 <HAL_DMA_IRQHandler+0x3f8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04a      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_DMA_IRQHandler+0x3fc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d045      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_DMA_IRQHandler+0x400>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a64      	ldr	r2, [pc, #400]	; (80021ac <HAL_DMA_IRQHandler+0x404>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d03b      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a63      	ldr	r2, [pc, #396]	; (80021b0 <HAL_DMA_IRQHandler+0x408>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d036      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a61      	ldr	r2, [pc, #388]	; (80021b4 <HAL_DMA_IRQHandler+0x40c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <HAL_DMA_IRQHandler+0x410>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d02c      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <HAL_DMA_IRQHandler+0x414>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d027      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_DMA_IRQHandler+0x418>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5b      	ldr	r2, [pc, #364]	; (80021c4 <HAL_DMA_IRQHandler+0x41c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5a      	ldr	r2, [pc, #360]	; (80021c8 <HAL_DMA_IRQHandler+0x420>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d018      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_DMA_IRQHandler+0x424>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <HAL_DMA_IRQHandler+0x428>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_DMA_IRQHandler+0x42c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <HAL_DMA_IRQHandler+0x430>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2ee>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_DMA_IRQHandler+0x434>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10a      	bne.n	80020ac <HAL_DMA_IRQHandler+0x304>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e003      	b.n	80020b4 <HAL_DMA_IRQHandler+0x30c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2201      	movs	r2, #1
 80020c2:	409a      	lsls	r2, r3
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f043 0202 	orr.w	r2, r3, #2
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2204      	movs	r2, #4
 80020de:	409a      	lsls	r2, r3
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 808f 	beq.w	8002208 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <HAL_DMA_IRQHandler+0x3f8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04a      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_DMA_IRQHandler+0x3fc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d045      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_DMA_IRQHandler+0x400>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d040      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_DMA_IRQHandler+0x404>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d03b      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_DMA_IRQHandler+0x408>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d036      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_DMA_IRQHandler+0x40c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d031      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_DMA_IRQHandler+0x410>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d02c      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_DMA_IRQHandler+0x414>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d027      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_DMA_IRQHandler+0x418>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_DMA_IRQHandler+0x41c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01d      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_DMA_IRQHandler+0x420>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_DMA_IRQHandler+0x424>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_DMA_IRQHandler+0x428>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_DMA_IRQHandler+0x42c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_DMA_IRQHandler+0x430>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x3e2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_DMA_IRQHandler+0x434>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12a      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x438>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e023      	b.n	80021e8 <HAL_DMA_IRQHandler+0x440>
 80021a0:	40020010 	.word	0x40020010
 80021a4:	40020028 	.word	0x40020028
 80021a8:	40020040 	.word	0x40020040
 80021ac:	40020058 	.word	0x40020058
 80021b0:	40020070 	.word	0x40020070
 80021b4:	40020088 	.word	0x40020088
 80021b8:	400200a0 	.word	0x400200a0
 80021bc:	400200b8 	.word	0x400200b8
 80021c0:	40020410 	.word	0x40020410
 80021c4:	40020428 	.word	0x40020428
 80021c8:	40020440 	.word	0x40020440
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020470 	.word	0x40020470
 80021d4:	40020488 	.word	0x40020488
 80021d8:	400204a0 	.word	0x400204a0
 80021dc:	400204b8 	.word	0x400204b8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00d      	beq.n	8002208 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2204      	movs	r2, #4
 80021f6:	409a      	lsls	r2, r3
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a6 	beq.w	800236a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a85      	ldr	r2, [pc, #532]	; (8002438 <HAL_DMA_IRQHandler+0x690>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04a      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a83      	ldr	r2, [pc, #524]	; (800243c <HAL_DMA_IRQHandler+0x694>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d045      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a82      	ldr	r2, [pc, #520]	; (8002440 <HAL_DMA_IRQHandler+0x698>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d040      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a80      	ldr	r2, [pc, #512]	; (8002444 <HAL_DMA_IRQHandler+0x69c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d03b      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <HAL_DMA_IRQHandler+0x6a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d036      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a7d      	ldr	r2, [pc, #500]	; (800244c <HAL_DMA_IRQHandler+0x6a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7c      	ldr	r2, [pc, #496]	; (8002450 <HAL_DMA_IRQHandler+0x6a8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d02c      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7a      	ldr	r2, [pc, #488]	; (8002454 <HAL_DMA_IRQHandler+0x6ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d027      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a79      	ldr	r2, [pc, #484]	; (8002458 <HAL_DMA_IRQHandler+0x6b0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a77      	ldr	r2, [pc, #476]	; (800245c <HAL_DMA_IRQHandler+0x6b4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01d      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a76      	ldr	r2, [pc, #472]	; (8002460 <HAL_DMA_IRQHandler+0x6b8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a74      	ldr	r2, [pc, #464]	; (8002464 <HAL_DMA_IRQHandler+0x6bc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a73      	ldr	r2, [pc, #460]	; (8002468 <HAL_DMA_IRQHandler+0x6c0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a71      	ldr	r2, [pc, #452]	; (800246c <HAL_DMA_IRQHandler+0x6c4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a70      	ldr	r2, [pc, #448]	; (8002470 <HAL_DMA_IRQHandler+0x6c8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_DMA_IRQHandler+0x516>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_DMA_IRQHandler+0x6cc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10a      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x52c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e009      	b.n	80022e8 <HAL_DMA_IRQHandler+0x540>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03e      	beq.n	800236a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2210      	movs	r2, #16
 80022f6:	409a      	lsls	r2, r3
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d018      	beq.n	800233c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d024      	beq.n	800236a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e01f      	b.n	800236a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01b      	beq.n	800236a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e016      	b.n	800236a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0208 	bic.w	r2, r2, #8
 8002358:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2220      	movs	r2, #32
 8002374:	409a      	lsls	r2, r3
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8110 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <HAL_DMA_IRQHandler+0x690>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d04a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2b      	ldr	r2, [pc, #172]	; (800243c <HAL_DMA_IRQHandler+0x694>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d045      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_DMA_IRQHandler+0x698>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d040      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_DMA_IRQHandler+0x69c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d03b      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <HAL_DMA_IRQHandler+0x6a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d036      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_DMA_IRQHandler+0x6a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d031      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <HAL_DMA_IRQHandler+0x6a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_DMA_IRQHandler+0x6ac>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d027      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_DMA_IRQHandler+0x6b0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d022      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_DMA_IRQHandler+0x6b4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d01d      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_DMA_IRQHandler+0x6b8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d018      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_DMA_IRQHandler+0x6bc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_DMA_IRQHandler+0x6c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00e      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_DMA_IRQHandler+0x6c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d009      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_DMA_IRQHandler+0x6c8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_DMA_IRQHandler+0x678>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_DMA_IRQHandler+0x6cc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d12b      	bne.n	8002478 <HAL_DMA_IRQHandler+0x6d0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e02a      	b.n	800248c <HAL_DMA_IRQHandler+0x6e4>
 8002436:	bf00      	nop
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf14      	ite	ne
 8002486:	2301      	movne	r3, #1
 8002488:	2300      	moveq	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8087 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2220      	movs	r2, #32
 800249c:	409a      	lsls	r2, r3
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d139      	bne.n	8002522 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_IRQHandler+0x736>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	223f      	movs	r2, #63	; 0x3f
 80024f8:	409a      	lsls	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 834a 	beq.w	8002bac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
          }
          return;
 8002520:	e344      	b.n	8002bac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d018      	beq.n	8002562 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	2b00      	cmp	r3, #0
 8002544:	d02c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
 800254e:	e027      	b.n	80025a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e01e      	b.n	80025a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0210 	bic.w	r2, r2, #16
 800257e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8306 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8088 	beq.w	80026c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_DMA_IRQHandler+0xa08>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d04a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a79      	ldr	r2, [pc, #484]	; (80027b4 <HAL_DMA_IRQHandler+0xa0c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_DMA_IRQHandler+0xa10>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a76      	ldr	r2, [pc, #472]	; (80027bc <HAL_DMA_IRQHandler+0xa14>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d03b      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a74      	ldr	r2, [pc, #464]	; (80027c0 <HAL_DMA_IRQHandler+0xa18>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d036      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a73      	ldr	r2, [pc, #460]	; (80027c4 <HAL_DMA_IRQHandler+0xa1c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_DMA_IRQHandler+0xa20>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a70      	ldr	r2, [pc, #448]	; (80027cc <HAL_DMA_IRQHandler+0xa24>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d027      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_DMA_IRQHandler+0xa28>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_DMA_IRQHandler+0xa2c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6b      	ldr	r2, [pc, #428]	; (80027d8 <HAL_DMA_IRQHandler+0xa30>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <HAL_DMA_IRQHandler+0xa34>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_DMA_IRQHandler+0xa38>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a67      	ldr	r2, [pc, #412]	; (80027e4 <HAL_DMA_IRQHandler+0xa3c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_DMA_IRQHandler+0xa40>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_IRQHandler+0x8b8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a64      	ldr	r2, [pc, #400]	; (80027ec <HAL_DMA_IRQHandler+0xa44>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <HAL_DMA_IRQHandler+0x8ca>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e007      	b.n	8002682 <HAL_DMA_IRQHandler+0x8da>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	429a      	cmp	r2, r3
 800268c:	d307      	bcc.n	800269e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f2      	bne.n	8002682 <HAL_DMA_IRQHandler+0x8da>
 800269c:	e000      	b.n	80026a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800269e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80026b6:	e003      	b.n	80026c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8272 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
 80026da:	e26c      	b.n	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_DMA_IRQHandler+0xa48>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d022      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_DMA_IRQHandler+0xa4c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01d      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <HAL_DMA_IRQHandler+0xa50>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d018      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a3f      	ldr	r2, [pc, #252]	; (80027fc <HAL_DMA_IRQHandler+0xa54>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3d      	ldr	r2, [pc, #244]	; (8002800 <HAL_DMA_IRQHandler+0xa58>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_DMA_IRQHandler+0xa5c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <HAL_DMA_IRQHandler+0xa60>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_DMA_IRQHandler+0x984>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_DMA_IRQHandler+0xa64>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_DMA_IRQHandler+0x988>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_DMA_IRQHandler+0x98a>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 823f 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2204      	movs	r2, #4
 800274a:	409a      	lsls	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80cd 	beq.w	80028f0 <HAL_DMA_IRQHandler+0xb48>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80c7 	beq.w	80028f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2204      	movs	r2, #4
 800276c:	409a      	lsls	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d049      	beq.n	8002810 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8210 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002798:	e20a      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8206 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027ac:	e200      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xe08>
 80027ae:	bf00      	nop
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	40020040 	.word	0x40020040
 80027bc:	40020058 	.word	0x40020058
 80027c0:	40020070 	.word	0x40020070
 80027c4:	40020088 	.word	0x40020088
 80027c8:	400200a0 	.word	0x400200a0
 80027cc:	400200b8 	.word	0x400200b8
 80027d0:	40020410 	.word	0x40020410
 80027d4:	40020428 	.word	0x40020428
 80027d8:	40020440 	.word	0x40020440
 80027dc:	40020458 	.word	0x40020458
 80027e0:	40020470 	.word	0x40020470
 80027e4:	40020488 	.word	0x40020488
 80027e8:	400204a0 	.word	0x400204a0
 80027ec:	400204b8 	.word	0x400204b8
 80027f0:	58025408 	.word	0x58025408
 80027f4:	5802541c 	.word	0x5802541c
 80027f8:	58025430 	.word	0x58025430
 80027fc:	58025444 	.word	0x58025444
 8002800:	58025458 	.word	0x58025458
 8002804:	5802546c 	.word	0x5802546c
 8002808:	58025480 	.word	0x58025480
 800280c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	d160      	bne.n	80028dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_DMA_IRQHandler+0xc74>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d04a      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7d      	ldr	r2, [pc, #500]	; (8002a20 <HAL_DMA_IRQHandler+0xc78>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d045      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7c      	ldr	r2, [pc, #496]	; (8002a24 <HAL_DMA_IRQHandler+0xc7c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d040      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	; (8002a28 <HAL_DMA_IRQHandler+0xc80>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d03b      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	; (8002a2c <HAL_DMA_IRQHandler+0xc84>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d036      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <HAL_DMA_IRQHandler+0xc88>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a76      	ldr	r2, [pc, #472]	; (8002a34 <HAL_DMA_IRQHandler+0xc8c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02c      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a74      	ldr	r2, [pc, #464]	; (8002a38 <HAL_DMA_IRQHandler+0xc90>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <HAL_DMA_IRQHandler+0xc94>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_DMA_IRQHandler+0xc98>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a70      	ldr	r2, [pc, #448]	; (8002a44 <HAL_DMA_IRQHandler+0xc9c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6e      	ldr	r2, [pc, #440]	; (8002a48 <HAL_DMA_IRQHandler+0xca0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6d      	ldr	r2, [pc, #436]	; (8002a4c <HAL_DMA_IRQHandler+0xca4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6b      	ldr	r2, [pc, #428]	; (8002a50 <HAL_DMA_IRQHandler+0xca8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6a      	ldr	r2, [pc, #424]	; (8002a54 <HAL_DMA_IRQHandler+0xcac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_IRQHandler+0xb12>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a68      	ldr	r2, [pc, #416]	; (8002a58 <HAL_DMA_IRQHandler+0xcb0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_IRQHandler+0xb24>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e007      	b.n	80028dc <HAL_DMA_IRQHandler+0xb34>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8165 	beq.w	8002bb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ee:	e15f      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2202      	movs	r2, #2
 80028fa:	409a      	lsls	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80c5 	beq.w	8002a90 <HAL_DMA_IRQHandler+0xce8>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80bf 	beq.w	8002a90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2202      	movs	r2, #2
 800291c:	409a      	lsls	r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 813a 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002948:	e134      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8130 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800295c:	e12a      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 8089 	bne.w	8002a7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_DMA_IRQHandler+0xc74>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04a      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_DMA_IRQHandler+0xc78>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d045      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_DMA_IRQHandler+0xc7c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d040      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_DMA_IRQHandler+0xc80>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d03b      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_DMA_IRQHandler+0xc84>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d036      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_DMA_IRQHandler+0xc88>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_IRQHandler+0xc8c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d02c      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <HAL_DMA_IRQHandler+0xc90>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d027      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_DMA_IRQHandler+0xc94>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_DMA_IRQHandler+0xc98>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01d      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_DMA_IRQHandler+0xc9c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <HAL_DMA_IRQHandler+0xca0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_DMA_IRQHandler+0xca4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_DMA_IRQHandler+0xca8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_DMA_IRQHandler+0xcac>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xc62>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <HAL_DMA_IRQHandler+0xcb0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d128      	bne.n	8002a5c <HAL_DMA_IRQHandler+0xcb4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0214 	bic.w	r2, r2, #20
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e027      	b.n	8002a6c <HAL_DMA_IRQHandler+0xcc4>
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 020a 	bic.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8097 	beq.w	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a8e:	e091      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2208      	movs	r2, #8
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8088 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8082 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <HAL_DMA_IRQHandler+0xe14>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3f      	ldr	r2, [pc, #252]	; (8002bc0 <HAL_DMA_IRQHandler+0xe18>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3e      	ldr	r2, [pc, #248]	; (8002bc4 <HAL_DMA_IRQHandler+0xe1c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_DMA_IRQHandler+0xe20>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_DMA_IRQHandler+0xe24>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a39      	ldr	r2, [pc, #228]	; (8002bd0 <HAL_DMA_IRQHandler+0xe28>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a38      	ldr	r2, [pc, #224]	; (8002bd4 <HAL_DMA_IRQHandler+0xe2c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a36      	ldr	r2, [pc, #216]	; (8002bd8 <HAL_DMA_IRQHandler+0xe30>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <HAL_DMA_IRQHandler+0xe34>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a33      	ldr	r2, [pc, #204]	; (8002be0 <HAL_DMA_IRQHandler+0xe38>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <HAL_DMA_IRQHandler+0xe3c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_DMA_IRQHandler+0xe40>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <HAL_DMA_IRQHandler+0xe44>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_DMA_IRQHandler+0xe48>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <HAL_DMA_IRQHandler+0xe4c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xdaa>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_DMA_IRQHandler+0xe50>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d108      	bne.n	8002b64 <HAL_DMA_IRQHandler+0xdbc>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 021c 	bic.w	r2, r2, #28
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e007      	b.n	8002b74 <HAL_DMA_IRQHandler+0xdcc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e004      	b.n	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40020010 	.word	0x40020010
 8002bc0:	40020028 	.word	0x40020028
 8002bc4:	40020040 	.word	0x40020040
 8002bc8:	40020058 	.word	0x40020058
 8002bcc:	40020070 	.word	0x40020070
 8002bd0:	40020088 	.word	0x40020088
 8002bd4:	400200a0 	.word	0x400200a0
 8002bd8:	400200b8 	.word	0x400200b8
 8002bdc:	40020410 	.word	0x40020410
 8002be0:	40020428 	.word	0x40020428
 8002be4:	40020440 	.word	0x40020440
 8002be8:	40020458 	.word	0x40020458
 8002bec:	40020470 	.word	0x40020470
 8002bf0:	40020488 	.word	0x40020488
 8002bf4:	400204a0 	.word	0x400204a0
 8002bf8:	400204b8 	.word	0x400204b8

08002bfc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7f      	ldr	r2, [pc, #508]	; (8002e30 <DMA_SetConfig+0x21c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d072      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7d      	ldr	r2, [pc, #500]	; (8002e34 <DMA_SetConfig+0x220>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d06d      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7c      	ldr	r2, [pc, #496]	; (8002e38 <DMA_SetConfig+0x224>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d068      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7a      	ldr	r2, [pc, #488]	; (8002e3c <DMA_SetConfig+0x228>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d063      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <DMA_SetConfig+0x22c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d05e      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a77      	ldr	r2, [pc, #476]	; (8002e44 <DMA_SetConfig+0x230>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d059      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a76      	ldr	r2, [pc, #472]	; (8002e48 <DMA_SetConfig+0x234>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d054      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a74      	ldr	r2, [pc, #464]	; (8002e4c <DMA_SetConfig+0x238>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d04f      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a73      	ldr	r2, [pc, #460]	; (8002e50 <DMA_SetConfig+0x23c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a71      	ldr	r2, [pc, #452]	; (8002e54 <DMA_SetConfig+0x240>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a70      	ldr	r2, [pc, #448]	; (8002e58 <DMA_SetConfig+0x244>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <DMA_SetConfig+0x248>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <DMA_SetConfig+0x24c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <DMA_SetConfig+0x250>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <DMA_SetConfig+0x254>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <DMA_SetConfig+0x258>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a67      	ldr	r2, [pc, #412]	; (8002e70 <DMA_SetConfig+0x25c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <DMA_SetConfig+0x260>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <DMA_SetConfig+0x264>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a62      	ldr	r2, [pc, #392]	; (8002e7c <DMA_SetConfig+0x268>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <DMA_SetConfig+0x26c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5f      	ldr	r2, [pc, #380]	; (8002e84 <DMA_SetConfig+0x270>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <DMA_SetConfig+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <DMA_SetConfig+0x10a>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5c      	ldr	r2, [pc, #368]	; (8002e8c <DMA_SetConfig+0x278>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <DMA_SetConfig+0x10e>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <DMA_SetConfig+0x110>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <DMA_SetConfig+0x21c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <DMA_SetConfig+0x220>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <DMA_SetConfig+0x224>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <DMA_SetConfig+0x228>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <DMA_SetConfig+0x22c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <DMA_SetConfig+0x230>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <DMA_SetConfig+0x234>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <DMA_SetConfig+0x238>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <DMA_SetConfig+0x23c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <DMA_SetConfig+0x240>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <DMA_SetConfig+0x244>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <DMA_SetConfig+0x248>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <DMA_SetConfig+0x24c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <DMA_SetConfig+0x250>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <DMA_SetConfig+0x254>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <DMA_SetConfig+0x1d0>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <DMA_SetConfig+0x258>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <DMA_SetConfig+0x1d4>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <DMA_SetConfig+0x1d6>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d059      	beq.n	8002ea2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	223f      	movs	r2, #63	; 0x3f
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d138      	bne.n	8002e90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e2e:	e086      	b.n	8002f3e <DMA_SetConfig+0x32a>
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	58025408 	.word	0x58025408
 8002e74:	5802541c 	.word	0x5802541c
 8002e78:	58025430 	.word	0x58025430
 8002e7c:	58025444 	.word	0x58025444
 8002e80:	58025458 	.word	0x58025458
 8002e84:	5802546c 	.word	0x5802546c
 8002e88:	58025480 	.word	0x58025480
 8002e8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
}
 8002ea0:	e04d      	b.n	8002f3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <DMA_SetConfig+0x338>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <DMA_SetConfig+0x33c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <DMA_SetConfig+0x340>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <DMA_SetConfig+0x344>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <DMA_SetConfig+0x348>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <DMA_SetConfig+0x34c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <DMA_SetConfig+0x350>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <DMA_SetConfig+0x2de>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <DMA_SetConfig+0x354>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <DMA_SetConfig+0x2e2>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <DMA_SetConfig+0x2e4>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2201      	movs	r2, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d108      	bne.n	8002f2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
}
 8002f2c:	e007      	b.n	8002f3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	60da      	str	r2, [r3, #12]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	58025408 	.word	0x58025408
 8002f50:	5802541c 	.word	0x5802541c
 8002f54:	58025430 	.word	0x58025430
 8002f58:	58025444 	.word	0x58025444
 8002f5c:	58025458 	.word	0x58025458
 8002f60:	5802546c 	.word	0x5802546c
 8002f64:	58025480 	.word	0x58025480
 8002f68:	58025494 	.word	0x58025494

08002f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <DMA_CalcBaseAndBitshift+0x118>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d04a      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a41      	ldr	r2, [pc, #260]	; (8003088 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d045      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	; (800308c <DMA_CalcBaseAndBitshift+0x120>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d040      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3e      	ldr	r2, [pc, #248]	; (8003090 <DMA_CalcBaseAndBitshift+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d03b      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3c      	ldr	r2, [pc, #240]	; (8003094 <DMA_CalcBaseAndBitshift+0x128>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d036      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <DMA_CalcBaseAndBitshift+0x12c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d031      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	; (800309c <DMA_CalcBaseAndBitshift+0x130>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02c      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <DMA_CalcBaseAndBitshift+0x134>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d027      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <DMA_CalcBaseAndBitshift+0x138>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d022      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a35      	ldr	r2, [pc, #212]	; (80030a8 <DMA_CalcBaseAndBitshift+0x13c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01d      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a33      	ldr	r2, [pc, #204]	; (80030ac <DMA_CalcBaseAndBitshift+0x140>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d018      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <DMA_CalcBaseAndBitshift+0x144>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <DMA_CalcBaseAndBitshift+0x148>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00e      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <DMA_CalcBaseAndBitshift+0x14c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d009      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <DMA_CalcBaseAndBitshift+0x150>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xa8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <DMA_CalcBaseAndBitshift+0x154>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <DMA_CalcBaseAndBitshift+0xac>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <DMA_CalcBaseAndBitshift+0xae>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3b10      	subs	r3, #16
 8003026:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <DMA_CalcBaseAndBitshift+0x158>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d908      	bls.n	8003058 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <DMA_CalcBaseAndBitshift+0x160>)
 800304e:	4013      	ands	r3, r2
 8003050:	1d1a      	adds	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58
 8003056:	e00d      	b.n	8003074 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <DMA_CalcBaseAndBitshift+0x160>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6593      	str	r3, [r2, #88]	; 0x58
 8003066:	e005      	b.n	8003074 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40020010 	.word	0x40020010
 8003088:	40020028 	.word	0x40020028
 800308c:	40020040 	.word	0x40020040
 8003090:	40020058 	.word	0x40020058
 8003094:	40020070 	.word	0x40020070
 8003098:	40020088 	.word	0x40020088
 800309c:	400200a0 	.word	0x400200a0
 80030a0:	400200b8 	.word	0x400200b8
 80030a4:	40020410 	.word	0x40020410
 80030a8:	40020428 	.word	0x40020428
 80030ac:	40020440 	.word	0x40020440
 80030b0:	40020458 	.word	0x40020458
 80030b4:	40020470 	.word	0x40020470
 80030b8:	40020488 	.word	0x40020488
 80030bc:	400204a0 	.word	0x400204a0
 80030c0:	400204b8 	.word	0x400204b8
 80030c4:	aaaaaaab 	.word	0xaaaaaaab
 80030c8:	08006520 	.word	0x08006520
 80030cc:	fffffc00 	.word	0xfffffc00

080030d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d120      	bne.n	8003126 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d858      	bhi.n	800319e <DMA_CheckFifoParam+0xce>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <DMA_CheckFifoParam+0x24>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003117 	.word	0x08003117
 80030fc:	08003105 	.word	0x08003105
 8003100:	0800319f 	.word	0x0800319f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d048      	beq.n	80031a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003114:	e045      	b.n	80031a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311e:	d142      	bne.n	80031a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003124:	e03f      	b.n	80031a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	d123      	bne.n	8003178 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	2b03      	cmp	r3, #3
 8003136:	d838      	bhi.n	80031aa <DMA_CheckFifoParam+0xda>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <DMA_CheckFifoParam+0x70>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003157 	.word	0x08003157
 8003148:	08003151 	.word	0x08003151
 800314c:	08003169 	.word	0x08003169
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
        break;
 8003154:	e030      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d025      	beq.n	80031ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003166:	e022      	b.n	80031ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003170:	d11f      	bne.n	80031b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003176:	e01c      	b.n	80031b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <DMA_CheckFifoParam+0xb6>
 8003180:	2b03      	cmp	r3, #3
 8003182:	d003      	beq.n	800318c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003184:	e018      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
        break;
 800318a:	e015      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00e      	beq.n	80031b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
    break;
 800319c:	e00b      	b.n	80031b6 <DMA_CheckFifoParam+0xe6>
        break;
 800319e:	bf00      	nop
 80031a0:	e00a      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        break;
 80031a2:	bf00      	nop
 80031a4:	e008      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        break;
 80031a6:	bf00      	nop
 80031a8:	e006      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        break;
 80031aa:	bf00      	nop
 80031ac:	e004      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        break;
 80031ae:	bf00      	nop
 80031b0:	e002      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
        break;
 80031b2:	bf00      	nop
 80031b4:	e000      	b.n	80031b8 <DMA_CheckFifoParam+0xe8>
    break;
 80031b6:	bf00      	nop
    }
  }

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a38      	ldr	r2, [pc, #224]	; (80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a35      	ldr	r2, [pc, #212]	; (80032c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a32      	ldr	r2, [pc, #200]	; (80032cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2d      	ldr	r2, [pc, #180]	; (80032d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01a      	beq.n	8003266 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3b08      	subs	r3, #8
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003254:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2201      	movs	r2, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003264:	e024      	b.n	80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3b10      	subs	r3, #16
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d806      	bhi.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d902      	bls.n	800328e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3308      	adds	r3, #8
 800328c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494
 80032dc:	cccccccd 	.word	0xcccccccd
 80032e0:	16009600 	.word	0x16009600
 80032e4:	58025880 	.word	0x58025880
 80032e8:	aaaaaaab 	.word	0xaaaaaaab
 80032ec:	400204b8 	.word	0x400204b8
 80032f0:	4002040f 	.word	0x4002040f
 80032f4:	10008200 	.word	0x10008200
 80032f8:	40020880 	.word	0x40020880

080032fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04a      	beq.n	80033a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d847      	bhi.n	80033a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003384:	671a      	str	r2, [r3, #112]	; 0x70
 8003386:	e009      	b.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	461a      	mov	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800339a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3b01      	subs	r3, #1
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494
 80033d4:	1600963f 	.word	0x1600963f
 80033d8:	58025940 	.word	0x58025940
 80033dc:	1000823f 	.word	0x1000823f
 80033e0:	40020940 	.word	0x40020940

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_GPIO_Init+0x234>)
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033f6:	e194      	b.n	8003722 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8186 	beq.w	800371c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d005      	beq.n	8003428 <HAL_GPIO_Init+0x44>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d130      	bne.n	800348a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800345e:	2201      	movs	r2, #1
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0201 	and.w	r2, r3, #1
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d017      	beq.n	80034c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d123      	bne.n	800351a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80e0 	beq.w	800371c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <HAL_GPIO_Init+0x238>)
 800355e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_GPIO_Init+0x238>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_GPIO_Init+0x238>)
 800356e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357a:	4a29      	ldr	r2, [pc, #164]	; (8003620 <HAL_GPIO_Init+0x23c>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_GPIO_Init+0x240>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d052      	beq.n	800364c <HAL_GPIO_Init+0x268>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_GPIO_Init+0x244>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_GPIO_Init+0x22e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <HAL_GPIO_Init+0x248>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <HAL_GPIO_Init+0x22a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_GPIO_Init+0x24c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d025      	beq.n	800360a <HAL_GPIO_Init+0x226>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_GPIO_Init+0x250>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <HAL_GPIO_Init+0x222>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <HAL_GPIO_Init+0x254>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d019      	beq.n	8003602 <HAL_GPIO_Init+0x21e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_GPIO_Init+0x258>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_Init+0x21a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a19      	ldr	r2, [pc, #100]	; (8003640 <HAL_GPIO_Init+0x25c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_Init+0x216>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_GPIO_Init+0x260>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_GPIO_Init+0x264>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_Init+0x20e>
 80035ee:	2309      	movs	r3, #9
 80035f0:	e02d      	b.n	800364e <HAL_GPIO_Init+0x26a>
 80035f2:	230a      	movs	r3, #10
 80035f4:	e02b      	b.n	800364e <HAL_GPIO_Init+0x26a>
 80035f6:	2308      	movs	r3, #8
 80035f8:	e029      	b.n	800364e <HAL_GPIO_Init+0x26a>
 80035fa:	2307      	movs	r3, #7
 80035fc:	e027      	b.n	800364e <HAL_GPIO_Init+0x26a>
 80035fe:	2306      	movs	r3, #6
 8003600:	e025      	b.n	800364e <HAL_GPIO_Init+0x26a>
 8003602:	2305      	movs	r3, #5
 8003604:	e023      	b.n	800364e <HAL_GPIO_Init+0x26a>
 8003606:	2304      	movs	r3, #4
 8003608:	e021      	b.n	800364e <HAL_GPIO_Init+0x26a>
 800360a:	2303      	movs	r3, #3
 800360c:	e01f      	b.n	800364e <HAL_GPIO_Init+0x26a>
 800360e:	2302      	movs	r3, #2
 8003610:	e01d      	b.n	800364e <HAL_GPIO_Init+0x26a>
 8003612:	2301      	movs	r3, #1
 8003614:	e01b      	b.n	800364e <HAL_GPIO_Init+0x26a>
 8003616:	bf00      	nop
 8003618:	58000080 	.word	0x58000080
 800361c:	58024400 	.word	0x58024400
 8003620:	58000400 	.word	0x58000400
 8003624:	58020000 	.word	0x58020000
 8003628:	58020400 	.word	0x58020400
 800362c:	58020800 	.word	0x58020800
 8003630:	58020c00 	.word	0x58020c00
 8003634:	58021000 	.word	0x58021000
 8003638:	58021400 	.word	0x58021400
 800363c:	58021800 	.word	0x58021800
 8003640:	58021c00 	.word	0x58021c00
 8003644:	58022000 	.word	0x58022000
 8003648:	58022400 	.word	0x58022400
 800364c:	2300      	movs	r3, #0
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f002 0203 	and.w	r2, r2, #3
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	4093      	lsls	r3, r2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365e:	4938      	ldr	r1, [pc, #224]	; (8003740 <HAL_GPIO_Init+0x35c>)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3301      	adds	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f ae63 	bne.w	80033f8 <HAL_GPIO_Init+0x14>
  }
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	3724      	adds	r7, #36	; 0x24
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	58000400 	.word	0x58000400

08003744 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d00a      	beq.n	800376e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e01f      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e01d      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	490f      	ldr	r1, [pc, #60]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800377e:	f7fd f9bb 	bl	8000af8 <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003784:	e009      	b.n	800379a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003786:	f7fd f9b7 	bl	8000af8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003794:	d901      	bls.n	800379a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_PWREx_ConfigSupply+0x70>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d1ee      	bne.n	8003786 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	58024800 	.word	0x58024800

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f000 bc1d 	b.w	8004006 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8087 	beq.w	80038e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037da:	4b99      	ldr	r3, [pc, #612]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037e4:	4b96      	ldr	r3, [pc, #600]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d007      	beq.n	8003800 <HAL_RCC_OscConfig+0x48>
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	d110      	bne.n	8003818 <HAL_RCC_OscConfig+0x60>
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b8f      	ldr	r3, [pc, #572]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d06c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x12e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d168      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e3f6      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x78>
 8003822:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a86      	ldr	r2, [pc, #536]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e02e      	b.n	800388e <HAL_RCC_OscConfig+0xd6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10c      	bne.n	8003852 <HAL_RCC_OscConfig+0x9a>
 8003838:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a80      	ldr	r2, [pc, #512]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b7e      	ldr	r3, [pc, #504]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7d      	ldr	r2, [pc, #500]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e01d      	b.n	800388e <HAL_RCC_OscConfig+0xd6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0xbe>
 800385c:	4b78      	ldr	r3, [pc, #480]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a77      	ldr	r2, [pc, #476]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b75      	ldr	r3, [pc, #468]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e00b      	b.n	800388e <HAL_RCC_OscConfig+0xd6>
 8003876:	4b72      	ldr	r3, [pc, #456]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a71      	ldr	r2, [pc, #452]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800387c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd f92f 	bl	8000af8 <HAL_GetTick>
 800389a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800389e:	f7fd f92b 	bl	8000af8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e3aa      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b0:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0xe6>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd f91b 	bl	8000af8 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c6:	f7fd f917 	bl	8000af8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e396      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x10e>
 80038e4:	e000      	b.n	80038e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80cb 	beq.w	8003a8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b52      	ldr	r3, [pc, #328]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003900:	4b4f      	ldr	r3, [pc, #316]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_RCC_OscConfig+0x164>
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b18      	cmp	r3, #24
 8003910:	d156      	bne.n	80039c0 <HAL_RCC_OscConfig+0x208>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d151      	bne.n	80039c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	4b48      	ldr	r3, [pc, #288]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_OscConfig+0x17c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e368      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003934:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0219 	bic.w	r2, r3, #25
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	493f      	ldr	r1, [pc, #252]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003946:	f7fd f8d7 	bl	8000af8 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394e:	f7fd f8d3 	bl	8000af8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e352      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003960:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	f7fd f8f4 	bl	8000b58 <HAL_GetREVID>
 8003970:	4603      	mov	r3, r0
 8003972:	f241 0203 	movw	r2, #4099	; 0x1003
 8003976:	4293      	cmp	r3, r2
 8003978:	d817      	bhi.n	80039aa <HAL_RCC_OscConfig+0x1f2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x1dc>
 8003982:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800398a:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 800398c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003992:	e07b      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	4927      	ldr	r1, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	e070      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	4921      	ldr	r1, [pc, #132]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039be:	e065      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d048      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0219 	bic.w	r2, r3, #25
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	491a      	ldr	r1, [pc, #104]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd f88d 	bl	8000af8 <HAL_GetTick>
 80039de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fd f889 	bl	8000af8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e308      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	f7fd f8aa 	bl	8000b58 <HAL_GetREVID>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d81a      	bhi.n	8003a44 <HAL_RCC_OscConfig+0x28c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d108      	bne.n	8003a28 <HAL_RCC_OscConfig+0x270>
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	6053      	str	r3, [r2, #4]
 8003a26:	e031      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	031b      	lsls	r3, r3, #12
 8003a36:	4902      	ldr	r1, [pc, #8]	; (8003a40 <HAL_RCC_OscConfig+0x288>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e026      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
 8003a44:	4b9a      	ldr	r3, [pc, #616]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	4997      	ldr	r1, [pc, #604]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
 8003a58:	e018      	b.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5a:	4b95      	ldr	r3, [pc, #596]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a94      	ldr	r2, [pc, #592]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fd f847 	bl	8000af8 <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fd f843 	bl	8000af8 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e2c2      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a80:	4b8b      	ldr	r3, [pc, #556]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a9 	beq.w	8003bec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa4:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x308>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b18      	cmp	r3, #24
 8003ab4:	d13a      	bne.n	8003b2c <HAL_RCC_OscConfig+0x374>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d135      	bne.n	8003b2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ac0:	4b7b      	ldr	r3, [pc, #492]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x320>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e296      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ad8:	f7fd f83e 	bl	8000b58 <HAL_GetREVID>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d817      	bhi.n	8003b16 <HAL_RCC_OscConfig+0x35e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0x348>
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003af6:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003afc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003afe:	e075      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b00:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	069b      	lsls	r3, r3, #26
 8003b0e:	4968      	ldr	r1, [pc, #416]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b14:	e06a      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b16:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	4962      	ldr	r1, [pc, #392]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b2a:	e05f      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d042      	beq.n	8003bba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b34:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fc ffda 	bl	8000af8 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b48:	f7fc ffd6 	bl	8000af8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e255      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b5a:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b66:	f7fc fff7 	bl	8000b58 <HAL_GetREVID>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d817      	bhi.n	8003ba4 <HAL_RCC_OscConfig+0x3ec>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d108      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3d6>
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b84:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b8a:	6053      	str	r3, [r2, #4]
 8003b8c:	e02e      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	069b      	lsls	r3, r3, #26
 8003b9c:	4944      	ldr	r1, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
 8003ba2:	e023      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
 8003ba4:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	493f      	ldr	r1, [pc, #252]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60cb      	str	r3, [r1, #12]
 8003bb8:	e018      	b.n	8003bec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fc ff97 	bl	8000af8 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bce:	f7fc ff93 	bl	8000af8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e212      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d036      	beq.n	8003c66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d019      	beq.n	8003c34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fc ff74 	bl	8000af8 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fc ff70 	bl	8000af8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1ef      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c26:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x45c>
 8003c32:	e018      	b.n	8003c66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fc ff5a 	bl	8000af8 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fc ff56 	bl	8000af8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1d5      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d039      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c86:	f7fc ff37 	bl	8000af8 <HAL_GetTick>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c8e:	f7fc ff33 	bl	8000af8 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1b2      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x4d6>
 8003cac:	e01b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x52e>
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cb4:	4b9b      	ldr	r3, [pc, #620]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a9a      	ldr	r2, [pc, #616]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cc0:	f7fc ff1a 	bl	8000af8 <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cc8:	f7fc ff16 	bl	8000af8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e195      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cda:	4b92      	ldr	r3, [pc, #584]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8081 	beq.w	8003df6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cf4:	4b8c      	ldr	r3, [pc, #560]	; (8003f28 <HAL_RCC_OscConfig+0x770>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a8b      	ldr	r2, [pc, #556]	; (8003f28 <HAL_RCC_OscConfig+0x770>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d00:	f7fc fefa 	bl	8000af8 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d08:	f7fc fef6 	bl	8000af8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e175      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1a:	4b83      	ldr	r3, [pc, #524]	; (8003f28 <HAL_RCC_OscConfig+0x770>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x584>
 8003d2e:	4b7d      	ldr	r3, [pc, #500]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	e02d      	b.n	8003d98 <HAL_RCC_OscConfig+0x5e0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5a6>
 8003d44:	4b77      	ldr	r3, [pc, #476]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a76      	ldr	r2, [pc, #472]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	4b74      	ldr	r3, [pc, #464]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a73      	ldr	r2, [pc, #460]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	e01c      	b.n	8003d98 <HAL_RCC_OscConfig+0x5e0>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c8>
 8003d66:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a6e      	ldr	r2, [pc, #440]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	4b6c      	ldr	r3, [pc, #432]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a6b      	ldr	r2, [pc, #428]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0x5e0>
 8003d80:	4b68      	ldr	r3, [pc, #416]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	4b65      	ldr	r3, [pc, #404]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a64      	ldr	r2, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fc feaa 	bl	8000af8 <HAL_GetTick>
 8003da4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fc fea6 	bl	8000af8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e123      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dbe:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ee      	beq.n	8003da8 <HAL_RCC_OscConfig+0x5f0>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fc fe94 	bl	8000af8 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd4:	f7fc fe90 	bl	8000af8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e10d      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dea:	4b4e      	ldr	r3, [pc, #312]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ee      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8102 	beq.w	8004004 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e00:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e08:	2b18      	cmp	r3, #24
 8003e0a:	f000 80bd 	beq.w	8003f88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	f040 809e 	bne.w	8003f54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a41      	ldr	r2, [pc, #260]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fc fe68 	bl	8000af8 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fc fe64 	bl	8000af8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0e3      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4e:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_RCC_OscConfig+0x774>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	4931      	ldr	r1, [pc, #196]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	628b      	str	r3, [r1, #40]	; 0x28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	3b01      	subs	r3, #1
 8003e74:	025b      	lsls	r3, r3, #9
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e94:	4923      	ldr	r1, [pc, #140]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCC_OscConfig+0x778>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003eb2:	00d2      	lsls	r2, r2, #3
 8003eb4:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f023 020c 	bic.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4917      	ldr	r1, [pc, #92]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f023 0202 	bic.w	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	4912      	ldr	r1, [pc, #72]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fc fded 	bl	8000af8 <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f20:	e011      	b.n	8003f46 <HAL_RCC_OscConfig+0x78e>
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58024800 	.word	0x58024800
 8003f2c:	fffffc0c 	.word	0xfffffc0c
 8003f30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fc fde0 	bl	8000af8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e05f      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f46:	4b32      	ldr	r3, [pc, #200]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x77c>
 8003f52:	e057      	b.n	8004004 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fc fdca 	bl	8000af8 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fc fdc6 	bl	8000af8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e045      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x7b0>
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_OscConfig+0x858>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d031      	beq.n	8004000 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d12a      	bne.n	8004000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d122      	bne.n	8004000 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	0a5b      	lsrs	r3, r3, #9
 8003fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d111      	bne.n	8004000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d108      	bne.n	8004000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400

08004014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e19c      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d910      	bls.n	8004058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b87      	ldr	r3, [pc, #540]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 020f 	bic.w	r2, r3, #15
 800403e:	4985      	ldr	r1, [pc, #532]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b83      	ldr	r3, [pc, #524]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e184      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004070:	429a      	cmp	r2, r3
 8004072:	d908      	bls.n	8004086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004074:	4b78      	ldr	r3, [pc, #480]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	4975      	ldr	r1, [pc, #468]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004082:	4313      	orrs	r3, r2
 8004084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	4b70      	ldr	r3, [pc, #448]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800409e:	429a      	cmp	r2, r3
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040a2:	4b6d      	ldr	r3, [pc, #436]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	496a      	ldr	r1, [pc, #424]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699a      	ldr	r2, [r3, #24]
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d908      	bls.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	495e      	ldr	r1, [pc, #376]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d908      	bls.n	8004110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80040fe:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4953      	ldr	r1, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	429a      	cmp	r2, r3
 800412a:	d908      	bls.n	800413e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f023 020f 	bic.w	r2, r3, #15
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4947      	ldr	r1, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800413a:	4313      	orrs	r3, r2
 800413c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d055      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4940      	ldr	r1, [pc, #256]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004158:	4313      	orrs	r3, r2
 800415a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004164:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d121      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0f6      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d107      	bne.n	800418c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d115      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0ea      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0de      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0d6      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f023 0207 	bic.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4925      	ldr	r1, [pc, #148]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fc fc97 	bl	8000af8 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ce:	f7fc fc93 	bl	8000af8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0be      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e4:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d1eb      	bne.n	80041ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	429a      	cmp	r2, r3
 8004210:	d208      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	490e      	ldr	r1, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x244>)
 8004220:	4313      	orrs	r3, r2
 8004222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d214      	bcs.n	800425c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4906      	ldr	r1, [pc, #24]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b04      	ldr	r3, [pc, #16]	; (8004254 <HAL_RCC_ClockConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e086      	b.n	8004362 <HAL_RCC_ClockConfig+0x34e>
 8004254:	52002000 	.word	0x52002000
 8004258:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004274:	429a      	cmp	r2, r3
 8004276:	d208      	bcs.n	800428a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004278:	4b3c      	ldr	r3, [pc, #240]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	4939      	ldr	r1, [pc, #228]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 8004286:	4313      	orrs	r3, r2
 8004288:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d208      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042a6:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	492e      	ldr	r1, [pc, #184]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	4b28      	ldr	r3, [pc, #160]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d208      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4922      	ldr	r1, [pc, #136]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042fe:	429a      	cmp	r2, r3
 8004300:	d208      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4917      	ldr	r1, [pc, #92]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 8004310:	4313      	orrs	r3, r2
 8004312:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004314:	f000 f844 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4912      	ldr	r1, [pc, #72]	; (8004370 <HAL_RCC_ClockConfig+0x35c>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_RCC_ClockConfig+0x358>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <HAL_RCC_ClockConfig+0x35c>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <HAL_RCC_ClockConfig+0x360>)
 800434a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800434c:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x364>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_RCC_ClockConfig+0x368>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc fb84 	bl	8000a64 <HAL_InitTick>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
 8004370:	08006510 	.word	0x08006510
 8004374:	24000004 	.word	0x24000004
 8004378:	24000000 	.word	0x24000000
 800437c:	24000008 	.word	0x24000008

08004380 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_EnableCSS+0x1c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_RCC_EnableCSS+0x1c>)
 800438a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800438e:	6013      	str	r3, [r2, #0]
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a6:	4bb3      	ldr	r3, [pc, #716]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ae:	2b18      	cmp	r3, #24
 80043b0:	f200 8155 	bhi.w	800465e <HAL_RCC_GetSysClockFreq+0x2be>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	08004421 	.word	0x08004421
 80043c0:	0800465f 	.word	0x0800465f
 80043c4:	0800465f 	.word	0x0800465f
 80043c8:	0800465f 	.word	0x0800465f
 80043cc:	0800465f 	.word	0x0800465f
 80043d0:	0800465f 	.word	0x0800465f
 80043d4:	0800465f 	.word	0x0800465f
 80043d8:	0800465f 	.word	0x0800465f
 80043dc:	08004447 	.word	0x08004447
 80043e0:	0800465f 	.word	0x0800465f
 80043e4:	0800465f 	.word	0x0800465f
 80043e8:	0800465f 	.word	0x0800465f
 80043ec:	0800465f 	.word	0x0800465f
 80043f0:	0800465f 	.word	0x0800465f
 80043f4:	0800465f 	.word	0x0800465f
 80043f8:	0800465f 	.word	0x0800465f
 80043fc:	0800444d 	.word	0x0800444d
 8004400:	0800465f 	.word	0x0800465f
 8004404:	0800465f 	.word	0x0800465f
 8004408:	0800465f 	.word	0x0800465f
 800440c:	0800465f 	.word	0x0800465f
 8004410:	0800465f 	.word	0x0800465f
 8004414:	0800465f 	.word	0x0800465f
 8004418:	0800465f 	.word	0x0800465f
 800441c:	08004453 	.word	0x08004453
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004420:	4b94      	ldr	r3, [pc, #592]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800442c:	4b91      	ldr	r3, [pc, #580]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	4a90      	ldr	r2, [pc, #576]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800443e:	e111      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004440:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004442:	61bb      	str	r3, [r7, #24]
    break;
 8004444:	e10e      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004446:	4b8d      	ldr	r3, [pc, #564]	; (800467c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004448:	61bb      	str	r3, [r7, #24]
    break;
 800444a:	e10b      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800444c:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800444e:	61bb      	str	r3, [r7, #24]
    break;
 8004450:	e108      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800445c:	4b85      	ldr	r3, [pc, #532]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004466:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004468:	4b82      	ldr	r3, [pc, #520]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004472:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	08db      	lsrs	r3, r3, #3
 8004478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80e1 	beq.w	8004658 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b02      	cmp	r3, #2
 800449a:	f000 8083 	beq.w	80045a4 <HAL_RCC_GetSysClockFreq+0x204>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	f200 80a1 	bhi.w	80045e8 <HAL_RCC_GetSysClockFreq+0x248>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x114>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d056      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044b2:	e099      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02d      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044c0:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	4a6b      	ldr	r2, [pc, #428]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	4b62      	ldr	r3, [pc, #392]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800451a:	e087      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004688 <HAL_RCC_GetSysClockFreq+0x2e8>
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b51      	ldr	r3, [pc, #324]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004542:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800455e:	e065      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800468c <HAL_RCC_GetSysClockFreq+0x2ec>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a02 	vldr	s12, [r7, #8]
 8004586:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e4>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a2:	e043      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004690 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e021      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800468c <HAL_RCC_GetSysClockFreq+0x2ec>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a02 	vldr	s12, [r7, #8]
 800460e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	0a5b      	lsrs	r3, r3, #9
 8004632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004636:	3301      	adds	r3, #1
 8004638:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004644:	edd7 6a07 	vldr	s13, [r7, #28]
 8004648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004650:	ee17 3a90 	vmov	r3, s15
 8004654:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004656:	e005      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
    break;
 800465c:	e002      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004660:	61bb      	str	r3, [r7, #24]
    break;
 8004662:	bf00      	nop
  }

  return sysclockfreq;
 8004664:	69bb      	ldr	r3, [r7, #24]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	; 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	58024400 	.word	0x58024400
 8004678:	03d09000 	.word	0x03d09000
 800467c:	003d0900 	.word	0x003d0900
 8004680:	016e3600 	.word	0x016e3600
 8004684:	46000000 	.word	0x46000000
 8004688:	4c742400 	.word	0x4c742400
 800468c:	4a742400 	.word	0x4a742400
 8004690:	4bb71b00 	.word	0x4bb71b00

08004694 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800469a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d105      	bne.n	80046b2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80046a6:	f000 f809 	bl	80046bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80046aa:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80046ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	58024400 	.word	0x58024400

080046bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d8:	2300      	movs	r3, #0
 80046da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f0:	d02a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f6:	d824      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046fc:	d018      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004702:	d81e      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470c:	d007      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800470e:	e018      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4ba3      	ldr	r3, [pc, #652]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4aa2      	ldr	r2, [pc, #648]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800471c:	e015      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2102      	movs	r1, #2
 8004724:	4618      	mov	r0, r3
 8004726:	f000 ff17 	bl	8005558 <RCCEx_PLL2_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800472e:	e00c      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 ffc0 	bl	80056bc <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
      break;
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004750:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475c:	4990      	ldr	r1, [pc, #576]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	650b      	str	r3, [r1, #80]	; 0x50
 8004762:	e001      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d03d      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	2b04      	cmp	r3, #4
 800477a:	d826      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	08004799 	.word	0x08004799
 8004788:	080047a7 	.word	0x080047a7
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800479e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a4:	e015      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fed3 	bl	8005558 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b6:	e00c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3324      	adds	r3, #36	; 0x24
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 ff7c 	bl	80056bc <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c8:	e003      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
      break;
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047d8:	4b71      	ldr	r3, [pc, #452]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	f023 0207 	bic.w	r2, r3, #7
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	496e      	ldr	r1, [pc, #440]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ea:	e001      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
 80047ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d042      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d02b      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d825      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800480c:	2bc0      	cmp	r3, #192	; 0xc0
 800480e:	d028      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004810:	2bc0      	cmp	r3, #192	; 0xc0
 8004812:	d821      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d016      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d81d      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d007      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004824:	e018      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004826:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004832:	e017      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fe8c 	bl	8005558 <RCCEx_PLL2_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004844:	e00e      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3324      	adds	r3, #36	; 0x24
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ff35 	bl	80056bc <RCCEx_PLL3_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004856:	e005      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
      break;
 800485c:	e002      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800486a:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	494a      	ldr	r1, [pc, #296]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004878:	4313      	orrs	r3, r2
 800487a:	650b      	str	r3, [r1, #80]	; 0x50
 800487c:	e001      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488a:	2b00      	cmp	r3, #0
 800488c:	d049      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004898:	d030      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800489a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489e:	d82a      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048a4:	d02c      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80048a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048aa:	d824      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d018      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80048b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b6:	d81e      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80048bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c0:	d007      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80048c2:	e018      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048d0:	e017      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fe3d 	bl	8005558 <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048e2:	e00e      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fee6 	bl	80056bc <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f4:	e005      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
      break;
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80048fc:	bf00      	nop
 80048fe:	e000      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004916:	4922      	ldr	r1, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	658b      	str	r3, [r1, #88]	; 0x58
 800491c:	e001      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004938:	d030      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800493a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493e:	d82a      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004944:	d02e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800494a:	d824      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800494c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004950:	d018      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004956:	d81e      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800495c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004962:	e018      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004970:	e019      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fded 	bl	8005558 <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004982:	e010      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fe96 	bl	80056bc <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004994:	e007      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
      break;
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049a0:	58024400 	.word	0x58024400
      break;
 80049a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049ac:	4b99      	ldr	r3, [pc, #612]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049ba:	4996      	ldr	r1, [pc, #600]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	658b      	str	r3, [r1, #88]	; 0x58
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d032      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d01c      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d817      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d00c      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d813      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d10f      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4b89      	ldr	r3, [pc, #548]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a88      	ldr	r2, [pc, #544]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049fa:	e00e      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fda8 	bl	8005558 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a0c:	e005      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a20:	4b7c      	ldr	r3, [pc, #496]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	4979      	ldr	r1, [pc, #484]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d047      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a52:	d82a      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a58:	d02c      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a64:	d018      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d007      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4b66      	ldr	r3, [pc, #408]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a84:	e017      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fd63 	bl	8005558 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a96:	e00e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fe0c 	bl	80056bc <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004abc:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	4952      	ldr	r1, [pc, #328]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d049      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae8:	d02e      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aee:	d828      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004af0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004af4:	d02a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afa:	d822      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004afc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b00:	d026      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b06:	d81c      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b12:	d816      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d111      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fd17 	bl	8005558 <RCCEx_PLL2_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e012      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fdc0 	bl	80056bc <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b40:	e009      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	e006      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b68:	492a      	ldr	r1, [pc, #168]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04d      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b8a:	d02e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b90:	d828      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d822      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba2:	d026      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba8:	d81c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb4:	d816      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fcc6 	bl	8005558 <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004bd0:	e012      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3324      	adds	r3, #36	; 0x24
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd6f 	bl	80056bc <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c0c:	4901      	ldr	r1, [pc, #4]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	658b      	str	r3, [r1, #88]	; 0x58
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02f      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c30:	d00e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c36:	d814      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d10f      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c42:	4baf      	ldr	r3, [pc, #700]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	4aae      	ldr	r2, [pc, #696]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fc7e 	bl	8005558 <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c70:	4ba3      	ldr	r3, [pc, #652]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7c:	49a0      	ldr	r1, [pc, #640]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	650b      	str	r3, [r1, #80]	; 0x50
 8004c82:	e001      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d032      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d81b      	bhi.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cdb 	.word	0x08004cdb
 8004ca8:	08004cb5 	.word	0x08004cb5
 8004cac:	08004cc3 	.word	0x08004cc3
 8004cb0:	08004cdb 	.word	0x08004cdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b92      	ldr	r3, [pc, #584]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a91      	ldr	r2, [pc, #580]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cc0:	e00c      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fc45 	bl	8005558 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ce2:	4b87      	ldr	r3, [pc, #540]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4984      	ldr	r1, [pc, #528]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cf4:	e001      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8086 	beq.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d08:	4b7e      	ldr	r3, [pc, #504]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7d      	ldr	r2, [pc, #500]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d14:	f7fb fef0 	bl	8000af8 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1c:	f7fb feec 	bl	8000af8 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d902      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d30:	4b74      	ldr	r3, [pc, #464]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d166      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d42:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4c:	4053      	eors	r3, r2
 8004d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d56:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d60:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a66      	ldr	r2, [pc, #408]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	4b64      	ldr	r3, [pc, #400]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d78:	4a61      	ldr	r2, [pc, #388]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d88:	d115      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fb feb5 	bl	8000af8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d90:	e00b      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fb feb1 	bl	8000af8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d902      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	75fb      	strb	r3, [r7, #23]
            break;
 8004da8:	e005      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ed      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d126      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dda:	0919      	lsrs	r1, r3, #4
 8004ddc:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004dde:	400b      	ands	r3, r1
 8004de0:	4947      	ldr	r1, [pc, #284]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	610b      	str	r3, [r1, #16]
 8004de6:	e005      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4a44      	ldr	r2, [pc, #272]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004df2:	6113      	str	r3, [r2, #16]
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e02:	493f      	ldr	r1, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	670b      	str	r3, [r1, #112]	; 0x70
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
 8004e0e:	e001      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8085 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e26:	2b28      	cmp	r3, #40	; 0x28
 8004e28:	d866      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004f0d 	.word	0x08004f0d
 8004e34:	08004ef9 	.word	0x08004ef9
 8004e38:	08004ef9 	.word	0x08004ef9
 8004e3c:	08004ef9 	.word	0x08004ef9
 8004e40:	08004ef9 	.word	0x08004ef9
 8004e44:	08004ef9 	.word	0x08004ef9
 8004e48:	08004ef9 	.word	0x08004ef9
 8004e4c:	08004ef9 	.word	0x08004ef9
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ef9 	.word	0x08004ef9
 8004e58:	08004ef9 	.word	0x08004ef9
 8004e5c:	08004ef9 	.word	0x08004ef9
 8004e60:	08004ef9 	.word	0x08004ef9
 8004e64:	08004ef9 	.word	0x08004ef9
 8004e68:	08004ef9 	.word	0x08004ef9
 8004e6c:	08004ef9 	.word	0x08004ef9
 8004e70:	08004ee7 	.word	0x08004ee7
 8004e74:	08004ef9 	.word	0x08004ef9
 8004e78:	08004ef9 	.word	0x08004ef9
 8004e7c:	08004ef9 	.word	0x08004ef9
 8004e80:	08004ef9 	.word	0x08004ef9
 8004e84:	08004ef9 	.word	0x08004ef9
 8004e88:	08004ef9 	.word	0x08004ef9
 8004e8c:	08004ef9 	.word	0x08004ef9
 8004e90:	08004f0d 	.word	0x08004f0d
 8004e94:	08004ef9 	.word	0x08004ef9
 8004e98:	08004ef9 	.word	0x08004ef9
 8004e9c:	08004ef9 	.word	0x08004ef9
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004ef9 	.word	0x08004ef9
 8004eb0:	08004f0d 	.word	0x08004f0d
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0d 	.word	0x08004f0d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fb3c 	bl	8005558 <RCCEx_PLL2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ee4:	e013      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fbe5 	bl	80056bc <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      break;
 8004efc:	e007      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004efe:	bf00      	nop
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58024800 	.word	0x58024800
 8004f08:	00ffffcf 	.word	0x00ffffcf
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f14:	4b96      	ldr	r3, [pc, #600]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f20:	4993      	ldr	r1, [pc, #588]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	654b      	str	r3, [r1, #84]	; 0x54
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d038      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d821      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f8b 	.word	0x08004f8b
 8004f4c:	08004f61 	.word	0x08004f61
 8004f50:	08004f73 	.word	0x08004f73
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 faf6 	bl	8005558 <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f70:	e00c      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3324      	adds	r3, #36	; 0x24
 8004f76:	2101      	movs	r1, #1
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fb9f 	bl	80056bc <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f82:	e003      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
      break;
 8004f88:	e000      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f92:	4b77      	ldr	r3, [pc, #476]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	4974      	ldr	r1, [pc, #464]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8004fa4:	e001      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d821      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	0800500b 	.word	0x0800500b
 8004fcc:	08004fe1 	.word	0x08004fe1
 8004fd0:	08004ff3 	.word	0x08004ff3
 8004fd4:	0800500b 	.word	0x0800500b
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	0800500b 	.word	0x0800500b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fab6 	bl	8005558 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ff0:	e00c      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fb5f 	bl	80056bc <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800500a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005012:	4b57      	ldr	r3, [pc, #348]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4953      	ldr	r1, [pc, #332]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	658b      	str	r3, [r1, #88]	; 0x58
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04b      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005042:	d02e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005048:	d828      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d02a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d822      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800505a:	d026      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800505c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005060:	d81c      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005066:	d010      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506c:	d816      	bhi.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01d      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d111      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fa6a 	bl	8005558 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005088:	e012      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fb13 	bl	80056bc <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800509a:	e009      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
      break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b6:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c4:	492a      	ldr	r1, [pc, #168]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	654b      	str	r3, [r1, #84]	; 0x54
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050e6:	d02e      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80050e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050ec:	d828      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d02a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d822      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80050fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050fe:	d026      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005104:	d81c      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d010      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	d816      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01d      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d111      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa18 	bl	8005558 <RCCEx_PLL2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800512c:	e012      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fac1 	bl	80056bc <RCCEx_PLL3_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800513e:	e009      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
      break;
 8005144:	e006      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005146:	bf00      	nop
 8005148:	e004      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005168:	4901      	ldr	r1, [pc, #4]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	658b      	str	r3, [r1, #88]	; 0x58
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d04b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800518a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800518e:	d02e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005194:	d828      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519a:	d02a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	d822      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051a6:	d026      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80051a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051ac:	d81c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b2:	d010      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d816      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01d      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80051be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c2:	d111      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f9c4 	bl	8005558 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051d4:	e012      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fa6d 	bl	80056bc <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80051e6:	e009      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e006      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80051fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005202:	4b9d      	ldr	r3, [pc, #628]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005210:	4999      	ldr	r1, [pc, #612]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005212:	4313      	orrs	r3, r2
 8005214:	658b      	str	r3, [r1, #88]	; 0x58
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d10a      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	2102      	movs	r1, #2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fa3e 	bl	80056bc <RCCEx_PLL3_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800524a:	4b8b      	ldr	r3, [pc, #556]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005258:	4987      	ldr	r1, [pc, #540]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800525a:	4313      	orrs	r3, r2
 800525c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d10a      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fa1d 	bl	80056bc <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800528c:	4b7a      	ldr	r3, [pc, #488]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	4977      	ldr	r1, [pc, #476]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800529c:	4313      	orrs	r3, r2
 800529e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d034      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b6:	d01d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80052b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052bc:	d817      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d009      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80052c8:	e011      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f941 	bl	8005558 <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052da:	e00c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3324      	adds	r3, #36	; 0x24
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f9ea 	bl	80056bc <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
      break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80052f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052fc:	4b5e      	ldr	r3, [pc, #376]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800530a:	495b      	ldr	r1, [pc, #364]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800530c:	4313      	orrs	r3, r2
 800530e:	658b      	str	r3, [r1, #88]	; 0x58
 8005310:	e001      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d033      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800532c:	d01c      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800532e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005332:	d816      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005338:	d003      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800533a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533e:	d007      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005340:	e00f      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005342:	4b4d      	ldr	r3, [pc, #308]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a4c      	ldr	r2, [pc, #304]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800534e:	e00c      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f9b0 	bl	80056bc <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
      break;
 8005366:	e000      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	493e      	ldr	r1, [pc, #248]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005380:	4313      	orrs	r3, r2
 8005382:	654b      	str	r3, [r1, #84]	; 0x54
 8005384:	e001      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d029      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d007      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80053a4:	e00f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053b2:	e00b      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	2102      	movs	r1, #2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f8cc 	bl	8005558 <RCCEx_PLL2_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	4926      	ldr	r1, [pc, #152]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053e4:	e001      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
 80053e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3324      	adds	r3, #36	; 0x24
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f95d 	bl	80056bc <RCCEx_PLL3_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d033      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005420:	d017      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005426:	d811      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d013      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005432:	d80b      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800544a:	e007      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	e004      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800545a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546e:	4902      	ldr	r1, [pc, #8]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005470:	4313      	orrs	r3, r2
 8005472:	654b      	str	r3, [r1, #84]	; 0x54
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	492e      	ldr	r1, [pc, #184]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800549a:	4313      	orrs	r3, r2
 800549c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054b8:	4926      	ldr	r1, [pc, #152]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d6:	491f      	ldr	r1, [pc, #124]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f2:	6113      	str	r3, [r2, #16]
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054fe:	4915      	ldr	r1, [pc, #84]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005500:	4313      	orrs	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da08      	bge.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800551a:	4313      	orrs	r3, r2
 800551c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	4906      	ldr	r1, [pc, #24]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800553a:	4313      	orrs	r3, r2
 800553c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800553e:	7dbb      	ldrb	r3, [r7, #22]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	58024400 	.word	0x58024400

08005558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005566:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d101      	bne.n	8005576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e099      	b.n	80056aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005576:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a4e      	ldr	r2, [pc, #312]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800557c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fb fab9 	bl	8000af8 <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005588:	e008      	b.n	800559c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800558a:	f7fb fab5 	bl	8000af8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e086      	b.n	80056aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055a8:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	493f      	ldr	r1, [pc, #252]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	628b      	str	r3, [r1, #40]	; 0x28
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	025b      	lsls	r3, r3, #9
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055ec:	4931      	ldr	r1, [pc, #196]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055f2:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	492d      	ldr	r1, [pc, #180]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005604:	4b2b      	ldr	r3, [pc, #172]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f023 0220 	bic.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	4928      	ldr	r1, [pc, #160]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005616:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f023 0310 	bic.w	r3, r3, #16
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005622:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <RCCEx_PLL2_Config+0x160>)
 8005628:	4013      	ands	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	69d2      	ldr	r2, [r2, #28]
 800562e:	00d2      	lsls	r2, r2, #3
 8005630:	4920      	ldr	r1, [pc, #128]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005636:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800563c:	f043 0310 	orr.w	r3, r3, #16
 8005640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800564e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005654:	e00f      	b.n	8005676 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005668:	e005      	b.n	8005676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	4a11      	ldr	r2, [pc, #68]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800567c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005682:	f7fb fa39 	bl	8000af8 <HAL_GetTick>
 8005686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005688:	e008      	b.n	800569c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800568a:	f7fb fa35 	bl	8000af8 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	ffff0007 	.word	0xffff0007

080056bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ca:	4b53      	ldr	r3, [pc, #332]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d101      	bne.n	80056da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e099      	b.n	800580e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056da:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a4e      	ldr	r2, [pc, #312]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e6:	f7fb fa07 	bl	8000af8 <HAL_GetTick>
 80056ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056ec:	e008      	b.n	8005700 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056ee:	f7fb fa03 	bl	8000af8 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e086      	b.n	800580e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005700:	4b45      	ldr	r3, [pc, #276]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800570c:	4b42      	ldr	r3, [pc, #264]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	051b      	lsls	r3, r3, #20
 800571a:	493f      	ldr	r1, [pc, #252]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	628b      	str	r3, [r1, #40]	; 0x28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	3b01      	subs	r3, #1
 8005730:	025b      	lsls	r3, r3, #9
 8005732:	b29b      	uxth	r3, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	3b01      	subs	r3, #1
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005750:	4931      	ldr	r1, [pc, #196]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	492d      	ldr	r1, [pc, #180]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005764:	4313      	orrs	r3, r2
 8005766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005768:	4b2b      	ldr	r3, [pc, #172]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4928      	ldr	r1, [pc, #160]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800577a:	4b27      	ldr	r3, [pc, #156]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a26      	ldr	r2, [pc, #152]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <RCCEx_PLL3_Config+0x160>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	69d2      	ldr	r2, [r2, #28]
 8005792:	00d2      	lsls	r2, r2, #3
 8005794:	4920      	ldr	r1, [pc, #128]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800579a:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057b8:	e00f      	b.n	80057da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057c0:	4b15      	ldr	r3, [pc, #84]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a14      	ldr	r2, [pc, #80]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057cc:	e005      	b.n	80057da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	4a11      	ldr	r2, [pc, #68]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a0e      	ldr	r2, [pc, #56]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e6:	f7fb f987 	bl	8000af8 <HAL_GetTick>
 80057ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057ec:	e008      	b.n	8005800 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057ee:	f7fb f983 	bl	8000af8 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	58024400 	.word	0x58024400
 800581c:	ffff0007 	.word	0xffff0007

08005820 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0f1      	b.n	8005a16 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a78      	ldr	r2, [pc, #480]	; (8005a20 <HAL_SPI_Init+0x200>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <HAL_SPI_Init+0x42>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a77      	ldr	r2, [pc, #476]	; (8005a24 <HAL_SPI_Init+0x204>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00a      	beq.n	8005862 <HAL_SPI_Init+0x42>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a75      	ldr	r2, [pc, #468]	; (8005a28 <HAL_SPI_Init+0x208>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d005      	beq.n	8005862 <HAL_SPI_Init+0x42>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b0f      	cmp	r3, #15
 800585c:	d901      	bls.n	8005862 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0d9      	b.n	8005a16 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fe00 	bl	8006468 <SPI_GetPacketSize>
 8005868:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6c      	ldr	r2, [pc, #432]	; (8005a20 <HAL_SPI_Init+0x200>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00c      	beq.n	800588e <HAL_SPI_Init+0x6e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a6a      	ldr	r2, [pc, #424]	; (8005a24 <HAL_SPI_Init+0x204>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <HAL_SPI_Init+0x6e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a69      	ldr	r2, [pc, #420]	; (8005a28 <HAL_SPI_Init+0x208>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d002      	beq.n	800588e <HAL_SPI_Init+0x6e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d811      	bhi.n	80058b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005892:	4a63      	ldr	r2, [pc, #396]	; (8005a20 <HAL_SPI_Init+0x200>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a61      	ldr	r2, [pc, #388]	; (8005a24 <HAL_SPI_Init+0x204>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_SPI_Init+0x8c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a60      	ldr	r2, [pc, #384]	; (8005a28 <HAL_SPI_Init+0x208>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d104      	bne.n	80058b6 <HAL_SPI_Init+0x96>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d901      	bls.n	80058b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0af      	b.n	8005a16 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fa fea4 	bl	8000618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0201 	bic.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80058f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058fc:	d119      	bne.n	8005932 <HAL_SPI_Init+0x112>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005906:	d103      	bne.n	8005910 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10c      	bne.n	8005932 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800591c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005920:	d107      	bne.n	8005932 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	ea42 0103 	orr.w	r1, r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005992:	ea42 0103 	orr.w	r1, r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d113      	bne.n	80059d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40013000 	.word	0x40013000
 8005a24:	40003800 	.word	0x40003800
 8005a28:	40003c00 	.word	0x40003c00

08005a2c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e1b4      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a62:	7dbb      	ldrb	r3, [r7, #22]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d012      	beq.n	8005a8e <HAL_SPI_TransmitReceive_DMA+0x62>
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d106      	bne.n	8005a7e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005a78:	7dbb      	ldrb	r3, [r7, #22]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d007      	beq.n	8005a8e <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	e193      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d107      	bne.n	8005ab0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	e182      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d003      	beq.n	8005ac4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2205      	movs	r2, #5
 8005ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	887a      	ldrh	r2, [r7, #2]
 8005ade:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b12:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b0f      	cmp	r3, #15
 8005b1a:	d905      	bls.n	8005b28 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b26:	d10f      	bne.n	8005b48 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b2c:	2b07      	cmp	r3, #7
 8005b2e:	d913      	bls.n	8005b58 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d00d      	beq.n	8005b58 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b40:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b46:	d007      	beq.n	8005b58 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	e12e      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	d840      	bhi.n	8005be2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6a:	d109      	bne.n	8005b80 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	105b      	asrs	r3, r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b8a:	d109      	bne.n	8005ba0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3303      	adds	r3, #3
 8005b96:	109b      	asrs	r3, r3, #2
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d109      	bne.n	8005bc0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	105b      	asrs	r3, r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bca:	d12e      	bne.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	109b      	asrs	r3, r3, #2
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005be0:	e023      	b.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	d81f      	bhi.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf4:	d109      	bne.n	8005c0a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	105b      	asrs	r3, r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c14:	d109      	bne.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	105b      	asrs	r3, r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d108      	bne.n	8005c48 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3a:	4a61      	ldr	r2, [pc, #388]	; (8005dc0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	4a60      	ldr	r2, [pc, #384]	; (8005dc4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c46:	e007      	b.n	8005c58 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4c:	4a5e      	ldr	r2, [pc, #376]	; (8005dc8 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c54:	4a5d      	ldr	r2, [pc, #372]	; (8005dcc <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5c:	4a5c      	ldr	r2, [pc, #368]	; (8005dd0 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c64:	2200      	movs	r2, #0
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3330      	adds	r3, #48	; 0x30
 8005c72:	4619      	mov	r1, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c78:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c80:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8005c82:	f7fb fbe1 	bl	8001448 <HAL_DMA_Start_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	f043 0210 	orr.w	r2, r3, #16
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	e080      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd8:	2200      	movs	r2, #0
 8005cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	4619      	mov	r1, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8005cfe:	f7fb fba3 	bl	8001448 <HAL_DMA_Start_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0e:	f043 0210 	orr.w	r2, r3, #16
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	e042      	b.n	8005db6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d108      	bne.n	8005d4e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8005d48:	400b      	ands	r3, r1
 8005d4a:	6053      	str	r3, [r2, #4]
 8005d4c:	e009      	b.n	8005d62 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	8879      	ldrh	r1, [r7, #2]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d70:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8005d80:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9a:	d107      	bne.n	8005dac <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005daa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08006275 	.word	0x08006275
 8005dc4:	080061e9 	.word	0x080061e9
 8005dc8:	08006291 	.word	0x08006291
 8005dcc:	0800622f 	.word	0x0800622f
 8005dd0:	080062ad 	.word	0x080062ad
 8005dd4:	ffff0000 	.word	0xffff0000

08005dd8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e0a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3330      	adds	r3, #48	; 0x30
 8005e12:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <HAL_SPI_IRQHandler+0x6e>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10e      	bne.n	8005e46 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
    handled = 1UL;
 8005e42:	2301      	movs	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10f      	bne.n	8005e70 <HAL_SPI_IRQHandler+0x98>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
    handled = 1UL;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <HAL_SPI_IRQHandler+0xc2>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
    handled = 1UL;
 8005e96:	2301      	movs	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 815a 	bne.w	8006156 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 808b 	beq.w	8005fc4 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0210 	orr.w	r2, r2, #16
 8005ecc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005edc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0208 	bic.w	r2, r2, #8
 8005eec:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d13d      	bne.n	8005f78 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005efc:	e036      	b.n	8005f6c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d90b      	bls.n	8005f1e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f10:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	665a      	str	r2, [r3, #100]	; 0x64
 8005f1c:	e01d      	b.n	8005f5a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	d90b      	bls.n	8005f3e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	8812      	ldrh	r2, [r2, #0]
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	665a      	str	r2, [r3, #100]	; 0x64
 8005f3c:	e00d      	b.n	8005f5a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1c2      	bne.n	8005efe <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9d5 	bl	8006328 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f91f 	bl	80061d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f96:	e0e3      	b.n	8006160 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d103      	bne.n	8005fa6 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8fa 	bl	8006198 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005fa4:	e0d9      	b.n	800615a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d103      	bne.n	8005fb4 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8e9 	bl	8006184 <HAL_SPI_RxCpltCallback>
    return;
 8005fb2:	e0d2      	b.n	800615a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f040 80cf 	bne.w	800615a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f8d7 	bl	8006170 <HAL_SPI_TxCpltCallback>
    return;
 8005fc2:	e0ca      	b.n	800615a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <HAL_SPI_IRQHandler+0x212>
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe6:	619a      	str	r2, [r3, #24]

    return;
 8005fe8:	e0ba      	b.n	8006160 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80b5 	beq.w	8006160 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800601e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00f      	beq.n	800604a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006048:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00f      	beq.n	8006074 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605a:	f043 0208 	orr.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006072:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0220 	orr.w	r2, r2, #32
 800609c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05a      	beq.n	800615e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6919      	ldr	r1, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b29      	ldr	r3, [pc, #164]	; (8006168 <HAL_SPI_IRQHandler+0x390>)
 80060c4:	400b      	ands	r3, r1
 80060c6:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060d2:	d138      	bne.n	8006146 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80060e2:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f0:	4a1e      	ldr	r2, [pc, #120]	; (800616c <HAL_SPI_IRQHandler+0x394>)
 80060f2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fb fc0f 	bl	800191c <HAL_DMA_Abort_IT>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006118:	2b00      	cmp	r3, #0
 800611a:	d020      	beq.n	800615e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006120:	4a12      	ldr	r2, [pc, #72]	; (800616c <HAL_SPI_IRQHandler+0x394>)
 8006122:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006128:	4618      	mov	r0, r3
 800612a:	f7fb fbf7 	bl	800191c <HAL_DMA_Abort_IT>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d014      	beq.n	800615e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006144:	e00b      	b.n	800615e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f840 	bl	80061d4 <HAL_SPI_ErrorCallback>
    return;
 8006154:	e003      	b.n	800615e <HAL_SPI_IRQHandler+0x386>
    return;
 8006156:	bf00      	nop
 8006158:	e002      	b.n	8006160 <HAL_SPI_IRQHandler+0x388>
    return;
 800615a:	bf00      	nop
 800615c:	e000      	b.n	8006160 <HAL_SPI_IRQHandler+0x388>
    return;
 800615e:	bf00      	nop
  }
}
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	fffffc94 	.word	0xfffffc94
 800616c:	080062f3 	.word	0x080062f3

08006170 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b07      	cmp	r3, #7
 8006200:	d011      	beq.n	8006226 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d103      	bne.n	8006216 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ffb8 	bl	8006184 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8006214:	e007      	b.n	8006226 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0208 	orr.w	r2, r2, #8
 8006224:	611a      	str	r2, [r3, #16]
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b07      	cmp	r3, #7
 8006246:	d011      	beq.n	800626c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006252:	d103      	bne.n	800625c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff9f 	bl	8006198 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800625a:	e007      	b.n	800626c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	611a      	str	r2, [r3, #16]
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff ff92 	bl	80061ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff ff8e 	bl	80061c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fc fc9e 	bl	8002bfc <HAL_DMA_GetError>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d011      	beq.n	80062ea <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f82e 	bl	8006328 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d2:	f043 0210 	orr.w	r2, r3, #16
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ff75 	bl	80061d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff ff5b 	bl	80061d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0210 	orr.w	r2, r2, #16
 8006356:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b3c      	ldr	r3, [pc, #240]	; (8006464 <SPI_CloseTransfer+0x13c>)
 8006374:	400b      	ands	r3, r1
 8006376:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006386:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b04      	cmp	r3, #4
 8006392:	d014      	beq.n	80063be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0220 	orr.w	r2, r2, #32
 80063bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d014      	beq.n	80063f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00f      	beq.n	80063f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063da:	f043 0204 	orr.w	r2, r3, #4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00f      	beq.n	800641e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	f043 0201 	orr.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00f      	beq.n	8006448 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006446:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	fffffc90 	.word	0xfffffc90

08006468 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3307      	adds	r3, #7
 8006486:	08db      	lsrs	r3, r3, #3
 8006488:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <__libc_init_array>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4d0d      	ldr	r5, [pc, #52]	; (80064d8 <__libc_init_array+0x38>)
 80064a4:	4c0d      	ldr	r4, [pc, #52]	; (80064dc <__libc_init_array+0x3c>)
 80064a6:	1b64      	subs	r4, r4, r5
 80064a8:	10a4      	asrs	r4, r4, #2
 80064aa:	2600      	movs	r6, #0
 80064ac:	42a6      	cmp	r6, r4
 80064ae:	d109      	bne.n	80064c4 <__libc_init_array+0x24>
 80064b0:	4d0b      	ldr	r5, [pc, #44]	; (80064e0 <__libc_init_array+0x40>)
 80064b2:	4c0c      	ldr	r4, [pc, #48]	; (80064e4 <__libc_init_array+0x44>)
 80064b4:	f000 f820 	bl	80064f8 <_init>
 80064b8:	1b64      	subs	r4, r4, r5
 80064ba:	10a4      	asrs	r4, r4, #2
 80064bc:	2600      	movs	r6, #0
 80064be:	42a6      	cmp	r6, r4
 80064c0:	d105      	bne.n	80064ce <__libc_init_array+0x2e>
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c8:	4798      	blx	r3
 80064ca:	3601      	adds	r6, #1
 80064cc:	e7ee      	b.n	80064ac <__libc_init_array+0xc>
 80064ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d2:	4798      	blx	r3
 80064d4:	3601      	adds	r6, #1
 80064d6:	e7f2      	b.n	80064be <__libc_init_array+0x1e>
 80064d8:	08006528 	.word	0x08006528
 80064dc:	08006528 	.word	0x08006528
 80064e0:	08006528 	.word	0x08006528
 80064e4:	0800652c 	.word	0x0800652c

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <_init>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr

08006504 <_fini>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr
